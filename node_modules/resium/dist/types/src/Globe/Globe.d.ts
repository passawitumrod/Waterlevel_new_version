/// <reference types="cesium" />
export interface ResiumGlobe extends Cesium.Globe {
    imageryLayersUpdatedEvent: Cesium.Event<[]>;
    terrainProviderChanged: Cesium.Event<[Cesium.TerrainProvider]>;
    tileLoadProgressEvent: Cesium.Event<[number]>;
}
export interface GlobeCesiumProps {
    atmosphereBrightnessShift?: number;
    atmosphereHueShift?: number;
    atmosphereSaturationShift?: number;
    backFaceCulling?: boolean;
    baseColor?: Cesium.Color;
    clippingPlanes?: Cesium.ClippingPlaneCollection;
    depthTestAgainstTerrain?: boolean;
    enableLighting?: boolean;
    lightingFadeInDistance?: number;
    lightingFadeOutDistance?: number;
    material?: Cesium.Material;
    maximumScreenSpaceError?: number;
    nightFadeInDistance?: number;
    nightFadeOutDistance?: number;
    oceanNormalMapUrl?: string;
    shadows?: Cesium.ShadowMode;
    show?: boolean;
    showGroundAtmosphere?: boolean;
    showWaterEffect?: boolean;
    terrainProvider?: Cesium.TerrainProvider;
    tileCacheSize?: number;
}
export interface GlobeCesiumEvents {
    onImageryLayersUpdate?: () => void;
    onTerrainProviderChange?: (terrainProvider: Cesium.TerrainProvider) => void;
    onTileLoadProgress?: (currentLoadQueueLength: number) => void;
}
export interface GlobeProps extends GlobeCesiumProps, GlobeCesiumEvents {
}
declare const Globe: import("../core/component").CesiumComponentType<ResiumGlobe, GlobeProps>;
export default Globe;
