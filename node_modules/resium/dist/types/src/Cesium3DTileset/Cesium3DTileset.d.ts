/// <reference types="cesium" />
import { EventProps } from "../core/EventManager";
declare type ResiumCesium3DTileset = Cesium.Cesium3DTileset & {
    tileUnload?: Cesium.Event<[]>;
};
export interface Cesium3DTilesetCesiumProps {
    show?: boolean;
    modelMatrix?: Cesium.Matrix4;
    shadows?: Cesium.ShadowMode;
    maximumScreenSpaceError?: number;
    maximumMemoryUsage?: number;
    cullRequestsWhileMoving?: boolean;
    cullRequestsWhileMovingMultiplier?: number;
    preloadWhenHidden?: boolean;
    preloadFlightDestinations?: boolean;
    preferLeaves?: boolean;
    progressiveResolutionHeightFraction?: number;
    foveatedScreenSpaceError?: boolean;
    foveatedConeSize?: number;
    foveatedMinimumScreenSpaceErrorRelaxation?: number;
    foveatedInterpolationCallback?: (p: number, q: number, time: number) => void;
    foveatedTimeDelay?: boolean;
    cullWithChildrenBounds?: boolean;
    dynamicScreenSpaceError?: boolean;
    dynamicScreenSpaceErrorDensity?: number;
    dynamicScreenSpaceErrorFactor?: number;
    dynamicScreenSpaceErrorHeightFalloff?: number;
    skipLevelOfDetail?: boolean;
    baseScreenSpaceError?: number;
    skipScreenSpaceErrorFactor?: number;
    skipLevels?: number;
    immediatelyLoadDesiredLevelOfDetail?: boolean;
    loadSiblings?: boolean;
    clippingPlanes?: Cesium.ClippingPlaneCollection;
    classificationType?: Cesium.ClassificationType;
    ellipsoid?: Cesium.Ellipsoid;
    imageBasedLightingFactor?: Cesium.Cartesian2;
    lightColor?: Cesium.Cartesian3;
    debugFreezeFrame?: boolean;
    debugColorizeTiles?: boolean;
    debugWireframe?: boolean;
    debugShowBoundingVolume?: boolean;
    debugShowContentBoundingVolume?: boolean;
    debugShowViewerRequestVolume?: boolean;
    debugShowGeometricError?: boolean;
    debugShowRenderingStatistics?: boolean;
    debugShowMemoryUsage?: boolean;
    debugShowUrl?: boolean;
    colorBlendAmount?: number;
    colorBlendMode?: Cesium.Cesium3DTileColorBlendMode;
    luminanceAtZenith?: number;
    sphericalHarmonicCoefficients?: Cesium.Cartesian3[];
    specularEnvironmentMaps?: string;
}
export interface Cesium3DTilesetCesiumReadonlyProps {
    url: Cesium.Resource | string | Promise<Cesium.Resource> | Promise<string>;
    pointCloudShading?: {
        attenuation?: boolean;
        geometricErrorScale?: number;
        maximumAttenuation?: number;
        baseResolution?: number;
        eyeDomeLighting?: boolean;
        eyeDomeLightingStrength?: number;
        eyeDomeLightingRadius?: number;
    };
}
export interface Cesium3DTilesetCesiumEvents {
    onAllTilesLoad?: () => void;
    onInitialTilesLoad?: () => void;
    onLoadProgress?: (numberOfPendingRequests: number, numberOfTilesProcessing: number) => void;
    onTileFailed?: () => void;
    onTileLoad?: (tile: Cesium.Cesium3DTileset) => void;
    onTileUnload?: () => void;
    onTileVisible?: (tile: Cesium.Cesium3DTileset) => void;
}
export interface Cesium3DTilesetProps extends Cesium3DTilesetCesiumProps, Cesium3DTilesetCesiumReadonlyProps, Cesium3DTilesetCesiumEvents, EventProps<Cesium.Cesium3DTileFeature> {
    onReady?: (tileset: Cesium.Cesium3DTileset) => void;
}
declare const Cesium3DTileset: import("../core/component").CesiumComponentType<ResiumCesium3DTileset, Cesium3DTilesetProps>;
export default Cesium3DTileset;
