import { ModelGraphics as CesiumModelGraphics } from "cesium";
export interface ModelGraphicsCesiumProps {
    uri?: Cesium.Property | string;
    show?: Cesium.Property | boolean;
    scale?: Cesium.Property | number;
    minimumPixelSize?: Cesium.Property | number;
    maximumScale?: Cesium.Property | number;
    incrementallyLoadTextures?: Cesium.Property | boolean;
    runAnimations?: Cesium.Property | boolean;
    clampAnimations?: Cesium.Property | boolean;
    nodeTransformations?: Cesium.Property | any;
    shadows?: Cesium.Property | Cesium.ShadowMode;
    heightReference?: Cesium.Property | Cesium.HeightReference;
    distanceDisplayCondition?: Cesium.Property | Cesium.DistanceDisplayCondition;
    silhouetteColor?: Cesium.Property | Cesium.Color;
    silhouetteSize?: Cesium.Property | number;
    color?: Cesium.Property | Cesium.Color;
    colorBlendMode?: Cesium.Property | any;
    colorBlendAmount?: Cesium.Property | number;
    clippingPlanes?: Cesium.Property | Cesium.ClippingPlaneCollection;
    imageBasedLightingFactor?: Cesium.Property | Cesium.Cartesian2;
    lightColor?: Cesium.Property | Cesium.Color;
}
export interface ModelGraphicsCesiumEvents {
    onDefinitionChange?: () => void;
}
export interface ModelGraphicsProps extends ModelGraphicsCesiumProps, ModelGraphicsCesiumEvents {
}
declare const ModelGraphics: import("../core/component").CesiumComponentType<CesiumModelGraphics, ModelGraphicsProps>;
export default ModelGraphics;
