import { Model as CesiumModel } from "cesium";
import { EventProps } from "../core/EventManager";
export interface ModelCesiumProps {
    basePath?: Cesium.Resource | string;
    show?: boolean;
    modelMatrix?: Cesium.Matrix4;
    scale?: number;
    minimumPixelSize?: number;
    maximumScale?: number;
    id?: any;
    clampAnimations?: boolean;
    shadows?: Cesium.ShadowMode;
    debugShowBoundingVolume?: boolean;
    debugWireframe?: boolean;
    scene?: Cesium.Scene;
    distanceDisplayCondition?: Cesium.DistanceDisplayCondition;
    color?: Cesium.Color;
    colorBlendMode?: any;
    colorBlendAmount?: number;
    silhouetteColor?: Cesium.Color;
    silhouetteSize?: number;
    clippingPlanes?: Cesium.ClippingPlaneCollection;
    dequantizeInShader?: boolean;
    imageBasedLightingFactor?: Cesium.Cartesian2;
    lightColor?: Cesium.Cartesian3;
    luminanceAtZenith?: number;
    sphericalHarmonicCoefficients?: Cesium.Cartesian3[];
    specularEnvironmentMaps?: string;
}
export interface ModelCesiumReadonlyProps {
    allowPicking?: boolean;
    asynchronous?: boolean;
    gltf?: object | ArrayBuffer | Uint8Array;
    incrementallyLoadTextures?: boolean;
    url?: Cesium.Resource | string;
    credit?: Cesium.Credit | string;
}
export interface ModelProps extends ModelCesiumProps, ModelCesiumReadonlyProps, EventProps<{
    id?: string;
    mesh: Cesium.ModelMesh;
    node: Cesium.ModelNode;
    primitive: Cesium.Primitive;
}> {
    onReady?: (model: Cesium.Model) => void;
}
declare const Model: import("../core/component").CesiumComponentType<CesiumModel, ModelProps>;
export default Model;
