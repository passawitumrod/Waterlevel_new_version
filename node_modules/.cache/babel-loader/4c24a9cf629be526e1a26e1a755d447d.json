{"ast":null,"code":"import CesiumMath from \"./Math.js\";\n/**\n * @private\n */\n\nvar CylinderGeometryLibrary = {};\n/**\n * @private\n */\n\nCylinderGeometryLibrary.computePositions = function (length, topRadius, bottomRadius, slices, fill) {\n  var topZ = length * 0.5;\n  var bottomZ = -topZ;\n  var twoSlice = slices + slices;\n  var size = fill ? 2 * twoSlice : twoSlice;\n  var positions = new Float64Array(size * 3);\n  var i;\n  var index = 0;\n  var tbIndex = 0;\n  var bottomOffset = fill ? twoSlice * 3 : 0;\n  var topOffset = fill ? (twoSlice + slices) * 3 : slices * 3;\n\n  for (i = 0; i < slices; i++) {\n    var angle = i / slices * CesiumMath.TWO_PI;\n    var x = Math.cos(angle);\n    var y = Math.sin(angle);\n    var bottomX = x * bottomRadius;\n    var bottomY = y * bottomRadius;\n    var topX = x * topRadius;\n    var topY = y * topRadius;\n    positions[tbIndex + bottomOffset] = bottomX;\n    positions[tbIndex + bottomOffset + 1] = bottomY;\n    positions[tbIndex + bottomOffset + 2] = bottomZ;\n    positions[tbIndex + topOffset] = topX;\n    positions[tbIndex + topOffset + 1] = topY;\n    positions[tbIndex + topOffset + 2] = topZ;\n    tbIndex += 3;\n\n    if (fill) {\n      positions[index++] = bottomX;\n      positions[index++] = bottomY;\n      positions[index++] = bottomZ;\n      positions[index++] = topX;\n      positions[index++] = topY;\n      positions[index++] = topZ;\n    }\n  }\n\n  return positions;\n};\n\nexport default CylinderGeometryLibrary;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/CylinderGeometryLibrary.js"],"names":["CesiumMath","CylinderGeometryLibrary","computePositions","length","topRadius","bottomRadius","slices","fill","topZ","bottomZ","twoSlice","size","positions","Float64Array","i","index","tbIndex","bottomOffset","topOffset","angle","TWO_PI","x","Math","cos","y","sin","bottomX","bottomY","topX","topY"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,WAAvB;AAEA;;;;AAGA,IAAIC,uBAAuB,GAAG,EAA9B;AAEA;;;;AAGAA,uBAAuB,CAACC,gBAAxB,GAA2C,UACzCC,MADyC,EAEzCC,SAFyC,EAGzCC,YAHyC,EAIzCC,MAJyC,EAKzCC,IALyC,EAMzC;AACA,MAAIC,IAAI,GAAGL,MAAM,GAAG,GAApB;AACA,MAAIM,OAAO,GAAG,CAACD,IAAf;AAEA,MAAIE,QAAQ,GAAGJ,MAAM,GAAGA,MAAxB;AACA,MAAIK,IAAI,GAAGJ,IAAI,GAAG,IAAIG,QAAP,GAAkBA,QAAjC;AACA,MAAIE,SAAS,GAAG,IAAIC,YAAJ,CAAiBF,IAAI,GAAG,CAAxB,CAAhB;AACA,MAAIG,CAAJ;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,OAAO,GAAG,CAAd;AACA,MAAIC,YAAY,GAAGV,IAAI,GAAGG,QAAQ,GAAG,CAAd,GAAkB,CAAzC;AACA,MAAIQ,SAAS,GAAGX,IAAI,GAAG,CAACG,QAAQ,GAAGJ,MAAZ,IAAsB,CAAzB,GAA6BA,MAAM,GAAG,CAA1D;;AAEA,OAAKQ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGR,MAAhB,EAAwBQ,CAAC,EAAzB,EAA6B;AAC3B,QAAIK,KAAK,GAAIL,CAAC,GAAGR,MAAL,GAAeN,UAAU,CAACoB,MAAtC;AACA,QAAIC,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASJ,KAAT,CAAR;AACA,QAAIK,CAAC,GAAGF,IAAI,CAACG,GAAL,CAASN,KAAT,CAAR;AACA,QAAIO,OAAO,GAAGL,CAAC,GAAGhB,YAAlB;AACA,QAAIsB,OAAO,GAAGH,CAAC,GAAGnB,YAAlB;AACA,QAAIuB,IAAI,GAAGP,CAAC,GAAGjB,SAAf;AACA,QAAIyB,IAAI,GAAGL,CAAC,GAAGpB,SAAf;AAEAQ,IAAAA,SAAS,CAACI,OAAO,GAAGC,YAAX,CAAT,GAAoCS,OAApC;AACAd,IAAAA,SAAS,CAACI,OAAO,GAAGC,YAAV,GAAyB,CAA1B,CAAT,GAAwCU,OAAxC;AACAf,IAAAA,SAAS,CAACI,OAAO,GAAGC,YAAV,GAAyB,CAA1B,CAAT,GAAwCR,OAAxC;AAEAG,IAAAA,SAAS,CAACI,OAAO,GAAGE,SAAX,CAAT,GAAiCU,IAAjC;AACAhB,IAAAA,SAAS,CAACI,OAAO,GAAGE,SAAV,GAAsB,CAAvB,CAAT,GAAqCW,IAArC;AACAjB,IAAAA,SAAS,CAACI,OAAO,GAAGE,SAAV,GAAsB,CAAvB,CAAT,GAAqCV,IAArC;AACAQ,IAAAA,OAAO,IAAI,CAAX;;AACA,QAAIT,IAAJ,EAAU;AACRK,MAAAA,SAAS,CAACG,KAAK,EAAN,CAAT,GAAqBW,OAArB;AACAd,MAAAA,SAAS,CAACG,KAAK,EAAN,CAAT,GAAqBY,OAArB;AACAf,MAAAA,SAAS,CAACG,KAAK,EAAN,CAAT,GAAqBN,OAArB;AACAG,MAAAA,SAAS,CAACG,KAAK,EAAN,CAAT,GAAqBa,IAArB;AACAhB,MAAAA,SAAS,CAACG,KAAK,EAAN,CAAT,GAAqBc,IAArB;AACAjB,MAAAA,SAAS,CAACG,KAAK,EAAN,CAAT,GAAqBP,IAArB;AACD;AACF;;AAED,SAAOI,SAAP;AACD,CA/CD;;AAgDA,eAAeX,uBAAf","sourcesContent":["import CesiumMath from \"./Math.js\";\n\n/**\n * @private\n */\nvar CylinderGeometryLibrary = {};\n\n/**\n * @private\n */\nCylinderGeometryLibrary.computePositions = function (\n  length,\n  topRadius,\n  bottomRadius,\n  slices,\n  fill\n) {\n  var topZ = length * 0.5;\n  var bottomZ = -topZ;\n\n  var twoSlice = slices + slices;\n  var size = fill ? 2 * twoSlice : twoSlice;\n  var positions = new Float64Array(size * 3);\n  var i;\n  var index = 0;\n  var tbIndex = 0;\n  var bottomOffset = fill ? twoSlice * 3 : 0;\n  var topOffset = fill ? (twoSlice + slices) * 3 : slices * 3;\n\n  for (i = 0; i < slices; i++) {\n    var angle = (i / slices) * CesiumMath.TWO_PI;\n    var x = Math.cos(angle);\n    var y = Math.sin(angle);\n    var bottomX = x * bottomRadius;\n    var bottomY = y * bottomRadius;\n    var topX = x * topRadius;\n    var topY = y * topRadius;\n\n    positions[tbIndex + bottomOffset] = bottomX;\n    positions[tbIndex + bottomOffset + 1] = bottomY;\n    positions[tbIndex + bottomOffset + 2] = bottomZ;\n\n    positions[tbIndex + topOffset] = topX;\n    positions[tbIndex + topOffset + 1] = topY;\n    positions[tbIndex + topOffset + 2] = topZ;\n    tbIndex += 3;\n    if (fill) {\n      positions[index++] = bottomX;\n      positions[index++] = bottomY;\n      positions[index++] = bottomZ;\n      positions[index++] = topX;\n      positions[index++] = topY;\n      positions[index++] = topZ;\n    }\n  }\n\n  return positions;\n};\nexport default CylinderGeometryLibrary;\n"]},"metadata":{},"sourceType":"module"}