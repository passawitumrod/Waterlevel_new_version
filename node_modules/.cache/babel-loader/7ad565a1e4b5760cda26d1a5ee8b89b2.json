{"ast":null,"code":"import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport QuadtreeTileLoadState from \"./QuadtreeTileLoadState.js\";\nimport TileSelectionResult from \"./TileSelectionResult.js\";\n/**\n * A single tile in a {@link QuadtreePrimitive}.\n *\n * @alias QuadtreeTile\n * @constructor\n * @private\n *\n * @param {Number} options.level The level of the tile in the quadtree.\n * @param {Number} options.x The X coordinate of the tile in the quadtree.  0 is the westernmost tile.\n * @param {Number} options.y The Y coordinate of the tile in the quadtree.  0 is the northernmost tile.\n * @param {TilingScheme} options.tilingScheme The tiling scheme in which this tile exists.\n * @param {QuadtreeTile} [options.parent] This tile's parent, or undefined if this is a root tile.\n */\n\nfunction QuadtreeTile(options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options)) {\n    throw new DeveloperError(\"options is required.\");\n  }\n\n  if (!defined(options.x)) {\n    throw new DeveloperError(\"options.x is required.\");\n  } else if (!defined(options.y)) {\n    throw new DeveloperError(\"options.y is required.\");\n  } else if (options.x < 0 || options.y < 0) {\n    throw new DeveloperError(\"options.x and options.y must be greater than or equal to zero.\");\n  }\n\n  if (!defined(options.level)) {\n    throw new DeveloperError(\"options.level is required and must be greater than or equal to zero.\");\n  }\n\n  if (!defined(options.tilingScheme)) {\n    throw new DeveloperError(\"options.tilingScheme is required.\");\n  } //>>includeEnd('debug');\n\n\n  this._tilingScheme = options.tilingScheme;\n  this._x = options.x;\n  this._y = options.y;\n  this._level = options.level;\n  this._parent = options.parent;\n  this._rectangle = this._tilingScheme.tileXYToRectangle(this._x, this._y, this._level);\n  this._southwestChild = undefined;\n  this._southeastChild = undefined;\n  this._northwestChild = undefined;\n  this._northeastChild = undefined; // TileReplacementQueue gets/sets these private properties.\n\n  this.replacementPrevious = undefined;\n  this.replacementNext = undefined; // The distance from the camera to this tile, updated when the tile is selected\n  // for rendering.  We can get rid of this if we have a better way to sort by\n  // distance - for example, by using the natural ordering of a quadtree.\n  // QuadtreePrimitive gets/sets this private property.\n\n  this._distance = 0.0;\n  this._loadPriority = 0.0;\n  this._customData = [];\n  this._frameUpdated = undefined;\n  this._lastSelectionResult = TileSelectionResult.NONE;\n  this._lastSelectionResultFrame = undefined;\n  this._loadedCallbacks = {};\n  /**\n   * Gets or sets the current state of the tile in the tile load pipeline.\n   * @type {QuadtreeTileLoadState}\n   * @default {@link QuadtreeTileLoadState.START}\n   */\n\n  this.state = QuadtreeTileLoadState.START;\n  /**\n   * Gets or sets a value indicating whether or not the tile is currently renderable.\n   * @type {Boolean}\n   * @default false\n   */\n\n  this.renderable = false;\n  /**\n   * Gets or set a value indicating whether or not the tile was entirely upsampled from its\n   * parent tile.  If all four children of a parent tile were upsampled from the parent,\n   * we will render the parent instead of the children even if the LOD indicates that\n   * the children would be preferable.\n   * @type {Boolean}\n   * @default false\n   */\n\n  this.upsampledFromParent = false;\n  /**\n   * Gets or sets the additional data associated with this tile.  The exact content is specific to the\n   * {@link QuadtreeTileProvider}.\n   * @type {Object}\n   * @default undefined\n   */\n\n  this.data = undefined;\n}\n/**\n * Creates a rectangular set of tiles for level of detail zero, the coarsest, least detailed level.\n *\n * @memberof QuadtreeTile\n *\n * @param {TilingScheme} tilingScheme The tiling scheme for which the tiles are to be created.\n * @returns {QuadtreeTile[]} An array containing the tiles at level of detail zero, starting with the\n * tile in the northwest corner and followed by the tile (if any) to its east.\n */\n\n\nQuadtreeTile.createLevelZeroTiles = function (tilingScheme) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(tilingScheme)) {\n    throw new DeveloperError(\"tilingScheme is required.\");\n  } //>>includeEnd('debug');\n\n\n  var numberOfLevelZeroTilesX = tilingScheme.getNumberOfXTilesAtLevel(0);\n  var numberOfLevelZeroTilesY = tilingScheme.getNumberOfYTilesAtLevel(0);\n  var result = new Array(numberOfLevelZeroTilesX * numberOfLevelZeroTilesY);\n  var index = 0;\n\n  for (var y = 0; y < numberOfLevelZeroTilesY; ++y) {\n    for (var x = 0; x < numberOfLevelZeroTilesX; ++x) {\n      result[index++] = new QuadtreeTile({\n        tilingScheme: tilingScheme,\n        x: x,\n        y: y,\n        level: 0\n      });\n    }\n  }\n\n  return result;\n};\n\nQuadtreeTile.prototype._updateCustomData = function (frameNumber, added, removed) {\n  var customData = this.customData;\n  var i;\n  var data;\n  var rectangle;\n\n  if (defined(added) && defined(removed)) {\n    customData = customData.filter(function (value) {\n      return removed.indexOf(value) === -1;\n    });\n    this._customData = customData;\n    rectangle = this._rectangle;\n\n    for (i = 0; i < added.length; ++i) {\n      data = added[i];\n\n      if (Rectangle.contains(rectangle, data.positionCartographic)) {\n        customData.push(data);\n      }\n    }\n\n    this._frameUpdated = frameNumber;\n  } else {\n    // interior or leaf tile, update from parent\n    var parent = this._parent;\n\n    if (defined(parent) && this._frameUpdated !== parent._frameUpdated) {\n      customData.length = 0;\n      rectangle = this._rectangle;\n      var parentCustomData = parent.customData;\n\n      for (i = 0; i < parentCustomData.length; ++i) {\n        data = parentCustomData[i];\n\n        if (Rectangle.contains(rectangle, data.positionCartographic)) {\n          customData.push(data);\n        }\n      }\n\n      this._frameUpdated = parent._frameUpdated;\n    }\n  }\n};\n\nObject.defineProperties(QuadtreeTile.prototype, {\n  /**\n   * Gets the tiling scheme used to tile the surface.\n   * @memberof QuadtreeTile.prototype\n   * @type {TilingScheme}\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    }\n  },\n\n  /**\n   * Gets the tile X coordinate.\n   * @memberof QuadtreeTile.prototype\n   * @type {Number}\n   */\n  x: {\n    get: function () {\n      return this._x;\n    }\n  },\n\n  /**\n   * Gets the tile Y coordinate.\n   * @memberof QuadtreeTile.prototype\n   * @type {Number}\n   */\n  y: {\n    get: function () {\n      return this._y;\n    }\n  },\n\n  /**\n   * Gets the level-of-detail, where zero is the coarsest, least-detailed.\n   * @memberof QuadtreeTile.prototype\n   * @type {Number}\n   */\n  level: {\n    get: function () {\n      return this._level;\n    }\n  },\n\n  /**\n   * Gets the parent tile of this tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  parent: {\n    get: function () {\n      return this._parent;\n    }\n  },\n\n  /**\n   * Gets the cartographic rectangle of the tile, with north, south, east and\n   * west properties in radians.\n   * @memberof QuadtreeTile.prototype\n   * @type {Rectangle}\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    }\n  },\n\n  /**\n   * An array of tiles that is at the next level of the tile tree.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile[]}\n   */\n  children: {\n    get: function () {\n      return [this.northwestChild, this.northeastChild, this.southwestChild, this.southeastChild];\n    }\n  },\n\n  /**\n   * Gets the southwest child tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  southwestChild: {\n    get: function () {\n      if (!defined(this._southwestChild)) {\n        this._southwestChild = new QuadtreeTile({\n          tilingScheme: this.tilingScheme,\n          x: this.x * 2,\n          y: this.y * 2 + 1,\n          level: this.level + 1,\n          parent: this\n        });\n      }\n\n      return this._southwestChild;\n    }\n  },\n\n  /**\n   * Gets the southeast child tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  southeastChild: {\n    get: function () {\n      if (!defined(this._southeastChild)) {\n        this._southeastChild = new QuadtreeTile({\n          tilingScheme: this.tilingScheme,\n          x: this.x * 2 + 1,\n          y: this.y * 2 + 1,\n          level: this.level + 1,\n          parent: this\n        });\n      }\n\n      return this._southeastChild;\n    }\n  },\n\n  /**\n   * Gets the northwest child tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  northwestChild: {\n    get: function () {\n      if (!defined(this._northwestChild)) {\n        this._northwestChild = new QuadtreeTile({\n          tilingScheme: this.tilingScheme,\n          x: this.x * 2,\n          y: this.y * 2,\n          level: this.level + 1,\n          parent: this\n        });\n      }\n\n      return this._northwestChild;\n    }\n  },\n\n  /**\n   * Gets the northeast child tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  northeastChild: {\n    get: function () {\n      if (!defined(this._northeastChild)) {\n        this._northeastChild = new QuadtreeTile({\n          tilingScheme: this.tilingScheme,\n          x: this.x * 2 + 1,\n          y: this.y * 2,\n          level: this.level + 1,\n          parent: this\n        });\n      }\n\n      return this._northeastChild;\n    }\n  },\n\n  /**\n   * An array of objects associated with this tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {Array}\n   */\n  customData: {\n    get: function () {\n      return this._customData;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not this tile needs further loading.\n   * This property will return true if the {@link QuadtreeTile#state} is\n   * <code>START</code> or <code>LOADING</code>.\n   * @memberof QuadtreeTile.prototype\n   * @type {Boolean}\n   */\n  needsLoading: {\n    get: function () {\n      return this.state < QuadtreeTileLoadState.DONE;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not this tile is eligible to be unloaded.\n   * Typically, a tile is ineligible to be unloaded while an asynchronous operation,\n   * such as a request for data, is in progress on it.  A tile will never be\n   * unloaded while it is needed for rendering, regardless of the value of this\n   * property.  If {@link QuadtreeTile#data} is defined and has an\n   * <code>eligibleForUnloading</code> property, the value of that property is returned.\n   * Otherwise, this property returns true.\n   * @memberof QuadtreeTile.prototype\n   * @type {Boolean}\n   */\n  eligibleForUnloading: {\n    get: function () {\n      var result = true;\n\n      if (defined(this.data)) {\n        result = this.data.eligibleForUnloading;\n\n        if (!defined(result)) {\n          result = true;\n        }\n      }\n\n      return result;\n    }\n  }\n});\n\nQuadtreeTile.prototype.findLevelZeroTile = function (levelZeroTiles, x, y) {\n  var xTiles = this.tilingScheme.getNumberOfXTilesAtLevel(0);\n\n  if (x < 0) {\n    x += xTiles;\n  } else if (x >= xTiles) {\n    x -= xTiles;\n  }\n\n  if (y < 0 || y >= this.tilingScheme.getNumberOfYTilesAtLevel(0)) {\n    return undefined;\n  }\n\n  return levelZeroTiles.filter(function (tile) {\n    return tile.x === x && tile.y === y;\n  })[0];\n};\n\nQuadtreeTile.prototype.findTileToWest = function (levelZeroTiles) {\n  var parent = this.parent;\n\n  if (parent === undefined) {\n    return this.findLevelZeroTile(levelZeroTiles, this.x - 1, this.y);\n  }\n\n  if (parent.southeastChild === this) {\n    return parent.southwestChild;\n  } else if (parent.northeastChild === this) {\n    return parent.northwestChild;\n  }\n\n  var westOfParent = parent.findTileToWest(levelZeroTiles);\n\n  if (westOfParent === undefined) {\n    return undefined;\n  } else if (parent.southwestChild === this) {\n    return westOfParent.southeastChild;\n  }\n\n  return westOfParent.northeastChild;\n};\n\nQuadtreeTile.prototype.findTileToEast = function (levelZeroTiles) {\n  var parent = this.parent;\n\n  if (parent === undefined) {\n    return this.findLevelZeroTile(levelZeroTiles, this.x + 1, this.y);\n  }\n\n  if (parent.southwestChild === this) {\n    return parent.southeastChild;\n  } else if (parent.northwestChild === this) {\n    return parent.northeastChild;\n  }\n\n  var eastOfParent = parent.findTileToEast(levelZeroTiles);\n\n  if (eastOfParent === undefined) {\n    return undefined;\n  } else if (parent.southeastChild === this) {\n    return eastOfParent.southwestChild;\n  }\n\n  return eastOfParent.northwestChild;\n};\n\nQuadtreeTile.prototype.findTileToSouth = function (levelZeroTiles) {\n  var parent = this.parent;\n\n  if (parent === undefined) {\n    return this.findLevelZeroTile(levelZeroTiles, this.x, this.y + 1);\n  }\n\n  if (parent.northwestChild === this) {\n    return parent.southwestChild;\n  } else if (parent.northeastChild === this) {\n    return parent.southeastChild;\n  }\n\n  var southOfParent = parent.findTileToSouth(levelZeroTiles);\n\n  if (southOfParent === undefined) {\n    return undefined;\n  } else if (parent.southwestChild === this) {\n    return southOfParent.northwestChild;\n  }\n\n  return southOfParent.northeastChild;\n};\n\nQuadtreeTile.prototype.findTileToNorth = function (levelZeroTiles) {\n  var parent = this.parent;\n\n  if (parent === undefined) {\n    return this.findLevelZeroTile(levelZeroTiles, this.x, this.y - 1);\n  }\n\n  if (parent.southwestChild === this) {\n    return parent.northwestChild;\n  } else if (parent.southeastChild === this) {\n    return parent.northeastChild;\n  }\n\n  var northOfParent = parent.findTileToNorth(levelZeroTiles);\n\n  if (northOfParent === undefined) {\n    return undefined;\n  } else if (parent.northwestChild === this) {\n    return northOfParent.southwestChild;\n  }\n\n  return northOfParent.southeastChild;\n};\n/**\n * Frees the resources associated with this tile and returns it to the <code>START</code>\n * {@link QuadtreeTileLoadState}.  If the {@link QuadtreeTile#data} property is defined and it\n * has a <code>freeResources</code> method, the method will be invoked.\n *\n * @memberof QuadtreeTile\n */\n\n\nQuadtreeTile.prototype.freeResources = function () {\n  this.state = QuadtreeTileLoadState.START;\n  this.renderable = false;\n  this.upsampledFromParent = false;\n\n  if (defined(this.data) && defined(this.data.freeResources)) {\n    this.data.freeResources();\n  }\n\n  freeTile(this._southwestChild);\n  this._southwestChild = undefined;\n  freeTile(this._southeastChild);\n  this._southeastChild = undefined;\n  freeTile(this._northwestChild);\n  this._northwestChild = undefined;\n  freeTile(this._northeastChild);\n  this._northeastChild = undefined;\n};\n\nfunction freeTile(tile) {\n  if (defined(tile)) {\n    tile.freeResources();\n  }\n}\n\nexport default QuadtreeTile;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/QuadtreeTile.js"],"names":["defined","DeveloperError","Rectangle","QuadtreeTileLoadState","TileSelectionResult","QuadtreeTile","options","x","y","level","tilingScheme","_tilingScheme","_x","_y","_level","_parent","parent","_rectangle","tileXYToRectangle","_southwestChild","undefined","_southeastChild","_northwestChild","_northeastChild","replacementPrevious","replacementNext","_distance","_loadPriority","_customData","_frameUpdated","_lastSelectionResult","NONE","_lastSelectionResultFrame","_loadedCallbacks","state","START","renderable","upsampledFromParent","data","createLevelZeroTiles","numberOfLevelZeroTilesX","getNumberOfXTilesAtLevel","numberOfLevelZeroTilesY","getNumberOfYTilesAtLevel","result","Array","index","prototype","_updateCustomData","frameNumber","added","removed","customData","i","rectangle","filter","value","indexOf","length","contains","positionCartographic","push","parentCustomData","Object","defineProperties","get","children","northwestChild","northeastChild","southwestChild","southeastChild","needsLoading","DONE","eligibleForUnloading","findLevelZeroTile","levelZeroTiles","xTiles","tile","findTileToWest","westOfParent","findTileToEast","eastOfParent","findTileToSouth","southOfParent","findTileToNorth","northOfParent","freeResources","freeTile"],"mappings":"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","sourcesContent":["import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport QuadtreeTileLoadState from \"./QuadtreeTileLoadState.js\";\nimport TileSelectionResult from \"./TileSelectionResult.js\";\n\n/**\n * A single tile in a {@link QuadtreePrimitive}.\n *\n * @alias QuadtreeTile\n * @constructor\n * @private\n *\n * @param {Number} options.level The level of the tile in the quadtree.\n * @param {Number} options.x The X coordinate of the tile in the quadtree.  0 is the westernmost tile.\n * @param {Number} options.y The Y coordinate of the tile in the quadtree.  0 is the northernmost tile.\n * @param {TilingScheme} options.tilingScheme The tiling scheme in which this tile exists.\n * @param {QuadtreeTile} [options.parent] This tile's parent, or undefined if this is a root tile.\n */\nfunction QuadtreeTile(options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options)) {\n    throw new DeveloperError(\"options is required.\");\n  }\n  if (!defined(options.x)) {\n    throw new DeveloperError(\"options.x is required.\");\n  } else if (!defined(options.y)) {\n    throw new DeveloperError(\"options.y is required.\");\n  } else if (options.x < 0 || options.y < 0) {\n    throw new DeveloperError(\n      \"options.x and options.y must be greater than or equal to zero.\"\n    );\n  }\n  if (!defined(options.level)) {\n    throw new DeveloperError(\n      \"options.level is required and must be greater than or equal to zero.\"\n    );\n  }\n  if (!defined(options.tilingScheme)) {\n    throw new DeveloperError(\"options.tilingScheme is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._tilingScheme = options.tilingScheme;\n  this._x = options.x;\n  this._y = options.y;\n  this._level = options.level;\n  this._parent = options.parent;\n  this._rectangle = this._tilingScheme.tileXYToRectangle(\n    this._x,\n    this._y,\n    this._level\n  );\n\n  this._southwestChild = undefined;\n  this._southeastChild = undefined;\n  this._northwestChild = undefined;\n  this._northeastChild = undefined;\n\n  // TileReplacementQueue gets/sets these private properties.\n  this.replacementPrevious = undefined;\n  this.replacementNext = undefined;\n\n  // The distance from the camera to this tile, updated when the tile is selected\n  // for rendering.  We can get rid of this if we have a better way to sort by\n  // distance - for example, by using the natural ordering of a quadtree.\n  // QuadtreePrimitive gets/sets this private property.\n  this._distance = 0.0;\n  this._loadPriority = 0.0;\n\n  this._customData = [];\n  this._frameUpdated = undefined;\n  this._lastSelectionResult = TileSelectionResult.NONE;\n  this._lastSelectionResultFrame = undefined;\n  this._loadedCallbacks = {};\n\n  /**\n   * Gets or sets the current state of the tile in the tile load pipeline.\n   * @type {QuadtreeTileLoadState}\n   * @default {@link QuadtreeTileLoadState.START}\n   */\n  this.state = QuadtreeTileLoadState.START;\n\n  /**\n   * Gets or sets a value indicating whether or not the tile is currently renderable.\n   * @type {Boolean}\n   * @default false\n   */\n  this.renderable = false;\n\n  /**\n   * Gets or set a value indicating whether or not the tile was entirely upsampled from its\n   * parent tile.  If all four children of a parent tile were upsampled from the parent,\n   * we will render the parent instead of the children even if the LOD indicates that\n   * the children would be preferable.\n   * @type {Boolean}\n   * @default false\n   */\n  this.upsampledFromParent = false;\n\n  /**\n   * Gets or sets the additional data associated with this tile.  The exact content is specific to the\n   * {@link QuadtreeTileProvider}.\n   * @type {Object}\n   * @default undefined\n   */\n  this.data = undefined;\n}\n\n/**\n * Creates a rectangular set of tiles for level of detail zero, the coarsest, least detailed level.\n *\n * @memberof QuadtreeTile\n *\n * @param {TilingScheme} tilingScheme The tiling scheme for which the tiles are to be created.\n * @returns {QuadtreeTile[]} An array containing the tiles at level of detail zero, starting with the\n * tile in the northwest corner and followed by the tile (if any) to its east.\n */\nQuadtreeTile.createLevelZeroTiles = function (tilingScheme) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(tilingScheme)) {\n    throw new DeveloperError(\"tilingScheme is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var numberOfLevelZeroTilesX = tilingScheme.getNumberOfXTilesAtLevel(0);\n  var numberOfLevelZeroTilesY = tilingScheme.getNumberOfYTilesAtLevel(0);\n\n  var result = new Array(numberOfLevelZeroTilesX * numberOfLevelZeroTilesY);\n\n  var index = 0;\n  for (var y = 0; y < numberOfLevelZeroTilesY; ++y) {\n    for (var x = 0; x < numberOfLevelZeroTilesX; ++x) {\n      result[index++] = new QuadtreeTile({\n        tilingScheme: tilingScheme,\n        x: x,\n        y: y,\n        level: 0,\n      });\n    }\n  }\n\n  return result;\n};\n\nQuadtreeTile.prototype._updateCustomData = function (\n  frameNumber,\n  added,\n  removed\n) {\n  var customData = this.customData;\n\n  var i;\n  var data;\n  var rectangle;\n\n  if (defined(added) && defined(removed)) {\n    customData = customData.filter(function (value) {\n      return removed.indexOf(value) === -1;\n    });\n    this._customData = customData;\n\n    rectangle = this._rectangle;\n    for (i = 0; i < added.length; ++i) {\n      data = added[i];\n      if (Rectangle.contains(rectangle, data.positionCartographic)) {\n        customData.push(data);\n      }\n    }\n\n    this._frameUpdated = frameNumber;\n  } else {\n    // interior or leaf tile, update from parent\n    var parent = this._parent;\n    if (defined(parent) && this._frameUpdated !== parent._frameUpdated) {\n      customData.length = 0;\n\n      rectangle = this._rectangle;\n      var parentCustomData = parent.customData;\n      for (i = 0; i < parentCustomData.length; ++i) {\n        data = parentCustomData[i];\n        if (Rectangle.contains(rectangle, data.positionCartographic)) {\n          customData.push(data);\n        }\n      }\n\n      this._frameUpdated = parent._frameUpdated;\n    }\n  }\n};\n\nObject.defineProperties(QuadtreeTile.prototype, {\n  /**\n   * Gets the tiling scheme used to tile the surface.\n   * @memberof QuadtreeTile.prototype\n   * @type {TilingScheme}\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the tile X coordinate.\n   * @memberof QuadtreeTile.prototype\n   * @type {Number}\n   */\n  x: {\n    get: function () {\n      return this._x;\n    },\n  },\n\n  /**\n   * Gets the tile Y coordinate.\n   * @memberof QuadtreeTile.prototype\n   * @type {Number}\n   */\n  y: {\n    get: function () {\n      return this._y;\n    },\n  },\n\n  /**\n   * Gets the level-of-detail, where zero is the coarsest, least-detailed.\n   * @memberof QuadtreeTile.prototype\n   * @type {Number}\n   */\n  level: {\n    get: function () {\n      return this._level;\n    },\n  },\n\n  /**\n   * Gets the parent tile of this tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  parent: {\n    get: function () {\n      return this._parent;\n    },\n  },\n\n  /**\n   * Gets the cartographic rectangle of the tile, with north, south, east and\n   * west properties in radians.\n   * @memberof QuadtreeTile.prototype\n   * @type {Rectangle}\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    },\n  },\n\n  /**\n   * An array of tiles that is at the next level of the tile tree.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile[]}\n   */\n  children: {\n    get: function () {\n      return [\n        this.northwestChild,\n        this.northeastChild,\n        this.southwestChild,\n        this.southeastChild,\n      ];\n    },\n  },\n\n  /**\n   * Gets the southwest child tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  southwestChild: {\n    get: function () {\n      if (!defined(this._southwestChild)) {\n        this._southwestChild = new QuadtreeTile({\n          tilingScheme: this.tilingScheme,\n          x: this.x * 2,\n          y: this.y * 2 + 1,\n          level: this.level + 1,\n          parent: this,\n        });\n      }\n      return this._southwestChild;\n    },\n  },\n\n  /**\n   * Gets the southeast child tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  southeastChild: {\n    get: function () {\n      if (!defined(this._southeastChild)) {\n        this._southeastChild = new QuadtreeTile({\n          tilingScheme: this.tilingScheme,\n          x: this.x * 2 + 1,\n          y: this.y * 2 + 1,\n          level: this.level + 1,\n          parent: this,\n        });\n      }\n      return this._southeastChild;\n    },\n  },\n\n  /**\n   * Gets the northwest child tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  northwestChild: {\n    get: function () {\n      if (!defined(this._northwestChild)) {\n        this._northwestChild = new QuadtreeTile({\n          tilingScheme: this.tilingScheme,\n          x: this.x * 2,\n          y: this.y * 2,\n          level: this.level + 1,\n          parent: this,\n        });\n      }\n      return this._northwestChild;\n    },\n  },\n\n  /**\n   * Gets the northeast child tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  northeastChild: {\n    get: function () {\n      if (!defined(this._northeastChild)) {\n        this._northeastChild = new QuadtreeTile({\n          tilingScheme: this.tilingScheme,\n          x: this.x * 2 + 1,\n          y: this.y * 2,\n          level: this.level + 1,\n          parent: this,\n        });\n      }\n      return this._northeastChild;\n    },\n  },\n\n  /**\n   * An array of objects associated with this tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {Array}\n   */\n  customData: {\n    get: function () {\n      return this._customData;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not this tile needs further loading.\n   * This property will return true if the {@link QuadtreeTile#state} is\n   * <code>START</code> or <code>LOADING</code>.\n   * @memberof QuadtreeTile.prototype\n   * @type {Boolean}\n   */\n  needsLoading: {\n    get: function () {\n      return this.state < QuadtreeTileLoadState.DONE;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not this tile is eligible to be unloaded.\n   * Typically, a tile is ineligible to be unloaded while an asynchronous operation,\n   * such as a request for data, is in progress on it.  A tile will never be\n   * unloaded while it is needed for rendering, regardless of the value of this\n   * property.  If {@link QuadtreeTile#data} is defined and has an\n   * <code>eligibleForUnloading</code> property, the value of that property is returned.\n   * Otherwise, this property returns true.\n   * @memberof QuadtreeTile.prototype\n   * @type {Boolean}\n   */\n  eligibleForUnloading: {\n    get: function () {\n      var result = true;\n\n      if (defined(this.data)) {\n        result = this.data.eligibleForUnloading;\n        if (!defined(result)) {\n          result = true;\n        }\n      }\n\n      return result;\n    },\n  },\n});\n\nQuadtreeTile.prototype.findLevelZeroTile = function (levelZeroTiles, x, y) {\n  var xTiles = this.tilingScheme.getNumberOfXTilesAtLevel(0);\n  if (x < 0) {\n    x += xTiles;\n  } else if (x >= xTiles) {\n    x -= xTiles;\n  }\n\n  if (y < 0 || y >= this.tilingScheme.getNumberOfYTilesAtLevel(0)) {\n    return undefined;\n  }\n\n  return levelZeroTiles.filter(function (tile) {\n    return tile.x === x && tile.y === y;\n  })[0];\n};\n\nQuadtreeTile.prototype.findTileToWest = function (levelZeroTiles) {\n  var parent = this.parent;\n  if (parent === undefined) {\n    return this.findLevelZeroTile(levelZeroTiles, this.x - 1, this.y);\n  }\n\n  if (parent.southeastChild === this) {\n    return parent.southwestChild;\n  } else if (parent.northeastChild === this) {\n    return parent.northwestChild;\n  }\n\n  var westOfParent = parent.findTileToWest(levelZeroTiles);\n  if (westOfParent === undefined) {\n    return undefined;\n  } else if (parent.southwestChild === this) {\n    return westOfParent.southeastChild;\n  }\n  return westOfParent.northeastChild;\n};\n\nQuadtreeTile.prototype.findTileToEast = function (levelZeroTiles) {\n  var parent = this.parent;\n  if (parent === undefined) {\n    return this.findLevelZeroTile(levelZeroTiles, this.x + 1, this.y);\n  }\n\n  if (parent.southwestChild === this) {\n    return parent.southeastChild;\n  } else if (parent.northwestChild === this) {\n    return parent.northeastChild;\n  }\n\n  var eastOfParent = parent.findTileToEast(levelZeroTiles);\n  if (eastOfParent === undefined) {\n    return undefined;\n  } else if (parent.southeastChild === this) {\n    return eastOfParent.southwestChild;\n  }\n  return eastOfParent.northwestChild;\n};\n\nQuadtreeTile.prototype.findTileToSouth = function (levelZeroTiles) {\n  var parent = this.parent;\n  if (parent === undefined) {\n    return this.findLevelZeroTile(levelZeroTiles, this.x, this.y + 1);\n  }\n\n  if (parent.northwestChild === this) {\n    return parent.southwestChild;\n  } else if (parent.northeastChild === this) {\n    return parent.southeastChild;\n  }\n\n  var southOfParent = parent.findTileToSouth(levelZeroTiles);\n  if (southOfParent === undefined) {\n    return undefined;\n  } else if (parent.southwestChild === this) {\n    return southOfParent.northwestChild;\n  }\n  return southOfParent.northeastChild;\n};\n\nQuadtreeTile.prototype.findTileToNorth = function (levelZeroTiles) {\n  var parent = this.parent;\n  if (parent === undefined) {\n    return this.findLevelZeroTile(levelZeroTiles, this.x, this.y - 1);\n  }\n\n  if (parent.southwestChild === this) {\n    return parent.northwestChild;\n  } else if (parent.southeastChild === this) {\n    return parent.northeastChild;\n  }\n\n  var northOfParent = parent.findTileToNorth(levelZeroTiles);\n  if (northOfParent === undefined) {\n    return undefined;\n  } else if (parent.northwestChild === this) {\n    return northOfParent.southwestChild;\n  }\n  return northOfParent.southeastChild;\n};\n\n/**\n * Frees the resources associated with this tile and returns it to the <code>START</code>\n * {@link QuadtreeTileLoadState}.  If the {@link QuadtreeTile#data} property is defined and it\n * has a <code>freeResources</code> method, the method will be invoked.\n *\n * @memberof QuadtreeTile\n */\nQuadtreeTile.prototype.freeResources = function () {\n  this.state = QuadtreeTileLoadState.START;\n  this.renderable = false;\n  this.upsampledFromParent = false;\n\n  if (defined(this.data) && defined(this.data.freeResources)) {\n    this.data.freeResources();\n  }\n\n  freeTile(this._southwestChild);\n  this._southwestChild = undefined;\n  freeTile(this._southeastChild);\n  this._southeastChild = undefined;\n  freeTile(this._northwestChild);\n  this._northwestChild = undefined;\n  freeTile(this._northeastChild);\n  this._northeastChild = undefined;\n};\n\nfunction freeTile(tile) {\n  if (defined(tile)) {\n    tile.freeResources();\n  }\n}\nexport default QuadtreeTile;\n"]},"metadata":{},"sourceType":"module"}