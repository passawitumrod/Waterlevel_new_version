{"ast":null,"code":"import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport GroundPrimitive from \"../Scene/GroundPrimitive.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\nimport RectangleCollisionChecker from \"../Core/RectangleCollisionChecker.js\";\nvar colorScratch = new Color();\nvar distanceDisplayConditionScratch = new DistanceDisplayCondition();\nvar defaultDistanceDisplayCondition = new DistanceDisplayCondition();\n\nfunction Batch(primitives, classificationType, color, zIndex) {\n  this.primitives = primitives;\n  this.zIndex = zIndex;\n  this.classificationType = classificationType;\n  this.color = color;\n  this.createPrimitive = false;\n  this.waitingOnCreate = false;\n  this.primitive = undefined;\n  this.oldPrimitive = undefined;\n  this.geometry = new AssociativeArray();\n  this.updaters = new AssociativeArray();\n  this.updatersWithAttributes = new AssociativeArray();\n  this.attributes = new AssociativeArray();\n  this.subscriptions = new AssociativeArray();\n  this.showsUpdated = new AssociativeArray();\n  this.itemsToRemove = [];\n  this.isDirty = false;\n  this.rectangleCollisionCheck = new RectangleCollisionChecker();\n}\n\nBatch.prototype.overlapping = function (rectangle) {\n  return this.rectangleCollisionCheck.collides(rectangle);\n};\n\nBatch.prototype.add = function (updater, instance) {\n  var id = updater.id;\n  this.createPrimitive = true;\n  this.geometry.set(id, instance);\n  this.updaters.set(id, updater);\n  this.rectangleCollisionCheck.insert(id, instance.geometry.rectangle);\n\n  if (!updater.hasConstantFill || !updater.fillMaterialProperty.isConstant || !Property.isConstant(updater.distanceDisplayConditionProperty)) {\n    this.updatersWithAttributes.set(id, updater);\n  } else {\n    var that = this;\n    this.subscriptions.set(id, updater.entity.definitionChanged.addEventListener(function (entity, propertyName, newValue, oldValue) {\n      if (propertyName === \"isShowing\") {\n        that.showsUpdated.set(updater.id, updater);\n      }\n    }));\n  }\n};\n\nBatch.prototype.remove = function (updater) {\n  var id = updater.id;\n  var geometryInstance = this.geometry.get(id);\n  this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n\n  if (this.updaters.remove(id)) {\n    this.rectangleCollisionCheck.remove(id, geometryInstance.geometry.rectangle);\n    this.updatersWithAttributes.remove(id);\n    var unsubscribe = this.subscriptions.get(id);\n\n    if (defined(unsubscribe)) {\n      unsubscribe();\n      this.subscriptions.remove(id);\n      this.showsUpdated.remove(id);\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nBatch.prototype.update = function (time) {\n  var isUpdated = true;\n  var removedCount = 0;\n  var primitive = this.primitive;\n  var primitives = this.primitives;\n  var i;\n\n  if (this.createPrimitive) {\n    var geometries = this.geometry.values;\n    var geometriesLength = geometries.length;\n\n    if (geometriesLength > 0) {\n      if (defined(primitive)) {\n        if (!defined(this.oldPrimitive)) {\n          this.oldPrimitive = primitive;\n        } else {\n          primitives.remove(primitive);\n        }\n      }\n\n      primitive = new GroundPrimitive({\n        show: false,\n        asynchronous: true,\n        geometryInstances: geometries.slice(),\n        classificationType: this.classificationType\n      });\n      primitives.add(primitive, this.zIndex);\n      isUpdated = false;\n    } else {\n      if (defined(primitive)) {\n        primitives.remove(primitive);\n        primitive = undefined;\n      }\n\n      var oldPrimitive = this.oldPrimitive;\n\n      if (defined(oldPrimitive)) {\n        primitives.remove(oldPrimitive);\n        this.oldPrimitive = undefined;\n      }\n    }\n\n    this.attributes.removeAll();\n    this.primitive = primitive;\n    this.createPrimitive = false;\n    this.waitingOnCreate = true;\n  } else if (defined(primitive) && primitive.ready) {\n    primitive.show = true;\n\n    if (defined(this.oldPrimitive)) {\n      primitives.remove(this.oldPrimitive);\n      this.oldPrimitive = undefined;\n    }\n\n    var updatersWithAttributes = this.updatersWithAttributes.values;\n    var length = updatersWithAttributes.length;\n    var waitingOnCreate = this.waitingOnCreate;\n\n    for (i = 0; i < length; i++) {\n      var updater = updatersWithAttributes[i];\n      var instance = this.geometry.get(updater.id);\n      var attributes = this.attributes.get(instance.id.id);\n\n      if (!defined(attributes)) {\n        attributes = primitive.getGeometryInstanceAttributes(instance.id);\n        this.attributes.set(instance.id.id, attributes);\n      }\n\n      if (!updater.fillMaterialProperty.isConstant || waitingOnCreate) {\n        var colorProperty = updater.fillMaterialProperty.color;\n        var fillColor = Property.getValueOrDefault(colorProperty, time, Color.WHITE, colorScratch);\n\n        if (!Color.equals(attributes._lastColor, fillColor)) {\n          attributes._lastColor = Color.clone(fillColor, attributes._lastColor);\n          attributes.color = ColorGeometryInstanceAttribute.toValue(fillColor, attributes.color);\n        }\n      }\n\n      var show = updater.entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n      var currentShow = attributes.show[0] === 1;\n\n      if (show !== currentShow) {\n        attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n      }\n\n      var distanceDisplayConditionProperty = updater.distanceDisplayConditionProperty;\n\n      if (!Property.isConstant(distanceDisplayConditionProperty)) {\n        var distanceDisplayCondition = Property.getValueOrDefault(distanceDisplayConditionProperty, time, defaultDistanceDisplayCondition, distanceDisplayConditionScratch);\n\n        if (!DistanceDisplayCondition.equals(distanceDisplayCondition, attributes._lastDistanceDisplayCondition)) {\n          attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition, attributes._lastDistanceDisplayCondition);\n          attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n        }\n      }\n    }\n\n    this.updateShows(primitive);\n    this.waitingOnCreate = false;\n  } else if (defined(primitive) && !primitive.ready) {\n    isUpdated = false;\n  }\n\n  this.itemsToRemove.length = removedCount;\n  return isUpdated;\n};\n\nBatch.prototype.updateShows = function (primitive) {\n  var showsUpdated = this.showsUpdated.values;\n  var length = showsUpdated.length;\n\n  for (var i = 0; i < length; i++) {\n    var updater = showsUpdated[i];\n    var instance = this.geometry.get(updater.id);\n    var attributes = this.attributes.get(instance.id.id);\n\n    if (!defined(attributes)) {\n      attributes = primitive.getGeometryInstanceAttributes(instance.id);\n      this.attributes.set(instance.id.id, attributes);\n    }\n\n    var show = updater.entity.isShowing;\n    var currentShow = attributes.show[0] === 1;\n\n    if (show !== currentShow) {\n      attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n      instance.attributes.show.value[0] = attributes.show[0];\n    }\n  }\n\n  this.showsUpdated.removeAll();\n};\n\nBatch.prototype.contains = function (updater) {\n  return this.updaters.contains(updater.id);\n};\n\nBatch.prototype.getBoundingSphere = function (updater, result) {\n  var primitive = this.primitive;\n\n  if (!primitive.ready) {\n    return BoundingSphereState.PENDING;\n  }\n\n  var bs = primitive.getBoundingSphere(updater.entity);\n\n  if (!defined(bs)) {\n    return BoundingSphereState.FAILED;\n  }\n\n  bs.clone(result);\n  return BoundingSphereState.DONE;\n};\n\nBatch.prototype.removeAllPrimitives = function () {\n  var primitives = this.primitives;\n  var primitive = this.primitive;\n\n  if (defined(primitive)) {\n    primitives.remove(primitive);\n    this.primitive = undefined;\n    this.geometry.removeAll();\n    this.updaters.removeAll();\n  }\n\n  var oldPrimitive = this.oldPrimitive;\n\n  if (defined(oldPrimitive)) {\n    primitives.remove(oldPrimitive);\n    this.oldPrimitive = undefined;\n  }\n};\n/**\n * @private\n */\n\n\nfunction StaticGroundGeometryColorBatch(primitives, classificationType) {\n  this._batches = [];\n  this._primitives = primitives;\n  this._classificationType = classificationType;\n}\n\nStaticGroundGeometryColorBatch.prototype.add = function (time, updater) {\n  var instance = updater.createFillGeometryInstance(time);\n  var batches = this._batches;\n  var zIndex = Property.getValueOrDefault(updater.zIndex, 0);\n  var batch;\n  var length = batches.length;\n\n  for (var i = 0; i < length; ++i) {\n    var item = batches[i];\n\n    if (item.zIndex === zIndex && !item.overlapping(instance.geometry.rectangle)) {\n      batch = item;\n      break;\n    }\n  }\n\n  if (!defined(batch)) {\n    batch = new Batch(this._primitives, this._classificationType, instance.attributes.color.value, zIndex);\n    batches.push(batch);\n  }\n\n  batch.add(updater, instance);\n  return batch;\n};\n\nStaticGroundGeometryColorBatch.prototype.remove = function (updater) {\n  var batches = this._batches;\n  var count = batches.length;\n\n  for (var i = 0; i < count; ++i) {\n    if (batches[i].remove(updater)) {\n      return;\n    }\n  }\n};\n\nStaticGroundGeometryColorBatch.prototype.update = function (time) {\n  var i;\n  var updater; //Perform initial update\n\n  var isUpdated = true;\n  var batches = this._batches;\n  var batchCount = batches.length;\n\n  for (i = 0; i < batchCount; ++i) {\n    isUpdated = batches[i].update(time) && isUpdated;\n  } //If any items swapped between batches we need to move them\n\n\n  for (i = 0; i < batchCount; ++i) {\n    var oldBatch = batches[i];\n    var itemsToRemove = oldBatch.itemsToRemove;\n    var itemsToMoveLength = itemsToRemove.length;\n\n    for (var j = 0; j < itemsToMoveLength; j++) {\n      updater = itemsToRemove[j];\n      oldBatch.remove(updater);\n      var newBatch = this.add(time, updater);\n      oldBatch.isDirty = true;\n      newBatch.isDirty = true;\n    }\n  } //If we moved anything around, we need to re-build the primitive and remove empty batches\n\n\n  for (i = batchCount - 1; i >= 0; --i) {\n    var batch = batches[i];\n\n    if (batch.isDirty) {\n      isUpdated = batches[i].update(time) && isUpdated;\n      batch.isDirty = false;\n    }\n\n    if (batch.geometry.length === 0) {\n      batches.splice(i, 1);\n    }\n  }\n\n  return isUpdated;\n};\n\nStaticGroundGeometryColorBatch.prototype.getBoundingSphere = function (updater, result) {\n  var batches = this._batches;\n  var batchCount = batches.length;\n\n  for (var i = 0; i < batchCount; ++i) {\n    var batch = batches[i];\n\n    if (batch.contains(updater)) {\n      return batch.getBoundingSphere(updater, result);\n    }\n  }\n\n  return BoundingSphereState.FAILED;\n};\n\nStaticGroundGeometryColorBatch.prototype.removeAllPrimitives = function () {\n  var batches = this._batches;\n  var batchCount = batches.length;\n\n  for (var i = 0; i < batchCount; ++i) {\n    batches[i].removeAllPrimitives();\n  }\n};\n\nexport default StaticGroundGeometryColorBatch;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/StaticGroundGeometryColorBatch.js"],"names":["AssociativeArray","Color","ColorGeometryInstanceAttribute","defined","DistanceDisplayCondition","DistanceDisplayConditionGeometryInstanceAttribute","ShowGeometryInstanceAttribute","GroundPrimitive","BoundingSphereState","Property","RectangleCollisionChecker","colorScratch","distanceDisplayConditionScratch","defaultDistanceDisplayCondition","Batch","primitives","classificationType","color","zIndex","createPrimitive","waitingOnCreate","primitive","undefined","oldPrimitive","geometry","updaters","updatersWithAttributes","attributes","subscriptions","showsUpdated","itemsToRemove","isDirty","rectangleCollisionCheck","prototype","overlapping","rectangle","collides","add","updater","instance","id","set","insert","hasConstantFill","fillMaterialProperty","isConstant","distanceDisplayConditionProperty","that","entity","definitionChanged","addEventListener","propertyName","newValue","oldValue","remove","geometryInstance","get","unsubscribe","update","time","isUpdated","removedCount","i","geometries","values","geometriesLength","length","show","asynchronous","geometryInstances","slice","removeAll","ready","getGeometryInstanceAttributes","colorProperty","fillColor","getValueOrDefault","WHITE","equals","_lastColor","clone","toValue","isShowing","isFilled","currentShow","distanceDisplayCondition","_lastDistanceDisplayCondition","updateShows","value","contains","getBoundingSphere","result","PENDING","bs","FAILED","DONE","removeAllPrimitives","StaticGroundGeometryColorBatch","_batches","_primitives","_classificationType","createFillGeometryInstance","batches","batch","item","push","count","batchCount","oldBatch","itemsToMoveLength","j","newBatch","splice"],"mappings":"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","sourcesContent":["import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport GroundPrimitive from \"../Scene/GroundPrimitive.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\nimport RectangleCollisionChecker from \"../Core/RectangleCollisionChecker.js\";\n\nvar colorScratch = new Color();\nvar distanceDisplayConditionScratch = new DistanceDisplayCondition();\nvar defaultDistanceDisplayCondition = new DistanceDisplayCondition();\n\nfunction Batch(primitives, classificationType, color, zIndex) {\n  this.primitives = primitives;\n  this.zIndex = zIndex;\n  this.classificationType = classificationType;\n  this.color = color;\n  this.createPrimitive = false;\n  this.waitingOnCreate = false;\n  this.primitive = undefined;\n  this.oldPrimitive = undefined;\n  this.geometry = new AssociativeArray();\n  this.updaters = new AssociativeArray();\n  this.updatersWithAttributes = new AssociativeArray();\n  this.attributes = new AssociativeArray();\n  this.subscriptions = new AssociativeArray();\n  this.showsUpdated = new AssociativeArray();\n  this.itemsToRemove = [];\n  this.isDirty = false;\n  this.rectangleCollisionCheck = new RectangleCollisionChecker();\n}\n\nBatch.prototype.overlapping = function (rectangle) {\n  return this.rectangleCollisionCheck.collides(rectangle);\n};\n\nBatch.prototype.add = function (updater, instance) {\n  var id = updater.id;\n  this.createPrimitive = true;\n  this.geometry.set(id, instance);\n  this.updaters.set(id, updater);\n  this.rectangleCollisionCheck.insert(id, instance.geometry.rectangle);\n  if (\n    !updater.hasConstantFill ||\n    !updater.fillMaterialProperty.isConstant ||\n    !Property.isConstant(updater.distanceDisplayConditionProperty)\n  ) {\n    this.updatersWithAttributes.set(id, updater);\n  } else {\n    var that = this;\n    this.subscriptions.set(\n      id,\n      updater.entity.definitionChanged.addEventListener(function (\n        entity,\n        propertyName,\n        newValue,\n        oldValue\n      ) {\n        if (propertyName === \"isShowing\") {\n          that.showsUpdated.set(updater.id, updater);\n        }\n      })\n    );\n  }\n};\n\nBatch.prototype.remove = function (updater) {\n  var id = updater.id;\n  var geometryInstance = this.geometry.get(id);\n  this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n  if (this.updaters.remove(id)) {\n    this.rectangleCollisionCheck.remove(\n      id,\n      geometryInstance.geometry.rectangle\n    );\n    this.updatersWithAttributes.remove(id);\n    var unsubscribe = this.subscriptions.get(id);\n    if (defined(unsubscribe)) {\n      unsubscribe();\n      this.subscriptions.remove(id);\n      this.showsUpdated.remove(id);\n    }\n    return true;\n  }\n  return false;\n};\n\nBatch.prototype.update = function (time) {\n  var isUpdated = true;\n  var removedCount = 0;\n  var primitive = this.primitive;\n  var primitives = this.primitives;\n  var i;\n\n  if (this.createPrimitive) {\n    var geometries = this.geometry.values;\n    var geometriesLength = geometries.length;\n    if (geometriesLength > 0) {\n      if (defined(primitive)) {\n        if (!defined(this.oldPrimitive)) {\n          this.oldPrimitive = primitive;\n        } else {\n          primitives.remove(primitive);\n        }\n      }\n\n      primitive = new GroundPrimitive({\n        show: false,\n        asynchronous: true,\n        geometryInstances: geometries.slice(),\n        classificationType: this.classificationType,\n      });\n      primitives.add(primitive, this.zIndex);\n      isUpdated = false;\n    } else {\n      if (defined(primitive)) {\n        primitives.remove(primitive);\n        primitive = undefined;\n      }\n      var oldPrimitive = this.oldPrimitive;\n      if (defined(oldPrimitive)) {\n        primitives.remove(oldPrimitive);\n        this.oldPrimitive = undefined;\n      }\n    }\n\n    this.attributes.removeAll();\n    this.primitive = primitive;\n    this.createPrimitive = false;\n    this.waitingOnCreate = true;\n  } else if (defined(primitive) && primitive.ready) {\n    primitive.show = true;\n    if (defined(this.oldPrimitive)) {\n      primitives.remove(this.oldPrimitive);\n      this.oldPrimitive = undefined;\n    }\n    var updatersWithAttributes = this.updatersWithAttributes.values;\n    var length = updatersWithAttributes.length;\n    var waitingOnCreate = this.waitingOnCreate;\n    for (i = 0; i < length; i++) {\n      var updater = updatersWithAttributes[i];\n      var instance = this.geometry.get(updater.id);\n\n      var attributes = this.attributes.get(instance.id.id);\n      if (!defined(attributes)) {\n        attributes = primitive.getGeometryInstanceAttributes(instance.id);\n        this.attributes.set(instance.id.id, attributes);\n      }\n\n      if (!updater.fillMaterialProperty.isConstant || waitingOnCreate) {\n        var colorProperty = updater.fillMaterialProperty.color;\n        var fillColor = Property.getValueOrDefault(\n          colorProperty,\n          time,\n          Color.WHITE,\n          colorScratch\n        );\n\n        if (!Color.equals(attributes._lastColor, fillColor)) {\n          attributes._lastColor = Color.clone(fillColor, attributes._lastColor);\n          attributes.color = ColorGeometryInstanceAttribute.toValue(\n            fillColor,\n            attributes.color\n          );\n        }\n      }\n\n      var show =\n        updater.entity.isShowing &&\n        (updater.hasConstantFill || updater.isFilled(time));\n      var currentShow = attributes.show[0] === 1;\n      if (show !== currentShow) {\n        attributes.show = ShowGeometryInstanceAttribute.toValue(\n          show,\n          attributes.show\n        );\n      }\n\n      var distanceDisplayConditionProperty =\n        updater.distanceDisplayConditionProperty;\n      if (!Property.isConstant(distanceDisplayConditionProperty)) {\n        var distanceDisplayCondition = Property.getValueOrDefault(\n          distanceDisplayConditionProperty,\n          time,\n          defaultDistanceDisplayCondition,\n          distanceDisplayConditionScratch\n        );\n        if (\n          !DistanceDisplayCondition.equals(\n            distanceDisplayCondition,\n            attributes._lastDistanceDisplayCondition\n          )\n        ) {\n          attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(\n            distanceDisplayCondition,\n            attributes._lastDistanceDisplayCondition\n          );\n          attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(\n            distanceDisplayCondition,\n            attributes.distanceDisplayCondition\n          );\n        }\n      }\n    }\n\n    this.updateShows(primitive);\n    this.waitingOnCreate = false;\n  } else if (defined(primitive) && !primitive.ready) {\n    isUpdated = false;\n  }\n  this.itemsToRemove.length = removedCount;\n  return isUpdated;\n};\n\nBatch.prototype.updateShows = function (primitive) {\n  var showsUpdated = this.showsUpdated.values;\n  var length = showsUpdated.length;\n  for (var i = 0; i < length; i++) {\n    var updater = showsUpdated[i];\n    var instance = this.geometry.get(updater.id);\n\n    var attributes = this.attributes.get(instance.id.id);\n    if (!defined(attributes)) {\n      attributes = primitive.getGeometryInstanceAttributes(instance.id);\n      this.attributes.set(instance.id.id, attributes);\n    }\n\n    var show = updater.entity.isShowing;\n    var currentShow = attributes.show[0] === 1;\n    if (show !== currentShow) {\n      attributes.show = ShowGeometryInstanceAttribute.toValue(\n        show,\n        attributes.show\n      );\n      instance.attributes.show.value[0] = attributes.show[0];\n    }\n  }\n  this.showsUpdated.removeAll();\n};\n\nBatch.prototype.contains = function (updater) {\n  return this.updaters.contains(updater.id);\n};\n\nBatch.prototype.getBoundingSphere = function (updater, result) {\n  var primitive = this.primitive;\n  if (!primitive.ready) {\n    return BoundingSphereState.PENDING;\n  }\n\n  var bs = primitive.getBoundingSphere(updater.entity);\n  if (!defined(bs)) {\n    return BoundingSphereState.FAILED;\n  }\n\n  bs.clone(result);\n  return BoundingSphereState.DONE;\n};\n\nBatch.prototype.removeAllPrimitives = function () {\n  var primitives = this.primitives;\n\n  var primitive = this.primitive;\n  if (defined(primitive)) {\n    primitives.remove(primitive);\n    this.primitive = undefined;\n    this.geometry.removeAll();\n    this.updaters.removeAll();\n  }\n\n  var oldPrimitive = this.oldPrimitive;\n  if (defined(oldPrimitive)) {\n    primitives.remove(oldPrimitive);\n    this.oldPrimitive = undefined;\n  }\n};\n\n/**\n * @private\n */\nfunction StaticGroundGeometryColorBatch(primitives, classificationType) {\n  this._batches = [];\n  this._primitives = primitives;\n  this._classificationType = classificationType;\n}\n\nStaticGroundGeometryColorBatch.prototype.add = function (time, updater) {\n  var instance = updater.createFillGeometryInstance(time);\n  var batches = this._batches;\n  var zIndex = Property.getValueOrDefault(updater.zIndex, 0);\n  var batch;\n  var length = batches.length;\n  for (var i = 0; i < length; ++i) {\n    var item = batches[i];\n    if (\n      item.zIndex === zIndex &&\n      !item.overlapping(instance.geometry.rectangle)\n    ) {\n      batch = item;\n      break;\n    }\n  }\n\n  if (!defined(batch)) {\n    batch = new Batch(\n      this._primitives,\n      this._classificationType,\n      instance.attributes.color.value,\n      zIndex\n    );\n    batches.push(batch);\n  }\n  batch.add(updater, instance);\n  return batch;\n};\n\nStaticGroundGeometryColorBatch.prototype.remove = function (updater) {\n  var batches = this._batches;\n  var count = batches.length;\n  for (var i = 0; i < count; ++i) {\n    if (batches[i].remove(updater)) {\n      return;\n    }\n  }\n};\n\nStaticGroundGeometryColorBatch.prototype.update = function (time) {\n  var i;\n  var updater;\n\n  //Perform initial update\n  var isUpdated = true;\n  var batches = this._batches;\n  var batchCount = batches.length;\n  for (i = 0; i < batchCount; ++i) {\n    isUpdated = batches[i].update(time) && isUpdated;\n  }\n\n  //If any items swapped between batches we need to move them\n  for (i = 0; i < batchCount; ++i) {\n    var oldBatch = batches[i];\n    var itemsToRemove = oldBatch.itemsToRemove;\n    var itemsToMoveLength = itemsToRemove.length;\n    for (var j = 0; j < itemsToMoveLength; j++) {\n      updater = itemsToRemove[j];\n      oldBatch.remove(updater);\n      var newBatch = this.add(time, updater);\n      oldBatch.isDirty = true;\n      newBatch.isDirty = true;\n    }\n  }\n\n  //If we moved anything around, we need to re-build the primitive and remove empty batches\n  for (i = batchCount - 1; i >= 0; --i) {\n    var batch = batches[i];\n    if (batch.isDirty) {\n      isUpdated = batches[i].update(time) && isUpdated;\n      batch.isDirty = false;\n    }\n    if (batch.geometry.length === 0) {\n      batches.splice(i, 1);\n    }\n  }\n\n  return isUpdated;\n};\n\nStaticGroundGeometryColorBatch.prototype.getBoundingSphere = function (\n  updater,\n  result\n) {\n  var batches = this._batches;\n  var batchCount = batches.length;\n  for (var i = 0; i < batchCount; ++i) {\n    var batch = batches[i];\n    if (batch.contains(updater)) {\n      return batch.getBoundingSphere(updater, result);\n    }\n  }\n\n  return BoundingSphereState.FAILED;\n};\n\nStaticGroundGeometryColorBatch.prototype.removeAllPrimitives = function () {\n  var batches = this._batches;\n  var batchCount = batches.length;\n  for (var i = 0; i < batchCount; ++i) {\n    batches[i].removeAllPrimitives();\n  }\n};\nexport default StaticGroundGeometryColorBatch;\n"]},"metadata":{},"sourceType":"module"}