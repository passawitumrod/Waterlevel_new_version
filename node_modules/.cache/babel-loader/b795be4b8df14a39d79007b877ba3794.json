{"ast":null,"code":"import buildModuleUrl from \"../../Core/buildModuleUrl.js\";\nimport Check from \"../../Core/Check.js\";\nimport Color from \"../../Core/Color.js\";\nimport defined from \"../../Core/defined.js\";\nimport destroyObject from \"../../Core/destroyObject.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nimport getElement from \"../getElement.js\";\nimport subscribeAndEvaluate from \"../subscribeAndEvaluate.js\";\nimport InfoBoxViewModel from \"./InfoBoxViewModel.js\";\n/**\n * A widget for displaying information or a description.\n *\n * @alias InfoBox\n * @constructor\n *\n * @param {Element|String} container The DOM element or ID that will contain the widget.\n *\n * @exception {DeveloperError} Element with id \"container\" does not exist in the document.\n */\n\nfunction InfoBox(container) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"container\", container); //>>includeEnd('debug')\n\n  container = getElement(container);\n  var infoElement = document.createElement(\"div\");\n  infoElement.className = \"cesium-infoBox\";\n  infoElement.setAttribute(\"data-bind\", '\\\ncss: { \"cesium-infoBox-visible\" : showInfo, \"cesium-infoBox-bodyless\" : _bodyless }');\n  container.appendChild(infoElement);\n  var titleElement = document.createElement(\"div\");\n  titleElement.className = \"cesium-infoBox-title\";\n  titleElement.setAttribute(\"data-bind\", \"text: titleText\");\n  infoElement.appendChild(titleElement);\n  var cameraElement = document.createElement(\"button\");\n  cameraElement.type = \"button\";\n  cameraElement.className = \"cesium-button cesium-infoBox-camera\";\n  cameraElement.setAttribute(\"data-bind\", '\\\nattr: { title: \"Focus camera on object\" },\\\nclick: function () { cameraClicked.raiseEvent(this); },\\\nenable: enableCamera,\\\ncesiumSvgPath: { path: cameraIconPath, width: 32, height: 32 }');\n  infoElement.appendChild(cameraElement);\n  var closeElement = document.createElement(\"button\");\n  closeElement.type = \"button\";\n  closeElement.className = \"cesium-infoBox-close\";\n  closeElement.setAttribute(\"data-bind\", \"\\\nclick: function () { closeClicked.raiseEvent(this); }\");\n  closeElement.innerHTML = \"&times;\";\n  infoElement.appendChild(closeElement);\n  var frame = document.createElement(\"iframe\");\n  frame.className = \"cesium-infoBox-iframe\";\n  frame.setAttribute(\"sandbox\", \"allow-same-origin allow-popups allow-forms\"); //allow-pointer-lock allow-scripts allow-top-navigation\n\n  frame.setAttribute(\"data-bind\", \"style : { maxHeight : maxHeightOffset(40) }\");\n  frame.setAttribute(\"allowfullscreen\", true);\n  infoElement.appendChild(frame);\n  var viewModel = new InfoBoxViewModel();\n  knockout.applyBindings(viewModel, infoElement);\n  this._container = container;\n  this._element = infoElement;\n  this._frame = frame;\n  this._viewModel = viewModel;\n  this._descriptionSubscription = undefined;\n  var that = this; //We can't actually add anything into the frame until the load event is fired\n\n  frame.addEventListener(\"load\", function () {\n    var frameDocument = frame.contentDocument; //We inject default css into the content iframe,\n    //end users can remove it or add their own via the exposed frame property.\n\n    var cssLink = frameDocument.createElement(\"link\");\n    cssLink.href = buildModuleUrl(\"Widgets/InfoBox/InfoBoxDescription.css\");\n    cssLink.rel = \"stylesheet\";\n    cssLink.type = \"text/css\"; //div to use for description content.\n\n    var frameContent = frameDocument.createElement(\"div\");\n    frameContent.className = \"cesium-infoBox-description\";\n    frameDocument.head.appendChild(cssLink);\n    frameDocument.body.appendChild(frameContent); //We manually subscribe to the description event rather than through a binding for two reasons.\n    //1. It's an easy way to ensure order of operation so that we can adjust the height.\n    //2. Knockout does not bind to elements inside of an iFrame, so we would have to apply a second binding\n    //   model anyway.\n\n    that._descriptionSubscription = subscribeAndEvaluate(viewModel, \"description\", function (value) {\n      // Set the frame to small height, force vertical scroll bar to appear, and text to wrap accordingly.\n      frame.style.height = \"5px\";\n      frameContent.innerHTML = value; //If the snippet is a single element, then use its background\n      //color for the body of the InfoBox. This makes the padding match\n      //the content and produces much nicer results.\n\n      var background = null;\n      var firstElementChild = frameContent.firstElementChild;\n\n      if (firstElementChild !== null && frameContent.childNodes.length === 1) {\n        var style = window.getComputedStyle(firstElementChild);\n\n        if (style !== null) {\n          var backgroundColor = style[\"background-color\"];\n          var color = Color.fromCssColorString(backgroundColor);\n\n          if (defined(color) && color.alpha !== 0) {\n            background = style[\"background-color\"];\n          }\n        }\n      }\n\n      infoElement.style[\"background-color\"] = background; // Measure and set the new custom height, based on text wrapped above.\n\n      var height = frameContent.getBoundingClientRect().height;\n      frame.style.height = height + \"px\";\n    });\n  }); //Chrome does not send the load event unless we explicitly set a src\n\n  frame.setAttribute(\"src\", \"about:blank\");\n}\n\nObject.defineProperties(InfoBox.prototype, {\n  /**\n   * Gets the parent container.\n   * @memberof InfoBox.prototype\n   *\n   * @type {Element}\n   */\n  container: {\n    get: function get() {\n      return this._container;\n    }\n  },\n\n  /**\n   * Gets the view model.\n   * @memberof InfoBox.prototype\n   *\n   * @type {InfoBoxViewModel}\n   */\n  viewModel: {\n    get: function get() {\n      return this._viewModel;\n    }\n  },\n\n  /**\n   * Gets the iframe used to display the description.\n   * @memberof InfoBox.prototype\n   *\n   * @type {HTMLIFrameElement}\n   */\n  frame: {\n    get: function get() {\n      return this._frame;\n    }\n  }\n});\n/**\n * @returns {Boolean} true if the object has been destroyed, false otherwise.\n */\n\nInfoBox.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys the widget.  Should be called if permanently\n * removing the widget from layout.\n */\n\n\nInfoBox.prototype.destroy = function () {\n  var container = this._container;\n  knockout.cleanNode(this._element);\n  container.removeChild(this._element);\n\n  if (defined(this._descriptionSubscription)) {\n    this._descriptionSubscription.dispose();\n  }\n\n  return destroyObject(this);\n};\n\nexport default InfoBox;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Widgets/InfoBox/InfoBox.js"],"names":["buildModuleUrl","Check","Color","defined","destroyObject","knockout","getElement","subscribeAndEvaluate","InfoBoxViewModel","InfoBox","container","infoElement","document","createElement","className","setAttribute","appendChild","titleElement","cameraElement","type","closeElement","innerHTML","frame","viewModel","applyBindings","_container","_element","_frame","_viewModel","_descriptionSubscription","undefined","that","addEventListener","frameDocument","contentDocument","cssLink","href","rel","frameContent","head","body","value","style","height","background","firstElementChild","childNodes","length","window","getComputedStyle","backgroundColor","color","fromCssColorString","alpha","getBoundingClientRect","Object","defineProperties","prototype","get","isDestroyed","destroy","cleanNode","removeChild","dispose"],"mappings":"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","sourcesContent":["import buildModuleUrl from \"../../Core/buildModuleUrl.js\";\nimport Check from \"../../Core/Check.js\";\nimport Color from \"../../Core/Color.js\";\nimport defined from \"../../Core/defined.js\";\nimport destroyObject from \"../../Core/destroyObject.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nimport getElement from \"../getElement.js\";\nimport subscribeAndEvaluate from \"../subscribeAndEvaluate.js\";\nimport InfoBoxViewModel from \"./InfoBoxViewModel.js\";\n\n/**\n * A widget for displaying information or a description.\n *\n * @alias InfoBox\n * @constructor\n *\n * @param {Element|String} container The DOM element or ID that will contain the widget.\n *\n * @exception {DeveloperError} Element with id \"container\" does not exist in the document.\n */\nfunction InfoBox(container) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"container\", container);\n  //>>includeEnd('debug')\n\n  container = getElement(container);\n\n  var infoElement = document.createElement(\"div\");\n  infoElement.className = \"cesium-infoBox\";\n  infoElement.setAttribute(\n    \"data-bind\",\n    '\\\ncss: { \"cesium-infoBox-visible\" : showInfo, \"cesium-infoBox-bodyless\" : _bodyless }'\n  );\n  container.appendChild(infoElement);\n\n  var titleElement = document.createElement(\"div\");\n  titleElement.className = \"cesium-infoBox-title\";\n  titleElement.setAttribute(\"data-bind\", \"text: titleText\");\n  infoElement.appendChild(titleElement);\n\n  var cameraElement = document.createElement(\"button\");\n  cameraElement.type = \"button\";\n  cameraElement.className = \"cesium-button cesium-infoBox-camera\";\n  cameraElement.setAttribute(\n    \"data-bind\",\n    '\\\nattr: { title: \"Focus camera on object\" },\\\nclick: function () { cameraClicked.raiseEvent(this); },\\\nenable: enableCamera,\\\ncesiumSvgPath: { path: cameraIconPath, width: 32, height: 32 }'\n  );\n  infoElement.appendChild(cameraElement);\n\n  var closeElement = document.createElement(\"button\");\n  closeElement.type = \"button\";\n  closeElement.className = \"cesium-infoBox-close\";\n  closeElement.setAttribute(\n    \"data-bind\",\n    \"\\\nclick: function () { closeClicked.raiseEvent(this); }\"\n  );\n  closeElement.innerHTML = \"&times;\";\n  infoElement.appendChild(closeElement);\n\n  var frame = document.createElement(\"iframe\");\n  frame.className = \"cesium-infoBox-iframe\";\n  frame.setAttribute(\"sandbox\", \"allow-same-origin allow-popups allow-forms\"); //allow-pointer-lock allow-scripts allow-top-navigation\n  frame.setAttribute(\n    \"data-bind\",\n    \"style : { maxHeight : maxHeightOffset(40) }\"\n  );\n  frame.setAttribute(\"allowfullscreen\", true);\n  infoElement.appendChild(frame);\n\n  var viewModel = new InfoBoxViewModel();\n  knockout.applyBindings(viewModel, infoElement);\n\n  this._container = container;\n  this._element = infoElement;\n  this._frame = frame;\n  this._viewModel = viewModel;\n  this._descriptionSubscription = undefined;\n\n  var that = this;\n  //We can't actually add anything into the frame until the load event is fired\n  frame.addEventListener(\"load\", function () {\n    var frameDocument = frame.contentDocument;\n\n    //We inject default css into the content iframe,\n    //end users can remove it or add their own via the exposed frame property.\n    var cssLink = frameDocument.createElement(\"link\");\n    cssLink.href = buildModuleUrl(\"Widgets/InfoBox/InfoBoxDescription.css\");\n    cssLink.rel = \"stylesheet\";\n    cssLink.type = \"text/css\";\n\n    //div to use for description content.\n    var frameContent = frameDocument.createElement(\"div\");\n    frameContent.className = \"cesium-infoBox-description\";\n\n    frameDocument.head.appendChild(cssLink);\n    frameDocument.body.appendChild(frameContent);\n\n    //We manually subscribe to the description event rather than through a binding for two reasons.\n    //1. It's an easy way to ensure order of operation so that we can adjust the height.\n    //2. Knockout does not bind to elements inside of an iFrame, so we would have to apply a second binding\n    //   model anyway.\n    that._descriptionSubscription = subscribeAndEvaluate(\n      viewModel,\n      \"description\",\n      function (value) {\n        // Set the frame to small height, force vertical scroll bar to appear, and text to wrap accordingly.\n        frame.style.height = \"5px\";\n        frameContent.innerHTML = value;\n\n        //If the snippet is a single element, then use its background\n        //color for the body of the InfoBox. This makes the padding match\n        //the content and produces much nicer results.\n        var background = null;\n        var firstElementChild = frameContent.firstElementChild;\n        if (\n          firstElementChild !== null &&\n          frameContent.childNodes.length === 1\n        ) {\n          var style = window.getComputedStyle(firstElementChild);\n          if (style !== null) {\n            var backgroundColor = style[\"background-color\"];\n            var color = Color.fromCssColorString(backgroundColor);\n            if (defined(color) && color.alpha !== 0) {\n              background = style[\"background-color\"];\n            }\n          }\n        }\n        infoElement.style[\"background-color\"] = background;\n\n        // Measure and set the new custom height, based on text wrapped above.\n        var height = frameContent.getBoundingClientRect().height;\n        frame.style.height = height + \"px\";\n      }\n    );\n  });\n\n  //Chrome does not send the load event unless we explicitly set a src\n  frame.setAttribute(\"src\", \"about:blank\");\n}\n\nObject.defineProperties(InfoBox.prototype, {\n  /**\n   * Gets the parent container.\n   * @memberof InfoBox.prototype\n   *\n   * @type {Element}\n   */\n  container: {\n    get: function () {\n      return this._container;\n    },\n  },\n\n  /**\n   * Gets the view model.\n   * @memberof InfoBox.prototype\n   *\n   * @type {InfoBoxViewModel}\n   */\n  viewModel: {\n    get: function () {\n      return this._viewModel;\n    },\n  },\n\n  /**\n   * Gets the iframe used to display the description.\n   * @memberof InfoBox.prototype\n   *\n   * @type {HTMLIFrameElement}\n   */\n  frame: {\n    get: function () {\n      return this._frame;\n    },\n  },\n});\n\n/**\n * @returns {Boolean} true if the object has been destroyed, false otherwise.\n */\nInfoBox.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the widget.  Should be called if permanently\n * removing the widget from layout.\n */\nInfoBox.prototype.destroy = function () {\n  var container = this._container;\n  knockout.cleanNode(this._element);\n  container.removeChild(this._element);\n\n  if (defined(this._descriptionSubscription)) {\n    this._descriptionSubscription.dispose();\n  }\n\n  return destroyObject(this);\n};\nexport default InfoBox;\n"]},"metadata":{},"sourceType":"module"}