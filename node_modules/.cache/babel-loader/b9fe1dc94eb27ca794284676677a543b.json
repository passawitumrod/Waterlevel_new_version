{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport EllipsoidGeometry from \"./EllipsoidGeometry.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n/**\n * A description of a sphere centered at the origin.\n *\n * @alias SphereGeometry\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Number} [options.radius=1.0] The radius of the sphere.\n * @param {Number} [options.stackPartitions=64] The number of times to partition the ellipsoid into stacks.\n * @param {Number} [options.slicePartitions=64] The number of times to partition the ellipsoid into radial slices.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @exception {DeveloperError} options.slicePartitions cannot be less than three.\n * @exception {DeveloperError} options.stackPartitions cannot be less than three.\n *\n * @see SphereGeometry#createGeometry\n *\n * @example\n * var sphere = new Cesium.SphereGeometry({\n *   radius : 100.0,\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY\n * });\n * var geometry = Cesium.SphereGeometry.createGeometry(sphere);\n */\n\nfunction SphereGeometry(options) {\n  var radius = defaultValue(options.radius, 1.0);\n  var radii = new Cartesian3(radius, radius, radius);\n  var ellipsoidOptions = {\n    radii: radii,\n    stackPartitions: options.stackPartitions,\n    slicePartitions: options.slicePartitions,\n    vertexFormat: options.vertexFormat\n  };\n  this._ellipsoidGeometry = new EllipsoidGeometry(ellipsoidOptions);\n  this._workerName = \"createSphereGeometry\";\n}\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\n\n\nSphereGeometry.packedLength = EllipsoidGeometry.packedLength;\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {SphereGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\n\nSphereGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value); //>>includeEnd('debug');\n\n  return EllipsoidGeometry.pack(value._ellipsoidGeometry, array, startingIndex);\n};\n\nvar scratchEllipsoidGeometry = new EllipsoidGeometry();\nvar scratchOptions = {\n  radius: undefined,\n  radii: new Cartesian3(),\n  vertexFormat: new VertexFormat(),\n  stackPartitions: undefined,\n  slicePartitions: undefined\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {SphereGeometry} [result] The object into which to store the result.\n * @returns {SphereGeometry} The modified result parameter or a new SphereGeometry instance if one was not provided.\n */\n\nSphereGeometry.unpack = function (array, startingIndex, result) {\n  var ellipsoidGeometry = EllipsoidGeometry.unpack(array, startingIndex, scratchEllipsoidGeometry);\n  scratchOptions.vertexFormat = VertexFormat.clone(ellipsoidGeometry._vertexFormat, scratchOptions.vertexFormat);\n  scratchOptions.stackPartitions = ellipsoidGeometry._stackPartitions;\n  scratchOptions.slicePartitions = ellipsoidGeometry._slicePartitions;\n\n  if (!defined(result)) {\n    scratchOptions.radius = ellipsoidGeometry._radii.x;\n    return new SphereGeometry(scratchOptions);\n  }\n\n  Cartesian3.clone(ellipsoidGeometry._radii, scratchOptions.radii);\n  result._ellipsoidGeometry = new EllipsoidGeometry(scratchOptions);\n  return result;\n};\n/**\n * Computes the geometric representation of a sphere, including its vertices, indices, and a bounding sphere.\n *\n * @param {SphereGeometry} sphereGeometry A description of the sphere.\n * @returns {Geometry} The computed vertices and indices.\n */\n\n\nSphereGeometry.createGeometry = function (sphereGeometry) {\n  return EllipsoidGeometry.createGeometry(sphereGeometry._ellipsoidGeometry);\n};\n\nexport default SphereGeometry;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/SphereGeometry.js"],"names":["Cartesian3","Check","defaultValue","defined","EllipsoidGeometry","VertexFormat","SphereGeometry","options","radius","radii","ellipsoidOptions","stackPartitions","slicePartitions","vertexFormat","_ellipsoidGeometry","_workerName","packedLength","pack","value","array","startingIndex","typeOf","object","scratchEllipsoidGeometry","scratchOptions","undefined","unpack","result","ellipsoidGeometry","clone","_vertexFormat","_stackPartitions","_slicePartitions","_radii","x","createGeometry","sphereGeometry"],"mappings":"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","sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport EllipsoidGeometry from \"./EllipsoidGeometry.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\n/**\n * A description of a sphere centered at the origin.\n *\n * @alias SphereGeometry\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Number} [options.radius=1.0] The radius of the sphere.\n * @param {Number} [options.stackPartitions=64] The number of times to partition the ellipsoid into stacks.\n * @param {Number} [options.slicePartitions=64] The number of times to partition the ellipsoid into radial slices.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @exception {DeveloperError} options.slicePartitions cannot be less than three.\n * @exception {DeveloperError} options.stackPartitions cannot be less than three.\n *\n * @see SphereGeometry#createGeometry\n *\n * @example\n * var sphere = new Cesium.SphereGeometry({\n *   radius : 100.0,\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY\n * });\n * var geometry = Cesium.SphereGeometry.createGeometry(sphere);\n */\nfunction SphereGeometry(options) {\n  var radius = defaultValue(options.radius, 1.0);\n  var radii = new Cartesian3(radius, radius, radius);\n  var ellipsoidOptions = {\n    radii: radii,\n    stackPartitions: options.stackPartitions,\n    slicePartitions: options.slicePartitions,\n    vertexFormat: options.vertexFormat,\n  };\n\n  this._ellipsoidGeometry = new EllipsoidGeometry(ellipsoidOptions);\n  this._workerName = \"createSphereGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nSphereGeometry.packedLength = EllipsoidGeometry.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {SphereGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nSphereGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  //>>includeEnd('debug');\n\n  return EllipsoidGeometry.pack(value._ellipsoidGeometry, array, startingIndex);\n};\n\nvar scratchEllipsoidGeometry = new EllipsoidGeometry();\nvar scratchOptions = {\n  radius: undefined,\n  radii: new Cartesian3(),\n  vertexFormat: new VertexFormat(),\n  stackPartitions: undefined,\n  slicePartitions: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {SphereGeometry} [result] The object into which to store the result.\n * @returns {SphereGeometry} The modified result parameter or a new SphereGeometry instance if one was not provided.\n */\nSphereGeometry.unpack = function (array, startingIndex, result) {\n  var ellipsoidGeometry = EllipsoidGeometry.unpack(\n    array,\n    startingIndex,\n    scratchEllipsoidGeometry\n  );\n  scratchOptions.vertexFormat = VertexFormat.clone(\n    ellipsoidGeometry._vertexFormat,\n    scratchOptions.vertexFormat\n  );\n  scratchOptions.stackPartitions = ellipsoidGeometry._stackPartitions;\n  scratchOptions.slicePartitions = ellipsoidGeometry._slicePartitions;\n\n  if (!defined(result)) {\n    scratchOptions.radius = ellipsoidGeometry._radii.x;\n    return new SphereGeometry(scratchOptions);\n  }\n\n  Cartesian3.clone(ellipsoidGeometry._radii, scratchOptions.radii);\n  result._ellipsoidGeometry = new EllipsoidGeometry(scratchOptions);\n  return result;\n};\n\n/**\n * Computes the geometric representation of a sphere, including its vertices, indices, and a bounding sphere.\n *\n * @param {SphereGeometry} sphereGeometry A description of the sphere.\n * @returns {Geometry} The computed vertices and indices.\n */\nSphereGeometry.createGeometry = function (sphereGeometry) {\n  return EllipsoidGeometry.createGeometry(sphereGeometry._ellipsoidGeometry);\n};\nexport default SphereGeometry;\n"]},"metadata":{},"sourceType":"module"}