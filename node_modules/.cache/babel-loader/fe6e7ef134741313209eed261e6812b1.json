{"ast":null,"code":"import defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport EllipsoidTerrainProvider from \"../../Core/EllipsoidTerrainProvider.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\n/**\n * The view model for {@link BaseLayerPicker}.\n * @alias BaseLayerPickerViewModel\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Globe} options.globe The Globe to use.\n * @param {ProviderViewModel[]} [options.imageryProviderViewModels=[]] The array of ProviderViewModel instances to use for imagery.\n * @param {ProviderViewModel} [options.selectedImageryProviderViewModel] The view model for the current base imagery layer, if not supplied the first available imagery layer is used.\n * @param {ProviderViewModel[]} [options.terrainProviderViewModels=[]] The array of ProviderViewModel instances to use for terrain.\n * @param {ProviderViewModel} [options.selectedTerrainProviderViewModel] The view model for the current base terrain layer, if not supplied the first available terrain layer is used.\n *\n * @exception {DeveloperError} imageryProviderViewModels must be an array.\n * @exception {DeveloperError} terrainProviderViewModels must be an array.\n */\n\nfunction BaseLayerPickerViewModel(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var globe = options.globe;\n  var imageryProviderViewModels = defaultValue(options.imageryProviderViewModels, []);\n  var terrainProviderViewModels = defaultValue(options.terrainProviderViewModels, []); //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(globe)) {\n    throw new DeveloperError(\"globe is required\");\n  } //>>includeEnd('debug');\n\n\n  this._globe = globe;\n  /**\n   * Gets or sets an array of ProviderViewModel instances available for imagery selection.\n   * This property is observable.\n   * @type {ProviderViewModel[]}\n   */\n\n  this.imageryProviderViewModels = imageryProviderViewModels.slice(0);\n  /**\n   * Gets or sets an array of ProviderViewModel instances available for terrain selection.\n   * This property is observable.\n   * @type {ProviderViewModel[]}\n   */\n\n  this.terrainProviderViewModels = terrainProviderViewModels.slice(0);\n  /**\n   * Gets or sets whether the imagery selection drop-down is currently visible.\n   * @type {Boolean}\n   * @default false\n   */\n\n  this.dropDownVisible = false;\n  knockout.track(this, [\"imageryProviderViewModels\", \"terrainProviderViewModels\", \"dropDownVisible\"]);\n  var imageryObservable = knockout.getObservable(this, \"imageryProviderViewModels\");\n  var imageryProviders = knockout.pureComputed(function () {\n    var providers = imageryObservable();\n    var categories = {};\n    var i;\n\n    for (i = 0; i < providers.length; i++) {\n      var provider = providers[i];\n      var category = provider.category;\n\n      if (defined(categories[category])) {\n        categories[category].push(provider);\n      } else {\n        categories[category] = [provider];\n      }\n    }\n\n    var allCategoryNames = Object.keys(categories);\n    var result = [];\n\n    for (i = 0; i < allCategoryNames.length; i++) {\n      var name = allCategoryNames[i];\n      result.push({\n        name: name,\n        providers: categories[name]\n      });\n    }\n\n    return result;\n  });\n  this._imageryProviders = imageryProviders;\n  var terrainObservable = knockout.getObservable(this, \"terrainProviderViewModels\");\n  var terrainProviders = knockout.pureComputed(function () {\n    var providers = terrainObservable();\n    var categories = {};\n    var i;\n\n    for (i = 0; i < providers.length; i++) {\n      var provider = providers[i];\n      var category = provider.category;\n\n      if (defined(categories[category])) {\n        categories[category].push(provider);\n      } else {\n        categories[category] = [provider];\n      }\n    }\n\n    var allCategoryNames = Object.keys(categories);\n    var result = [];\n\n    for (i = 0; i < allCategoryNames.length; i++) {\n      var name = allCategoryNames[i];\n      result.push({\n        name: name,\n        providers: categories[name]\n      });\n    }\n\n    return result;\n  });\n  this._terrainProviders = terrainProviders;\n  /**\n   * Gets the button tooltip.  This property is observable.\n   * @type {String}\n   */\n\n  this.buttonTooltip = undefined;\n  knockout.defineProperty(this, \"buttonTooltip\", function () {\n    var selectedImagery = this.selectedImagery;\n    var selectedTerrain = this.selectedTerrain;\n    var imageryTip = defined(selectedImagery) ? selectedImagery.name : undefined;\n    var terrainTip = defined(selectedTerrain) ? selectedTerrain.name : undefined;\n\n    if (defined(imageryTip) && defined(terrainTip)) {\n      return imageryTip + \"\\n\" + terrainTip;\n    } else if (defined(imageryTip)) {\n      return imageryTip;\n    }\n\n    return terrainTip;\n  });\n  /**\n   * Gets the button background image.  This property is observable.\n   * @type {String}\n   */\n\n  this.buttonImageUrl = undefined;\n  knockout.defineProperty(this, \"buttonImageUrl\", function () {\n    var selectedImagery = this.selectedImagery;\n\n    if (defined(selectedImagery)) {\n      return selectedImagery.iconUrl;\n    }\n  });\n  /**\n   * Gets or sets the currently selected imagery.  This property is observable.\n   * @type {ProviderViewModel}\n   * @default undefined\n   */\n\n  this.selectedImagery = undefined;\n  var selectedImageryViewModel = knockout.observable();\n  this._currentImageryProviders = [];\n  knockout.defineProperty(this, \"selectedImagery\", {\n    get: function get() {\n      return selectedImageryViewModel();\n    },\n    set: function set(value) {\n      if (selectedImageryViewModel() === value) {\n        this.dropDownVisible = false;\n        return;\n      }\n\n      var i;\n      var currentImageryProviders = this._currentImageryProviders;\n      var currentImageryProvidersLength = currentImageryProviders.length;\n      var imageryLayers = this._globe.imageryLayers;\n      var hadExistingBaseLayer = false;\n\n      for (i = 0; i < currentImageryProvidersLength; i++) {\n        var layersLength = imageryLayers.length;\n\n        for (var x = 0; x < layersLength; x++) {\n          var layer = imageryLayers.get(x);\n\n          if (layer.imageryProvider === currentImageryProviders[i]) {\n            imageryLayers.remove(layer);\n            hadExistingBaseLayer = true;\n            break;\n          }\n        }\n      }\n\n      if (defined(value)) {\n        var newProviders = value.creationCommand();\n\n        if (Array.isArray(newProviders)) {\n          var newProvidersLength = newProviders.length;\n\n          for (i = newProvidersLength - 1; i >= 0; i--) {\n            imageryLayers.addImageryProvider(newProviders[i], 0);\n          }\n\n          this._currentImageryProviders = newProviders.slice(0);\n        } else {\n          this._currentImageryProviders = [newProviders];\n\n          if (hadExistingBaseLayer) {\n            imageryLayers.addImageryProvider(newProviders, 0);\n          } else {\n            var baseLayer = imageryLayers.get(0);\n\n            if (defined(baseLayer)) {\n              imageryLayers.remove(baseLayer);\n            }\n\n            imageryLayers.addImageryProvider(newProviders, 0);\n          }\n        }\n      }\n\n      selectedImageryViewModel(value);\n      this.dropDownVisible = false;\n    }\n  });\n  /**\n   * Gets or sets the currently selected terrain.  This property is observable.\n   * @type {ProviderViewModel}\n   * @default undefined\n   */\n\n  this.selectedTerrain = undefined;\n  var selectedTerrainViewModel = knockout.observable();\n  knockout.defineProperty(this, \"selectedTerrain\", {\n    get: function get() {\n      return selectedTerrainViewModel();\n    },\n    set: function set(value) {\n      if (selectedTerrainViewModel() === value) {\n        this.dropDownVisible = false;\n        return;\n      }\n\n      var newProvider;\n\n      if (defined(value)) {\n        newProvider = value.creationCommand();\n      }\n\n      this._globe.depthTestAgainstTerrain = !(newProvider instanceof EllipsoidTerrainProvider);\n      this._globe.terrainProvider = newProvider;\n      selectedTerrainViewModel(value);\n      this.dropDownVisible = false;\n    }\n  });\n  var that = this;\n  this._toggleDropDown = createCommand(function () {\n    that.dropDownVisible = !that.dropDownVisible;\n  });\n  this.selectedImagery = defaultValue(options.selectedImageryProviderViewModel, imageryProviderViewModels[0]);\n  this.selectedTerrain = defaultValue(options.selectedTerrainProviderViewModel, terrainProviderViewModels[0]);\n}\n\nObject.defineProperties(BaseLayerPickerViewModel.prototype, {\n  /**\n   * Gets the command to toggle the visibility of the drop down.\n   * @memberof BaseLayerPickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  toggleDropDown: {\n    get: function get() {\n      return this._toggleDropDown;\n    }\n  },\n\n  /**\n   * Gets the globe.\n   * @memberof BaseLayerPickerViewModel.prototype\n   *\n   * @type {Globe}\n   */\n  globe: {\n    get: function get() {\n      return this._globe;\n    }\n  }\n});\nexport default BaseLayerPickerViewModel;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Widgets/BaseLayerPicker/BaseLayerPickerViewModel.js"],"names":["defaultValue","defined","DeveloperError","EllipsoidTerrainProvider","knockout","createCommand","BaseLayerPickerViewModel","options","EMPTY_OBJECT","globe","imageryProviderViewModels","terrainProviderViewModels","_globe","slice","dropDownVisible","track","imageryObservable","getObservable","imageryProviders","pureComputed","providers","categories","i","length","provider","category","push","allCategoryNames","Object","keys","result","name","_imageryProviders","terrainObservable","terrainProviders","_terrainProviders","buttonTooltip","undefined","defineProperty","selectedImagery","selectedTerrain","imageryTip","terrainTip","buttonImageUrl","iconUrl","selectedImageryViewModel","observable","_currentImageryProviders","get","set","value","currentImageryProviders","currentImageryProvidersLength","imageryLayers","hadExistingBaseLayer","layersLength","x","layer","imageryProvider","remove","newProviders","creationCommand","Array","isArray","newProvidersLength","addImageryProvider","baseLayer","selectedTerrainViewModel","newProvider","depthTestAgainstTerrain","terrainProvider","that","_toggleDropDown","selectedImageryProviderViewModel","selectedTerrainProviderViewModel","defineProperties","prototype","toggleDropDown"],"mappings":"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","sourcesContent":["import defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport EllipsoidTerrainProvider from \"../../Core/EllipsoidTerrainProvider.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\n\n/**\n * The view model for {@link BaseLayerPicker}.\n * @alias BaseLayerPickerViewModel\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Globe} options.globe The Globe to use.\n * @param {ProviderViewModel[]} [options.imageryProviderViewModels=[]] The array of ProviderViewModel instances to use for imagery.\n * @param {ProviderViewModel} [options.selectedImageryProviderViewModel] The view model for the current base imagery layer, if not supplied the first available imagery layer is used.\n * @param {ProviderViewModel[]} [options.terrainProviderViewModels=[]] The array of ProviderViewModel instances to use for terrain.\n * @param {ProviderViewModel} [options.selectedTerrainProviderViewModel] The view model for the current base terrain layer, if not supplied the first available terrain layer is used.\n *\n * @exception {DeveloperError} imageryProviderViewModels must be an array.\n * @exception {DeveloperError} terrainProviderViewModels must be an array.\n */\nfunction BaseLayerPickerViewModel(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var globe = options.globe;\n  var imageryProviderViewModels = defaultValue(\n    options.imageryProviderViewModels,\n    []\n  );\n  var terrainProviderViewModels = defaultValue(\n    options.terrainProviderViewModels,\n    []\n  );\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(globe)) {\n    throw new DeveloperError(\"globe is required\");\n  }\n  //>>includeEnd('debug');\n\n  this._globe = globe;\n\n  /**\n   * Gets or sets an array of ProviderViewModel instances available for imagery selection.\n   * This property is observable.\n   * @type {ProviderViewModel[]}\n   */\n  this.imageryProviderViewModels = imageryProviderViewModels.slice(0);\n\n  /**\n   * Gets or sets an array of ProviderViewModel instances available for terrain selection.\n   * This property is observable.\n   * @type {ProviderViewModel[]}\n   */\n  this.terrainProviderViewModels = terrainProviderViewModels.slice(0);\n\n  /**\n   * Gets or sets whether the imagery selection drop-down is currently visible.\n   * @type {Boolean}\n   * @default false\n   */\n  this.dropDownVisible = false;\n\n  knockout.track(this, [\n    \"imageryProviderViewModels\",\n    \"terrainProviderViewModels\",\n    \"dropDownVisible\",\n  ]);\n\n  var imageryObservable = knockout.getObservable(\n    this,\n    \"imageryProviderViewModels\"\n  );\n  var imageryProviders = knockout.pureComputed(function () {\n    var providers = imageryObservable();\n    var categories = {};\n    var i;\n    for (i = 0; i < providers.length; i++) {\n      var provider = providers[i];\n      var category = provider.category;\n      if (defined(categories[category])) {\n        categories[category].push(provider);\n      } else {\n        categories[category] = [provider];\n      }\n    }\n    var allCategoryNames = Object.keys(categories);\n\n    var result = [];\n    for (i = 0; i < allCategoryNames.length; i++) {\n      var name = allCategoryNames[i];\n      result.push({\n        name: name,\n        providers: categories[name],\n      });\n    }\n    return result;\n  });\n  this._imageryProviders = imageryProviders;\n\n  var terrainObservable = knockout.getObservable(\n    this,\n    \"terrainProviderViewModels\"\n  );\n  var terrainProviders = knockout.pureComputed(function () {\n    var providers = terrainObservable();\n    var categories = {};\n    var i;\n    for (i = 0; i < providers.length; i++) {\n      var provider = providers[i];\n      var category = provider.category;\n      if (defined(categories[category])) {\n        categories[category].push(provider);\n      } else {\n        categories[category] = [provider];\n      }\n    }\n    var allCategoryNames = Object.keys(categories);\n\n    var result = [];\n    for (i = 0; i < allCategoryNames.length; i++) {\n      var name = allCategoryNames[i];\n      result.push({\n        name: name,\n        providers: categories[name],\n      });\n    }\n    return result;\n  });\n  this._terrainProviders = terrainProviders;\n\n  /**\n   * Gets the button tooltip.  This property is observable.\n   * @type {String}\n   */\n  this.buttonTooltip = undefined;\n  knockout.defineProperty(this, \"buttonTooltip\", function () {\n    var selectedImagery = this.selectedImagery;\n    var selectedTerrain = this.selectedTerrain;\n\n    var imageryTip = defined(selectedImagery)\n      ? selectedImagery.name\n      : undefined;\n    var terrainTip = defined(selectedTerrain)\n      ? selectedTerrain.name\n      : undefined;\n\n    if (defined(imageryTip) && defined(terrainTip)) {\n      return imageryTip + \"\\n\" + terrainTip;\n    } else if (defined(imageryTip)) {\n      return imageryTip;\n    }\n    return terrainTip;\n  });\n\n  /**\n   * Gets the button background image.  This property is observable.\n   * @type {String}\n   */\n  this.buttonImageUrl = undefined;\n  knockout.defineProperty(this, \"buttonImageUrl\", function () {\n    var selectedImagery = this.selectedImagery;\n    if (defined(selectedImagery)) {\n      return selectedImagery.iconUrl;\n    }\n  });\n\n  /**\n   * Gets or sets the currently selected imagery.  This property is observable.\n   * @type {ProviderViewModel}\n   * @default undefined\n   */\n  this.selectedImagery = undefined;\n  var selectedImageryViewModel = knockout.observable();\n\n  this._currentImageryProviders = [];\n  knockout.defineProperty(this, \"selectedImagery\", {\n    get: function () {\n      return selectedImageryViewModel();\n    },\n    set: function (value) {\n      if (selectedImageryViewModel() === value) {\n        this.dropDownVisible = false;\n        return;\n      }\n\n      var i;\n      var currentImageryProviders = this._currentImageryProviders;\n      var currentImageryProvidersLength = currentImageryProviders.length;\n      var imageryLayers = this._globe.imageryLayers;\n      var hadExistingBaseLayer = false;\n      for (i = 0; i < currentImageryProvidersLength; i++) {\n        var layersLength = imageryLayers.length;\n        for (var x = 0; x < layersLength; x++) {\n          var layer = imageryLayers.get(x);\n          if (layer.imageryProvider === currentImageryProviders[i]) {\n            imageryLayers.remove(layer);\n            hadExistingBaseLayer = true;\n            break;\n          }\n        }\n      }\n\n      if (defined(value)) {\n        var newProviders = value.creationCommand();\n        if (Array.isArray(newProviders)) {\n          var newProvidersLength = newProviders.length;\n          for (i = newProvidersLength - 1; i >= 0; i--) {\n            imageryLayers.addImageryProvider(newProviders[i], 0);\n          }\n          this._currentImageryProviders = newProviders.slice(0);\n        } else {\n          this._currentImageryProviders = [newProviders];\n          if (hadExistingBaseLayer) {\n            imageryLayers.addImageryProvider(newProviders, 0);\n          } else {\n            var baseLayer = imageryLayers.get(0);\n            if (defined(baseLayer)) {\n              imageryLayers.remove(baseLayer);\n            }\n            imageryLayers.addImageryProvider(newProviders, 0);\n          }\n        }\n      }\n      selectedImageryViewModel(value);\n      this.dropDownVisible = false;\n    },\n  });\n\n  /**\n   * Gets or sets the currently selected terrain.  This property is observable.\n   * @type {ProviderViewModel}\n   * @default undefined\n   */\n  this.selectedTerrain = undefined;\n  var selectedTerrainViewModel = knockout.observable();\n\n  knockout.defineProperty(this, \"selectedTerrain\", {\n    get: function () {\n      return selectedTerrainViewModel();\n    },\n    set: function (value) {\n      if (selectedTerrainViewModel() === value) {\n        this.dropDownVisible = false;\n        return;\n      }\n\n      var newProvider;\n      if (defined(value)) {\n        newProvider = value.creationCommand();\n      }\n\n      this._globe.depthTestAgainstTerrain = !(\n        newProvider instanceof EllipsoidTerrainProvider\n      );\n      this._globe.terrainProvider = newProvider;\n      selectedTerrainViewModel(value);\n      this.dropDownVisible = false;\n    },\n  });\n\n  var that = this;\n  this._toggleDropDown = createCommand(function () {\n    that.dropDownVisible = !that.dropDownVisible;\n  });\n\n  this.selectedImagery = defaultValue(\n    options.selectedImageryProviderViewModel,\n    imageryProviderViewModels[0]\n  );\n  this.selectedTerrain = defaultValue(\n    options.selectedTerrainProviderViewModel,\n    terrainProviderViewModels[0]\n  );\n}\n\nObject.defineProperties(BaseLayerPickerViewModel.prototype, {\n  /**\n   * Gets the command to toggle the visibility of the drop down.\n   * @memberof BaseLayerPickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  toggleDropDown: {\n    get: function () {\n      return this._toggleDropDown;\n    },\n  },\n\n  /**\n   * Gets the globe.\n   * @memberof BaseLayerPickerViewModel.prototype\n   *\n   * @type {Globe}\n   */\n  globe: {\n    get: function () {\n      return this._globe;\n    },\n  },\n});\nexport default BaseLayerPickerViewModel;\n"]},"metadata":{},"sourceType":"module"}