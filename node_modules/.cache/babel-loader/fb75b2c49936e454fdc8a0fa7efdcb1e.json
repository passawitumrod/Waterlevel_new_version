{"ast":null,"code":"import getAccessorByteStride from './getAccessorByteStride.js';\nimport getComponentReader from './getComponentReader.js';\nimport numberOfComponentsForType from './numberOfComponentsForType.js';\nimport arrayFill from '../../Core/arrayFill.js';\nimport ComponentDatatype from '../../Core/ComponentDatatype.js';\nimport defined from '../../Core/defined.js';\n/**\n * Returns the accessor data in a contiguous array.\n *\n * @param {Object} gltf A javascript object containing a glTF asset.\n * @param {Object} accessor The accessor.\n * @returns {Array} The accessor values in a contiguous array.\n *\n * @private\n */\n\nfunction readAccessorPacked(gltf, accessor) {\n  var byteStride = getAccessorByteStride(gltf, accessor);\n  var componentTypeByteLength = ComponentDatatype.getSizeInBytes(accessor.componentType);\n  var numberOfComponents = numberOfComponentsForType(accessor.type);\n  var count = accessor.count;\n  var values = new Array(numberOfComponents * count);\n\n  if (!defined(accessor.bufferView)) {\n    arrayFill(values, 0);\n    return values;\n  }\n\n  var bufferView = gltf.bufferViews[accessor.bufferView];\n  var source = gltf.buffers[bufferView.buffer].extras._pipeline.source;\n  var byteOffset = accessor.byteOffset + bufferView.byteOffset + source.byteOffset;\n  var dataView = new DataView(source.buffer);\n  var components = new Array(numberOfComponents);\n  var componentReader = getComponentReader(accessor.componentType);\n\n  for (var i = 0; i < count; ++i) {\n    componentReader(dataView, byteOffset, numberOfComponents, componentTypeByteLength, components);\n\n    for (var j = 0; j < numberOfComponents; ++j) {\n      values[i * numberOfComponents + j] = components[j];\n    }\n\n    byteOffset += byteStride;\n  }\n\n  return values;\n}\n\nexport default readAccessorPacked;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/ThirdParty/GltfPipeline/readAccessorPacked.js"],"names":["getAccessorByteStride","getComponentReader","numberOfComponentsForType","arrayFill","ComponentDatatype","defined","readAccessorPacked","gltf","accessor","byteStride","componentTypeByteLength","getSizeInBytes","componentType","numberOfComponents","type","count","values","Array","bufferView","bufferViews","source","buffers","buffer","extras","_pipeline","byteOffset","dataView","DataView","components","componentReader","i","j"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,4BAAlC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,OAAOC,yBAAP,MAAsC,gCAAtC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEI;;;;;;;;;;AASA,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,QAAlC,EAA4C;AACxC,MAAIC,UAAU,GAAGT,qBAAqB,CAACO,IAAD,EAAOC,QAAP,CAAtC;AACA,MAAIE,uBAAuB,GAAGN,iBAAiB,CAACO,cAAlB,CAAiCH,QAAQ,CAACI,aAA1C,CAA9B;AACA,MAAIC,kBAAkB,GAAGX,yBAAyB,CAACM,QAAQ,CAACM,IAAV,CAAlD;AACA,MAAIC,KAAK,GAAGP,QAAQ,CAACO,KAArB;AACA,MAAIC,MAAM,GAAG,IAAIC,KAAJ,CAAUJ,kBAAkB,GAAGE,KAA/B,CAAb;;AAEA,MAAI,CAACV,OAAO,CAACG,QAAQ,CAACU,UAAV,CAAZ,EAAmC;AAC/Bf,IAAAA,SAAS,CAACa,MAAD,EAAS,CAAT,CAAT;AACA,WAAOA,MAAP;AACH;;AAED,MAAIE,UAAU,GAAGX,IAAI,CAACY,WAAL,CAAiBX,QAAQ,CAACU,UAA1B,CAAjB;AACA,MAAIE,MAAM,GAAGb,IAAI,CAACc,OAAL,CAAaH,UAAU,CAACI,MAAxB,EAAgCC,MAAhC,CAAuCC,SAAvC,CAAiDJ,MAA9D;AACA,MAAIK,UAAU,GAAGjB,QAAQ,CAACiB,UAAT,GAAsBP,UAAU,CAACO,UAAjC,GAA8CL,MAAM,CAACK,UAAtE;AAEA,MAAIC,QAAQ,GAAG,IAAIC,QAAJ,CAAaP,MAAM,CAACE,MAApB,CAAf;AACA,MAAIM,UAAU,GAAG,IAAIX,KAAJ,CAAUJ,kBAAV,CAAjB;AACA,MAAIgB,eAAe,GAAG5B,kBAAkB,CAACO,QAAQ,CAACI,aAAV,CAAxC;;AAEA,OAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,KAApB,EAA2B,EAAEe,CAA7B,EAAgC;AAC5BD,IAAAA,eAAe,CAACH,QAAD,EAAWD,UAAX,EAAuBZ,kBAAvB,EAA2CH,uBAA3C,EAAoEkB,UAApE,CAAf;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,kBAApB,EAAwC,EAAEkB,CAA1C,EAA6C;AACzCf,MAAAA,MAAM,CAACc,CAAC,GAAGjB,kBAAJ,GAAyBkB,CAA1B,CAAN,GAAqCH,UAAU,CAACG,CAAD,CAA/C;AACH;;AACDN,IAAAA,UAAU,IAAIhB,UAAd;AACH;;AACD,SAAOO,MAAP;AACH;;AAED,eAAeV,kBAAf","sourcesContent":["import getAccessorByteStride from './getAccessorByteStride.js'\nimport getComponentReader from './getComponentReader.js'\nimport numberOfComponentsForType from './numberOfComponentsForType.js'\nimport arrayFill from '../../Core/arrayFill.js'\nimport ComponentDatatype from '../../Core/ComponentDatatype.js'\nimport defined from '../../Core/defined.js'\n\n    /**\n     * Returns the accessor data in a contiguous array.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @param {Object} accessor The accessor.\n     * @returns {Array} The accessor values in a contiguous array.\n     *\n     * @private\n     */\n    function readAccessorPacked(gltf, accessor) {\n        var byteStride = getAccessorByteStride(gltf, accessor);\n        var componentTypeByteLength = ComponentDatatype.getSizeInBytes(accessor.componentType);\n        var numberOfComponents = numberOfComponentsForType(accessor.type);\n        var count = accessor.count;\n        var values = new Array(numberOfComponents * count);\n\n        if (!defined(accessor.bufferView)) {\n            arrayFill(values, 0);\n            return values;\n        }\n\n        var bufferView = gltf.bufferViews[accessor.bufferView];\n        var source = gltf.buffers[bufferView.buffer].extras._pipeline.source;\n        var byteOffset = accessor.byteOffset + bufferView.byteOffset + source.byteOffset;\n\n        var dataView = new DataView(source.buffer);\n        var components = new Array(numberOfComponents);\n        var componentReader = getComponentReader(accessor.componentType);\n\n        for (var i = 0; i < count; ++i) {\n            componentReader(dataView, byteOffset, numberOfComponents, componentTypeByteLength, components);\n            for (var j = 0; j < numberOfComponents; ++j) {\n                values[i * numberOfComponents + j] = components[j];\n            }\n            byteOffset += byteStride;\n        }\n        return values;\n    }\n\n    export default readAccessorPacked;\n"]},"metadata":{},"sourceType":"module"}