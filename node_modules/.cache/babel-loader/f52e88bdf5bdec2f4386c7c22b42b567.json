{"ast":null,"code":"import BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport WallGeometryLibrary from \"./WallGeometryLibrary.js\";\nvar scratchCartesian3Position1 = new Cartesian3();\nvar scratchCartesian3Position2 = new Cartesian3();\n/**\n * A description of a wall outline. A wall is defined by a series of points,\n * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\n *\n * @alias WallOutlineGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {Number[]} [options.maximumHeights] An array parallel to <code>positions</code> that give the maximum height of the\n *        wall at <code>positions</code>. If undefined, the height of each position in used.\n * @param {Number[]} [options.minimumHeights] An array parallel to <code>positions</code> that give the minimum height of the\n *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\n *\n * @exception {DeveloperError} positions length must be greater than or equal to 2.\n * @exception {DeveloperError} positions and maximumHeights must have the same length.\n * @exception {DeveloperError} positions and minimumHeights must have the same length.\n *\n * @see WallGeometry#createGeometry\n * @see WallGeometry#fromConstantHeight\n *\n * @example\n * // create a wall outline that spans from ground level to 10000 meters\n * var wall = new Cesium.WallOutlineGeometry({\n *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\n *     19.0, 47.0, 10000.0,\n *     19.0, 48.0, 10000.0,\n *     20.0, 48.0, 10000.0,\n *     20.0, 47.0, 10000.0,\n *     19.0, 47.0, 10000.0\n *   ])\n * });\n * var geometry = Cesium.WallOutlineGeometry.createGeometry(wall);\n */\n\nfunction WallOutlineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var wallPositions = options.positions;\n  var maximumHeights = options.maximumHeights;\n  var minimumHeights = options.minimumHeights; //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(wallPositions)) {\n    throw new DeveloperError(\"options.positions is required.\");\n  }\n\n  if (defined(maximumHeights) && maximumHeights.length !== wallPositions.length) {\n    throw new DeveloperError(\"options.positions and options.maximumHeights must have the same length.\");\n  }\n\n  if (defined(minimumHeights) && minimumHeights.length !== wallPositions.length) {\n    throw new DeveloperError(\"options.positions and options.minimumHeights must have the same length.\");\n  } //>>includeEnd('debug');\n\n\n  var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n  var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n  this._positions = wallPositions;\n  this._minimumHeights = minimumHeights;\n  this._maximumHeights = maximumHeights;\n  this._granularity = granularity;\n  this._ellipsoid = Ellipsoid.clone(ellipsoid);\n  this._workerName = \"createWallOutlineGeometry\";\n  var numComponents = 1 + wallPositions.length * Cartesian3.packedLength + 2;\n\n  if (defined(minimumHeights)) {\n    numComponents += minimumHeights.length;\n  }\n\n  if (defined(maximumHeights)) {\n    numComponents += maximumHeights.length;\n  }\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n\n\n  this.packedLength = numComponents + Ellipsoid.packedLength + 1;\n}\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {WallOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\n\n\nWallOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  } //>>includeEnd('debug');\n\n\n  startingIndex = defaultValue(startingIndex, 0);\n  var i;\n  var positions = value._positions;\n  var length = positions.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    Cartesian3.pack(positions[i], array, startingIndex);\n  }\n\n  var minimumHeights = value._minimumHeights;\n  length = defined(minimumHeights) ? minimumHeights.length : 0;\n  array[startingIndex++] = length;\n\n  if (defined(minimumHeights)) {\n    for (i = 0; i < length; ++i) {\n      array[startingIndex++] = minimumHeights[i];\n    }\n  }\n\n  var maximumHeights = value._maximumHeights;\n  length = defined(maximumHeights) ? maximumHeights.length : 0;\n  array[startingIndex++] = length;\n\n  if (defined(maximumHeights)) {\n    for (i = 0; i < length; ++i) {\n      array[startingIndex++] = maximumHeights[i];\n    }\n  }\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n  array[startingIndex] = value._granularity;\n  return array;\n};\n\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nvar scratchOptions = {\n  positions: undefined,\n  minimumHeights: undefined,\n  maximumHeights: undefined,\n  ellipsoid: scratchEllipsoid,\n  granularity: undefined\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {WallOutlineGeometry} [result] The object into which to store the result.\n * @returns {WallOutlineGeometry} The modified result parameter or a new WallOutlineGeometry instance if one was not provided.\n */\n\nWallOutlineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  } //>>includeEnd('debug');\n\n\n  startingIndex = defaultValue(startingIndex, 0);\n  var i;\n  var length = array[startingIndex++];\n  var positions = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n\n  length = array[startingIndex++];\n  var minimumHeights;\n\n  if (length > 0) {\n    minimumHeights = new Array(length);\n\n    for (i = 0; i < length; ++i) {\n      minimumHeights[i] = array[startingIndex++];\n    }\n  }\n\n  length = array[startingIndex++];\n  var maximumHeights;\n\n  if (length > 0) {\n    maximumHeights = new Array(length);\n\n    for (i = 0; i < length; ++i) {\n      maximumHeights[i] = array[startingIndex++];\n    }\n  }\n\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n  var granularity = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.positions = positions;\n    scratchOptions.minimumHeights = minimumHeights;\n    scratchOptions.maximumHeights = maximumHeights;\n    scratchOptions.granularity = granularity;\n    return new WallOutlineGeometry(scratchOptions);\n  }\n\n  result._positions = positions;\n  result._minimumHeights = minimumHeights;\n  result._maximumHeights = maximumHeights;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._granularity = granularity;\n  return result;\n};\n/**\n * A description of a walloutline. A wall is defined by a series of points,\n * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\n * @param {Number} [options.maximumHeight] A constant that defines the maximum height of the\n *        wall at <code>positions</code>. If undefined, the height of each position in used.\n * @param {Number} [options.minimumHeight] A constant that defines the minimum height of the\n *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\n * @returns {WallOutlineGeometry}\n *\n *\n * @example\n * // create a wall that spans from 10000 meters to 20000 meters\n * var wall = Cesium.WallOutlineGeometry.fromConstantHeights({\n *   positions : Cesium.Cartesian3.fromDegreesArray([\n *     19.0, 47.0,\n *     19.0, 48.0,\n *     20.0, 48.0,\n *     20.0, 47.0,\n *     19.0, 47.0,\n *   ]),\n *   minimumHeight : 20000.0,\n *   maximumHeight : 10000.0\n * });\n * var geometry = Cesium.WallOutlineGeometry.createGeometry(wall);\n *\n * @see WallOutlineGeometry#createGeometry\n */\n\n\nWallOutlineGeometry.fromConstantHeights = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var positions = options.positions; //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(positions)) {\n    throw new DeveloperError(\"options.positions is required.\");\n  } //>>includeEnd('debug');\n\n\n  var minHeights;\n  var maxHeights;\n  var min = options.minimumHeight;\n  var max = options.maximumHeight;\n  var doMin = defined(min);\n  var doMax = defined(max);\n\n  if (doMin || doMax) {\n    var length = positions.length;\n    minHeights = doMin ? new Array(length) : undefined;\n    maxHeights = doMax ? new Array(length) : undefined;\n\n    for (var i = 0; i < length; ++i) {\n      if (doMin) {\n        minHeights[i] = min;\n      }\n\n      if (doMax) {\n        maxHeights[i] = max;\n      }\n    }\n  }\n\n  var newOptions = {\n    positions: positions,\n    maximumHeights: maxHeights,\n    minimumHeights: minHeights,\n    ellipsoid: options.ellipsoid\n  };\n  return new WallOutlineGeometry(newOptions);\n};\n/**\n * Computes the geometric representation of a wall outline, including its vertices, indices, and a bounding sphere.\n *\n * @param {WallOutlineGeometry} wallGeometry A description of the wall outline.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\n\n\nWallOutlineGeometry.createGeometry = function (wallGeometry) {\n  var wallPositions = wallGeometry._positions;\n  var minimumHeights = wallGeometry._minimumHeights;\n  var maximumHeights = wallGeometry._maximumHeights;\n  var granularity = wallGeometry._granularity;\n  var ellipsoid = wallGeometry._ellipsoid;\n  var pos = WallGeometryLibrary.computePositions(ellipsoid, wallPositions, maximumHeights, minimumHeights, granularity, false);\n\n  if (!defined(pos)) {\n    return;\n  }\n\n  var bottomPositions = pos.bottomPositions;\n  var topPositions = pos.topPositions;\n  var length = topPositions.length;\n  var size = length * 2;\n  var positions = new Float64Array(size);\n  var positionIndex = 0; // add lower and upper points one after the other, lower\n  // points being even and upper points being odd\n\n  length /= 3;\n  var i;\n\n  for (i = 0; i < length; ++i) {\n    var i3 = i * 3;\n    var topPosition = Cartesian3.fromArray(topPositions, i3, scratchCartesian3Position1);\n    var bottomPosition = Cartesian3.fromArray(bottomPositions, i3, scratchCartesian3Position2); // insert the lower point\n\n    positions[positionIndex++] = bottomPosition.x;\n    positions[positionIndex++] = bottomPosition.y;\n    positions[positionIndex++] = bottomPosition.z; // insert the upper point\n\n    positions[positionIndex++] = topPosition.x;\n    positions[positionIndex++] = topPosition.y;\n    positions[positionIndex++] = topPosition.z;\n  }\n\n  var attributes = new GeometryAttributes({\n    position: new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions\n    })\n  });\n  var numVertices = size / 3;\n  size = 2 * numVertices - 4 + numVertices;\n  var indices = IndexDatatype.createTypedArray(numVertices, size);\n  var edgeIndex = 0;\n\n  for (i = 0; i < numVertices - 2; i += 2) {\n    var LL = i;\n    var LR = i + 2;\n    var pl = Cartesian3.fromArray(positions, LL * 3, scratchCartesian3Position1);\n    var pr = Cartesian3.fromArray(positions, LR * 3, scratchCartesian3Position2);\n\n    if (Cartesian3.equalsEpsilon(pl, pr, CesiumMath.EPSILON10)) {\n      continue;\n    }\n\n    var UL = i + 1;\n    var UR = i + 3;\n    indices[edgeIndex++] = UL;\n    indices[edgeIndex++] = LL;\n    indices[edgeIndex++] = UL;\n    indices[edgeIndex++] = UR;\n    indices[edgeIndex++] = LL;\n    indices[edgeIndex++] = LR;\n  }\n\n  indices[edgeIndex++] = numVertices - 2;\n  indices[edgeIndex++] = numVertices - 1;\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.LINES,\n    boundingSphere: new BoundingSphere.fromVertices(positions)\n  });\n};\n\nexport default WallOutlineGeometry;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/WallOutlineGeometry.js"],"names":["BoundingSphere","Cartesian3","ComponentDatatype","defaultValue","defined","DeveloperError","Ellipsoid","Geometry","GeometryAttribute","GeometryAttributes","IndexDatatype","CesiumMath","PrimitiveType","WallGeometryLibrary","scratchCartesian3Position1","scratchCartesian3Position2","WallOutlineGeometry","options","EMPTY_OBJECT","wallPositions","positions","maximumHeights","minimumHeights","length","granularity","RADIANS_PER_DEGREE","ellipsoid","WGS84","_positions","_minimumHeights","_maximumHeights","_granularity","_ellipsoid","clone","_workerName","numComponents","packedLength","pack","value","array","startingIndex","i","scratchEllipsoid","UNIT_SPHERE","scratchOptions","undefined","unpack","result","Array","fromConstantHeights","minHeights","maxHeights","min","minimumHeight","max","maximumHeight","doMin","doMax","newOptions","createGeometry","wallGeometry","pos","computePositions","bottomPositions","topPositions","size","Float64Array","positionIndex","i3","topPosition","fromArray","bottomPosition","x","y","z","attributes","position","componentDatatype","DOUBLE","componentsPerAttribute","values","numVertices","indices","createTypedArray","edgeIndex","LL","LR","pl","pr","equalsEpsilon","EPSILON10","UL","UR","primitiveType","LINES","boundingSphere","fromVertices"],"mappings":"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","sourcesContent":["import BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport WallGeometryLibrary from \"./WallGeometryLibrary.js\";\n\nvar scratchCartesian3Position1 = new Cartesian3();\nvar scratchCartesian3Position2 = new Cartesian3();\n\n/**\n * A description of a wall outline. A wall is defined by a series of points,\n * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\n *\n * @alias WallOutlineGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {Number[]} [options.maximumHeights] An array parallel to <code>positions</code> that give the maximum height of the\n *        wall at <code>positions</code>. If undefined, the height of each position in used.\n * @param {Number[]} [options.minimumHeights] An array parallel to <code>positions</code> that give the minimum height of the\n *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\n *\n * @exception {DeveloperError} positions length must be greater than or equal to 2.\n * @exception {DeveloperError} positions and maximumHeights must have the same length.\n * @exception {DeveloperError} positions and minimumHeights must have the same length.\n *\n * @see WallGeometry#createGeometry\n * @see WallGeometry#fromConstantHeight\n *\n * @example\n * // create a wall outline that spans from ground level to 10000 meters\n * var wall = new Cesium.WallOutlineGeometry({\n *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\n *     19.0, 47.0, 10000.0,\n *     19.0, 48.0, 10000.0,\n *     20.0, 48.0, 10000.0,\n *     20.0, 47.0, 10000.0,\n *     19.0, 47.0, 10000.0\n *   ])\n * });\n * var geometry = Cesium.WallOutlineGeometry.createGeometry(wall);\n */\nfunction WallOutlineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var wallPositions = options.positions;\n  var maximumHeights = options.maximumHeights;\n  var minimumHeights = options.minimumHeights;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(wallPositions)) {\n    throw new DeveloperError(\"options.positions is required.\");\n  }\n  if (\n    defined(maximumHeights) &&\n    maximumHeights.length !== wallPositions.length\n  ) {\n    throw new DeveloperError(\n      \"options.positions and options.maximumHeights must have the same length.\"\n    );\n  }\n  if (\n    defined(minimumHeights) &&\n    minimumHeights.length !== wallPositions.length\n  ) {\n    throw new DeveloperError(\n      \"options.positions and options.minimumHeights must have the same length.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n\n  this._positions = wallPositions;\n  this._minimumHeights = minimumHeights;\n  this._maximumHeights = maximumHeights;\n  this._granularity = granularity;\n  this._ellipsoid = Ellipsoid.clone(ellipsoid);\n  this._workerName = \"createWallOutlineGeometry\";\n\n  var numComponents = 1 + wallPositions.length * Cartesian3.packedLength + 2;\n  if (defined(minimumHeights)) {\n    numComponents += minimumHeights.length;\n  }\n  if (defined(maximumHeights)) {\n    numComponents += maximumHeights.length;\n  }\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength = numComponents + Ellipsoid.packedLength + 1;\n}\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {WallOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nWallOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var i;\n\n  var positions = value._positions;\n  var length = positions.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    Cartesian3.pack(positions[i], array, startingIndex);\n  }\n\n  var minimumHeights = value._minimumHeights;\n  length = defined(minimumHeights) ? minimumHeights.length : 0;\n  array[startingIndex++] = length;\n\n  if (defined(minimumHeights)) {\n    for (i = 0; i < length; ++i) {\n      array[startingIndex++] = minimumHeights[i];\n    }\n  }\n\n  var maximumHeights = value._maximumHeights;\n  length = defined(maximumHeights) ? maximumHeights.length : 0;\n  array[startingIndex++] = length;\n\n  if (defined(maximumHeights)) {\n    for (i = 0; i < length; ++i) {\n      array[startingIndex++] = maximumHeights[i];\n    }\n  }\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  array[startingIndex] = value._granularity;\n\n  return array;\n};\n\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nvar scratchOptions = {\n  positions: undefined,\n  minimumHeights: undefined,\n  maximumHeights: undefined,\n  ellipsoid: scratchEllipsoid,\n  granularity: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {WallOutlineGeometry} [result] The object into which to store the result.\n * @returns {WallOutlineGeometry} The modified result parameter or a new WallOutlineGeometry instance if one was not provided.\n */\nWallOutlineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var i;\n\n  var length = array[startingIndex++];\n  var positions = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n\n  length = array[startingIndex++];\n  var minimumHeights;\n\n  if (length > 0) {\n    minimumHeights = new Array(length);\n    for (i = 0; i < length; ++i) {\n      minimumHeights[i] = array[startingIndex++];\n    }\n  }\n\n  length = array[startingIndex++];\n  var maximumHeights;\n\n  if (length > 0) {\n    maximumHeights = new Array(length);\n    for (i = 0; i < length; ++i) {\n      maximumHeights[i] = array[startingIndex++];\n    }\n  }\n\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  var granularity = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.positions = positions;\n    scratchOptions.minimumHeights = minimumHeights;\n    scratchOptions.maximumHeights = maximumHeights;\n    scratchOptions.granularity = granularity;\n    return new WallOutlineGeometry(scratchOptions);\n  }\n\n  result._positions = positions;\n  result._minimumHeights = minimumHeights;\n  result._maximumHeights = maximumHeights;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._granularity = granularity;\n\n  return result;\n};\n\n/**\n * A description of a walloutline. A wall is defined by a series of points,\n * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\n * @param {Number} [options.maximumHeight] A constant that defines the maximum height of the\n *        wall at <code>positions</code>. If undefined, the height of each position in used.\n * @param {Number} [options.minimumHeight] A constant that defines the minimum height of the\n *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\n * @returns {WallOutlineGeometry}\n *\n *\n * @example\n * // create a wall that spans from 10000 meters to 20000 meters\n * var wall = Cesium.WallOutlineGeometry.fromConstantHeights({\n *   positions : Cesium.Cartesian3.fromDegreesArray([\n *     19.0, 47.0,\n *     19.0, 48.0,\n *     20.0, 48.0,\n *     20.0, 47.0,\n *     19.0, 47.0,\n *   ]),\n *   minimumHeight : 20000.0,\n *   maximumHeight : 10000.0\n * });\n * var geometry = Cesium.WallOutlineGeometry.createGeometry(wall);\n *\n * @see WallOutlineGeometry#createGeometry\n */\nWallOutlineGeometry.fromConstantHeights = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var positions = options.positions;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(positions)) {\n    throw new DeveloperError(\"options.positions is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var minHeights;\n  var maxHeights;\n\n  var min = options.minimumHeight;\n  var max = options.maximumHeight;\n\n  var doMin = defined(min);\n  var doMax = defined(max);\n  if (doMin || doMax) {\n    var length = positions.length;\n    minHeights = doMin ? new Array(length) : undefined;\n    maxHeights = doMax ? new Array(length) : undefined;\n\n    for (var i = 0; i < length; ++i) {\n      if (doMin) {\n        minHeights[i] = min;\n      }\n\n      if (doMax) {\n        maxHeights[i] = max;\n      }\n    }\n  }\n\n  var newOptions = {\n    positions: positions,\n    maximumHeights: maxHeights,\n    minimumHeights: minHeights,\n    ellipsoid: options.ellipsoid,\n  };\n  return new WallOutlineGeometry(newOptions);\n};\n\n/**\n * Computes the geometric representation of a wall outline, including its vertices, indices, and a bounding sphere.\n *\n * @param {WallOutlineGeometry} wallGeometry A description of the wall outline.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nWallOutlineGeometry.createGeometry = function (wallGeometry) {\n  var wallPositions = wallGeometry._positions;\n  var minimumHeights = wallGeometry._minimumHeights;\n  var maximumHeights = wallGeometry._maximumHeights;\n  var granularity = wallGeometry._granularity;\n  var ellipsoid = wallGeometry._ellipsoid;\n\n  var pos = WallGeometryLibrary.computePositions(\n    ellipsoid,\n    wallPositions,\n    maximumHeights,\n    minimumHeights,\n    granularity,\n    false\n  );\n  if (!defined(pos)) {\n    return;\n  }\n\n  var bottomPositions = pos.bottomPositions;\n  var topPositions = pos.topPositions;\n\n  var length = topPositions.length;\n  var size = length * 2;\n\n  var positions = new Float64Array(size);\n  var positionIndex = 0;\n\n  // add lower and upper points one after the other, lower\n  // points being even and upper points being odd\n  length /= 3;\n  var i;\n  for (i = 0; i < length; ++i) {\n    var i3 = i * 3;\n    var topPosition = Cartesian3.fromArray(\n      topPositions,\n      i3,\n      scratchCartesian3Position1\n    );\n    var bottomPosition = Cartesian3.fromArray(\n      bottomPositions,\n      i3,\n      scratchCartesian3Position2\n    );\n\n    // insert the lower point\n    positions[positionIndex++] = bottomPosition.x;\n    positions[positionIndex++] = bottomPosition.y;\n    positions[positionIndex++] = bottomPosition.z;\n\n    // insert the upper point\n    positions[positionIndex++] = topPosition.x;\n    positions[positionIndex++] = topPosition.y;\n    positions[positionIndex++] = topPosition.z;\n  }\n\n  var attributes = new GeometryAttributes({\n    position: new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions,\n    }),\n  });\n\n  var numVertices = size / 3;\n  size = 2 * numVertices - 4 + numVertices;\n  var indices = IndexDatatype.createTypedArray(numVertices, size);\n\n  var edgeIndex = 0;\n  for (i = 0; i < numVertices - 2; i += 2) {\n    var LL = i;\n    var LR = i + 2;\n    var pl = Cartesian3.fromArray(\n      positions,\n      LL * 3,\n      scratchCartesian3Position1\n    );\n    var pr = Cartesian3.fromArray(\n      positions,\n      LR * 3,\n      scratchCartesian3Position2\n    );\n    if (Cartesian3.equalsEpsilon(pl, pr, CesiumMath.EPSILON10)) {\n      continue;\n    }\n    var UL = i + 1;\n    var UR = i + 3;\n\n    indices[edgeIndex++] = UL;\n    indices[edgeIndex++] = LL;\n    indices[edgeIndex++] = UL;\n    indices[edgeIndex++] = UR;\n    indices[edgeIndex++] = LL;\n    indices[edgeIndex++] = LR;\n  }\n\n  indices[edgeIndex++] = numVertices - 2;\n  indices[edgeIndex++] = numVertices - 1;\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.LINES,\n    boundingSphere: new BoundingSphere.fromVertices(positions),\n  });\n};\nexport default WallOutlineGeometry;\n"]},"metadata":{},"sourceType":"module"}