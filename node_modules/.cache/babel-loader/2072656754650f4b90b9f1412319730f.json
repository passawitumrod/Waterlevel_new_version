{"ast":null,"code":"import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Color from \"../Core/Color.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport Resource from \"../Core/Resource.js\";\nimport HeightReference from \"./HeightReference.js\";\nimport HorizontalOrigin from \"./HorizontalOrigin.js\";\nimport SceneMode from \"./SceneMode.js\";\nimport SceneTransforms from \"./SceneTransforms.js\";\nimport VerticalOrigin from \"./VerticalOrigin.js\";\n/**\n * A viewport-aligned image positioned in the 3D scene, that is created\n * and rendered using a {@link BillboardCollection}.  A billboard is created and its initial\n * properties are set by calling {@link BillboardCollection#add}.\n * <br /><br />\n * <div align='center'>\n * <img src='Images/Billboard.png' width='400' height='300' /><br />\n * Example billboards\n * </div>\n *\n * @alias Billboard\n *\n * @performance Reading a property, e.g., {@link Billboard#show}, is constant time.\n * Assigning to a property is constant time but results in\n * CPU to GPU traffic when {@link BillboardCollection#update} is called.  The per-billboard traffic is\n * the same regardless of how many properties were updated.  If most billboards in a collection need to be\n * updated, it may be more efficient to clear the collection with {@link BillboardCollection#removeAll}\n * and add new billboards instead of modifying each one.\n *\n * @exception {DeveloperError} scaleByDistance.far must be greater than scaleByDistance.near\n * @exception {DeveloperError} translucencyByDistance.far must be greater than translucencyByDistance.near\n * @exception {DeveloperError} pixelOffsetScaleByDistance.far must be greater than pixelOffsetScaleByDistance.near\n * @exception {DeveloperError} distanceDisplayCondition.far must be greater than distanceDisplayCondition.near\n *\n * @see BillboardCollection\n * @see BillboardCollection#add\n * @see Label\n *\n * @internalConstructor\n * @class\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Billboards.html|Cesium Sandcastle Billboard Demo}\n */\n\nfunction Billboard(options, billboardCollection) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT); //>>includeStart('debug', pragmas.debug);\n\n  if (defined(options.disableDepthTestDistance) && options.disableDepthTestDistance < 0.0) {\n    throw new DeveloperError(\"disableDepthTestDistance must be greater than or equal to 0.0.\");\n  } //>>includeEnd('debug');\n\n\n  var translucencyByDistance = options.translucencyByDistance;\n  var pixelOffsetScaleByDistance = options.pixelOffsetScaleByDistance;\n  var scaleByDistance = options.scaleByDistance;\n  var distanceDisplayCondition = options.distanceDisplayCondition;\n\n  if (defined(translucencyByDistance)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (translucencyByDistance.far <= translucencyByDistance.near) {\n      throw new DeveloperError(\"translucencyByDistance.far must be greater than translucencyByDistance.near.\");\n    } //>>includeEnd('debug');\n\n\n    translucencyByDistance = NearFarScalar.clone(translucencyByDistance);\n  }\n\n  if (defined(pixelOffsetScaleByDistance)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (pixelOffsetScaleByDistance.far <= pixelOffsetScaleByDistance.near) {\n      throw new DeveloperError(\"pixelOffsetScaleByDistance.far must be greater than pixelOffsetScaleByDistance.near.\");\n    } //>>includeEnd('debug');\n\n\n    pixelOffsetScaleByDistance = NearFarScalar.clone(pixelOffsetScaleByDistance);\n  }\n\n  if (defined(scaleByDistance)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (scaleByDistance.far <= scaleByDistance.near) {\n      throw new DeveloperError(\"scaleByDistance.far must be greater than scaleByDistance.near.\");\n    } //>>includeEnd('debug');\n\n\n    scaleByDistance = NearFarScalar.clone(scaleByDistance);\n  }\n\n  if (defined(distanceDisplayCondition)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (distanceDisplayCondition.far <= distanceDisplayCondition.near) {\n      throw new DeveloperError(\"distanceDisplayCondition.far must be greater than distanceDisplayCondition.near.\");\n    } //>>includeEnd('debug');\n\n\n    distanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition);\n  }\n\n  this._show = defaultValue(options.show, true);\n  this._position = Cartesian3.clone(defaultValue(options.position, Cartesian3.ZERO));\n  this._actualPosition = Cartesian3.clone(this._position); // For columbus view and 2D\n\n  this._pixelOffset = Cartesian2.clone(defaultValue(options.pixelOffset, Cartesian2.ZERO));\n  this._translate = new Cartesian2(0.0, 0.0); // used by labels for glyph vertex translation\n\n  this._eyeOffset = Cartesian3.clone(defaultValue(options.eyeOffset, Cartesian3.ZERO));\n  this._heightReference = defaultValue(options.heightReference, HeightReference.NONE);\n  this._verticalOrigin = defaultValue(options.verticalOrigin, VerticalOrigin.CENTER);\n  this._horizontalOrigin = defaultValue(options.horizontalOrigin, HorizontalOrigin.CENTER);\n  this._scale = defaultValue(options.scale, 1.0);\n  this._color = Color.clone(defaultValue(options.color, Color.WHITE));\n  this._rotation = defaultValue(options.rotation, 0.0);\n  this._alignedAxis = Cartesian3.clone(defaultValue(options.alignedAxis, Cartesian3.ZERO));\n  this._width = options.width;\n  this._height = options.height;\n  this._scaleByDistance = scaleByDistance;\n  this._translucencyByDistance = translucencyByDistance;\n  this._pixelOffsetScaleByDistance = pixelOffsetScaleByDistance;\n  this._sizeInMeters = defaultValue(options.sizeInMeters, false);\n  this._distanceDisplayCondition = distanceDisplayCondition;\n  this._disableDepthTestDistance = options.disableDepthTestDistance;\n  this._id = options.id;\n  this._collection = defaultValue(options.collection, billboardCollection);\n  this._pickId = undefined;\n  this._pickPrimitive = defaultValue(options._pickPrimitive, this);\n  this._billboardCollection = billboardCollection;\n  this._dirty = false;\n  this._index = -1; //Used only by BillboardCollection\n\n  this._batchIndex = undefined; // Used only by Vector3DTilePoints and BillboardCollection\n\n  this._imageIndex = -1;\n  this._imageIndexPromise = undefined;\n  this._imageId = undefined;\n  this._image = undefined;\n  this._imageSubRegion = undefined;\n  this._imageWidth = undefined;\n  this._imageHeight = undefined;\n  this._labelDimensions = undefined;\n  this._labelHorizontalOrigin = undefined;\n  this._labelTranslate = undefined;\n  var image = options.image;\n  var imageId = options.imageId;\n\n  if (defined(image)) {\n    if (!defined(imageId)) {\n      if (typeof image === \"string\") {\n        imageId = image;\n      } else if (defined(image.src)) {\n        imageId = image.src;\n      } else {\n        imageId = createGuid();\n      }\n    }\n\n    this._imageId = imageId;\n    this._image = image;\n  }\n\n  if (defined(options.imageSubRegion)) {\n    this._imageId = imageId;\n    this._imageSubRegion = options.imageSubRegion;\n  }\n\n  if (defined(this._billboardCollection._textureAtlas)) {\n    this._loadImage();\n  }\n\n  this._actualClampedPosition = undefined;\n  this._removeCallbackFunc = undefined;\n  this._mode = SceneMode.SCENE3D;\n  this._clusterShow = true;\n  this._outlineColor = Color.clone(defaultValue(options.outlineColor, Color.BLACK));\n  this._outlineWidth = defaultValue(options.outlineWidth, 0.0);\n\n  this._updateClamping();\n}\n\nvar SHOW_INDEX = Billboard.SHOW_INDEX = 0;\nvar POSITION_INDEX = Billboard.POSITION_INDEX = 1;\nvar PIXEL_OFFSET_INDEX = Billboard.PIXEL_OFFSET_INDEX = 2;\nvar EYE_OFFSET_INDEX = Billboard.EYE_OFFSET_INDEX = 3;\nvar HORIZONTAL_ORIGIN_INDEX = Billboard.HORIZONTAL_ORIGIN_INDEX = 4;\nvar VERTICAL_ORIGIN_INDEX = Billboard.VERTICAL_ORIGIN_INDEX = 5;\nvar SCALE_INDEX = Billboard.SCALE_INDEX = 6;\nvar IMAGE_INDEX_INDEX = Billboard.IMAGE_INDEX_INDEX = 7;\nvar COLOR_INDEX = Billboard.COLOR_INDEX = 8;\nvar ROTATION_INDEX = Billboard.ROTATION_INDEX = 9;\nvar ALIGNED_AXIS_INDEX = Billboard.ALIGNED_AXIS_INDEX = 10;\nvar SCALE_BY_DISTANCE_INDEX = Billboard.SCALE_BY_DISTANCE_INDEX = 11;\nvar TRANSLUCENCY_BY_DISTANCE_INDEX = Billboard.TRANSLUCENCY_BY_DISTANCE_INDEX = 12;\nvar PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX = Billboard.PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX = 13;\nvar DISTANCE_DISPLAY_CONDITION = Billboard.DISTANCE_DISPLAY_CONDITION = 14;\nvar DISABLE_DEPTH_DISTANCE = Billboard.DISABLE_DEPTH_DISTANCE = 15;\nBillboard.TEXTURE_COORDINATE_BOUNDS = 16;\nvar SDF_INDEX = Billboard.SDF_INDEX = 17;\nBillboard.NUMBER_OF_PROPERTIES = 18;\n\nfunction makeDirty(billboard, propertyChanged) {\n  var billboardCollection = billboard._billboardCollection;\n\n  if (defined(billboardCollection)) {\n    billboardCollection._updateBillboard(billboard, propertyChanged);\n\n    billboard._dirty = true;\n  }\n}\n\nObject.defineProperties(Billboard.prototype, {\n  /**\n   * Determines if this billboard will be shown.  Use this to hide or show a billboard, instead\n   * of removing it and re-adding it to the collection.\n   * @memberof Billboard.prototype\n   * @type {Boolean}\n   * @default true\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      if (this._show !== value) {\n        this._show = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the Cartesian position of this billboard.\n   * @memberof Billboard.prototype\n   * @type {Cartesian3}\n   */\n  position: {\n    get: function () {\n      return this._position;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      var position = this._position;\n\n      if (!Cartesian3.equals(position, value)) {\n        Cartesian3.clone(value, position);\n        Cartesian3.clone(value, this._actualPosition);\n\n        this._updateClamping();\n\n        makeDirty(this, POSITION_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the height reference of this billboard.\n   * @memberof Billboard.prototype\n   * @type {HeightReference}\n   * @default HeightReference.NONE\n   */\n  heightReference: {\n    get: function () {\n      return this._heightReference;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      var heightReference = this._heightReference;\n\n      if (value !== heightReference) {\n        this._heightReference = value;\n\n        this._updateClamping();\n\n        makeDirty(this, POSITION_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the pixel offset in screen space from the origin of this billboard.  This is commonly used\n   * to align multiple billboards and labels at the same position, e.g., an image and text.  The\n   * screen space origin is the top, left corner of the canvas; <code>x</code> increases from\n   * left to right, and <code>y</code> increases from top to bottom.\n   * <br /><br />\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Billboard.setPixelOffset.default.png' width='250' height='188' /></td>\n   * <td align='center'><code>b.pixeloffset = new Cartesian2(50, 25);</code><br/><img src='Images/Billboard.setPixelOffset.x50y-25.png' width='250' height='188' /></td>\n   * </tr></table>\n   * The billboard's origin is indicated by the yellow point.\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {Cartesian2}\n   */\n  pixelOffset: {\n    get: function () {\n      return this._pixelOffset;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      var pixelOffset = this._pixelOffset;\n\n      if (!Cartesian2.equals(pixelOffset, value)) {\n        Cartesian2.clone(value, pixelOffset);\n        makeDirty(this, PIXEL_OFFSET_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets near and far scaling properties of a Billboard based on the billboard's distance from the camera.\n   * A billboard's scale will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's scale remains clamped to the nearest bound.  If undefined,\n   * scaleByDistance will be disabled.\n   * @memberof Billboard.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a billboard's scaleByDistance to scale by 1.5 when the\n   * // camera is 1500 meters from the billboard and disappear as\n   * // the camera distance approaches 8.0e6 meters.\n   * b.scaleByDistance = new Cesium.NearFarScalar(1.5e2, 1.5, 8.0e6, 0.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable scaling by distance\n   * b.scaleByDistance = undefined;\n   */\n  scaleByDistance: {\n    get: function () {\n      return this._scaleByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\"far distance must be greater than near distance.\");\n      } //>>includeEnd('debug');\n\n\n      var scaleByDistance = this._scaleByDistance;\n\n      if (!NearFarScalar.equals(scaleByDistance, value)) {\n        this._scaleByDistance = NearFarScalar.clone(value, scaleByDistance);\n        makeDirty(this, SCALE_BY_DISTANCE_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets near and far translucency properties of a Billboard based on the billboard's distance from the camera.\n   * A billboard's translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's translucency remains clamped to the nearest bound.  If undefined,\n   * translucencyByDistance will be disabled.\n   * @memberof Billboard.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a billboard's translucency to 1.0 when the\n   * // camera is 1500 meters from the billboard and disappear as\n   * // the camera distance approaches 8.0e6 meters.\n   * b.translucencyByDistance = new Cesium.NearFarScalar(1.5e2, 1.0, 8.0e6, 0.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable translucency by distance\n   * b.translucencyByDistance = undefined;\n   */\n  translucencyByDistance: {\n    get: function () {\n      return this._translucencyByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\"far distance must be greater than near distance.\");\n      } //>>includeEnd('debug');\n\n\n      var translucencyByDistance = this._translucencyByDistance;\n\n      if (!NearFarScalar.equals(translucencyByDistance, value)) {\n        this._translucencyByDistance = NearFarScalar.clone(value, translucencyByDistance);\n        makeDirty(this, TRANSLUCENCY_BY_DISTANCE_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets near and far pixel offset scaling properties of a Billboard based on the billboard's distance from the camera.\n   * A billboard's pixel offset will be scaled between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's pixel offset scale remains clamped to the nearest bound.  If undefined,\n   * pixelOffsetScaleByDistance will be disabled.\n   * @memberof Billboard.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a billboard's pixel offset scale to 0.0 when the\n   * // camera is 1500 meters from the billboard and scale pixel offset to 10.0 pixels\n   * // in the y direction the camera distance approaches 8.0e6 meters.\n   * b.pixelOffset = new Cesium.Cartesian2(0.0, 1.0);\n   * b.pixelOffsetScaleByDistance = new Cesium.NearFarScalar(1.5e2, 0.0, 8.0e6, 10.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable pixel offset by distance\n   * b.pixelOffsetScaleByDistance = undefined;\n   */\n  pixelOffsetScaleByDistance: {\n    get: function () {\n      return this._pixelOffsetScaleByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\"far distance must be greater than near distance.\");\n      } //>>includeEnd('debug');\n\n\n      var pixelOffsetScaleByDistance = this._pixelOffsetScaleByDistance;\n\n      if (!NearFarScalar.equals(pixelOffsetScaleByDistance, value)) {\n        this._pixelOffsetScaleByDistance = NearFarScalar.clone(value, pixelOffsetScaleByDistance);\n        makeDirty(this, PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the 3D Cartesian offset applied to this billboard in eye coordinates.  Eye coordinates is a left-handed\n   * coordinate system, where <code>x</code> points towards the viewer's right, <code>y</code> points up, and\n   * <code>z</code> points into the screen.  Eye coordinates use the same scale as world and model coordinates,\n   * which is typically meters.\n   * <br /><br />\n   * An eye offset is commonly used to arrange multiple billboards or objects at the same position, e.g., to\n   * arrange a billboard above its corresponding 3D model.\n   * <br /><br />\n   * Below, the billboard is positioned at the center of the Earth but an eye offset makes it always\n   * appear on top of the Earth regardless of the viewer's or Earth's orientation.\n   * <br /><br />\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.one.png' width='250' height='188' /></td>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.two.png' width='250' height='188' /></td>\n   * </tr></table>\n   * <code>b.eyeOffset = new Cartesian3(0.0, 8000000.0, 0.0);</code><br /><br />\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {Cartesian3}\n   */\n  eyeOffset: {\n    get: function () {\n      return this._eyeOffset;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      var eyeOffset = this._eyeOffset;\n\n      if (!Cartesian3.equals(eyeOffset, value)) {\n        Cartesian3.clone(value, eyeOffset);\n        makeDirty(this, EYE_OFFSET_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the horizontal origin of this billboard, which determines if the billboard is\n   * to the left, center, or right of its anchor position.\n   * <br /><br />\n   * <div align='center'>\n   * <img src='Images/Billboard.setHorizontalOrigin.png' width='648' height='196' /><br />\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {HorizontalOrigin}\n   * @example\n   * // Use a bottom, left origin\n   * b.horizontalOrigin = Cesium.HorizontalOrigin.LEFT;\n   * b.verticalOrigin = Cesium.VerticalOrigin.BOTTOM;\n   */\n  horizontalOrigin: {\n    get: function () {\n      return this._horizontalOrigin;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      if (this._horizontalOrigin !== value) {\n        this._horizontalOrigin = value;\n        makeDirty(this, HORIZONTAL_ORIGIN_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the vertical origin of this billboard, which determines if the billboard is\n   * to the above, below, or at the center of its anchor position.\n   * <br /><br />\n   * <div align='center'>\n   * <img src='Images/Billboard.setVerticalOrigin.png' width='695' height='175' /><br />\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {VerticalOrigin}\n   * @example\n   * // Use a bottom, left origin\n   * b.horizontalOrigin = Cesium.HorizontalOrigin.LEFT;\n   * b.verticalOrigin = Cesium.VerticalOrigin.BOTTOM;\n   */\n  verticalOrigin: {\n    get: function () {\n      return this._verticalOrigin;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      if (this._verticalOrigin !== value) {\n        this._verticalOrigin = value;\n        makeDirty(this, VERTICAL_ORIGIN_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the uniform scale that is multiplied with the billboard's image size in pixels.\n   * A scale of <code>1.0</code> does not change the size of the billboard; a scale greater than\n   * <code>1.0</code> enlarges the billboard; a positive scale less than <code>1.0</code> shrinks\n   * the billboard.\n   * <br /><br />\n   * <div align='center'>\n   * <img src='Images/Billboard.setScale.png' width='400' height='300' /><br/>\n   * From left to right in the above image, the scales are <code>0.5</code>, <code>1.0</code>,\n   * and <code>2.0</code>.\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {Number}\n   */\n  scale: {\n    get: function () {\n      return this._scale;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      if (this._scale !== value) {\n        this._scale = value;\n        makeDirty(this, SCALE_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the color that is multiplied with the billboard's texture.  This has two common use cases.  First,\n   * the same white texture may be used by many different billboards, each with a different color, to create\n   * colored billboards.  Second, the color's alpha component can be used to make the billboard translucent as shown below.\n   * An alpha of <code>0.0</code> makes the billboard transparent, and <code>1.0</code> makes the billboard opaque.\n   * <br /><br />\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Billboard.setColor.Alpha255.png' width='250' height='188' /></td>\n   * <td align='center'><code>alpha : 0.5</code><br/><img src='Images/Billboard.setColor.Alpha127.png' width='250' height='188' /></td>\n   * </tr></table>\n   * </div>\n   * <br />\n   * The red, green, blue, and alpha values are indicated by <code>value</code>'s <code>red</code>, <code>green</code>,\n   * <code>blue</code>, and <code>alpha</code> properties as shown in Example 1.  These components range from <code>0.0</code>\n   * (no intensity) to <code>1.0</code> (full intensity).\n   * @memberof Billboard.prototype\n   * @type {Color}\n   *\n   * @example\n   * // Example 1. Assign yellow.\n   * b.color = Cesium.Color.YELLOW;\n   *\n   * @example\n   * // Example 2. Make a billboard 50% translucent.\n   * b.color = new Cesium.Color(1.0, 1.0, 1.0, 0.5);\n   */\n  color: {\n    get: function () {\n      return this._color;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      var color = this._color;\n\n      if (!Color.equals(color, value)) {\n        Color.clone(value, color);\n        makeDirty(this, COLOR_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the rotation angle in radians.\n   * @memberof Billboard.prototype\n   * @type {Number}\n   */\n  rotation: {\n    get: function () {\n      return this._rotation;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      if (this._rotation !== value) {\n        this._rotation = value;\n        makeDirty(this, ROTATION_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the aligned axis in world space. The aligned axis is the unit vector that the billboard up vector points towards.\n   * The default is the zero vector, which means the billboard is aligned to the screen up vector.\n   * @memberof Billboard.prototype\n   * @type {Cartesian3}\n   * @example\n   * // Example 1.\n   * // Have the billboard up vector point north\n   * billboard.alignedAxis = Cesium.Cartesian3.UNIT_Z;\n   *\n   * @example\n   * // Example 2.\n   * // Have the billboard point east.\n   * billboard.alignedAxis = Cesium.Cartesian3.UNIT_Z;\n   * billboard.rotation = -Cesium.Math.PI_OVER_TWO;\n   *\n   * @example\n   * // Example 3.\n   * // Reset the aligned axis\n   * billboard.alignedAxis = Cesium.Cartesian3.ZERO;\n   */\n  alignedAxis: {\n    get: function () {\n      return this._alignedAxis;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      var alignedAxis = this._alignedAxis;\n\n      if (!Cartesian3.equals(alignedAxis, value)) {\n        Cartesian3.clone(value, alignedAxis);\n        makeDirty(this, ALIGNED_AXIS_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets a width for the billboard. If undefined, the image width will be used.\n   * @memberof Billboard.prototype\n   * @type {Number}\n   */\n  width: {\n    get: function () {\n      return defaultValue(this._width, this._imageWidth);\n    },\n    set: function (value) {\n      if (this._width !== value) {\n        this._width = value;\n        makeDirty(this, IMAGE_INDEX_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets a height for the billboard. If undefined, the image height will be used.\n   * @memberof Billboard.prototype\n   * @type {Number}\n   */\n  height: {\n    get: function () {\n      return defaultValue(this._height, this._imageHeight);\n    },\n    set: function (value) {\n      if (this._height !== value) {\n        this._height = value;\n        makeDirty(this, IMAGE_INDEX_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets if the billboard size is in meters or pixels. <code>true</code> to size the billboard in meters;\n   * otherwise, the size is in pixels.\n   * @memberof Billboard.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  sizeInMeters: {\n    get: function () {\n      return this._sizeInMeters;\n    },\n    set: function (value) {\n      if (this._sizeInMeters !== value) {\n        this._sizeInMeters = value;\n        makeDirty(this, COLOR_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the condition specifying at what distance from the camera that this billboard will be displayed.\n   * @memberof Billboard.prototype\n   * @type {DistanceDisplayCondition}\n   * @default undefined\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._distanceDisplayCondition;\n    },\n    set: function (value) {\n      if (!DistanceDisplayCondition.equals(value, this._distanceDisplayCondition)) {\n        //>>includeStart('debug', pragmas.debug);\n        if (defined(value) && value.far <= value.near) {\n          throw new DeveloperError(\"far distance must be greater than near distance.\");\n        } //>>includeEnd('debug');\n\n\n        this._distanceDisplayCondition = DistanceDisplayCondition.clone(value, this._distanceDisplayCondition);\n        makeDirty(this, DISTANCE_DISPLAY_CONDITION);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n   * When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied.\n   * @memberof Billboard.prototype\n   * @type {Number}\n   */\n  disableDepthTestDistance: {\n    get: function () {\n      return this._disableDepthTestDistance;\n    },\n    set: function (value) {\n      if (this._disableDepthTestDistance !== value) {\n        //>>includeStart('debug', pragmas.debug);\n        if (defined(value) && value < 0.0) {\n          throw new DeveloperError(\"disableDepthTestDistance must be greater than or equal to 0.0.\");\n        } //>>includeEnd('debug');\n\n\n        this._disableDepthTestDistance = value;\n        makeDirty(this, DISABLE_DEPTH_DISTANCE);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the user-defined object returned when the billboard is picked.\n   * @memberof Billboard.prototype\n   * @type {Object}\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n    set: function (value) {\n      this._id = value;\n\n      if (defined(this._pickId)) {\n        this._pickId.object.id = value;\n      }\n    }\n  },\n\n  /**\n   * The primitive to return when picking this billboard.\n   * @memberof Billboard.prototype\n   * @private\n   */\n  pickPrimitive: {\n    get: function () {\n      return this._pickPrimitive;\n    },\n    set: function (value) {\n      this._pickPrimitive = value;\n\n      if (defined(this._pickId)) {\n        this._pickId.object.primitive = value;\n      }\n    }\n  },\n\n  /**\n   * @private\n   */\n  pickId: {\n    get: function () {\n      return this._pickId;\n    }\n  },\n\n  /**\n   * <p>\n   * Gets or sets the image to be used for this billboard.  If a texture has already been created for the\n   * given image, the existing texture is used.\n   * </p>\n   * <p>\n   * This property can be set to a loaded Image, a URL which will be loaded as an Image automatically,\n   * a canvas, or another billboard's image property (from the same billboard collection).\n   * </p>\n   *\n   * @memberof Billboard.prototype\n   * @type {String}\n   * @example\n   * // load an image from a URL\n   * b.image = 'some/image/url.png';\n   *\n   * // assuming b1 and b2 are billboards in the same billboard collection,\n   * // use the same image for both billboards.\n   * b2.image = b1.image;\n   */\n  image: {\n    get: function () {\n      return this._imageId;\n    },\n    set: function (value) {\n      if (!defined(value)) {\n        this._imageIndex = -1;\n        this._imageSubRegion = undefined;\n        this._imageId = undefined;\n        this._image = undefined;\n        this._imageIndexPromise = undefined;\n        makeDirty(this, IMAGE_INDEX_INDEX);\n      } else if (typeof value === \"string\") {\n        this.setImage(value, value);\n      } else if (value instanceof Resource) {\n        this.setImage(value.url, value);\n      } else if (defined(value.src)) {\n        this.setImage(value.src, value);\n      } else {\n        this.setImage(createGuid(), value);\n      }\n    }\n  },\n\n  /**\n   * When <code>true</code>, this billboard is ready to render, i.e., the image\n   * has been downloaded and the WebGL resources are created.\n   *\n   * @memberof Billboard.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  ready: {\n    get: function () {\n      return this._imageIndex !== -1;\n    }\n  },\n\n  /**\n   * Keeps track of the position of the billboard based on the height reference.\n   * @memberof Billboard.prototype\n   * @type {Cartesian3}\n   * @private\n   */\n  _clampedPosition: {\n    get: function () {\n      return this._actualClampedPosition;\n    },\n    set: function (value) {\n      this._actualClampedPosition = Cartesian3.clone(value, this._actualClampedPosition);\n      makeDirty(this, POSITION_INDEX);\n    }\n  },\n\n  /**\n   * Determines whether or not this billboard will be shown or hidden because it was clustered.\n   * @memberof Billboard.prototype\n   * @type {Boolean}\n   * @private\n   */\n  clusterShow: {\n    get: function () {\n      return this._clusterShow;\n    },\n    set: function (value) {\n      if (this._clusterShow !== value) {\n        this._clusterShow = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    }\n  },\n\n  /**\n   * The outline color of this Billboard.  Effective only for SDF billboards like Label glyphs.\n   * @memberof Billboard.prototype\n   * @type {Color}\n   * @private\n   */\n  outlineColor: {\n    get: function () {\n      return this._outlineColor;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      var outlineColor = this._outlineColor;\n\n      if (!Color.equals(outlineColor, value)) {\n        Color.clone(value, outlineColor);\n        makeDirty(this, SDF_INDEX);\n      }\n    }\n  },\n\n  /**\n   * The outline width of this Billboard in pixels.  Effective only for SDF billboards like Label glyphs.\n   * @memberof Billboard.prototype\n   * @type {Number}\n   * @private\n   */\n  outlineWidth: {\n    get: function () {\n      return this._outlineWidth;\n    },\n    set: function (value) {\n      if (this._outlineWidth !== value) {\n        this._outlineWidth = value;\n        makeDirty(this, SDF_INDEX);\n      }\n    }\n  }\n});\n\nBillboard.prototype.getPickId = function (context) {\n  if (!defined(this._pickId)) {\n    this._pickId = context.createPickId({\n      primitive: this._pickPrimitive,\n      collection: this._collection,\n      id: this._id\n    });\n  }\n\n  return this._pickId;\n};\n\nBillboard.prototype._updateClamping = function () {\n  Billboard._updateClamping(this._billboardCollection, this);\n};\n\nvar scratchCartographic = new Cartographic();\nvar scratchPosition = new Cartesian3();\n\nBillboard._updateClamping = function (collection, owner) {\n  var scene = collection._scene;\n\n  if (!defined(scene) || !defined(scene.globe)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (owner._heightReference !== HeightReference.NONE) {\n      throw new DeveloperError(\"Height reference is not supported without a scene and globe.\");\n    } //>>includeEnd('debug');\n\n\n    return;\n  }\n\n  var globe = scene.globe;\n  var ellipsoid = globe.ellipsoid;\n  var surface = globe._surface;\n  var mode = scene.frameState.mode;\n  var modeChanged = mode !== owner._mode;\n  owner._mode = mode;\n\n  if ((owner._heightReference === HeightReference.NONE || modeChanged) && defined(owner._removeCallbackFunc)) {\n    owner._removeCallbackFunc();\n\n    owner._removeCallbackFunc = undefined;\n    owner._clampedPosition = undefined;\n  }\n\n  if (owner._heightReference === HeightReference.NONE || !defined(owner._position)) {\n    return;\n  }\n\n  var position = ellipsoid.cartesianToCartographic(owner._position);\n\n  if (!defined(position)) {\n    owner._actualClampedPosition = undefined;\n    return;\n  }\n\n  if (defined(owner._removeCallbackFunc)) {\n    owner._removeCallbackFunc();\n  }\n\n  function updateFunction(clampedPosition) {\n    if (owner._heightReference === HeightReference.RELATIVE_TO_GROUND) {\n      if (owner._mode === SceneMode.SCENE3D) {\n        var clampedCart = ellipsoid.cartesianToCartographic(clampedPosition, scratchCartographic);\n        clampedCart.height += position.height;\n        ellipsoid.cartographicToCartesian(clampedCart, clampedPosition);\n      } else {\n        clampedPosition.x += position.height;\n      }\n    }\n\n    owner._clampedPosition = Cartesian3.clone(clampedPosition, owner._clampedPosition);\n  }\n\n  owner._removeCallbackFunc = surface.updateHeight(position, updateFunction);\n  Cartographic.clone(position, scratchCartographic);\n  var height = globe.getHeight(position);\n\n  if (defined(height)) {\n    scratchCartographic.height = height;\n  }\n\n  ellipsoid.cartographicToCartesian(scratchCartographic, scratchPosition);\n  updateFunction(scratchPosition);\n};\n\nBillboard.prototype._loadImage = function () {\n  var atlas = this._billboardCollection._textureAtlas;\n  var imageId = this._imageId;\n  var image = this._image;\n  var imageSubRegion = this._imageSubRegion;\n  var imageIndexPromise;\n\n  if (defined(image)) {\n    imageIndexPromise = atlas.addImage(imageId, image);\n  }\n\n  if (defined(imageSubRegion)) {\n    imageIndexPromise = atlas.addSubRegion(imageId, imageSubRegion);\n  }\n\n  this._imageIndexPromise = imageIndexPromise;\n\n  if (!defined(imageIndexPromise)) {\n    return;\n  }\n\n  var that = this;\n  imageIndexPromise.then(function (index) {\n    if (that._imageId !== imageId || that._image !== image || !BoundingRectangle.equals(that._imageSubRegion, imageSubRegion)) {\n      // another load occurred before this one finished, ignore the index\n      return;\n    } // fill in imageWidth and imageHeight\n\n\n    var textureCoordinates = atlas.textureCoordinates[index];\n    that._imageWidth = atlas.texture.width * textureCoordinates.width;\n    that._imageHeight = atlas.texture.height * textureCoordinates.height;\n    that._imageIndex = index;\n    that._ready = true;\n    that._image = undefined;\n    that._imageIndexPromise = undefined;\n    makeDirty(that, IMAGE_INDEX_INDEX);\n  }).otherwise(function (error) {\n    console.error(\"Error loading image for billboard: \" + error);\n    that._imageIndexPromise = undefined;\n  });\n};\n/**\n * <p>\n * Sets the image to be used for this billboard.  If a texture has already been created for the\n * given id, the existing texture is used.\n * </p>\n * <p>\n * This function is useful for dynamically creating textures that are shared across many billboards.\n * Only the first billboard will actually call the function and create the texture, while subsequent\n * billboards created with the same id will simply re-use the existing texture.\n * </p>\n * <p>\n * To load an image from a URL, setting the {@link Billboard#image} property is more convenient.\n * </p>\n *\n * @param {String} id The id of the image.  This can be any string that uniquely identifies the image.\n * @param {Image|Canvas|String|Resource|Billboard~CreateImageCallback} image The image to load.  This parameter\n *        can either be a loaded Image or Canvas, a URL which will be loaded as an Image automatically,\n *        or a function which will be called to create the image if it hasn't been loaded already.\n * @example\n * // create a billboard image dynamically\n * function drawImage(id) {\n *   // create and draw an image using a canvas\n *   var canvas = document.createElement('canvas');\n *   var context2D = canvas.getContext('2d');\n *   // ... draw image\n *   return canvas;\n * }\n * // drawImage will be called to create the texture\n * b.setImage('myImage', drawImage);\n *\n * // subsequent billboards created in the same collection using the same id will use the existing\n * // texture, without the need to create the canvas or draw the image\n * b2.setImage('myImage', drawImage);\n */\n\n\nBillboard.prototype.setImage = function (id, image) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required.\");\n  }\n\n  if (!defined(image)) {\n    throw new DeveloperError(\"image is required.\");\n  } //>>includeEnd('debug');\n\n\n  if (this._imageId === id) {\n    return;\n  }\n\n  this._imageIndex = -1;\n  this._imageSubRegion = undefined;\n  this._imageId = id;\n  this._image = image;\n\n  if (defined(this._billboardCollection._textureAtlas)) {\n    this._loadImage();\n  }\n};\n/**\n * Uses a sub-region of the image with the given id as the image for this billboard,\n * measured in pixels from the bottom-left.\n *\n * @param {String} id The id of the image to use.\n * @param {BoundingRectangle} subRegion The sub-region of the image.\n *\n * @exception {RuntimeError} image with id must be in the atlas\n */\n\n\nBillboard.prototype.setImageSubRegion = function (id, subRegion) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required.\");\n  }\n\n  if (!defined(subRegion)) {\n    throw new DeveloperError(\"subRegion is required.\");\n  } //>>includeEnd('debug');\n\n\n  if (this._imageId === id && BoundingRectangle.equals(this._imageSubRegion, subRegion)) {\n    return;\n  }\n\n  this._imageIndex = -1;\n  this._imageId = id;\n  this._imageSubRegion = BoundingRectangle.clone(subRegion);\n\n  if (defined(this._billboardCollection._textureAtlas)) {\n    this._loadImage();\n  }\n};\n\nBillboard.prototype._setTranslate = function (value) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required.\");\n  } //>>includeEnd('debug');\n\n\n  var translate = this._translate;\n\n  if (!Cartesian2.equals(translate, value)) {\n    Cartesian2.clone(value, translate);\n    makeDirty(this, PIXEL_OFFSET_INDEX);\n  }\n};\n\nBillboard.prototype._getActualPosition = function () {\n  return defined(this._clampedPosition) ? this._clampedPosition : this._actualPosition;\n};\n\nBillboard.prototype._setActualPosition = function (value) {\n  if (!defined(this._clampedPosition)) {\n    Cartesian3.clone(value, this._actualPosition);\n  }\n\n  makeDirty(this, POSITION_INDEX);\n};\n\nvar tempCartesian3 = new Cartesian4();\n\nBillboard._computeActualPosition = function (billboard, position, frameState, modelMatrix) {\n  if (defined(billboard._clampedPosition)) {\n    if (frameState.mode !== billboard._mode) {\n      billboard._updateClamping();\n    }\n\n    return billboard._clampedPosition;\n  } else if (frameState.mode === SceneMode.SCENE3D) {\n    return position;\n  }\n\n  Matrix4.multiplyByPoint(modelMatrix, position, tempCartesian3);\n  return SceneTransforms.computeActualWgs84Position(frameState, tempCartesian3);\n};\n\nvar scratchCartesian3 = new Cartesian3(); // This function is basically a stripped-down JavaScript version of BillboardCollectionVS.glsl\n\nBillboard._computeScreenSpacePosition = function (modelMatrix, position, eyeOffset, pixelOffset, scene, result) {\n  // Model to world coordinates\n  var positionWorld = Matrix4.multiplyByPoint(modelMatrix, position, scratchCartesian3); // World to window coordinates\n\n  var positionWC = SceneTransforms.wgs84WithEyeOffsetToWindowCoordinates(scene, positionWorld, eyeOffset, result);\n\n  if (!defined(positionWC)) {\n    return undefined;\n  } // Apply pixel offset\n\n\n  Cartesian2.add(positionWC, pixelOffset, positionWC);\n  return positionWC;\n};\n\nvar scratchPixelOffset = new Cartesian2(0.0, 0.0);\n/**\n * Computes the screen-space position of the billboard's origin, taking into account eye and pixel offsets.\n * The screen space origin is the top, left corner of the canvas; <code>x</code> increases from\n * left to right, and <code>y</code> increases from top to bottom.\n *\n * @param {Scene} scene The scene.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The screen-space position of the billboard.\n *\n * @exception {DeveloperError} Billboard must be in a collection.\n *\n * @example\n * console.log(b.computeScreenSpacePosition(scene).toString());\n *\n * @see Billboard#eyeOffset\n * @see Billboard#pixelOffset\n */\n\nBillboard.prototype.computeScreenSpacePosition = function (scene, result) {\n  var billboardCollection = this._billboardCollection;\n\n  if (!defined(result)) {\n    result = new Cartesian2();\n  } //>>includeStart('debug', pragmas.debug);\n\n\n  if (!defined(billboardCollection)) {\n    throw new DeveloperError(\"Billboard must be in a collection.  Was it removed?\");\n  }\n\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  } //>>includeEnd('debug');\n  // pixel offset for screen space computation is the pixelOffset + screen space translate\n\n\n  Cartesian2.clone(this._pixelOffset, scratchPixelOffset);\n  Cartesian2.add(scratchPixelOffset, this._translate, scratchPixelOffset);\n  var modelMatrix = billboardCollection.modelMatrix;\n  var position = this._position;\n\n  if (defined(this._clampedPosition)) {\n    position = this._clampedPosition;\n\n    if (scene.mode !== SceneMode.SCENE3D) {\n      // position needs to be in world coordinates\n      var projection = scene.mapProjection;\n      var ellipsoid = projection.ellipsoid;\n      var cart = projection.unproject(position, scratchCartographic);\n      position = ellipsoid.cartographicToCartesian(cart, scratchCartesian3);\n      modelMatrix = Matrix4.IDENTITY;\n    }\n  }\n\n  var windowCoordinates = Billboard._computeScreenSpacePosition(modelMatrix, position, this._eyeOffset, scratchPixelOffset, scene, result);\n\n  return windowCoordinates;\n};\n/**\n * Gets a billboard's screen space bounding box centered around screenSpacePosition.\n * @param {Billboard} billboard The billboard to get the screen space bounding box for.\n * @param {Cartesian2} screenSpacePosition The screen space center of the label.\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The screen space bounding box.\n *\n * @private\n */\n\n\nBillboard.getScreenSpaceBoundingBox = function (billboard, screenSpacePosition, result) {\n  var width = billboard.width;\n  var height = billboard.height;\n  var scale = billboard.scale;\n  width *= scale;\n  height *= scale;\n  var x = screenSpacePosition.x;\n\n  if (billboard.horizontalOrigin === HorizontalOrigin.RIGHT) {\n    x -= width;\n  } else if (billboard.horizontalOrigin === HorizontalOrigin.CENTER) {\n    x -= width * 0.5;\n  }\n\n  var y = screenSpacePosition.y;\n\n  if (billboard.verticalOrigin === VerticalOrigin.BOTTOM || billboard.verticalOrigin === VerticalOrigin.BASELINE) {\n    y -= height;\n  } else if (billboard.verticalOrigin === VerticalOrigin.CENTER) {\n    y -= height * 0.5;\n  }\n\n  if (!defined(result)) {\n    result = new BoundingRectangle();\n  }\n\n  result.x = x;\n  result.y = y;\n  result.width = width;\n  result.height = height;\n  return result;\n};\n/**\n * Determines if this billboard equals another billboard.  Billboards are equal if all their properties\n * are equal.  Billboards in different collections can be equal.\n *\n * @param {Billboard} other The billboard to compare for equality.\n * @returns {Boolean} <code>true</code> if the billboards are equal; otherwise, <code>false</code>.\n */\n\n\nBillboard.prototype.equals = function (other) {\n  return this === other || defined(other) && this._id === other._id && Cartesian3.equals(this._position, other._position) && this._imageId === other._imageId && this._show === other._show && this._scale === other._scale && this._verticalOrigin === other._verticalOrigin && this._horizontalOrigin === other._horizontalOrigin && this._heightReference === other._heightReference && BoundingRectangle.equals(this._imageSubRegion, other._imageSubRegion) && Color.equals(this._color, other._color) && Cartesian2.equals(this._pixelOffset, other._pixelOffset) && Cartesian2.equals(this._translate, other._translate) && Cartesian3.equals(this._eyeOffset, other._eyeOffset) && NearFarScalar.equals(this._scaleByDistance, other._scaleByDistance) && NearFarScalar.equals(this._translucencyByDistance, other._translucencyByDistance) && NearFarScalar.equals(this._pixelOffsetScaleByDistance, other._pixelOffsetScaleByDistance) && DistanceDisplayCondition.equals(this._distanceDisplayCondition, other._distanceDisplayCondition) && this._disableDepthTestDistance === other._disableDepthTestDistance;\n};\n\nBillboard.prototype._destroy = function () {\n  if (defined(this._customData)) {\n    this._billboardCollection._scene.globe._surface.removeTileCustomData(this._customData);\n\n    this._customData = undefined;\n  }\n\n  if (defined(this._removeCallbackFunc)) {\n    this._removeCallbackFunc();\n\n    this._removeCallbackFunc = undefined;\n  }\n\n  this.image = undefined;\n  this._pickId = this._pickId && this._pickId.destroy();\n  this._billboardCollection = undefined;\n};\n/**\n * A function that creates an image.\n * @callback Billboard~CreateImageCallback\n * @param {String} id The identifier of the image to load.\n * @returns {Image|Canvas|Promise<Image|Canvas>} The image, or a promise that will resolve to an image.\n */\n\n\nexport default Billboard;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/Billboard.js"],"names":["BoundingRectangle","Cartesian2","Cartesian3","Cartesian4","Cartographic","Color","createGuid","defaultValue","defined","DeveloperError","DistanceDisplayCondition","Matrix4","NearFarScalar","Resource","HeightReference","HorizontalOrigin","SceneMode","SceneTransforms","VerticalOrigin","Billboard","options","billboardCollection","EMPTY_OBJECT","disableDepthTestDistance","translucencyByDistance","pixelOffsetScaleByDistance","scaleByDistance","distanceDisplayCondition","far","near","clone","_show","show","_position","position","ZERO","_actualPosition","_pixelOffset","pixelOffset","_translate","_eyeOffset","eyeOffset","_heightReference","heightReference","NONE","_verticalOrigin","verticalOrigin","CENTER","_horizontalOrigin","horizontalOrigin","_scale","scale","_color","color","WHITE","_rotation","rotation","_alignedAxis","alignedAxis","_width","width","_height","height","_scaleByDistance","_translucencyByDistance","_pixelOffsetScaleByDistance","_sizeInMeters","sizeInMeters","_distanceDisplayCondition","_disableDepthTestDistance","_id","id","_collection","collection","_pickId","undefined","_pickPrimitive","_billboardCollection","_dirty","_index","_batchIndex","_imageIndex","_imageIndexPromise","_imageId","_image","_imageSubRegion","_imageWidth","_imageHeight","_labelDimensions","_labelHorizontalOrigin","_labelTranslate","image","imageId","src","imageSubRegion","_textureAtlas","_loadImage","_actualClampedPosition","_removeCallbackFunc","_mode","SCENE3D","_clusterShow","_outlineColor","outlineColor","BLACK","_outlineWidth","outlineWidth","_updateClamping","SHOW_INDEX","POSITION_INDEX","PIXEL_OFFSET_INDEX","EYE_OFFSET_INDEX","HORIZONTAL_ORIGIN_INDEX","VERTICAL_ORIGIN_INDEX","SCALE_INDEX","IMAGE_INDEX_INDEX","COLOR_INDEX","ROTATION_INDEX","ALIGNED_AXIS_INDEX","SCALE_BY_DISTANCE_INDEX","TRANSLUCENCY_BY_DISTANCE_INDEX","PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX","DISTANCE_DISPLAY_CONDITION","DISABLE_DEPTH_DISTANCE","TEXTURE_COORDINATE_BOUNDS","SDF_INDEX","NUMBER_OF_PROPERTIES","makeDirty","billboard","propertyChanged","_updateBillboard","Object","defineProperties","prototype","get","set","value","equals","object","pickPrimitive","primitive","pickId","setImage","url","ready","_clampedPosition","clusterShow","getPickId","context","createPickId","scratchCartographic","scratchPosition","owner","scene","_scene","globe","ellipsoid","surface","_surface","mode","frameState","modeChanged","cartesianToCartographic","updateFunction","clampedPosition","RELATIVE_TO_GROUND","clampedCart","cartographicToCartesian","x","updateHeight","getHeight","atlas","imageIndexPromise","addImage","addSubRegion","that","then","index","textureCoordinates","texture","_ready","otherwise","error","console","setImageSubRegion","subRegion","_setTranslate","translate","_getActualPosition","_setActualPosition","tempCartesian3","_computeActualPosition","modelMatrix","multiplyByPoint","computeActualWgs84Position","scratchCartesian3","_computeScreenSpacePosition","result","positionWorld","positionWC","wgs84WithEyeOffsetToWindowCoordinates","add","scratchPixelOffset","computeScreenSpacePosition","projection","mapProjection","cart","unproject","IDENTITY","windowCoordinates","getScreenSpaceBoundingBox","screenSpacePosition","RIGHT","y","BOTTOM","BASELINE","other","_destroy","_customData","removeTileCustomData","destroy"],"mappings":"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","sourcesContent":["import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Color from \"../Core/Color.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport Resource from \"../Core/Resource.js\";\nimport HeightReference from \"./HeightReference.js\";\nimport HorizontalOrigin from \"./HorizontalOrigin.js\";\nimport SceneMode from \"./SceneMode.js\";\nimport SceneTransforms from \"./SceneTransforms.js\";\nimport VerticalOrigin from \"./VerticalOrigin.js\";\n\n/**\n * A viewport-aligned image positioned in the 3D scene, that is created\n * and rendered using a {@link BillboardCollection}.  A billboard is created and its initial\n * properties are set by calling {@link BillboardCollection#add}.\n * <br /><br />\n * <div align='center'>\n * <img src='Images/Billboard.png' width='400' height='300' /><br />\n * Example billboards\n * </div>\n *\n * @alias Billboard\n *\n * @performance Reading a property, e.g., {@link Billboard#show}, is constant time.\n * Assigning to a property is constant time but results in\n * CPU to GPU traffic when {@link BillboardCollection#update} is called.  The per-billboard traffic is\n * the same regardless of how many properties were updated.  If most billboards in a collection need to be\n * updated, it may be more efficient to clear the collection with {@link BillboardCollection#removeAll}\n * and add new billboards instead of modifying each one.\n *\n * @exception {DeveloperError} scaleByDistance.far must be greater than scaleByDistance.near\n * @exception {DeveloperError} translucencyByDistance.far must be greater than translucencyByDistance.near\n * @exception {DeveloperError} pixelOffsetScaleByDistance.far must be greater than pixelOffsetScaleByDistance.near\n * @exception {DeveloperError} distanceDisplayCondition.far must be greater than distanceDisplayCondition.near\n *\n * @see BillboardCollection\n * @see BillboardCollection#add\n * @see Label\n *\n * @internalConstructor\n * @class\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Billboards.html|Cesium Sandcastle Billboard Demo}\n */\nfunction Billboard(options, billboardCollection) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    defined(options.disableDepthTestDistance) &&\n    options.disableDepthTestDistance < 0.0\n  ) {\n    throw new DeveloperError(\n      \"disableDepthTestDistance must be greater than or equal to 0.0.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var translucencyByDistance = options.translucencyByDistance;\n  var pixelOffsetScaleByDistance = options.pixelOffsetScaleByDistance;\n  var scaleByDistance = options.scaleByDistance;\n  var distanceDisplayCondition = options.distanceDisplayCondition;\n  if (defined(translucencyByDistance)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (translucencyByDistance.far <= translucencyByDistance.near) {\n      throw new DeveloperError(\n        \"translucencyByDistance.far must be greater than translucencyByDistance.near.\"\n      );\n    }\n    //>>includeEnd('debug');\n    translucencyByDistance = NearFarScalar.clone(translucencyByDistance);\n  }\n  if (defined(pixelOffsetScaleByDistance)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (pixelOffsetScaleByDistance.far <= pixelOffsetScaleByDistance.near) {\n      throw new DeveloperError(\n        \"pixelOffsetScaleByDistance.far must be greater than pixelOffsetScaleByDistance.near.\"\n      );\n    }\n    //>>includeEnd('debug');\n    pixelOffsetScaleByDistance = NearFarScalar.clone(\n      pixelOffsetScaleByDistance\n    );\n  }\n  if (defined(scaleByDistance)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (scaleByDistance.far <= scaleByDistance.near) {\n      throw new DeveloperError(\n        \"scaleByDistance.far must be greater than scaleByDistance.near.\"\n      );\n    }\n    //>>includeEnd('debug');\n    scaleByDistance = NearFarScalar.clone(scaleByDistance);\n  }\n  if (defined(distanceDisplayCondition)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (distanceDisplayCondition.far <= distanceDisplayCondition.near) {\n      throw new DeveloperError(\n        \"distanceDisplayCondition.far must be greater than distanceDisplayCondition.near.\"\n      );\n    }\n    //>>includeEnd('debug');\n    distanceDisplayCondition = DistanceDisplayCondition.clone(\n      distanceDisplayCondition\n    );\n  }\n\n  this._show = defaultValue(options.show, true);\n  this._position = Cartesian3.clone(\n    defaultValue(options.position, Cartesian3.ZERO)\n  );\n  this._actualPosition = Cartesian3.clone(this._position); // For columbus view and 2D\n  this._pixelOffset = Cartesian2.clone(\n    defaultValue(options.pixelOffset, Cartesian2.ZERO)\n  );\n  this._translate = new Cartesian2(0.0, 0.0); // used by labels for glyph vertex translation\n  this._eyeOffset = Cartesian3.clone(\n    defaultValue(options.eyeOffset, Cartesian3.ZERO)\n  );\n  this._heightReference = defaultValue(\n    options.heightReference,\n    HeightReference.NONE\n  );\n  this._verticalOrigin = defaultValue(\n    options.verticalOrigin,\n    VerticalOrigin.CENTER\n  );\n  this._horizontalOrigin = defaultValue(\n    options.horizontalOrigin,\n    HorizontalOrigin.CENTER\n  );\n  this._scale = defaultValue(options.scale, 1.0);\n  this._color = Color.clone(defaultValue(options.color, Color.WHITE));\n  this._rotation = defaultValue(options.rotation, 0.0);\n  this._alignedAxis = Cartesian3.clone(\n    defaultValue(options.alignedAxis, Cartesian3.ZERO)\n  );\n  this._width = options.width;\n  this._height = options.height;\n  this._scaleByDistance = scaleByDistance;\n  this._translucencyByDistance = translucencyByDistance;\n  this._pixelOffsetScaleByDistance = pixelOffsetScaleByDistance;\n  this._sizeInMeters = defaultValue(options.sizeInMeters, false);\n  this._distanceDisplayCondition = distanceDisplayCondition;\n  this._disableDepthTestDistance = options.disableDepthTestDistance;\n  this._id = options.id;\n  this._collection = defaultValue(options.collection, billboardCollection);\n\n  this._pickId = undefined;\n  this._pickPrimitive = defaultValue(options._pickPrimitive, this);\n  this._billboardCollection = billboardCollection;\n  this._dirty = false;\n  this._index = -1; //Used only by BillboardCollection\n  this._batchIndex = undefined; // Used only by Vector3DTilePoints and BillboardCollection\n\n  this._imageIndex = -1;\n  this._imageIndexPromise = undefined;\n  this._imageId = undefined;\n  this._image = undefined;\n  this._imageSubRegion = undefined;\n  this._imageWidth = undefined;\n  this._imageHeight = undefined;\n\n  this._labelDimensions = undefined;\n  this._labelHorizontalOrigin = undefined;\n  this._labelTranslate = undefined;\n\n  var image = options.image;\n  var imageId = options.imageId;\n  if (defined(image)) {\n    if (!defined(imageId)) {\n      if (typeof image === \"string\") {\n        imageId = image;\n      } else if (defined(image.src)) {\n        imageId = image.src;\n      } else {\n        imageId = createGuid();\n      }\n    }\n\n    this._imageId = imageId;\n    this._image = image;\n  }\n\n  if (defined(options.imageSubRegion)) {\n    this._imageId = imageId;\n    this._imageSubRegion = options.imageSubRegion;\n  }\n\n  if (defined(this._billboardCollection._textureAtlas)) {\n    this._loadImage();\n  }\n\n  this._actualClampedPosition = undefined;\n  this._removeCallbackFunc = undefined;\n  this._mode = SceneMode.SCENE3D;\n\n  this._clusterShow = true;\n  this._outlineColor = Color.clone(\n    defaultValue(options.outlineColor, Color.BLACK)\n  );\n  this._outlineWidth = defaultValue(options.outlineWidth, 0.0);\n\n  this._updateClamping();\n}\n\nvar SHOW_INDEX = (Billboard.SHOW_INDEX = 0);\nvar POSITION_INDEX = (Billboard.POSITION_INDEX = 1);\nvar PIXEL_OFFSET_INDEX = (Billboard.PIXEL_OFFSET_INDEX = 2);\nvar EYE_OFFSET_INDEX = (Billboard.EYE_OFFSET_INDEX = 3);\nvar HORIZONTAL_ORIGIN_INDEX = (Billboard.HORIZONTAL_ORIGIN_INDEX = 4);\nvar VERTICAL_ORIGIN_INDEX = (Billboard.VERTICAL_ORIGIN_INDEX = 5);\nvar SCALE_INDEX = (Billboard.SCALE_INDEX = 6);\nvar IMAGE_INDEX_INDEX = (Billboard.IMAGE_INDEX_INDEX = 7);\nvar COLOR_INDEX = (Billboard.COLOR_INDEX = 8);\nvar ROTATION_INDEX = (Billboard.ROTATION_INDEX = 9);\nvar ALIGNED_AXIS_INDEX = (Billboard.ALIGNED_AXIS_INDEX = 10);\nvar SCALE_BY_DISTANCE_INDEX = (Billboard.SCALE_BY_DISTANCE_INDEX = 11);\nvar TRANSLUCENCY_BY_DISTANCE_INDEX = (Billboard.TRANSLUCENCY_BY_DISTANCE_INDEX = 12);\nvar PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX = (Billboard.PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX = 13);\nvar DISTANCE_DISPLAY_CONDITION = (Billboard.DISTANCE_DISPLAY_CONDITION = 14);\nvar DISABLE_DEPTH_DISTANCE = (Billboard.DISABLE_DEPTH_DISTANCE = 15);\nBillboard.TEXTURE_COORDINATE_BOUNDS = 16;\nvar SDF_INDEX = (Billboard.SDF_INDEX = 17);\nBillboard.NUMBER_OF_PROPERTIES = 18;\n\nfunction makeDirty(billboard, propertyChanged) {\n  var billboardCollection = billboard._billboardCollection;\n  if (defined(billboardCollection)) {\n    billboardCollection._updateBillboard(billboard, propertyChanged);\n    billboard._dirty = true;\n  }\n}\n\nObject.defineProperties(Billboard.prototype, {\n  /**\n   * Determines if this billboard will be shown.  Use this to hide or show a billboard, instead\n   * of removing it and re-adding it to the collection.\n   * @memberof Billboard.prototype\n   * @type {Boolean}\n   * @default true\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (this._show !== value) {\n        this._show = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the Cartesian position of this billboard.\n   * @memberof Billboard.prototype\n   * @type {Cartesian3}\n   */\n  position: {\n    get: function () {\n      return this._position;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      var position = this._position;\n      if (!Cartesian3.equals(position, value)) {\n        Cartesian3.clone(value, position);\n        Cartesian3.clone(value, this._actualPosition);\n        this._updateClamping();\n        makeDirty(this, POSITION_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the height reference of this billboard.\n   * @memberof Billboard.prototype\n   * @type {HeightReference}\n   * @default HeightReference.NONE\n   */\n  heightReference: {\n    get: function () {\n      return this._heightReference;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      var heightReference = this._heightReference;\n      if (value !== heightReference) {\n        this._heightReference = value;\n        this._updateClamping();\n        makeDirty(this, POSITION_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the pixel offset in screen space from the origin of this billboard.  This is commonly used\n   * to align multiple billboards and labels at the same position, e.g., an image and text.  The\n   * screen space origin is the top, left corner of the canvas; <code>x</code> increases from\n   * left to right, and <code>y</code> increases from top to bottom.\n   * <br /><br />\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Billboard.setPixelOffset.default.png' width='250' height='188' /></td>\n   * <td align='center'><code>b.pixeloffset = new Cartesian2(50, 25);</code><br/><img src='Images/Billboard.setPixelOffset.x50y-25.png' width='250' height='188' /></td>\n   * </tr></table>\n   * The billboard's origin is indicated by the yellow point.\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {Cartesian2}\n   */\n  pixelOffset: {\n    get: function () {\n      return this._pixelOffset;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      var pixelOffset = this._pixelOffset;\n      if (!Cartesian2.equals(pixelOffset, value)) {\n        Cartesian2.clone(value, pixelOffset);\n        makeDirty(this, PIXEL_OFFSET_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets near and far scaling properties of a Billboard based on the billboard's distance from the camera.\n   * A billboard's scale will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's scale remains clamped to the nearest bound.  If undefined,\n   * scaleByDistance will be disabled.\n   * @memberof Billboard.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a billboard's scaleByDistance to scale by 1.5 when the\n   * // camera is 1500 meters from the billboard and disappear as\n   * // the camera distance approaches 8.0e6 meters.\n   * b.scaleByDistance = new Cesium.NearFarScalar(1.5e2, 1.5, 8.0e6, 0.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable scaling by distance\n   * b.scaleByDistance = undefined;\n   */\n  scaleByDistance: {\n    get: function () {\n      return this._scaleByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\n          \"far distance must be greater than near distance.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      var scaleByDistance = this._scaleByDistance;\n      if (!NearFarScalar.equals(scaleByDistance, value)) {\n        this._scaleByDistance = NearFarScalar.clone(value, scaleByDistance);\n        makeDirty(this, SCALE_BY_DISTANCE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets near and far translucency properties of a Billboard based on the billboard's distance from the camera.\n   * A billboard's translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's translucency remains clamped to the nearest bound.  If undefined,\n   * translucencyByDistance will be disabled.\n   * @memberof Billboard.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a billboard's translucency to 1.0 when the\n   * // camera is 1500 meters from the billboard and disappear as\n   * // the camera distance approaches 8.0e6 meters.\n   * b.translucencyByDistance = new Cesium.NearFarScalar(1.5e2, 1.0, 8.0e6, 0.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable translucency by distance\n   * b.translucencyByDistance = undefined;\n   */\n  translucencyByDistance: {\n    get: function () {\n      return this._translucencyByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\n          \"far distance must be greater than near distance.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      var translucencyByDistance = this._translucencyByDistance;\n      if (!NearFarScalar.equals(translucencyByDistance, value)) {\n        this._translucencyByDistance = NearFarScalar.clone(\n          value,\n          translucencyByDistance\n        );\n        makeDirty(this, TRANSLUCENCY_BY_DISTANCE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets near and far pixel offset scaling properties of a Billboard based on the billboard's distance from the camera.\n   * A billboard's pixel offset will be scaled between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's pixel offset scale remains clamped to the nearest bound.  If undefined,\n   * pixelOffsetScaleByDistance will be disabled.\n   * @memberof Billboard.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a billboard's pixel offset scale to 0.0 when the\n   * // camera is 1500 meters from the billboard and scale pixel offset to 10.0 pixels\n   * // in the y direction the camera distance approaches 8.0e6 meters.\n   * b.pixelOffset = new Cesium.Cartesian2(0.0, 1.0);\n   * b.pixelOffsetScaleByDistance = new Cesium.NearFarScalar(1.5e2, 0.0, 8.0e6, 10.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable pixel offset by distance\n   * b.pixelOffsetScaleByDistance = undefined;\n   */\n  pixelOffsetScaleByDistance: {\n    get: function () {\n      return this._pixelOffsetScaleByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\n          \"far distance must be greater than near distance.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      var pixelOffsetScaleByDistance = this._pixelOffsetScaleByDistance;\n      if (!NearFarScalar.equals(pixelOffsetScaleByDistance, value)) {\n        this._pixelOffsetScaleByDistance = NearFarScalar.clone(\n          value,\n          pixelOffsetScaleByDistance\n        );\n        makeDirty(this, PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the 3D Cartesian offset applied to this billboard in eye coordinates.  Eye coordinates is a left-handed\n   * coordinate system, where <code>x</code> points towards the viewer's right, <code>y</code> points up, and\n   * <code>z</code> points into the screen.  Eye coordinates use the same scale as world and model coordinates,\n   * which is typically meters.\n   * <br /><br />\n   * An eye offset is commonly used to arrange multiple billboards or objects at the same position, e.g., to\n   * arrange a billboard above its corresponding 3D model.\n   * <br /><br />\n   * Below, the billboard is positioned at the center of the Earth but an eye offset makes it always\n   * appear on top of the Earth regardless of the viewer's or Earth's orientation.\n   * <br /><br />\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.one.png' width='250' height='188' /></td>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.two.png' width='250' height='188' /></td>\n   * </tr></table>\n   * <code>b.eyeOffset = new Cartesian3(0.0, 8000000.0, 0.0);</code><br /><br />\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {Cartesian3}\n   */\n  eyeOffset: {\n    get: function () {\n      return this._eyeOffset;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      var eyeOffset = this._eyeOffset;\n      if (!Cartesian3.equals(eyeOffset, value)) {\n        Cartesian3.clone(value, eyeOffset);\n        makeDirty(this, EYE_OFFSET_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the horizontal origin of this billboard, which determines if the billboard is\n   * to the left, center, or right of its anchor position.\n   * <br /><br />\n   * <div align='center'>\n   * <img src='Images/Billboard.setHorizontalOrigin.png' width='648' height='196' /><br />\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {HorizontalOrigin}\n   * @example\n   * // Use a bottom, left origin\n   * b.horizontalOrigin = Cesium.HorizontalOrigin.LEFT;\n   * b.verticalOrigin = Cesium.VerticalOrigin.BOTTOM;\n   */\n  horizontalOrigin: {\n    get: function () {\n      return this._horizontalOrigin;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (this._horizontalOrigin !== value) {\n        this._horizontalOrigin = value;\n        makeDirty(this, HORIZONTAL_ORIGIN_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the vertical origin of this billboard, which determines if the billboard is\n   * to the above, below, or at the center of its anchor position.\n   * <br /><br />\n   * <div align='center'>\n   * <img src='Images/Billboard.setVerticalOrigin.png' width='695' height='175' /><br />\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {VerticalOrigin}\n   * @example\n   * // Use a bottom, left origin\n   * b.horizontalOrigin = Cesium.HorizontalOrigin.LEFT;\n   * b.verticalOrigin = Cesium.VerticalOrigin.BOTTOM;\n   */\n  verticalOrigin: {\n    get: function () {\n      return this._verticalOrigin;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (this._verticalOrigin !== value) {\n        this._verticalOrigin = value;\n        makeDirty(this, VERTICAL_ORIGIN_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the uniform scale that is multiplied with the billboard's image size in pixels.\n   * A scale of <code>1.0</code> does not change the size of the billboard; a scale greater than\n   * <code>1.0</code> enlarges the billboard; a positive scale less than <code>1.0</code> shrinks\n   * the billboard.\n   * <br /><br />\n   * <div align='center'>\n   * <img src='Images/Billboard.setScale.png' width='400' height='300' /><br/>\n   * From left to right in the above image, the scales are <code>0.5</code>, <code>1.0</code>,\n   * and <code>2.0</code>.\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {Number}\n   */\n  scale: {\n    get: function () {\n      return this._scale;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (this._scale !== value) {\n        this._scale = value;\n        makeDirty(this, SCALE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the color that is multiplied with the billboard's texture.  This has two common use cases.  First,\n   * the same white texture may be used by many different billboards, each with a different color, to create\n   * colored billboards.  Second, the color's alpha component can be used to make the billboard translucent as shown below.\n   * An alpha of <code>0.0</code> makes the billboard transparent, and <code>1.0</code> makes the billboard opaque.\n   * <br /><br />\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Billboard.setColor.Alpha255.png' width='250' height='188' /></td>\n   * <td align='center'><code>alpha : 0.5</code><br/><img src='Images/Billboard.setColor.Alpha127.png' width='250' height='188' /></td>\n   * </tr></table>\n   * </div>\n   * <br />\n   * The red, green, blue, and alpha values are indicated by <code>value</code>'s <code>red</code>, <code>green</code>,\n   * <code>blue</code>, and <code>alpha</code> properties as shown in Example 1.  These components range from <code>0.0</code>\n   * (no intensity) to <code>1.0</code> (full intensity).\n   * @memberof Billboard.prototype\n   * @type {Color}\n   *\n   * @example\n   * // Example 1. Assign yellow.\n   * b.color = Cesium.Color.YELLOW;\n   *\n   * @example\n   * // Example 2. Make a billboard 50% translucent.\n   * b.color = new Cesium.Color(1.0, 1.0, 1.0, 0.5);\n   */\n  color: {\n    get: function () {\n      return this._color;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      var color = this._color;\n      if (!Color.equals(color, value)) {\n        Color.clone(value, color);\n        makeDirty(this, COLOR_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the rotation angle in radians.\n   * @memberof Billboard.prototype\n   * @type {Number}\n   */\n  rotation: {\n    get: function () {\n      return this._rotation;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (this._rotation !== value) {\n        this._rotation = value;\n        makeDirty(this, ROTATION_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the aligned axis in world space. The aligned axis is the unit vector that the billboard up vector points towards.\n   * The default is the zero vector, which means the billboard is aligned to the screen up vector.\n   * @memberof Billboard.prototype\n   * @type {Cartesian3}\n   * @example\n   * // Example 1.\n   * // Have the billboard up vector point north\n   * billboard.alignedAxis = Cesium.Cartesian3.UNIT_Z;\n   *\n   * @example\n   * // Example 2.\n   * // Have the billboard point east.\n   * billboard.alignedAxis = Cesium.Cartesian3.UNIT_Z;\n   * billboard.rotation = -Cesium.Math.PI_OVER_TWO;\n   *\n   * @example\n   * // Example 3.\n   * // Reset the aligned axis\n   * billboard.alignedAxis = Cesium.Cartesian3.ZERO;\n   */\n  alignedAxis: {\n    get: function () {\n      return this._alignedAxis;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      var alignedAxis = this._alignedAxis;\n      if (!Cartesian3.equals(alignedAxis, value)) {\n        Cartesian3.clone(value, alignedAxis);\n        makeDirty(this, ALIGNED_AXIS_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets a width for the billboard. If undefined, the image width will be used.\n   * @memberof Billboard.prototype\n   * @type {Number}\n   */\n  width: {\n    get: function () {\n      return defaultValue(this._width, this._imageWidth);\n    },\n    set: function (value) {\n      if (this._width !== value) {\n        this._width = value;\n        makeDirty(this, IMAGE_INDEX_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets a height for the billboard. If undefined, the image height will be used.\n   * @memberof Billboard.prototype\n   * @type {Number}\n   */\n  height: {\n    get: function () {\n      return defaultValue(this._height, this._imageHeight);\n    },\n    set: function (value) {\n      if (this._height !== value) {\n        this._height = value;\n        makeDirty(this, IMAGE_INDEX_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets if the billboard size is in meters or pixels. <code>true</code> to size the billboard in meters;\n   * otherwise, the size is in pixels.\n   * @memberof Billboard.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  sizeInMeters: {\n    get: function () {\n      return this._sizeInMeters;\n    },\n    set: function (value) {\n      if (this._sizeInMeters !== value) {\n        this._sizeInMeters = value;\n        makeDirty(this, COLOR_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the condition specifying at what distance from the camera that this billboard will be displayed.\n   * @memberof Billboard.prototype\n   * @type {DistanceDisplayCondition}\n   * @default undefined\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._distanceDisplayCondition;\n    },\n    set: function (value) {\n      if (\n        !DistanceDisplayCondition.equals(value, this._distanceDisplayCondition)\n      ) {\n        //>>includeStart('debug', pragmas.debug);\n        if (defined(value) && value.far <= value.near) {\n          throw new DeveloperError(\n            \"far distance must be greater than near distance.\"\n          );\n        }\n        //>>includeEnd('debug');\n        this._distanceDisplayCondition = DistanceDisplayCondition.clone(\n          value,\n          this._distanceDisplayCondition\n        );\n        makeDirty(this, DISTANCE_DISPLAY_CONDITION);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n   * When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied.\n   * @memberof Billboard.prototype\n   * @type {Number}\n   */\n  disableDepthTestDistance: {\n    get: function () {\n      return this._disableDepthTestDistance;\n    },\n    set: function (value) {\n      if (this._disableDepthTestDistance !== value) {\n        //>>includeStart('debug', pragmas.debug);\n        if (defined(value) && value < 0.0) {\n          throw new DeveloperError(\n            \"disableDepthTestDistance must be greater than or equal to 0.0.\"\n          );\n        }\n        //>>includeEnd('debug');\n        this._disableDepthTestDistance = value;\n        makeDirty(this, DISABLE_DEPTH_DISTANCE);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the user-defined object returned when the billboard is picked.\n   * @memberof Billboard.prototype\n   * @type {Object}\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n    set: function (value) {\n      this._id = value;\n      if (defined(this._pickId)) {\n        this._pickId.object.id = value;\n      }\n    },\n  },\n\n  /**\n   * The primitive to return when picking this billboard.\n   * @memberof Billboard.prototype\n   * @private\n   */\n  pickPrimitive: {\n    get: function () {\n      return this._pickPrimitive;\n    },\n    set: function (value) {\n      this._pickPrimitive = value;\n      if (defined(this._pickId)) {\n        this._pickId.object.primitive = value;\n      }\n    },\n  },\n\n  /**\n   * @private\n   */\n  pickId: {\n    get: function () {\n      return this._pickId;\n    },\n  },\n\n  /**\n   * <p>\n   * Gets or sets the image to be used for this billboard.  If a texture has already been created for the\n   * given image, the existing texture is used.\n   * </p>\n   * <p>\n   * This property can be set to a loaded Image, a URL which will be loaded as an Image automatically,\n   * a canvas, or another billboard's image property (from the same billboard collection).\n   * </p>\n   *\n   * @memberof Billboard.prototype\n   * @type {String}\n   * @example\n   * // load an image from a URL\n   * b.image = 'some/image/url.png';\n   *\n   * // assuming b1 and b2 are billboards in the same billboard collection,\n   * // use the same image for both billboards.\n   * b2.image = b1.image;\n   */\n  image: {\n    get: function () {\n      return this._imageId;\n    },\n    set: function (value) {\n      if (!defined(value)) {\n        this._imageIndex = -1;\n        this._imageSubRegion = undefined;\n        this._imageId = undefined;\n        this._image = undefined;\n        this._imageIndexPromise = undefined;\n        makeDirty(this, IMAGE_INDEX_INDEX);\n      } else if (typeof value === \"string\") {\n        this.setImage(value, value);\n      } else if (value instanceof Resource) {\n        this.setImage(value.url, value);\n      } else if (defined(value.src)) {\n        this.setImage(value.src, value);\n      } else {\n        this.setImage(createGuid(), value);\n      }\n    },\n  },\n\n  /**\n   * When <code>true</code>, this billboard is ready to render, i.e., the image\n   * has been downloaded and the WebGL resources are created.\n   *\n   * @memberof Billboard.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  ready: {\n    get: function () {\n      return this._imageIndex !== -1;\n    },\n  },\n\n  /**\n   * Keeps track of the position of the billboard based on the height reference.\n   * @memberof Billboard.prototype\n   * @type {Cartesian3}\n   * @private\n   */\n  _clampedPosition: {\n    get: function () {\n      return this._actualClampedPosition;\n    },\n    set: function (value) {\n      this._actualClampedPosition = Cartesian3.clone(\n        value,\n        this._actualClampedPosition\n      );\n      makeDirty(this, POSITION_INDEX);\n    },\n  },\n\n  /**\n   * Determines whether or not this billboard will be shown or hidden because it was clustered.\n   * @memberof Billboard.prototype\n   * @type {Boolean}\n   * @private\n   */\n  clusterShow: {\n    get: function () {\n      return this._clusterShow;\n    },\n    set: function (value) {\n      if (this._clusterShow !== value) {\n        this._clusterShow = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    },\n  },\n\n  /**\n   * The outline color of this Billboard.  Effective only for SDF billboards like Label glyphs.\n   * @memberof Billboard.prototype\n   * @type {Color}\n   * @private\n   */\n  outlineColor: {\n    get: function () {\n      return this._outlineColor;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      var outlineColor = this._outlineColor;\n      if (!Color.equals(outlineColor, value)) {\n        Color.clone(value, outlineColor);\n        makeDirty(this, SDF_INDEX);\n      }\n    },\n  },\n\n  /**\n   * The outline width of this Billboard in pixels.  Effective only for SDF billboards like Label glyphs.\n   * @memberof Billboard.prototype\n   * @type {Number}\n   * @private\n   */\n  outlineWidth: {\n    get: function () {\n      return this._outlineWidth;\n    },\n    set: function (value) {\n      if (this._outlineWidth !== value) {\n        this._outlineWidth = value;\n        makeDirty(this, SDF_INDEX);\n      }\n    },\n  },\n});\n\nBillboard.prototype.getPickId = function (context) {\n  if (!defined(this._pickId)) {\n    this._pickId = context.createPickId({\n      primitive: this._pickPrimitive,\n      collection: this._collection,\n      id: this._id,\n    });\n  }\n\n  return this._pickId;\n};\n\nBillboard.prototype._updateClamping = function () {\n  Billboard._updateClamping(this._billboardCollection, this);\n};\n\nvar scratchCartographic = new Cartographic();\nvar scratchPosition = new Cartesian3();\n\nBillboard._updateClamping = function (collection, owner) {\n  var scene = collection._scene;\n  if (!defined(scene) || !defined(scene.globe)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (owner._heightReference !== HeightReference.NONE) {\n      throw new DeveloperError(\n        \"Height reference is not supported without a scene and globe.\"\n      );\n    }\n    //>>includeEnd('debug');\n    return;\n  }\n\n  var globe = scene.globe;\n  var ellipsoid = globe.ellipsoid;\n  var surface = globe._surface;\n\n  var mode = scene.frameState.mode;\n\n  var modeChanged = mode !== owner._mode;\n  owner._mode = mode;\n\n  if (\n    (owner._heightReference === HeightReference.NONE || modeChanged) &&\n    defined(owner._removeCallbackFunc)\n  ) {\n    owner._removeCallbackFunc();\n    owner._removeCallbackFunc = undefined;\n    owner._clampedPosition = undefined;\n  }\n\n  if (\n    owner._heightReference === HeightReference.NONE ||\n    !defined(owner._position)\n  ) {\n    return;\n  }\n\n  var position = ellipsoid.cartesianToCartographic(owner._position);\n  if (!defined(position)) {\n    owner._actualClampedPosition = undefined;\n    return;\n  }\n\n  if (defined(owner._removeCallbackFunc)) {\n    owner._removeCallbackFunc();\n  }\n\n  function updateFunction(clampedPosition) {\n    if (owner._heightReference === HeightReference.RELATIVE_TO_GROUND) {\n      if (owner._mode === SceneMode.SCENE3D) {\n        var clampedCart = ellipsoid.cartesianToCartographic(\n          clampedPosition,\n          scratchCartographic\n        );\n        clampedCart.height += position.height;\n        ellipsoid.cartographicToCartesian(clampedCart, clampedPosition);\n      } else {\n        clampedPosition.x += position.height;\n      }\n    }\n    owner._clampedPosition = Cartesian3.clone(\n      clampedPosition,\n      owner._clampedPosition\n    );\n  }\n  owner._removeCallbackFunc = surface.updateHeight(position, updateFunction);\n\n  Cartographic.clone(position, scratchCartographic);\n  var height = globe.getHeight(position);\n  if (defined(height)) {\n    scratchCartographic.height = height;\n  }\n\n  ellipsoid.cartographicToCartesian(scratchCartographic, scratchPosition);\n\n  updateFunction(scratchPosition);\n};\n\nBillboard.prototype._loadImage = function () {\n  var atlas = this._billboardCollection._textureAtlas;\n\n  var imageId = this._imageId;\n  var image = this._image;\n  var imageSubRegion = this._imageSubRegion;\n  var imageIndexPromise;\n\n  if (defined(image)) {\n    imageIndexPromise = atlas.addImage(imageId, image);\n  }\n  if (defined(imageSubRegion)) {\n    imageIndexPromise = atlas.addSubRegion(imageId, imageSubRegion);\n  }\n\n  this._imageIndexPromise = imageIndexPromise;\n\n  if (!defined(imageIndexPromise)) {\n    return;\n  }\n\n  var that = this;\n  imageIndexPromise\n    .then(function (index) {\n      if (\n        that._imageId !== imageId ||\n        that._image !== image ||\n        !BoundingRectangle.equals(that._imageSubRegion, imageSubRegion)\n      ) {\n        // another load occurred before this one finished, ignore the index\n        return;\n      }\n\n      // fill in imageWidth and imageHeight\n      var textureCoordinates = atlas.textureCoordinates[index];\n      that._imageWidth = atlas.texture.width * textureCoordinates.width;\n      that._imageHeight = atlas.texture.height * textureCoordinates.height;\n\n      that._imageIndex = index;\n      that._ready = true;\n      that._image = undefined;\n      that._imageIndexPromise = undefined;\n      makeDirty(that, IMAGE_INDEX_INDEX);\n    })\n    .otherwise(function (error) {\n      console.error(\"Error loading image for billboard: \" + error);\n      that._imageIndexPromise = undefined;\n    });\n};\n\n/**\n * <p>\n * Sets the image to be used for this billboard.  If a texture has already been created for the\n * given id, the existing texture is used.\n * </p>\n * <p>\n * This function is useful for dynamically creating textures that are shared across many billboards.\n * Only the first billboard will actually call the function and create the texture, while subsequent\n * billboards created with the same id will simply re-use the existing texture.\n * </p>\n * <p>\n * To load an image from a URL, setting the {@link Billboard#image} property is more convenient.\n * </p>\n *\n * @param {String} id The id of the image.  This can be any string that uniquely identifies the image.\n * @param {Image|Canvas|String|Resource|Billboard~CreateImageCallback} image The image to load.  This parameter\n *        can either be a loaded Image or Canvas, a URL which will be loaded as an Image automatically,\n *        or a function which will be called to create the image if it hasn't been loaded already.\n * @example\n * // create a billboard image dynamically\n * function drawImage(id) {\n *   // create and draw an image using a canvas\n *   var canvas = document.createElement('canvas');\n *   var context2D = canvas.getContext('2d');\n *   // ... draw image\n *   return canvas;\n * }\n * // drawImage will be called to create the texture\n * b.setImage('myImage', drawImage);\n *\n * // subsequent billboards created in the same collection using the same id will use the existing\n * // texture, without the need to create the canvas or draw the image\n * b2.setImage('myImage', drawImage);\n */\nBillboard.prototype.setImage = function (id, image) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required.\");\n  }\n  if (!defined(image)) {\n    throw new DeveloperError(\"image is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (this._imageId === id) {\n    return;\n  }\n\n  this._imageIndex = -1;\n  this._imageSubRegion = undefined;\n  this._imageId = id;\n  this._image = image;\n\n  if (defined(this._billboardCollection._textureAtlas)) {\n    this._loadImage();\n  }\n};\n\n/**\n * Uses a sub-region of the image with the given id as the image for this billboard,\n * measured in pixels from the bottom-left.\n *\n * @param {String} id The id of the image to use.\n * @param {BoundingRectangle} subRegion The sub-region of the image.\n *\n * @exception {RuntimeError} image with id must be in the atlas\n */\nBillboard.prototype.setImageSubRegion = function (id, subRegion) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required.\");\n  }\n  if (!defined(subRegion)) {\n    throw new DeveloperError(\"subRegion is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (\n    this._imageId === id &&\n    BoundingRectangle.equals(this._imageSubRegion, subRegion)\n  ) {\n    return;\n  }\n\n  this._imageIndex = -1;\n  this._imageId = id;\n  this._imageSubRegion = BoundingRectangle.clone(subRegion);\n\n  if (defined(this._billboardCollection._textureAtlas)) {\n    this._loadImage();\n  }\n};\n\nBillboard.prototype._setTranslate = function (value) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var translate = this._translate;\n  if (!Cartesian2.equals(translate, value)) {\n    Cartesian2.clone(value, translate);\n    makeDirty(this, PIXEL_OFFSET_INDEX);\n  }\n};\n\nBillboard.prototype._getActualPosition = function () {\n  return defined(this._clampedPosition)\n    ? this._clampedPosition\n    : this._actualPosition;\n};\n\nBillboard.prototype._setActualPosition = function (value) {\n  if (!defined(this._clampedPosition)) {\n    Cartesian3.clone(value, this._actualPosition);\n  }\n  makeDirty(this, POSITION_INDEX);\n};\n\nvar tempCartesian3 = new Cartesian4();\nBillboard._computeActualPosition = function (\n  billboard,\n  position,\n  frameState,\n  modelMatrix\n) {\n  if (defined(billboard._clampedPosition)) {\n    if (frameState.mode !== billboard._mode) {\n      billboard._updateClamping();\n    }\n    return billboard._clampedPosition;\n  } else if (frameState.mode === SceneMode.SCENE3D) {\n    return position;\n  }\n\n  Matrix4.multiplyByPoint(modelMatrix, position, tempCartesian3);\n  return SceneTransforms.computeActualWgs84Position(frameState, tempCartesian3);\n};\n\nvar scratchCartesian3 = new Cartesian3();\n\n// This function is basically a stripped-down JavaScript version of BillboardCollectionVS.glsl\nBillboard._computeScreenSpacePosition = function (\n  modelMatrix,\n  position,\n  eyeOffset,\n  pixelOffset,\n  scene,\n  result\n) {\n  // Model to world coordinates\n  var positionWorld = Matrix4.multiplyByPoint(\n    modelMatrix,\n    position,\n    scratchCartesian3\n  );\n\n  // World to window coordinates\n  var positionWC = SceneTransforms.wgs84WithEyeOffsetToWindowCoordinates(\n    scene,\n    positionWorld,\n    eyeOffset,\n    result\n  );\n  if (!defined(positionWC)) {\n    return undefined;\n  }\n\n  // Apply pixel offset\n  Cartesian2.add(positionWC, pixelOffset, positionWC);\n\n  return positionWC;\n};\n\nvar scratchPixelOffset = new Cartesian2(0.0, 0.0);\n\n/**\n * Computes the screen-space position of the billboard's origin, taking into account eye and pixel offsets.\n * The screen space origin is the top, left corner of the canvas; <code>x</code> increases from\n * left to right, and <code>y</code> increases from top to bottom.\n *\n * @param {Scene} scene The scene.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The screen-space position of the billboard.\n *\n * @exception {DeveloperError} Billboard must be in a collection.\n *\n * @example\n * console.log(b.computeScreenSpacePosition(scene).toString());\n *\n * @see Billboard#eyeOffset\n * @see Billboard#pixelOffset\n */\nBillboard.prototype.computeScreenSpacePosition = function (scene, result) {\n  var billboardCollection = this._billboardCollection;\n  if (!defined(result)) {\n    result = new Cartesian2();\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(billboardCollection)) {\n    throw new DeveloperError(\n      \"Billboard must be in a collection.  Was it removed?\"\n    );\n  }\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  // pixel offset for screen space computation is the pixelOffset + screen space translate\n  Cartesian2.clone(this._pixelOffset, scratchPixelOffset);\n  Cartesian2.add(scratchPixelOffset, this._translate, scratchPixelOffset);\n\n  var modelMatrix = billboardCollection.modelMatrix;\n  var position = this._position;\n  if (defined(this._clampedPosition)) {\n    position = this._clampedPosition;\n    if (scene.mode !== SceneMode.SCENE3D) {\n      // position needs to be in world coordinates\n      var projection = scene.mapProjection;\n      var ellipsoid = projection.ellipsoid;\n      var cart = projection.unproject(position, scratchCartographic);\n      position = ellipsoid.cartographicToCartesian(cart, scratchCartesian3);\n      modelMatrix = Matrix4.IDENTITY;\n    }\n  }\n\n  var windowCoordinates = Billboard._computeScreenSpacePosition(\n    modelMatrix,\n    position,\n    this._eyeOffset,\n    scratchPixelOffset,\n    scene,\n    result\n  );\n  return windowCoordinates;\n};\n\n/**\n * Gets a billboard's screen space bounding box centered around screenSpacePosition.\n * @param {Billboard} billboard The billboard to get the screen space bounding box for.\n * @param {Cartesian2} screenSpacePosition The screen space center of the label.\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The screen space bounding box.\n *\n * @private\n */\nBillboard.getScreenSpaceBoundingBox = function (\n  billboard,\n  screenSpacePosition,\n  result\n) {\n  var width = billboard.width;\n  var height = billboard.height;\n\n  var scale = billboard.scale;\n  width *= scale;\n  height *= scale;\n\n  var x = screenSpacePosition.x;\n  if (billboard.horizontalOrigin === HorizontalOrigin.RIGHT) {\n    x -= width;\n  } else if (billboard.horizontalOrigin === HorizontalOrigin.CENTER) {\n    x -= width * 0.5;\n  }\n\n  var y = screenSpacePosition.y;\n  if (\n    billboard.verticalOrigin === VerticalOrigin.BOTTOM ||\n    billboard.verticalOrigin === VerticalOrigin.BASELINE\n  ) {\n    y -= height;\n  } else if (billboard.verticalOrigin === VerticalOrigin.CENTER) {\n    y -= height * 0.5;\n  }\n\n  if (!defined(result)) {\n    result = new BoundingRectangle();\n  }\n\n  result.x = x;\n  result.y = y;\n  result.width = width;\n  result.height = height;\n\n  return result;\n};\n\n/**\n * Determines if this billboard equals another billboard.  Billboards are equal if all their properties\n * are equal.  Billboards in different collections can be equal.\n *\n * @param {Billboard} other The billboard to compare for equality.\n * @returns {Boolean} <code>true</code> if the billboards are equal; otherwise, <code>false</code>.\n */\nBillboard.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (defined(other) &&\n      this._id === other._id &&\n      Cartesian3.equals(this._position, other._position) &&\n      this._imageId === other._imageId &&\n      this._show === other._show &&\n      this._scale === other._scale &&\n      this._verticalOrigin === other._verticalOrigin &&\n      this._horizontalOrigin === other._horizontalOrigin &&\n      this._heightReference === other._heightReference &&\n      BoundingRectangle.equals(this._imageSubRegion, other._imageSubRegion) &&\n      Color.equals(this._color, other._color) &&\n      Cartesian2.equals(this._pixelOffset, other._pixelOffset) &&\n      Cartesian2.equals(this._translate, other._translate) &&\n      Cartesian3.equals(this._eyeOffset, other._eyeOffset) &&\n      NearFarScalar.equals(this._scaleByDistance, other._scaleByDistance) &&\n      NearFarScalar.equals(\n        this._translucencyByDistance,\n        other._translucencyByDistance\n      ) &&\n      NearFarScalar.equals(\n        this._pixelOffsetScaleByDistance,\n        other._pixelOffsetScaleByDistance\n      ) &&\n      DistanceDisplayCondition.equals(\n        this._distanceDisplayCondition,\n        other._distanceDisplayCondition\n      ) &&\n      this._disableDepthTestDistance === other._disableDepthTestDistance)\n  );\n};\n\nBillboard.prototype._destroy = function () {\n  if (defined(this._customData)) {\n    this._billboardCollection._scene.globe._surface.removeTileCustomData(\n      this._customData\n    );\n    this._customData = undefined;\n  }\n\n  if (defined(this._removeCallbackFunc)) {\n    this._removeCallbackFunc();\n    this._removeCallbackFunc = undefined;\n  }\n\n  this.image = undefined;\n  this._pickId = this._pickId && this._pickId.destroy();\n  this._billboardCollection = undefined;\n};\n\n/**\n * A function that creates an image.\n * @callback Billboard~CreateImageCallback\n * @param {String} id The identifier of the image to load.\n * @returns {Image|Canvas|Promise<Image|Canvas>} The image, or a promise that will resolve to an image.\n */\nexport default Billboard;\n"]},"metadata":{},"sourceType":"module"}