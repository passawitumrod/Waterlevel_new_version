{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport getStringFromTypedArray from \"../Core/getStringFromTypedArray.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport when from \"../ThirdParty/when.js\";\n/**\n * Represents content for a tile in a\n * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification|3D Tiles} tileset whose\n * content points to another 3D Tiles tileset.\n * <p>\n * Implements the {@link Cesium3DTileContent} interface.\n * </p>\n *\n * @alias Tileset3DTileContent\n * @constructor\n *\n * @private\n */\n\nfunction Tileset3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset) {\n  this._tileset = tileset;\n  this._tile = tile;\n  this._resource = resource;\n  this._readyPromise = when.defer();\n  this.featurePropertiesDirty = false;\n  initialize(this, arrayBuffer, byteOffset);\n}\n\nObject.defineProperties(Tileset3DTileContent.prototype, {\n  featuresLength: {\n    get: function get() {\n      return 0;\n    }\n  },\n  pointsLength: {\n    get: function get() {\n      return 0;\n    }\n  },\n  trianglesLength: {\n    get: function get() {\n      return 0;\n    }\n  },\n  geometryByteLength: {\n    get: function get() {\n      return 0;\n    }\n  },\n  texturesByteLength: {\n    get: function get() {\n      return 0;\n    }\n  },\n  batchTableByteLength: {\n    get: function get() {\n      return 0;\n    }\n  },\n  innerContents: {\n    get: function get() {\n      return undefined;\n    }\n  },\n  readyPromise: {\n    get: function get() {\n      return this._readyPromise.promise;\n    }\n  },\n  tileset: {\n    get: function get() {\n      return this._tileset;\n    }\n  },\n  tile: {\n    get: function get() {\n      return this._tile;\n    }\n  },\n  url: {\n    get: function get() {\n      return this._resource.getUrlComponent(true);\n    }\n  },\n  batchTable: {\n    get: function get() {\n      return undefined;\n    }\n  }\n});\n\nfunction initialize(content, arrayBuffer, byteOffset) {\n  byteOffset = defaultValue(byteOffset, 0);\n  var uint8Array = new Uint8Array(arrayBuffer);\n  var jsonString = getStringFromTypedArray(uint8Array, byteOffset);\n  var tilesetJson;\n\n  try {\n    tilesetJson = JSON.parse(jsonString);\n  } catch (error) {\n    content._readyPromise.reject(new RuntimeError(\"Invalid tile content.\"));\n\n    return;\n  }\n\n  content._tileset.loadTileset(content._resource, tilesetJson, content._tile);\n\n  content._readyPromise.resolve(content);\n}\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Tileset3DTileContent</code>\n * always returns <code>false</code> since a tile of this type does not have any features.\n */\n\n\nTileset3DTileContent.prototype.hasProperty = function (batchId, name) {\n  return false;\n};\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Tileset3DTileContent</code>\n * always returns <code>undefined</code> since a tile of this type does not have any features.\n */\n\n\nTileset3DTileContent.prototype.getFeature = function (batchId) {\n  return undefined;\n};\n\nTileset3DTileContent.prototype.applyDebugSettings = function (enabled, color) {};\n\nTileset3DTileContent.prototype.applyStyle = function (style) {};\n\nTileset3DTileContent.prototype.update = function (tileset, frameState) {};\n\nTileset3DTileContent.prototype.isDestroyed = function () {\n  return false;\n};\n\nTileset3DTileContent.prototype.destroy = function () {\n  return destroyObject(this);\n};\n\nexport default Tileset3DTileContent;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/Tileset3DTileContent.js"],"names":["defaultValue","destroyObject","getStringFromTypedArray","RuntimeError","when","Tileset3DTileContent","tileset","tile","resource","arrayBuffer","byteOffset","_tileset","_tile","_resource","_readyPromise","defer","featurePropertiesDirty","initialize","Object","defineProperties","prototype","featuresLength","get","pointsLength","trianglesLength","geometryByteLength","texturesByteLength","batchTableByteLength","innerContents","undefined","readyPromise","promise","url","getUrlComponent","batchTable","content","uint8Array","Uint8Array","jsonString","tilesetJson","JSON","parse","error","reject","loadTileset","resolve","hasProperty","batchId","name","getFeature","applyDebugSettings","enabled","color","applyStyle","style","update","frameState","isDestroyed","destroy"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport getStringFromTypedArray from \"../Core/getStringFromTypedArray.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport when from \"../ThirdParty/when.js\";\n\n/**\n * Represents content for a tile in a\n * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification|3D Tiles} tileset whose\n * content points to another 3D Tiles tileset.\n * <p>\n * Implements the {@link Cesium3DTileContent} interface.\n * </p>\n *\n * @alias Tileset3DTileContent\n * @constructor\n *\n * @private\n */\nfunction Tileset3DTileContent(\n  tileset,\n  tile,\n  resource,\n  arrayBuffer,\n  byteOffset\n) {\n  this._tileset = tileset;\n  this._tile = tile;\n  this._resource = resource;\n  this._readyPromise = when.defer();\n\n  this.featurePropertiesDirty = false;\n\n  initialize(this, arrayBuffer, byteOffset);\n}\n\nObject.defineProperties(Tileset3DTileContent.prototype, {\n  featuresLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  pointsLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  trianglesLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  geometryByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  texturesByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  batchTableByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  innerContents: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    },\n  },\n\n  tileset: {\n    get: function () {\n      return this._tileset;\n    },\n  },\n\n  tile: {\n    get: function () {\n      return this._tile;\n    },\n  },\n\n  url: {\n    get: function () {\n      return this._resource.getUrlComponent(true);\n    },\n  },\n\n  batchTable: {\n    get: function () {\n      return undefined;\n    },\n  },\n});\n\nfunction initialize(content, arrayBuffer, byteOffset) {\n  byteOffset = defaultValue(byteOffset, 0);\n  var uint8Array = new Uint8Array(arrayBuffer);\n  var jsonString = getStringFromTypedArray(uint8Array, byteOffset);\n  var tilesetJson;\n\n  try {\n    tilesetJson = JSON.parse(jsonString);\n  } catch (error) {\n    content._readyPromise.reject(new RuntimeError(\"Invalid tile content.\"));\n    return;\n  }\n\n  content._tileset.loadTileset(content._resource, tilesetJson, content._tile);\n  content._readyPromise.resolve(content);\n}\n\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Tileset3DTileContent</code>\n * always returns <code>false</code> since a tile of this type does not have any features.\n */\nTileset3DTileContent.prototype.hasProperty = function (batchId, name) {\n  return false;\n};\n\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Tileset3DTileContent</code>\n * always returns <code>undefined</code> since a tile of this type does not have any features.\n */\nTileset3DTileContent.prototype.getFeature = function (batchId) {\n  return undefined;\n};\n\nTileset3DTileContent.prototype.applyDebugSettings = function (\n  enabled,\n  color\n) {};\n\nTileset3DTileContent.prototype.applyStyle = function (style) {};\n\nTileset3DTileContent.prototype.update = function (tileset, frameState) {};\n\nTileset3DTileContent.prototype.isDestroyed = function () {\n  return false;\n};\n\nTileset3DTileContent.prototype.destroy = function () {\n  return destroyObject(this);\n};\nexport default Tileset3DTileContent;\n"]},"metadata":{},"sourceType":"module"}