{"ast":null,"code":"import addBuffer from './addBuffer.js';\nimport ForEach from './ForEach.js';\nimport readAccessorPacked from './readAccessorPacked.js';\nimport ComponentDatatype from '../../Core/ComponentDatatype.js';\nimport WebGLConstants from '../../Core/WebGLConstants.js';\n/**\n * Update accessors referenced by JOINTS_0 and WEIGHTS_0 attributes to use correct component types.\n *\n * @param {Object} gltf A javascript object containing a glTF asset.\n * @returns {Object} The glTF asset with compressed meshes.\n *\n * @private\n */\n\nfunction updateAccessorComponentTypes(gltf) {\n  var componentType;\n  ForEach.accessorWithSemantic(gltf, 'JOINTS_0', function (accessorId) {\n    var accessor = gltf.accessors[accessorId];\n    componentType = accessor.componentType;\n\n    if (componentType === WebGLConstants.BYTE) {\n      convertType(gltf, accessor, ComponentDatatype.UNSIGNED_BYTE);\n    } else if (componentType !== WebGLConstants.UNSIGNED_BYTE && componentType !== WebGLConstants.UNSIGNED_SHORT) {\n      convertType(gltf, accessor, ComponentDatatype.UNSIGNED_SHORT);\n    }\n  });\n  ForEach.accessorWithSemantic(gltf, 'WEIGHTS_0', function (accessorId) {\n    var accessor = gltf.accessors[accessorId];\n    componentType = accessor.componentType;\n\n    if (componentType === WebGLConstants.BYTE) {\n      convertType(gltf, accessor, ComponentDatatype.UNSIGNED_BYTE);\n    } else if (componentType === WebGLConstants.SHORT) {\n      convertType(gltf, accessor, ComponentDatatype.UNSIGNED_SHORT);\n    }\n  });\n  return gltf;\n}\n\nfunction convertType(gltf, accessor, updatedComponentType) {\n  var typedArray = ComponentDatatype.createTypedArray(updatedComponentType, readAccessorPacked(gltf, accessor));\n  var newBuffer = new Uint8Array(typedArray.buffer);\n  accessor.bufferView = addBuffer(gltf, newBuffer);\n  accessor.componentType = updatedComponentType;\n  accessor.byteOffset = 0;\n}\n\nexport default updateAccessorComponentTypes;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/ThirdParty/GltfPipeline/updateAccessorComponentTypes.js"],"names":["addBuffer","ForEach","readAccessorPacked","ComponentDatatype","WebGLConstants","updateAccessorComponentTypes","gltf","componentType","accessorWithSemantic","accessorId","accessor","accessors","BYTE","convertType","UNSIGNED_BYTE","UNSIGNED_SHORT","SHORT","updatedComponentType","typedArray","createTypedArray","newBuffer","Uint8Array","buffer","bufferView","byteOffset"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AAEI;;;;;;;;;AAQA,SAASC,4BAAT,CAAsCC,IAAtC,EAA4C;AACxC,MAAIC,aAAJ;AACAN,EAAAA,OAAO,CAACO,oBAAR,CAA6BF,IAA7B,EAAmC,UAAnC,EAA+C,UAASG,UAAT,EAAqB;AAChE,QAAIC,QAAQ,GAAGJ,IAAI,CAACK,SAAL,CAAeF,UAAf,CAAf;AACAF,IAAAA,aAAa,GAAGG,QAAQ,CAACH,aAAzB;;AACA,QAAIA,aAAa,KAAKH,cAAc,CAACQ,IAArC,EAA2C;AACvCC,MAAAA,WAAW,CAACP,IAAD,EAAOI,QAAP,EAAiBP,iBAAiB,CAACW,aAAnC,CAAX;AACH,KAFD,MAEO,IAAIP,aAAa,KAAKH,cAAc,CAACU,aAAjC,IACAP,aAAa,KAAKH,cAAc,CAACW,cADrC,EACqD;AACxDF,MAAAA,WAAW,CAACP,IAAD,EAAOI,QAAP,EAAiBP,iBAAiB,CAACY,cAAnC,CAAX;AACH;AACJ,GATD;AAUAd,EAAAA,OAAO,CAACO,oBAAR,CAA6BF,IAA7B,EAAmC,WAAnC,EAAgD,UAASG,UAAT,EAAqB;AACjE,QAAIC,QAAQ,GAAGJ,IAAI,CAACK,SAAL,CAAeF,UAAf,CAAf;AACAF,IAAAA,aAAa,GAAGG,QAAQ,CAACH,aAAzB;;AACA,QAAIA,aAAa,KAAKH,cAAc,CAACQ,IAArC,EAA2C;AACvCC,MAAAA,WAAW,CAACP,IAAD,EAAOI,QAAP,EAAiBP,iBAAiB,CAACW,aAAnC,CAAX;AACH,KAFD,MAEO,IAAIP,aAAa,KAAKH,cAAc,CAACY,KAArC,EAA4C;AAC/CH,MAAAA,WAAW,CAACP,IAAD,EAAOI,QAAP,EAAiBP,iBAAiB,CAACY,cAAnC,CAAX;AACH;AACJ,GARD;AAUA,SAAOT,IAAP;AACH;;AAED,SAASO,WAAT,CAAqBP,IAArB,EAA2BI,QAA3B,EAAqCO,oBAArC,EAA2D;AACvD,MAAIC,UAAU,GAAGf,iBAAiB,CAACgB,gBAAlB,CAAmCF,oBAAnC,EAAyDf,kBAAkB,CAACI,IAAD,EAAOI,QAAP,CAA3E,CAAjB;AACA,MAAIU,SAAS,GAAG,IAAIC,UAAJ,CAAeH,UAAU,CAACI,MAA1B,CAAhB;AACAZ,EAAAA,QAAQ,CAACa,UAAT,GAAsBvB,SAAS,CAACM,IAAD,EAAOc,SAAP,CAA/B;AACAV,EAAAA,QAAQ,CAACH,aAAT,GAAyBU,oBAAzB;AACAP,EAAAA,QAAQ,CAACc,UAAT,GAAsB,CAAtB;AACH;;AAED,eAAenB,4BAAf","sourcesContent":["import addBuffer from './addBuffer.js'\nimport ForEach from './ForEach.js'\nimport readAccessorPacked from './readAccessorPacked.js'\nimport ComponentDatatype from '../../Core/ComponentDatatype.js'\nimport WebGLConstants from '../../Core/WebGLConstants.js'\n\n    /**\n     * Update accessors referenced by JOINTS_0 and WEIGHTS_0 attributes to use correct component types.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @returns {Object} The glTF asset with compressed meshes.\n     *\n     * @private\n     */\n    function updateAccessorComponentTypes(gltf) {\n        var componentType;\n        ForEach.accessorWithSemantic(gltf, 'JOINTS_0', function(accessorId) {\n            var accessor = gltf.accessors[accessorId];\n            componentType = accessor.componentType;\n            if (componentType === WebGLConstants.BYTE) {\n                convertType(gltf, accessor, ComponentDatatype.UNSIGNED_BYTE);\n            } else if (componentType !== WebGLConstants.UNSIGNED_BYTE\n                    && componentType !== WebGLConstants.UNSIGNED_SHORT) {\n                convertType(gltf, accessor, ComponentDatatype.UNSIGNED_SHORT);\n            }\n        });\n        ForEach.accessorWithSemantic(gltf, 'WEIGHTS_0', function(accessorId) {\n            var accessor = gltf.accessors[accessorId];\n            componentType = accessor.componentType;\n            if (componentType === WebGLConstants.BYTE) {\n                convertType(gltf, accessor, ComponentDatatype.UNSIGNED_BYTE);\n            } else if (componentType === WebGLConstants.SHORT) {\n                convertType(gltf, accessor, ComponentDatatype.UNSIGNED_SHORT);\n            }\n        });\n\n        return gltf;\n    }\n\n    function convertType(gltf, accessor, updatedComponentType) {\n        var typedArray = ComponentDatatype.createTypedArray(updatedComponentType, readAccessorPacked(gltf, accessor));\n        var newBuffer = new Uint8Array(typedArray.buffer);\n        accessor.bufferView = addBuffer(gltf, newBuffer);\n        accessor.componentType = updatedComponentType;\n        accessor.byteOffset = 0;\n    }\n\n    export default updateAccessorComponentTypes;\n"]},"metadata":{},"sourceType":"module"}