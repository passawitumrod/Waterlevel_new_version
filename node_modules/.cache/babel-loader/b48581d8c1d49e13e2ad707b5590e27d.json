{"ast":null,"code":"import clone from \"../Core/clone.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Resource from \"../Core/Resource.js\";\nimport when from \"../ThirdParty/when.js\";\nimport ConditionsExpression from \"./ConditionsExpression.js\";\nimport Expression from \"./Expression.js\";\n/**\n * A style that is applied to a {@link Cesium3DTileset}.\n * <p>\n * Evaluates an expression defined using the\n * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/Styling|3D Tiles Styling language}.\n * </p>\n *\n * @alias Cesium3DTileStyle\n * @constructor\n *\n * @param {Resource|String|Object} [style] The url of a style or an object defining a style.\n *\n * @example\n * tileset.style = new Cesium.Cesium3DTileStyle({\n *     color : {\n *         conditions : [\n *             ['${Height} >= 100', 'color(\"purple\", 0.5)'],\n *             ['${Height} >= 50', 'color(\"red\")'],\n *             ['true', 'color(\"blue\")']\n *         ]\n *     },\n *     show : '${Height} > 0',\n *     meta : {\n *         description : '\"Building id ${id} has height ${Height}.\"'\n *     }\n * });\n *\n * @example\n * tileset.style = new Cesium.Cesium3DTileStyle({\n *     color : 'vec4(${Temperature})',\n *     pointSize : '${Temperature} * 2.0'\n * });\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/Styling|3D Tiles Styling language}\n */\n\nfunction Cesium3DTileStyle(style) {\n  this._style = {};\n  this._ready = false;\n  this._show = undefined;\n  this._color = undefined;\n  this._pointSize = undefined;\n  this._pointOutlineColor = undefined;\n  this._pointOutlineWidth = undefined;\n  this._labelColor = undefined;\n  this._labelOutlineColor = undefined;\n  this._labelOutlineWidth = undefined;\n  this._font = undefined;\n  this._labelStyle = undefined;\n  this._labelText = undefined;\n  this._backgroundColor = undefined;\n  this._backgroundPadding = undefined;\n  this._backgroundEnabled = undefined;\n  this._scaleByDistance = undefined;\n  this._translucencyByDistance = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._heightOffset = undefined;\n  this._anchorLineEnabled = undefined;\n  this._anchorLineColor = undefined;\n  this._image = undefined;\n  this._disableDepthTestDistance = undefined;\n  this._horizontalOrigin = undefined;\n  this._verticalOrigin = undefined;\n  this._labelHorizontalOrigin = undefined;\n  this._labelVerticalOrigin = undefined;\n  this._meta = undefined;\n  this._colorShaderFunction = undefined;\n  this._showShaderFunction = undefined;\n  this._pointSizeShaderFunction = undefined;\n  this._colorShaderFunctionReady = false;\n  this._showShaderFunctionReady = false;\n  this._pointSizeShaderFunctionReady = false;\n  this._colorShaderTranslucent = false;\n  var promise;\n\n  if (typeof style === \"string\" || style instanceof Resource) {\n    var resource = Resource.createIfNeeded(style);\n    promise = resource.fetchJson(style);\n  } else {\n    promise = when.resolve(style);\n  }\n\n  var that = this;\n  this._readyPromise = promise.then(function (styleJson) {\n    setup(that, styleJson);\n    return that;\n  });\n}\n\nfunction setup(that, styleJson) {\n  styleJson = defaultValue(clone(styleJson, true), that._style);\n  that._style = styleJson;\n  that.show = styleJson.show;\n  that.color = styleJson.color;\n  that.pointSize = styleJson.pointSize;\n  that.pointOutlineColor = styleJson.pointOutlineColor;\n  that.pointOutlineWidth = styleJson.pointOutlineWidth;\n  that.labelColor = styleJson.labelColor;\n  that.labelOutlineColor = styleJson.labelOutlineColor;\n  that.labelOutlineWidth = styleJson.labelOutlineWidth;\n  that.labelStyle = styleJson.labelStyle;\n  that.font = styleJson.font;\n  that.labelText = styleJson.labelText;\n  that.backgroundColor = styleJson.backgroundColor;\n  that.backgroundPadding = styleJson.backgroundPadding;\n  that.backgroundEnabled = styleJson.backgroundEnabled;\n  that.scaleByDistance = styleJson.scaleByDistance;\n  that.translucencyByDistance = styleJson.translucencyByDistance;\n  that.distanceDisplayCondition = styleJson.distanceDisplayCondition;\n  that.heightOffset = styleJson.heightOffset;\n  that.anchorLineEnabled = styleJson.anchorLineEnabled;\n  that.anchorLineColor = styleJson.anchorLineColor;\n  that.image = styleJson.image;\n  that.disableDepthTestDistance = styleJson.disableDepthTestDistance;\n  that.horizontalOrigin = styleJson.horizontalOrigin;\n  that.verticalOrigin = styleJson.verticalOrigin;\n  that.labelHorizontalOrigin = styleJson.labelHorizontalOrigin;\n  that.labelVerticalOrigin = styleJson.labelVerticalOrigin;\n  var meta = {};\n\n  if (defined(styleJson.meta)) {\n    var defines = styleJson.defines;\n    var metaJson = defaultValue(styleJson.meta, defaultValue.EMPTY_OBJECT);\n\n    for (var property in metaJson) {\n      if (metaJson.hasOwnProperty(property)) {\n        meta[property] = new Expression(metaJson[property], defines);\n      }\n    }\n  }\n\n  that._meta = meta;\n  that._ready = true;\n}\n\nfunction getExpression(tileStyle, value) {\n  var defines = defaultValue(tileStyle._style, defaultValue.EMPTY_OBJECT).defines;\n\n  if (!defined(value)) {\n    return undefined;\n  } else if (typeof value === \"boolean\" || typeof value === \"number\") {\n    return new Expression(String(value));\n  } else if (typeof value === \"string\") {\n    return new Expression(value, defines);\n  } else if (defined(value.conditions)) {\n    return new ConditionsExpression(value, defines);\n  }\n\n  return value;\n}\n\nfunction getJsonFromExpression(expression) {\n  if (!defined(expression)) {\n    return undefined;\n  } else if (defined(expression.expression)) {\n    return expression.expression;\n  } else if (defined(expression.conditionsExpression)) {\n    return clone(expression.conditionsExpression, true);\n  }\n\n  return expression;\n}\n\nObject.defineProperties(Cesium3DTileStyle.prototype, {\n  /**\n   * Gets the object defining the style using the\n   * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/Styling|3D Tiles Styling language}.\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {Object}\n   * @readonly\n   *\n   * @default {}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\n   */\n  style: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._style;\n    }\n  },\n\n  /**\n   * When <code>true</code>, the style is ready and its expressions can be evaluated.  When\n   * a style is constructed with an object, as opposed to a url, this is <code>true</code> immediately.\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    }\n  },\n\n  /**\n   * Gets the promise that will be resolved when the the style is ready and its expressions can be evaluated.\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {Promise.<Cesium3DTileStyle>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>show</code> property. Alternatively a boolean, string, or object defining a show style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return or convert to a <code>Boolean</code>.\n   * </p>\n   * <p>\n   * This expression is applicable to all tile formats.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     show : '(regExp(\"^Chest\").test(${County})) && (${YearBuilt} >= 1970)'\n   * });\n   * style.show.evaluate(feature); // returns true or false depending on the feature's properties\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a custom function\n   * style.show = {\n   *     evaluate : function(feature) {\n   *         return true;\n   *     }\n   * };\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a boolean\n   * style.show = true;\n   * };\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a string\n   * style.show = '${Height} > 0';\n   * };\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a condition\n   * style.show = {\n   *     conditions: [\n   *         ['${height} > 2', 'false'],\n   *         ['true', 'true']\n   *     ];\n   * };\n   */\n  show: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._show;\n    },\n    set: function (value) {\n      this._show = getExpression(this, value);\n      this._style.show = getJsonFromExpression(this._show);\n      this._showShaderFunctionReady = false;\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>color</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is applicable to all tile formats.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     color : '(${Temperature} > 90) ? color(\"red\") : color(\"white\")'\n   * });\n   * style.color.evaluateColor(feature, result); // returns a Cesium.Color object\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override color expression with a custom function\n   * style.color = {\n   *     evaluateColor : function(feature, result) {\n   *         return Cesium.Color.clone(Cesium.Color.WHITE, result);\n   *     }\n   * };\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override color expression with a string\n   * style.color = 'color(\"blue\")';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override color expression with a condition\n   * style.color = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  color: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._color;\n    },\n    set: function (value) {\n      this._color = getExpression(this, value);\n      this._style.color = getJsonFromExpression(this._color);\n      this._colorShaderFunctionReady = false;\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>pointSize</code> property. Alternatively a string or object defining a point size style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile or a Point Cloud tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     pointSize : '(${Temperature} > 90) ? 2.0 : 1.0'\n   * });\n   * style.pointSize.evaluate(feature); // returns a Number\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a custom function\n   * style.pointSize = {\n   *     evaluate : function(feature) {\n   *         return 1.0;\n   *     }\n   * };\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a number\n   * style.pointSize = 1.0;\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a string\n   * style.pointSize = '${height} / 10';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a condition\n   * style.pointSize =  {\n   *     conditions : [\n   *         ['${height} > 2', '1.0'],\n   *         ['true', '2.0']\n   *     ]\n   * };\n   */\n  pointSize: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._pointSize;\n    },\n    set: function (value) {\n      this._pointSize = getExpression(this, value);\n      this._style.pointSize = getJsonFromExpression(this._pointSize);\n      this._pointSizeShaderFunctionReady = false;\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>pointOutlineColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineColor expression with a string\n   * style.pointOutlineColor = 'color(\"blue\")';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineColor expression with a condition\n   * style.pointOutlineColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  pointOutlineColor: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._pointOutlineColor;\n    },\n    set: function (value) {\n      this._pointOutlineColor = getExpression(this, value);\n      this._style.pointOutlineColor = getJsonFromExpression(this._pointOutlineColor);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>pointOutlineWidth</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineWidth expression with a string\n   * style.pointOutlineWidth = '5';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineWidth expression with a condition\n   * style.pointOutlineWidth = {\n   *     conditions : [\n   *         ['${height} > 2', '5'],\n   *         ['true', '0']\n   *     ]\n   * };\n   */\n  pointOutlineWidth: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._pointOutlineWidth;\n    },\n    set: function (value) {\n      this._pointOutlineWidth = getExpression(this, value);\n      this._style.pointOutlineWidth = getJsonFromExpression(this._pointOutlineWidth);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelColor expression with a string\n   * style.labelColor = 'color(\"blue\")';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelColor expression with a condition\n   * style.labelColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  labelColor: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._labelColor;\n    },\n    set: function (value) {\n      this._labelColor = getExpression(this, value);\n      this._style.labelColor = getJsonFromExpression(this._labelColor);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelOutlineColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineColor expression with a string\n   * style.labelOutlineColor = 'color(\"blue\")';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineColor expression with a condition\n   * style.labelOutlineColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  labelOutlineColor: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._labelOutlineColor;\n    },\n    set: function (value) {\n      this._labelOutlineColor = getExpression(this, value);\n      this._style.labelOutlineColor = getJsonFromExpression(this._labelOutlineColor);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelOutlineWidth</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineWidth expression with a string\n   * style.labelOutlineWidth = '5';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineWidth expression with a condition\n   * style.labelOutlineWidth = {\n   *     conditions : [\n   *         ['${height} > 2', '5'],\n   *         ['true', '0']\n   *     ]\n   * };\n   */\n  labelOutlineWidth: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._labelOutlineWidth;\n    },\n    set: function (value) {\n      this._labelOutlineWidth = getExpression(this, value);\n      this._style.labelOutlineWidth = getJsonFromExpression(this._labelOutlineWidth);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>font</code> property. Alternatively a string or object defining a string style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>String</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     font : '(${Temperature} > 90) ? \"30px Helvetica\" : \"24px Helvetica\"'\n   * });\n   * style.font.evaluate(feature); // returns a String\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override font expression with a custom function\n   * style.font = {\n   *     evaluate : function(feature) {\n   *         return '24px Helvetica';\n   *     }\n   * };\n   */\n  font: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._font;\n    },\n    set: function (value) {\n      this._font = getExpression(this, value);\n      this._style.font = getJsonFromExpression(this._font);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>label style</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>LabelStyle</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     labelStyle : '(${Temperature} > 90) ? ' + LabelStyle.FILL_AND_OUTLINE + ' : ' + LabelStyle.FILL\n   * });\n   * style.labelStyle.evaluate(feature); // returns a LabelStyle\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelStyle expression with a custom function\n   * style.labelStyle = {\n   *     evaluate : function(feature) {\n   *         return LabelStyle.FILL;\n   *     }\n   * };\n   */\n  labelStyle: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._labelStyle;\n    },\n    set: function (value) {\n      this._labelStyle = getExpression(this, value);\n      this._style.labelStyle = getJsonFromExpression(this._labelStyle);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelText</code> property. Alternatively a string or object defining a string style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>String</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     labelText : '(${Temperature} > 90) ? \">90\" : \"<=90\"'\n   * });\n   * style.labelText.evaluate(feature); // returns a String\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelText expression with a custom function\n   * style.labelText = {\n   *     evaluate : function(feature) {\n   *         return 'Example label text';\n   *     }\n   * };\n   */\n  labelText: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._labelText;\n    },\n    set: function (value) {\n      this._labelText = getExpression(this, value);\n      this._style.labelText = getJsonFromExpression(this._labelText);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>backgroundColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundColor expression with a string\n   * style.backgroundColor = 'color(\"blue\")';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundColor expression with a condition\n   * style.backgroundColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  backgroundColor: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._backgroundColor;\n    },\n    set: function (value) {\n      this._backgroundColor = getExpression(this, value);\n      this._style.backgroundColor = getJsonFromExpression(this._backgroundColor);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>backgroundPadding</code> property. Alternatively a string or object defining a vec2 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian2</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundPadding expression with a string\n   * style.backgroundPadding = 'vec2(5.0, 7.0)';\n   * style.backgroundPadding.evaluate(feature); // returns a Cartesian2\n   */\n  backgroundPadding: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._backgroundPadding;\n    },\n    set: function (value) {\n      this._backgroundPadding = getExpression(this, value);\n      this._style.backgroundPadding = getJsonFromExpression(this._backgroundPadding);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>backgroundEnabled</code> property. Alternatively a string or object defining a boolean style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Boolean</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundEnabled expression with a string\n   * style.backgroundEnabled = 'true';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundEnabled expression with a condition\n   * style.backgroundEnabled = {\n   *     conditions : [\n   *         ['${height} > 2', 'true'],\n   *         ['true', 'false']\n   *     ]\n   * };\n   */\n  backgroundEnabled: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._backgroundEnabled;\n    },\n    set: function (value) {\n      this._backgroundEnabled = getExpression(this, value);\n      this._style.backgroundEnabled = getJsonFromExpression(this._backgroundEnabled);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>scaleByDistance</code> property. Alternatively a string or object defining a vec4 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian4</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override scaleByDistance expression with a string\n   * style.scaleByDistance = 'vec4(1.5e2, 2.0, 1.5e7, 0.5)';\n   * style.scaleByDistance.evaluate(feature); // returns a Cartesian4\n   */\n  scaleByDistance: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._scaleByDistance;\n    },\n    set: function (value) {\n      this._scaleByDistance = getExpression(this, value);\n      this._style.scaleByDistance = getJsonFromExpression(this._scaleByDistance);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>translucencyByDistance</code> property. Alternatively a string or object defining a vec4 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian4</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override translucencyByDistance expression with a string\n   * style.translucencyByDistance = 'vec4(1.5e2, 1.0, 1.5e7, 0.2)';\n   * style.translucencyByDistance.evaluate(feature); // returns a Cartesian4\n   */\n  translucencyByDistance: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._translucencyByDistance;\n    },\n    set: function (value) {\n      this._translucencyByDistance = getExpression(this, value);\n      this._style.translucencyByDistance = getJsonFromExpression(this._translucencyByDistance);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>distanceDisplayCondition</code> property. Alternatively a string or object defining a vec2 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian2</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override distanceDisplayCondition expression with a string\n   * style.distanceDisplayCondition = 'vec2(0.0, 5.5e6)';\n   * style.distanceDisplayCondition.evaluate(feature); // returns a Cartesian2\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._distanceDisplayCondition;\n    },\n    set: function (value) {\n      this._distanceDisplayCondition = getExpression(this, value);\n      this._style.distanceDisplayCondition = getJsonFromExpression(this._distanceDisplayCondition);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>heightOffset</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override heightOffset expression with a string\n   * style.heightOffset = '2.0';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override heightOffset expression with a condition\n   * style.heightOffset = {\n   *     conditions : [\n   *         ['${height} > 2', '4.0'],\n   *         ['true', '2.0']\n   *     ]\n   * };\n   */\n  heightOffset: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._heightOffset;\n    },\n    set: function (value) {\n      this._heightOffset = getExpression(this, value);\n      this._style.heightOffset = getJsonFromExpression(this._heightOffset);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>anchorLineEnabled</code> property. Alternatively a string or object defining a boolean style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Boolean</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineEnabled expression with a string\n   * style.anchorLineEnabled = 'true';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineEnabled expression with a condition\n   * style.anchorLineEnabled = {\n   *     conditions : [\n   *         ['${height} > 2', 'true'],\n   *         ['true', 'false']\n   *     ]\n   * };\n   */\n  anchorLineEnabled: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._anchorLineEnabled;\n    },\n    set: function (value) {\n      this._anchorLineEnabled = getExpression(this, value);\n      this._style.anchorLineEnabled = getJsonFromExpression(this._anchorLineEnabled);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>anchorLineColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineColor expression with a string\n   * style.anchorLineColor = 'color(\"blue\")';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineColor expression with a condition\n   * style.anchorLineColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  anchorLineColor: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._anchorLineColor;\n    },\n    set: function (value) {\n      this._anchorLineColor = getExpression(this, value);\n      this._style.anchorLineColor = getJsonFromExpression(this._anchorLineColor);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>image</code> property. Alternatively a string or object defining a string style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>String</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     image : '(${Temperature} > 90) ? \"/url/to/image1\" : \"/url/to/image2\"'\n   * });\n   * style.image.evaluate(feature); // returns a String\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override image expression with a custom function\n   * style.image = {\n   *     evaluate : function(feature) {\n   *         return '/url/to/image';\n   *     }\n   * };\n   */\n  image: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._image;\n    },\n    set: function (value) {\n      this._image = getExpression(this, value);\n      this._style.image = getJsonFromExpression(this._image);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>disableDepthTestDistance</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override disableDepthTestDistance expression with a string\n   * style.disableDepthTestDistance = '1000.0';\n   * style.disableDepthTestDistance.evaluate(feature); // returns a Number\n   */\n  disableDepthTestDistance: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._disableDepthTestDistance;\n    },\n    set: function (value) {\n      this._disableDepthTestDistance = getExpression(this, value);\n      this._style.disableDepthTestDistance = getJsonFromExpression(this._disableDepthTestDistance);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>horizontalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>HorizontalOrigin</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     horizontalOrigin : HorizontalOrigin.LEFT\n   * });\n   * style.horizontalOrigin.evaluate(feature); // returns a HorizontalOrigin\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override horizontalOrigin expression with a custom function\n   * style.horizontalOrigin = {\n   *     evaluate : function(feature) {\n   *         return HorizontalOrigin.CENTER;\n   *     }\n   * };\n   */\n  horizontalOrigin: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._horizontalOrigin;\n    },\n    set: function (value) {\n      this._horizontalOrigin = getExpression(this, value);\n      this._style.horizontalOrigin = getJsonFromExpression(this._horizontalOrigin);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>verticalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>VerticalOrigin</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     verticalOrigin : VerticalOrigin.TOP\n   * });\n   * style.verticalOrigin.evaluate(feature); // returns a VerticalOrigin\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override verticalOrigin expression with a custom function\n   * style.verticalOrigin = {\n   *     evaluate : function(feature) {\n   *         return VerticalOrigin.CENTER;\n   *     }\n   * };\n   */\n  verticalOrigin: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._verticalOrigin;\n    },\n    set: function (value) {\n      this._verticalOrigin = getExpression(this, value);\n      this._style.verticalOrigin = getJsonFromExpression(this._verticalOrigin);\n    }\n  },\n\n  /**\n         Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelHorizontalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n         * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n         * <p>\n         * The expression must return a <code>HorizontalOrigin</code>.\n         * </p>\n         * <p>\n         * This expression is only applicable to point features in a Vector tile.\n         * </p>\n         *\n         * @memberof Cesium3DTileStyle.prototype\n         *\n         * @type {StyleExpression}\n         *\n         * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n         *\n         * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n         *\n         * @example\n         * var style = new Cesium3DTileStyle({\n         *     labelHorizontalOrigin : HorizontalOrigin.LEFT\n         * });\n         * style.labelHorizontalOrigin.evaluate(feature); // returns a HorizontalOrigin\n         *\n         * @example\n         * var style = new Cesium.Cesium3DTileStyle();\n         * // Override labelHorizontalOrigin expression with a custom function\n         * style.labelHorizontalOrigin = {\n         *     evaluate : function(feature) {\n         *         return HorizontalOrigin.CENTER;\n         *     }\n         * };\n         */\n  labelHorizontalOrigin: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._labelHorizontalOrigin;\n    },\n    set: function (value) {\n      this._labelHorizontalOrigin = getExpression(this, value);\n      this._style.labelHorizontalOrigin = getJsonFromExpression(this._labelHorizontalOrigin);\n    }\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelVerticalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>VerticalOrigin</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     labelVerticalOrigin : VerticalOrigin.TOP\n   * });\n   * style.labelVerticalOrigin.evaluate(feature); // returns a VerticalOrigin\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelVerticalOrigin expression with a custom function\n   * style.labelVerticalOrigin = {\n   *     evaluate : function(feature) {\n   *         return VerticalOrigin.CENTER;\n   *     }\n   * };\n   */\n  labelVerticalOrigin: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._labelVerticalOrigin;\n    },\n    set: function (value) {\n      this._labelVerticalOrigin = getExpression(this, value);\n      this._style.labelVerticalOrigin = getJsonFromExpression(this._labelVerticalOrigin);\n    }\n  },\n\n  /**\n   * Gets or sets the object containing application-specific expression that can be explicitly\n   * evaluated, e.g., for display in a UI.\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     meta : {\n   *         description : '\"Building id ${id} has height ${Height}.\"'\n   *     }\n   * });\n   * style.meta.description.evaluate(feature); // returns a String with the substituted variables\n   */\n  meta: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\");\n      } //>>includeEnd('debug');\n\n\n      return this._meta;\n    },\n    set: function (value) {\n      this._meta = value;\n    }\n  }\n});\n/**\n * Gets the color shader function for this style.\n *\n * @param {String} functionName Name to give to the generated function.\n * @param {String} attributePrefix Prefix that is added to any variable names to access vertex attributes.\n * @param {Object} shaderState Stores information about the generated shader function, including whether it is translucent.\n *\n * @returns {String} The shader function.\n *\n * @private\n */\n\nCesium3DTileStyle.prototype.getColorShaderFunction = function (functionName, attributePrefix, shaderState) {\n  if (this._colorShaderFunctionReady) {\n    shaderState.translucent = this._colorShaderTranslucent; // Return the cached result, may be undefined\n\n    return this._colorShaderFunction;\n  }\n\n  this._colorShaderFunctionReady = true;\n  this._colorShaderFunction = defined(this.color) ? this.color.getShaderFunction(functionName, attributePrefix, shaderState, \"vec4\") : undefined;\n  this._colorShaderTranslucent = shaderState.translucent;\n  return this._colorShaderFunction;\n};\n/**\n * Gets the show shader function for this style.\n *\n * @param {String} functionName Name to give to the generated function.\n * @param {String} attributePrefix Prefix that is added to any variable names to access vertex attributes.\n * @param {Object} shaderState Stores information about the generated shader function, including whether it is translucent.\n *\n * @returns {String} The shader function.\n *\n * @private\n */\n\n\nCesium3DTileStyle.prototype.getShowShaderFunction = function (functionName, attributePrefix, shaderState) {\n  if (this._showShaderFunctionReady) {\n    // Return the cached result, may be undefined\n    return this._showShaderFunction;\n  }\n\n  this._showShaderFunctionReady = true;\n  this._showShaderFunction = defined(this.show) ? this.show.getShaderFunction(functionName, attributePrefix, shaderState, \"bool\") : undefined;\n  return this._showShaderFunction;\n};\n/**\n * Gets the pointSize shader function for this style.\n *\n * @param {String} functionName Name to give to the generated function.\n * @param {String} attributePrefix Prefix that is added to any variable names to access vertex attributes.\n * @param {Object} shaderState Stores information about the generated shader function, including whether it is translucent.\n *\n * @returns {String} The shader function.\n *\n * @private\n */\n\n\nCesium3DTileStyle.prototype.getPointSizeShaderFunction = function (functionName, attributePrefix, shaderState) {\n  if (this._pointSizeShaderFunctionReady) {\n    // Return the cached result, may be undefined\n    return this._pointSizeShaderFunction;\n  }\n\n  this._pointSizeShaderFunctionReady = true;\n  this._pointSizeShaderFunction = defined(this.pointSize) ? this.pointSize.getShaderFunction(functionName, attributePrefix, shaderState, \"float\") : undefined;\n  return this._pointSizeShaderFunction;\n};\n\nexport default Cesium3DTileStyle;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/Cesium3DTileStyle.js"],"names":["clone","defaultValue","defined","DeveloperError","Resource","when","ConditionsExpression","Expression","Cesium3DTileStyle","style","_style","_ready","_show","undefined","_color","_pointSize","_pointOutlineColor","_pointOutlineWidth","_labelColor","_labelOutlineColor","_labelOutlineWidth","_font","_labelStyle","_labelText","_backgroundColor","_backgroundPadding","_backgroundEnabled","_scaleByDistance","_translucencyByDistance","_distanceDisplayCondition","_heightOffset","_anchorLineEnabled","_anchorLineColor","_image","_disableDepthTestDistance","_horizontalOrigin","_verticalOrigin","_labelHorizontalOrigin","_labelVerticalOrigin","_meta","_colorShaderFunction","_showShaderFunction","_pointSizeShaderFunction","_colorShaderFunctionReady","_showShaderFunctionReady","_pointSizeShaderFunctionReady","_colorShaderTranslucent","promise","resource","createIfNeeded","fetchJson","resolve","that","_readyPromise","then","styleJson","setup","show","color","pointSize","pointOutlineColor","pointOutlineWidth","labelColor","labelOutlineColor","labelOutlineWidth","labelStyle","font","labelText","backgroundColor","backgroundPadding","backgroundEnabled","scaleByDistance","translucencyByDistance","distanceDisplayCondition","heightOffset","anchorLineEnabled","anchorLineColor","image","disableDepthTestDistance","horizontalOrigin","verticalOrigin","labelHorizontalOrigin","labelVerticalOrigin","meta","defines","metaJson","EMPTY_OBJECT","property","hasOwnProperty","getExpression","tileStyle","value","String","conditions","getJsonFromExpression","expression","conditionsExpression","Object","defineProperties","prototype","get","ready","readyPromise","set","getColorShaderFunction","functionName","attributePrefix","shaderState","translucent","getShaderFunction","getShowShaderFunction","getPointSizeShaderFunction"],"mappings":"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","sourcesContent":["import clone from \"../Core/clone.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Resource from \"../Core/Resource.js\";\nimport when from \"../ThirdParty/when.js\";\nimport ConditionsExpression from \"./ConditionsExpression.js\";\nimport Expression from \"./Expression.js\";\n\n/**\n * A style that is applied to a {@link Cesium3DTileset}.\n * <p>\n * Evaluates an expression defined using the\n * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/Styling|3D Tiles Styling language}.\n * </p>\n *\n * @alias Cesium3DTileStyle\n * @constructor\n *\n * @param {Resource|String|Object} [style] The url of a style or an object defining a style.\n *\n * @example\n * tileset.style = new Cesium.Cesium3DTileStyle({\n *     color : {\n *         conditions : [\n *             ['${Height} >= 100', 'color(\"purple\", 0.5)'],\n *             ['${Height} >= 50', 'color(\"red\")'],\n *             ['true', 'color(\"blue\")']\n *         ]\n *     },\n *     show : '${Height} > 0',\n *     meta : {\n *         description : '\"Building id ${id} has height ${Height}.\"'\n *     }\n * });\n *\n * @example\n * tileset.style = new Cesium.Cesium3DTileStyle({\n *     color : 'vec4(${Temperature})',\n *     pointSize : '${Temperature} * 2.0'\n * });\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/Styling|3D Tiles Styling language}\n */\nfunction Cesium3DTileStyle(style) {\n  this._style = {};\n  this._ready = false;\n\n  this._show = undefined;\n  this._color = undefined;\n  this._pointSize = undefined;\n  this._pointOutlineColor = undefined;\n  this._pointOutlineWidth = undefined;\n  this._labelColor = undefined;\n  this._labelOutlineColor = undefined;\n  this._labelOutlineWidth = undefined;\n  this._font = undefined;\n  this._labelStyle = undefined;\n  this._labelText = undefined;\n  this._backgroundColor = undefined;\n  this._backgroundPadding = undefined;\n  this._backgroundEnabled = undefined;\n  this._scaleByDistance = undefined;\n  this._translucencyByDistance = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._heightOffset = undefined;\n  this._anchorLineEnabled = undefined;\n  this._anchorLineColor = undefined;\n  this._image = undefined;\n  this._disableDepthTestDistance = undefined;\n  this._horizontalOrigin = undefined;\n  this._verticalOrigin = undefined;\n  this._labelHorizontalOrigin = undefined;\n  this._labelVerticalOrigin = undefined;\n  this._meta = undefined;\n\n  this._colorShaderFunction = undefined;\n  this._showShaderFunction = undefined;\n  this._pointSizeShaderFunction = undefined;\n  this._colorShaderFunctionReady = false;\n  this._showShaderFunctionReady = false;\n  this._pointSizeShaderFunctionReady = false;\n\n  this._colorShaderTranslucent = false;\n\n  var promise;\n  if (typeof style === \"string\" || style instanceof Resource) {\n    var resource = Resource.createIfNeeded(style);\n    promise = resource.fetchJson(style);\n  } else {\n    promise = when.resolve(style);\n  }\n\n  var that = this;\n  this._readyPromise = promise.then(function (styleJson) {\n    setup(that, styleJson);\n    return that;\n  });\n}\n\nfunction setup(that, styleJson) {\n  styleJson = defaultValue(clone(styleJson, true), that._style);\n  that._style = styleJson;\n\n  that.show = styleJson.show;\n  that.color = styleJson.color;\n  that.pointSize = styleJson.pointSize;\n  that.pointOutlineColor = styleJson.pointOutlineColor;\n  that.pointOutlineWidth = styleJson.pointOutlineWidth;\n  that.labelColor = styleJson.labelColor;\n  that.labelOutlineColor = styleJson.labelOutlineColor;\n  that.labelOutlineWidth = styleJson.labelOutlineWidth;\n  that.labelStyle = styleJson.labelStyle;\n  that.font = styleJson.font;\n  that.labelText = styleJson.labelText;\n  that.backgroundColor = styleJson.backgroundColor;\n  that.backgroundPadding = styleJson.backgroundPadding;\n  that.backgroundEnabled = styleJson.backgroundEnabled;\n  that.scaleByDistance = styleJson.scaleByDistance;\n  that.translucencyByDistance = styleJson.translucencyByDistance;\n  that.distanceDisplayCondition = styleJson.distanceDisplayCondition;\n  that.heightOffset = styleJson.heightOffset;\n  that.anchorLineEnabled = styleJson.anchorLineEnabled;\n  that.anchorLineColor = styleJson.anchorLineColor;\n  that.image = styleJson.image;\n  that.disableDepthTestDistance = styleJson.disableDepthTestDistance;\n  that.horizontalOrigin = styleJson.horizontalOrigin;\n  that.verticalOrigin = styleJson.verticalOrigin;\n  that.labelHorizontalOrigin = styleJson.labelHorizontalOrigin;\n  that.labelVerticalOrigin = styleJson.labelVerticalOrigin;\n\n  var meta = {};\n  if (defined(styleJson.meta)) {\n    var defines = styleJson.defines;\n    var metaJson = defaultValue(styleJson.meta, defaultValue.EMPTY_OBJECT);\n    for (var property in metaJson) {\n      if (metaJson.hasOwnProperty(property)) {\n        meta[property] = new Expression(metaJson[property], defines);\n      }\n    }\n  }\n\n  that._meta = meta;\n\n  that._ready = true;\n}\n\nfunction getExpression(tileStyle, value) {\n  var defines = defaultValue(tileStyle._style, defaultValue.EMPTY_OBJECT)\n    .defines;\n\n  if (!defined(value)) {\n    return undefined;\n  } else if (typeof value === \"boolean\" || typeof value === \"number\") {\n    return new Expression(String(value));\n  } else if (typeof value === \"string\") {\n    return new Expression(value, defines);\n  } else if (defined(value.conditions)) {\n    return new ConditionsExpression(value, defines);\n  }\n  return value;\n}\n\nfunction getJsonFromExpression(expression) {\n  if (!defined(expression)) {\n    return undefined;\n  } else if (defined(expression.expression)) {\n    return expression.expression;\n  } else if (defined(expression.conditionsExpression)) {\n    return clone(expression.conditionsExpression, true);\n  }\n  return expression;\n}\n\nObject.defineProperties(Cesium3DTileStyle.prototype, {\n  /**\n   * Gets the object defining the style using the\n   * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/Styling|3D Tiles Styling language}.\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {Object}\n   * @readonly\n   *\n   * @default {}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\n   */\n  style: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._style;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the style is ready and its expressions can be evaluated.  When\n   * a style is constructed with an object, as opposed to a url, this is <code>true</code> immediately.\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * Gets the promise that will be resolved when the the style is ready and its expressions can be evaluated.\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {Promise.<Cesium3DTileStyle>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>show</code> property. Alternatively a boolean, string, or object defining a show style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return or convert to a <code>Boolean</code>.\n   * </p>\n   * <p>\n   * This expression is applicable to all tile formats.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     show : '(regExp(\"^Chest\").test(${County})) && (${YearBuilt} >= 1970)'\n   * });\n   * style.show.evaluate(feature); // returns true or false depending on the feature's properties\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a custom function\n   * style.show = {\n   *     evaluate : function(feature) {\n   *         return true;\n   *     }\n   * };\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a boolean\n   * style.show = true;\n   * };\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a string\n   * style.show = '${Height} > 0';\n   * };\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a condition\n   * style.show = {\n   *     conditions: [\n   *         ['${height} > 2', 'false'],\n   *         ['true', 'true']\n   *     ];\n   * };\n   */\n  show: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._show;\n    },\n    set: function (value) {\n      this._show = getExpression(this, value);\n      this._style.show = getJsonFromExpression(this._show);\n      this._showShaderFunctionReady = false;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>color</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is applicable to all tile formats.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     color : '(${Temperature} > 90) ? color(\"red\") : color(\"white\")'\n   * });\n   * style.color.evaluateColor(feature, result); // returns a Cesium.Color object\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override color expression with a custom function\n   * style.color = {\n   *     evaluateColor : function(feature, result) {\n   *         return Cesium.Color.clone(Cesium.Color.WHITE, result);\n   *     }\n   * };\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override color expression with a string\n   * style.color = 'color(\"blue\")';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override color expression with a condition\n   * style.color = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  color: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._color;\n    },\n    set: function (value) {\n      this._color = getExpression(this, value);\n      this._style.color = getJsonFromExpression(this._color);\n      this._colorShaderFunctionReady = false;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>pointSize</code> property. Alternatively a string or object defining a point size style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile or a Point Cloud tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     pointSize : '(${Temperature} > 90) ? 2.0 : 1.0'\n   * });\n   * style.pointSize.evaluate(feature); // returns a Number\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a custom function\n   * style.pointSize = {\n   *     evaluate : function(feature) {\n   *         return 1.0;\n   *     }\n   * };\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a number\n   * style.pointSize = 1.0;\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a string\n   * style.pointSize = '${height} / 10';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a condition\n   * style.pointSize =  {\n   *     conditions : [\n   *         ['${height} > 2', '1.0'],\n   *         ['true', '2.0']\n   *     ]\n   * };\n   */\n  pointSize: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._pointSize;\n    },\n    set: function (value) {\n      this._pointSize = getExpression(this, value);\n      this._style.pointSize = getJsonFromExpression(this._pointSize);\n      this._pointSizeShaderFunctionReady = false;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>pointOutlineColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineColor expression with a string\n   * style.pointOutlineColor = 'color(\"blue\")';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineColor expression with a condition\n   * style.pointOutlineColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  pointOutlineColor: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._pointOutlineColor;\n    },\n    set: function (value) {\n      this._pointOutlineColor = getExpression(this, value);\n      this._style.pointOutlineColor = getJsonFromExpression(\n        this._pointOutlineColor\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>pointOutlineWidth</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineWidth expression with a string\n   * style.pointOutlineWidth = '5';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineWidth expression with a condition\n   * style.pointOutlineWidth = {\n   *     conditions : [\n   *         ['${height} > 2', '5'],\n   *         ['true', '0']\n   *     ]\n   * };\n   */\n  pointOutlineWidth: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._pointOutlineWidth;\n    },\n    set: function (value) {\n      this._pointOutlineWidth = getExpression(this, value);\n      this._style.pointOutlineWidth = getJsonFromExpression(\n        this._pointOutlineWidth\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelColor expression with a string\n   * style.labelColor = 'color(\"blue\")';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelColor expression with a condition\n   * style.labelColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  labelColor: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._labelColor;\n    },\n    set: function (value) {\n      this._labelColor = getExpression(this, value);\n      this._style.labelColor = getJsonFromExpression(this._labelColor);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelOutlineColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineColor expression with a string\n   * style.labelOutlineColor = 'color(\"blue\")';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineColor expression with a condition\n   * style.labelOutlineColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  labelOutlineColor: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._labelOutlineColor;\n    },\n    set: function (value) {\n      this._labelOutlineColor = getExpression(this, value);\n      this._style.labelOutlineColor = getJsonFromExpression(\n        this._labelOutlineColor\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelOutlineWidth</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineWidth expression with a string\n   * style.labelOutlineWidth = '5';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineWidth expression with a condition\n   * style.labelOutlineWidth = {\n   *     conditions : [\n   *         ['${height} > 2', '5'],\n   *         ['true', '0']\n   *     ]\n   * };\n   */\n  labelOutlineWidth: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._labelOutlineWidth;\n    },\n    set: function (value) {\n      this._labelOutlineWidth = getExpression(this, value);\n      this._style.labelOutlineWidth = getJsonFromExpression(\n        this._labelOutlineWidth\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>font</code> property. Alternatively a string or object defining a string style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>String</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     font : '(${Temperature} > 90) ? \"30px Helvetica\" : \"24px Helvetica\"'\n   * });\n   * style.font.evaluate(feature); // returns a String\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override font expression with a custom function\n   * style.font = {\n   *     evaluate : function(feature) {\n   *         return '24px Helvetica';\n   *     }\n   * };\n   */\n  font: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._font;\n    },\n    set: function (value) {\n      this._font = getExpression(this, value);\n      this._style.font = getJsonFromExpression(this._font);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>label style</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>LabelStyle</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     labelStyle : '(${Temperature} > 90) ? ' + LabelStyle.FILL_AND_OUTLINE + ' : ' + LabelStyle.FILL\n   * });\n   * style.labelStyle.evaluate(feature); // returns a LabelStyle\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelStyle expression with a custom function\n   * style.labelStyle = {\n   *     evaluate : function(feature) {\n   *         return LabelStyle.FILL;\n   *     }\n   * };\n   */\n  labelStyle: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._labelStyle;\n    },\n    set: function (value) {\n      this._labelStyle = getExpression(this, value);\n      this._style.labelStyle = getJsonFromExpression(this._labelStyle);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelText</code> property. Alternatively a string or object defining a string style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>String</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     labelText : '(${Temperature} > 90) ? \">90\" : \"<=90\"'\n   * });\n   * style.labelText.evaluate(feature); // returns a String\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelText expression with a custom function\n   * style.labelText = {\n   *     evaluate : function(feature) {\n   *         return 'Example label text';\n   *     }\n   * };\n   */\n  labelText: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._labelText;\n    },\n    set: function (value) {\n      this._labelText = getExpression(this, value);\n      this._style.labelText = getJsonFromExpression(this._labelText);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>backgroundColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundColor expression with a string\n   * style.backgroundColor = 'color(\"blue\")';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundColor expression with a condition\n   * style.backgroundColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  backgroundColor: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._backgroundColor;\n    },\n    set: function (value) {\n      this._backgroundColor = getExpression(this, value);\n      this._style.backgroundColor = getJsonFromExpression(\n        this._backgroundColor\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>backgroundPadding</code> property. Alternatively a string or object defining a vec2 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian2</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundPadding expression with a string\n   * style.backgroundPadding = 'vec2(5.0, 7.0)';\n   * style.backgroundPadding.evaluate(feature); // returns a Cartesian2\n   */\n  backgroundPadding: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._backgroundPadding;\n    },\n    set: function (value) {\n      this._backgroundPadding = getExpression(this, value);\n      this._style.backgroundPadding = getJsonFromExpression(\n        this._backgroundPadding\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>backgroundEnabled</code> property. Alternatively a string or object defining a boolean style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Boolean</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundEnabled expression with a string\n   * style.backgroundEnabled = 'true';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundEnabled expression with a condition\n   * style.backgroundEnabled = {\n   *     conditions : [\n   *         ['${height} > 2', 'true'],\n   *         ['true', 'false']\n   *     ]\n   * };\n   */\n  backgroundEnabled: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._backgroundEnabled;\n    },\n    set: function (value) {\n      this._backgroundEnabled = getExpression(this, value);\n      this._style.backgroundEnabled = getJsonFromExpression(\n        this._backgroundEnabled\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>scaleByDistance</code> property. Alternatively a string or object defining a vec4 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian4</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override scaleByDistance expression with a string\n   * style.scaleByDistance = 'vec4(1.5e2, 2.0, 1.5e7, 0.5)';\n   * style.scaleByDistance.evaluate(feature); // returns a Cartesian4\n   */\n  scaleByDistance: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._scaleByDistance;\n    },\n    set: function (value) {\n      this._scaleByDistance = getExpression(this, value);\n      this._style.scaleByDistance = getJsonFromExpression(\n        this._scaleByDistance\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>translucencyByDistance</code> property. Alternatively a string or object defining a vec4 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian4</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override translucencyByDistance expression with a string\n   * style.translucencyByDistance = 'vec4(1.5e2, 1.0, 1.5e7, 0.2)';\n   * style.translucencyByDistance.evaluate(feature); // returns a Cartesian4\n   */\n  translucencyByDistance: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._translucencyByDistance;\n    },\n    set: function (value) {\n      this._translucencyByDistance = getExpression(this, value);\n      this._style.translucencyByDistance = getJsonFromExpression(\n        this._translucencyByDistance\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>distanceDisplayCondition</code> property. Alternatively a string or object defining a vec2 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian2</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override distanceDisplayCondition expression with a string\n   * style.distanceDisplayCondition = 'vec2(0.0, 5.5e6)';\n   * style.distanceDisplayCondition.evaluate(feature); // returns a Cartesian2\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._distanceDisplayCondition;\n    },\n    set: function (value) {\n      this._distanceDisplayCondition = getExpression(this, value);\n      this._style.distanceDisplayCondition = getJsonFromExpression(\n        this._distanceDisplayCondition\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>heightOffset</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override heightOffset expression with a string\n   * style.heightOffset = '2.0';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override heightOffset expression with a condition\n   * style.heightOffset = {\n   *     conditions : [\n   *         ['${height} > 2', '4.0'],\n   *         ['true', '2.0']\n   *     ]\n   * };\n   */\n  heightOffset: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._heightOffset;\n    },\n    set: function (value) {\n      this._heightOffset = getExpression(this, value);\n      this._style.heightOffset = getJsonFromExpression(this._heightOffset);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>anchorLineEnabled</code> property. Alternatively a string or object defining a boolean style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Boolean</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineEnabled expression with a string\n   * style.anchorLineEnabled = 'true';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineEnabled expression with a condition\n   * style.anchorLineEnabled = {\n   *     conditions : [\n   *         ['${height} > 2', 'true'],\n   *         ['true', 'false']\n   *     ]\n   * };\n   */\n  anchorLineEnabled: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._anchorLineEnabled;\n    },\n    set: function (value) {\n      this._anchorLineEnabled = getExpression(this, value);\n      this._style.anchorLineEnabled = getJsonFromExpression(\n        this._anchorLineEnabled\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>anchorLineColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineColor expression with a string\n   * style.anchorLineColor = 'color(\"blue\")';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineColor expression with a condition\n   * style.anchorLineColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  anchorLineColor: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._anchorLineColor;\n    },\n    set: function (value) {\n      this._anchorLineColor = getExpression(this, value);\n      this._style.anchorLineColor = getJsonFromExpression(\n        this._anchorLineColor\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>image</code> property. Alternatively a string or object defining a string style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>String</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     image : '(${Temperature} > 90) ? \"/url/to/image1\" : \"/url/to/image2\"'\n   * });\n   * style.image.evaluate(feature); // returns a String\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override image expression with a custom function\n   * style.image = {\n   *     evaluate : function(feature) {\n   *         return '/url/to/image';\n   *     }\n   * };\n   */\n  image: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._image;\n    },\n    set: function (value) {\n      this._image = getExpression(this, value);\n      this._style.image = getJsonFromExpression(this._image);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>disableDepthTestDistance</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override disableDepthTestDistance expression with a string\n   * style.disableDepthTestDistance = '1000.0';\n   * style.disableDepthTestDistance.evaluate(feature); // returns a Number\n   */\n  disableDepthTestDistance: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._disableDepthTestDistance;\n    },\n    set: function (value) {\n      this._disableDepthTestDistance = getExpression(this, value);\n      this._style.disableDepthTestDistance = getJsonFromExpression(\n        this._disableDepthTestDistance\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>horizontalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>HorizontalOrigin</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     horizontalOrigin : HorizontalOrigin.LEFT\n   * });\n   * style.horizontalOrigin.evaluate(feature); // returns a HorizontalOrigin\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override horizontalOrigin expression with a custom function\n   * style.horizontalOrigin = {\n   *     evaluate : function(feature) {\n   *         return HorizontalOrigin.CENTER;\n   *     }\n   * };\n   */\n  horizontalOrigin: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._horizontalOrigin;\n    },\n    set: function (value) {\n      this._horizontalOrigin = getExpression(this, value);\n      this._style.horizontalOrigin = getJsonFromExpression(\n        this._horizontalOrigin\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>verticalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>VerticalOrigin</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     verticalOrigin : VerticalOrigin.TOP\n   * });\n   * style.verticalOrigin.evaluate(feature); // returns a VerticalOrigin\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override verticalOrigin expression with a custom function\n   * style.verticalOrigin = {\n   *     evaluate : function(feature) {\n   *         return VerticalOrigin.CENTER;\n   *     }\n   * };\n   */\n  verticalOrigin: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._verticalOrigin;\n    },\n    set: function (value) {\n      this._verticalOrigin = getExpression(this, value);\n      this._style.verticalOrigin = getJsonFromExpression(this._verticalOrigin);\n    },\n  },\n\n  /**\n         Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelHorizontalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n         * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n         * <p>\n         * The expression must return a <code>HorizontalOrigin</code>.\n         * </p>\n         * <p>\n         * This expression is only applicable to point features in a Vector tile.\n         * </p>\n         *\n         * @memberof Cesium3DTileStyle.prototype\n         *\n         * @type {StyleExpression}\n         *\n         * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n         *\n         * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n         *\n         * @example\n         * var style = new Cesium3DTileStyle({\n         *     labelHorizontalOrigin : HorizontalOrigin.LEFT\n         * });\n         * style.labelHorizontalOrigin.evaluate(feature); // returns a HorizontalOrigin\n         *\n         * @example\n         * var style = new Cesium.Cesium3DTileStyle();\n         * // Override labelHorizontalOrigin expression with a custom function\n         * style.labelHorizontalOrigin = {\n         *     evaluate : function(feature) {\n         *         return HorizontalOrigin.CENTER;\n         *     }\n         * };\n         */\n  labelHorizontalOrigin: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._labelHorizontalOrigin;\n    },\n    set: function (value) {\n      this._labelHorizontalOrigin = getExpression(this, value);\n      this._style.labelHorizontalOrigin = getJsonFromExpression(\n        this._labelHorizontalOrigin\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelVerticalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>VerticalOrigin</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     labelVerticalOrigin : VerticalOrigin.TOP\n   * });\n   * style.labelVerticalOrigin.evaluate(feature); // returns a VerticalOrigin\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelVerticalOrigin expression with a custom function\n   * style.labelVerticalOrigin = {\n   *     evaluate : function(feature) {\n   *         return VerticalOrigin.CENTER;\n   *     }\n   * };\n   */\n  labelVerticalOrigin: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._labelVerticalOrigin;\n    },\n    set: function (value) {\n      this._labelVerticalOrigin = getExpression(this, value);\n      this._style.labelVerticalOrigin = getJsonFromExpression(\n        this._labelVerticalOrigin\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the object containing application-specific expression that can be explicitly\n   * evaluated, e.g., for display in a UI.\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     meta : {\n   *         description : '\"Building id ${id} has height ${Height}.\"'\n   *     }\n   * });\n   * style.meta.description.evaluate(feature); // returns a String with the substituted variables\n   */\n  meta: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._meta;\n    },\n    set: function (value) {\n      this._meta = value;\n    },\n  },\n});\n\n/**\n * Gets the color shader function for this style.\n *\n * @param {String} functionName Name to give to the generated function.\n * @param {String} attributePrefix Prefix that is added to any variable names to access vertex attributes.\n * @param {Object} shaderState Stores information about the generated shader function, including whether it is translucent.\n *\n * @returns {String} The shader function.\n *\n * @private\n */\nCesium3DTileStyle.prototype.getColorShaderFunction = function (\n  functionName,\n  attributePrefix,\n  shaderState\n) {\n  if (this._colorShaderFunctionReady) {\n    shaderState.translucent = this._colorShaderTranslucent;\n    // Return the cached result, may be undefined\n    return this._colorShaderFunction;\n  }\n\n  this._colorShaderFunctionReady = true;\n  this._colorShaderFunction = defined(this.color)\n    ? this.color.getShaderFunction(\n        functionName,\n        attributePrefix,\n        shaderState,\n        \"vec4\"\n      )\n    : undefined;\n  this._colorShaderTranslucent = shaderState.translucent;\n  return this._colorShaderFunction;\n};\n\n/**\n * Gets the show shader function for this style.\n *\n * @param {String} functionName Name to give to the generated function.\n * @param {String} attributePrefix Prefix that is added to any variable names to access vertex attributes.\n * @param {Object} shaderState Stores information about the generated shader function, including whether it is translucent.\n *\n * @returns {String} The shader function.\n *\n * @private\n */\nCesium3DTileStyle.prototype.getShowShaderFunction = function (\n  functionName,\n  attributePrefix,\n  shaderState\n) {\n  if (this._showShaderFunctionReady) {\n    // Return the cached result, may be undefined\n    return this._showShaderFunction;\n  }\n\n  this._showShaderFunctionReady = true;\n  this._showShaderFunction = defined(this.show)\n    ? this.show.getShaderFunction(\n        functionName,\n        attributePrefix,\n        shaderState,\n        \"bool\"\n      )\n    : undefined;\n  return this._showShaderFunction;\n};\n\n/**\n * Gets the pointSize shader function for this style.\n *\n * @param {String} functionName Name to give to the generated function.\n * @param {String} attributePrefix Prefix that is added to any variable names to access vertex attributes.\n * @param {Object} shaderState Stores information about the generated shader function, including whether it is translucent.\n *\n * @returns {String} The shader function.\n *\n * @private\n */\nCesium3DTileStyle.prototype.getPointSizeShaderFunction = function (\n  functionName,\n  attributePrefix,\n  shaderState\n) {\n  if (this._pointSizeShaderFunctionReady) {\n    // Return the cached result, may be undefined\n    return this._pointSizeShaderFunction;\n  }\n\n  this._pointSizeShaderFunctionReady = true;\n  this._pointSizeShaderFunction = defined(this.pointSize)\n    ? this.pointSize.getShaderFunction(\n        functionName,\n        attributePrefix,\n        shaderState,\n        \"float\"\n      )\n    : undefined;\n  return this._pointSizeShaderFunction;\n};\nexport default Cesium3DTileStyle;\n"]},"metadata":{},"sourceType":"module"}