{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport getStringFromTypedArray from \"../Core/getStringFromTypedArray.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport when from \"../ThirdParty/when.js\";\nimport Cesium3DTileBatchTable from \"./Cesium3DTileBatchTable.js\";\nimport Vector3DTileGeometry from \"./Vector3DTileGeometry.js\";\n/**\n * <p>\n * Implements the {@link Cesium3DTileContent} interface.\n * </p>\n *\n * @alias Geometry3DTileContent\n * @constructor\n *\n * @private\n */\n\nfunction Geometry3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset) {\n  this._tileset = tileset;\n  this._tile = tile;\n  this._resource = resource;\n  this._geometries = undefined;\n  this._contentReadyPromise = undefined;\n  this._readyPromise = when.defer();\n  this._batchTable = undefined;\n  this._features = undefined;\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.\n   */\n\n  this.featurePropertiesDirty = false;\n  initialize(this, arrayBuffer, byteOffset);\n}\n\nObject.defineProperties(Geometry3DTileContent.prototype, {\n  featuresLength: {\n    get: function get() {\n      return defined(this._batchTable) ? this._batchTable.featuresLength : 0;\n    }\n  },\n  pointsLength: {\n    get: function get() {\n      return 0;\n    }\n  },\n  trianglesLength: {\n    get: function get() {\n      if (defined(this._geometries)) {\n        return this._geometries.trianglesLength;\n      }\n\n      return 0;\n    }\n  },\n  geometryByteLength: {\n    get: function get() {\n      if (defined(this._geometries)) {\n        return this._geometries.geometryByteLength;\n      }\n\n      return 0;\n    }\n  },\n  texturesByteLength: {\n    get: function get() {\n      return 0;\n    }\n  },\n  batchTableByteLength: {\n    get: function get() {\n      return defined(this._batchTable) ? this._batchTable.memorySizeInBytes : 0;\n    }\n  },\n  innerContents: {\n    get: function get() {\n      return undefined;\n    }\n  },\n  readyPromise: {\n    get: function get() {\n      return this._readyPromise.promise;\n    }\n  },\n  tileset: {\n    get: function get() {\n      return this._tileset;\n    }\n  },\n  tile: {\n    get: function get() {\n      return this._tile;\n    }\n  },\n  url: {\n    get: function get() {\n      return this._resource.getUrlComponent(true);\n    }\n  },\n  batchTable: {\n    get: function get() {\n      return this._batchTable;\n    }\n  }\n});\n\nfunction createColorChangedCallback(content) {\n  return function (batchId, color) {\n    if (defined(content._geometries)) {\n      content._geometries.updateCommands(batchId, color);\n    }\n  };\n}\n\nfunction getBatchIds(featureTableJson, featureTableBinary) {\n  var boxBatchIds;\n  var cylinderBatchIds;\n  var ellipsoidBatchIds;\n  var sphereBatchIds;\n  var i;\n  var numberOfBoxes = defaultValue(featureTableJson.BOXES_LENGTH, 0);\n  var numberOfCylinders = defaultValue(featureTableJson.CYLINDERS_LENGTH, 0);\n  var numberOfEllipsoids = defaultValue(featureTableJson.ELLIPSOIDS_LENGTH, 0);\n  var numberOfSpheres = defaultValue(featureTableJson.SPHERES_LENGTH, 0);\n\n  if (numberOfBoxes > 0 && defined(featureTableJson.BOX_BATCH_IDS)) {\n    var boxBatchIdsByteOffset = featureTableBinary.byteOffset + featureTableJson.BOX_BATCH_IDS.byteOffset;\n    boxBatchIds = new Uint16Array(featureTableBinary.buffer, boxBatchIdsByteOffset, numberOfBoxes);\n  }\n\n  if (numberOfCylinders > 0 && defined(featureTableJson.CYLINDER_BATCH_IDS)) {\n    var cylinderBatchIdsByteOffset = featureTableBinary.byteOffset + featureTableJson.CYLINDER_BATCH_IDS.byteOffset;\n    cylinderBatchIds = new Uint16Array(featureTableBinary.buffer, cylinderBatchIdsByteOffset, numberOfCylinders);\n  }\n\n  if (numberOfEllipsoids > 0 && defined(featureTableJson.ELLIPSOID_BATCH_IDS)) {\n    var ellipsoidBatchIdsByteOffset = featureTableBinary.byteOffset + featureTableJson.ELLIPSOID_BATCH_IDS.byteOffset;\n    ellipsoidBatchIds = new Uint16Array(featureTableBinary.buffer, ellipsoidBatchIdsByteOffset, numberOfEllipsoids);\n  }\n\n  if (numberOfSpheres > 0 && defined(featureTableJson.SPHERE_BATCH_IDS)) {\n    var sphereBatchIdsByteOffset = featureTableBinary.byteOffset + featureTableJson.SPHERE_BATCH_IDS.byteOffset;\n    sphereBatchIds = new Uint16Array(featureTableBinary.buffer, sphereBatchIdsByteOffset, numberOfSpheres);\n  }\n\n  var atLeastOneDefined = defined(boxBatchIds) || defined(cylinderBatchIds) || defined(ellipsoidBatchIds) || defined(sphereBatchIds);\n  var atLeastOneUndefined = numberOfBoxes > 0 && !defined(boxBatchIds) || numberOfCylinders > 0 && !defined(cylinderBatchIds) || numberOfEllipsoids > 0 && !defined(ellipsoidBatchIds) || numberOfSpheres > 0 && !defined(sphereBatchIds);\n\n  if (atLeastOneDefined && atLeastOneUndefined) {\n    throw new RuntimeError(\"If one group of batch ids is defined, then all batch ids must be defined.\");\n  }\n\n  var allUndefinedBatchIds = !defined(boxBatchIds) && !defined(cylinderBatchIds) && !defined(ellipsoidBatchIds) && !defined(sphereBatchIds);\n\n  if (allUndefinedBatchIds) {\n    var id = 0;\n\n    if (!defined(boxBatchIds) && numberOfBoxes > 0) {\n      boxBatchIds = new Uint16Array(numberOfBoxes);\n\n      for (i = 0; i < numberOfBoxes; ++i) {\n        boxBatchIds[i] = id++;\n      }\n    }\n\n    if (!defined(cylinderBatchIds) && numberOfCylinders > 0) {\n      cylinderBatchIds = new Uint16Array(numberOfCylinders);\n\n      for (i = 0; i < numberOfCylinders; ++i) {\n        cylinderBatchIds[i] = id++;\n      }\n    }\n\n    if (!defined(ellipsoidBatchIds) && numberOfEllipsoids > 0) {\n      ellipsoidBatchIds = new Uint16Array(numberOfEllipsoids);\n\n      for (i = 0; i < numberOfEllipsoids; ++i) {\n        ellipsoidBatchIds[i] = id++;\n      }\n    }\n\n    if (!defined(sphereBatchIds) && numberOfSpheres > 0) {\n      sphereBatchIds = new Uint16Array(numberOfSpheres);\n\n      for (i = 0; i < numberOfSpheres; ++i) {\n        sphereBatchIds[i] = id++;\n      }\n    }\n  }\n\n  return {\n    boxes: boxBatchIds,\n    cylinders: cylinderBatchIds,\n    ellipsoids: ellipsoidBatchIds,\n    spheres: sphereBatchIds\n  };\n}\n\nvar sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\n\nfunction initialize(content, arrayBuffer, byteOffset) {\n  byteOffset = defaultValue(byteOffset, 0);\n  var uint8Array = new Uint8Array(arrayBuffer);\n  var view = new DataView(arrayBuffer);\n  byteOffset += sizeOfUint32; // Skip magic number\n\n  var version = view.getUint32(byteOffset, true);\n\n  if (version !== 1) {\n    throw new RuntimeError(\"Only Geometry tile version 1 is supported.  Version \" + version + \" is not.\");\n  }\n\n  byteOffset += sizeOfUint32;\n  var byteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  if (byteLength === 0) {\n    content._readyPromise.resolve(content);\n\n    return;\n  }\n\n  var featureTableJSONByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  if (featureTableJSONByteLength === 0) {\n    throw new RuntimeError(\"Feature table must have a byte length greater than zero\");\n  }\n\n  var featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var batchTableJSONByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var featureTableString = getStringFromTypedArray(uint8Array, byteOffset, featureTableJSONByteLength);\n  var featureTableJson = JSON.parse(featureTableString);\n  byteOffset += featureTableJSONByteLength;\n  var featureTableBinary = new Uint8Array(arrayBuffer, byteOffset, featureTableBinaryByteLength);\n  byteOffset += featureTableBinaryByteLength;\n  var batchTableJson;\n  var batchTableBinary;\n\n  if (batchTableJSONByteLength > 0) {\n    // PERFORMANCE_IDEA: is it possible to allocate this on-demand?  Perhaps keep the\n    // arraybuffer/string compressed in memory and then decompress it when it is first accessed.\n    //\n    // We could also make another request for it, but that would make the property set/get\n    // API async, and would double the number of numbers in some cases.\n    var batchTableString = getStringFromTypedArray(uint8Array, byteOffset, batchTableJSONByteLength);\n    batchTableJson = JSON.parse(batchTableString);\n    byteOffset += batchTableJSONByteLength;\n\n    if (batchTableBinaryByteLength > 0) {\n      // Has a batch table binary\n      batchTableBinary = new Uint8Array(arrayBuffer, byteOffset, batchTableBinaryByteLength); // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n\n      batchTableBinary = new Uint8Array(batchTableBinary);\n    }\n  }\n\n  var numberOfBoxes = defaultValue(featureTableJson.BOXES_LENGTH, 0);\n  var numberOfCylinders = defaultValue(featureTableJson.CYLINDERS_LENGTH, 0);\n  var numberOfEllipsoids = defaultValue(featureTableJson.ELLIPSOIDS_LENGTH, 0);\n  var numberOfSpheres = defaultValue(featureTableJson.SPHERES_LENGTH, 0);\n  var totalPrimitives = numberOfBoxes + numberOfCylinders + numberOfEllipsoids + numberOfSpheres;\n  var batchTable = new Cesium3DTileBatchTable(content, totalPrimitives, batchTableJson, batchTableBinary, createColorChangedCallback(content));\n  content._batchTable = batchTable;\n\n  if (totalPrimitives === 0) {\n    return;\n  }\n\n  var modelMatrix = content.tile.computedTransform;\n  var center;\n\n  if (defined(featureTableJson.RTC_CENTER)) {\n    center = Cartesian3.unpack(featureTableJson.RTC_CENTER);\n    Matrix4.multiplyByPoint(modelMatrix, center, center);\n  }\n\n  var batchIds = getBatchIds(featureTableJson, featureTableBinary);\n\n  if (numberOfBoxes > 0 || numberOfCylinders > 0 || numberOfEllipsoids > 0 || numberOfSpheres > 0) {\n    var boxes;\n    var cylinders;\n    var ellipsoids;\n    var spheres;\n\n    if (numberOfBoxes > 0) {\n      var boxesByteOffset = featureTableBinary.byteOffset + featureTableJson.BOXES.byteOffset;\n      boxes = new Float32Array(featureTableBinary.buffer, boxesByteOffset, Vector3DTileGeometry.packedBoxLength * numberOfBoxes);\n    }\n\n    if (numberOfCylinders > 0) {\n      var cylindersByteOffset = featureTableBinary.byteOffset + featureTableJson.CYLINDERS.byteOffset;\n      cylinders = new Float32Array(featureTableBinary.buffer, cylindersByteOffset, Vector3DTileGeometry.packedCylinderLength * numberOfCylinders);\n    }\n\n    if (numberOfEllipsoids > 0) {\n      var ellipsoidsByteOffset = featureTableBinary.byteOffset + featureTableJson.ELLIPSOIDS.byteOffset;\n      ellipsoids = new Float32Array(featureTableBinary.buffer, ellipsoidsByteOffset, Vector3DTileGeometry.packedEllipsoidLength * numberOfEllipsoids);\n    }\n\n    if (numberOfSpheres > 0) {\n      var spheresByteOffset = featureTableBinary.byteOffset + featureTableJson.SPHERES.byteOffset;\n      spheres = new Float32Array(featureTableBinary.buffer, spheresByteOffset, Vector3DTileGeometry.packedSphereLength * numberOfSpheres);\n    }\n\n    content._geometries = new Vector3DTileGeometry({\n      boxes: boxes,\n      boxBatchIds: batchIds.boxes,\n      cylinders: cylinders,\n      cylinderBatchIds: batchIds.cylinders,\n      ellipsoids: ellipsoids,\n      ellipsoidBatchIds: batchIds.ellipsoids,\n      spheres: spheres,\n      sphereBatchIds: batchIds.spheres,\n      center: center,\n      modelMatrix: modelMatrix,\n      batchTable: batchTable,\n      boundingVolume: content.tile.boundingVolume.boundingVolume\n    });\n  }\n}\n\nfunction createFeatures(content) {\n  var featuresLength = content.featuresLength;\n\n  if (!defined(content._features) && featuresLength > 0) {\n    var features = new Array(featuresLength);\n\n    if (defined(content._geometries)) {\n      content._geometries.createFeatures(content, features);\n    }\n\n    content._features = features;\n  }\n}\n\nGeometry3DTileContent.prototype.hasProperty = function (batchId, name) {\n  return this._batchTable.hasProperty(batchId, name);\n};\n\nGeometry3DTileContent.prototype.getFeature = function (batchId) {\n  //>>includeStart('debug', pragmas.debug);\n  var featuresLength = this.featuresLength;\n\n  if (!defined(batchId) || batchId < 0 || batchId >= featuresLength) {\n    throw new DeveloperError(\"batchId is required and between zero and featuresLength - 1 (\" + (featuresLength - 1) + \").\");\n  } //>>includeEnd('debug');\n\n\n  createFeatures(this);\n  return this._features[batchId];\n};\n\nGeometry3DTileContent.prototype.applyDebugSettings = function (enabled, color) {\n  if (defined(this._geometries)) {\n    this._geometries.applyDebugSettings(enabled, color);\n  }\n};\n\nGeometry3DTileContent.prototype.applyStyle = function (style) {\n  createFeatures(this);\n\n  if (defined(this._geometries)) {\n    this._geometries.applyStyle(style, this._features);\n  }\n};\n\nGeometry3DTileContent.prototype.update = function (tileset, frameState) {\n  if (defined(this._geometries)) {\n    this._geometries.classificationType = this._tileset.classificationType;\n    this._geometries.debugWireframe = this._tileset.debugWireframe;\n\n    this._geometries.update(frameState);\n  }\n\n  if (defined(this._batchTable) && this._geometries._ready) {\n    this._batchTable.update(tileset, frameState);\n  }\n\n  if (!defined(this._contentReadyPromise)) {\n    var that = this;\n    this._contentReadyPromise = this._geometries.readyPromise.then(function () {\n      that._readyPromise.resolve(that);\n    });\n  }\n};\n\nGeometry3DTileContent.prototype.isDestroyed = function () {\n  return false;\n};\n\nGeometry3DTileContent.prototype.destroy = function () {\n  this._geometries = this._geometries && this._geometries.destroy();\n  this._batchTable = this._batchTable && this._batchTable.destroy();\n  return destroyObject(this);\n};\n\nexport default Geometry3DTileContent;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/Geometry3DTileContent.js"],"names":["Cartesian3","defaultValue","defined","destroyObject","DeveloperError","getStringFromTypedArray","Matrix4","RuntimeError","when","Cesium3DTileBatchTable","Vector3DTileGeometry","Geometry3DTileContent","tileset","tile","resource","arrayBuffer","byteOffset","_tileset","_tile","_resource","_geometries","undefined","_contentReadyPromise","_readyPromise","defer","_batchTable","_features","featurePropertiesDirty","initialize","Object","defineProperties","prototype","featuresLength","get","pointsLength","trianglesLength","geometryByteLength","texturesByteLength","batchTableByteLength","memorySizeInBytes","innerContents","readyPromise","promise","url","getUrlComponent","batchTable","createColorChangedCallback","content","batchId","color","updateCommands","getBatchIds","featureTableJson","featureTableBinary","boxBatchIds","cylinderBatchIds","ellipsoidBatchIds","sphereBatchIds","i","numberOfBoxes","BOXES_LENGTH","numberOfCylinders","CYLINDERS_LENGTH","numberOfEllipsoids","ELLIPSOIDS_LENGTH","numberOfSpheres","SPHERES_LENGTH","BOX_BATCH_IDS","boxBatchIdsByteOffset","Uint16Array","buffer","CYLINDER_BATCH_IDS","cylinderBatchIdsByteOffset","ELLIPSOID_BATCH_IDS","ellipsoidBatchIdsByteOffset","SPHERE_BATCH_IDS","sphereBatchIdsByteOffset","atLeastOneDefined","atLeastOneUndefined","allUndefinedBatchIds","id","boxes","cylinders","ellipsoids","spheres","sizeOfUint32","Uint32Array","BYTES_PER_ELEMENT","uint8Array","Uint8Array","view","DataView","version","getUint32","byteLength","resolve","featureTableJSONByteLength","featureTableBinaryByteLength","batchTableJSONByteLength","batchTableBinaryByteLength","featureTableString","JSON","parse","batchTableJson","batchTableBinary","batchTableString","totalPrimitives","modelMatrix","computedTransform","center","RTC_CENTER","unpack","multiplyByPoint","batchIds","boxesByteOffset","BOXES","Float32Array","packedBoxLength","cylindersByteOffset","CYLINDERS","packedCylinderLength","ellipsoidsByteOffset","ELLIPSOIDS","packedEllipsoidLength","spheresByteOffset","SPHERES","packedSphereLength","boundingVolume","createFeatures","features","Array","hasProperty","name","getFeature","applyDebugSettings","enabled","applyStyle","style","update","frameState","classificationType","debugWireframe","_ready","that","then","isDestroyed","destroy"],"mappings":"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","sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport getStringFromTypedArray from \"../Core/getStringFromTypedArray.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport when from \"../ThirdParty/when.js\";\nimport Cesium3DTileBatchTable from \"./Cesium3DTileBatchTable.js\";\nimport Vector3DTileGeometry from \"./Vector3DTileGeometry.js\";\n\n/**\n * <p>\n * Implements the {@link Cesium3DTileContent} interface.\n * </p>\n *\n * @alias Geometry3DTileContent\n * @constructor\n *\n * @private\n */\nfunction Geometry3DTileContent(\n  tileset,\n  tile,\n  resource,\n  arrayBuffer,\n  byteOffset\n) {\n  this._tileset = tileset;\n  this._tile = tile;\n  this._resource = resource;\n  this._geometries = undefined;\n\n  this._contentReadyPromise = undefined;\n  this._readyPromise = when.defer();\n\n  this._batchTable = undefined;\n  this._features = undefined;\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.\n   */\n  this.featurePropertiesDirty = false;\n\n  initialize(this, arrayBuffer, byteOffset);\n}\n\nObject.defineProperties(Geometry3DTileContent.prototype, {\n  featuresLength: {\n    get: function () {\n      return defined(this._batchTable) ? this._batchTable.featuresLength : 0;\n    },\n  },\n\n  pointsLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  trianglesLength: {\n    get: function () {\n      if (defined(this._geometries)) {\n        return this._geometries.trianglesLength;\n      }\n      return 0;\n    },\n  },\n\n  geometryByteLength: {\n    get: function () {\n      if (defined(this._geometries)) {\n        return this._geometries.geometryByteLength;\n      }\n      return 0;\n    },\n  },\n\n  texturesByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  batchTableByteLength: {\n    get: function () {\n      return defined(this._batchTable) ? this._batchTable.memorySizeInBytes : 0;\n    },\n  },\n\n  innerContents: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    },\n  },\n\n  tileset: {\n    get: function () {\n      return this._tileset;\n    },\n  },\n\n  tile: {\n    get: function () {\n      return this._tile;\n    },\n  },\n\n  url: {\n    get: function () {\n      return this._resource.getUrlComponent(true);\n    },\n  },\n\n  batchTable: {\n    get: function () {\n      return this._batchTable;\n    },\n  },\n});\n\nfunction createColorChangedCallback(content) {\n  return function (batchId, color) {\n    if (defined(content._geometries)) {\n      content._geometries.updateCommands(batchId, color);\n    }\n  };\n}\n\nfunction getBatchIds(featureTableJson, featureTableBinary) {\n  var boxBatchIds;\n  var cylinderBatchIds;\n  var ellipsoidBatchIds;\n  var sphereBatchIds;\n  var i;\n\n  var numberOfBoxes = defaultValue(featureTableJson.BOXES_LENGTH, 0);\n  var numberOfCylinders = defaultValue(featureTableJson.CYLINDERS_LENGTH, 0);\n  var numberOfEllipsoids = defaultValue(featureTableJson.ELLIPSOIDS_LENGTH, 0);\n  var numberOfSpheres = defaultValue(featureTableJson.SPHERES_LENGTH, 0);\n\n  if (numberOfBoxes > 0 && defined(featureTableJson.BOX_BATCH_IDS)) {\n    var boxBatchIdsByteOffset =\n      featureTableBinary.byteOffset + featureTableJson.BOX_BATCH_IDS.byteOffset;\n    boxBatchIds = new Uint16Array(\n      featureTableBinary.buffer,\n      boxBatchIdsByteOffset,\n      numberOfBoxes\n    );\n  }\n\n  if (numberOfCylinders > 0 && defined(featureTableJson.CYLINDER_BATCH_IDS)) {\n    var cylinderBatchIdsByteOffset =\n      featureTableBinary.byteOffset +\n      featureTableJson.CYLINDER_BATCH_IDS.byteOffset;\n    cylinderBatchIds = new Uint16Array(\n      featureTableBinary.buffer,\n      cylinderBatchIdsByteOffset,\n      numberOfCylinders\n    );\n  }\n\n  if (numberOfEllipsoids > 0 && defined(featureTableJson.ELLIPSOID_BATCH_IDS)) {\n    var ellipsoidBatchIdsByteOffset =\n      featureTableBinary.byteOffset +\n      featureTableJson.ELLIPSOID_BATCH_IDS.byteOffset;\n    ellipsoidBatchIds = new Uint16Array(\n      featureTableBinary.buffer,\n      ellipsoidBatchIdsByteOffset,\n      numberOfEllipsoids\n    );\n  }\n\n  if (numberOfSpheres > 0 && defined(featureTableJson.SPHERE_BATCH_IDS)) {\n    var sphereBatchIdsByteOffset =\n      featureTableBinary.byteOffset +\n      featureTableJson.SPHERE_BATCH_IDS.byteOffset;\n    sphereBatchIds = new Uint16Array(\n      featureTableBinary.buffer,\n      sphereBatchIdsByteOffset,\n      numberOfSpheres\n    );\n  }\n\n  var atLeastOneDefined =\n    defined(boxBatchIds) ||\n    defined(cylinderBatchIds) ||\n    defined(ellipsoidBatchIds) ||\n    defined(sphereBatchIds);\n  var atLeastOneUndefined =\n    (numberOfBoxes > 0 && !defined(boxBatchIds)) ||\n    (numberOfCylinders > 0 && !defined(cylinderBatchIds)) ||\n    (numberOfEllipsoids > 0 && !defined(ellipsoidBatchIds)) ||\n    (numberOfSpheres > 0 && !defined(sphereBatchIds));\n\n  if (atLeastOneDefined && atLeastOneUndefined) {\n    throw new RuntimeError(\n      \"If one group of batch ids is defined, then all batch ids must be defined.\"\n    );\n  }\n\n  var allUndefinedBatchIds =\n    !defined(boxBatchIds) &&\n    !defined(cylinderBatchIds) &&\n    !defined(ellipsoidBatchIds) &&\n    !defined(sphereBatchIds);\n  if (allUndefinedBatchIds) {\n    var id = 0;\n    if (!defined(boxBatchIds) && numberOfBoxes > 0) {\n      boxBatchIds = new Uint16Array(numberOfBoxes);\n      for (i = 0; i < numberOfBoxes; ++i) {\n        boxBatchIds[i] = id++;\n      }\n    }\n    if (!defined(cylinderBatchIds) && numberOfCylinders > 0) {\n      cylinderBatchIds = new Uint16Array(numberOfCylinders);\n      for (i = 0; i < numberOfCylinders; ++i) {\n        cylinderBatchIds[i] = id++;\n      }\n    }\n    if (!defined(ellipsoidBatchIds) && numberOfEllipsoids > 0) {\n      ellipsoidBatchIds = new Uint16Array(numberOfEllipsoids);\n      for (i = 0; i < numberOfEllipsoids; ++i) {\n        ellipsoidBatchIds[i] = id++;\n      }\n    }\n    if (!defined(sphereBatchIds) && numberOfSpheres > 0) {\n      sphereBatchIds = new Uint16Array(numberOfSpheres);\n      for (i = 0; i < numberOfSpheres; ++i) {\n        sphereBatchIds[i] = id++;\n      }\n    }\n  }\n\n  return {\n    boxes: boxBatchIds,\n    cylinders: cylinderBatchIds,\n    ellipsoids: ellipsoidBatchIds,\n    spheres: sphereBatchIds,\n  };\n}\n\nvar sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\n\nfunction initialize(content, arrayBuffer, byteOffset) {\n  byteOffset = defaultValue(byteOffset, 0);\n\n  var uint8Array = new Uint8Array(arrayBuffer);\n  var view = new DataView(arrayBuffer);\n  byteOffset += sizeOfUint32; // Skip magic number\n\n  var version = view.getUint32(byteOffset, true);\n  if (version !== 1) {\n    throw new RuntimeError(\n      \"Only Geometry tile version 1 is supported.  Version \" +\n        version +\n        \" is not.\"\n    );\n  }\n  byteOffset += sizeOfUint32;\n\n  var byteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  if (byteLength === 0) {\n    content._readyPromise.resolve(content);\n    return;\n  }\n\n  var featureTableJSONByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  if (featureTableJSONByteLength === 0) {\n    throw new RuntimeError(\n      \"Feature table must have a byte length greater than zero\"\n    );\n  }\n\n  var featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var batchTableJSONByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  var featureTableString = getStringFromTypedArray(\n    uint8Array,\n    byteOffset,\n    featureTableJSONByteLength\n  );\n  var featureTableJson = JSON.parse(featureTableString);\n  byteOffset += featureTableJSONByteLength;\n\n  var featureTableBinary = new Uint8Array(\n    arrayBuffer,\n    byteOffset,\n    featureTableBinaryByteLength\n  );\n  byteOffset += featureTableBinaryByteLength;\n\n  var batchTableJson;\n  var batchTableBinary;\n  if (batchTableJSONByteLength > 0) {\n    // PERFORMANCE_IDEA: is it possible to allocate this on-demand?  Perhaps keep the\n    // arraybuffer/string compressed in memory and then decompress it when it is first accessed.\n    //\n    // We could also make another request for it, but that would make the property set/get\n    // API async, and would double the number of numbers in some cases.\n    var batchTableString = getStringFromTypedArray(\n      uint8Array,\n      byteOffset,\n      batchTableJSONByteLength\n    );\n    batchTableJson = JSON.parse(batchTableString);\n    byteOffset += batchTableJSONByteLength;\n\n    if (batchTableBinaryByteLength > 0) {\n      // Has a batch table binary\n      batchTableBinary = new Uint8Array(\n        arrayBuffer,\n        byteOffset,\n        batchTableBinaryByteLength\n      );\n      // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n      batchTableBinary = new Uint8Array(batchTableBinary);\n    }\n  }\n\n  var numberOfBoxes = defaultValue(featureTableJson.BOXES_LENGTH, 0);\n  var numberOfCylinders = defaultValue(featureTableJson.CYLINDERS_LENGTH, 0);\n  var numberOfEllipsoids = defaultValue(featureTableJson.ELLIPSOIDS_LENGTH, 0);\n  var numberOfSpheres = defaultValue(featureTableJson.SPHERES_LENGTH, 0);\n\n  var totalPrimitives =\n    numberOfBoxes + numberOfCylinders + numberOfEllipsoids + numberOfSpheres;\n\n  var batchTable = new Cesium3DTileBatchTable(\n    content,\n    totalPrimitives,\n    batchTableJson,\n    batchTableBinary,\n    createColorChangedCallback(content)\n  );\n  content._batchTable = batchTable;\n\n  if (totalPrimitives === 0) {\n    return;\n  }\n\n  var modelMatrix = content.tile.computedTransform;\n\n  var center;\n  if (defined(featureTableJson.RTC_CENTER)) {\n    center = Cartesian3.unpack(featureTableJson.RTC_CENTER);\n    Matrix4.multiplyByPoint(modelMatrix, center, center);\n  }\n\n  var batchIds = getBatchIds(featureTableJson, featureTableBinary);\n\n  if (\n    numberOfBoxes > 0 ||\n    numberOfCylinders > 0 ||\n    numberOfEllipsoids > 0 ||\n    numberOfSpheres > 0\n  ) {\n    var boxes;\n    var cylinders;\n    var ellipsoids;\n    var spheres;\n\n    if (numberOfBoxes > 0) {\n      var boxesByteOffset =\n        featureTableBinary.byteOffset + featureTableJson.BOXES.byteOffset;\n      boxes = new Float32Array(\n        featureTableBinary.buffer,\n        boxesByteOffset,\n        Vector3DTileGeometry.packedBoxLength * numberOfBoxes\n      );\n    }\n\n    if (numberOfCylinders > 0) {\n      var cylindersByteOffset =\n        featureTableBinary.byteOffset + featureTableJson.CYLINDERS.byteOffset;\n      cylinders = new Float32Array(\n        featureTableBinary.buffer,\n        cylindersByteOffset,\n        Vector3DTileGeometry.packedCylinderLength * numberOfCylinders\n      );\n    }\n\n    if (numberOfEllipsoids > 0) {\n      var ellipsoidsByteOffset =\n        featureTableBinary.byteOffset + featureTableJson.ELLIPSOIDS.byteOffset;\n      ellipsoids = new Float32Array(\n        featureTableBinary.buffer,\n        ellipsoidsByteOffset,\n        Vector3DTileGeometry.packedEllipsoidLength * numberOfEllipsoids\n      );\n    }\n\n    if (numberOfSpheres > 0) {\n      var spheresByteOffset =\n        featureTableBinary.byteOffset + featureTableJson.SPHERES.byteOffset;\n      spheres = new Float32Array(\n        featureTableBinary.buffer,\n        spheresByteOffset,\n        Vector3DTileGeometry.packedSphereLength * numberOfSpheres\n      );\n    }\n\n    content._geometries = new Vector3DTileGeometry({\n      boxes: boxes,\n      boxBatchIds: batchIds.boxes,\n      cylinders: cylinders,\n      cylinderBatchIds: batchIds.cylinders,\n      ellipsoids: ellipsoids,\n      ellipsoidBatchIds: batchIds.ellipsoids,\n      spheres: spheres,\n      sphereBatchIds: batchIds.spheres,\n      center: center,\n      modelMatrix: modelMatrix,\n      batchTable: batchTable,\n      boundingVolume: content.tile.boundingVolume.boundingVolume,\n    });\n  }\n}\n\nfunction createFeatures(content) {\n  var featuresLength = content.featuresLength;\n  if (!defined(content._features) && featuresLength > 0) {\n    var features = new Array(featuresLength);\n    if (defined(content._geometries)) {\n      content._geometries.createFeatures(content, features);\n    }\n    content._features = features;\n  }\n}\n\nGeometry3DTileContent.prototype.hasProperty = function (batchId, name) {\n  return this._batchTable.hasProperty(batchId, name);\n};\n\nGeometry3DTileContent.prototype.getFeature = function (batchId) {\n  //>>includeStart('debug', pragmas.debug);\n  var featuresLength = this.featuresLength;\n  if (!defined(batchId) || batchId < 0 || batchId >= featuresLength) {\n    throw new DeveloperError(\n      \"batchId is required and between zero and featuresLength - 1 (\" +\n        (featuresLength - 1) +\n        \").\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  createFeatures(this);\n  return this._features[batchId];\n};\n\nGeometry3DTileContent.prototype.applyDebugSettings = function (enabled, color) {\n  if (defined(this._geometries)) {\n    this._geometries.applyDebugSettings(enabled, color);\n  }\n};\n\nGeometry3DTileContent.prototype.applyStyle = function (style) {\n  createFeatures(this);\n  if (defined(this._geometries)) {\n    this._geometries.applyStyle(style, this._features);\n  }\n};\n\nGeometry3DTileContent.prototype.update = function (tileset, frameState) {\n  if (defined(this._geometries)) {\n    this._geometries.classificationType = this._tileset.classificationType;\n    this._geometries.debugWireframe = this._tileset.debugWireframe;\n    this._geometries.update(frameState);\n  }\n  if (defined(this._batchTable) && this._geometries._ready) {\n    this._batchTable.update(tileset, frameState);\n  }\n\n  if (!defined(this._contentReadyPromise)) {\n    var that = this;\n    this._contentReadyPromise = this._geometries.readyPromise.then(function () {\n      that._readyPromise.resolve(that);\n    });\n  }\n};\n\nGeometry3DTileContent.prototype.isDestroyed = function () {\n  return false;\n};\n\nGeometry3DTileContent.prototype.destroy = function () {\n  this._geometries = this._geometries && this._geometries.destroy();\n  this._batchTable = this._batchTable && this._batchTable.destroy();\n  return destroyObject(this);\n};\nexport default Geometry3DTileContent;\n"]},"metadata":{},"sourceType":"module"}