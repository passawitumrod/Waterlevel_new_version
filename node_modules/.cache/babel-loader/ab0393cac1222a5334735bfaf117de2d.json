{"ast":null,"code":"import protobufMinimal from \"../ThirdParty/protobuf-minimal.js\";\nimport when from \"../ThirdParty/when.js\";\nimport buildModuleUrl from \"./buildModuleUrl.js\";\nimport Check from \"./Check.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport GoogleEarthEnterpriseTileInformation from \"./GoogleEarthEnterpriseTileInformation.js\";\nimport isBitSet from \"./isBitSet.js\";\nimport loadAndExecuteScript from \"./loadAndExecuteScript.js\";\nimport CesiumMath from \"./Math.js\";\nimport Request from \"./Request.js\";\nimport Resource from \"./Resource.js\";\nimport RuntimeError from \"./RuntimeError.js\";\nimport TaskProcessor from \"./TaskProcessor.js\";\n\nfunction stringToBuffer(str) {\n  var len = str.length;\n  var buffer = new ArrayBuffer(len);\n  var ui8 = new Uint8Array(buffer);\n\n  for (var i = 0; i < len; ++i) {\n    ui8[i] = str.charCodeAt(i);\n  }\n\n  return buffer;\n} // Decodes packet with a key that has been around since the beginning of Google Earth Enterprise\n\n\nvar defaultKey = stringToBuffer(\"\\x45\\xf4\\xbd\\x0b\\x79\\xe2\\x6a\\x45\\x22\\x05\\x92\\x2c\\x17\\xcd\\x06\\x71\\xf8\\x49\\x10\\x46\\x67\\x51\\x00\\x42\\x25\\xc6\\xe8\\x61\\x2c\\x66\\x29\\x08\\xc6\\x34\\xdc\\x6a\\x62\\x25\\x79\\x0a\\x77\\x1d\\x6d\\x69\\xd6\\xf0\\x9c\\x6b\\x93\\xa1\\xbd\\x4e\\x75\\xe0\\x41\\x04\\x5b\\xdf\\x40\\x56\\x0c\\xd9\\xbb\\x72\\x9b\\x81\\x7c\\x10\\x33\\x53\\xee\\x4f\\x6c\\xd4\\x71\\x05\\xb0\\x7b\\xc0\\x7f\\x45\\x03\\x56\\x5a\\xad\\x77\\x55\\x65\\x0b\\x33\\x92\\x2a\\xac\\x19\\x6c\\x35\\x14\\xc5\\x1d\\x30\\x73\\xf8\\x33\\x3e\\x6d\\x46\\x38\\x4a\\xb4\\xdd\\xf0\\x2e\\xdd\\x17\\x75\\x16\\xda\\x8c\\x44\\x74\\x22\\x06\\xfa\\x61\\x22\\x0c\\x33\\x22\\x53\\x6f\\xaf\\x39\\x44\\x0b\\x8c\\x0e\\x39\\xd9\\x39\\x13\\x4c\\xb9\\xbf\\x7f\\xab\\x5c\\x8c\\x50\\x5f\\x9f\\x22\\x75\\x78\\x1f\\xe9\\x07\\x71\\x91\\x68\\x3b\\xc1\\xc4\\x9b\\x7f\\xf0\\x3c\\x56\\x71\\x48\\x82\\x05\\x27\\x55\\x66\\x59\\x4e\\x65\\x1d\\x98\\x75\\xa3\\x61\\x46\\x7d\\x61\\x3f\\x15\\x41\\x00\\x9f\\x14\\x06\\xd7\\xb4\\x34\\x4d\\xce\\x13\\x87\\x46\\xb0\\x1a\\xd5\\x05\\x1c\\xb8\\x8a\\x27\\x7b\\x8b\\xdc\\x2b\\xbb\\x4d\\x67\\x30\\xc8\\xd1\\xf6\\x5c\\x8f\\x50\\xfa\\x5b\\x2f\\x46\\x9b\\x6e\\x35\\x18\\x2f\\x27\\x43\\x2e\\xeb\\x0a\\x0c\\x5e\\x10\\x05\\x10\\xa5\\x73\\x1b\\x65\\x34\\xe5\\x6c\\x2e\\x6a\\x43\\x27\\x63\\x14\\x23\\x55\\xa9\\x3f\\x71\\x7b\\x67\\x43\\x7d\\x3a\\xaf\\xcd\\xe2\\x54\\x55\\x9c\\xfd\\x4b\\xc6\\xe2\\x9f\\x2f\\x28\\xed\\xcb\\x5c\\xc6\\x2d\\x66\\x07\\x88\\xa7\\x3b\\x2f\\x18\\x2a\\x22\\x4e\\x0e\\xb0\\x6b\\x2e\\xdd\\x0d\\x95\\x7d\\x7d\\x47\\xba\\x43\\xb2\\x11\\xb2\\x2b\\x3e\\x4d\\xaa\\x3e\\x7d\\xe6\\xce\\x49\\x89\\xc6\\xe6\\x78\\x0c\\x61\\x31\\x05\\x2d\\x01\\xa4\\x4f\\xa5\\x7e\\x71\\x20\\x88\\xec\\x0d\\x31\\xe8\\x4e\\x0b\\x00\\x6e\\x50\\x68\\x7d\\x17\\x3d\\x08\\x0d\\x17\\x95\\xa6\\x6e\\xa3\\x68\\x97\\x24\\x5b\\x6b\\xf3\\x17\\x23\\xf3\\xb6\\x73\\xb3\\x0d\\x0b\\x40\\xc0\\x9f\\xd8\\x04\\x51\\x5d\\xfa\\x1a\\x17\\x22\\x2e\\x15\\x6a\\xdf\\x49\\x00\\xb9\\xa0\\x77\\x55\\xc6\\xef\\x10\\x6a\\xbf\\x7b\\x47\\x4c\\x7f\\x83\\x17\\x05\\xee\\xdc\\xdc\\x46\\x85\\xa9\\xad\\x53\\x07\\x2b\\x53\\x34\\x06\\x07\\xff\\x14\\x94\\x59\\x19\\x02\\xe4\\x38\\xe8\\x31\\x83\\x4e\\xb9\\x58\\x46\\x6b\\xcb\\x2d\\x23\\x86\\x92\\x70\\x00\\x35\\x88\\x22\\xcf\\x31\\xb2\\x26\\x2f\\xe7\\xc3\\x75\\x2d\\x36\\x2c\\x72\\x74\\xb0\\x23\\x47\\xb7\\xd3\\xd1\\x26\\x16\\x85\\x37\\x72\\xe2\\x00\\x8c\\x44\\xcf\\x10\\xda\\x33\\x2d\\x1a\\xde\\x60\\x86\\x69\\x23\\x69\\x2a\\x7c\\xcd\\x4b\\x51\\x0d\\x95\\x54\\x39\\x77\\x2e\\x29\\xea\\x1b\\xa6\\x50\\xa2\\x6a\\x8f\\x6f\\x50\\x99\\x5c\\x3e\\x54\\xfb\\xef\\x50\\x5b\\x0b\\x07\\x45\\x17\\x89\\x6d\\x28\\x13\\x77\\x37\\x1d\\xdb\\x8e\\x1e\\x4a\\x05\\x66\\x4a\\x6f\\x99\\x20\\xe5\\x70\\xe2\\xb9\\x71\\x7e\\x0c\\x6d\\x49\\x04\\x2d\\x7a\\xfe\\x72\\xc7\\xf2\\x59\\x30\\x8f\\xbb\\x02\\x5d\\x73\\xe5\\xc9\\x20\\xea\\x78\\xec\\x20\\x90\\xf0\\x8a\\x7f\\x42\\x17\\x7c\\x47\\x19\\x60\\xb0\\x16\\xbd\\x26\\xb7\\x71\\xb6\\xc7\\x9f\\x0e\\xd1\\x33\\x82\\x3d\\xd3\\xab\\xee\\x63\\x99\\xc8\\x2b\\x53\\xa0\\x44\\x5c\\x71\\x01\\xc6\\xcc\\x44\\x1f\\x32\\x4f\\x3c\\xca\\xc0\\x29\\x3d\\x52\\xd3\\x61\\x19\\x58\\xa9\\x7d\\x65\\xb4\\xdc\\xcf\\x0d\\xf4\\x3d\\xf1\\x08\\xa9\\x42\\xda\\x23\\x09\\xd8\\xbf\\x5e\\x50\\x49\\xf8\\x4d\\xc0\\xcb\\x47\\x4c\\x1c\\x4f\\xf7\\x7b\\x2b\\xd8\\x16\\x18\\xc5\\x31\\x92\\x3b\\xb5\\x6f\\xdc\\x6c\\x0d\\x92\\x88\\x16\\xd1\\x9e\\xdb\\x3f\\xe2\\xe9\\xda\\x5f\\xd4\\x84\\xe2\\x46\\x61\\x5a\\xde\\x1c\\x55\\xcf\\xa4\\x00\\xbe\\xfd\\xce\\x67\\xf1\\x4a\\x69\\x1c\\x97\\xe6\\x20\\x48\\xd8\\x5d\\x7f\\x7e\\xae\\x71\\x20\\x0e\\x4e\\xae\\xc0\\x56\\xa9\\x91\\x01\\x3c\\x82\\x1d\\x0f\\x72\\xe7\\x76\\xec\\x29\\x49\\xd6\\x5d\\x2d\\x83\\xe3\\xdb\\x36\\x06\\xa9\\x3b\\x66\\x13\\x97\\x87\\x6a\\xd5\\xb6\\x3d\\x50\\x5e\\x52\\xb9\\x4b\\xc7\\x73\\x57\\x78\\xc9\\xf4\\x2e\\x59\\x07\\x95\\x93\\x6f\\xd0\\x4b\\x17\\x57\\x19\\x3e\\x27\\x27\\xc7\\x60\\xdb\\x3b\\xed\\x9a\\x0e\\x53\\x44\\x16\\x3e\\x3f\\x8d\\x92\\x6d\\x77\\xa2\\x0a\\xeb\\x3f\\x52\\xa8\\xc6\\x55\\x5e\\x31\\x49\\x37\\x85\\xf4\\xc5\\x1f\\x26\\x2d\\xa9\\x1c\\xbf\\x8b\\x27\\x54\\xda\\xc3\\x6a\\x20\\xe5\\x2a\\x78\\x04\\xb0\\xd6\\x90\\x70\\x72\\xaa\\x8b\\x68\\xbd\\x88\\xf7\\x02\\x5f\\x48\\xb1\\x7e\\xc0\\x58\\x4c\\x3f\\x66\\x1a\\xf9\\x3e\\xe1\\x65\\xc0\\x70\\xa7\\xcf\\x38\\x69\\xaf\\xf0\\x56\\x6c\\x64\\x49\\x9c\\x27\\xad\\x78\\x74\\x4f\\xc2\\x87\\xde\\x56\\x39\\x00\\xda\\x77\\x0b\\xcb\\x2d\\x1b\\x89\\xfb\\x35\\x4f\\x02\\xf5\\x08\\x51\\x13\\x60\\xc1\\x0a\\x5a\\x47\\x4d\\x26\\x1c\\x33\\x30\\x78\\xda\\xc0\\x9c\\x46\\x47\\xe2\\x5b\\x79\\x60\\x49\\x6e\\x37\\x67\\x53\\x0a\\x3e\\xe9\\xec\\x46\\x39\\xb2\\xf1\\x34\\x0d\\xc6\\x84\\x53\\x75\\x6e\\xe1\\x0c\\x59\\xd9\\x1e\\xde\\x29\\x85\\x10\\x7b\\x49\\x49\\xa5\\x77\\x79\\xbe\\x49\\x56\\x2e\\x36\\xe7\\x0b\\x3a\\xbb\\x4f\\x03\\x62\\x7b\\xd2\\x4d\\x31\\x95\\x2f\\xbd\\x38\\x7b\\xa8\\x4f\\x21\\xe1\\xec\\x46\\x70\\x76\\x95\\x7d\\x29\\x22\\x78\\x88\\x0a\\x90\\xdd\\x9d\\x5c\\xda\\xde\\x19\\x51\\xcf\\xf0\\xfc\\x59\\x52\\x65\\x7c\\x33\\x13\\xdf\\xf3\\x48\\xda\\xbb\\x2a\\x75\\xdb\\x60\\xb2\\x02\\x15\\xd4\\xfc\\x19\\xed\\x1b\\xec\\x7f\\x35\\xa8\\xff\\x28\\x31\\x07\\x2d\\x12\\xc8\\xdc\\x88\\x46\\x7c\\x8a\\x5b\\x22\");\n/**\n * Provides metadata using the Google Earth Enterprise REST API. This is used by the GoogleEarthEnterpriseImageryProvider\n *  and GoogleEarthEnterpriseTerrainProvider to share metadata requests.\n *\n * @alias GoogleEarthEnterpriseMetadata\n * @constructor\n *\n * @param {Resource|String} resourceOrUrl The url of the Google Earth Enterprise server hosting the imagery\n *\n * @see GoogleEarthEnterpriseImageryProvider\n * @see GoogleEarthEnterpriseTerrainProvider\n *\n */\n\nfunction GoogleEarthEnterpriseMetadata(resourceOrUrl) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"resourceOrUrl\", resourceOrUrl); //>>includeEnd('debug');\n\n  var url = resourceOrUrl;\n\n  if (typeof url !== \"string\" && !(url instanceof Resource)) {\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.string(\"resourceOrUrl.url\", resourceOrUrl.url); //>>includeEnd('debug');\n\n    url = resourceOrUrl.url;\n  }\n\n  var resource = Resource.createIfNeeded(url);\n  resource.appendForwardSlash();\n  this._resource = resource;\n  /**\n   * True if imagery is available.\n   * @type {Boolean}\n   * @default true\n   */\n\n  this.imageryPresent = true;\n  /**\n   * True if imagery is sent as a protocol buffer, false if sent as plain images. If undefined we will try both.\n   * @type {Boolean}\n   * @default undefined\n   */\n\n  this.protoImagery = undefined;\n  /**\n   * True if terrain is available.\n   * @type {Boolean}\n   * @default true\n   */\n\n  this.terrainPresent = true;\n  /**\n   * Exponent used to compute constant to calculate negative height values.\n   * @type {Number}\n   * @default 32\n   */\n\n  this.negativeAltitudeExponentBias = 32;\n  /**\n   * Threshold where any numbers smaller are actually negative values. They are multiplied by -2^negativeAltitudeExponentBias.\n   * @type {Number}\n   * @default EPSILON12\n   */\n\n  this.negativeAltitudeThreshold = CesiumMath.EPSILON12;\n  /**\n   * Dictionary of provider id to copyright strings.\n   * @type {Object}\n   * @default {}\n   */\n\n  this.providers = {};\n  /**\n   * Key used to decode packets\n   * @type {ArrayBuffer}\n   */\n\n  this.key = undefined;\n  this._quadPacketVersion = 1;\n  this._tileInfo = {};\n  this._subtreePromises = {};\n  var that = this;\n  this._readyPromise = requestDbRoot(this).then(function () {\n    return that.getQuadTreePacket(\"\", that._quadPacketVersion);\n  }).then(function () {\n    return true;\n  }).otherwise(function (e) {\n    var message = \"An error occurred while accessing \" + getMetadataResource(that, \"\", 1).url + \".\";\n    return when.reject(new RuntimeError(message));\n  });\n}\n\nObject.defineProperties(GoogleEarthEnterpriseMetadata.prototype, {\n  /**\n   * Gets the name of the Google Earth Enterprise server.\n   * @memberof GoogleEarthEnterpriseMetadata.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource.url;\n    }\n  },\n\n  /**\n   * Gets the proxy used for metadata requests.\n   * @memberof GoogleEarthEnterpriseMetadata.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    }\n  },\n\n  /**\n   * Gets the resource used for metadata requests.\n   * @memberof GoogleEarthEnterpriseMetadata.prototype\n   * @type {Resource}\n   * @readonly\n   */\n  resource: {\n    get: function () {\n      return this._resource;\n    }\n  },\n\n  /**\n   * Gets a promise that resolves to true when the metadata is ready for use.\n   * @memberof GoogleEarthEnterpriseMetadata.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    }\n  }\n});\n/**\n * Converts a tiles (x, y, level) position into a quadkey used to request an image\n * from a Google Earth Enterprise server.\n *\n * @param {Number} x The tile's x coordinate.\n * @param {Number} y The tile's y coordinate.\n * @param {Number} level The tile's zoom level.\n *\n * @see GoogleEarthEnterpriseMetadata#quadKeyToTileXY\n */\n\nGoogleEarthEnterpriseMetadata.tileXYToQuadKey = function (x, y, level) {\n  var quadkey = \"\";\n\n  for (var i = level; i >= 0; --i) {\n    var bitmask = 1 << i;\n    var digit = 0; // Tile Layout\n    // ___ ___\n    //|   |   |\n    //| 3 | 2 |\n    //|-------|\n    //| 0 | 1 |\n    //|___|___|\n    //\n\n    if (!isBitSet(y, bitmask)) {\n      // Top Row\n      digit |= 2;\n\n      if (!isBitSet(x, bitmask)) {\n        // Right to left\n        digit |= 1;\n      }\n    } else if (isBitSet(x, bitmask)) {\n      // Left to right\n      digit |= 1;\n    }\n\n    quadkey += digit;\n  }\n\n  return quadkey;\n};\n/**\n * Converts a tile's quadkey used to request an image from a Google Earth Enterprise server into the\n * (x, y, level) position.\n *\n * @param {String} quadkey The tile's quad key\n *\n * @see GoogleEarthEnterpriseMetadata#tileXYToQuadKey\n */\n\n\nGoogleEarthEnterpriseMetadata.quadKeyToTileXY = function (quadkey) {\n  var x = 0;\n  var y = 0;\n  var level = quadkey.length - 1;\n\n  for (var i = level; i >= 0; --i) {\n    var bitmask = 1 << i;\n    var digit = +quadkey[level - i];\n\n    if (isBitSet(digit, 2)) {\n      // Top Row\n      if (!isBitSet(digit, 1)) {\n        // // Right to left\n        x |= bitmask;\n      }\n    } else {\n      y |= bitmask;\n\n      if (isBitSet(digit, 1)) {\n        // Left to right\n        x |= bitmask;\n      }\n    }\n  }\n\n  return {\n    x: x,\n    y: y,\n    level: level\n  };\n};\n\nGoogleEarthEnterpriseMetadata.prototype.isValid = function (quadKey) {\n  var info = this.getTileInformationFromQuadKey(quadKey);\n\n  if (defined(info)) {\n    return info !== null;\n  }\n\n  var valid = true;\n  var q = quadKey;\n  var last;\n\n  while (q.length > 1) {\n    last = q.substring(q.length - 1);\n    q = q.substring(0, q.length - 1);\n    info = this.getTileInformationFromQuadKey(q);\n\n    if (defined(info)) {\n      if (!info.hasSubtree() && !info.hasChild(parseInt(last))) {\n        // We have no subtree or child available at some point in this node's ancestry\n        valid = false;\n      }\n\n      break;\n    } else if (info === null) {\n      // Some node in the ancestry was loaded and said there wasn't a subtree\n      valid = false;\n      break;\n    }\n  }\n\n  return valid;\n};\n\nvar taskProcessor = new TaskProcessor(\"decodeGoogleEarthEnterprisePacket\", Number.POSITIVE_INFINITY);\n/**\n * Retrieves a Google Earth Enterprise quadtree packet.\n *\n * @param {String} [quadKey=''] The quadkey to retrieve the packet for.\n * @param {Number} [version=1] The cnode version to be used in the request.\n * @param {Request} [request] The request object. Intended for internal use only.\n *\n * @private\n */\n\nGoogleEarthEnterpriseMetadata.prototype.getQuadTreePacket = function (quadKey, version, request) {\n  version = defaultValue(version, 1);\n  quadKey = defaultValue(quadKey, \"\");\n  var resource = getMetadataResource(this, quadKey, version, request);\n  var promise = resource.fetchArrayBuffer();\n\n  if (!defined(promise)) {\n    return undefined; // Throttled\n  }\n\n  var tileInfo = this._tileInfo;\n  var key = this.key;\n  return promise.then(function (metadata) {\n    var decodePromise = taskProcessor.scheduleTask({\n      buffer: metadata,\n      quadKey: quadKey,\n      type: \"Metadata\",\n      key: key\n    }, [metadata]);\n    return decodePromise.then(function (result) {\n      var root;\n      var topLevelKeyLength = -1;\n\n      if (quadKey !== \"\") {\n        // Root tile has no data except children bits, so put them into the tile info\n        topLevelKeyLength = quadKey.length + 1;\n        var top = result[quadKey];\n        root = tileInfo[quadKey];\n        root._bits |= top._bits;\n        delete result[quadKey];\n      } // Copy the resulting objects into tileInfo\n      // Make sure we start with shorter quadkeys first, so we know the parents have\n      //  already been processed. Otherwise we can lose ancestorHasTerrain along the way.\n\n\n      var keys = Object.keys(result);\n      keys.sort(function (a, b) {\n        return a.length - b.length;\n      });\n      var keysLength = keys.length;\n\n      for (var i = 0; i < keysLength; ++i) {\n        var key = keys[i];\n        var r = result[key];\n\n        if (r !== null) {\n          var info = GoogleEarthEnterpriseTileInformation.clone(result[key]);\n          var keyLength = key.length;\n\n          if (keyLength === topLevelKeyLength) {\n            info.setParent(root);\n          } else if (keyLength > 1) {\n            var parent = tileInfo[key.substring(0, key.length - 1)];\n            info.setParent(parent);\n          }\n\n          tileInfo[key] = info;\n        } else {\n          tileInfo[key] = null;\n        }\n      }\n    });\n  });\n};\n/**\n * Populates the metadata subtree down to the specified tile.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n *\n * @returns {Promise<GoogleEarthEnterpriseTileInformation>} A promise that resolves to the tile info for the requested quad key\n *\n * @private\n */\n\n\nGoogleEarthEnterpriseMetadata.prototype.populateSubtree = function (x, y, level, request) {\n  var quadkey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  return populateSubtree(this, quadkey, request);\n};\n\nfunction populateSubtree(that, quadKey, request) {\n  var tileInfo = that._tileInfo;\n  var q = quadKey;\n  var t = tileInfo[q]; // If we have tileInfo make sure sure it is not a node with a subtree that's not loaded\n\n  if (defined(t) && (!t.hasSubtree() || t.hasChildren())) {\n    return t;\n  }\n\n  while (t === undefined && q.length > 1) {\n    q = q.substring(0, q.length - 1);\n    t = tileInfo[q];\n  }\n\n  var subtreeRequest;\n  var subtreePromises = that._subtreePromises;\n  var promise = subtreePromises[q];\n\n  if (defined(promise)) {\n    return promise.then(function () {\n      // Recursively call this in case we need multiple subtree requests\n      subtreeRequest = new Request({\n        throttle: request.throttle,\n        throttleByServer: request.throttleByServer,\n        type: request.type,\n        priorityFunction: request.priorityFunction\n      });\n      return populateSubtree(that, quadKey, subtreeRequest);\n    });\n  } // t is either\n  //   null so one of its parents was a leaf node, so this tile doesn't exist\n  //   exists but doesn't have a subtree to request\n  //   undefined so no parent exists - this shouldn't ever happen once the provider is ready\n\n\n  if (!defined(t) || !t.hasSubtree()) {\n    return when.reject(new RuntimeError(\"Couldn't load metadata for tile \" + quadKey));\n  } // We need to split up the promise here because when will execute syncronously if getQuadTreePacket\n  //  is already resolved (like in the tests), so subtreePromises will never get cleared out.\n  //  Only the initial request will also remove the promise from subtreePromises.\n\n\n  promise = that.getQuadTreePacket(q, t.cnodeVersion, request);\n\n  if (!defined(promise)) {\n    return undefined;\n  }\n\n  subtreePromises[q] = promise;\n  return promise.then(function () {\n    // Recursively call this in case we need multiple subtree requests\n    subtreeRequest = new Request({\n      throttle: request.throttle,\n      throttleByServer: request.throttleByServer,\n      type: request.type,\n      priorityFunction: request.priorityFunction\n    });\n    return populateSubtree(that, quadKey, subtreeRequest);\n  }).always(function () {\n    delete subtreePromises[q];\n  });\n}\n/**\n * Gets information about a tile\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @returns {GoogleEarthEnterpriseTileInformation|undefined} Information about the tile or undefined if it isn't loaded.\n *\n * @private\n */\n\n\nGoogleEarthEnterpriseMetadata.prototype.getTileInformation = function (x, y, level) {\n  var quadkey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  return this._tileInfo[quadkey];\n};\n/**\n * Gets information about a tile from a quadKey\n *\n * @param {String} quadkey The quadkey for the tile\n * @returns {GoogleEarthEnterpriseTileInformation|undefined} Information about the tile or undefined if it isn't loaded.\n *\n * @private\n */\n\n\nGoogleEarthEnterpriseMetadata.prototype.getTileInformationFromQuadKey = function (quadkey) {\n  return this._tileInfo[quadkey];\n};\n\nfunction getMetadataResource(that, quadKey, version, request) {\n  return that._resource.getDerivedResource({\n    url: \"flatfile?q2-0\" + quadKey + \"-q.\" + version.toString(),\n    request: request\n  });\n}\n\nvar dbrootParser;\nvar dbrootParserPromise;\n\nfunction requestDbRoot(that) {\n  var resource = that._resource.getDerivedResource({\n    url: \"dbRoot.v5\",\n    queryParameters: {\n      output: \"proto\"\n    }\n  });\n\n  if (!defined(dbrootParserPromise)) {\n    var url = buildModuleUrl(\"ThirdParty/google-earth-dbroot-parser.js\");\n    var oldValue = window.cesiumGoogleEarthDbRootParser;\n    dbrootParserPromise = loadAndExecuteScript(url).then(function () {\n      dbrootParser = window.cesiumGoogleEarthDbRootParser(protobufMinimal);\n\n      if (defined(oldValue)) {\n        window.cesiumGoogleEarthDbRootParser = oldValue;\n      } else {\n        delete window.cesiumGoogleEarthDbRootParser;\n      }\n    });\n  }\n\n  return dbrootParserPromise.then(function () {\n    return resource.fetchArrayBuffer();\n  }).then(function (buf) {\n    var encryptedDbRootProto = dbrootParser.EncryptedDbRootProto.decode(new Uint8Array(buf));\n    var byteArray = encryptedDbRootProto.encryptionData;\n    var offset = byteArray.byteOffset;\n    var end = offset + byteArray.byteLength;\n    var key = that.key = byteArray.buffer.slice(offset, end);\n    byteArray = encryptedDbRootProto.dbrootData;\n    offset = byteArray.byteOffset;\n    end = offset + byteArray.byteLength;\n    var dbRootCompressed = byteArray.buffer.slice(offset, end);\n    return taskProcessor.scheduleTask({\n      buffer: dbRootCompressed,\n      type: \"DbRoot\",\n      key: key\n    }, [dbRootCompressed]);\n  }).then(function (result) {\n    var dbRoot = dbrootParser.DbRootProto.decode(new Uint8Array(result.buffer));\n    that.imageryPresent = defaultValue(dbRoot.imageryPresent, that.imageryPresent);\n    that.protoImagery = dbRoot.protoImagery;\n    that.terrainPresent = defaultValue(dbRoot.terrainPresent, that.terrainPresent);\n\n    if (defined(dbRoot.endSnippet) && defined(dbRoot.endSnippet.model)) {\n      var model = dbRoot.endSnippet.model;\n      that.negativeAltitudeExponentBias = defaultValue(model.negativeAltitudeExponentBias, that.negativeAltitudeExponentBias);\n      that.negativeAltitudeThreshold = defaultValue(model.compressedNegativeAltitudeThreshold, that.negativeAltitudeThreshold);\n    }\n\n    if (defined(dbRoot.databaseVersion)) {\n      that._quadPacketVersion = defaultValue(dbRoot.databaseVersion.quadtreeVersion, that._quadPacketVersion);\n    }\n\n    var providers = that.providers;\n    var providerInfo = defaultValue(dbRoot.providerInfo, []);\n    var count = providerInfo.length;\n\n    for (var i = 0; i < count; ++i) {\n      var provider = providerInfo[i];\n      var copyrightString = provider.copyrightString;\n\n      if (defined(copyrightString)) {\n        providers[provider.providerId] = new Credit(copyrightString.value);\n      }\n    }\n  }).otherwise(function () {\n    // Just eat the error and use the default values.\n    console.log(\"Failed to retrieve \" + resource.url + \". Using defaults.\");\n    that.key = defaultKey;\n  });\n}\n\nexport default GoogleEarthEnterpriseMetadata;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/GoogleEarthEnterpriseMetadata.js"],"names":["protobufMinimal","when","buildModuleUrl","Check","Credit","defaultValue","defined","GoogleEarthEnterpriseTileInformation","isBitSet","loadAndExecuteScript","CesiumMath","Request","Resource","RuntimeError","TaskProcessor","stringToBuffer","str","len","length","buffer","ArrayBuffer","ui8","Uint8Array","i","charCodeAt","defaultKey","GoogleEarthEnterpriseMetadata","resourceOrUrl","url","typeOf","string","resource","createIfNeeded","appendForwardSlash","_resource","imageryPresent","protoImagery","undefined","terrainPresent","negativeAltitudeExponentBias","negativeAltitudeThreshold","EPSILON12","providers","key","_quadPacketVersion","_tileInfo","_subtreePromises","that","_readyPromise","requestDbRoot","then","getQuadTreePacket","otherwise","e","message","getMetadataResource","reject","Object","defineProperties","prototype","get","proxy","readyPromise","tileXYToQuadKey","x","y","level","quadkey","bitmask","digit","quadKeyToTileXY","isValid","quadKey","info","getTileInformationFromQuadKey","valid","q","last","substring","hasSubtree","hasChild","parseInt","taskProcessor","Number","POSITIVE_INFINITY","version","request","promise","fetchArrayBuffer","tileInfo","metadata","decodePromise","scheduleTask","type","result","root","topLevelKeyLength","top","_bits","keys","sort","a","b","keysLength","r","clone","keyLength","setParent","parent","populateSubtree","t","hasChildren","subtreeRequest","subtreePromises","throttle","throttleByServer","priorityFunction","cnodeVersion","always","getTileInformation","getDerivedResource","toString","dbrootParser","dbrootParserPromise","queryParameters","output","oldValue","window","cesiumGoogleEarthDbRootParser","buf","encryptedDbRootProto","EncryptedDbRootProto","decode","byteArray","encryptionData","offset","byteOffset","end","byteLength","slice","dbrootData","dbRootCompressed","dbRoot","DbRootProto","endSnippet","model","compressedNegativeAltitudeThreshold","databaseVersion","quadtreeVersion","providerInfo","count","provider","copyrightString","providerId","value","console","log"],"mappings":"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","sourcesContent":["import protobufMinimal from \"../ThirdParty/protobuf-minimal.js\";\nimport when from \"../ThirdParty/when.js\";\nimport buildModuleUrl from \"./buildModuleUrl.js\";\nimport Check from \"./Check.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport GoogleEarthEnterpriseTileInformation from \"./GoogleEarthEnterpriseTileInformation.js\";\nimport isBitSet from \"./isBitSet.js\";\nimport loadAndExecuteScript from \"./loadAndExecuteScript.js\";\nimport CesiumMath from \"./Math.js\";\nimport Request from \"./Request.js\";\nimport Resource from \"./Resource.js\";\nimport RuntimeError from \"./RuntimeError.js\";\nimport TaskProcessor from \"./TaskProcessor.js\";\n\nfunction stringToBuffer(str) {\n  var len = str.length;\n  var buffer = new ArrayBuffer(len);\n  var ui8 = new Uint8Array(buffer);\n  for (var i = 0; i < len; ++i) {\n    ui8[i] = str.charCodeAt(i);\n  }\n\n  return buffer;\n}\n\n// Decodes packet with a key that has been around since the beginning of Google Earth Enterprise\nvar defaultKey = stringToBuffer(\n  \"\\x45\\xf4\\xbd\\x0b\\x79\\xe2\\x6a\\x45\\x22\\x05\\x92\\x2c\\x17\\xcd\\x06\\x71\\xf8\\x49\\x10\\x46\\x67\\x51\\x00\\x42\\x25\\xc6\\xe8\\x61\\x2c\\x66\\x29\\x08\\xc6\\x34\\xdc\\x6a\\x62\\x25\\x79\\x0a\\x77\\x1d\\x6d\\x69\\xd6\\xf0\\x9c\\x6b\\x93\\xa1\\xbd\\x4e\\x75\\xe0\\x41\\x04\\x5b\\xdf\\x40\\x56\\x0c\\xd9\\xbb\\x72\\x9b\\x81\\x7c\\x10\\x33\\x53\\xee\\x4f\\x6c\\xd4\\x71\\x05\\xb0\\x7b\\xc0\\x7f\\x45\\x03\\x56\\x5a\\xad\\x77\\x55\\x65\\x0b\\x33\\x92\\x2a\\xac\\x19\\x6c\\x35\\x14\\xc5\\x1d\\x30\\x73\\xf8\\x33\\x3e\\x6d\\x46\\x38\\x4a\\xb4\\xdd\\xf0\\x2e\\xdd\\x17\\x75\\x16\\xda\\x8c\\x44\\x74\\x22\\x06\\xfa\\x61\\x22\\x0c\\x33\\x22\\x53\\x6f\\xaf\\x39\\x44\\x0b\\x8c\\x0e\\x39\\xd9\\x39\\x13\\x4c\\xb9\\xbf\\x7f\\xab\\x5c\\x8c\\x50\\x5f\\x9f\\x22\\x75\\x78\\x1f\\xe9\\x07\\x71\\x91\\x68\\x3b\\xc1\\xc4\\x9b\\x7f\\xf0\\x3c\\x56\\x71\\x48\\x82\\x05\\x27\\x55\\x66\\x59\\x4e\\x65\\x1d\\x98\\x75\\xa3\\x61\\x46\\x7d\\x61\\x3f\\x15\\x41\\x00\\x9f\\x14\\x06\\xd7\\xb4\\x34\\x4d\\xce\\x13\\x87\\x46\\xb0\\x1a\\xd5\\x05\\x1c\\xb8\\x8a\\x27\\x7b\\x8b\\xdc\\x2b\\xbb\\x4d\\x67\\x30\\xc8\\xd1\\xf6\\x5c\\x8f\\x50\\xfa\\x5b\\x2f\\x46\\x9b\\x6e\\x35\\x18\\x2f\\x27\\x43\\x2e\\xeb\\x0a\\x0c\\x5e\\x10\\x05\\x10\\xa5\\x73\\x1b\\x65\\x34\\xe5\\x6c\\x2e\\x6a\\x43\\x27\\x63\\x14\\x23\\x55\\xa9\\x3f\\x71\\x7b\\x67\\x43\\x7d\\x3a\\xaf\\xcd\\xe2\\x54\\x55\\x9c\\xfd\\x4b\\xc6\\xe2\\x9f\\x2f\\x28\\xed\\xcb\\x5c\\xc6\\x2d\\x66\\x07\\x88\\xa7\\x3b\\x2f\\x18\\x2a\\x22\\x4e\\x0e\\xb0\\x6b\\x2e\\xdd\\x0d\\x95\\x7d\\x7d\\x47\\xba\\x43\\xb2\\x11\\xb2\\x2b\\x3e\\x4d\\xaa\\x3e\\x7d\\xe6\\xce\\x49\\x89\\xc6\\xe6\\x78\\x0c\\x61\\x31\\x05\\x2d\\x01\\xa4\\x4f\\xa5\\x7e\\x71\\x20\\x88\\xec\\x0d\\x31\\xe8\\x4e\\x0b\\x00\\x6e\\x50\\x68\\x7d\\x17\\x3d\\x08\\x0d\\x17\\x95\\xa6\\x6e\\xa3\\x68\\x97\\x24\\x5b\\x6b\\xf3\\x17\\x23\\xf3\\xb6\\x73\\xb3\\x0d\\x0b\\x40\\xc0\\x9f\\xd8\\x04\\x51\\x5d\\xfa\\x1a\\x17\\x22\\x2e\\x15\\x6a\\xdf\\x49\\x00\\xb9\\xa0\\x77\\x55\\xc6\\xef\\x10\\x6a\\xbf\\x7b\\x47\\x4c\\x7f\\x83\\x17\\x05\\xee\\xdc\\xdc\\x46\\x85\\xa9\\xad\\x53\\x07\\x2b\\x53\\x34\\x06\\x07\\xff\\x14\\x94\\x59\\x19\\x02\\xe4\\x38\\xe8\\x31\\x83\\x4e\\xb9\\x58\\x46\\x6b\\xcb\\x2d\\x23\\x86\\x92\\x70\\x00\\x35\\x88\\x22\\xcf\\x31\\xb2\\x26\\x2f\\xe7\\xc3\\x75\\x2d\\x36\\x2c\\x72\\x74\\xb0\\x23\\x47\\xb7\\xd3\\xd1\\x26\\x16\\x85\\x37\\x72\\xe2\\x00\\x8c\\x44\\xcf\\x10\\xda\\x33\\x2d\\x1a\\xde\\x60\\x86\\x69\\x23\\x69\\x2a\\x7c\\xcd\\x4b\\x51\\x0d\\x95\\x54\\x39\\x77\\x2e\\x29\\xea\\x1b\\xa6\\x50\\xa2\\x6a\\x8f\\x6f\\x50\\x99\\x5c\\x3e\\x54\\xfb\\xef\\x50\\x5b\\x0b\\x07\\x45\\x17\\x89\\x6d\\x28\\x13\\x77\\x37\\x1d\\xdb\\x8e\\x1e\\x4a\\x05\\x66\\x4a\\x6f\\x99\\x20\\xe5\\x70\\xe2\\xb9\\x71\\x7e\\x0c\\x6d\\x49\\x04\\x2d\\x7a\\xfe\\x72\\xc7\\xf2\\x59\\x30\\x8f\\xbb\\x02\\x5d\\x73\\xe5\\xc9\\x20\\xea\\x78\\xec\\x20\\x90\\xf0\\x8a\\x7f\\x42\\x17\\x7c\\x47\\x19\\x60\\xb0\\x16\\xbd\\x26\\xb7\\x71\\xb6\\xc7\\x9f\\x0e\\xd1\\x33\\x82\\x3d\\xd3\\xab\\xee\\x63\\x99\\xc8\\x2b\\x53\\xa0\\x44\\x5c\\x71\\x01\\xc6\\xcc\\x44\\x1f\\x32\\x4f\\x3c\\xca\\xc0\\x29\\x3d\\x52\\xd3\\x61\\x19\\x58\\xa9\\x7d\\x65\\xb4\\xdc\\xcf\\x0d\\xf4\\x3d\\xf1\\x08\\xa9\\x42\\xda\\x23\\x09\\xd8\\xbf\\x5e\\x50\\x49\\xf8\\x4d\\xc0\\xcb\\x47\\x4c\\x1c\\x4f\\xf7\\x7b\\x2b\\xd8\\x16\\x18\\xc5\\x31\\x92\\x3b\\xb5\\x6f\\xdc\\x6c\\x0d\\x92\\x88\\x16\\xd1\\x9e\\xdb\\x3f\\xe2\\xe9\\xda\\x5f\\xd4\\x84\\xe2\\x46\\x61\\x5a\\xde\\x1c\\x55\\xcf\\xa4\\x00\\xbe\\xfd\\xce\\x67\\xf1\\x4a\\x69\\x1c\\x97\\xe6\\x20\\x48\\xd8\\x5d\\x7f\\x7e\\xae\\x71\\x20\\x0e\\x4e\\xae\\xc0\\x56\\xa9\\x91\\x01\\x3c\\x82\\x1d\\x0f\\x72\\xe7\\x76\\xec\\x29\\x49\\xd6\\x5d\\x2d\\x83\\xe3\\xdb\\x36\\x06\\xa9\\x3b\\x66\\x13\\x97\\x87\\x6a\\xd5\\xb6\\x3d\\x50\\x5e\\x52\\xb9\\x4b\\xc7\\x73\\x57\\x78\\xc9\\xf4\\x2e\\x59\\x07\\x95\\x93\\x6f\\xd0\\x4b\\x17\\x57\\x19\\x3e\\x27\\x27\\xc7\\x60\\xdb\\x3b\\xed\\x9a\\x0e\\x53\\x44\\x16\\x3e\\x3f\\x8d\\x92\\x6d\\x77\\xa2\\x0a\\xeb\\x3f\\x52\\xa8\\xc6\\x55\\x5e\\x31\\x49\\x37\\x85\\xf4\\xc5\\x1f\\x26\\x2d\\xa9\\x1c\\xbf\\x8b\\x27\\x54\\xda\\xc3\\x6a\\x20\\xe5\\x2a\\x78\\x04\\xb0\\xd6\\x90\\x70\\x72\\xaa\\x8b\\x68\\xbd\\x88\\xf7\\x02\\x5f\\x48\\xb1\\x7e\\xc0\\x58\\x4c\\x3f\\x66\\x1a\\xf9\\x3e\\xe1\\x65\\xc0\\x70\\xa7\\xcf\\x38\\x69\\xaf\\xf0\\x56\\x6c\\x64\\x49\\x9c\\x27\\xad\\x78\\x74\\x4f\\xc2\\x87\\xde\\x56\\x39\\x00\\xda\\x77\\x0b\\xcb\\x2d\\x1b\\x89\\xfb\\x35\\x4f\\x02\\xf5\\x08\\x51\\x13\\x60\\xc1\\x0a\\x5a\\x47\\x4d\\x26\\x1c\\x33\\x30\\x78\\xda\\xc0\\x9c\\x46\\x47\\xe2\\x5b\\x79\\x60\\x49\\x6e\\x37\\x67\\x53\\x0a\\x3e\\xe9\\xec\\x46\\x39\\xb2\\xf1\\x34\\x0d\\xc6\\x84\\x53\\x75\\x6e\\xe1\\x0c\\x59\\xd9\\x1e\\xde\\x29\\x85\\x10\\x7b\\x49\\x49\\xa5\\x77\\x79\\xbe\\x49\\x56\\x2e\\x36\\xe7\\x0b\\x3a\\xbb\\x4f\\x03\\x62\\x7b\\xd2\\x4d\\x31\\x95\\x2f\\xbd\\x38\\x7b\\xa8\\x4f\\x21\\xe1\\xec\\x46\\x70\\x76\\x95\\x7d\\x29\\x22\\x78\\x88\\x0a\\x90\\xdd\\x9d\\x5c\\xda\\xde\\x19\\x51\\xcf\\xf0\\xfc\\x59\\x52\\x65\\x7c\\x33\\x13\\xdf\\xf3\\x48\\xda\\xbb\\x2a\\x75\\xdb\\x60\\xb2\\x02\\x15\\xd4\\xfc\\x19\\xed\\x1b\\xec\\x7f\\x35\\xa8\\xff\\x28\\x31\\x07\\x2d\\x12\\xc8\\xdc\\x88\\x46\\x7c\\x8a\\x5b\\x22\"\n);\n\n/**\n * Provides metadata using the Google Earth Enterprise REST API. This is used by the GoogleEarthEnterpriseImageryProvider\n *  and GoogleEarthEnterpriseTerrainProvider to share metadata requests.\n *\n * @alias GoogleEarthEnterpriseMetadata\n * @constructor\n *\n * @param {Resource|String} resourceOrUrl The url of the Google Earth Enterprise server hosting the imagery\n *\n * @see GoogleEarthEnterpriseImageryProvider\n * @see GoogleEarthEnterpriseTerrainProvider\n *\n */\nfunction GoogleEarthEnterpriseMetadata(resourceOrUrl) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"resourceOrUrl\", resourceOrUrl);\n  //>>includeEnd('debug');\n\n  var url = resourceOrUrl;\n\n  if (typeof url !== \"string\" && !(url instanceof Resource)) {\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.string(\"resourceOrUrl.url\", resourceOrUrl.url);\n    //>>includeEnd('debug');\n\n    url = resourceOrUrl.url;\n  }\n\n  var resource = Resource.createIfNeeded(url);\n  resource.appendForwardSlash();\n  this._resource = resource;\n\n  /**\n   * True if imagery is available.\n   * @type {Boolean}\n   * @default true\n   */\n  this.imageryPresent = true;\n\n  /**\n   * True if imagery is sent as a protocol buffer, false if sent as plain images. If undefined we will try both.\n   * @type {Boolean}\n   * @default undefined\n   */\n  this.protoImagery = undefined;\n\n  /**\n   * True if terrain is available.\n   * @type {Boolean}\n   * @default true\n   */\n  this.terrainPresent = true;\n\n  /**\n   * Exponent used to compute constant to calculate negative height values.\n   * @type {Number}\n   * @default 32\n   */\n  this.negativeAltitudeExponentBias = 32;\n\n  /**\n   * Threshold where any numbers smaller are actually negative values. They are multiplied by -2^negativeAltitudeExponentBias.\n   * @type {Number}\n   * @default EPSILON12\n   */\n  this.negativeAltitudeThreshold = CesiumMath.EPSILON12;\n\n  /**\n   * Dictionary of provider id to copyright strings.\n   * @type {Object}\n   * @default {}\n   */\n  this.providers = {};\n\n  /**\n   * Key used to decode packets\n   * @type {ArrayBuffer}\n   */\n  this.key = undefined;\n\n  this._quadPacketVersion = 1;\n\n  this._tileInfo = {};\n  this._subtreePromises = {};\n\n  var that = this;\n  this._readyPromise = requestDbRoot(this)\n    .then(function () {\n      return that.getQuadTreePacket(\"\", that._quadPacketVersion);\n    })\n    .then(function () {\n      return true;\n    })\n    .otherwise(function (e) {\n      var message =\n        \"An error occurred while accessing \" +\n        getMetadataResource(that, \"\", 1).url +\n        \".\";\n      return when.reject(new RuntimeError(message));\n    });\n}\n\nObject.defineProperties(GoogleEarthEnterpriseMetadata.prototype, {\n  /**\n   * Gets the name of the Google Earth Enterprise server.\n   * @memberof GoogleEarthEnterpriseMetadata.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource.url;\n    },\n  },\n\n  /**\n   * Gets the proxy used for metadata requests.\n   * @memberof GoogleEarthEnterpriseMetadata.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    },\n  },\n\n  /**\n   * Gets the resource used for metadata requests.\n   * @memberof GoogleEarthEnterpriseMetadata.prototype\n   * @type {Resource}\n   * @readonly\n   */\n  resource: {\n    get: function () {\n      return this._resource;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the metadata is ready for use.\n   * @memberof GoogleEarthEnterpriseMetadata.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    },\n  },\n});\n\n/**\n * Converts a tiles (x, y, level) position into a quadkey used to request an image\n * from a Google Earth Enterprise server.\n *\n * @param {Number} x The tile's x coordinate.\n * @param {Number} y The tile's y coordinate.\n * @param {Number} level The tile's zoom level.\n *\n * @see GoogleEarthEnterpriseMetadata#quadKeyToTileXY\n */\nGoogleEarthEnterpriseMetadata.tileXYToQuadKey = function (x, y, level) {\n  var quadkey = \"\";\n  for (var i = level; i >= 0; --i) {\n    var bitmask = 1 << i;\n    var digit = 0;\n\n    // Tile Layout\n    // ___ ___\n    //|   |   |\n    //| 3 | 2 |\n    //|-------|\n    //| 0 | 1 |\n    //|___|___|\n    //\n\n    if (!isBitSet(y, bitmask)) {\n      // Top Row\n      digit |= 2;\n      if (!isBitSet(x, bitmask)) {\n        // Right to left\n        digit |= 1;\n      }\n    } else if (isBitSet(x, bitmask)) {\n      // Left to right\n      digit |= 1;\n    }\n\n    quadkey += digit;\n  }\n  return quadkey;\n};\n\n/**\n * Converts a tile's quadkey used to request an image from a Google Earth Enterprise server into the\n * (x, y, level) position.\n *\n * @param {String} quadkey The tile's quad key\n *\n * @see GoogleEarthEnterpriseMetadata#tileXYToQuadKey\n */\nGoogleEarthEnterpriseMetadata.quadKeyToTileXY = function (quadkey) {\n  var x = 0;\n  var y = 0;\n  var level = quadkey.length - 1;\n  for (var i = level; i >= 0; --i) {\n    var bitmask = 1 << i;\n    var digit = +quadkey[level - i];\n\n    if (isBitSet(digit, 2)) {\n      // Top Row\n      if (!isBitSet(digit, 1)) {\n        // // Right to left\n        x |= bitmask;\n      }\n    } else {\n      y |= bitmask;\n      if (isBitSet(digit, 1)) {\n        // Left to right\n        x |= bitmask;\n      }\n    }\n  }\n  return {\n    x: x,\n    y: y,\n    level: level,\n  };\n};\n\nGoogleEarthEnterpriseMetadata.prototype.isValid = function (quadKey) {\n  var info = this.getTileInformationFromQuadKey(quadKey);\n  if (defined(info)) {\n    return info !== null;\n  }\n\n  var valid = true;\n  var q = quadKey;\n  var last;\n  while (q.length > 1) {\n    last = q.substring(q.length - 1);\n    q = q.substring(0, q.length - 1);\n    info = this.getTileInformationFromQuadKey(q);\n    if (defined(info)) {\n      if (!info.hasSubtree() && !info.hasChild(parseInt(last))) {\n        // We have no subtree or child available at some point in this node's ancestry\n        valid = false;\n      }\n\n      break;\n    } else if (info === null) {\n      // Some node in the ancestry was loaded and said there wasn't a subtree\n      valid = false;\n      break;\n    }\n  }\n\n  return valid;\n};\n\nvar taskProcessor = new TaskProcessor(\n  \"decodeGoogleEarthEnterprisePacket\",\n  Number.POSITIVE_INFINITY\n);\n\n/**\n * Retrieves a Google Earth Enterprise quadtree packet.\n *\n * @param {String} [quadKey=''] The quadkey to retrieve the packet for.\n * @param {Number} [version=1] The cnode version to be used in the request.\n * @param {Request} [request] The request object. Intended for internal use only.\n *\n * @private\n */\nGoogleEarthEnterpriseMetadata.prototype.getQuadTreePacket = function (\n  quadKey,\n  version,\n  request\n) {\n  version = defaultValue(version, 1);\n  quadKey = defaultValue(quadKey, \"\");\n  var resource = getMetadataResource(this, quadKey, version, request);\n\n  var promise = resource.fetchArrayBuffer();\n\n  if (!defined(promise)) {\n    return undefined; // Throttled\n  }\n\n  var tileInfo = this._tileInfo;\n  var key = this.key;\n  return promise.then(function (metadata) {\n    var decodePromise = taskProcessor.scheduleTask(\n      {\n        buffer: metadata,\n        quadKey: quadKey,\n        type: \"Metadata\",\n        key: key,\n      },\n      [metadata]\n    );\n\n    return decodePromise.then(function (result) {\n      var root;\n      var topLevelKeyLength = -1;\n      if (quadKey !== \"\") {\n        // Root tile has no data except children bits, so put them into the tile info\n        topLevelKeyLength = quadKey.length + 1;\n        var top = result[quadKey];\n        root = tileInfo[quadKey];\n        root._bits |= top._bits;\n\n        delete result[quadKey];\n      }\n\n      // Copy the resulting objects into tileInfo\n      // Make sure we start with shorter quadkeys first, so we know the parents have\n      //  already been processed. Otherwise we can lose ancestorHasTerrain along the way.\n      var keys = Object.keys(result);\n      keys.sort(function (a, b) {\n        return a.length - b.length;\n      });\n      var keysLength = keys.length;\n      for (var i = 0; i < keysLength; ++i) {\n        var key = keys[i];\n        var r = result[key];\n        if (r !== null) {\n          var info = GoogleEarthEnterpriseTileInformation.clone(result[key]);\n          var keyLength = key.length;\n          if (keyLength === topLevelKeyLength) {\n            info.setParent(root);\n          } else if (keyLength > 1) {\n            var parent = tileInfo[key.substring(0, key.length - 1)];\n            info.setParent(parent);\n          }\n          tileInfo[key] = info;\n        } else {\n          tileInfo[key] = null;\n        }\n      }\n    });\n  });\n};\n\n/**\n * Populates the metadata subtree down to the specified tile.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n *\n * @returns {Promise<GoogleEarthEnterpriseTileInformation>} A promise that resolves to the tile info for the requested quad key\n *\n * @private\n */\nGoogleEarthEnterpriseMetadata.prototype.populateSubtree = function (\n  x,\n  y,\n  level,\n  request\n) {\n  var quadkey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  return populateSubtree(this, quadkey, request);\n};\n\nfunction populateSubtree(that, quadKey, request) {\n  var tileInfo = that._tileInfo;\n  var q = quadKey;\n  var t = tileInfo[q];\n  // If we have tileInfo make sure sure it is not a node with a subtree that's not loaded\n  if (defined(t) && (!t.hasSubtree() || t.hasChildren())) {\n    return t;\n  }\n\n  while (t === undefined && q.length > 1) {\n    q = q.substring(0, q.length - 1);\n    t = tileInfo[q];\n  }\n\n  var subtreeRequest;\n  var subtreePromises = that._subtreePromises;\n  var promise = subtreePromises[q];\n  if (defined(promise)) {\n    return promise.then(function () {\n      // Recursively call this in case we need multiple subtree requests\n      subtreeRequest = new Request({\n        throttle: request.throttle,\n        throttleByServer: request.throttleByServer,\n        type: request.type,\n        priorityFunction: request.priorityFunction,\n      });\n      return populateSubtree(that, quadKey, subtreeRequest);\n    });\n  }\n\n  // t is either\n  //   null so one of its parents was a leaf node, so this tile doesn't exist\n  //   exists but doesn't have a subtree to request\n  //   undefined so no parent exists - this shouldn't ever happen once the provider is ready\n  if (!defined(t) || !t.hasSubtree()) {\n    return when.reject(\n      new RuntimeError(\"Couldn't load metadata for tile \" + quadKey)\n    );\n  }\n\n  // We need to split up the promise here because when will execute syncronously if getQuadTreePacket\n  //  is already resolved (like in the tests), so subtreePromises will never get cleared out.\n  //  Only the initial request will also remove the promise from subtreePromises.\n  promise = that.getQuadTreePacket(q, t.cnodeVersion, request);\n  if (!defined(promise)) {\n    return undefined;\n  }\n  subtreePromises[q] = promise;\n\n  return promise\n    .then(function () {\n      // Recursively call this in case we need multiple subtree requests\n      subtreeRequest = new Request({\n        throttle: request.throttle,\n        throttleByServer: request.throttleByServer,\n        type: request.type,\n        priorityFunction: request.priorityFunction,\n      });\n      return populateSubtree(that, quadKey, subtreeRequest);\n    })\n    .always(function () {\n      delete subtreePromises[q];\n    });\n}\n\n/**\n * Gets information about a tile\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @returns {GoogleEarthEnterpriseTileInformation|undefined} Information about the tile or undefined if it isn't loaded.\n *\n * @private\n */\nGoogleEarthEnterpriseMetadata.prototype.getTileInformation = function (\n  x,\n  y,\n  level\n) {\n  var quadkey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  return this._tileInfo[quadkey];\n};\n\n/**\n * Gets information about a tile from a quadKey\n *\n * @param {String} quadkey The quadkey for the tile\n * @returns {GoogleEarthEnterpriseTileInformation|undefined} Information about the tile or undefined if it isn't loaded.\n *\n * @private\n */\nGoogleEarthEnterpriseMetadata.prototype.getTileInformationFromQuadKey = function (\n  quadkey\n) {\n  return this._tileInfo[quadkey];\n};\n\nfunction getMetadataResource(that, quadKey, version, request) {\n  return that._resource.getDerivedResource({\n    url: \"flatfile?q2-0\" + quadKey + \"-q.\" + version.toString(),\n    request: request,\n  });\n}\n\nvar dbrootParser;\nvar dbrootParserPromise;\nfunction requestDbRoot(that) {\n  var resource = that._resource.getDerivedResource({\n    url: \"dbRoot.v5\",\n    queryParameters: {\n      output: \"proto\",\n    },\n  });\n\n  if (!defined(dbrootParserPromise)) {\n    var url = buildModuleUrl(\"ThirdParty/google-earth-dbroot-parser.js\");\n    var oldValue = window.cesiumGoogleEarthDbRootParser;\n    dbrootParserPromise = loadAndExecuteScript(url).then(function () {\n      dbrootParser = window.cesiumGoogleEarthDbRootParser(protobufMinimal);\n      if (defined(oldValue)) {\n        window.cesiumGoogleEarthDbRootParser = oldValue;\n      } else {\n        delete window.cesiumGoogleEarthDbRootParser;\n      }\n    });\n  }\n\n  return dbrootParserPromise\n    .then(function () {\n      return resource.fetchArrayBuffer();\n    })\n    .then(function (buf) {\n      var encryptedDbRootProto = dbrootParser.EncryptedDbRootProto.decode(\n        new Uint8Array(buf)\n      );\n\n      var byteArray = encryptedDbRootProto.encryptionData;\n      var offset = byteArray.byteOffset;\n      var end = offset + byteArray.byteLength;\n      var key = (that.key = byteArray.buffer.slice(offset, end));\n\n      byteArray = encryptedDbRootProto.dbrootData;\n      offset = byteArray.byteOffset;\n      end = offset + byteArray.byteLength;\n      var dbRootCompressed = byteArray.buffer.slice(offset, end);\n      return taskProcessor.scheduleTask(\n        {\n          buffer: dbRootCompressed,\n          type: \"DbRoot\",\n          key: key,\n        },\n        [dbRootCompressed]\n      );\n    })\n    .then(function (result) {\n      var dbRoot = dbrootParser.DbRootProto.decode(\n        new Uint8Array(result.buffer)\n      );\n      that.imageryPresent = defaultValue(\n        dbRoot.imageryPresent,\n        that.imageryPresent\n      );\n      that.protoImagery = dbRoot.protoImagery;\n      that.terrainPresent = defaultValue(\n        dbRoot.terrainPresent,\n        that.terrainPresent\n      );\n      if (defined(dbRoot.endSnippet) && defined(dbRoot.endSnippet.model)) {\n        var model = dbRoot.endSnippet.model;\n        that.negativeAltitudeExponentBias = defaultValue(\n          model.negativeAltitudeExponentBias,\n          that.negativeAltitudeExponentBias\n        );\n        that.negativeAltitudeThreshold = defaultValue(\n          model.compressedNegativeAltitudeThreshold,\n          that.negativeAltitudeThreshold\n        );\n      }\n      if (defined(dbRoot.databaseVersion)) {\n        that._quadPacketVersion = defaultValue(\n          dbRoot.databaseVersion.quadtreeVersion,\n          that._quadPacketVersion\n        );\n      }\n      var providers = that.providers;\n      var providerInfo = defaultValue(dbRoot.providerInfo, []);\n      var count = providerInfo.length;\n      for (var i = 0; i < count; ++i) {\n        var provider = providerInfo[i];\n        var copyrightString = provider.copyrightString;\n        if (defined(copyrightString)) {\n          providers[provider.providerId] = new Credit(copyrightString.value);\n        }\n      }\n    })\n    .otherwise(function () {\n      // Just eat the error and use the default values.\n      console.log(\"Failed to retrieve \" + resource.url + \". Using defaults.\");\n      that.key = defaultKey;\n    });\n}\nexport default GoogleEarthEnterpriseMetadata;\n"]},"metadata":{},"sourceType":"module"}