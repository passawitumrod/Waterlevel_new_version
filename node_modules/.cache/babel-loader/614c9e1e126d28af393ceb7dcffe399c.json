{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Quaternion from \"../Core/Quaternion.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport GroundPolylinePrimitive from \"../Scene/GroundPolylinePrimitive.js\";\nimport GroundPrimitive from \"../Scene/GroundPrimitive.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport BillboardGraphics from \"./BillboardGraphics.js\";\nimport BoxGraphics from \"./BoxGraphics.js\";\nimport ConstantPositionProperty from \"./ConstantPositionProperty.js\";\nimport CorridorGraphics from \"./CorridorGraphics.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport createRawPropertyDescriptor from \"./createRawPropertyDescriptor.js\";\nimport CylinderGraphics from \"./CylinderGraphics.js\";\nimport EllipseGraphics from \"./EllipseGraphics.js\";\nimport EllipsoidGraphics from \"./EllipsoidGraphics.js\";\nimport LabelGraphics from \"./LabelGraphics.js\";\nimport ModelGraphics from \"./ModelGraphics.js\";\nimport Cesium3DTilesetGraphics from \"./Cesium3DTilesetGraphics.js\";\nimport PathGraphics from \"./PathGraphics.js\";\nimport PlaneGraphics from \"./PlaneGraphics.js\";\nimport PointGraphics from \"./PointGraphics.js\";\nimport PolygonGraphics from \"./PolygonGraphics.js\";\nimport PolylineGraphics from \"./PolylineGraphics.js\";\nimport PolylineVolumeGraphics from \"./PolylineVolumeGraphics.js\";\nimport Property from \"./Property.js\";\nimport PropertyBag from \"./PropertyBag.js\";\nimport RectangleGraphics from \"./RectangleGraphics.js\";\nimport WallGraphics from \"./WallGraphics.js\";\nvar cartoScratch = new Cartographic();\n\nfunction createConstantPositionProperty(value) {\n  return new ConstantPositionProperty(value);\n}\n\nfunction createPositionPropertyDescriptor(name) {\n  return createPropertyDescriptor(name, undefined, createConstantPositionProperty);\n}\n\nfunction createPropertyTypeDescriptor(name, Type) {\n  return createPropertyDescriptor(name, undefined, function (value) {\n    if (value instanceof Type) {\n      return value;\n    }\n\n    return new Type(value);\n  });\n}\n/**\n * Entity instances aggregate multiple forms of visualization into a single high-level object.\n * They can be created manually and added to {@link Viewer#entities} or be produced by\n * data sources, such as {@link CzmlDataSource} and {@link GeoJsonDataSource}.\n * @alias Entity\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {String} [options.id] A unique identifier for this object. If none is provided, a GUID is generated.\n * @param {String} [options.name] A human readable name to display to users. It does not have to be unique.\n * @param {TimeIntervalCollection} [options.availability] The availability, if any, associated with this object.\n * @param {Boolean} [options.show] A boolean value indicating if the entity and its children are displayed.\n * @param {Property} [options.description] A string Property specifying an HTML description for this entity.\n * @param {PositionProperty} [options.position] A Property specifying the entity position.\n * @param {Property} [options.orientation] A Property specifying the entity orientation.\n * @param {Property} [options.viewFrom] A suggested initial offset for viewing this object.\n * @param {Entity} [options.parent] A parent entity to associate with this entity.\n * @param {BillboardGraphics} [options.billboard] A billboard to associate with this entity.\n * @param {BoxGraphics} [options.box] A box to associate with this entity.\n * @param {CorridorGraphics} [options.corridor] A corridor to associate with this entity.\n * @param {CylinderGraphics} [options.cylinder] A cylinder to associate with this entity.\n * @param {EllipseGraphics} [options.ellipse] A ellipse to associate with this entity.\n * @param {EllipsoidGraphics} [options.ellipsoid] A ellipsoid to associate with this entity.\n * @param {LabelGraphics} [options.label] A options.label to associate with this entity.\n * @param {ModelGraphics} [options.model] A model to associate with this entity.\n * @param {Cesium3DTilesetGraphics} [options.tileset] A 3D Tiles tileset to associate with this entity.\n * @param {PathGraphics} [options.path] A path to associate with this entity.\n * @param {PlaneGraphics} [options.plane] A plane to associate with this entity.\n * @param {PointGraphics} [options.point] A point to associate with this entity.\n * @param {PolygonGraphics} [options.polygon] A polygon to associate with this entity.\n * @param {PolylineGraphics} [options.polyline] A polyline to associate with this entity.\n * @param {PropertyBag} [options.properties] Arbitrary properties to associate with this entity.\n * @param {PolylineVolumeGraphics} [options.polylineVolume] A polylineVolume to associate with this entity.\n * @param {RectangleGraphics} [options.rectangle] A rectangle to associate with this entity.\n * @param {WallGraphics} [options.wall] A wall to associate with this entity.\n *\n * @see {@link https://cesium.com/docs/tutorials/creating-entities/|Creating Entities}\n */\n\n\nfunction Entity(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var id = options.id;\n\n  if (!defined(id)) {\n    id = createGuid();\n  }\n\n  this._availability = undefined;\n  this._id = id;\n  this._definitionChanged = new Event();\n  this._name = options.name;\n  this._show = defaultValue(options.show, true);\n  this._parent = undefined;\n  this._propertyNames = [\"billboard\", \"box\", \"corridor\", \"cylinder\", \"description\", \"ellipse\", //\n  \"ellipsoid\", \"label\", \"model\", \"tileset\", \"orientation\", \"path\", \"plane\", \"point\", \"polygon\", //\n  \"polyline\", \"polylineVolume\", \"position\", \"properties\", \"rectangle\", \"viewFrom\", \"wall\"];\n  this._billboard = undefined;\n  this._billboardSubscription = undefined;\n  this._box = undefined;\n  this._boxSubscription = undefined;\n  this._corridor = undefined;\n  this._corridorSubscription = undefined;\n  this._cylinder = undefined;\n  this._cylinderSubscription = undefined;\n  this._description = undefined;\n  this._descriptionSubscription = undefined;\n  this._ellipse = undefined;\n  this._ellipseSubscription = undefined;\n  this._ellipsoid = undefined;\n  this._ellipsoidSubscription = undefined;\n  this._label = undefined;\n  this._labelSubscription = undefined;\n  this._model = undefined;\n  this._modelSubscription = undefined;\n  this._tileset = undefined;\n  this._tilesetSubscription = undefined;\n  this._orientation = undefined;\n  this._orientationSubscription = undefined;\n  this._path = undefined;\n  this._pathSubscription = undefined;\n  this._plane = undefined;\n  this._planeSubscription = undefined;\n  this._point = undefined;\n  this._pointSubscription = undefined;\n  this._polygon = undefined;\n  this._polygonSubscription = undefined;\n  this._polyline = undefined;\n  this._polylineSubscription = undefined;\n  this._polylineVolume = undefined;\n  this._polylineVolumeSubscription = undefined;\n  this._position = undefined;\n  this._positionSubscription = undefined;\n  this._properties = undefined;\n  this._propertiesSubscription = undefined;\n  this._rectangle = undefined;\n  this._rectangleSubscription = undefined;\n  this._viewFrom = undefined;\n  this._viewFromSubscription = undefined;\n  this._wall = undefined;\n  this._wallSubscription = undefined;\n  this._children = [];\n  /**\n   * Gets or sets the entity collection that this entity belongs to.\n   * @type {EntityCollection}\n   */\n\n  this.entityCollection = undefined;\n  this.parent = options.parent;\n  this.merge(options);\n}\n\nfunction updateShow(entity, children, isShowing) {\n  var length = children.length;\n\n  for (var i = 0; i < length; i++) {\n    var child = children[i];\n    var childShow = child._show;\n    var oldValue = !isShowing && childShow;\n    var newValue = isShowing && childShow;\n\n    if (oldValue !== newValue) {\n      updateShow(child, child._children, isShowing);\n    }\n  }\n\n  entity._definitionChanged.raiseEvent(entity, \"isShowing\", isShowing, !isShowing);\n}\n\nObject.defineProperties(Entity.prototype, {\n  /**\n   * The availability, if any, associated with this object.\n   * If availability is undefined, it is assumed that this object's\n   * other properties will return valid data for any provided time.\n   * If availability exists, the objects other properties will only\n   * provide valid data if queried within the given interval.\n   * @memberof Entity.prototype\n   * @type {TimeIntervalCollection}\n   */\n  availability: createRawPropertyDescriptor(\"availability\"),\n\n  /**\n   * Gets the unique ID associated with this object.\n   * @memberof Entity.prototype\n   * @type {String}\n   */\n  id: {\n    get: function get() {\n      return this._id;\n    }\n  },\n\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof Entity.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function get() {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the name of the object.  The name is intended for end-user\n   * consumption and does not need to be unique.\n   * @memberof Entity.prototype\n   * @type {String}\n   */\n  name: createRawPropertyDescriptor(\"name\"),\n\n  /**\n   * Gets or sets whether this entity should be displayed. When set to true,\n   * the entity is only displayed if the parent entity's show property is also true.\n   * @memberof Entity.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function get() {\n      return this._show;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      if (value === this._show) {\n        return;\n      }\n\n      var wasShowing = this.isShowing;\n      this._show = value;\n      var isShowing = this.isShowing;\n\n      if (wasShowing !== isShowing) {\n        updateShow(this, this._children, isShowing);\n      }\n\n      this._definitionChanged.raiseEvent(this, \"show\", value, !value);\n    }\n  },\n\n  /**\n   * Gets whether this entity is being displayed, taking into account\n   * the visibility of any ancestor entities.\n   * @memberof Entity.prototype\n   * @type {Boolean}\n   */\n  isShowing: {\n    get: function get() {\n      return this._show && (!defined(this.entityCollection) || this.entityCollection.show) && (!defined(this._parent) || this._parent.isShowing);\n    }\n  },\n\n  /**\n   * Gets or sets the parent object.\n   * @memberof Entity.prototype\n   * @type {Entity}\n   */\n  parent: {\n    get: function get() {\n      return this._parent;\n    },\n    set: function set(value) {\n      var oldValue = this._parent;\n\n      if (oldValue === value) {\n        return;\n      }\n\n      var wasShowing = this.isShowing;\n\n      if (defined(oldValue)) {\n        var index = oldValue._children.indexOf(this);\n\n        oldValue._children.splice(index, 1);\n      }\n\n      this._parent = value;\n\n      if (defined(value)) {\n        value._children.push(this);\n      }\n\n      var isShowing = this.isShowing;\n\n      if (wasShowing !== isShowing) {\n        updateShow(this, this._children, isShowing);\n      }\n\n      this._definitionChanged.raiseEvent(this, \"parent\", value, oldValue);\n    }\n  },\n\n  /**\n   * Gets the names of all properties registered on this instance.\n   * @memberof Entity.prototype\n   * @type {Array}\n   */\n  propertyNames: {\n    get: function get() {\n      return this._propertyNames;\n    }\n  },\n\n  /**\n   * Gets or sets the billboard.\n   * @memberof Entity.prototype\n   * @type {BillboardGraphics}\n   */\n  billboard: createPropertyTypeDescriptor(\"billboard\", BillboardGraphics),\n\n  /**\n   * Gets or sets the box.\n   * @memberof Entity.prototype\n   * @type {BoxGraphics}\n   */\n  box: createPropertyTypeDescriptor(\"box\", BoxGraphics),\n\n  /**\n   * Gets or sets the corridor.\n   * @memberof Entity.prototype\n   * @type {CorridorGraphics}\n   */\n  corridor: createPropertyTypeDescriptor(\"corridor\", CorridorGraphics),\n\n  /**\n   * Gets or sets the cylinder.\n   * @memberof Entity.prototype\n   * @type {CylinderGraphics}\n   */\n  cylinder: createPropertyTypeDescriptor(\"cylinder\", CylinderGraphics),\n\n  /**\n   * Gets or sets the description.\n   * @memberof Entity.prototype\n   * @type {Property}\n   */\n  description: createPropertyDescriptor(\"description\"),\n\n  /**\n   * Gets or sets the ellipse.\n   * @memberof Entity.prototype\n   * @type {EllipseGraphics}\n   */\n  ellipse: createPropertyTypeDescriptor(\"ellipse\", EllipseGraphics),\n\n  /**\n   * Gets or sets the ellipsoid.\n   * @memberof Entity.prototype\n   * @type {EllipsoidGraphics}\n   */\n  ellipsoid: createPropertyTypeDescriptor(\"ellipsoid\", EllipsoidGraphics),\n\n  /**\n   * Gets or sets the label.\n   * @memberof Entity.prototype\n   * @type {LabelGraphics}\n   */\n  label: createPropertyTypeDescriptor(\"label\", LabelGraphics),\n\n  /**\n   * Gets or sets the model.\n   * @memberof Entity.prototype\n   * @type {ModelGraphics}\n   */\n  model: createPropertyTypeDescriptor(\"model\", ModelGraphics),\n\n  /**\n   * Gets or sets the tileset.\n   * @memberof Entity.prototype\n   * @type {Cesium3DTilesetGraphics}\n   */\n  tileset: createPropertyTypeDescriptor(\"tileset\", Cesium3DTilesetGraphics),\n\n  /**\n   * Gets or sets the orientation.\n   * @memberof Entity.prototype\n   * @type {Property}\n   */\n  orientation: createPropertyDescriptor(\"orientation\"),\n\n  /**\n   * Gets or sets the path.\n   * @memberof Entity.prototype\n   * @type {PathGraphics}\n   */\n  path: createPropertyTypeDescriptor(\"path\", PathGraphics),\n\n  /**\n   * Gets or sets the plane.\n   * @memberof Entity.prototype\n   * @type {PlaneGraphics}\n   */\n  plane: createPropertyTypeDescriptor(\"plane\", PlaneGraphics),\n\n  /**\n   * Gets or sets the point graphic.\n   * @memberof Entity.prototype\n   * @type {PointGraphics}\n   */\n  point: createPropertyTypeDescriptor(\"point\", PointGraphics),\n\n  /**\n   * Gets or sets the polygon.\n   * @memberof Entity.prototype\n   * @type {PolygonGraphics}\n   */\n  polygon: createPropertyTypeDescriptor(\"polygon\", PolygonGraphics),\n\n  /**\n   * Gets or sets the polyline.\n   * @memberof Entity.prototype\n   * @type {PolylineGraphics}\n   */\n  polyline: createPropertyTypeDescriptor(\"polyline\", PolylineGraphics),\n\n  /**\n   * Gets or sets the polyline volume.\n   * @memberof Entity.prototype\n   * @type {PolylineVolumeGraphics}\n   */\n  polylineVolume: createPropertyTypeDescriptor(\"polylineVolume\", PolylineVolumeGraphics),\n\n  /**\n   * Gets or sets the bag of arbitrary properties associated with this entity.\n   * @memberof Entity.prototype\n   * @type {PropertyBag}\n   */\n  properties: createPropertyTypeDescriptor(\"properties\", PropertyBag),\n\n  /**\n   * Gets or sets the position.\n   * @memberof Entity.prototype\n   * @type {PositionProperty}\n   */\n  position: createPositionPropertyDescriptor(\"position\"),\n\n  /**\n   * Gets or sets the rectangle.\n   * @memberof Entity.prototype\n   * @type {RectangleGraphics}\n   */\n  rectangle: createPropertyTypeDescriptor(\"rectangle\", RectangleGraphics),\n\n  /**\n   * Gets or sets the suggested initial offset when tracking this object.\n   * The offset is typically defined in the east-north-up reference frame,\n   * but may be another frame depending on the object's velocity.\n   * @memberof Entity.prototype\n   * @type {Property}\n   */\n  viewFrom: createPropertyDescriptor(\"viewFrom\"),\n\n  /**\n   * Gets or sets the wall.\n   * @memberof Entity.prototype\n   * @type {WallGraphics}\n   */\n  wall: createPropertyTypeDescriptor(\"wall\", WallGraphics)\n});\n/**\n * Given a time, returns true if this object should have data during that time.\n *\n * @param {JulianDate} time The time to check availability for.\n * @returns {Boolean} true if the object should have data during the provided time, false otherwise.\n */\n\nEntity.prototype.isAvailable = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  } //>>includeEnd('debug');\n\n\n  var availability = this._availability;\n  return !defined(availability) || availability.contains(time);\n};\n/**\n * Adds a property to this object.  Once a property is added, it can be\n * observed with {@link Entity#definitionChanged} and composited\n * with {@link CompositeEntityCollection}\n *\n * @param {String} propertyName The name of the property to add.\n *\n * @exception {DeveloperError} \"propertyName\" is a reserved property name.\n * @exception {DeveloperError} \"propertyName\" is already a registered property.\n */\n\n\nEntity.prototype.addProperty = function (propertyName) {\n  var propertyNames = this._propertyNames; //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(propertyName)) {\n    throw new DeveloperError(\"propertyName is required.\");\n  }\n\n  if (propertyNames.indexOf(propertyName) !== -1) {\n    throw new DeveloperError(propertyName + \" is already a registered property.\");\n  }\n\n  if (propertyName in this) {\n    throw new DeveloperError(propertyName + \" is a reserved property name.\");\n  } //>>includeEnd('debug');\n\n\n  propertyNames.push(propertyName);\n  Object.defineProperty(this, propertyName, createRawPropertyDescriptor(propertyName, true));\n};\n/**\n * Removed a property previously added with addProperty.\n *\n * @param {String} propertyName The name of the property to remove.\n *\n * @exception {DeveloperError} \"propertyName\" is a reserved property name.\n * @exception {DeveloperError} \"propertyName\" is not a registered property.\n */\n\n\nEntity.prototype.removeProperty = function (propertyName) {\n  var propertyNames = this._propertyNames;\n  var index = propertyNames.indexOf(propertyName); //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(propertyName)) {\n    throw new DeveloperError(\"propertyName is required.\");\n  }\n\n  if (index === -1) {\n    throw new DeveloperError(propertyName + \" is not a registered property.\");\n  } //>>includeEnd('debug');\n\n\n  this._propertyNames.splice(index, 1);\n\n  delete this[propertyName];\n};\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {Entity} source The object to be merged into this object.\n */\n\n\nEntity.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  } //>>includeEnd('debug');\n  //Name, show, and availability are not Property objects and are currently handled differently.\n  //source.show is intentionally ignored because this.show always has a value.\n\n\n  this.name = defaultValue(this.name, source.name);\n  this.availability = defaultValue(this.availability, source.availability);\n  var propertyNames = this._propertyNames;\n  var sourcePropertyNames = defined(source._propertyNames) ? source._propertyNames : Object.keys(source);\n  var propertyNamesLength = sourcePropertyNames.length;\n\n  for (var i = 0; i < propertyNamesLength; i++) {\n    var name = sourcePropertyNames[i]; //Ignore parent when merging, this only happens at construction time.\n\n    if (name === \"parent\") {\n      continue;\n    }\n\n    var targetProperty = this[name];\n    var sourceProperty = source[name]; //Custom properties that are registered on the source entity must also\n    //get registered on this entity.\n\n    if (!defined(targetProperty) && propertyNames.indexOf(name) === -1) {\n      this.addProperty(name);\n    }\n\n    if (defined(sourceProperty)) {\n      if (defined(targetProperty)) {\n        if (defined(targetProperty.merge)) {\n          targetProperty.merge(sourceProperty);\n        }\n      } else if (defined(sourceProperty.merge) && defined(sourceProperty.clone)) {\n        this[name] = sourceProperty.clone();\n      } else {\n        this[name] = sourceProperty;\n      }\n    }\n  }\n};\n\nvar matrix3Scratch = new Matrix3();\nvar positionScratch = new Cartesian3();\nvar orientationScratch = new Quaternion();\n/**\n * Computes the model matrix for the entity's transform at specified time. Returns undefined if orientation or position\n * are undefined.\n *\n * @param {JulianDate} time The time to retrieve model matrix for.\n * @param {Matrix4} [result] The object onto which to store the result.\n *\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided. Result is undefined if position or orientation are undefined.\n */\n\nEntity.prototype.computeModelMatrix = function (time, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"time\", time); //>>includeEnd('debug');\n\n  var position = Property.getValueOrUndefined(this._position, time, positionScratch);\n\n  if (!defined(position)) {\n    return undefined;\n  }\n\n  var orientation = Property.getValueOrUndefined(this._orientation, time, orientationScratch);\n\n  if (!defined(orientation)) {\n    result = Transforms.eastNorthUpToFixedFrame(position, undefined, result);\n  } else {\n    result = Matrix4.fromRotationTranslation(Matrix3.fromQuaternion(orientation, matrix3Scratch), position, result);\n  }\n\n  return result;\n};\n/**\n * @private\n */\n\n\nEntity.prototype.computeModelMatrixForHeightReference = function (time, heightReferenceProperty, heightOffset, ellipsoid, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"time\", time); //>>includeEnd('debug');\n\n  var heightReference = Property.getValueOrDefault(heightReferenceProperty, time, HeightReference.NONE);\n  var position = Property.getValueOrUndefined(this._position, time, positionScratch);\n\n  if (heightReference === HeightReference.NONE || !defined(position) || Cartesian3.equalsEpsilon(position, Cartesian3.ZERO, CesiumMath.EPSILON8)) {\n    return this.computeModelMatrix(time, result);\n  }\n\n  var carto = ellipsoid.cartesianToCartographic(position, cartoScratch);\n\n  if (heightReference === HeightReference.CLAMP_TO_GROUND) {\n    carto.height = heightOffset;\n  } else {\n    carto.height += heightOffset;\n  }\n\n  position = ellipsoid.cartographicToCartesian(carto, position);\n  var orientation = Property.getValueOrUndefined(this._orientation, time, orientationScratch);\n\n  if (!defined(orientation)) {\n    result = Transforms.eastNorthUpToFixedFrame(position, undefined, result);\n  } else {\n    result = Matrix4.fromRotationTranslation(Matrix3.fromQuaternion(orientation, matrix3Scratch), position, result);\n  }\n\n  return result;\n};\n/**\n * Checks if the given Scene supports materials besides Color on Entities draped on terrain or 3D Tiles.\n * If this feature is not supported, Entities with non-color materials but no `height` will\n * instead be rendered as if height is 0.\n *\n * @param {Scene} scene The current scene.\n * @returns {Boolean} Whether or not the current scene supports materials for entities on terrain.\n */\n\n\nEntity.supportsMaterialsforEntitiesOnTerrain = function (scene) {\n  return GroundPrimitive.supportsMaterials(scene);\n};\n/**\n * Checks if the given Scene supports polylines clamped to terrain or 3D Tiles.\n * If this feature is not supported, Entities with PolylineGraphics will be rendered with vertices at\n * the provided heights and using the `arcType` parameter instead of clamped to the ground.\n *\n * @param {Scene} scene The current scene.\n * @returns {Boolean} Whether or not the current scene supports polylines on terrain or 3D TIles.\n */\n\n\nEntity.supportsPolylinesOnTerrain = function (scene) {\n  return GroundPolylinePrimitive.isSupported(scene);\n};\n\nexport default Entity;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/Entity.js"],"names":["Cartesian3","Cartographic","Check","createGuid","defaultValue","defined","DeveloperError","Event","CesiumMath","Matrix3","Matrix4","Quaternion","Transforms","GroundPolylinePrimitive","GroundPrimitive","HeightReference","BillboardGraphics","BoxGraphics","ConstantPositionProperty","CorridorGraphics","createPropertyDescriptor","createRawPropertyDescriptor","CylinderGraphics","EllipseGraphics","EllipsoidGraphics","LabelGraphics","ModelGraphics","Cesium3DTilesetGraphics","PathGraphics","PlaneGraphics","PointGraphics","PolygonGraphics","PolylineGraphics","PolylineVolumeGraphics","Property","PropertyBag","RectangleGraphics","WallGraphics","cartoScratch","createConstantPositionProperty","value","createPositionPropertyDescriptor","name","undefined","createPropertyTypeDescriptor","Type","Entity","options","EMPTY_OBJECT","id","_availability","_id","_definitionChanged","_name","_show","show","_parent","_propertyNames","_billboard","_billboardSubscription","_box","_boxSubscription","_corridor","_corridorSubscription","_cylinder","_cylinderSubscription","_description","_descriptionSubscription","_ellipse","_ellipseSubscription","_ellipsoid","_ellipsoidSubscription","_label","_labelSubscription","_model","_modelSubscription","_tileset","_tilesetSubscription","_orientation","_orientationSubscription","_path","_pathSubscription","_plane","_planeSubscription","_point","_pointSubscription","_polygon","_polygonSubscription","_polyline","_polylineSubscription","_polylineVolume","_polylineVolumeSubscription","_position","_positionSubscription","_properties","_propertiesSubscription","_rectangle","_rectangleSubscription","_viewFrom","_viewFromSubscription","_wall","_wallSubscription","_children","entityCollection","parent","merge","updateShow","entity","children","isShowing","length","i","child","childShow","oldValue","newValue","raiseEvent","Object","defineProperties","prototype","availability","get","definitionChanged","set","wasShowing","index","indexOf","splice","push","propertyNames","billboard","box","corridor","cylinder","description","ellipse","ellipsoid","label","model","tileset","orientation","path","plane","point","polygon","polyline","polylineVolume","properties","position","rectangle","viewFrom","wall","isAvailable","time","contains","addProperty","propertyName","defineProperty","removeProperty","source","sourcePropertyNames","keys","propertyNamesLength","targetProperty","sourceProperty","clone","matrix3Scratch","positionScratch","orientationScratch","computeModelMatrix","result","typeOf","object","getValueOrUndefined","eastNorthUpToFixedFrame","fromRotationTranslation","fromQuaternion","computeModelMatrixForHeightReference","heightReferenceProperty","heightOffset","heightReference","getValueOrDefault","NONE","equalsEpsilon","ZERO","EPSILON8","carto","cartesianToCartographic","CLAMP_TO_GROUND","height","cartographicToCartesian","supportsMaterialsforEntitiesOnTerrain","scene","supportsMaterials","supportsPolylinesOnTerrain","isSupported"],"mappings":"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","sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Quaternion from \"../Core/Quaternion.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport GroundPolylinePrimitive from \"../Scene/GroundPolylinePrimitive.js\";\nimport GroundPrimitive from \"../Scene/GroundPrimitive.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport BillboardGraphics from \"./BillboardGraphics.js\";\nimport BoxGraphics from \"./BoxGraphics.js\";\nimport ConstantPositionProperty from \"./ConstantPositionProperty.js\";\nimport CorridorGraphics from \"./CorridorGraphics.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport createRawPropertyDescriptor from \"./createRawPropertyDescriptor.js\";\nimport CylinderGraphics from \"./CylinderGraphics.js\";\nimport EllipseGraphics from \"./EllipseGraphics.js\";\nimport EllipsoidGraphics from \"./EllipsoidGraphics.js\";\nimport LabelGraphics from \"./LabelGraphics.js\";\nimport ModelGraphics from \"./ModelGraphics.js\";\nimport Cesium3DTilesetGraphics from \"./Cesium3DTilesetGraphics.js\";\nimport PathGraphics from \"./PathGraphics.js\";\nimport PlaneGraphics from \"./PlaneGraphics.js\";\nimport PointGraphics from \"./PointGraphics.js\";\nimport PolygonGraphics from \"./PolygonGraphics.js\";\nimport PolylineGraphics from \"./PolylineGraphics.js\";\nimport PolylineVolumeGraphics from \"./PolylineVolumeGraphics.js\";\nimport Property from \"./Property.js\";\nimport PropertyBag from \"./PropertyBag.js\";\nimport RectangleGraphics from \"./RectangleGraphics.js\";\nimport WallGraphics from \"./WallGraphics.js\";\n\nvar cartoScratch = new Cartographic();\n\nfunction createConstantPositionProperty(value) {\n  return new ConstantPositionProperty(value);\n}\n\nfunction createPositionPropertyDescriptor(name) {\n  return createPropertyDescriptor(\n    name,\n    undefined,\n    createConstantPositionProperty\n  );\n}\n\nfunction createPropertyTypeDescriptor(name, Type) {\n  return createPropertyDescriptor(name, undefined, function (value) {\n    if (value instanceof Type) {\n      return value;\n    }\n    return new Type(value);\n  });\n}\n\n/**\n * Entity instances aggregate multiple forms of visualization into a single high-level object.\n * They can be created manually and added to {@link Viewer#entities} or be produced by\n * data sources, such as {@link CzmlDataSource} and {@link GeoJsonDataSource}.\n * @alias Entity\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {String} [options.id] A unique identifier for this object. If none is provided, a GUID is generated.\n * @param {String} [options.name] A human readable name to display to users. It does not have to be unique.\n * @param {TimeIntervalCollection} [options.availability] The availability, if any, associated with this object.\n * @param {Boolean} [options.show] A boolean value indicating if the entity and its children are displayed.\n * @param {Property} [options.description] A string Property specifying an HTML description for this entity.\n * @param {PositionProperty} [options.position] A Property specifying the entity position.\n * @param {Property} [options.orientation] A Property specifying the entity orientation.\n * @param {Property} [options.viewFrom] A suggested initial offset for viewing this object.\n * @param {Entity} [options.parent] A parent entity to associate with this entity.\n * @param {BillboardGraphics} [options.billboard] A billboard to associate with this entity.\n * @param {BoxGraphics} [options.box] A box to associate with this entity.\n * @param {CorridorGraphics} [options.corridor] A corridor to associate with this entity.\n * @param {CylinderGraphics} [options.cylinder] A cylinder to associate with this entity.\n * @param {EllipseGraphics} [options.ellipse] A ellipse to associate with this entity.\n * @param {EllipsoidGraphics} [options.ellipsoid] A ellipsoid to associate with this entity.\n * @param {LabelGraphics} [options.label] A options.label to associate with this entity.\n * @param {ModelGraphics} [options.model] A model to associate with this entity.\n * @param {Cesium3DTilesetGraphics} [options.tileset] A 3D Tiles tileset to associate with this entity.\n * @param {PathGraphics} [options.path] A path to associate with this entity.\n * @param {PlaneGraphics} [options.plane] A plane to associate with this entity.\n * @param {PointGraphics} [options.point] A point to associate with this entity.\n * @param {PolygonGraphics} [options.polygon] A polygon to associate with this entity.\n * @param {PolylineGraphics} [options.polyline] A polyline to associate with this entity.\n * @param {PropertyBag} [options.properties] Arbitrary properties to associate with this entity.\n * @param {PolylineVolumeGraphics} [options.polylineVolume] A polylineVolume to associate with this entity.\n * @param {RectangleGraphics} [options.rectangle] A rectangle to associate with this entity.\n * @param {WallGraphics} [options.wall] A wall to associate with this entity.\n *\n * @see {@link https://cesium.com/docs/tutorials/creating-entities/|Creating Entities}\n */\nfunction Entity(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var id = options.id;\n  if (!defined(id)) {\n    id = createGuid();\n  }\n\n  this._availability = undefined;\n  this._id = id;\n  this._definitionChanged = new Event();\n  this._name = options.name;\n  this._show = defaultValue(options.show, true);\n  this._parent = undefined;\n  this._propertyNames = [\n    \"billboard\",\n    \"box\",\n    \"corridor\",\n    \"cylinder\",\n    \"description\",\n    \"ellipse\", //\n    \"ellipsoid\",\n    \"label\",\n    \"model\",\n    \"tileset\",\n    \"orientation\",\n    \"path\",\n    \"plane\",\n    \"point\",\n    \"polygon\", //\n    \"polyline\",\n    \"polylineVolume\",\n    \"position\",\n    \"properties\",\n    \"rectangle\",\n    \"viewFrom\",\n    \"wall\",\n  ];\n\n  this._billboard = undefined;\n  this._billboardSubscription = undefined;\n  this._box = undefined;\n  this._boxSubscription = undefined;\n  this._corridor = undefined;\n  this._corridorSubscription = undefined;\n  this._cylinder = undefined;\n  this._cylinderSubscription = undefined;\n  this._description = undefined;\n  this._descriptionSubscription = undefined;\n  this._ellipse = undefined;\n  this._ellipseSubscription = undefined;\n  this._ellipsoid = undefined;\n  this._ellipsoidSubscription = undefined;\n  this._label = undefined;\n  this._labelSubscription = undefined;\n  this._model = undefined;\n  this._modelSubscription = undefined;\n  this._tileset = undefined;\n  this._tilesetSubscription = undefined;\n  this._orientation = undefined;\n  this._orientationSubscription = undefined;\n  this._path = undefined;\n  this._pathSubscription = undefined;\n  this._plane = undefined;\n  this._planeSubscription = undefined;\n  this._point = undefined;\n  this._pointSubscription = undefined;\n  this._polygon = undefined;\n  this._polygonSubscription = undefined;\n  this._polyline = undefined;\n  this._polylineSubscription = undefined;\n  this._polylineVolume = undefined;\n  this._polylineVolumeSubscription = undefined;\n  this._position = undefined;\n  this._positionSubscription = undefined;\n  this._properties = undefined;\n  this._propertiesSubscription = undefined;\n  this._rectangle = undefined;\n  this._rectangleSubscription = undefined;\n  this._viewFrom = undefined;\n  this._viewFromSubscription = undefined;\n  this._wall = undefined;\n  this._wallSubscription = undefined;\n  this._children = [];\n\n  /**\n   * Gets or sets the entity collection that this entity belongs to.\n   * @type {EntityCollection}\n   */\n  this.entityCollection = undefined;\n\n  this.parent = options.parent;\n  this.merge(options);\n}\n\nfunction updateShow(entity, children, isShowing) {\n  var length = children.length;\n  for (var i = 0; i < length; i++) {\n    var child = children[i];\n    var childShow = child._show;\n    var oldValue = !isShowing && childShow;\n    var newValue = isShowing && childShow;\n    if (oldValue !== newValue) {\n      updateShow(child, child._children, isShowing);\n    }\n  }\n  entity._definitionChanged.raiseEvent(\n    entity,\n    \"isShowing\",\n    isShowing,\n    !isShowing\n  );\n}\n\nObject.defineProperties(Entity.prototype, {\n  /**\n   * The availability, if any, associated with this object.\n   * If availability is undefined, it is assumed that this object's\n   * other properties will return valid data for any provided time.\n   * If availability exists, the objects other properties will only\n   * provide valid data if queried within the given interval.\n   * @memberof Entity.prototype\n   * @type {TimeIntervalCollection}\n   */\n  availability: createRawPropertyDescriptor(\"availability\"),\n  /**\n   * Gets the unique ID associated with this object.\n   * @memberof Entity.prototype\n   * @type {String}\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof Entity.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets or sets the name of the object.  The name is intended for end-user\n   * consumption and does not need to be unique.\n   * @memberof Entity.prototype\n   * @type {String}\n   */\n  name: createRawPropertyDescriptor(\"name\"),\n  /**\n   * Gets or sets whether this entity should be displayed. When set to true,\n   * the entity is only displayed if the parent entity's show property is also true.\n   * @memberof Entity.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (value === this._show) {\n        return;\n      }\n\n      var wasShowing = this.isShowing;\n      this._show = value;\n      var isShowing = this.isShowing;\n\n      if (wasShowing !== isShowing) {\n        updateShow(this, this._children, isShowing);\n      }\n\n      this._definitionChanged.raiseEvent(this, \"show\", value, !value);\n    },\n  },\n  /**\n   * Gets whether this entity is being displayed, taking into account\n   * the visibility of any ancestor entities.\n   * @memberof Entity.prototype\n   * @type {Boolean}\n   */\n  isShowing: {\n    get: function () {\n      return (\n        this._show &&\n        (!defined(this.entityCollection) || this.entityCollection.show) &&\n        (!defined(this._parent) || this._parent.isShowing)\n      );\n    },\n  },\n  /**\n   * Gets or sets the parent object.\n   * @memberof Entity.prototype\n   * @type {Entity}\n   */\n  parent: {\n    get: function () {\n      return this._parent;\n    },\n    set: function (value) {\n      var oldValue = this._parent;\n\n      if (oldValue === value) {\n        return;\n      }\n\n      var wasShowing = this.isShowing;\n      if (defined(oldValue)) {\n        var index = oldValue._children.indexOf(this);\n        oldValue._children.splice(index, 1);\n      }\n\n      this._parent = value;\n      if (defined(value)) {\n        value._children.push(this);\n      }\n\n      var isShowing = this.isShowing;\n\n      if (wasShowing !== isShowing) {\n        updateShow(this, this._children, isShowing);\n      }\n\n      this._definitionChanged.raiseEvent(this, \"parent\", value, oldValue);\n    },\n  },\n  /**\n   * Gets the names of all properties registered on this instance.\n   * @memberof Entity.prototype\n   * @type {Array}\n   */\n  propertyNames: {\n    get: function () {\n      return this._propertyNames;\n    },\n  },\n  /**\n   * Gets or sets the billboard.\n   * @memberof Entity.prototype\n   * @type {BillboardGraphics}\n   */\n  billboard: createPropertyTypeDescriptor(\"billboard\", BillboardGraphics),\n  /**\n   * Gets or sets the box.\n   * @memberof Entity.prototype\n   * @type {BoxGraphics}\n   */\n  box: createPropertyTypeDescriptor(\"box\", BoxGraphics),\n  /**\n   * Gets or sets the corridor.\n   * @memberof Entity.prototype\n   * @type {CorridorGraphics}\n   */\n  corridor: createPropertyTypeDescriptor(\"corridor\", CorridorGraphics),\n  /**\n   * Gets or sets the cylinder.\n   * @memberof Entity.prototype\n   * @type {CylinderGraphics}\n   */\n  cylinder: createPropertyTypeDescriptor(\"cylinder\", CylinderGraphics),\n  /**\n   * Gets or sets the description.\n   * @memberof Entity.prototype\n   * @type {Property}\n   */\n  description: createPropertyDescriptor(\"description\"),\n  /**\n   * Gets or sets the ellipse.\n   * @memberof Entity.prototype\n   * @type {EllipseGraphics}\n   */\n  ellipse: createPropertyTypeDescriptor(\"ellipse\", EllipseGraphics),\n  /**\n   * Gets or sets the ellipsoid.\n   * @memberof Entity.prototype\n   * @type {EllipsoidGraphics}\n   */\n  ellipsoid: createPropertyTypeDescriptor(\"ellipsoid\", EllipsoidGraphics),\n  /**\n   * Gets or sets the label.\n   * @memberof Entity.prototype\n   * @type {LabelGraphics}\n   */\n  label: createPropertyTypeDescriptor(\"label\", LabelGraphics),\n  /**\n   * Gets or sets the model.\n   * @memberof Entity.prototype\n   * @type {ModelGraphics}\n   */\n  model: createPropertyTypeDescriptor(\"model\", ModelGraphics),\n  /**\n   * Gets or sets the tileset.\n   * @memberof Entity.prototype\n   * @type {Cesium3DTilesetGraphics}\n   */\n  tileset: createPropertyTypeDescriptor(\"tileset\", Cesium3DTilesetGraphics),\n  /**\n   * Gets or sets the orientation.\n   * @memberof Entity.prototype\n   * @type {Property}\n   */\n  orientation: createPropertyDescriptor(\"orientation\"),\n  /**\n   * Gets or sets the path.\n   * @memberof Entity.prototype\n   * @type {PathGraphics}\n   */\n  path: createPropertyTypeDescriptor(\"path\", PathGraphics),\n  /**\n   * Gets or sets the plane.\n   * @memberof Entity.prototype\n   * @type {PlaneGraphics}\n   */\n  plane: createPropertyTypeDescriptor(\"plane\", PlaneGraphics),\n  /**\n   * Gets or sets the point graphic.\n   * @memberof Entity.prototype\n   * @type {PointGraphics}\n   */\n  point: createPropertyTypeDescriptor(\"point\", PointGraphics),\n  /**\n   * Gets or sets the polygon.\n   * @memberof Entity.prototype\n   * @type {PolygonGraphics}\n   */\n  polygon: createPropertyTypeDescriptor(\"polygon\", PolygonGraphics),\n  /**\n   * Gets or sets the polyline.\n   * @memberof Entity.prototype\n   * @type {PolylineGraphics}\n   */\n  polyline: createPropertyTypeDescriptor(\"polyline\", PolylineGraphics),\n  /**\n   * Gets or sets the polyline volume.\n   * @memberof Entity.prototype\n   * @type {PolylineVolumeGraphics}\n   */\n  polylineVolume: createPropertyTypeDescriptor(\n    \"polylineVolume\",\n    PolylineVolumeGraphics\n  ),\n  /**\n   * Gets or sets the bag of arbitrary properties associated with this entity.\n   * @memberof Entity.prototype\n   * @type {PropertyBag}\n   */\n  properties: createPropertyTypeDescriptor(\"properties\", PropertyBag),\n  /**\n   * Gets or sets the position.\n   * @memberof Entity.prototype\n   * @type {PositionProperty}\n   */\n  position: createPositionPropertyDescriptor(\"position\"),\n  /**\n   * Gets or sets the rectangle.\n   * @memberof Entity.prototype\n   * @type {RectangleGraphics}\n   */\n  rectangle: createPropertyTypeDescriptor(\"rectangle\", RectangleGraphics),\n  /**\n   * Gets or sets the suggested initial offset when tracking this object.\n   * The offset is typically defined in the east-north-up reference frame,\n   * but may be another frame depending on the object's velocity.\n   * @memberof Entity.prototype\n   * @type {Property}\n   */\n  viewFrom: createPropertyDescriptor(\"viewFrom\"),\n  /**\n   * Gets or sets the wall.\n   * @memberof Entity.prototype\n   * @type {WallGraphics}\n   */\n  wall: createPropertyTypeDescriptor(\"wall\", WallGraphics),\n});\n\n/**\n * Given a time, returns true if this object should have data during that time.\n *\n * @param {JulianDate} time The time to check availability for.\n * @returns {Boolean} true if the object should have data during the provided time, false otherwise.\n */\nEntity.prototype.isAvailable = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var availability = this._availability;\n  return !defined(availability) || availability.contains(time);\n};\n\n/**\n * Adds a property to this object.  Once a property is added, it can be\n * observed with {@link Entity#definitionChanged} and composited\n * with {@link CompositeEntityCollection}\n *\n * @param {String} propertyName The name of the property to add.\n *\n * @exception {DeveloperError} \"propertyName\" is a reserved property name.\n * @exception {DeveloperError} \"propertyName\" is already a registered property.\n */\nEntity.prototype.addProperty = function (propertyName) {\n  var propertyNames = this._propertyNames;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(propertyName)) {\n    throw new DeveloperError(\"propertyName is required.\");\n  }\n  if (propertyNames.indexOf(propertyName) !== -1) {\n    throw new DeveloperError(\n      propertyName + \" is already a registered property.\"\n    );\n  }\n  if (propertyName in this) {\n    throw new DeveloperError(propertyName + \" is a reserved property name.\");\n  }\n  //>>includeEnd('debug');\n\n  propertyNames.push(propertyName);\n  Object.defineProperty(\n    this,\n    propertyName,\n    createRawPropertyDescriptor(propertyName, true)\n  );\n};\n\n/**\n * Removed a property previously added with addProperty.\n *\n * @param {String} propertyName The name of the property to remove.\n *\n * @exception {DeveloperError} \"propertyName\" is a reserved property name.\n * @exception {DeveloperError} \"propertyName\" is not a registered property.\n */\nEntity.prototype.removeProperty = function (propertyName) {\n  var propertyNames = this._propertyNames;\n  var index = propertyNames.indexOf(propertyName);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(propertyName)) {\n    throw new DeveloperError(\"propertyName is required.\");\n  }\n  if (index === -1) {\n    throw new DeveloperError(propertyName + \" is not a registered property.\");\n  }\n  //>>includeEnd('debug');\n\n  this._propertyNames.splice(index, 1);\n  delete this[propertyName];\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {Entity} source The object to be merged into this object.\n */\nEntity.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  //Name, show, and availability are not Property objects and are currently handled differently.\n  //source.show is intentionally ignored because this.show always has a value.\n  this.name = defaultValue(this.name, source.name);\n  this.availability = defaultValue(this.availability, source.availability);\n\n  var propertyNames = this._propertyNames;\n  var sourcePropertyNames = defined(source._propertyNames)\n    ? source._propertyNames\n    : Object.keys(source);\n  var propertyNamesLength = sourcePropertyNames.length;\n  for (var i = 0; i < propertyNamesLength; i++) {\n    var name = sourcePropertyNames[i];\n\n    //Ignore parent when merging, this only happens at construction time.\n    if (name === \"parent\") {\n      continue;\n    }\n\n    var targetProperty = this[name];\n    var sourceProperty = source[name];\n\n    //Custom properties that are registered on the source entity must also\n    //get registered on this entity.\n    if (!defined(targetProperty) && propertyNames.indexOf(name) === -1) {\n      this.addProperty(name);\n    }\n\n    if (defined(sourceProperty)) {\n      if (defined(targetProperty)) {\n        if (defined(targetProperty.merge)) {\n          targetProperty.merge(sourceProperty);\n        }\n      } else if (\n        defined(sourceProperty.merge) &&\n        defined(sourceProperty.clone)\n      ) {\n        this[name] = sourceProperty.clone();\n      } else {\n        this[name] = sourceProperty;\n      }\n    }\n  }\n};\n\nvar matrix3Scratch = new Matrix3();\nvar positionScratch = new Cartesian3();\nvar orientationScratch = new Quaternion();\n\n/**\n * Computes the model matrix for the entity's transform at specified time. Returns undefined if orientation or position\n * are undefined.\n *\n * @param {JulianDate} time The time to retrieve model matrix for.\n * @param {Matrix4} [result] The object onto which to store the result.\n *\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided. Result is undefined if position or orientation are undefined.\n */\nEntity.prototype.computeModelMatrix = function (time, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"time\", time);\n  //>>includeEnd('debug');\n  var position = Property.getValueOrUndefined(\n    this._position,\n    time,\n    positionScratch\n  );\n  if (!defined(position)) {\n    return undefined;\n  }\n\n  var orientation = Property.getValueOrUndefined(\n    this._orientation,\n    time,\n    orientationScratch\n  );\n  if (!defined(orientation)) {\n    result = Transforms.eastNorthUpToFixedFrame(position, undefined, result);\n  } else {\n    result = Matrix4.fromRotationTranslation(\n      Matrix3.fromQuaternion(orientation, matrix3Scratch),\n      position,\n      result\n    );\n  }\n  return result;\n};\n\n/**\n * @private\n */\nEntity.prototype.computeModelMatrixForHeightReference = function (\n  time,\n  heightReferenceProperty,\n  heightOffset,\n  ellipsoid,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"time\", time);\n  //>>includeEnd('debug');\n  var heightReference = Property.getValueOrDefault(\n    heightReferenceProperty,\n    time,\n    HeightReference.NONE\n  );\n  var position = Property.getValueOrUndefined(\n    this._position,\n    time,\n    positionScratch\n  );\n  if (\n    heightReference === HeightReference.NONE ||\n    !defined(position) ||\n    Cartesian3.equalsEpsilon(position, Cartesian3.ZERO, CesiumMath.EPSILON8)\n  ) {\n    return this.computeModelMatrix(time, result);\n  }\n\n  var carto = ellipsoid.cartesianToCartographic(position, cartoScratch);\n  if (heightReference === HeightReference.CLAMP_TO_GROUND) {\n    carto.height = heightOffset;\n  } else {\n    carto.height += heightOffset;\n  }\n  position = ellipsoid.cartographicToCartesian(carto, position);\n\n  var orientation = Property.getValueOrUndefined(\n    this._orientation,\n    time,\n    orientationScratch\n  );\n  if (!defined(orientation)) {\n    result = Transforms.eastNorthUpToFixedFrame(position, undefined, result);\n  } else {\n    result = Matrix4.fromRotationTranslation(\n      Matrix3.fromQuaternion(orientation, matrix3Scratch),\n      position,\n      result\n    );\n  }\n  return result;\n};\n\n/**\n * Checks if the given Scene supports materials besides Color on Entities draped on terrain or 3D Tiles.\n * If this feature is not supported, Entities with non-color materials but no `height` will\n * instead be rendered as if height is 0.\n *\n * @param {Scene} scene The current scene.\n * @returns {Boolean} Whether or not the current scene supports materials for entities on terrain.\n */\nEntity.supportsMaterialsforEntitiesOnTerrain = function (scene) {\n  return GroundPrimitive.supportsMaterials(scene);\n};\n\n/**\n * Checks if the given Scene supports polylines clamped to terrain or 3D Tiles.\n * If this feature is not supported, Entities with PolylineGraphics will be rendered with vertices at\n * the provided heights and using the `arcType` parameter instead of clamped to the ground.\n *\n * @param {Scene} scene The current scene.\n * @returns {Boolean} Whether or not the current scene supports polylines on terrain or 3D TIles.\n */\nEntity.supportsPolylinesOnTerrain = function (scene) {\n  return GroundPolylinePrimitive.isSupported(scene);\n};\nexport default Entity;\n"]},"metadata":{},"sourceType":"module"}