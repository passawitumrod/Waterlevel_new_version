{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\nvar defaultColor = Color.WHITE;\nvar defaultGlowPower = 0.25;\nvar defaultTaperPower = 1.0;\n/**\n * A {@link MaterialProperty} that maps to polyline glow {@link Material} uniforms.\n * @alias PolylineGlowMaterialProperty\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.color=Color.WHITE] A Property specifying the {@link Color} of the line.\n * @param {Property} [options.glowPower=0.25] A numeric Property specifying the strength of the glow, as a percentage of the total line width.\n * @param {Property} [options.taperPower=1.0] A numeric Property specifying the strength of the tapering effect, as a percentage of the total line length.  If 1.0 or higher, no taper effect is used.\n */\n\nfunction PolylineGlowMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._glowPower = undefined;\n  this._glowPowerSubscription = undefined;\n  this._taperPower = undefined;\n  this._taperPowerSubscription = undefined;\n  this.color = options.color;\n  this.glowPower = options.glowPower;\n  this.taperPower = options.taperPower;\n}\n\nObject.defineProperties(PolylineGlowMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof PolylineGlowMaterialProperty.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._color) && Property.isConstant(this._glow);\n    }\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof PolylineGlowMaterialProperty.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the line.\n   * @memberof PolylineGlowMaterialProperty.prototype\n   * @type {Property}\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the strength of the glow, as a percentage of the total line width (less than 1.0).\n   * @memberof PolylineGlowMaterialProperty.prototype\n   * @type {Property}\n   */\n  glowPower: createPropertyDescriptor(\"glowPower\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the strength of the tapering effect, as a percentage of the total line length.  If 1.0 or higher, no taper effect is used.\n   * @memberof PolylineGlowMaterialProperty.prototype\n   * @type {Property}\n   */\n  taperPower: createPropertyDescriptor(\"taperPower\")\n});\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\n\nPolylineGlowMaterialProperty.prototype.getType = function (time) {\n  return \"PolylineGlow\";\n};\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\n\nPolylineGlowMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n\n  result.color = Property.getValueOrClonedDefault(this._color, time, defaultColor, result.color);\n  result.glowPower = Property.getValueOrDefault(this._glowPower, time, defaultGlowPower, result.glowPower);\n  result.taperPower = Property.getValueOrDefault(this._taperPower, time, defaultTaperPower, result.taperPower);\n  return result;\n};\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nPolylineGlowMaterialProperty.prototype.equals = function (other) {\n  return this === other || other instanceof PolylineGlowMaterialProperty && Property.equals(this._color, other._color) && Property.equals(this._glowPower, other._glowPower) && Property.equals(this._taperPower, other._taperPower);\n};\n\nexport default PolylineGlowMaterialProperty;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/DataSources/PolylineGlowMaterialProperty.js"],"names":["Color","defaultValue","defined","Event","createPropertyDescriptor","Property","defaultColor","WHITE","defaultGlowPower","defaultTaperPower","PolylineGlowMaterialProperty","options","EMPTY_OBJECT","_definitionChanged","_color","undefined","_colorSubscription","_glowPower","_glowPowerSubscription","_taperPower","_taperPowerSubscription","color","glowPower","taperPower","Object","defineProperties","prototype","isConstant","get","_glow","definitionChanged","getType","time","getValue","result","getValueOrClonedDefault","getValueOrDefault","equals","other"],"mappings":"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","sourcesContent":["import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\nvar defaultColor = Color.WHITE;\nvar defaultGlowPower = 0.25;\nvar defaultTaperPower = 1.0;\n\n/**\n * A {@link MaterialProperty} that maps to polyline glow {@link Material} uniforms.\n * @alias PolylineGlowMaterialProperty\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.color=Color.WHITE] A Property specifying the {@link Color} of the line.\n * @param {Property} [options.glowPower=0.25] A numeric Property specifying the strength of the glow, as a percentage of the total line width.\n * @param {Property} [options.taperPower=1.0] A numeric Property specifying the strength of the tapering effect, as a percentage of the total line length.  If 1.0 or higher, no taper effect is used.\n */\nfunction PolylineGlowMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._glowPower = undefined;\n  this._glowPowerSubscription = undefined;\n  this._taperPower = undefined;\n  this._taperPowerSubscription = undefined;\n\n  this.color = options.color;\n  this.glowPower = options.glowPower;\n  this.taperPower = options.taperPower;\n}\n\nObject.defineProperties(PolylineGlowMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof PolylineGlowMaterialProperty.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        Property.isConstant(this._color) && Property.isConstant(this._glow)\n      );\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof PolylineGlowMaterialProperty.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the line.\n   * @memberof PolylineGlowMaterialProperty.prototype\n   * @type {Property}\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the strength of the glow, as a percentage of the total line width (less than 1.0).\n   * @memberof PolylineGlowMaterialProperty.prototype\n   * @type {Property}\n   */\n  glowPower: createPropertyDescriptor(\"glowPower\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the strength of the tapering effect, as a percentage of the total line length.  If 1.0 or higher, no taper effect is used.\n   * @memberof PolylineGlowMaterialProperty.prototype\n   * @type {Property}\n   */\n  taperPower: createPropertyDescriptor(\"taperPower\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nPolylineGlowMaterialProperty.prototype.getType = function (time) {\n  return \"PolylineGlow\";\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPolylineGlowMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n  result.color = Property.getValueOrClonedDefault(\n    this._color,\n    time,\n    defaultColor,\n    result.color\n  );\n  result.glowPower = Property.getValueOrDefault(\n    this._glowPower,\n    time,\n    defaultGlowPower,\n    result.glowPower\n  );\n  result.taperPower = Property.getValueOrDefault(\n    this._taperPower,\n    time,\n    defaultTaperPower,\n    result.taperPower\n  );\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPolylineGlowMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (other instanceof PolylineGlowMaterialProperty &&\n      Property.equals(this._color, other._color) &&\n      Property.equals(this._glowPower, other._glowPower) &&\n      Property.equals(this._taperPower, other._taperPower))\n  );\n};\nexport default PolylineGlowMaterialProperty;\n"]},"metadata":{},"sourceType":"module"}