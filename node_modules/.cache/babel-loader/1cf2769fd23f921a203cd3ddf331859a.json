{"ast":null,"code":"import buildModuleUrl from \"./buildModuleUrl.js\";\nimport Color from \"./Color.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Resource from \"./Resource.js\";\nimport writeTextToCanvas from \"./writeTextToCanvas.js\";\n/**\n * A utility class for generating custom map pins as canvas elements.\n * <br /><br />\n * <div align='center'>\n * <img src='Images/PinBuilder.png' width='500'/><br />\n * Example pins generated using both the maki icon set, which ships with Cesium, and single character text.\n * </div>\n *\n * @alias PinBuilder\n * @constructor\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Map%20Pins.html|Cesium Sandcastle PinBuilder Demo}\n */\n\nfunction PinBuilder() {\n  this._cache = {};\n}\n/**\n * Creates an empty pin of the specified color and size.\n *\n * @param {Color} color The color of the pin.\n * @param {Number} size The size of the pin, in pixels.\n * @returns {Canvas} The canvas element that represents the generated pin.\n */\n\n\nPinBuilder.prototype.fromColor = function (color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  } //>>includeEnd('debug');\n\n\n  return createPin(undefined, undefined, color, size, this._cache);\n};\n/**\n * Creates a pin with the specified icon, color, and size.\n *\n * @param {Resource|String} url The url of the image to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {Number} size The size of the pin, in pixels.\n * @returns {Canvas|Promise.<Canvas>} The canvas element or a Promise to the canvas element that represents the generated pin.\n */\n\n\nPinBuilder.prototype.fromUrl = function (url, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(url)) {\n    throw new DeveloperError(\"url is required\");\n  }\n\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  } //>>includeEnd('debug');\n\n\n  return createPin(url, undefined, color, size, this._cache);\n};\n/**\n * Creates a pin with the specified {@link https://www.mapbox.com/maki/|maki} icon identifier, color, and size.\n *\n * @param {String} id The id of the maki icon to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {Number} size The size of the pin, in pixels.\n * @returns {Canvas|Promise.<Canvas>} The canvas element or a Promise to the canvas element that represents the generated pin.\n */\n\n\nPinBuilder.prototype.fromMakiIconId = function (id, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required\");\n  }\n\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  } //>>includeEnd('debug');\n\n\n  return createPin(buildModuleUrl(\"Assets/Textures/maki/\" + encodeURIComponent(id) + \".png\"), undefined, color, size, this._cache);\n};\n/**\n * Creates a pin with the specified text, color, and size.  The text will be sized to be as large as possible\n * while still being contained completely within the pin.\n *\n * @param {String} text The text to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {Number} size The size of the pin, in pixels.\n * @returns {Canvas} The canvas element that represents the generated pin.\n */\n\n\nPinBuilder.prototype.fromText = function (text, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(text)) {\n    throw new DeveloperError(\"text is required\");\n  }\n\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  } //>>includeEnd('debug');\n\n\n  return createPin(undefined, text, color, size, this._cache);\n};\n\nvar colorScratch = new Color(); //This function (except for the 3 commented lines) was auto-generated from an online tool,\n//http://www.professorcloud.com/svg-to-canvas/, using Assets/Textures/pin.svg as input.\n//The reason we simply can't load and draw the SVG directly to the canvas is because\n//it taints the canvas in Internet Explorer (and possibly some other browsers); making\n//it impossible to create a WebGL texture from the result.\n\nfunction drawPin(context2D, color, size) {\n  context2D.save();\n  context2D.scale(size / 24, size / 24); //Added to auto-generated code to scale up to desired size.\n\n  context2D.fillStyle = color.toCssColorString(); //Modified from auto-generated code.\n\n  context2D.strokeStyle = color.brighten(0.6, colorScratch).toCssColorString(); //Modified from auto-generated code.\n\n  context2D.lineWidth = 0.846;\n  context2D.beginPath();\n  context2D.moveTo(6.72, 0.422);\n  context2D.lineTo(17.28, 0.422);\n  context2D.bezierCurveTo(18.553, 0.422, 19.577, 1.758, 19.577, 3.415);\n  context2D.lineTo(19.577, 10.973);\n  context2D.bezierCurveTo(19.577, 12.63, 18.553, 13.966, 17.282, 13.966);\n  context2D.lineTo(14.386, 14.008);\n  context2D.lineTo(11.826, 23.578);\n  context2D.lineTo(9.614, 14.008);\n  context2D.lineTo(6.719, 13.965);\n  context2D.bezierCurveTo(5.446, 13.983, 4.422, 12.629, 4.422, 10.972);\n  context2D.lineTo(4.422, 3.416);\n  context2D.bezierCurveTo(4.423, 1.76, 5.447, 0.423, 6.718, 0.423);\n  context2D.closePath();\n  context2D.fill();\n  context2D.stroke();\n  context2D.restore();\n} //This function takes an image or canvas and uses it as a template\n//to \"stamp\" the pin with a white image outlined in black.  The color\n//values of the input image are ignored completely and only the alpha\n//values are used.\n\n\nfunction drawIcon(context2D, image, size) {\n  //Size is the largest image that looks good inside of pin box.\n  var imageSize = size / 2.5;\n  var sizeX = imageSize;\n  var sizeY = imageSize;\n\n  if (image.width > image.height) {\n    sizeY = imageSize * (image.height / image.width);\n  } else if (image.width < image.height) {\n    sizeX = imageSize * (image.width / image.height);\n  } //x and y are the center of the pin box\n\n\n  var x = Math.round((size - sizeX) / 2);\n  var y = Math.round(7 / 24 * size - sizeY / 2);\n  context2D.globalCompositeOperation = \"destination-out\";\n  context2D.drawImage(image, x - 1, y, sizeX, sizeY);\n  context2D.drawImage(image, x, y - 1, sizeX, sizeY);\n  context2D.drawImage(image, x + 1, y, sizeX, sizeY);\n  context2D.drawImage(image, x, y + 1, sizeX, sizeY);\n  context2D.globalCompositeOperation = \"destination-over\";\n  context2D.fillStyle = Color.BLACK.toCssColorString();\n  context2D.fillRect(x - 1, y - 1, sizeX + 2, sizeY + 2);\n  context2D.globalCompositeOperation = \"destination-out\";\n  context2D.drawImage(image, x, y, sizeX, sizeY);\n  context2D.globalCompositeOperation = \"destination-over\";\n  context2D.fillStyle = Color.WHITE.toCssColorString();\n  context2D.fillRect(x - 1, y - 2, sizeX + 2, sizeY + 2);\n}\n\nvar stringifyScratch = new Array(4);\n\nfunction createPin(url, label, color, size, cache) {\n  //Use the parameters as a unique ID for caching.\n  stringifyScratch[0] = url;\n  stringifyScratch[1] = label;\n  stringifyScratch[2] = color;\n  stringifyScratch[3] = size;\n  var id = JSON.stringify(stringifyScratch);\n  var item = cache[id];\n\n  if (defined(item)) {\n    return item;\n  }\n\n  var canvas = document.createElement(\"canvas\");\n  canvas.width = size;\n  canvas.height = size;\n  var context2D = canvas.getContext(\"2d\");\n  drawPin(context2D, color, size);\n\n  if (defined(url)) {\n    var resource = Resource.createIfNeeded(url); //If we have an image url, load it and then stamp the pin.\n\n    var promise = resource.fetchImage().then(function (image) {\n      drawIcon(context2D, image, size);\n      cache[id] = canvas;\n      return canvas;\n    });\n    cache[id] = promise;\n    return promise;\n  } else if (defined(label)) {\n    //If we have a label, write it to a canvas and then stamp the pin.\n    var image = writeTextToCanvas(label, {\n      font: \"bold \" + size + \"px sans-serif\"\n    });\n    drawIcon(context2D, image, size);\n  }\n\n  cache[id] = canvas;\n  return canvas;\n}\n\nexport default PinBuilder;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/PinBuilder.js"],"names":["buildModuleUrl","Color","defined","DeveloperError","Resource","writeTextToCanvas","PinBuilder","_cache","prototype","fromColor","color","size","createPin","undefined","fromUrl","url","fromMakiIconId","id","encodeURIComponent","fromText","text","colorScratch","drawPin","context2D","save","scale","fillStyle","toCssColorString","strokeStyle","brighten","lineWidth","beginPath","moveTo","lineTo","bezierCurveTo","closePath","fill","stroke","restore","drawIcon","image","imageSize","sizeX","sizeY","width","height","x","Math","round","y","globalCompositeOperation","drawImage","BLACK","fillRect","WHITE","stringifyScratch","Array","label","cache","JSON","stringify","item","canvas","document","createElement","getContext","resource","createIfNeeded","promise","fetchImage","then","font"],"mappings":"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","sourcesContent":["import buildModuleUrl from \"./buildModuleUrl.js\";\nimport Color from \"./Color.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Resource from \"./Resource.js\";\nimport writeTextToCanvas from \"./writeTextToCanvas.js\";\n\n/**\n * A utility class for generating custom map pins as canvas elements.\n * <br /><br />\n * <div align='center'>\n * <img src='Images/PinBuilder.png' width='500'/><br />\n * Example pins generated using both the maki icon set, which ships with Cesium, and single character text.\n * </div>\n *\n * @alias PinBuilder\n * @constructor\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Map%20Pins.html|Cesium Sandcastle PinBuilder Demo}\n */\nfunction PinBuilder() {\n  this._cache = {};\n}\n\n/**\n * Creates an empty pin of the specified color and size.\n *\n * @param {Color} color The color of the pin.\n * @param {Number} size The size of the pin, in pixels.\n * @returns {Canvas} The canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromColor = function (color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(undefined, undefined, color, size, this._cache);\n};\n\n/**\n * Creates a pin with the specified icon, color, and size.\n *\n * @param {Resource|String} url The url of the image to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {Number} size The size of the pin, in pixels.\n * @returns {Canvas|Promise.<Canvas>} The canvas element or a Promise to the canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromUrl = function (url, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(url)) {\n    throw new DeveloperError(\"url is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(url, undefined, color, size, this._cache);\n};\n\n/**\n * Creates a pin with the specified {@link https://www.mapbox.com/maki/|maki} icon identifier, color, and size.\n *\n * @param {String} id The id of the maki icon to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {Number} size The size of the pin, in pixels.\n * @returns {Canvas|Promise.<Canvas>} The canvas element or a Promise to the canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromMakiIconId = function (id, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(\n    buildModuleUrl(\"Assets/Textures/maki/\" + encodeURIComponent(id) + \".png\"),\n    undefined,\n    color,\n    size,\n    this._cache\n  );\n};\n\n/**\n * Creates a pin with the specified text, color, and size.  The text will be sized to be as large as possible\n * while still being contained completely within the pin.\n *\n * @param {String} text The text to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {Number} size The size of the pin, in pixels.\n * @returns {Canvas} The canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromText = function (text, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(text)) {\n    throw new DeveloperError(\"text is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n\n  return createPin(undefined, text, color, size, this._cache);\n};\n\nvar colorScratch = new Color();\n\n//This function (except for the 3 commented lines) was auto-generated from an online tool,\n//http://www.professorcloud.com/svg-to-canvas/, using Assets/Textures/pin.svg as input.\n//The reason we simply can't load and draw the SVG directly to the canvas is because\n//it taints the canvas in Internet Explorer (and possibly some other browsers); making\n//it impossible to create a WebGL texture from the result.\nfunction drawPin(context2D, color, size) {\n  context2D.save();\n  context2D.scale(size / 24, size / 24); //Added to auto-generated code to scale up to desired size.\n  context2D.fillStyle = color.toCssColorString(); //Modified from auto-generated code.\n  context2D.strokeStyle = color.brighten(0.6, colorScratch).toCssColorString(); //Modified from auto-generated code.\n  context2D.lineWidth = 0.846;\n  context2D.beginPath();\n  context2D.moveTo(6.72, 0.422);\n  context2D.lineTo(17.28, 0.422);\n  context2D.bezierCurveTo(18.553, 0.422, 19.577, 1.758, 19.577, 3.415);\n  context2D.lineTo(19.577, 10.973);\n  context2D.bezierCurveTo(19.577, 12.63, 18.553, 13.966, 17.282, 13.966);\n  context2D.lineTo(14.386, 14.008);\n  context2D.lineTo(11.826, 23.578);\n  context2D.lineTo(9.614, 14.008);\n  context2D.lineTo(6.719, 13.965);\n  context2D.bezierCurveTo(5.446, 13.983, 4.422, 12.629, 4.422, 10.972);\n  context2D.lineTo(4.422, 3.416);\n  context2D.bezierCurveTo(4.423, 1.76, 5.447, 0.423, 6.718, 0.423);\n  context2D.closePath();\n  context2D.fill();\n  context2D.stroke();\n  context2D.restore();\n}\n\n//This function takes an image or canvas and uses it as a template\n//to \"stamp\" the pin with a white image outlined in black.  The color\n//values of the input image are ignored completely and only the alpha\n//values are used.\nfunction drawIcon(context2D, image, size) {\n  //Size is the largest image that looks good inside of pin box.\n  var imageSize = size / 2.5;\n  var sizeX = imageSize;\n  var sizeY = imageSize;\n\n  if (image.width > image.height) {\n    sizeY = imageSize * (image.height / image.width);\n  } else if (image.width < image.height) {\n    sizeX = imageSize * (image.width / image.height);\n  }\n\n  //x and y are the center of the pin box\n  var x = Math.round((size - sizeX) / 2);\n  var y = Math.round((7 / 24) * size - sizeY / 2);\n\n  context2D.globalCompositeOperation = \"destination-out\";\n  context2D.drawImage(image, x - 1, y, sizeX, sizeY);\n  context2D.drawImage(image, x, y - 1, sizeX, sizeY);\n  context2D.drawImage(image, x + 1, y, sizeX, sizeY);\n  context2D.drawImage(image, x, y + 1, sizeX, sizeY);\n\n  context2D.globalCompositeOperation = \"destination-over\";\n  context2D.fillStyle = Color.BLACK.toCssColorString();\n  context2D.fillRect(x - 1, y - 1, sizeX + 2, sizeY + 2);\n\n  context2D.globalCompositeOperation = \"destination-out\";\n  context2D.drawImage(image, x, y, sizeX, sizeY);\n\n  context2D.globalCompositeOperation = \"destination-over\";\n  context2D.fillStyle = Color.WHITE.toCssColorString();\n  context2D.fillRect(x - 1, y - 2, sizeX + 2, sizeY + 2);\n}\n\nvar stringifyScratch = new Array(4);\nfunction createPin(url, label, color, size, cache) {\n  //Use the parameters as a unique ID for caching.\n  stringifyScratch[0] = url;\n  stringifyScratch[1] = label;\n  stringifyScratch[2] = color;\n  stringifyScratch[3] = size;\n  var id = JSON.stringify(stringifyScratch);\n\n  var item = cache[id];\n  if (defined(item)) {\n    return item;\n  }\n\n  var canvas = document.createElement(\"canvas\");\n  canvas.width = size;\n  canvas.height = size;\n\n  var context2D = canvas.getContext(\"2d\");\n  drawPin(context2D, color, size);\n\n  if (defined(url)) {\n    var resource = Resource.createIfNeeded(url);\n\n    //If we have an image url, load it and then stamp the pin.\n    var promise = resource.fetchImage().then(function (image) {\n      drawIcon(context2D, image, size);\n      cache[id] = canvas;\n      return canvas;\n    });\n    cache[id] = promise;\n    return promise;\n  } else if (defined(label)) {\n    //If we have a label, write it to a canvas and then stamp the pin.\n    var image = writeTextToCanvas(label, {\n      font: \"bold \" + size + \"px sans-serif\",\n    });\n    drawIcon(context2D, image, size);\n  }\n\n  cache[id] = canvas;\n  return canvas;\n}\nexport default PinBuilder;\n"]},"metadata":{},"sourceType":"module"}