{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n/**\n * A 3D Tiles tileset represented by an {@link Entity}.\n * The tileset modelMatrix is determined by the containing Entity position and orientation\n * or is left unset if position is undefined.\n *\n * @alias Cesium3DTilesetGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the tileset.\n * @param {Property} [options.uri] A string or Resource Property specifying the URI of the tileset.\n * @param {Property} [options.maximumScreenSpaceError] A number or Property specifying the maximum screen space error used to drive level of detail refinement.\n */\n\nfunction Cesium3DTilesetGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._uri = undefined;\n  this._uriSubscription = undefined;\n  this._maximumScreenSpaceError = undefined;\n  this._maximumScreenSpaceErrorSubscription = undefined;\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(Cesium3DTilesetGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof Cesium3DTilesetGraphics.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function get() {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the model.\n   * @memberof Cesium3DTilesetGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the string Property specifying the URI of the glTF asset.\n   * @memberof Cesium3DTilesetGraphics.prototype\n   * @type {Property}\n   */\n  uri: createPropertyDescriptor(\"uri\"),\n\n  /**\n   * Gets or sets the maximum screen space error used to drive level of detail refinement.\n   * @memberof Cesium3DTilesetGraphics.prototype\n   * @type {Property}\n   */\n  maximumScreenSpaceError: createPropertyDescriptor(\"maximumScreenSpaceError\")\n});\n/**\n * Duplicates this instance.\n *\n * @param {Cesium3DTilesetGraphics} [result] The object onto which to store the result.\n * @returns {Cesium3DTilesetGraphics} The modified result parameter or a new instance if one was not provided.\n */\n\nCesium3DTilesetGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new Cesium3DTilesetGraphics(this);\n  }\n\n  result.show = this.show;\n  result.uri = this.uri;\n  result.maximumScreenSpaceError = this.maximumScreenSpaceError;\n  return result;\n};\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {Cesium3DTilesetGraphics} source The object to be merged into this object.\n */\n\n\nCesium3DTilesetGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  } //>>includeEnd('debug');\n\n\n  this.show = defaultValue(this.show, source.show);\n  this.uri = defaultValue(this.uri, source.uri);\n  this.maximumScreenSpaceError = defaultValue(this.maximumScreenSpaceError, source.maximumScreenSpaceError);\n};\n\nexport default Cesium3DTilesetGraphics;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/Cesium3DTilesetGraphics.js"],"names":["defaultValue","defined","DeveloperError","Event","createPropertyDescriptor","Cesium3DTilesetGraphics","options","_definitionChanged","_show","undefined","_showSubscription","_uri","_uriSubscription","_maximumScreenSpaceError","_maximumScreenSpaceErrorSubscription","merge","EMPTY_OBJECT","Object","defineProperties","prototype","definitionChanged","get","show","uri","maximumScreenSpaceError","clone","result","source"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,yBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,wBAAP,MAAqC,+BAArC;AAEA;;;;;;;;;;;;;;AAaA,SAASC,uBAAT,CAAiCC,OAAjC,EAA0C;AACxC,OAAKC,kBAAL,GAA0B,IAAIJ,KAAJ,EAA1B;AACA,OAAKK,KAAL,GAAaC,SAAb;AACA,OAAKC,iBAAL,GAAyBD,SAAzB;AACA,OAAKE,IAAL,GAAYF,SAAZ;AACA,OAAKG,gBAAL,GAAwBH,SAAxB;AACA,OAAKI,wBAAL,GAAgCJ,SAAhC;AACA,OAAKK,oCAAL,GAA4CL,SAA5C;AAEA,OAAKM,KAAL,CAAWf,YAAY,CAACM,OAAD,EAAUN,YAAY,CAACgB,YAAvB,CAAvB;AACD;;AAEDC,MAAM,CAACC,gBAAP,CAAwBb,uBAAuB,CAACc,SAAhD,EAA2D;AACzD;;;;;;AAMAC,EAAAA,iBAAiB,EAAE;AACjBC,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKd,kBAAZ;AACD;AAHgB,GAPsC;;AAazD;;;;;;AAMAe,EAAAA,IAAI,EAAElB,wBAAwB,CAAC,MAAD,CAnB2B;;AAqBzD;;;;;AAKAmB,EAAAA,GAAG,EAAEnB,wBAAwB,CAAC,KAAD,CA1B4B;;AA4BzD;;;;;AAKAoB,EAAAA,uBAAuB,EAAEpB,wBAAwB,CAAC,yBAAD;AAjCQ,CAA3D;AAoCA;;;;;;;AAMAC,uBAAuB,CAACc,SAAxB,CAAkCM,KAAlC,GAA0C,UAAUC,MAAV,EAAkB;AAC1D,MAAI,CAACzB,OAAO,CAACyB,MAAD,CAAZ,EAAsB;AACpB,WAAO,IAAIrB,uBAAJ,CAA4B,IAA5B,CAAP;AACD;;AACDqB,EAAAA,MAAM,CAACJ,IAAP,GAAc,KAAKA,IAAnB;AACAI,EAAAA,MAAM,CAACH,GAAP,GAAa,KAAKA,GAAlB;AACAG,EAAAA,MAAM,CAACF,uBAAP,GAAiC,KAAKA,uBAAtC;AAEA,SAAOE,MAAP;AACD,CATD;AAWA;;;;;;;;AAMArB,uBAAuB,CAACc,SAAxB,CAAkCJ,KAAlC,GAA0C,UAAUY,MAAV,EAAkB;AAC1D;AACA,MAAI,CAAC1B,OAAO,CAAC0B,MAAD,CAAZ,EAAsB;AACpB,UAAM,IAAIzB,cAAJ,CAAmB,qBAAnB,CAAN;AACD,GAJyD,CAK1D;;;AAEA,OAAKoB,IAAL,GAAYtB,YAAY,CAAC,KAAKsB,IAAN,EAAYK,MAAM,CAACL,IAAnB,CAAxB;AACA,OAAKC,GAAL,GAAWvB,YAAY,CAAC,KAAKuB,GAAN,EAAWI,MAAM,CAACJ,GAAlB,CAAvB;AACA,OAAKC,uBAAL,GAA+BxB,YAAY,CACzC,KAAKwB,uBADoC,EAEzCG,MAAM,CAACH,uBAFkC,CAA3C;AAID,CAbD;;AAeA,eAAenB,uBAAf","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * A 3D Tiles tileset represented by an {@link Entity}.\n * The tileset modelMatrix is determined by the containing Entity position and orientation\n * or is left unset if position is undefined.\n *\n * @alias Cesium3DTilesetGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the tileset.\n * @param {Property} [options.uri] A string or Resource Property specifying the URI of the tileset.\n * @param {Property} [options.maximumScreenSpaceError] A number or Property specifying the maximum screen space error used to drive level of detail refinement.\n */\nfunction Cesium3DTilesetGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._uri = undefined;\n  this._uriSubscription = undefined;\n  this._maximumScreenSpaceError = undefined;\n  this._maximumScreenSpaceErrorSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(Cesium3DTilesetGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof Cesium3DTilesetGraphics.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the model.\n   * @memberof Cesium3DTilesetGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the string Property specifying the URI of the glTF asset.\n   * @memberof Cesium3DTilesetGraphics.prototype\n   * @type {Property}\n   */\n  uri: createPropertyDescriptor(\"uri\"),\n\n  /**\n   * Gets or sets the maximum screen space error used to drive level of detail refinement.\n   * @memberof Cesium3DTilesetGraphics.prototype\n   * @type {Property}\n   */\n  maximumScreenSpaceError: createPropertyDescriptor(\"maximumScreenSpaceError\"),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {Cesium3DTilesetGraphics} [result] The object onto which to store the result.\n * @returns {Cesium3DTilesetGraphics} The modified result parameter or a new instance if one was not provided.\n */\nCesium3DTilesetGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new Cesium3DTilesetGraphics(this);\n  }\n  result.show = this.show;\n  result.uri = this.uri;\n  result.maximumScreenSpaceError = this.maximumScreenSpaceError;\n\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {Cesium3DTilesetGraphics} source The object to be merged into this object.\n */\nCesium3DTilesetGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.uri = defaultValue(this.uri, source.uri);\n  this.maximumScreenSpaceError = defaultValue(\n    this.maximumScreenSpaceError,\n    source.maximumScreenSpaceError\n  );\n};\n\nexport default Cesium3DTilesetGraphics;\n"]},"metadata":{},"sourceType":"module"}