{"ast":null,"code":"import defined from \"./defined.js\";\nvar context2DsByWidthAndHeight = {};\n/**\n * Extract a pixel array from a loaded image.  Draws the image\n * into a canvas so it can read the pixels back.\n *\n * @exports getImagePixels\n *\n * @param {Image} image The image to extract pixels from.\n * @param {Number} width The width of the image. If not defined, then image.width is assigned.\n * @param {Number} height The height of the image. If not defined, then image.height is assigned.\n * @returns {CanvasPixelArray} The pixels of the image.\n */\n\nfunction getImagePixels(image, width, height) {\n  if (!defined(width)) {\n    width = image.width;\n  }\n\n  if (!defined(height)) {\n    height = image.height;\n  }\n\n  var context2DsByHeight = context2DsByWidthAndHeight[width];\n\n  if (!defined(context2DsByHeight)) {\n    context2DsByHeight = {};\n    context2DsByWidthAndHeight[width] = context2DsByHeight;\n  }\n\n  var context2d = context2DsByHeight[height];\n\n  if (!defined(context2d)) {\n    var canvas = document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    context2d = canvas.getContext(\"2d\");\n    context2d.globalCompositeOperation = \"copy\";\n    context2DsByHeight[height] = context2d;\n  }\n\n  context2d.drawImage(image, 0, 0, width, height);\n  return context2d.getImageData(0, 0, width, height).data;\n}\n\nexport default getImagePixels;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/getImagePixels.js"],"names":["defined","context2DsByWidthAndHeight","getImagePixels","image","width","height","context2DsByHeight","context2d","canvas","document","createElement","getContext","globalCompositeOperation","drawImage","getImageData","data"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,cAApB;AAEA,IAAIC,0BAA0B,GAAG,EAAjC;AAEA;;;;;;;;;;;;AAWA,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,KAA/B,EAAsCC,MAAtC,EAA8C;AAC5C,MAAI,CAACL,OAAO,CAACI,KAAD,CAAZ,EAAqB;AACnBA,IAAAA,KAAK,GAAGD,KAAK,CAACC,KAAd;AACD;;AACD,MAAI,CAACJ,OAAO,CAACK,MAAD,CAAZ,EAAsB;AACpBA,IAAAA,MAAM,GAAGF,KAAK,CAACE,MAAf;AACD;;AAED,MAAIC,kBAAkB,GAAGL,0BAA0B,CAACG,KAAD,CAAnD;;AACA,MAAI,CAACJ,OAAO,CAACM,kBAAD,CAAZ,EAAkC;AAChCA,IAAAA,kBAAkB,GAAG,EAArB;AACAL,IAAAA,0BAA0B,CAACG,KAAD,CAA1B,GAAoCE,kBAApC;AACD;;AAED,MAAIC,SAAS,GAAGD,kBAAkB,CAACD,MAAD,CAAlC;;AACA,MAAI,CAACL,OAAO,CAACO,SAAD,CAAZ,EAAyB;AACvB,QAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACAF,IAAAA,MAAM,CAACJ,KAAP,GAAeA,KAAf;AACAI,IAAAA,MAAM,CAACH,MAAP,GAAgBA,MAAhB;AACAE,IAAAA,SAAS,GAAGC,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAZ;AACAJ,IAAAA,SAAS,CAACK,wBAAV,GAAqC,MAArC;AACAN,IAAAA,kBAAkB,CAACD,MAAD,CAAlB,GAA6BE,SAA7B;AACD;;AAEDA,EAAAA,SAAS,CAACM,SAAV,CAAoBV,KAApB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiCC,KAAjC,EAAwCC,MAAxC;AACA,SAAOE,SAAS,CAACO,YAAV,CAAuB,CAAvB,EAA0B,CAA1B,EAA6BV,KAA7B,EAAoCC,MAApC,EAA4CU,IAAnD;AACD;;AACD,eAAeb,cAAf","sourcesContent":["import defined from \"./defined.js\";\n\nvar context2DsByWidthAndHeight = {};\n\n/**\n * Extract a pixel array from a loaded image.  Draws the image\n * into a canvas so it can read the pixels back.\n *\n * @exports getImagePixels\n *\n * @param {Image} image The image to extract pixels from.\n * @param {Number} width The width of the image. If not defined, then image.width is assigned.\n * @param {Number} height The height of the image. If not defined, then image.height is assigned.\n * @returns {CanvasPixelArray} The pixels of the image.\n */\nfunction getImagePixels(image, width, height) {\n  if (!defined(width)) {\n    width = image.width;\n  }\n  if (!defined(height)) {\n    height = image.height;\n  }\n\n  var context2DsByHeight = context2DsByWidthAndHeight[width];\n  if (!defined(context2DsByHeight)) {\n    context2DsByHeight = {};\n    context2DsByWidthAndHeight[width] = context2DsByHeight;\n  }\n\n  var context2d = context2DsByHeight[height];\n  if (!defined(context2d)) {\n    var canvas = document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    context2d = canvas.getContext(\"2d\");\n    context2d.globalCompositeOperation = \"copy\";\n    context2DsByHeight[height] = context2d;\n  }\n\n  context2d.drawImage(image, 0, 0, width, height);\n  return context2d.getImageData(0, 0, width, height).data;\n}\nexport default getImagePixels;\n"]},"metadata":{},"sourceType":"module"}