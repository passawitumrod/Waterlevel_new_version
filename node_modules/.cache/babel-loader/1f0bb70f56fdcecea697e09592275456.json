{"ast":null,"code":"import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport WebGLConstants from \"./WebGLConstants.js\";\n/**\n * WebGL component datatypes.  Components are intrinsics,\n * which form attributes, which form vertices.\n *\n * @exports ComponentDatatype\n */\n\nvar ComponentDatatype = {\n  /**\n   * 8-bit signed byte corresponding to <code>gl.BYTE</code> and the type\n   * of an element in <code>Int8Array</code>.\n   *\n   * @type {Number}\n   * @constant\n   */\n  BYTE: WebGLConstants.BYTE,\n\n  /**\n   * 8-bit unsigned byte corresponding to <code>UNSIGNED_BYTE</code> and the type\n   * of an element in <code>Uint8Array</code>.\n   *\n   * @type {Number}\n   * @constant\n   */\n  UNSIGNED_BYTE: WebGLConstants.UNSIGNED_BYTE,\n\n  /**\n   * 16-bit signed short corresponding to <code>SHORT</code> and the type\n   * of an element in <code>Int16Array</code>.\n   *\n   * @type {Number}\n   * @constant\n   */\n  SHORT: WebGLConstants.SHORT,\n\n  /**\n   * 16-bit unsigned short corresponding to <code>UNSIGNED_SHORT</code> and the type\n   * of an element in <code>Uint16Array</code>.\n   *\n   * @type {Number}\n   * @constant\n   */\n  UNSIGNED_SHORT: WebGLConstants.UNSIGNED_SHORT,\n\n  /**\n   * 32-bit signed int corresponding to <code>INT</code> and the type\n   * of an element in <code>Int32Array</code>.\n   *\n   * @memberOf ComponentDatatype\n   *\n   * @type {Number}\n   * @constant\n   */\n  INT: WebGLConstants.INT,\n\n  /**\n   * 32-bit unsigned int corresponding to <code>UNSIGNED_INT</code> and the type\n   * of an element in <code>Uint32Array</code>.\n   *\n   * @memberOf ComponentDatatype\n   *\n   * @type {Number}\n   * @constant\n   */\n  UNSIGNED_INT: WebGLConstants.UNSIGNED_INT,\n\n  /**\n   * 32-bit floating-point corresponding to <code>FLOAT</code> and the type\n   * of an element in <code>Float32Array</code>.\n   *\n   * @type {Number}\n   * @constant\n   */\n  FLOAT: WebGLConstants.FLOAT,\n\n  /**\n   * 64-bit floating-point corresponding to <code>gl.DOUBLE</code> (in Desktop OpenGL;\n   * this is not supported in WebGL, and is emulated in Cesium via {@link GeometryPipeline.encodeAttribute})\n   * and the type of an element in <code>Float64Array</code>.\n   *\n   * @memberOf ComponentDatatype\n   *\n   * @type {Number}\n   * @constant\n   * @default 0x140A\n   */\n  DOUBLE: WebGLConstants.DOUBLE\n};\n/**\n * Returns the size, in bytes, of the corresponding datatype.\n *\n * @param {ComponentDatatype} componentDatatype The component datatype to get the size of.\n * @returns {Number} The size in bytes.\n *\n * @exception {DeveloperError} componentDatatype is not a valid value.\n *\n * @example\n * // Returns Int8Array.BYTES_PER_ELEMENT\n * var size = Cesium.ComponentDatatype.getSizeInBytes(Cesium.ComponentDatatype.BYTE);\n */\n\nComponentDatatype.getSizeInBytes = function (componentDatatype) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(componentDatatype)) {\n    throw new DeveloperError(\"value is required.\");\n  } //>>includeEnd('debug');\n\n\n  switch (componentDatatype) {\n    case ComponentDatatype.BYTE:\n      return Int8Array.BYTES_PER_ELEMENT;\n\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return Uint8Array.BYTES_PER_ELEMENT;\n\n    case ComponentDatatype.SHORT:\n      return Int16Array.BYTES_PER_ELEMENT;\n\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return Uint16Array.BYTES_PER_ELEMENT;\n\n    case ComponentDatatype.INT:\n      return Int32Array.BYTES_PER_ELEMENT;\n\n    case ComponentDatatype.UNSIGNED_INT:\n      return Uint32Array.BYTES_PER_ELEMENT;\n\n    case ComponentDatatype.FLOAT:\n      return Float32Array.BYTES_PER_ELEMENT;\n\n    case ComponentDatatype.DOUBLE:\n      return Float64Array.BYTES_PER_ELEMENT;\n    //>>includeStart('debug', pragmas.debug);\n\n    default:\n      throw new DeveloperError(\"componentDatatype is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n/**\n * Gets the {@link ComponentDatatype} for the provided TypedArray instance.\n *\n * @param {TypedArray} array The typed array.\n * @returns {ComponentDatatype} The ComponentDatatype for the provided array, or undefined if the array is not a TypedArray.\n */\n\n\nComponentDatatype.fromTypedArray = function (array) {\n  if (array instanceof Int8Array) {\n    return ComponentDatatype.BYTE;\n  }\n\n  if (array instanceof Uint8Array) {\n    return ComponentDatatype.UNSIGNED_BYTE;\n  }\n\n  if (array instanceof Int16Array) {\n    return ComponentDatatype.SHORT;\n  }\n\n  if (array instanceof Uint16Array) {\n    return ComponentDatatype.UNSIGNED_SHORT;\n  }\n\n  if (array instanceof Int32Array) {\n    return ComponentDatatype.INT;\n  }\n\n  if (array instanceof Uint32Array) {\n    return ComponentDatatype.UNSIGNED_INT;\n  }\n\n  if (array instanceof Float32Array) {\n    return ComponentDatatype.FLOAT;\n  }\n\n  if (array instanceof Float64Array) {\n    return ComponentDatatype.DOUBLE;\n  }\n};\n/**\n * Validates that the provided component datatype is a valid {@link ComponentDatatype}\n *\n * @param {ComponentDatatype} componentDatatype The component datatype to validate.\n * @returns {Boolean} <code>true</code> if the provided component datatype is a valid value; otherwise, <code>false</code>.\n *\n * @example\n * if (!Cesium.ComponentDatatype.validate(componentDatatype)) {\n *   throw new Cesium.DeveloperError('componentDatatype must be a valid value.');\n * }\n */\n\n\nComponentDatatype.validate = function (componentDatatype) {\n  return defined(componentDatatype) && (componentDatatype === ComponentDatatype.BYTE || componentDatatype === ComponentDatatype.UNSIGNED_BYTE || componentDatatype === ComponentDatatype.SHORT || componentDatatype === ComponentDatatype.UNSIGNED_SHORT || componentDatatype === ComponentDatatype.INT || componentDatatype === ComponentDatatype.UNSIGNED_INT || componentDatatype === ComponentDatatype.FLOAT || componentDatatype === ComponentDatatype.DOUBLE);\n};\n/**\n * Creates a typed array corresponding to component data type.\n *\n * @param {ComponentDatatype} componentDatatype The component data type.\n * @param {Number|Array} valuesOrLength The length of the array to create or an array.\n * @returns {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} A typed array.\n *\n * @exception {DeveloperError} componentDatatype is not a valid value.\n *\n * @example\n * // creates a Float32Array with length of 100\n * var typedArray = Cesium.ComponentDatatype.createTypedArray(Cesium.ComponentDatatype.FLOAT, 100);\n */\n\n\nComponentDatatype.createTypedArray = function (componentDatatype, valuesOrLength) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(componentDatatype)) {\n    throw new DeveloperError(\"componentDatatype is required.\");\n  }\n\n  if (!defined(valuesOrLength)) {\n    throw new DeveloperError(\"valuesOrLength is required.\");\n  } //>>includeEnd('debug');\n\n\n  switch (componentDatatype) {\n    case ComponentDatatype.BYTE:\n      return new Int8Array(valuesOrLength);\n\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return new Uint8Array(valuesOrLength);\n\n    case ComponentDatatype.SHORT:\n      return new Int16Array(valuesOrLength);\n\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return new Uint16Array(valuesOrLength);\n\n    case ComponentDatatype.INT:\n      return new Int32Array(valuesOrLength);\n\n    case ComponentDatatype.UNSIGNED_INT:\n      return new Uint32Array(valuesOrLength);\n\n    case ComponentDatatype.FLOAT:\n      return new Float32Array(valuesOrLength);\n\n    case ComponentDatatype.DOUBLE:\n      return new Float64Array(valuesOrLength);\n    //>>includeStart('debug', pragmas.debug);\n\n    default:\n      throw new DeveloperError(\"componentDatatype is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n/**\n * Creates a typed view of an array of bytes.\n *\n * @param {ComponentDatatype} componentDatatype The type of the view to create.\n * @param {ArrayBuffer} buffer The buffer storage to use for the view.\n * @param {Number} [byteOffset] The offset, in bytes, to the first element in the view.\n * @param {Number} [length] The number of elements in the view.\n * @returns {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} A typed array view of the buffer.\n *\n * @exception {DeveloperError} componentDatatype is not a valid value.\n */\n\n\nComponentDatatype.createArrayBufferView = function (componentDatatype, buffer, byteOffset, length) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(componentDatatype)) {\n    throw new DeveloperError(\"componentDatatype is required.\");\n  }\n\n  if (!defined(buffer)) {\n    throw new DeveloperError(\"buffer is required.\");\n  } //>>includeEnd('debug');\n\n\n  byteOffset = defaultValue(byteOffset, 0);\n  length = defaultValue(length, (buffer.byteLength - byteOffset) / ComponentDatatype.getSizeInBytes(componentDatatype));\n\n  switch (componentDatatype) {\n    case ComponentDatatype.BYTE:\n      return new Int8Array(buffer, byteOffset, length);\n\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return new Uint8Array(buffer, byteOffset, length);\n\n    case ComponentDatatype.SHORT:\n      return new Int16Array(buffer, byteOffset, length);\n\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return new Uint16Array(buffer, byteOffset, length);\n\n    case ComponentDatatype.INT:\n      return new Int32Array(buffer, byteOffset, length);\n\n    case ComponentDatatype.UNSIGNED_INT:\n      return new Uint32Array(buffer, byteOffset, length);\n\n    case ComponentDatatype.FLOAT:\n      return new Float32Array(buffer, byteOffset, length);\n\n    case ComponentDatatype.DOUBLE:\n      return new Float64Array(buffer, byteOffset, length);\n    //>>includeStart('debug', pragmas.debug);\n\n    default:\n      throw new DeveloperError(\"componentDatatype is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n/**\n * Get the ComponentDatatype from its name.\n *\n * @param {String} name The name of the ComponentDatatype.\n * @returns {ComponentDatatype} The ComponentDatatype.\n *\n * @exception {DeveloperError} name is not a valid value.\n */\n\n\nComponentDatatype.fromName = function (name) {\n  switch (name) {\n    case \"BYTE\":\n      return ComponentDatatype.BYTE;\n\n    case \"UNSIGNED_BYTE\":\n      return ComponentDatatype.UNSIGNED_BYTE;\n\n    case \"SHORT\":\n      return ComponentDatatype.SHORT;\n\n    case \"UNSIGNED_SHORT\":\n      return ComponentDatatype.UNSIGNED_SHORT;\n\n    case \"INT\":\n      return ComponentDatatype.INT;\n\n    case \"UNSIGNED_INT\":\n      return ComponentDatatype.UNSIGNED_INT;\n\n    case \"FLOAT\":\n      return ComponentDatatype.FLOAT;\n\n    case \"DOUBLE\":\n      return ComponentDatatype.DOUBLE;\n    //>>includeStart('debug', pragmas.debug);\n\n    default:\n      throw new DeveloperError(\"name is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\nexport default Object.freeze(ComponentDatatype);","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/ComponentDatatype.js"],"names":["defaultValue","defined","DeveloperError","WebGLConstants","ComponentDatatype","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","DOUBLE","getSizeInBytes","componentDatatype","Int8Array","BYTES_PER_ELEMENT","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","fromTypedArray","array","validate","createTypedArray","valuesOrLength","createArrayBufferView","buffer","byteOffset","length","byteLength","fromName","name","Object","freeze"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AAEA;;;;;;;AAMA,IAAIC,iBAAiB,GAAG;AACtB;;;;;;;AAOAC,EAAAA,IAAI,EAAEF,cAAc,CAACE,IARC;;AAUtB;;;;;;;AAOAC,EAAAA,aAAa,EAAEH,cAAc,CAACG,aAjBR;;AAmBtB;;;;;;;AAOAC,EAAAA,KAAK,EAAEJ,cAAc,CAACI,KA1BA;;AA4BtB;;;;;;;AAOAC,EAAAA,cAAc,EAAEL,cAAc,CAACK,cAnCT;;AAqCtB;;;;;;;;;AASAC,EAAAA,GAAG,EAAEN,cAAc,CAACM,GA9CE;;AAgDtB;;;;;;;;;AASAC,EAAAA,YAAY,EAAEP,cAAc,CAACO,YAzDP;;AA2DtB;;;;;;;AAOAC,EAAAA,KAAK,EAAER,cAAc,CAACQ,KAlEA;;AAoEtB;;;;;;;;;;;AAWAC,EAAAA,MAAM,EAAET,cAAc,CAACS;AA/ED,CAAxB;AAkFA;;;;;;;;;;;;;AAYAR,iBAAiB,CAACS,cAAlB,GAAmC,UAAUC,iBAAV,EAA6B;AAC9D;AACA,MAAI,CAACb,OAAO,CAACa,iBAAD,CAAZ,EAAiC;AAC/B,UAAM,IAAIZ,cAAJ,CAAmB,oBAAnB,CAAN;AACD,GAJ6D,CAK9D;;;AAEA,UAAQY,iBAAR;AACE,SAAKV,iBAAiB,CAACC,IAAvB;AACE,aAAOU,SAAS,CAACC,iBAAjB;;AACF,SAAKZ,iBAAiB,CAACE,aAAvB;AACE,aAAOW,UAAU,CAACD,iBAAlB;;AACF,SAAKZ,iBAAiB,CAACG,KAAvB;AACE,aAAOW,UAAU,CAACF,iBAAlB;;AACF,SAAKZ,iBAAiB,CAACI,cAAvB;AACE,aAAOW,WAAW,CAACH,iBAAnB;;AACF,SAAKZ,iBAAiB,CAACK,GAAvB;AACE,aAAOW,UAAU,CAACJ,iBAAlB;;AACF,SAAKZ,iBAAiB,CAACM,YAAvB;AACE,aAAOW,WAAW,CAACL,iBAAnB;;AACF,SAAKZ,iBAAiB,CAACO,KAAvB;AACE,aAAOW,YAAY,CAACN,iBAApB;;AACF,SAAKZ,iBAAiB,CAACQ,MAAvB;AACE,aAAOW,YAAY,CAACP,iBAApB;AACF;;AACA;AACE,YAAM,IAAId,cAAJ,CAAmB,yCAAnB,CAAN;AACF;AApBF;AAsBD,CA7BD;AA+BA;;;;;;;;AAMAE,iBAAiB,CAACoB,cAAlB,GAAmC,UAAUC,KAAV,EAAiB;AAClD,MAAIA,KAAK,YAAYV,SAArB,EAAgC;AAC9B,WAAOX,iBAAiB,CAACC,IAAzB;AACD;;AACD,MAAIoB,KAAK,YAAYR,UAArB,EAAiC;AAC/B,WAAOb,iBAAiB,CAACE,aAAzB;AACD;;AACD,MAAImB,KAAK,YAAYP,UAArB,EAAiC;AAC/B,WAAOd,iBAAiB,CAACG,KAAzB;AACD;;AACD,MAAIkB,KAAK,YAAYN,WAArB,EAAkC;AAChC,WAAOf,iBAAiB,CAACI,cAAzB;AACD;;AACD,MAAIiB,KAAK,YAAYL,UAArB,EAAiC;AAC/B,WAAOhB,iBAAiB,CAACK,GAAzB;AACD;;AACD,MAAIgB,KAAK,YAAYJ,WAArB,EAAkC;AAChC,WAAOjB,iBAAiB,CAACM,YAAzB;AACD;;AACD,MAAIe,KAAK,YAAYH,YAArB,EAAmC;AACjC,WAAOlB,iBAAiB,CAACO,KAAzB;AACD;;AACD,MAAIc,KAAK,YAAYF,YAArB,EAAmC;AACjC,WAAOnB,iBAAiB,CAACQ,MAAzB;AACD;AACF,CAzBD;AA2BA;;;;;;;;;;;;;AAWAR,iBAAiB,CAACsB,QAAlB,GAA6B,UAAUZ,iBAAV,EAA6B;AACxD,SACEb,OAAO,CAACa,iBAAD,CAAP,KACCA,iBAAiB,KAAKV,iBAAiB,CAACC,IAAxC,IACCS,iBAAiB,KAAKV,iBAAiB,CAACE,aADzC,IAECQ,iBAAiB,KAAKV,iBAAiB,CAACG,KAFzC,IAGCO,iBAAiB,KAAKV,iBAAiB,CAACI,cAHzC,IAICM,iBAAiB,KAAKV,iBAAiB,CAACK,GAJzC,IAKCK,iBAAiB,KAAKV,iBAAiB,CAACM,YALzC,IAMCI,iBAAiB,KAAKV,iBAAiB,CAACO,KANzC,IAOCG,iBAAiB,KAAKV,iBAAiB,CAACQ,MAR1C,CADF;AAWD,CAZD;AAcA;;;;;;;;;;;;;;;AAaAR,iBAAiB,CAACuB,gBAAlB,GAAqC,UACnCb,iBADmC,EAEnCc,cAFmC,EAGnC;AACA;AACA,MAAI,CAAC3B,OAAO,CAACa,iBAAD,CAAZ,EAAiC;AAC/B,UAAM,IAAIZ,cAAJ,CAAmB,gCAAnB,CAAN;AACD;;AACD,MAAI,CAACD,OAAO,CAAC2B,cAAD,CAAZ,EAA8B;AAC5B,UAAM,IAAI1B,cAAJ,CAAmB,6BAAnB,CAAN;AACD,GAPD,CAQA;;;AAEA,UAAQY,iBAAR;AACE,SAAKV,iBAAiB,CAACC,IAAvB;AACE,aAAO,IAAIU,SAAJ,CAAca,cAAd,CAAP;;AACF,SAAKxB,iBAAiB,CAACE,aAAvB;AACE,aAAO,IAAIW,UAAJ,CAAeW,cAAf,CAAP;;AACF,SAAKxB,iBAAiB,CAACG,KAAvB;AACE,aAAO,IAAIW,UAAJ,CAAeU,cAAf,CAAP;;AACF,SAAKxB,iBAAiB,CAACI,cAAvB;AACE,aAAO,IAAIW,WAAJ,CAAgBS,cAAhB,CAAP;;AACF,SAAKxB,iBAAiB,CAACK,GAAvB;AACE,aAAO,IAAIW,UAAJ,CAAeQ,cAAf,CAAP;;AACF,SAAKxB,iBAAiB,CAACM,YAAvB;AACE,aAAO,IAAIW,WAAJ,CAAgBO,cAAhB,CAAP;;AACF,SAAKxB,iBAAiB,CAACO,KAAvB;AACE,aAAO,IAAIW,YAAJ,CAAiBM,cAAjB,CAAP;;AACF,SAAKxB,iBAAiB,CAACQ,MAAvB;AACE,aAAO,IAAIW,YAAJ,CAAiBK,cAAjB,CAAP;AACF;;AACA;AACE,YAAM,IAAI1B,cAAJ,CAAmB,yCAAnB,CAAN;AACF;AApBF;AAsBD,CAnCD;AAqCA;;;;;;;;;;;;;AAWAE,iBAAiB,CAACyB,qBAAlB,GAA0C,UACxCf,iBADwC,EAExCgB,MAFwC,EAGxCC,UAHwC,EAIxCC,MAJwC,EAKxC;AACA;AACA,MAAI,CAAC/B,OAAO,CAACa,iBAAD,CAAZ,EAAiC;AAC/B,UAAM,IAAIZ,cAAJ,CAAmB,gCAAnB,CAAN;AACD;;AACD,MAAI,CAACD,OAAO,CAAC6B,MAAD,CAAZ,EAAsB;AACpB,UAAM,IAAI5B,cAAJ,CAAmB,qBAAnB,CAAN;AACD,GAPD,CAQA;;;AAEA6B,EAAAA,UAAU,GAAG/B,YAAY,CAAC+B,UAAD,EAAa,CAAb,CAAzB;AACAC,EAAAA,MAAM,GAAGhC,YAAY,CACnBgC,MADmB,EAEnB,CAACF,MAAM,CAACG,UAAP,GAAoBF,UAArB,IACE3B,iBAAiB,CAACS,cAAlB,CAAiCC,iBAAjC,CAHiB,CAArB;;AAMA,UAAQA,iBAAR;AACE,SAAKV,iBAAiB,CAACC,IAAvB;AACE,aAAO,IAAIU,SAAJ,CAAce,MAAd,EAAsBC,UAAtB,EAAkCC,MAAlC,CAAP;;AACF,SAAK5B,iBAAiB,CAACE,aAAvB;AACE,aAAO,IAAIW,UAAJ,CAAea,MAAf,EAAuBC,UAAvB,EAAmCC,MAAnC,CAAP;;AACF,SAAK5B,iBAAiB,CAACG,KAAvB;AACE,aAAO,IAAIW,UAAJ,CAAeY,MAAf,EAAuBC,UAAvB,EAAmCC,MAAnC,CAAP;;AACF,SAAK5B,iBAAiB,CAACI,cAAvB;AACE,aAAO,IAAIW,WAAJ,CAAgBW,MAAhB,EAAwBC,UAAxB,EAAoCC,MAApC,CAAP;;AACF,SAAK5B,iBAAiB,CAACK,GAAvB;AACE,aAAO,IAAIW,UAAJ,CAAeU,MAAf,EAAuBC,UAAvB,EAAmCC,MAAnC,CAAP;;AACF,SAAK5B,iBAAiB,CAACM,YAAvB;AACE,aAAO,IAAIW,WAAJ,CAAgBS,MAAhB,EAAwBC,UAAxB,EAAoCC,MAApC,CAAP;;AACF,SAAK5B,iBAAiB,CAACO,KAAvB;AACE,aAAO,IAAIW,YAAJ,CAAiBQ,MAAjB,EAAyBC,UAAzB,EAAqCC,MAArC,CAAP;;AACF,SAAK5B,iBAAiB,CAACQ,MAAvB;AACE,aAAO,IAAIW,YAAJ,CAAiBO,MAAjB,EAAyBC,UAAzB,EAAqCC,MAArC,CAAP;AACF;;AACA;AACE,YAAM,IAAI9B,cAAJ,CAAmB,yCAAnB,CAAN;AACF;AApBF;AAsBD,CA5CD;AA8CA;;;;;;;;;;AAQAE,iBAAiB,CAAC8B,QAAlB,GAA6B,UAAUC,IAAV,EAAgB;AAC3C,UAAQA,IAAR;AACE,SAAK,MAAL;AACE,aAAO/B,iBAAiB,CAACC,IAAzB;;AACF,SAAK,eAAL;AACE,aAAOD,iBAAiB,CAACE,aAAzB;;AACF,SAAK,OAAL;AACE,aAAOF,iBAAiB,CAACG,KAAzB;;AACF,SAAK,gBAAL;AACE,aAAOH,iBAAiB,CAACI,cAAzB;;AACF,SAAK,KAAL;AACE,aAAOJ,iBAAiB,CAACK,GAAzB;;AACF,SAAK,cAAL;AACE,aAAOL,iBAAiB,CAACM,YAAzB;;AACF,SAAK,OAAL;AACE,aAAON,iBAAiB,CAACO,KAAzB;;AACF,SAAK,QAAL;AACE,aAAOP,iBAAiB,CAACQ,MAAzB;AACF;;AACA;AACE,YAAM,IAAIV,cAAJ,CAAmB,4BAAnB,CAAN;AACF;AApBF;AAsBD,CAvBD;;AAwBA,eAAekC,MAAM,CAACC,MAAP,CAAcjC,iBAAd,CAAf","sourcesContent":["import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport WebGLConstants from \"./WebGLConstants.js\";\n\n/**\n * WebGL component datatypes.  Components are intrinsics,\n * which form attributes, which form vertices.\n *\n * @exports ComponentDatatype\n */\nvar ComponentDatatype = {\n  /**\n   * 8-bit signed byte corresponding to <code>gl.BYTE</code> and the type\n   * of an element in <code>Int8Array</code>.\n   *\n   * @type {Number}\n   * @constant\n   */\n  BYTE: WebGLConstants.BYTE,\n\n  /**\n   * 8-bit unsigned byte corresponding to <code>UNSIGNED_BYTE</code> and the type\n   * of an element in <code>Uint8Array</code>.\n   *\n   * @type {Number}\n   * @constant\n   */\n  UNSIGNED_BYTE: WebGLConstants.UNSIGNED_BYTE,\n\n  /**\n   * 16-bit signed short corresponding to <code>SHORT</code> and the type\n   * of an element in <code>Int16Array</code>.\n   *\n   * @type {Number}\n   * @constant\n   */\n  SHORT: WebGLConstants.SHORT,\n\n  /**\n   * 16-bit unsigned short corresponding to <code>UNSIGNED_SHORT</code> and the type\n   * of an element in <code>Uint16Array</code>.\n   *\n   * @type {Number}\n   * @constant\n   */\n  UNSIGNED_SHORT: WebGLConstants.UNSIGNED_SHORT,\n\n  /**\n   * 32-bit signed int corresponding to <code>INT</code> and the type\n   * of an element in <code>Int32Array</code>.\n   *\n   * @memberOf ComponentDatatype\n   *\n   * @type {Number}\n   * @constant\n   */\n  INT: WebGLConstants.INT,\n\n  /**\n   * 32-bit unsigned int corresponding to <code>UNSIGNED_INT</code> and the type\n   * of an element in <code>Uint32Array</code>.\n   *\n   * @memberOf ComponentDatatype\n   *\n   * @type {Number}\n   * @constant\n   */\n  UNSIGNED_INT: WebGLConstants.UNSIGNED_INT,\n\n  /**\n   * 32-bit floating-point corresponding to <code>FLOAT</code> and the type\n   * of an element in <code>Float32Array</code>.\n   *\n   * @type {Number}\n   * @constant\n   */\n  FLOAT: WebGLConstants.FLOAT,\n\n  /**\n   * 64-bit floating-point corresponding to <code>gl.DOUBLE</code> (in Desktop OpenGL;\n   * this is not supported in WebGL, and is emulated in Cesium via {@link GeometryPipeline.encodeAttribute})\n   * and the type of an element in <code>Float64Array</code>.\n   *\n   * @memberOf ComponentDatatype\n   *\n   * @type {Number}\n   * @constant\n   * @default 0x140A\n   */\n  DOUBLE: WebGLConstants.DOUBLE,\n};\n\n/**\n * Returns the size, in bytes, of the corresponding datatype.\n *\n * @param {ComponentDatatype} componentDatatype The component datatype to get the size of.\n * @returns {Number} The size in bytes.\n *\n * @exception {DeveloperError} componentDatatype is not a valid value.\n *\n * @example\n * // Returns Int8Array.BYTES_PER_ELEMENT\n * var size = Cesium.ComponentDatatype.getSizeInBytes(Cesium.ComponentDatatype.BYTE);\n */\nComponentDatatype.getSizeInBytes = function (componentDatatype) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(componentDatatype)) {\n    throw new DeveloperError(\"value is required.\");\n  }\n  //>>includeEnd('debug');\n\n  switch (componentDatatype) {\n    case ComponentDatatype.BYTE:\n      return Int8Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return Uint8Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.SHORT:\n      return Int16Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return Uint16Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.INT:\n      return Int32Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.UNSIGNED_INT:\n      return Uint32Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.FLOAT:\n      return Float32Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.DOUBLE:\n      return Float64Array.BYTES_PER_ELEMENT;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"componentDatatype is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Gets the {@link ComponentDatatype} for the provided TypedArray instance.\n *\n * @param {TypedArray} array The typed array.\n * @returns {ComponentDatatype} The ComponentDatatype for the provided array, or undefined if the array is not a TypedArray.\n */\nComponentDatatype.fromTypedArray = function (array) {\n  if (array instanceof Int8Array) {\n    return ComponentDatatype.BYTE;\n  }\n  if (array instanceof Uint8Array) {\n    return ComponentDatatype.UNSIGNED_BYTE;\n  }\n  if (array instanceof Int16Array) {\n    return ComponentDatatype.SHORT;\n  }\n  if (array instanceof Uint16Array) {\n    return ComponentDatatype.UNSIGNED_SHORT;\n  }\n  if (array instanceof Int32Array) {\n    return ComponentDatatype.INT;\n  }\n  if (array instanceof Uint32Array) {\n    return ComponentDatatype.UNSIGNED_INT;\n  }\n  if (array instanceof Float32Array) {\n    return ComponentDatatype.FLOAT;\n  }\n  if (array instanceof Float64Array) {\n    return ComponentDatatype.DOUBLE;\n  }\n};\n\n/**\n * Validates that the provided component datatype is a valid {@link ComponentDatatype}\n *\n * @param {ComponentDatatype} componentDatatype The component datatype to validate.\n * @returns {Boolean} <code>true</code> if the provided component datatype is a valid value; otherwise, <code>false</code>.\n *\n * @example\n * if (!Cesium.ComponentDatatype.validate(componentDatatype)) {\n *   throw new Cesium.DeveloperError('componentDatatype must be a valid value.');\n * }\n */\nComponentDatatype.validate = function (componentDatatype) {\n  return (\n    defined(componentDatatype) &&\n    (componentDatatype === ComponentDatatype.BYTE ||\n      componentDatatype === ComponentDatatype.UNSIGNED_BYTE ||\n      componentDatatype === ComponentDatatype.SHORT ||\n      componentDatatype === ComponentDatatype.UNSIGNED_SHORT ||\n      componentDatatype === ComponentDatatype.INT ||\n      componentDatatype === ComponentDatatype.UNSIGNED_INT ||\n      componentDatatype === ComponentDatatype.FLOAT ||\n      componentDatatype === ComponentDatatype.DOUBLE)\n  );\n};\n\n/**\n * Creates a typed array corresponding to component data type.\n *\n * @param {ComponentDatatype} componentDatatype The component data type.\n * @param {Number|Array} valuesOrLength The length of the array to create or an array.\n * @returns {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} A typed array.\n *\n * @exception {DeveloperError} componentDatatype is not a valid value.\n *\n * @example\n * // creates a Float32Array with length of 100\n * var typedArray = Cesium.ComponentDatatype.createTypedArray(Cesium.ComponentDatatype.FLOAT, 100);\n */\nComponentDatatype.createTypedArray = function (\n  componentDatatype,\n  valuesOrLength\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(componentDatatype)) {\n    throw new DeveloperError(\"componentDatatype is required.\");\n  }\n  if (!defined(valuesOrLength)) {\n    throw new DeveloperError(\"valuesOrLength is required.\");\n  }\n  //>>includeEnd('debug');\n\n  switch (componentDatatype) {\n    case ComponentDatatype.BYTE:\n      return new Int8Array(valuesOrLength);\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return new Uint8Array(valuesOrLength);\n    case ComponentDatatype.SHORT:\n      return new Int16Array(valuesOrLength);\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return new Uint16Array(valuesOrLength);\n    case ComponentDatatype.INT:\n      return new Int32Array(valuesOrLength);\n    case ComponentDatatype.UNSIGNED_INT:\n      return new Uint32Array(valuesOrLength);\n    case ComponentDatatype.FLOAT:\n      return new Float32Array(valuesOrLength);\n    case ComponentDatatype.DOUBLE:\n      return new Float64Array(valuesOrLength);\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"componentDatatype is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Creates a typed view of an array of bytes.\n *\n * @param {ComponentDatatype} componentDatatype The type of the view to create.\n * @param {ArrayBuffer} buffer The buffer storage to use for the view.\n * @param {Number} [byteOffset] The offset, in bytes, to the first element in the view.\n * @param {Number} [length] The number of elements in the view.\n * @returns {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} A typed array view of the buffer.\n *\n * @exception {DeveloperError} componentDatatype is not a valid value.\n */\nComponentDatatype.createArrayBufferView = function (\n  componentDatatype,\n  buffer,\n  byteOffset,\n  length\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(componentDatatype)) {\n    throw new DeveloperError(\"componentDatatype is required.\");\n  }\n  if (!defined(buffer)) {\n    throw new DeveloperError(\"buffer is required.\");\n  }\n  //>>includeEnd('debug');\n\n  byteOffset = defaultValue(byteOffset, 0);\n  length = defaultValue(\n    length,\n    (buffer.byteLength - byteOffset) /\n      ComponentDatatype.getSizeInBytes(componentDatatype)\n  );\n\n  switch (componentDatatype) {\n    case ComponentDatatype.BYTE:\n      return new Int8Array(buffer, byteOffset, length);\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return new Uint8Array(buffer, byteOffset, length);\n    case ComponentDatatype.SHORT:\n      return new Int16Array(buffer, byteOffset, length);\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return new Uint16Array(buffer, byteOffset, length);\n    case ComponentDatatype.INT:\n      return new Int32Array(buffer, byteOffset, length);\n    case ComponentDatatype.UNSIGNED_INT:\n      return new Uint32Array(buffer, byteOffset, length);\n    case ComponentDatatype.FLOAT:\n      return new Float32Array(buffer, byteOffset, length);\n    case ComponentDatatype.DOUBLE:\n      return new Float64Array(buffer, byteOffset, length);\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"componentDatatype is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Get the ComponentDatatype from its name.\n *\n * @param {String} name The name of the ComponentDatatype.\n * @returns {ComponentDatatype} The ComponentDatatype.\n *\n * @exception {DeveloperError} name is not a valid value.\n */\nComponentDatatype.fromName = function (name) {\n  switch (name) {\n    case \"BYTE\":\n      return ComponentDatatype.BYTE;\n    case \"UNSIGNED_BYTE\":\n      return ComponentDatatype.UNSIGNED_BYTE;\n    case \"SHORT\":\n      return ComponentDatatype.SHORT;\n    case \"UNSIGNED_SHORT\":\n      return ComponentDatatype.UNSIGNED_SHORT;\n    case \"INT\":\n      return ComponentDatatype.INT;\n    case \"UNSIGNED_INT\":\n      return ComponentDatatype.UNSIGNED_INT;\n    case \"FLOAT\":\n      return ComponentDatatype.FLOAT;\n    case \"DOUBLE\":\n      return ComponentDatatype.DOUBLE;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"name is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\nexport default Object.freeze(ComponentDatatype);\n"]},"metadata":{},"sourceType":"module"}