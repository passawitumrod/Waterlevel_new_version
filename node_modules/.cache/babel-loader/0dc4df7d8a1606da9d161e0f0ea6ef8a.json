{"ast":null,"code":"import WebGLConstants from \"../Core/WebGLConstants.js\";\n/**\n * Determines the action taken based on the result of the stencil test.\n *\n * @exports StencilOperation\n */\n\nvar StencilOperation = {\n  /**\n   * Sets the stencil buffer value to zero.\n   *\n   * @type {Number}\n   * @constant\n   */\n  ZERO: WebGLConstants.ZERO,\n\n  /**\n   * Does not change the stencil buffer.\n   *\n   * @type {Number}\n   * @constant\n   */\n  KEEP: WebGLConstants.KEEP,\n\n  /**\n   * Replaces the stencil buffer value with the reference value.\n   *\n   * @type {Number}\n   * @constant\n   */\n  REPLACE: WebGLConstants.REPLACE,\n\n  /**\n   * Increments the stencil buffer value, clamping to unsigned byte.\n   *\n   * @type {Number}\n   * @constant\n   */\n  INCREMENT: WebGLConstants.INCR,\n\n  /**\n   * Decrements the stencil buffer value, clamping to zero.\n   *\n   * @type {Number}\n   * @constant\n   */\n  DECREMENT: WebGLConstants.DECR,\n\n  /**\n   * Bitwise inverts the existing stencil buffer value.\n   *\n   * @type {Number}\n   * @constant\n   */\n  INVERT: WebGLConstants.INVERT,\n\n  /**\n   * Increments the stencil buffer value, wrapping to zero when exceeding the unsigned byte range.\n   *\n   * @type {Number}\n   * @constant\n   */\n  INCREMENT_WRAP: WebGLConstants.INCR_WRAP,\n\n  /**\n   * Decrements the stencil buffer value, wrapping to the maximum unsigned byte instead of going below zero.\n   *\n   * @type {Number}\n   * @constant\n   */\n  DECREMENT_WRAP: WebGLConstants.DECR_WRAP\n};\nexport default Object.freeze(StencilOperation);","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/StencilOperation.js"],"names":["WebGLConstants","StencilOperation","ZERO","KEEP","REPLACE","INCREMENT","INCR","DECREMENT","DECR","INVERT","INCREMENT_WRAP","INCR_WRAP","DECREMENT_WRAP","DECR_WRAP","Object","freeze"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,2BAA3B;AAEA;;;;;;AAKA,IAAIC,gBAAgB,GAAG;AACrB;;;;;;AAMAC,EAAAA,IAAI,EAAEF,cAAc,CAACE,IAPA;;AASrB;;;;;;AAMAC,EAAAA,IAAI,EAAEH,cAAc,CAACG,IAfA;;AAiBrB;;;;;;AAMAC,EAAAA,OAAO,EAAEJ,cAAc,CAACI,OAvBH;;AAyBrB;;;;;;AAMAC,EAAAA,SAAS,EAAEL,cAAc,CAACM,IA/BL;;AAiCrB;;;;;;AAMAC,EAAAA,SAAS,EAAEP,cAAc,CAACQ,IAvCL;;AAyCrB;;;;;;AAMAC,EAAAA,MAAM,EAAET,cAAc,CAACS,MA/CF;;AAiDrB;;;;;;AAMAC,EAAAA,cAAc,EAAEV,cAAc,CAACW,SAvDV;;AAyDrB;;;;;;AAMAC,EAAAA,cAAc,EAAEZ,cAAc,CAACa;AA/DV,CAAvB;AAiEA,eAAeC,MAAM,CAACC,MAAP,CAAcd,gBAAd,CAAf","sourcesContent":["import WebGLConstants from \"../Core/WebGLConstants.js\";\n\n/**\n * Determines the action taken based on the result of the stencil test.\n *\n * @exports StencilOperation\n */\nvar StencilOperation = {\n  /**\n   * Sets the stencil buffer value to zero.\n   *\n   * @type {Number}\n   * @constant\n   */\n  ZERO: WebGLConstants.ZERO,\n\n  /**\n   * Does not change the stencil buffer.\n   *\n   * @type {Number}\n   * @constant\n   */\n  KEEP: WebGLConstants.KEEP,\n\n  /**\n   * Replaces the stencil buffer value with the reference value.\n   *\n   * @type {Number}\n   * @constant\n   */\n  REPLACE: WebGLConstants.REPLACE,\n\n  /**\n   * Increments the stencil buffer value, clamping to unsigned byte.\n   *\n   * @type {Number}\n   * @constant\n   */\n  INCREMENT: WebGLConstants.INCR,\n\n  /**\n   * Decrements the stencil buffer value, clamping to zero.\n   *\n   * @type {Number}\n   * @constant\n   */\n  DECREMENT: WebGLConstants.DECR,\n\n  /**\n   * Bitwise inverts the existing stencil buffer value.\n   *\n   * @type {Number}\n   * @constant\n   */\n  INVERT: WebGLConstants.INVERT,\n\n  /**\n   * Increments the stencil buffer value, wrapping to zero when exceeding the unsigned byte range.\n   *\n   * @type {Number}\n   * @constant\n   */\n  INCREMENT_WRAP: WebGLConstants.INCR_WRAP,\n\n  /**\n   * Decrements the stencil buffer value, wrapping to the maximum unsigned byte instead of going below zero.\n   *\n   * @type {Number}\n   * @constant\n   */\n  DECREMENT_WRAP: WebGLConstants.DECR_WRAP,\n};\nexport default Object.freeze(StencilOperation);\n"]},"metadata":{},"sourceType":"module"}