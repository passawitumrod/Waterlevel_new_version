{"ast":null,"code":"import BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\nimport WallGeometryLibrary from \"./WallGeometryLibrary.js\";\nvar scratchCartesian3Position1 = new Cartesian3();\nvar scratchCartesian3Position2 = new Cartesian3();\nvar scratchCartesian3Position3 = new Cartesian3();\nvar scratchCartesian3Position4 = new Cartesian3();\nvar scratchCartesian3Position5 = new Cartesian3();\nvar scratchBitangent = new Cartesian3();\nvar scratchTangent = new Cartesian3();\nvar scratchNormal = new Cartesian3();\n/**\n * A description of a wall, which is similar to a KML line string. A wall is defined by a series of points,\n * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\n *\n * @alias WallGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {Number[]} [options.maximumHeights] An array parallel to <code>positions</code> that give the maximum height of the\n *        wall at <code>positions</code>. If undefined, the height of each position in used.\n * @param {Number[]} [options.minimumHeights] An array parallel to <code>positions</code> that give the minimum height of the\n *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @exception {DeveloperError} positions length must be greater than or equal to 2.\n * @exception {DeveloperError} positions and maximumHeights must have the same length.\n * @exception {DeveloperError} positions and minimumHeights must have the same length.\n *\n * @see WallGeometry#createGeometry\n * @see WallGeometry#fromConstantHeight\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Wall.html|Cesium Sandcastle Wall Demo}\n *\n * @example\n * // create a wall that spans from ground level to 10000 meters\n * var wall = new Cesium.WallGeometry({\n *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\n *     19.0, 47.0, 10000.0,\n *     19.0, 48.0, 10000.0,\n *     20.0, 48.0, 10000.0,\n *     20.0, 47.0, 10000.0,\n *     19.0, 47.0, 10000.0\n *   ])\n * });\n * var geometry = Cesium.WallGeometry.createGeometry(wall);\n */\n\nfunction WallGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var wallPositions = options.positions;\n  var maximumHeights = options.maximumHeights;\n  var minimumHeights = options.minimumHeights; //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(wallPositions)) {\n    throw new DeveloperError(\"options.positions is required.\");\n  }\n\n  if (defined(maximumHeights) && maximumHeights.length !== wallPositions.length) {\n    throw new DeveloperError(\"options.positions and options.maximumHeights must have the same length.\");\n  }\n\n  if (defined(minimumHeights) && minimumHeights.length !== wallPositions.length) {\n    throw new DeveloperError(\"options.positions and options.minimumHeights must have the same length.\");\n  } //>>includeEnd('debug');\n\n\n  var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n  var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n  var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n  this._positions = wallPositions;\n  this._minimumHeights = minimumHeights;\n  this._maximumHeights = maximumHeights;\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\n  this._granularity = granularity;\n  this._ellipsoid = Ellipsoid.clone(ellipsoid);\n  this._workerName = \"createWallGeometry\";\n  var numComponents = 1 + wallPositions.length * Cartesian3.packedLength + 2;\n\n  if (defined(minimumHeights)) {\n    numComponents += minimumHeights.length;\n  }\n\n  if (defined(maximumHeights)) {\n    numComponents += maximumHeights.length;\n  }\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n\n\n  this.packedLength = numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 1;\n}\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {WallGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\n\n\nWallGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  } //>>includeEnd('debug');\n\n\n  startingIndex = defaultValue(startingIndex, 0);\n  var i;\n  var positions = value._positions;\n  var length = positions.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    Cartesian3.pack(positions[i], array, startingIndex);\n  }\n\n  var minimumHeights = value._minimumHeights;\n  length = defined(minimumHeights) ? minimumHeights.length : 0;\n  array[startingIndex++] = length;\n\n  if (defined(minimumHeights)) {\n    for (i = 0; i < length; ++i) {\n      array[startingIndex++] = minimumHeights[i];\n    }\n  }\n\n  var maximumHeights = value._maximumHeights;\n  length = defined(maximumHeights) ? maximumHeights.length : 0;\n  array[startingIndex++] = length;\n\n  if (defined(maximumHeights)) {\n    for (i = 0; i < length; ++i) {\n      array[startingIndex++] = maximumHeights[i];\n    }\n  }\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n  array[startingIndex] = value._granularity;\n  return array;\n};\n\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nvar scratchVertexFormat = new VertexFormat();\nvar scratchOptions = {\n  positions: undefined,\n  minimumHeights: undefined,\n  maximumHeights: undefined,\n  ellipsoid: scratchEllipsoid,\n  vertexFormat: scratchVertexFormat,\n  granularity: undefined\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {WallGeometry} [result] The object into which to store the result.\n * @returns {WallGeometry} The modified result parameter or a new WallGeometry instance if one was not provided.\n */\n\nWallGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  } //>>includeEnd('debug');\n\n\n  startingIndex = defaultValue(startingIndex, 0);\n  var i;\n  var length = array[startingIndex++];\n  var positions = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n\n  length = array[startingIndex++];\n  var minimumHeights;\n\n  if (length > 0) {\n    minimumHeights = new Array(length);\n\n    for (i = 0; i < length; ++i) {\n      minimumHeights[i] = array[startingIndex++];\n    }\n  }\n\n  length = array[startingIndex++];\n  var maximumHeights;\n\n  if (length > 0) {\n    maximumHeights = new Array(length);\n\n    for (i = 0; i < length; ++i) {\n      maximumHeights[i] = array[startingIndex++];\n    }\n  }\n\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n  var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n  startingIndex += VertexFormat.packedLength;\n  var granularity = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.positions = positions;\n    scratchOptions.minimumHeights = minimumHeights;\n    scratchOptions.maximumHeights = maximumHeights;\n    scratchOptions.granularity = granularity;\n    return new WallGeometry(scratchOptions);\n  }\n\n  result._positions = positions;\n  result._minimumHeights = minimumHeights;\n  result._maximumHeights = maximumHeights;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._granularity = granularity;\n  return result;\n};\n/**\n * A description of a wall, which is similar to a KML line string. A wall is defined by a series of points,\n * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\n * @param {Number} [options.maximumHeight] A constant that defines the maximum height of the\n *        wall at <code>positions</code>. If undefined, the height of each position in used.\n * @param {Number} [options.minimumHeight] A constant that defines the minimum height of the\n *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @returns {WallGeometry}\n *\n *\n * @example\n * // create a wall that spans from 10000 meters to 20000 meters\n * var wall = Cesium.WallGeometry.fromConstantHeights({\n *   positions : Cesium.Cartesian3.fromDegreesArray([\n *     19.0, 47.0,\n *     19.0, 48.0,\n *     20.0, 48.0,\n *     20.0, 47.0,\n *     19.0, 47.0,\n *   ]),\n *   minimumHeight : 20000.0,\n *   maximumHeight : 10000.0\n * });\n * var geometry = Cesium.WallGeometry.createGeometry(wall);\n *\n * @see WallGeometry#createGeometry\n */\n\n\nWallGeometry.fromConstantHeights = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var positions = options.positions; //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(positions)) {\n    throw new DeveloperError(\"options.positions is required.\");\n  } //>>includeEnd('debug');\n\n\n  var minHeights;\n  var maxHeights;\n  var min = options.minimumHeight;\n  var max = options.maximumHeight;\n  var doMin = defined(min);\n  var doMax = defined(max);\n\n  if (doMin || doMax) {\n    var length = positions.length;\n    minHeights = doMin ? new Array(length) : undefined;\n    maxHeights = doMax ? new Array(length) : undefined;\n\n    for (var i = 0; i < length; ++i) {\n      if (doMin) {\n        minHeights[i] = min;\n      }\n\n      if (doMax) {\n        maxHeights[i] = max;\n      }\n    }\n  }\n\n  var newOptions = {\n    positions: positions,\n    maximumHeights: maxHeights,\n    minimumHeights: minHeights,\n    ellipsoid: options.ellipsoid,\n    vertexFormat: options.vertexFormat\n  };\n  return new WallGeometry(newOptions);\n};\n/**\n * Computes the geometric representation of a wall, including its vertices, indices, and a bounding sphere.\n *\n * @param {WallGeometry} wallGeometry A description of the wall.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\n\n\nWallGeometry.createGeometry = function (wallGeometry) {\n  var wallPositions = wallGeometry._positions;\n  var minimumHeights = wallGeometry._minimumHeights;\n  var maximumHeights = wallGeometry._maximumHeights;\n  var vertexFormat = wallGeometry._vertexFormat;\n  var granularity = wallGeometry._granularity;\n  var ellipsoid = wallGeometry._ellipsoid;\n  var pos = WallGeometryLibrary.computePositions(ellipsoid, wallPositions, maximumHeights, minimumHeights, granularity, true);\n\n  if (!defined(pos)) {\n    return;\n  }\n\n  var bottomPositions = pos.bottomPositions;\n  var topPositions = pos.topPositions;\n  var numCorners = pos.numCorners;\n  var length = topPositions.length;\n  var size = length * 2;\n  var positions = vertexFormat.position ? new Float64Array(size) : undefined;\n  var normals = vertexFormat.normal ? new Float32Array(size) : undefined;\n  var tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\n  var bitangents = vertexFormat.bitangent ? new Float32Array(size) : undefined;\n  var textureCoordinates = vertexFormat.st ? new Float32Array(size / 3 * 2) : undefined;\n  var positionIndex = 0;\n  var normalIndex = 0;\n  var bitangentIndex = 0;\n  var tangentIndex = 0;\n  var stIndex = 0; // add lower and upper points one after the other, lower\n  // points being even and upper points being odd\n\n  var normal = scratchNormal;\n  var tangent = scratchTangent;\n  var bitangent = scratchBitangent;\n  var recomputeNormal = true;\n  length /= 3;\n  var i;\n  var s = 0;\n  var ds = 1 / (length - wallPositions.length + 1);\n\n  for (i = 0; i < length; ++i) {\n    var i3 = i * 3;\n    var topPosition = Cartesian3.fromArray(topPositions, i3, scratchCartesian3Position1);\n    var bottomPosition = Cartesian3.fromArray(bottomPositions, i3, scratchCartesian3Position2);\n\n    if (vertexFormat.position) {\n      // insert the lower point\n      positions[positionIndex++] = bottomPosition.x;\n      positions[positionIndex++] = bottomPosition.y;\n      positions[positionIndex++] = bottomPosition.z; // insert the upper point\n\n      positions[positionIndex++] = topPosition.x;\n      positions[positionIndex++] = topPosition.y;\n      positions[positionIndex++] = topPosition.z;\n    }\n\n    if (vertexFormat.st) {\n      textureCoordinates[stIndex++] = s;\n      textureCoordinates[stIndex++] = 0.0;\n      textureCoordinates[stIndex++] = s;\n      textureCoordinates[stIndex++] = 1.0;\n    }\n\n    if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n      var nextPosition;\n      var nextTop = Cartesian3.clone(Cartesian3.ZERO, scratchCartesian3Position5);\n      var groundPosition = ellipsoid.scaleToGeodeticSurface(Cartesian3.fromArray(topPositions, i3, scratchCartesian3Position2), scratchCartesian3Position2);\n\n      if (i + 1 < length) {\n        nextPosition = ellipsoid.scaleToGeodeticSurface(Cartesian3.fromArray(topPositions, i3 + 3, scratchCartesian3Position3), scratchCartesian3Position3);\n        nextTop = Cartesian3.fromArray(topPositions, i3 + 3, scratchCartesian3Position5);\n      }\n\n      if (recomputeNormal) {\n        var scalednextPosition = Cartesian3.subtract(nextTop, topPosition, scratchCartesian3Position4);\n        var scaledGroundPosition = Cartesian3.subtract(groundPosition, topPosition, scratchCartesian3Position1);\n        normal = Cartesian3.normalize(Cartesian3.cross(scaledGroundPosition, scalednextPosition, normal), normal);\n        recomputeNormal = false;\n      }\n\n      if (Cartesian3.equalsEpsilon(nextPosition, groundPosition, CesiumMath.EPSILON10)) {\n        recomputeNormal = true;\n      } else {\n        s += ds;\n\n        if (vertexFormat.tangent) {\n          tangent = Cartesian3.normalize(Cartesian3.subtract(nextPosition, groundPosition, tangent), tangent);\n        }\n\n        if (vertexFormat.bitangent) {\n          bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\n        }\n      }\n\n      if (vertexFormat.normal) {\n        normals[normalIndex++] = normal.x;\n        normals[normalIndex++] = normal.y;\n        normals[normalIndex++] = normal.z;\n        normals[normalIndex++] = normal.x;\n        normals[normalIndex++] = normal.y;\n        normals[normalIndex++] = normal.z;\n      }\n\n      if (vertexFormat.tangent) {\n        tangents[tangentIndex++] = tangent.x;\n        tangents[tangentIndex++] = tangent.y;\n        tangents[tangentIndex++] = tangent.z;\n        tangents[tangentIndex++] = tangent.x;\n        tangents[tangentIndex++] = tangent.y;\n        tangents[tangentIndex++] = tangent.z;\n      }\n\n      if (vertexFormat.bitangent) {\n        bitangents[bitangentIndex++] = bitangent.x;\n        bitangents[bitangentIndex++] = bitangent.y;\n        bitangents[bitangentIndex++] = bitangent.z;\n        bitangents[bitangentIndex++] = bitangent.x;\n        bitangents[bitangentIndex++] = bitangent.y;\n        bitangents[bitangentIndex++] = bitangent.z;\n      }\n    }\n  }\n\n  var attributes = new GeometryAttributes();\n\n  if (vertexFormat.position) {\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions\n    });\n  }\n\n  if (vertexFormat.normal) {\n    attributes.normal = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: normals\n    });\n  }\n\n  if (vertexFormat.tangent) {\n    attributes.tangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: tangents\n    });\n  }\n\n  if (vertexFormat.bitangent) {\n    attributes.bitangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: bitangents\n    });\n  }\n\n  if (vertexFormat.st) {\n    attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: textureCoordinates\n    });\n  } // prepare the side walls, two triangles for each wall\n  //\n  //    A (i+1)  B (i+3) E\n  //    +--------+-------+\n  //    |      / |      /|    triangles:  A C B\n  //    |     /  |     / |                B C D\n  //    |    /   |    /  |\n  //    |   /    |   /   |\n  //    |  /     |  /    |\n  //    | /      | /     |\n  //    +--------+-------+\n  //    C (i)    D (i+2) F\n  //\n\n\n  var numVertices = size / 3;\n  size -= 6 * (numCorners + 1);\n  var indices = IndexDatatype.createTypedArray(numVertices, size);\n  var edgeIndex = 0;\n\n  for (i = 0; i < numVertices - 2; i += 2) {\n    var LL = i;\n    var LR = i + 2;\n    var pl = Cartesian3.fromArray(positions, LL * 3, scratchCartesian3Position1);\n    var pr = Cartesian3.fromArray(positions, LR * 3, scratchCartesian3Position2);\n\n    if (Cartesian3.equalsEpsilon(pl, pr, CesiumMath.EPSILON10)) {\n      continue;\n    }\n\n    var UL = i + 1;\n    var UR = i + 3;\n    indices[edgeIndex++] = UL;\n    indices[edgeIndex++] = LL;\n    indices[edgeIndex++] = UR;\n    indices[edgeIndex++] = UR;\n    indices[edgeIndex++] = LL;\n    indices[edgeIndex++] = LR;\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: new BoundingSphere.fromVertices(positions)\n  });\n};\n\nexport default WallGeometry;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/WallGeometry.js"],"names":["BoundingSphere","Cartesian3","ComponentDatatype","defaultValue","defined","DeveloperError","Ellipsoid","Geometry","GeometryAttribute","GeometryAttributes","IndexDatatype","CesiumMath","PrimitiveType","VertexFormat","WallGeometryLibrary","scratchCartesian3Position1","scratchCartesian3Position2","scratchCartesian3Position3","scratchCartesian3Position4","scratchCartesian3Position5","scratchBitangent","scratchTangent","scratchNormal","WallGeometry","options","EMPTY_OBJECT","wallPositions","positions","maximumHeights","minimumHeights","length","vertexFormat","DEFAULT","granularity","RADIANS_PER_DEGREE","ellipsoid","WGS84","_positions","_minimumHeights","_maximumHeights","_vertexFormat","clone","_granularity","_ellipsoid","_workerName","numComponents","packedLength","pack","value","array","startingIndex","i","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","scratchOptions","undefined","unpack","result","Array","fromConstantHeights","minHeights","maxHeights","min","minimumHeight","max","maximumHeight","doMin","doMax","newOptions","createGeometry","wallGeometry","pos","computePositions","bottomPositions","topPositions","numCorners","size","position","Float64Array","normals","normal","Float32Array","tangents","tangent","bitangents","bitangent","textureCoordinates","st","positionIndex","normalIndex","bitangentIndex","tangentIndex","stIndex","recomputeNormal","s","ds","i3","topPosition","fromArray","bottomPosition","x","y","z","nextPosition","nextTop","ZERO","groundPosition","scaleToGeodeticSurface","scalednextPosition","subtract","scaledGroundPosition","normalize","cross","equalsEpsilon","EPSILON10","attributes","componentDatatype","DOUBLE","componentsPerAttribute","values","FLOAT","numVertices","indices","createTypedArray","edgeIndex","LL","LR","pl","pr","UL","UR","primitiveType","TRIANGLES","boundingSphere","fromVertices"],"mappings":"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","sourcesContent":["import BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\nimport WallGeometryLibrary from \"./WallGeometryLibrary.js\";\n\nvar scratchCartesian3Position1 = new Cartesian3();\nvar scratchCartesian3Position2 = new Cartesian3();\nvar scratchCartesian3Position3 = new Cartesian3();\nvar scratchCartesian3Position4 = new Cartesian3();\nvar scratchCartesian3Position5 = new Cartesian3();\nvar scratchBitangent = new Cartesian3();\nvar scratchTangent = new Cartesian3();\nvar scratchNormal = new Cartesian3();\n\n/**\n * A description of a wall, which is similar to a KML line string. A wall is defined by a series of points,\n * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\n *\n * @alias WallGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {Number[]} [options.maximumHeights] An array parallel to <code>positions</code> that give the maximum height of the\n *        wall at <code>positions</code>. If undefined, the height of each position in used.\n * @param {Number[]} [options.minimumHeights] An array parallel to <code>positions</code> that give the minimum height of the\n *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @exception {DeveloperError} positions length must be greater than or equal to 2.\n * @exception {DeveloperError} positions and maximumHeights must have the same length.\n * @exception {DeveloperError} positions and minimumHeights must have the same length.\n *\n * @see WallGeometry#createGeometry\n * @see WallGeometry#fromConstantHeight\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Wall.html|Cesium Sandcastle Wall Demo}\n *\n * @example\n * // create a wall that spans from ground level to 10000 meters\n * var wall = new Cesium.WallGeometry({\n *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\n *     19.0, 47.0, 10000.0,\n *     19.0, 48.0, 10000.0,\n *     20.0, 48.0, 10000.0,\n *     20.0, 47.0, 10000.0,\n *     19.0, 47.0, 10000.0\n *   ])\n * });\n * var geometry = Cesium.WallGeometry.createGeometry(wall);\n */\nfunction WallGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var wallPositions = options.positions;\n  var maximumHeights = options.maximumHeights;\n  var minimumHeights = options.minimumHeights;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(wallPositions)) {\n    throw new DeveloperError(\"options.positions is required.\");\n  }\n  if (\n    defined(maximumHeights) &&\n    maximumHeights.length !== wallPositions.length\n  ) {\n    throw new DeveloperError(\n      \"options.positions and options.maximumHeights must have the same length.\"\n    );\n  }\n  if (\n    defined(minimumHeights) &&\n    minimumHeights.length !== wallPositions.length\n  ) {\n    throw new DeveloperError(\n      \"options.positions and options.minimumHeights must have the same length.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n  var granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n\n  this._positions = wallPositions;\n  this._minimumHeights = minimumHeights;\n  this._maximumHeights = maximumHeights;\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\n  this._granularity = granularity;\n  this._ellipsoid = Ellipsoid.clone(ellipsoid);\n  this._workerName = \"createWallGeometry\";\n\n  var numComponents = 1 + wallPositions.length * Cartesian3.packedLength + 2;\n  if (defined(minimumHeights)) {\n    numComponents += minimumHeights.length;\n  }\n  if (defined(maximumHeights)) {\n    numComponents += maximumHeights.length;\n  }\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 1;\n}\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {WallGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nWallGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var i;\n\n  var positions = value._positions;\n  var length = positions.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    Cartesian3.pack(positions[i], array, startingIndex);\n  }\n\n  var minimumHeights = value._minimumHeights;\n  length = defined(minimumHeights) ? minimumHeights.length : 0;\n  array[startingIndex++] = length;\n\n  if (defined(minimumHeights)) {\n    for (i = 0; i < length; ++i) {\n      array[startingIndex++] = minimumHeights[i];\n    }\n  }\n\n  var maximumHeights = value._maximumHeights;\n  length = defined(maximumHeights) ? maximumHeights.length : 0;\n  array[startingIndex++] = length;\n\n  if (defined(maximumHeights)) {\n    for (i = 0; i < length; ++i) {\n      array[startingIndex++] = maximumHeights[i];\n    }\n  }\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n\n  array[startingIndex] = value._granularity;\n\n  return array;\n};\n\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nvar scratchVertexFormat = new VertexFormat();\nvar scratchOptions = {\n  positions: undefined,\n  minimumHeights: undefined,\n  maximumHeights: undefined,\n  ellipsoid: scratchEllipsoid,\n  vertexFormat: scratchVertexFormat,\n  granularity: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {WallGeometry} [result] The object into which to store the result.\n * @returns {WallGeometry} The modified result parameter or a new WallGeometry instance if one was not provided.\n */\nWallGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var i;\n\n  var length = array[startingIndex++];\n  var positions = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n\n  length = array[startingIndex++];\n  var minimumHeights;\n\n  if (length > 0) {\n    minimumHeights = new Array(length);\n    for (i = 0; i < length; ++i) {\n      minimumHeights[i] = array[startingIndex++];\n    }\n  }\n\n  length = array[startingIndex++];\n  var maximumHeights;\n\n  if (length > 0) {\n    maximumHeights = new Array(length);\n    for (i = 0; i < length; ++i) {\n      maximumHeights[i] = array[startingIndex++];\n    }\n  }\n\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  var vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n  startingIndex += VertexFormat.packedLength;\n\n  var granularity = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.positions = positions;\n    scratchOptions.minimumHeights = minimumHeights;\n    scratchOptions.maximumHeights = maximumHeights;\n    scratchOptions.granularity = granularity;\n    return new WallGeometry(scratchOptions);\n  }\n\n  result._positions = positions;\n  result._minimumHeights = minimumHeights;\n  result._maximumHeights = maximumHeights;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._granularity = granularity;\n\n  return result;\n};\n\n/**\n * A description of a wall, which is similar to a KML line string. A wall is defined by a series of points,\n * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\n * @param {Number} [options.maximumHeight] A constant that defines the maximum height of the\n *        wall at <code>positions</code>. If undefined, the height of each position in used.\n * @param {Number} [options.minimumHeight] A constant that defines the minimum height of the\n *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @returns {WallGeometry}\n *\n *\n * @example\n * // create a wall that spans from 10000 meters to 20000 meters\n * var wall = Cesium.WallGeometry.fromConstantHeights({\n *   positions : Cesium.Cartesian3.fromDegreesArray([\n *     19.0, 47.0,\n *     19.0, 48.0,\n *     20.0, 48.0,\n *     20.0, 47.0,\n *     19.0, 47.0,\n *   ]),\n *   minimumHeight : 20000.0,\n *   maximumHeight : 10000.0\n * });\n * var geometry = Cesium.WallGeometry.createGeometry(wall);\n *\n * @see WallGeometry#createGeometry\n */\nWallGeometry.fromConstantHeights = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var positions = options.positions;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(positions)) {\n    throw new DeveloperError(\"options.positions is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var minHeights;\n  var maxHeights;\n\n  var min = options.minimumHeight;\n  var max = options.maximumHeight;\n\n  var doMin = defined(min);\n  var doMax = defined(max);\n  if (doMin || doMax) {\n    var length = positions.length;\n    minHeights = doMin ? new Array(length) : undefined;\n    maxHeights = doMax ? new Array(length) : undefined;\n\n    for (var i = 0; i < length; ++i) {\n      if (doMin) {\n        minHeights[i] = min;\n      }\n\n      if (doMax) {\n        maxHeights[i] = max;\n      }\n    }\n  }\n\n  var newOptions = {\n    positions: positions,\n    maximumHeights: maxHeights,\n    minimumHeights: minHeights,\n    ellipsoid: options.ellipsoid,\n    vertexFormat: options.vertexFormat,\n  };\n  return new WallGeometry(newOptions);\n};\n\n/**\n * Computes the geometric representation of a wall, including its vertices, indices, and a bounding sphere.\n *\n * @param {WallGeometry} wallGeometry A description of the wall.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nWallGeometry.createGeometry = function (wallGeometry) {\n  var wallPositions = wallGeometry._positions;\n  var minimumHeights = wallGeometry._minimumHeights;\n  var maximumHeights = wallGeometry._maximumHeights;\n  var vertexFormat = wallGeometry._vertexFormat;\n  var granularity = wallGeometry._granularity;\n  var ellipsoid = wallGeometry._ellipsoid;\n\n  var pos = WallGeometryLibrary.computePositions(\n    ellipsoid,\n    wallPositions,\n    maximumHeights,\n    minimumHeights,\n    granularity,\n    true\n  );\n  if (!defined(pos)) {\n    return;\n  }\n\n  var bottomPositions = pos.bottomPositions;\n  var topPositions = pos.topPositions;\n  var numCorners = pos.numCorners;\n\n  var length = topPositions.length;\n  var size = length * 2;\n\n  var positions = vertexFormat.position ? new Float64Array(size) : undefined;\n  var normals = vertexFormat.normal ? new Float32Array(size) : undefined;\n  var tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\n  var bitangents = vertexFormat.bitangent ? new Float32Array(size) : undefined;\n  var textureCoordinates = vertexFormat.st\n    ? new Float32Array((size / 3) * 2)\n    : undefined;\n\n  var positionIndex = 0;\n  var normalIndex = 0;\n  var bitangentIndex = 0;\n  var tangentIndex = 0;\n  var stIndex = 0;\n\n  // add lower and upper points one after the other, lower\n  // points being even and upper points being odd\n  var normal = scratchNormal;\n  var tangent = scratchTangent;\n  var bitangent = scratchBitangent;\n  var recomputeNormal = true;\n  length /= 3;\n  var i;\n  var s = 0;\n  var ds = 1 / (length - wallPositions.length + 1);\n  for (i = 0; i < length; ++i) {\n    var i3 = i * 3;\n    var topPosition = Cartesian3.fromArray(\n      topPositions,\n      i3,\n      scratchCartesian3Position1\n    );\n    var bottomPosition = Cartesian3.fromArray(\n      bottomPositions,\n      i3,\n      scratchCartesian3Position2\n    );\n    if (vertexFormat.position) {\n      // insert the lower point\n      positions[positionIndex++] = bottomPosition.x;\n      positions[positionIndex++] = bottomPosition.y;\n      positions[positionIndex++] = bottomPosition.z;\n\n      // insert the upper point\n      positions[positionIndex++] = topPosition.x;\n      positions[positionIndex++] = topPosition.y;\n      positions[positionIndex++] = topPosition.z;\n    }\n\n    if (vertexFormat.st) {\n      textureCoordinates[stIndex++] = s;\n      textureCoordinates[stIndex++] = 0.0;\n\n      textureCoordinates[stIndex++] = s;\n      textureCoordinates[stIndex++] = 1.0;\n    }\n\n    if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n      var nextPosition;\n      var nextTop = Cartesian3.clone(\n        Cartesian3.ZERO,\n        scratchCartesian3Position5\n      );\n      var groundPosition = ellipsoid.scaleToGeodeticSurface(\n        Cartesian3.fromArray(topPositions, i3, scratchCartesian3Position2),\n        scratchCartesian3Position2\n      );\n      if (i + 1 < length) {\n        nextPosition = ellipsoid.scaleToGeodeticSurface(\n          Cartesian3.fromArray(\n            topPositions,\n            i3 + 3,\n            scratchCartesian3Position3\n          ),\n          scratchCartesian3Position3\n        );\n        nextTop = Cartesian3.fromArray(\n          topPositions,\n          i3 + 3,\n          scratchCartesian3Position5\n        );\n      }\n\n      if (recomputeNormal) {\n        var scalednextPosition = Cartesian3.subtract(\n          nextTop,\n          topPosition,\n          scratchCartesian3Position4\n        );\n        var scaledGroundPosition = Cartesian3.subtract(\n          groundPosition,\n          topPosition,\n          scratchCartesian3Position1\n        );\n        normal = Cartesian3.normalize(\n          Cartesian3.cross(scaledGroundPosition, scalednextPosition, normal),\n          normal\n        );\n        recomputeNormal = false;\n      }\n\n      if (\n        Cartesian3.equalsEpsilon(\n          nextPosition,\n          groundPosition,\n          CesiumMath.EPSILON10\n        )\n      ) {\n        recomputeNormal = true;\n      } else {\n        s += ds;\n        if (vertexFormat.tangent) {\n          tangent = Cartesian3.normalize(\n            Cartesian3.subtract(nextPosition, groundPosition, tangent),\n            tangent\n          );\n        }\n        if (vertexFormat.bitangent) {\n          bitangent = Cartesian3.normalize(\n            Cartesian3.cross(normal, tangent, bitangent),\n            bitangent\n          );\n        }\n      }\n\n      if (vertexFormat.normal) {\n        normals[normalIndex++] = normal.x;\n        normals[normalIndex++] = normal.y;\n        normals[normalIndex++] = normal.z;\n\n        normals[normalIndex++] = normal.x;\n        normals[normalIndex++] = normal.y;\n        normals[normalIndex++] = normal.z;\n      }\n\n      if (vertexFormat.tangent) {\n        tangents[tangentIndex++] = tangent.x;\n        tangents[tangentIndex++] = tangent.y;\n        tangents[tangentIndex++] = tangent.z;\n\n        tangents[tangentIndex++] = tangent.x;\n        tangents[tangentIndex++] = tangent.y;\n        tangents[tangentIndex++] = tangent.z;\n      }\n\n      if (vertexFormat.bitangent) {\n        bitangents[bitangentIndex++] = bitangent.x;\n        bitangents[bitangentIndex++] = bitangent.y;\n        bitangents[bitangentIndex++] = bitangent.z;\n\n        bitangents[bitangentIndex++] = bitangent.x;\n        bitangents[bitangentIndex++] = bitangent.y;\n        bitangents[bitangentIndex++] = bitangent.z;\n      }\n    }\n  }\n\n  var attributes = new GeometryAttributes();\n\n  if (vertexFormat.position) {\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions,\n    });\n  }\n\n  if (vertexFormat.normal) {\n    attributes.normal = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: normals,\n    });\n  }\n\n  if (vertexFormat.tangent) {\n    attributes.tangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: tangents,\n    });\n  }\n\n  if (vertexFormat.bitangent) {\n    attributes.bitangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: bitangents,\n    });\n  }\n\n  if (vertexFormat.st) {\n    attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: textureCoordinates,\n    });\n  }\n\n  // prepare the side walls, two triangles for each wall\n  //\n  //    A (i+1)  B (i+3) E\n  //    +--------+-------+\n  //    |      / |      /|    triangles:  A C B\n  //    |     /  |     / |                B C D\n  //    |    /   |    /  |\n  //    |   /    |   /   |\n  //    |  /     |  /    |\n  //    | /      | /     |\n  //    +--------+-------+\n  //    C (i)    D (i+2) F\n  //\n\n  var numVertices = size / 3;\n  size -= 6 * (numCorners + 1);\n  var indices = IndexDatatype.createTypedArray(numVertices, size);\n\n  var edgeIndex = 0;\n  for (i = 0; i < numVertices - 2; i += 2) {\n    var LL = i;\n    var LR = i + 2;\n    var pl = Cartesian3.fromArray(\n      positions,\n      LL * 3,\n      scratchCartesian3Position1\n    );\n    var pr = Cartesian3.fromArray(\n      positions,\n      LR * 3,\n      scratchCartesian3Position2\n    );\n    if (Cartesian3.equalsEpsilon(pl, pr, CesiumMath.EPSILON10)) {\n      continue;\n    }\n    var UL = i + 1;\n    var UR = i + 3;\n\n    indices[edgeIndex++] = UL;\n    indices[edgeIndex++] = LL;\n    indices[edgeIndex++] = UR;\n    indices[edgeIndex++] = UR;\n    indices[edgeIndex++] = LL;\n    indices[edgeIndex++] = LR;\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: new BoundingSphere.fromVertices(positions),\n  });\n};\nexport default WallGeometry;\n"]},"metadata":{},"sourceType":"module"}