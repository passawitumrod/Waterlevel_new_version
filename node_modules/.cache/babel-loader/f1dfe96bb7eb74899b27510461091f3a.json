{"ast":null,"code":"import addToArray from './addToArray.js';\nimport ForEach from './ForEach.js';\nimport getAccessorByteStride from './getAccessorByteStride.js';\nimport defaultValue from '../../Core/defaultValue.js';\nimport defined from '../../Core/defined.js';\nimport WebGLConstants from '../../Core/WebGLConstants.js';\n/**\n * Adds default glTF values if they don't exist.\n *\n * @param {Object} gltf A javascript object containing a glTF asset.\n * @returns {Object} The modified glTF.\n *\n * @private\n */\n\nfunction addDefaults(gltf) {\n  ForEach.accessor(gltf, function (accessor) {\n    if (defined(accessor.bufferView)) {\n      accessor.byteOffset = defaultValue(accessor.byteOffset, 0);\n    }\n  });\n  ForEach.bufferView(gltf, function (bufferView) {\n    if (defined(bufferView.buffer)) {\n      bufferView.byteOffset = defaultValue(bufferView.byteOffset, 0);\n    }\n  });\n  ForEach.mesh(gltf, function (mesh) {\n    ForEach.meshPrimitive(mesh, function (primitive) {\n      primitive.mode = defaultValue(primitive.mode, WebGLConstants.TRIANGLES);\n\n      if (!defined(primitive.material)) {\n        if (!defined(gltf.materials)) {\n          gltf.materials = [];\n        }\n\n        var defaultMaterial = {\n          name: 'default'\n        };\n        primitive.material = addToArray(gltf.materials, defaultMaterial);\n      }\n    });\n  });\n  ForEach.accessorContainingVertexAttributeData(gltf, function (accessorId) {\n    var accessor = gltf.accessors[accessorId];\n    var bufferViewId = accessor.bufferView;\n    accessor.normalized = defaultValue(accessor.normalized, false);\n\n    if (defined(bufferViewId)) {\n      var bufferView = gltf.bufferViews[bufferViewId];\n      bufferView.byteStride = getAccessorByteStride(gltf, accessor);\n      bufferView.target = WebGLConstants.ARRAY_BUFFER;\n    }\n  });\n  ForEach.accessorContainingIndexData(gltf, function (accessorId) {\n    var accessor = gltf.accessors[accessorId];\n    var bufferViewId = accessor.bufferView;\n\n    if (defined(bufferViewId)) {\n      var bufferView = gltf.bufferViews[bufferViewId];\n      bufferView.target = WebGLConstants.ELEMENT_ARRAY_BUFFER;\n    }\n  });\n  ForEach.material(gltf, function (material) {\n    var extensions = defaultValue(material.extensions, defaultValue.EMPTY_OBJECT);\n    var materialsCommon = extensions.KHR_materials_common;\n\n    if (defined(materialsCommon)) {\n      var technique = materialsCommon.technique;\n      var values = defined(materialsCommon.values) ? materialsCommon.values : {};\n      materialsCommon.values = values;\n      values.ambient = defined(values.ambient) ? values.ambient : [0.0, 0.0, 0.0, 1.0];\n      values.emission = defined(values.emission) ? values.emission : [0.0, 0.0, 0.0, 1.0];\n      values.transparency = defaultValue(values.transparency, 1.0);\n      values.transparent = defaultValue(values.transparent, false);\n      values.doubleSided = defaultValue(values.doubleSided, false);\n\n      if (technique !== 'CONSTANT') {\n        values.diffuse = defined(values.diffuse) ? values.diffuse : [0.0, 0.0, 0.0, 1.0];\n\n        if (technique !== 'LAMBERT') {\n          values.specular = defined(values.specular) ? values.specular : [0.0, 0.0, 0.0, 1.0];\n          values.shininess = defaultValue(values.shininess, 0.0);\n        }\n      }\n\n      return;\n    }\n\n    material.emissiveFactor = defaultValue(material.emissiveFactor, [0.0, 0.0, 0.0]);\n    material.alphaMode = defaultValue(material.alphaMode, 'OPAQUE');\n    material.doubleSided = defaultValue(material.doubleSided, false);\n\n    if (material.alphaMode === 'MASK') {\n      material.alphaCutoff = defaultValue(material.alphaCutoff, 0.5);\n    }\n\n    var techniquesExtension = extensions.KHR_techniques_webgl;\n\n    if (defined(techniquesExtension)) {\n      ForEach.materialValue(material, function (materialValue) {\n        // Check if material value is a TextureInfo object\n        if (defined(materialValue.index)) {\n          addTextureDefaults(materialValue);\n        }\n      });\n    }\n\n    addTextureDefaults(material.emissiveTexture);\n    addTextureDefaults(material.normalTexture);\n    addTextureDefaults(material.occlusionTexture);\n    var pbrMetallicRoughness = material.pbrMetallicRoughness;\n\n    if (defined(pbrMetallicRoughness)) {\n      pbrMetallicRoughness.baseColorFactor = defaultValue(pbrMetallicRoughness.baseColorFactor, [1.0, 1.0, 1.0, 1.0]);\n      pbrMetallicRoughness.metallicFactor = defaultValue(pbrMetallicRoughness.metallicFactor, 1.0);\n      pbrMetallicRoughness.roughnessFactor = defaultValue(pbrMetallicRoughness.roughnessFactor, 1.0);\n      addTextureDefaults(pbrMetallicRoughness.baseColorTexture);\n      addTextureDefaults(pbrMetallicRoughness.metallicRoughnessTexture);\n    }\n\n    var pbrSpecularGlossiness = extensions.pbrSpecularGlossiness;\n\n    if (defined(pbrSpecularGlossiness)) {\n      pbrSpecularGlossiness.diffuseFactor = defaultValue(pbrSpecularGlossiness.diffuseFactor, [1.0, 1.0, 1.0, 1.0]);\n      pbrSpecularGlossiness.specularFactor = defaultValue(pbrSpecularGlossiness.specularFactor, [1.0, 1.0, 1.0]);\n      pbrSpecularGlossiness.glossinessFactor = defaultValue(pbrSpecularGlossiness.glossinessFactor, 1.0);\n      addTextureDefaults(pbrSpecularGlossiness.specularGlossinessTexture);\n    }\n  });\n  ForEach.animation(gltf, function (animation) {\n    ForEach.animationSampler(animation, function (sampler) {\n      sampler.interpolation = defaultValue(sampler.interpolation, 'LINEAR');\n    });\n  });\n  var animatedNodes = getAnimatedNodes(gltf);\n  ForEach.node(gltf, function (node, id) {\n    var animated = defined(animatedNodes[id]);\n\n    if (animated || defined(node.translation) || defined(node.rotation) || defined(node.scale)) {\n      node.translation = defaultValue(node.translation, [0.0, 0.0, 0.0]);\n      node.rotation = defaultValue(node.rotation, [0.0, 0.0, 0.0, 1.0]);\n      node.scale = defaultValue(node.scale, [1.0, 1.0, 1.0]);\n    } else {\n      node.matrix = defaultValue(node.matrix, [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n    }\n  });\n  ForEach.sampler(gltf, function (sampler) {\n    sampler.wrapS = defaultValue(sampler.wrapS, WebGLConstants.REPEAT);\n    sampler.wrapT = defaultValue(sampler.wrapT, WebGLConstants.REPEAT);\n  });\n\n  if (defined(gltf.scenes) && !defined(gltf.scene)) {\n    gltf.scene = 0;\n  }\n\n  return gltf;\n}\n\nfunction getAnimatedNodes(gltf) {\n  var nodes = {};\n  ForEach.animation(gltf, function (animation) {\n    ForEach.animationChannel(animation, function (channel) {\n      var target = channel.target;\n      var nodeId = target.node;\n      var path = target.path; // Ignore animations that target 'weights'\n\n      if (path === 'translation' || path === 'rotation' || path === 'scale') {\n        nodes[nodeId] = true;\n      }\n    });\n  });\n  return nodes;\n}\n\nfunction addTextureDefaults(texture) {\n  if (defined(texture)) {\n    texture.texCoord = defaultValue(texture.texCoord, 0);\n  }\n}\n\nexport default addDefaults;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/ThirdParty/GltfPipeline/addDefaults.js"],"names":["addToArray","ForEach","getAccessorByteStride","defaultValue","defined","WebGLConstants","addDefaults","gltf","accessor","bufferView","byteOffset","buffer","mesh","meshPrimitive","primitive","mode","TRIANGLES","material","materials","defaultMaterial","name","accessorContainingVertexAttributeData","accessorId","accessors","bufferViewId","normalized","bufferViews","byteStride","target","ARRAY_BUFFER","accessorContainingIndexData","ELEMENT_ARRAY_BUFFER","extensions","EMPTY_OBJECT","materialsCommon","KHR_materials_common","technique","values","ambient","emission","transparency","transparent","doubleSided","diffuse","specular","shininess","emissiveFactor","alphaMode","alphaCutoff","techniquesExtension","KHR_techniques_webgl","materialValue","index","addTextureDefaults","emissiveTexture","normalTexture","occlusionTexture","pbrMetallicRoughness","baseColorFactor","metallicFactor","roughnessFactor","baseColorTexture","metallicRoughnessTexture","pbrSpecularGlossiness","diffuseFactor","specularFactor","glossinessFactor","specularGlossinessTexture","animation","animationSampler","sampler","interpolation","animatedNodes","getAnimatedNodes","node","id","animated","translation","rotation","scale","matrix","wrapS","REPEAT","wrapT","scenes","scene","nodes","animationChannel","channel","nodeId","path","texture","texCoord"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,iBAAvB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,qBAAP,MAAkC,4BAAlC;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AAEI;;;;;;;;;AAQA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACvBN,EAAAA,OAAO,CAACO,QAAR,CAAiBD,IAAjB,EAAuB,UAASC,QAAT,EAAmB;AACtC,QAAIJ,OAAO,CAACI,QAAQ,CAACC,UAAV,CAAX,EAAkC;AAC9BD,MAAAA,QAAQ,CAACE,UAAT,GAAsBP,YAAY,CAACK,QAAQ,CAACE,UAAV,EAAsB,CAAtB,CAAlC;AACH;AACJ,GAJD;AAMAT,EAAAA,OAAO,CAACQ,UAAR,CAAmBF,IAAnB,EAAyB,UAASE,UAAT,EAAqB;AAC1C,QAAIL,OAAO,CAACK,UAAU,CAACE,MAAZ,CAAX,EAAgC;AAC5BF,MAAAA,UAAU,CAACC,UAAX,GAAwBP,YAAY,CAACM,UAAU,CAACC,UAAZ,EAAwB,CAAxB,CAApC;AACH;AACJ,GAJD;AAMAT,EAAAA,OAAO,CAACW,IAAR,CAAaL,IAAb,EAAmB,UAASK,IAAT,EAAe;AAC9BX,IAAAA,OAAO,CAACY,aAAR,CAAsBD,IAAtB,EAA4B,UAASE,SAAT,EAAoB;AAC5CA,MAAAA,SAAS,CAACC,IAAV,GAAiBZ,YAAY,CAACW,SAAS,CAACC,IAAX,EAAiBV,cAAc,CAACW,SAAhC,CAA7B;;AACA,UAAI,CAACZ,OAAO,CAACU,SAAS,CAACG,QAAX,CAAZ,EAAkC;AAC9B,YAAI,CAACb,OAAO,CAACG,IAAI,CAACW,SAAN,CAAZ,EAA8B;AAC1BX,UAAAA,IAAI,CAACW,SAAL,GAAiB,EAAjB;AACH;;AACD,YAAIC,eAAe,GAAG;AAClBC,UAAAA,IAAI,EAAE;AADY,SAAtB;AAGAN,QAAAA,SAAS,CAACG,QAAV,GAAqBjB,UAAU,CAACO,IAAI,CAACW,SAAN,EAAiBC,eAAjB,CAA/B;AACH;AACJ,KAXD;AAYH,GAbD;AAeAlB,EAAAA,OAAO,CAACoB,qCAAR,CAA8Cd,IAA9C,EAAoD,UAASe,UAAT,EAAqB;AACrE,QAAId,QAAQ,GAAGD,IAAI,CAACgB,SAAL,CAAeD,UAAf,CAAf;AACA,QAAIE,YAAY,GAAGhB,QAAQ,CAACC,UAA5B;AACAD,IAAAA,QAAQ,CAACiB,UAAT,GAAsBtB,YAAY,CAACK,QAAQ,CAACiB,UAAV,EAAsB,KAAtB,CAAlC;;AACA,QAAIrB,OAAO,CAACoB,YAAD,CAAX,EAA2B;AACvB,UAAIf,UAAU,GAAGF,IAAI,CAACmB,WAAL,CAAiBF,YAAjB,CAAjB;AACAf,MAAAA,UAAU,CAACkB,UAAX,GAAwBzB,qBAAqB,CAACK,IAAD,EAAOC,QAAP,CAA7C;AACAC,MAAAA,UAAU,CAACmB,MAAX,GAAoBvB,cAAc,CAACwB,YAAnC;AACH;AACJ,GATD;AAWA5B,EAAAA,OAAO,CAAC6B,2BAAR,CAAoCvB,IAApC,EAA0C,UAASe,UAAT,EAAqB;AAC3D,QAAId,QAAQ,GAAGD,IAAI,CAACgB,SAAL,CAAeD,UAAf,CAAf;AACA,QAAIE,YAAY,GAAGhB,QAAQ,CAACC,UAA5B;;AACA,QAAIL,OAAO,CAACoB,YAAD,CAAX,EAA2B;AACvB,UAAIf,UAAU,GAAGF,IAAI,CAACmB,WAAL,CAAiBF,YAAjB,CAAjB;AACAf,MAAAA,UAAU,CAACmB,MAAX,GAAoBvB,cAAc,CAAC0B,oBAAnC;AACH;AACJ,GAPD;AASA9B,EAAAA,OAAO,CAACgB,QAAR,CAAiBV,IAAjB,EAAuB,UAASU,QAAT,EAAmB;AACtC,QAAIe,UAAU,GAAG7B,YAAY,CAACc,QAAQ,CAACe,UAAV,EAAsB7B,YAAY,CAAC8B,YAAnC,CAA7B;AACA,QAAIC,eAAe,GAAGF,UAAU,CAACG,oBAAjC;;AACA,QAAI/B,OAAO,CAAC8B,eAAD,CAAX,EAA8B;AAC1B,UAAIE,SAAS,GAAGF,eAAe,CAACE,SAAhC;AACA,UAAIC,MAAM,GAAGjC,OAAO,CAAC8B,eAAe,CAACG,MAAjB,CAAP,GAAkCH,eAAe,CAACG,MAAlD,GAA2D,EAAxE;AACAH,MAAAA,eAAe,CAACG,MAAhB,GAAyBA,MAAzB;AAEAA,MAAAA,MAAM,CAACC,OAAP,GAAiBlC,OAAO,CAACiC,MAAM,CAACC,OAAR,CAAP,GAA0BD,MAAM,CAACC,OAAjC,GAA2C,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAA5D;AACAD,MAAAA,MAAM,CAACE,QAAP,GAAkBnC,OAAO,CAACiC,MAAM,CAACE,QAAR,CAAP,GAA2BF,MAAM,CAACE,QAAlC,GAA6C,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAA/D;AAEAF,MAAAA,MAAM,CAACG,YAAP,GAAsBrC,YAAY,CAACkC,MAAM,CAACG,YAAR,EAAsB,GAAtB,CAAlC;AACAH,MAAAA,MAAM,CAACI,WAAP,GAAqBtC,YAAY,CAACkC,MAAM,CAACI,WAAR,EAAqB,KAArB,CAAjC;AACAJ,MAAAA,MAAM,CAACK,WAAP,GAAqBvC,YAAY,CAACkC,MAAM,CAACK,WAAR,EAAqB,KAArB,CAAjC;;AAEA,UAAIN,SAAS,KAAK,UAAlB,EAA8B;AAC1BC,QAAAA,MAAM,CAACM,OAAP,GAAiBvC,OAAO,CAACiC,MAAM,CAACM,OAAR,CAAP,GAA0BN,MAAM,CAACM,OAAjC,GAA2C,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAA5D;;AACA,YAAIP,SAAS,KAAK,SAAlB,EAA6B;AACzBC,UAAAA,MAAM,CAACO,QAAP,GAAkBxC,OAAO,CAACiC,MAAM,CAACO,QAAR,CAAP,GAA2BP,MAAM,CAACO,QAAlC,GAA6C,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAA/D;AACAP,UAAAA,MAAM,CAACQ,SAAP,GAAmB1C,YAAY,CAACkC,MAAM,CAACQ,SAAR,EAAmB,GAAnB,CAA/B;AACH;AACJ;;AACD;AACH;;AAED5B,IAAAA,QAAQ,CAAC6B,cAAT,GAA0B3C,YAAY,CAACc,QAAQ,CAAC6B,cAAV,EAA0B,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA1B,CAAtC;AACA7B,IAAAA,QAAQ,CAAC8B,SAAT,GAAqB5C,YAAY,CAACc,QAAQ,CAAC8B,SAAV,EAAqB,QAArB,CAAjC;AACA9B,IAAAA,QAAQ,CAACyB,WAAT,GAAuBvC,YAAY,CAACc,QAAQ,CAACyB,WAAV,EAAuB,KAAvB,CAAnC;;AAEA,QAAIzB,QAAQ,CAAC8B,SAAT,KAAuB,MAA3B,EAAmC;AAC/B9B,MAAAA,QAAQ,CAAC+B,WAAT,GAAuB7C,YAAY,CAACc,QAAQ,CAAC+B,WAAV,EAAuB,GAAvB,CAAnC;AACH;;AAED,QAAIC,mBAAmB,GAAGjB,UAAU,CAACkB,oBAArC;;AACA,QAAI9C,OAAO,CAAC6C,mBAAD,CAAX,EAAkC;AAC9BhD,MAAAA,OAAO,CAACkD,aAAR,CAAsBlC,QAAtB,EAAgC,UAAUkC,aAAV,EAAyB;AACrD;AACA,YAAI/C,OAAO,CAAC+C,aAAa,CAACC,KAAf,CAAX,EAAkC;AAC9BC,UAAAA,kBAAkB,CAACF,aAAD,CAAlB;AACH;AACJ,OALD;AAMH;;AAEDE,IAAAA,kBAAkB,CAACpC,QAAQ,CAACqC,eAAV,CAAlB;AACAD,IAAAA,kBAAkB,CAACpC,QAAQ,CAACsC,aAAV,CAAlB;AACAF,IAAAA,kBAAkB,CAACpC,QAAQ,CAACuC,gBAAV,CAAlB;AAEA,QAAIC,oBAAoB,GAAGxC,QAAQ,CAACwC,oBAApC;;AACA,QAAIrD,OAAO,CAACqD,oBAAD,CAAX,EAAmC;AAC/BA,MAAAA,oBAAoB,CAACC,eAArB,GAAuCvD,YAAY,CAACsD,oBAAoB,CAACC,eAAtB,EAAuC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAvC,CAAnD;AACAD,MAAAA,oBAAoB,CAACE,cAArB,GAAsCxD,YAAY,CAACsD,oBAAoB,CAACE,cAAtB,EAAsC,GAAtC,CAAlD;AACAF,MAAAA,oBAAoB,CAACG,eAArB,GAAuCzD,YAAY,CAACsD,oBAAoB,CAACG,eAAtB,EAAuC,GAAvC,CAAnD;AACAP,MAAAA,kBAAkB,CAACI,oBAAoB,CAACI,gBAAtB,CAAlB;AACAR,MAAAA,kBAAkB,CAACI,oBAAoB,CAACK,wBAAtB,CAAlB;AACH;;AAED,QAAIC,qBAAqB,GAAG/B,UAAU,CAAC+B,qBAAvC;;AACA,QAAI3D,OAAO,CAAC2D,qBAAD,CAAX,EAAoC;AAChCA,MAAAA,qBAAqB,CAACC,aAAtB,GAAsC7D,YAAY,CAAC4D,qBAAqB,CAACC,aAAvB,EAAsC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAtC,CAAlD;AACAD,MAAAA,qBAAqB,CAACE,cAAtB,GAAuC9D,YAAY,CAAC4D,qBAAqB,CAACE,cAAvB,EAAuC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAvC,CAAnD;AACAF,MAAAA,qBAAqB,CAACG,gBAAtB,GAAyC/D,YAAY,CAAC4D,qBAAqB,CAACG,gBAAvB,EAAyC,GAAzC,CAArD;AACAb,MAAAA,kBAAkB,CAACU,qBAAqB,CAACI,yBAAvB,CAAlB;AACH;AACJ,GA/DD;AAiEAlE,EAAAA,OAAO,CAACmE,SAAR,CAAkB7D,IAAlB,EAAwB,UAAS6D,SAAT,EAAoB;AACxCnE,IAAAA,OAAO,CAACoE,gBAAR,CAAyBD,SAAzB,EAAoC,UAASE,OAAT,EAAkB;AAClDA,MAAAA,OAAO,CAACC,aAAR,GAAwBpE,YAAY,CAACmE,OAAO,CAACC,aAAT,EAAwB,QAAxB,CAApC;AACH,KAFD;AAGH,GAJD;AAMA,MAAIC,aAAa,GAAGC,gBAAgB,CAAClE,IAAD,CAApC;AACAN,EAAAA,OAAO,CAACyE,IAAR,CAAanE,IAAb,EAAmB,UAASmE,IAAT,EAAeC,EAAf,EAAmB;AAClC,QAAIC,QAAQ,GAAGxE,OAAO,CAACoE,aAAa,CAACG,EAAD,CAAd,CAAtB;;AACA,QAAIC,QAAQ,IAAIxE,OAAO,CAACsE,IAAI,CAACG,WAAN,CAAnB,IAAyCzE,OAAO,CAACsE,IAAI,CAACI,QAAN,CAAhD,IAAmE1E,OAAO,CAACsE,IAAI,CAACK,KAAN,CAA9E,EAA4F;AACxFL,MAAAA,IAAI,CAACG,WAAL,GAAmB1E,YAAY,CAACuE,IAAI,CAACG,WAAN,EAAmB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAnB,CAA/B;AACAH,MAAAA,IAAI,CAACI,QAAL,GAAgB3E,YAAY,CAACuE,IAAI,CAACI,QAAN,EAAgB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAhB,CAA5B;AACAJ,MAAAA,IAAI,CAACK,KAAL,GAAa5E,YAAY,CAACuE,IAAI,CAACK,KAAN,EAAa,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAb,CAAzB;AACH,KAJD,MAIO;AACHL,MAAAA,IAAI,CAACM,MAAL,GAAc7E,YAAY,CAACuE,IAAI,CAACM,MAAN,EAAc,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,EAAkE,GAAlE,EAAuE,GAAvE,EAA4E,GAA5E,CAAd,CAA1B;AACH;AACJ,GATD;AAWA/E,EAAAA,OAAO,CAACqE,OAAR,CAAgB/D,IAAhB,EAAsB,UAAS+D,OAAT,EAAkB;AACpCA,IAAAA,OAAO,CAACW,KAAR,GAAgB9E,YAAY,CAACmE,OAAO,CAACW,KAAT,EAAgB5E,cAAc,CAAC6E,MAA/B,CAA5B;AACAZ,IAAAA,OAAO,CAACa,KAAR,GAAgBhF,YAAY,CAACmE,OAAO,CAACa,KAAT,EAAgB9E,cAAc,CAAC6E,MAA/B,CAA5B;AACH,GAHD;;AAKA,MAAI9E,OAAO,CAACG,IAAI,CAAC6E,MAAN,CAAP,IAAwB,CAAChF,OAAO,CAACG,IAAI,CAAC8E,KAAN,CAApC,EAAkD;AAC9C9E,IAAAA,IAAI,CAAC8E,KAAL,GAAa,CAAb;AACH;;AAED,SAAO9E,IAAP;AACH;;AAED,SAASkE,gBAAT,CAA0BlE,IAA1B,EAAgC;AAC5B,MAAI+E,KAAK,GAAG,EAAZ;AACArF,EAAAA,OAAO,CAACmE,SAAR,CAAkB7D,IAAlB,EAAwB,UAAS6D,SAAT,EAAoB;AACxCnE,IAAAA,OAAO,CAACsF,gBAAR,CAAyBnB,SAAzB,EAAoC,UAASoB,OAAT,EAAkB;AAClD,UAAI5D,MAAM,GAAG4D,OAAO,CAAC5D,MAArB;AACA,UAAI6D,MAAM,GAAG7D,MAAM,CAAC8C,IAApB;AACA,UAAIgB,IAAI,GAAG9D,MAAM,CAAC8D,IAAlB,CAHkD,CAIlD;;AACA,UAAIA,IAAI,KAAK,aAAT,IAA0BA,IAAI,KAAK,UAAnC,IAAiDA,IAAI,KAAK,OAA9D,EAAuE;AACnEJ,QAAAA,KAAK,CAACG,MAAD,CAAL,GAAgB,IAAhB;AACH;AACJ,KARD;AASH,GAVD;AAWA,SAAOH,KAAP;AACH;;AAED,SAASjC,kBAAT,CAA4BsC,OAA5B,EAAqC;AACjC,MAAIvF,OAAO,CAACuF,OAAD,CAAX,EAAsB;AAClBA,IAAAA,OAAO,CAACC,QAAR,GAAmBzF,YAAY,CAACwF,OAAO,CAACC,QAAT,EAAmB,CAAnB,CAA/B;AACH;AACJ;;AAED,eAAetF,WAAf","sourcesContent":["import addToArray from './addToArray.js'\nimport ForEach from './ForEach.js'\nimport getAccessorByteStride from './getAccessorByteStride.js'\nimport defaultValue from '../../Core/defaultValue.js'\nimport defined from '../../Core/defined.js'\nimport WebGLConstants from '../../Core/WebGLConstants.js'\n\n    /**\n     * Adds default glTF values if they don't exist.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @returns {Object} The modified glTF.\n     *\n     * @private\n     */\n    function addDefaults(gltf) {\n        ForEach.accessor(gltf, function(accessor) {\n            if (defined(accessor.bufferView)) {\n                accessor.byteOffset = defaultValue(accessor.byteOffset, 0);\n            }\n        });\n\n        ForEach.bufferView(gltf, function(bufferView) {\n            if (defined(bufferView.buffer)) {\n                bufferView.byteOffset = defaultValue(bufferView.byteOffset, 0);\n            }\n        });\n\n        ForEach.mesh(gltf, function(mesh) {\n            ForEach.meshPrimitive(mesh, function(primitive) {\n                primitive.mode = defaultValue(primitive.mode, WebGLConstants.TRIANGLES);\n                if (!defined(primitive.material)) {\n                    if (!defined(gltf.materials)) {\n                        gltf.materials = [];\n                    }\n                    var defaultMaterial = {\n                        name: 'default'\n                    };\n                    primitive.material = addToArray(gltf.materials, defaultMaterial);\n                }\n            });\n        });\n\n        ForEach.accessorContainingVertexAttributeData(gltf, function(accessorId) {\n            var accessor = gltf.accessors[accessorId];\n            var bufferViewId = accessor.bufferView;\n            accessor.normalized = defaultValue(accessor.normalized, false);\n            if (defined(bufferViewId)) {\n                var bufferView = gltf.bufferViews[bufferViewId];\n                bufferView.byteStride = getAccessorByteStride(gltf, accessor);\n                bufferView.target = WebGLConstants.ARRAY_BUFFER;\n            }\n        });\n\n        ForEach.accessorContainingIndexData(gltf, function(accessorId) {\n            var accessor = gltf.accessors[accessorId];\n            var bufferViewId = accessor.bufferView;\n            if (defined(bufferViewId)) {\n                var bufferView = gltf.bufferViews[bufferViewId];\n                bufferView.target = WebGLConstants.ELEMENT_ARRAY_BUFFER;\n            }\n        });\n\n        ForEach.material(gltf, function(material) {\n            var extensions = defaultValue(material.extensions, defaultValue.EMPTY_OBJECT);\n            var materialsCommon = extensions.KHR_materials_common;\n            if (defined(materialsCommon)) {\n                var technique = materialsCommon.technique;\n                var values = defined(materialsCommon.values) ? materialsCommon.values : {};\n                materialsCommon.values = values;\n\n                values.ambient = defined(values.ambient) ? values.ambient : [0.0, 0.0, 0.0, 1.0];\n                values.emission = defined(values.emission) ? values.emission : [0.0, 0.0, 0.0, 1.0];\n\n                values.transparency = defaultValue(values.transparency, 1.0);\n                values.transparent = defaultValue(values.transparent, false);\n                values.doubleSided = defaultValue(values.doubleSided, false);\n\n                if (technique !== 'CONSTANT') {\n                    values.diffuse = defined(values.diffuse) ? values.diffuse : [0.0, 0.0, 0.0, 1.0];\n                    if (technique !== 'LAMBERT') {\n                        values.specular = defined(values.specular) ? values.specular : [0.0, 0.0, 0.0, 1.0];\n                        values.shininess = defaultValue(values.shininess, 0.0);\n                    }\n                }\n                return;\n            }\n\n            material.emissiveFactor = defaultValue(material.emissiveFactor, [0.0, 0.0, 0.0]);\n            material.alphaMode = defaultValue(material.alphaMode, 'OPAQUE');\n            material.doubleSided = defaultValue(material.doubleSided, false);\n\n            if (material.alphaMode === 'MASK') {\n                material.alphaCutoff = defaultValue(material.alphaCutoff, 0.5);\n            }\n\n            var techniquesExtension = extensions.KHR_techniques_webgl;\n            if (defined(techniquesExtension)) {\n                ForEach.materialValue(material, function (materialValue) {\n                    // Check if material value is a TextureInfo object\n                    if (defined(materialValue.index)) {\n                        addTextureDefaults(materialValue);\n                    }\n                });\n            }\n\n            addTextureDefaults(material.emissiveTexture);\n            addTextureDefaults(material.normalTexture);\n            addTextureDefaults(material.occlusionTexture);\n\n            var pbrMetallicRoughness = material.pbrMetallicRoughness;\n            if (defined(pbrMetallicRoughness)) {\n                pbrMetallicRoughness.baseColorFactor = defaultValue(pbrMetallicRoughness.baseColorFactor, [1.0, 1.0, 1.0, 1.0]);\n                pbrMetallicRoughness.metallicFactor = defaultValue(pbrMetallicRoughness.metallicFactor, 1.0);\n                pbrMetallicRoughness.roughnessFactor = defaultValue(pbrMetallicRoughness.roughnessFactor, 1.0);\n                addTextureDefaults(pbrMetallicRoughness.baseColorTexture);\n                addTextureDefaults(pbrMetallicRoughness.metallicRoughnessTexture);\n            }\n\n            var pbrSpecularGlossiness = extensions.pbrSpecularGlossiness;\n            if (defined(pbrSpecularGlossiness)) {\n                pbrSpecularGlossiness.diffuseFactor = defaultValue(pbrSpecularGlossiness.diffuseFactor, [1.0, 1.0, 1.0, 1.0]);\n                pbrSpecularGlossiness.specularFactor = defaultValue(pbrSpecularGlossiness.specularFactor, [1.0, 1.0, 1.0]);\n                pbrSpecularGlossiness.glossinessFactor = defaultValue(pbrSpecularGlossiness.glossinessFactor, 1.0);\n                addTextureDefaults(pbrSpecularGlossiness.specularGlossinessTexture);\n            }\n        });\n\n        ForEach.animation(gltf, function(animation) {\n            ForEach.animationSampler(animation, function(sampler) {\n                sampler.interpolation = defaultValue(sampler.interpolation, 'LINEAR');\n            });\n        });\n\n        var animatedNodes = getAnimatedNodes(gltf);\n        ForEach.node(gltf, function(node, id) {\n            var animated = defined(animatedNodes[id]);\n            if (animated || defined(node.translation) || defined(node.rotation) || defined(node.scale)) {\n                node.translation = defaultValue(node.translation, [0.0, 0.0, 0.0]);\n                node.rotation = defaultValue(node.rotation, [0.0, 0.0, 0.0, 1.0]);\n                node.scale = defaultValue(node.scale, [1.0, 1.0, 1.0]);\n            } else {\n                node.matrix = defaultValue(node.matrix, [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n            }\n        });\n\n        ForEach.sampler(gltf, function(sampler) {\n            sampler.wrapS = defaultValue(sampler.wrapS, WebGLConstants.REPEAT);\n            sampler.wrapT = defaultValue(sampler.wrapT, WebGLConstants.REPEAT);\n        });\n\n        if (defined(gltf.scenes) && !defined(gltf.scene)) {\n            gltf.scene = 0;\n        }\n\n        return gltf;\n    }\n\n    function getAnimatedNodes(gltf) {\n        var nodes = {};\n        ForEach.animation(gltf, function(animation) {\n            ForEach.animationChannel(animation, function(channel) {\n                var target = channel.target;\n                var nodeId = target.node;\n                var path = target.path;\n                // Ignore animations that target 'weights'\n                if (path === 'translation' || path === 'rotation' || path === 'scale') {\n                    nodes[nodeId] = true;\n                }\n            });\n        });\n        return nodes;\n    }\n\n    function addTextureDefaults(texture) {\n        if (defined(texture)) {\n            texture.texCoord = defaultValue(texture.texCoord, 0);\n        }\n    }\n\n    export default addDefaults;\n"]},"metadata":{},"sourceType":"module"}