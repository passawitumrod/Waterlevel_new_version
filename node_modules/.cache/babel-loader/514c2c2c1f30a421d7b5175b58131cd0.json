{"ast":null,"code":"import BoxGeometry from \"../Core/BoxGeometry.js\";\nimport BoxOutlineGeometry from \"../Core/BoxOutlineGeometry.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport GeometryOffsetAttribute from \"../Core/GeometryOffsetAttribute.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport heightReferenceOnEntityPropertyChanged from \"./heightReferenceOnEntityPropertyChanged.js\";\nimport Property from \"./Property.js\";\nvar defaultOffset = Cartesian3.ZERO;\nvar offsetScratch = new Cartesian3();\nvar positionScratch = new Cartesian3();\nvar scratchColor = new Color();\n\nfunction BoxGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.dimensions = undefined;\n  this.offsetAttribute = undefined;\n}\n/**\n * A {@link GeometryUpdater} for boxes.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias BoxGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\n\n\nfunction BoxGeometryUpdater(entity, scene) {\n  GeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new BoxGeometryOptions(entity),\n    geometryPropertyName: \"box\",\n    observedPropertyNames: [\"availability\", \"position\", \"orientation\", \"box\"]\n  });\n\n  this._onEntityPropertyChanged(entity, \"box\", entity.box, undefined);\n}\n\nif (defined(Object.create)) {\n  BoxGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n  BoxGeometryUpdater.prototype.constructor = BoxGeometryUpdater;\n}\n\nObject.defineProperties(BoxGeometryUpdater.prototype, {\n  /**\n   * Gets the terrain offset property\n   * @type {TerrainOffsetProperty}\n   * @memberof BoxGeometryUpdater.prototype\n   * @readonly\n   */\n  terrainOffsetProperty: {\n    get: function get() {\n      return this._terrainOffsetProperty;\n    }\n  }\n});\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\n\nBoxGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\"This instance does not represent a filled geometry.\");\n  } //>>includeEnd('debug');\n\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n  var show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time));\n\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n  var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n  var attributes = {\n    show: show,\n    distanceDisplayCondition: distanceDisplayConditionAttribute,\n    color: undefined,\n    offset: undefined\n  };\n\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    var currentColor;\n\n    if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n\n    attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n  }\n\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: BoxGeometry.fromDimensions(this._options),\n    modelMatrix: entity.computeModelMatrixForHeightReference(time, entity.box.heightReference, this._options.dimensions.z * 0.5, this._scene.mapProjection.ellipsoid),\n    attributes: attributes\n  });\n};\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\n\n\nBoxGeometryUpdater.prototype.createOutlineGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\"This instance does not represent an outlined geometry.\");\n  } //>>includeEnd('debug');\n\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n  var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n  var attributes = {\n    show: new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n    color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition),\n    offset: undefined\n  };\n\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: BoxOutlineGeometry.fromDimensions(this._options),\n    modelMatrix: entity.computeModelMatrixForHeightReference(time, entity.box.heightReference, this._options.dimensions.z * 0.5, this._scene.mapProjection.ellipsoid),\n    attributes: attributes\n  });\n};\n\nBoxGeometryUpdater.prototype._computeCenter = function (time, result) {\n  return Property.getValueOrUndefined(this._entity.position, time, result);\n};\n\nBoxGeometryUpdater.prototype._isHidden = function (entity, box) {\n  return !defined(box.dimensions) || !defined(entity.position) || GeometryUpdater.prototype._isHidden.call(this, entity, box);\n};\n\nBoxGeometryUpdater.prototype._isDynamic = function (entity, box) {\n  return !entity.position.isConstant || !Property.isConstant(entity.orientation) || !box.dimensions.isConstant || !Property.isConstant(box.outlineWidth);\n};\n\nBoxGeometryUpdater.prototype._setStaticOptions = function (entity, box) {\n  var heightReference = Property.getValueOrDefault(box.heightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n  var options = this._options;\n  options.vertexFormat = this._materialProperty instanceof ColorMaterialProperty ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.dimensions = box.dimensions.getValue(Iso8601.MINIMUM_VALUE, options.dimensions);\n  options.offsetAttribute = heightReference !== HeightReference.NONE ? GeometryOffsetAttribute.ALL : undefined;\n};\n\nBoxGeometryUpdater.prototype._onEntityPropertyChanged = heightReferenceOnEntityPropertyChanged;\nBoxGeometryUpdater.DynamicGeometryUpdater = DynamicBoxGeometryUpdater;\n/**\n * @private\n */\n\nfunction DynamicBoxGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n  DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n}\n\nif (defined(Object.create)) {\n  DynamicBoxGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n  DynamicBoxGeometryUpdater.prototype.constructor = DynamicBoxGeometryUpdater;\n}\n\nDynamicBoxGeometryUpdater.prototype._isHidden = function (entity, box, time) {\n  var position = Property.getValueOrUndefined(entity.position, time, positionScratch);\n  var dimensions = this._options.dimensions;\n  return !defined(position) || !defined(dimensions) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, box, time);\n};\n\nDynamicBoxGeometryUpdater.prototype._setOptions = function (entity, box, time) {\n  var heightReference = Property.getValueOrDefault(box.heightReference, time, HeightReference.NONE);\n  var options = this._options;\n  options.dimensions = Property.getValueOrUndefined(box.dimensions, time, options.dimensions);\n  options.offsetAttribute = heightReference !== HeightReference.NONE ? GeometryOffsetAttribute.ALL : undefined;\n};\n\nexport default BoxGeometryUpdater;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/BoxGeometryUpdater.js"],"names":["BoxGeometry","BoxOutlineGeometry","Cartesian3","Check","Color","ColorGeometryInstanceAttribute","defined","DeveloperError","DistanceDisplayConditionGeometryInstanceAttribute","GeometryInstance","GeometryOffsetAttribute","Iso8601","OffsetGeometryInstanceAttribute","ShowGeometryInstanceAttribute","HeightReference","MaterialAppearance","PerInstanceColorAppearance","ColorMaterialProperty","DynamicGeometryUpdater","GeometryUpdater","heightReferenceOnEntityPropertyChanged","Property","defaultOffset","ZERO","offsetScratch","positionScratch","scratchColor","BoxGeometryOptions","entity","id","vertexFormat","undefined","dimensions","offsetAttribute","BoxGeometryUpdater","scene","call","geometryOptions","geometryPropertyName","observedPropertyNames","_onEntityPropertyChanged","box","Object","create","prototype","constructor","defineProperties","terrainOffsetProperty","get","_terrainOffsetProperty","createFillGeometryInstance","time","_fillEnabled","_entity","isAvailable","show","isShowing","_showProperty","getValue","_fillProperty","distanceDisplayCondition","_distanceDisplayConditionProperty","distanceDisplayConditionAttribute","fromDistanceDisplayCondition","attributes","color","offset","_materialProperty","currentColor","isConstant","WHITE","fromColor","_options","fromCartesian3","getValueOrDefault","geometry","fromDimensions","modelMatrix","computeModelMatrixForHeightReference","heightReference","z","_scene","mapProjection","ellipsoid","createOutlineGeometryInstance","_outlineEnabled","outlineColor","_outlineColorProperty","BLACK","_showOutlineProperty","_computeCenter","result","getValueOrUndefined","position","_isHidden","_isDynamic","orientation","outlineWidth","_setStaticOptions","MINIMUM_VALUE","NONE","options","VERTEX_FORMAT","MaterialSupport","TEXTURED","ALL","DynamicBoxGeometryUpdater","geometryUpdater","primitives","groundPrimitives","_setOptions"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,wBAAxB;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,8BAAP,MAA2C,2CAA3C;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,iDAAP,MAA8D,8DAA9D;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AACA,OAAOC,uBAAP,MAAoC,oCAApC;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,+BAAP,MAA4C,4CAA5C;AACA,OAAOC,6BAAP,MAA0C,0CAA1C;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;AACA,OAAOC,0BAAP,MAAuC,wCAAvC;AACA,OAAOC,qBAAP,MAAkC,4BAAlC;AACA,OAAOC,sBAAP,MAAmC,6BAAnC;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,OAAOC,sCAAP,MAAmD,6CAAnD;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA,IAAIC,aAAa,GAAGpB,UAAU,CAACqB,IAA/B;AAEA,IAAIC,aAAa,GAAG,IAAItB,UAAJ,EAApB;AACA,IAAIuB,eAAe,GAAG,IAAIvB,UAAJ,EAAtB;AACA,IAAIwB,YAAY,GAAG,IAAItB,KAAJ,EAAnB;;AAEA,SAASuB,kBAAT,CAA4BC,MAA5B,EAAoC;AAClC,OAAKC,EAAL,GAAUD,MAAV;AACA,OAAKE,YAAL,GAAoBC,SAApB;AACA,OAAKC,UAAL,GAAkBD,SAAlB;AACA,OAAKE,eAAL,GAAuBF,SAAvB;AACD;AAED;;;;;;;;;;;AASA,SAASG,kBAAT,CAA4BN,MAA5B,EAAoCO,KAApC,EAA2C;AACzChB,EAAAA,eAAe,CAACiB,IAAhB,CAAqB,IAArB,EAA2B;AACzBR,IAAAA,MAAM,EAAEA,MADiB;AAEzBO,IAAAA,KAAK,EAAEA,KAFkB;AAGzBE,IAAAA,eAAe,EAAE,IAAIV,kBAAJ,CAAuBC,MAAvB,CAHQ;AAIzBU,IAAAA,oBAAoB,EAAE,KAJG;AAKzBC,IAAAA,qBAAqB,EAAE,CAAC,cAAD,EAAiB,UAAjB,EAA6B,aAA7B,EAA4C,KAA5C;AALE,GAA3B;;AAQA,OAAKC,wBAAL,CAA8BZ,MAA9B,EAAsC,KAAtC,EAA6CA,MAAM,CAACa,GAApD,EAAyDV,SAAzD;AACD;;AAED,IAAIzB,OAAO,CAACoC,MAAM,CAACC,MAAR,CAAX,EAA4B;AAC1BT,EAAAA,kBAAkB,CAACU,SAAnB,GAA+BF,MAAM,CAACC,MAAP,CAAcxB,eAAe,CAACyB,SAA9B,CAA/B;AACAV,EAAAA,kBAAkB,CAACU,SAAnB,CAA6BC,WAA7B,GAA2CX,kBAA3C;AACD;;AAEDQ,MAAM,CAACI,gBAAP,CAAwBZ,kBAAkB,CAACU,SAA3C,EAAsD;AACpD;;;;;;AAMAG,EAAAA,qBAAqB,EAAE;AACrBC,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKC,sBAAZ;AACD;AAHoB;AAP6B,CAAtD;AAcA;;;;;;;;;AAQAf,kBAAkB,CAACU,SAAnB,CAA6BM,0BAA7B,GAA0D,UAAUC,IAAV,EAAgB;AACxE;AACAhD,EAAAA,KAAK,CAACG,OAAN,CAAc,MAAd,EAAsB6C,IAAtB;;AAEA,MAAI,CAAC,KAAKC,YAAV,EAAwB;AACtB,UAAM,IAAI7C,cAAJ,CACJ,qDADI,CAAN;AAGD,GARuE,CASxE;;;AAEA,MAAIqB,MAAM,GAAG,KAAKyB,OAAlB;AACA,MAAIC,WAAW,GAAG1B,MAAM,CAAC0B,WAAP,CAAmBH,IAAnB,CAAlB;AAEA,MAAII,IAAI,GAAG,IAAI1C,6BAAJ,CACTyC,WAAW,IACT1B,MAAM,CAAC4B,SADT,IAEE,KAAKC,aAAL,CAAmBC,QAAnB,CAA4BP,IAA5B,CAFF,IAGE,KAAKQ,aAAL,CAAmBD,QAAnB,CAA4BP,IAA5B,CAJO,CAAX;;AAMA,MAAIS,wBAAwB,GAAG,KAAKC,iCAAL,CAAuCH,QAAvC,CAC7BP,IAD6B,CAA/B;;AAGA,MAAIW,iCAAiC,GAAGtD,iDAAiD,CAACuD,4BAAlD,CACtCH,wBADsC,CAAxC;AAIA,MAAII,UAAU,GAAG;AACfT,IAAAA,IAAI,EAAEA,IADS;AAEfK,IAAAA,wBAAwB,EAAEE,iCAFX;AAGfG,IAAAA,KAAK,EAAElC,SAHQ;AAIfmC,IAAAA,MAAM,EAAEnC;AAJO,GAAjB;;AAMA,MAAI,KAAKoC,iBAAL,YAAkClD,qBAAtC,EAA6D;AAC3D,QAAImD,YAAJ;;AACA,QACE9D,OAAO,CAAC,KAAK6D,iBAAL,CAAuBF,KAAxB,CAAP,KACC,KAAKE,iBAAL,CAAuBF,KAAvB,CAA6BI,UAA7B,IAA2Cf,WAD5C,CADF,EAGE;AACAc,MAAAA,YAAY,GAAG,KAAKD,iBAAL,CAAuBF,KAAvB,CAA6BP,QAA7B,CAAsCP,IAAtC,EAA4CzB,YAA5C,CAAf;AACD;;AACD,QAAI,CAACpB,OAAO,CAAC8D,YAAD,CAAZ,EAA4B;AAC1BA,MAAAA,YAAY,GAAGhE,KAAK,CAACkE,KAArB;AACD;;AACDN,IAAAA,UAAU,CAACC,KAAX,GAAmB5D,8BAA8B,CAACkE,SAA/B,CAAyCH,YAAzC,CAAnB;AACD;;AACD,MAAI9D,OAAO,CAAC,KAAKkE,QAAL,CAAcvC,eAAf,CAAX,EAA4C;AAC1C+B,IAAAA,UAAU,CAACE,MAAX,GAAoBtD,+BAA+B,CAAC6D,cAAhC,CAClBpD,QAAQ,CAACqD,iBAAT,CACE,KAAKzB,sBADP,EAEEE,IAFF,EAGE7B,aAHF,EAIEE,aAJF,CADkB,CAApB;AAQD;;AAED,SAAO,IAAIf,gBAAJ,CAAqB;AAC1BoB,IAAAA,EAAE,EAAED,MADsB;AAE1B+C,IAAAA,QAAQ,EAAE3E,WAAW,CAAC4E,cAAZ,CAA2B,KAAKJ,QAAhC,CAFgB;AAG1BK,IAAAA,WAAW,EAAEjD,MAAM,CAACkD,oCAAP,CACX3B,IADW,EAEXvB,MAAM,CAACa,GAAP,CAAWsC,eAFA,EAGX,KAAKP,QAAL,CAAcxC,UAAd,CAAyBgD,CAAzB,GAA6B,GAHlB,EAIX,KAAKC,MAAL,CAAYC,aAAZ,CAA0BC,SAJf,CAHa;AAS1BnB,IAAAA,UAAU,EAAEA;AATc,GAArB,CAAP;AAWD,CApED;AAsEA;;;;;;;;;;AAQA9B,kBAAkB,CAACU,SAAnB,CAA6BwC,6BAA7B,GAA6D,UAAUjC,IAAV,EAAgB;AAC3E;AACAhD,EAAAA,KAAK,CAACG,OAAN,CAAc,MAAd,EAAsB6C,IAAtB;;AAEA,MAAI,CAAC,KAAKkC,eAAV,EAA2B;AACzB,UAAM,IAAI9E,cAAJ,CACJ,wDADI,CAAN;AAGD,GAR0E,CAS3E;;;AAEA,MAAIqB,MAAM,GAAG,KAAKyB,OAAlB;AACA,MAAIC,WAAW,GAAG1B,MAAM,CAAC0B,WAAP,CAAmBH,IAAnB,CAAlB;AACA,MAAImC,YAAY,GAAGjE,QAAQ,CAACqD,iBAAT,CACjB,KAAKa,qBADY,EAEjBpC,IAFiB,EAGjB/C,KAAK,CAACoF,KAHW,EAIjB9D,YAJiB,CAAnB;;AAMA,MAAIkC,wBAAwB,GAAG,KAAKC,iCAAL,CAAuCH,QAAvC,CAC7BP,IAD6B,CAA/B;;AAIA,MAAIa,UAAU,GAAG;AACfT,IAAAA,IAAI,EAAE,IAAI1C,6BAAJ,CACJyC,WAAW,IACT1B,MAAM,CAAC4B,SADT,IAEE,KAAKC,aAAL,CAAmBC,QAAnB,CAA4BP,IAA5B,CAFF,IAGE,KAAKsC,oBAAL,CAA0B/B,QAA1B,CAAmCP,IAAnC,CAJE,CADS;AAOfc,IAAAA,KAAK,EAAE5D,8BAA8B,CAACkE,SAA/B,CAAyCe,YAAzC,CAPQ;AAQf1B,IAAAA,wBAAwB,EAAEpD,iDAAiD,CAACuD,4BAAlD,CACxBH,wBADwB,CARX;AAWfM,IAAAA,MAAM,EAAEnC;AAXO,GAAjB;;AAaA,MAAIzB,OAAO,CAAC,KAAKkE,QAAL,CAAcvC,eAAf,CAAX,EAA4C;AAC1C+B,IAAAA,UAAU,CAACE,MAAX,GAAoBtD,+BAA+B,CAAC6D,cAAhC,CAClBpD,QAAQ,CAACqD,iBAAT,CACE,KAAKzB,sBADP,EAEEE,IAFF,EAGE7B,aAHF,EAIEE,aAJF,CADkB,CAApB;AAQD;;AAED,SAAO,IAAIf,gBAAJ,CAAqB;AAC1BoB,IAAAA,EAAE,EAAED,MADsB;AAE1B+C,IAAAA,QAAQ,EAAE1E,kBAAkB,CAAC2E,cAAnB,CAAkC,KAAKJ,QAAvC,CAFgB;AAG1BK,IAAAA,WAAW,EAAEjD,MAAM,CAACkD,oCAAP,CACX3B,IADW,EAEXvB,MAAM,CAACa,GAAP,CAAWsC,eAFA,EAGX,KAAKP,QAAL,CAAcxC,UAAd,CAAyBgD,CAAzB,GAA6B,GAHlB,EAIX,KAAKC,MAAL,CAAYC,aAAZ,CAA0BC,SAJf,CAHa;AAS1BnB,IAAAA,UAAU,EAAEA;AATc,GAArB,CAAP;AAWD,CA1DD;;AA4DA9B,kBAAkB,CAACU,SAAnB,CAA6B8C,cAA7B,GAA8C,UAAUvC,IAAV,EAAgBwC,MAAhB,EAAwB;AACpE,SAAOtE,QAAQ,CAACuE,mBAAT,CAA6B,KAAKvC,OAAL,CAAawC,QAA1C,EAAoD1C,IAApD,EAA0DwC,MAA1D,CAAP;AACD,CAFD;;AAIAzD,kBAAkB,CAACU,SAAnB,CAA6BkD,SAA7B,GAAyC,UAAUlE,MAAV,EAAkBa,GAAlB,EAAuB;AAC9D,SACE,CAACnC,OAAO,CAACmC,GAAG,CAACT,UAAL,CAAR,IACA,CAAC1B,OAAO,CAACsB,MAAM,CAACiE,QAAR,CADR,IAEA1E,eAAe,CAACyB,SAAhB,CAA0BkD,SAA1B,CAAoC1D,IAApC,CAAyC,IAAzC,EAA+CR,MAA/C,EAAuDa,GAAvD,CAHF;AAKD,CAND;;AAQAP,kBAAkB,CAACU,SAAnB,CAA6BmD,UAA7B,GAA0C,UAAUnE,MAAV,EAAkBa,GAAlB,EAAuB;AAC/D,SACE,CAACb,MAAM,CAACiE,QAAP,CAAgBxB,UAAjB,IACA,CAAChD,QAAQ,CAACgD,UAAT,CAAoBzC,MAAM,CAACoE,WAA3B,CADD,IAEA,CAACvD,GAAG,CAACT,UAAJ,CAAeqC,UAFhB,IAGA,CAAChD,QAAQ,CAACgD,UAAT,CAAoB5B,GAAG,CAACwD,YAAxB,CAJH;AAMD,CAPD;;AASA/D,kBAAkB,CAACU,SAAnB,CAA6BsD,iBAA7B,GAAiD,UAAUtE,MAAV,EAAkBa,GAAlB,EAAuB;AACtE,MAAIsC,eAAe,GAAG1D,QAAQ,CAACqD,iBAAT,CACpBjC,GAAG,CAACsC,eADgB,EAEpBpE,OAAO,CAACwF,aAFY,EAGpBrF,eAAe,CAACsF,IAHI,CAAtB;AAMA,MAAIC,OAAO,GAAG,KAAK7B,QAAnB;AACA6B,EAAAA,OAAO,CAACvE,YAAR,GACE,KAAKqC,iBAAL,YAAkClD,qBAAlC,GACID,0BAA0B,CAACsF,aAD/B,GAEIvF,kBAAkB,CAACwF,eAAnB,CAAmCC,QAAnC,CAA4C1E,YAHlD;AAIAuE,EAAAA,OAAO,CAACrE,UAAR,GAAqBS,GAAG,CAACT,UAAJ,CAAe0B,QAAf,CACnB/C,OAAO,CAACwF,aADW,EAEnBE,OAAO,CAACrE,UAFW,CAArB;AAIAqE,EAAAA,OAAO,CAACpE,eAAR,GACE8C,eAAe,KAAKjE,eAAe,CAACsF,IAApC,GACI1F,uBAAuB,CAAC+F,GAD5B,GAEI1E,SAHN;AAID,CApBD;;AAsBAG,kBAAkB,CAACU,SAAnB,CAA6BJ,wBAA7B,GAAwDpB,sCAAxD;AAEAc,kBAAkB,CAAChB,sBAAnB,GAA4CwF,yBAA5C;AAEA;;;;AAGA,SAASA,yBAAT,CACEC,eADF,EAEEC,UAFF,EAGEC,gBAHF,EAIE;AACA3F,EAAAA,sBAAsB,CAACkB,IAAvB,CACE,IADF,EAEEuE,eAFF,EAGEC,UAHF,EAIEC,gBAJF;AAMD;;AAED,IAAIvG,OAAO,CAACoC,MAAM,CAACC,MAAR,CAAX,EAA4B;AAC1B+D,EAAAA,yBAAyB,CAAC9D,SAA1B,GAAsCF,MAAM,CAACC,MAAP,CACpCzB,sBAAsB,CAAC0B,SADa,CAAtC;AAGA8D,EAAAA,yBAAyB,CAAC9D,SAA1B,CAAoCC,WAApC,GAAkD6D,yBAAlD;AACD;;AAEDA,yBAAyB,CAAC9D,SAA1B,CAAoCkD,SAApC,GAAgD,UAAUlE,MAAV,EAAkBa,GAAlB,EAAuBU,IAAvB,EAA6B;AAC3E,MAAI0C,QAAQ,GAAGxE,QAAQ,CAACuE,mBAAT,CACbhE,MAAM,CAACiE,QADM,EAEb1C,IAFa,EAGb1B,eAHa,CAAf;AAKA,MAAIO,UAAU,GAAG,KAAKwC,QAAL,CAAcxC,UAA/B;AACA,SACE,CAAC1B,OAAO,CAACuF,QAAD,CAAR,IACA,CAACvF,OAAO,CAAC0B,UAAD,CADR,IAEAd,sBAAsB,CAAC0B,SAAvB,CAAiCkD,SAAjC,CAA2C1D,IAA3C,CAAgD,IAAhD,EAAsDR,MAAtD,EAA8Da,GAA9D,EAAmEU,IAAnE,CAHF;AAKD,CAZD;;AAcAuD,yBAAyB,CAAC9D,SAA1B,CAAoCkE,WAApC,GAAkD,UAAUlF,MAAV,EAAkBa,GAAlB,EAAuBU,IAAvB,EAA6B;AAC7E,MAAI4B,eAAe,GAAG1D,QAAQ,CAACqD,iBAAT,CACpBjC,GAAG,CAACsC,eADgB,EAEpB5B,IAFoB,EAGpBrC,eAAe,CAACsF,IAHI,CAAtB;AAKA,MAAIC,OAAO,GAAG,KAAK7B,QAAnB;AACA6B,EAAAA,OAAO,CAACrE,UAAR,GAAqBX,QAAQ,CAACuE,mBAAT,CACnBnD,GAAG,CAACT,UADe,EAEnBmB,IAFmB,EAGnBkD,OAAO,CAACrE,UAHW,CAArB;AAKAqE,EAAAA,OAAO,CAACpE,eAAR,GACE8C,eAAe,KAAKjE,eAAe,CAACsF,IAApC,GACI1F,uBAAuB,CAAC+F,GAD5B,GAEI1E,SAHN;AAID,CAhBD;;AAiBA,eAAeG,kBAAf","sourcesContent":["import BoxGeometry from \"../Core/BoxGeometry.js\";\nimport BoxOutlineGeometry from \"../Core/BoxOutlineGeometry.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport GeometryOffsetAttribute from \"../Core/GeometryOffsetAttribute.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport heightReferenceOnEntityPropertyChanged from \"./heightReferenceOnEntityPropertyChanged.js\";\nimport Property from \"./Property.js\";\n\nvar defaultOffset = Cartesian3.ZERO;\n\nvar offsetScratch = new Cartesian3();\nvar positionScratch = new Cartesian3();\nvar scratchColor = new Color();\n\nfunction BoxGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.dimensions = undefined;\n  this.offsetAttribute = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for boxes.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias BoxGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction BoxGeometryUpdater(entity, scene) {\n  GeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new BoxGeometryOptions(entity),\n    geometryPropertyName: \"box\",\n    observedPropertyNames: [\"availability\", \"position\", \"orientation\", \"box\"],\n  });\n\n  this._onEntityPropertyChanged(entity, \"box\", entity.box, undefined);\n}\n\nif (defined(Object.create)) {\n  BoxGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n  BoxGeometryUpdater.prototype.constructor = BoxGeometryUpdater;\n}\n\nObject.defineProperties(BoxGeometryUpdater.prototype, {\n  /**\n   * Gets the terrain offset property\n   * @type {TerrainOffsetProperty}\n   * @memberof BoxGeometryUpdater.prototype\n   * @readonly\n   */\n  terrainOffsetProperty: {\n    get: function () {\n      return this._terrainOffsetProperty;\n    },\n  },\n});\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nBoxGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent a filled geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n\n  var show = new ShowGeometryInstanceAttribute(\n    isAvailable &&\n      entity.isShowing &&\n      this._showProperty.getValue(time) &&\n      this._fillProperty.getValue(time)\n  );\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n  var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n    distanceDisplayCondition\n  );\n\n  var attributes = {\n    show: show,\n    distanceDisplayCondition: distanceDisplayConditionAttribute,\n    color: undefined,\n    offset: undefined,\n  };\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    var currentColor;\n    if (\n      defined(this._materialProperty.color) &&\n      (this._materialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n  }\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch\n      )\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: BoxGeometry.fromDimensions(this._options),\n    modelMatrix: entity.computeModelMatrixForHeightReference(\n      time,\n      entity.box.heightReference,\n      this._options.dimensions.z * 0.5,\n      this._scene.mapProjection.ellipsoid\n    ),\n    attributes: attributes,\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nBoxGeometryUpdater.prototype.createOutlineGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent an outlined geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n  var outlineColor = Property.getValueOrDefault(\n    this._outlineColorProperty,\n    time,\n    Color.BLACK,\n    scratchColor\n  );\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n\n  var attributes = {\n    show: new ShowGeometryInstanceAttribute(\n      isAvailable &&\n        entity.isShowing &&\n        this._showProperty.getValue(time) &&\n        this._showOutlineProperty.getValue(time)\n    ),\n    color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n      distanceDisplayCondition\n    ),\n    offset: undefined,\n  };\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch\n      )\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: BoxOutlineGeometry.fromDimensions(this._options),\n    modelMatrix: entity.computeModelMatrixForHeightReference(\n      time,\n      entity.box.heightReference,\n      this._options.dimensions.z * 0.5,\n      this._scene.mapProjection.ellipsoid\n    ),\n    attributes: attributes,\n  });\n};\n\nBoxGeometryUpdater.prototype._computeCenter = function (time, result) {\n  return Property.getValueOrUndefined(this._entity.position, time, result);\n};\n\nBoxGeometryUpdater.prototype._isHidden = function (entity, box) {\n  return (\n    !defined(box.dimensions) ||\n    !defined(entity.position) ||\n    GeometryUpdater.prototype._isHidden.call(this, entity, box)\n  );\n};\n\nBoxGeometryUpdater.prototype._isDynamic = function (entity, box) {\n  return (\n    !entity.position.isConstant ||\n    !Property.isConstant(entity.orientation) ||\n    !box.dimensions.isConstant ||\n    !Property.isConstant(box.outlineWidth)\n  );\n};\n\nBoxGeometryUpdater.prototype._setStaticOptions = function (entity, box) {\n  var heightReference = Property.getValueOrDefault(\n    box.heightReference,\n    Iso8601.MINIMUM_VALUE,\n    HeightReference.NONE\n  );\n\n  var options = this._options;\n  options.vertexFormat =\n    this._materialProperty instanceof ColorMaterialProperty\n      ? PerInstanceColorAppearance.VERTEX_FORMAT\n      : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.dimensions = box.dimensions.getValue(\n    Iso8601.MINIMUM_VALUE,\n    options.dimensions\n  );\n  options.offsetAttribute =\n    heightReference !== HeightReference.NONE\n      ? GeometryOffsetAttribute.ALL\n      : undefined;\n};\n\nBoxGeometryUpdater.prototype._onEntityPropertyChanged = heightReferenceOnEntityPropertyChanged;\n\nBoxGeometryUpdater.DynamicGeometryUpdater = DynamicBoxGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicBoxGeometryUpdater(\n  geometryUpdater,\n  primitives,\n  groundPrimitives\n) {\n  DynamicGeometryUpdater.call(\n    this,\n    geometryUpdater,\n    primitives,\n    groundPrimitives\n  );\n}\n\nif (defined(Object.create)) {\n  DynamicBoxGeometryUpdater.prototype = Object.create(\n    DynamicGeometryUpdater.prototype\n  );\n  DynamicBoxGeometryUpdater.prototype.constructor = DynamicBoxGeometryUpdater;\n}\n\nDynamicBoxGeometryUpdater.prototype._isHidden = function (entity, box, time) {\n  var position = Property.getValueOrUndefined(\n    entity.position,\n    time,\n    positionScratch\n  );\n  var dimensions = this._options.dimensions;\n  return (\n    !defined(position) ||\n    !defined(dimensions) ||\n    DynamicGeometryUpdater.prototype._isHidden.call(this, entity, box, time)\n  );\n};\n\nDynamicBoxGeometryUpdater.prototype._setOptions = function (entity, box, time) {\n  var heightReference = Property.getValueOrDefault(\n    box.heightReference,\n    time,\n    HeightReference.NONE\n  );\n  var options = this._options;\n  options.dimensions = Property.getValueOrUndefined(\n    box.dimensions,\n    time,\n    options.dimensions\n  );\n  options.offsetAttribute =\n    heightReference !== HeightReference.NONE\n      ? GeometryOffsetAttribute.ALL\n      : undefined;\n};\nexport default BoxGeometryUpdater;\n"]},"metadata":{},"sourceType":"module"}