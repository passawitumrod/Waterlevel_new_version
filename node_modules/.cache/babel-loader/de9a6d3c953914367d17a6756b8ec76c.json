{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport BillboardCollection from \"./BillboardCollection.js\";\nimport CircleEmitter from \"./CircleEmitter.js\";\nimport Particle from \"./Particle.js\";\nvar defaultImageSize = new Cartesian2(1.0, 1.0);\n/**\n * A ParticleSystem manages the updating and display of a collection of particles.\n *\n * @alias ParticleSystem\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.show=true] Whether to display the particle system.\n * @param {ParticleSystem~updateCallback} [options.updateCallback] The callback function to be called each frame to update a particle.\n * @param {ParticleEmitter} [options.emitter=new CircleEmitter(0.5)] The particle emitter for this system.\n * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms the particle system from model to world coordinates.\n * @param {Matrix4} [options.emitterModelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms the particle system emitter within the particle systems local coordinate system.\n * @param {Number} [options.emissionRate=5] The number of particles to emit per second.\n * @param {ParticleBurst[]} [options.bursts] An array of {@link ParticleBurst}, emitting bursts of particles at periodic times.\n * @param {Boolean} [options.loop=true] Whether the particle system should loop its bursts when it is complete.\n * @param {Number} [options.scale=1.0] Sets the scale to apply to the image of the particle for the duration of its particleLife.\n * @param {Number} [options.startScale] The initial scale to apply to the image of the particle at the beginning of its life.\n * @param {Number} [options.endScale] The final scale to apply to the image of the particle at the end of its life.\n * @param {Color} [options.color=Color.WHITE] Sets the color of a particle for the duration of its particleLife.\n * @param {Color} [options.startColor] The color of the particle at the beginning of its life.\n * @param {Color} [options.endColor] The color of the particle at the end of its life.\n * @param {Object} [options.image] The URI, HTMLImageElement, or HTMLCanvasElement to use for the billboard.\n * @param {Cartesian2} [options.imageSize=new Cartesian2(1.0, 1.0)] If set, overrides the minimumImageSize and maximumImageSize inputs that scale the particle image's dimensions in pixels.\n * @param {Cartesian2} [options.minimumImageSize] Sets the minimum bound, width by height, above which to randomly scale the particle image's dimensions in pixels.\n * @param {Cartesian2} [options.maximumImageSize] Sets the maximum bound, width by height, below which to randomly scale the particle image's dimensions in pixels.\n * @param {Boolean} [options.sizeInMeters] Sets if the size of particles is in meters or pixels. <code>true</code> to size the particles in meters; otherwise, the size is in pixels.\n * @param {Number} [options.speed=1.0] If set, overrides the minimumSpeed and maximumSpeed inputs with this value.\n * @param {Number} [options.minimumSpeed] Sets the minimum bound in meters per second above which a particle's actual speed will be randomly chosen.\n * @param {Number} [options.maximumSpeed] Sets the maximum bound in meters per second below which a particle's actual speed will be randomly chosen.\n * @param {Number} [options.lifetime=Number.MAX_VALUE] How long the particle system will emit particles, in seconds.\n * @param {Number} [options.particleLife=5.0] If set, overrides the minimumParticleLife and maximumParticleLife inputs with this value.\n * @param {Number} [options.minimumParticleLife] Sets the minimum bound in seconds for the possible duration of a particle's life above which a particle's actual life will be randomly chosen.\n * @param {Number} [options.maximumParticleLife] Sets the maximum bound in seconds for the possible duration of a particle's life below which a particle's actual life will be randomly chosen.\n * @param {Number} [options.mass=1.0] Sets the minimum and maximum mass of particles in kilograms.\n * @param {Number} [options.minimumMass] Sets the minimum bound for the mass of a particle in kilograms. A particle's actual mass will be chosen as a random amount above this value.\n * @param {Number} [options.maximumMass] Sets the maximum mass of particles in kilograms. A particle's actual mass will be chosen as a random amount below this value.\n * @tutorial {@link https://cesium.com/docs/tutorials/particle-systems/|Particle Systems Tutorial}\n * @demo {@link https://sandcastle.cesium.com/?src=Particle%20System.html&label=Showcases|Particle Systems Tutorial Demo}\n * @demo {@link https://sandcastle.cesium.com/?src=Particle%20System%20Fireworks.html&label=Showcases|Particle Systems Fireworks Demo}\n */\n\nfunction ParticleSystem(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  /**\n   * Whether to display the particle system.\n   * @type {Boolean}\n   * @default true\n   */\n\n  this.show = defaultValue(options.show, true);\n  /**\n   * An array of force callbacks. The callback is passed a {@link Particle} and the difference from the last time\n   * @type {ParticleSystem~updateCallback}\n   * @default undefined\n   */\n\n  this.updateCallback = options.updateCallback;\n  /**\n   * Whether the particle system should loop it's bursts when it is complete.\n   * @type {Boolean}\n   * @default true\n   */\n\n  this.loop = defaultValue(options.loop, true);\n  /**\n   * The URI, HTMLImageElement, or HTMLCanvasElement to use for the billboard.\n   * @type {Object}\n   * @default undefined\n   */\n\n  this.image = defaultValue(options.image, undefined);\n  var emitter = options.emitter;\n\n  if (!defined(emitter)) {\n    emitter = new CircleEmitter(0.5);\n  }\n\n  this._emitter = emitter;\n  this._bursts = options.bursts;\n  this._modelMatrix = Matrix4.clone(defaultValue(options.modelMatrix, Matrix4.IDENTITY));\n  this._emitterModelMatrix = Matrix4.clone(defaultValue(options.emitterModelMatrix, Matrix4.IDENTITY));\n  this._matrixDirty = true;\n  this._combinedMatrix = new Matrix4();\n  this._startColor = Color.clone(defaultValue(options.color, defaultValue(options.startColor, Color.WHITE)));\n  this._endColor = Color.clone(defaultValue(options.color, defaultValue(options.endColor, Color.WHITE)));\n  this._startScale = defaultValue(options.scale, defaultValue(options.startScale, 1.0));\n  this._endScale = defaultValue(options.scale, defaultValue(options.endScale, 1.0));\n  this._emissionRate = defaultValue(options.emissionRate, 5.0);\n  this._minimumSpeed = defaultValue(options.speed, defaultValue(options.minimumSpeed, 1.0));\n  this._maximumSpeed = defaultValue(options.speed, defaultValue(options.maximumSpeed, 1.0));\n  this._minimumParticleLife = defaultValue(options.particleLife, defaultValue(options.minimumParticleLife, 5.0));\n  this._maximumParticleLife = defaultValue(options.particleLife, defaultValue(options.maximumParticleLife, 5.0));\n  this._minimumMass = defaultValue(options.mass, defaultValue(options.minimumMass, 1.0));\n  this._maximumMass = defaultValue(options.mass, defaultValue(options.maximumMass, 1.0));\n  this._minimumImageSize = Cartesian2.clone(defaultValue(options.imageSize, defaultValue(options.minimumImageSize, defaultImageSize)));\n  this._maximumImageSize = Cartesian2.clone(defaultValue(options.imageSize, defaultValue(options.maximumImageSize, defaultImageSize)));\n  this._sizeInMeters = defaultValue(options.sizeInMeters, false);\n  this._lifetime = defaultValue(options.lifetime, Number.MAX_VALUE);\n  this._billboardCollection = undefined;\n  this._particles = []; // An array of available particles that we can reuse instead of allocating new.\n\n  this._particlePool = [];\n  this._previousTime = undefined;\n  this._currentTime = 0.0;\n  this._carryOver = 0.0;\n  this._complete = new Event();\n  this._isComplete = false;\n  this._updateParticlePool = true;\n  this._particleEstimate = 0;\n}\n\nObject.defineProperties(ParticleSystem.prototype, {\n  /**\n   * The particle emitter for this\n   * @memberof ParticleSystem.prototype\n   * @type {ParticleEmitter}\n   * @default CircleEmitter\n   */\n  emitter: {\n    get: function get() {\n      return this._emitter;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value); //>>includeEnd('debug');\n\n      this._emitter = value;\n    }\n  },\n\n  /**\n   * An array of {@link ParticleBurst}, emitting bursts of particles at periodic times.\n   * @memberof ParticleSystem.prototype\n   * @type {ParticleBurst[]}\n   * @default undefined\n   */\n  bursts: {\n    get: function get() {\n      return this._bursts;\n    },\n    set: function set(value) {\n      this._bursts = value;\n      this._updateParticlePool = true;\n    }\n  },\n\n  /**\n   * The 4x4 transformation matrix that transforms the particle system from model to world coordinates.\n   * @memberof ParticleSystem.prototype\n   * @type {Matrix4}\n   * @default Matrix4.IDENTITY\n   */\n  modelMatrix: {\n    get: function get() {\n      return this._modelMatrix;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value); //>>includeEnd('debug');\n\n      this._matrixDirty = this._matrixDirty || !Matrix4.equals(this._modelMatrix, value);\n      Matrix4.clone(value, this._modelMatrix);\n    }\n  },\n\n  /**\n   * The 4x4 transformation matrix that transforms the particle system emitter within the particle systems local coordinate system.\n   * @memberof ParticleSystem.prototype\n   * @type {Matrix4}\n   * @default Matrix4.IDENTITY\n   */\n  emitterModelMatrix: {\n    get: function get() {\n      return this._emitterModelMatrix;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value); //>>includeEnd('debug');\n\n      this._matrixDirty = this._matrixDirty || !Matrix4.equals(this._emitterModelMatrix, value);\n      Matrix4.clone(value, this._emitterModelMatrix);\n    }\n  },\n\n  /**\n   * The color of the particle at the beginning of its life.\n   * @memberof ParticleSystem.prototype\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  startColor: {\n    get: function get() {\n      return this._startColor;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value); //>>includeEnd('debug');\n\n      Color.clone(value, this._startColor);\n    }\n  },\n\n  /**\n   * The color of the particle at the end of its life.\n   * @memberof ParticleSystem.prototype\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  endColor: {\n    get: function get() {\n      return this._endColor;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value); //>>includeEnd('debug');\n\n      Color.clone(value, this._endColor);\n    }\n  },\n\n  /**\n   * The initial scale to apply to the image of the particle at the beginning of its life.\n   * @memberof ParticleSystem.prototype\n   * @type {Number}\n   * @default 1.0\n   */\n  startScale: {\n    get: function get() {\n      return this._startScale;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0); //>>includeEnd('debug');\n\n      this._startScale = value;\n    }\n  },\n\n  /**\n   * The final scale to apply to the image of the particle at the end of its life.\n   * @memberof ParticleSystem.prototype\n   * @type {Number}\n   * @default 1.0\n   */\n  endScale: {\n    get: function get() {\n      return this._endScale;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0); //>>includeEnd('debug');\n\n      this._endScale = value;\n    }\n  },\n\n  /**\n   * The number of particles to emit per second.\n   * @memberof ParticleSystem.prototype\n   * @type {Number}\n   * @default 5\n   */\n  emissionRate: {\n    get: function get() {\n      return this._emissionRate;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0); //>>includeEnd('debug');\n\n      this._emissionRate = value;\n      this._updateParticlePool = true;\n    }\n  },\n\n  /**\n   * Sets the minimum bound in meters per second above which a particle's actual speed will be randomly chosen.\n   * @memberof ParticleSystem.prototype\n   * @type {Number}\n   * @default 1.0\n   */\n  minimumSpeed: {\n    get: function get() {\n      return this._minimumSpeed;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0); //>>includeEnd('debug');\n\n      this._minimumSpeed = value;\n    }\n  },\n\n  /**\n   * Sets the maximum bound in meters per second below which a particle's actual speed will be randomly chosen.\n   * @memberof ParticleSystem.prototype\n   * @type {Number}\n   * @default 1.0\n   */\n  maximumSpeed: {\n    get: function get() {\n      return this._maximumSpeed;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0); //>>includeEnd('debug');\n\n      this._maximumSpeed = value;\n    }\n  },\n\n  /**\n   * Sets the minimum bound in seconds for the possible duration of a particle's life above which a particle's actual life will be randomly chosen.\n   * @memberof ParticleSystem.prototype\n   * @type {Number}\n   * @default 5.0\n   */\n  minimumParticleLife: {\n    get: function get() {\n      return this._minimumParticleLife;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0); //>>includeEnd('debug');\n\n      this._minimumParticleLife = value;\n    }\n  },\n\n  /**\n   * Sets the maximum bound in seconds for the possible duration of a particle's life below which a particle's actual life will be randomly chosen.\n   * @memberof ParticleSystem.prototype\n   * @type {Number}\n   * @default 5.0\n   */\n  maximumParticleLife: {\n    get: function get() {\n      return this._maximumParticleLife;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0); //>>includeEnd('debug');\n\n      this._maximumParticleLife = value;\n      this._updateParticlePool = true;\n    }\n  },\n\n  /**\n   * Sets the minimum mass of particles in kilograms.\n   * @memberof ParticleSystem.prototype\n   * @type {Number}\n   * @default 1.0\n   */\n  minimumMass: {\n    get: function get() {\n      return this._minimumMass;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0); //>>includeEnd('debug');\n\n      this._minimumMass = value;\n    }\n  },\n\n  /**\n   * Sets the maximum mass of particles in kilograms.\n   * @memberof ParticleSystem.prototype\n   * @type {Number}\n   * @default 1.0\n   */\n  maximumMass: {\n    get: function get() {\n      return this._maximumMass;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0); //>>includeEnd('debug');\n\n      this._maximumMass = value;\n    }\n  },\n\n  /**\n   * Sets the minimum bound, width by height, above which to randomly scale the particle image's dimensions in pixels.\n   * @memberof ParticleSystem.prototype\n   * @type {Cartesian2}\n   * @default new Cartesian2(1.0, 1.0)\n   */\n  minimumImageSize: {\n    get: function get() {\n      return this._minimumImageSize;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.object(\"value\", value);\n      Check.typeOf.number.greaterThanOrEquals(\"value.x\", value.x, 0.0);\n      Check.typeOf.number.greaterThanOrEquals(\"value.y\", value.y, 0.0); //>>includeEnd('debug');\n\n      this._minimumImageSize = value;\n    }\n  },\n\n  /**\n   * Sets the maximum bound, width by height, below which to randomly scale the particle image's dimensions in pixels.\n   * @memberof ParticleSystem.prototype\n   * @type {Cartesian2}\n   * @default new Cartesian2(1.0, 1.0)\n   */\n  maximumImageSize: {\n    get: function get() {\n      return this._maximumImageSize;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.object(\"value\", value);\n      Check.typeOf.number.greaterThanOrEquals(\"value.x\", value.x, 0.0);\n      Check.typeOf.number.greaterThanOrEquals(\"value.y\", value.y, 0.0); //>>includeEnd('debug');\n\n      this._maximumImageSize = value;\n    }\n  },\n\n  /**\n   * Gets or sets if the particle size is in meters or pixels. <code>true</code> to size particles in meters; otherwise, the size is in pixels.\n   * @memberof ParticleSystem.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  sizeInMeters: {\n    get: function get() {\n      return this._sizeInMeters;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.bool(\"value\", value); //>>includeEnd('debug');\n\n      this._sizeInMeters = value;\n    }\n  },\n\n  /**\n   * How long the particle system will emit particles, in seconds.\n   * @memberof ParticleSystem.prototype\n   * @type {Number}\n   * @default Number.MAX_VALUE\n   */\n  lifetime: {\n    get: function get() {\n      return this._lifetime;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0); //>>includeEnd('debug');\n\n      this._lifetime = value;\n    }\n  },\n\n  /**\n   * Fires an event when the particle system has reached the end of its lifetime.\n   * @memberof ParticleSystem.prototype\n   * @type {Event}\n   */\n  complete: {\n    get: function get() {\n      return this._complete;\n    }\n  },\n\n  /**\n   * When <code>true</code>, the particle system has reached the end of its lifetime; <code>false</code> otherwise.\n   * @memberof ParticleSystem.prototype\n   * @type {Boolean}\n   */\n  isComplete: {\n    get: function get() {\n      return this._isComplete;\n    }\n  }\n});\n\nfunction updateParticlePool(system) {\n  var emissionRate = system._emissionRate;\n  var life = system._maximumParticleLife;\n  var burstAmount = 0;\n  var bursts = system._bursts;\n\n  if (defined(bursts)) {\n    var length = bursts.length;\n\n    for (var i = 0; i < length; ++i) {\n      burstAmount += bursts[i].maximum;\n    }\n  }\n\n  var billboardCollection = system._billboardCollection;\n  var image = system.image;\n  var particleEstimate = Math.ceil(emissionRate * life + burstAmount);\n  var particles = system._particles;\n  var particlePool = system._particlePool;\n  var numToAdd = Math.max(particleEstimate - particles.length - particlePool.length, 0);\n\n  for (var j = 0; j < numToAdd; ++j) {\n    var particle = new Particle();\n    particle._billboard = billboardCollection.add({\n      image: image\n    });\n    particlePool.push(particle);\n  }\n\n  system._particleEstimate = particleEstimate;\n}\n\nfunction getOrCreateParticle(system) {\n  // Try to reuse an existing particle from the pool.\n  var particle = system._particlePool.pop();\n\n  if (!defined(particle)) {\n    // Create a new one\n    particle = new Particle();\n  }\n\n  return particle;\n}\n\nfunction addParticleToPool(system, particle) {\n  system._particlePool.push(particle);\n}\n\nfunction freeParticlePool(system) {\n  var particles = system._particles;\n  var particlePool = system._particlePool;\n  var billboardCollection = system._billboardCollection;\n  var numParticles = particles.length;\n  var numInPool = particlePool.length;\n  var estimate = system._particleEstimate;\n  var start = numInPool - Math.max(estimate - numParticles - numInPool, 0);\n\n  for (var i = start; i < numInPool; ++i) {\n    var p = particlePool[i];\n    billboardCollection.remove(p._billboard);\n  }\n\n  particlePool.length = start;\n}\n\nfunction removeBillboard(particle) {\n  if (defined(particle._billboard)) {\n    particle._billboard.show = false;\n  }\n}\n\nfunction updateBillboard(system, particle) {\n  var billboard = particle._billboard;\n\n  if (!defined(billboard)) {\n    billboard = particle._billboard = system._billboardCollection.add({\n      image: particle.image\n    });\n  }\n\n  billboard.width = particle.imageSize.x;\n  billboard.height = particle.imageSize.y;\n  billboard.position = particle.position;\n  billboard.sizeInMeters = system.sizeInMeters;\n  billboard.show = true; // Update the color\n\n  var r = CesiumMath.lerp(particle.startColor.red, particle.endColor.red, particle.normalizedAge);\n  var g = CesiumMath.lerp(particle.startColor.green, particle.endColor.green, particle.normalizedAge);\n  var b = CesiumMath.lerp(particle.startColor.blue, particle.endColor.blue, particle.normalizedAge);\n  var a = CesiumMath.lerp(particle.startColor.alpha, particle.endColor.alpha, particle.normalizedAge);\n  billboard.color = new Color(r, g, b, a); // Update the scale\n\n  billboard.scale = CesiumMath.lerp(particle.startScale, particle.endScale, particle.normalizedAge);\n}\n\nfunction addParticle(system, particle) {\n  particle.startColor = Color.clone(system._startColor, particle.startColor);\n  particle.endColor = Color.clone(system._endColor, particle.endColor);\n  particle.startScale = system._startScale;\n  particle.endScale = system._endScale;\n  particle.image = system.image;\n  particle.life = CesiumMath.randomBetween(system._minimumParticleLife, system._maximumParticleLife);\n  particle.mass = CesiumMath.randomBetween(system._minimumMass, system._maximumMass);\n  particle.imageSize.x = CesiumMath.randomBetween(system._minimumImageSize.x, system._maximumImageSize.x);\n  particle.imageSize.y = CesiumMath.randomBetween(system._minimumImageSize.y, system._maximumImageSize.y); // Reset the normalizedAge and age in case the particle was reused.\n\n  particle._normalizedAge = 0.0;\n  particle._age = 0.0;\n  var speed = CesiumMath.randomBetween(system._minimumSpeed, system._maximumSpeed);\n  Cartesian3.multiplyByScalar(particle.velocity, speed, particle.velocity);\n\n  system._particles.push(particle);\n}\n\nfunction calculateNumberToEmit(system, dt) {\n  // This emitter is finished if it exceeds it's lifetime.\n  if (system._isComplete) {\n    return 0;\n  }\n\n  dt = CesiumMath.mod(dt, system._lifetime); // Compute the number of particles to emit based on the emissionRate.\n\n  var v = dt * system._emissionRate;\n  var numToEmit = Math.floor(v);\n  system._carryOver += v - numToEmit;\n\n  if (system._carryOver > 1.0) {\n    numToEmit++;\n    system._carryOver -= 1.0;\n  } // Apply any bursts\n\n\n  if (defined(system.bursts)) {\n    var length = system.bursts.length;\n\n    for (var i = 0; i < length; i++) {\n      var burst = system.bursts[i];\n      var currentTime = system._currentTime;\n\n      if (defined(burst) && !burst._complete && currentTime > burst.time) {\n        numToEmit += CesiumMath.randomBetween(burst.minimum, burst.maximum);\n        burst._complete = true;\n      }\n    }\n  }\n\n  return numToEmit;\n}\n\nvar rotatedVelocityScratch = new Cartesian3();\n/**\n * @private\n */\n\nParticleSystem.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n\n  if (!defined(this._billboardCollection)) {\n    this._billboardCollection = new BillboardCollection();\n  }\n\n  if (this._updateParticlePool) {\n    updateParticlePool(this);\n    this._updateParticlePool = false;\n  } // Compute the frame time\n\n\n  var dt = 0.0;\n\n  if (this._previousTime) {\n    dt = JulianDate.secondsDifference(frameState.time, this._previousTime);\n  }\n\n  if (dt < 0.0) {\n    dt = 0.0;\n  }\n\n  var particles = this._particles;\n  var emitter = this._emitter;\n  var updateCallback = this.updateCallback;\n  var i;\n  var particle; // update particles and remove dead particles\n\n  var length = particles.length;\n\n  for (i = 0; i < length; ++i) {\n    particle = particles[i];\n\n    if (!particle.update(dt, updateCallback)) {\n      removeBillboard(particle); // Add the particle back to the pool so it can be reused.\n\n      addParticleToPool(this, particle);\n      particles[i] = particles[length - 1];\n      --i;\n      --length;\n    } else {\n      updateBillboard(this, particle);\n    }\n  }\n\n  particles.length = length;\n  var numToEmit = calculateNumberToEmit(this, dt);\n\n  if (numToEmit > 0 && defined(emitter)) {\n    // Compute the final model matrix by combining the particle systems model matrix and the emitter matrix.\n    if (this._matrixDirty) {\n      this._combinedMatrix = Matrix4.multiply(this.modelMatrix, this.emitterModelMatrix, this._combinedMatrix);\n      this._matrixDirty = false;\n    }\n\n    var combinedMatrix = this._combinedMatrix;\n\n    for (i = 0; i < numToEmit; i++) {\n      // Create a new particle.\n      particle = getOrCreateParticle(this); // Let the emitter initialize the particle.\n\n      this._emitter.emit(particle); //For the velocity we need to add it to the original position and then multiply by point.\n\n\n      Cartesian3.add(particle.position, particle.velocity, rotatedVelocityScratch);\n      Matrix4.multiplyByPoint(combinedMatrix, rotatedVelocityScratch, rotatedVelocityScratch); // Change the position to be in world coordinates\n\n      particle.position = Matrix4.multiplyByPoint(combinedMatrix, particle.position, particle.position); // Orient the velocity in world space as well.\n\n      Cartesian3.subtract(rotatedVelocityScratch, particle.position, particle.velocity);\n      Cartesian3.normalize(particle.velocity, particle.velocity); // Add the particle to the system.\n\n      addParticle(this, particle);\n      updateBillboard(this, particle);\n    }\n  }\n\n  this._billboardCollection.update(frameState);\n\n  this._previousTime = JulianDate.clone(frameState.time, this._previousTime);\n  this._currentTime += dt;\n\n  if (this._lifetime !== Number.MAX_VALUE && this._currentTime > this._lifetime) {\n    if (this.loop) {\n      this._currentTime = CesiumMath.mod(this._currentTime, this._lifetime);\n\n      if (this.bursts) {\n        var burstLength = this.bursts.length; // Reset any bursts\n\n        for (i = 0; i < burstLength; i++) {\n          this.bursts[i]._complete = false;\n        }\n      }\n    } else {\n      this._isComplete = true;\n\n      this._complete.raiseEvent(this);\n    }\n  } // free particles in the pool and release billboard GPU memory\n\n\n  if (frameState.frameNumber % 120 === 0) {\n    freeParticlePool(this);\n  }\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see ParticleSystem#destroy\n */\n\n\nParticleSystem.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see ParticleSystem#isDestroyed\n */\n\n\nParticleSystem.prototype.destroy = function () {\n  this._billboardCollection = this._billboardCollection && this._billboardCollection.destroy();\n  return destroyObject(this);\n};\n/**\n * A function used to modify attributes of the particle at each time step. This can include force modifications,\n * color, sizing, etc.\n *\n * @callback ParticleSystem~updateCallback\n *\n * @param {Particle} particle The particle being updated.\n * @param {Number} dt The time in seconds since the last update.\n *\n * @example\n * function applyGravity(particle, dt) {\n *    var position = particle.position;\n *    var gravityVector = Cesium.Cartesian3.normalize(position, new Cesium.Cartesian3());\n *    Cesium.Cartesian3.multiplyByScalar(gravityVector, GRAVITATIONAL_CONSTANT * dt, gravityVector);\n *    particle.velocity = Cesium.Cartesian3.add(particle.velocity, gravityVector, particle.velocity);\n * }\n */\n\n\nexport default ParticleSystem;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/ParticleSystem.js"],"names":["Cartesian2","Cartesian3","Check","Color","defaultValue","defined","destroyObject","Event","JulianDate","CesiumMath","Matrix4","BillboardCollection","CircleEmitter","Particle","defaultImageSize","ParticleSystem","options","EMPTY_OBJECT","show","updateCallback","loop","image","undefined","emitter","_emitter","_bursts","bursts","_modelMatrix","clone","modelMatrix","IDENTITY","_emitterModelMatrix","emitterModelMatrix","_matrixDirty","_combinedMatrix","_startColor","color","startColor","WHITE","_endColor","endColor","_startScale","scale","startScale","_endScale","endScale","_emissionRate","emissionRate","_minimumSpeed","speed","minimumSpeed","_maximumSpeed","maximumSpeed","_minimumParticleLife","particleLife","minimumParticleLife","_maximumParticleLife","maximumParticleLife","_minimumMass","mass","minimumMass","_maximumMass","maximumMass","_minimumImageSize","imageSize","minimumImageSize","_maximumImageSize","maximumImageSize","_sizeInMeters","sizeInMeters","_lifetime","lifetime","Number","MAX_VALUE","_billboardCollection","_particles","_particlePool","_previousTime","_currentTime","_carryOver","_complete","_isComplete","_updateParticlePool","_particleEstimate","Object","defineProperties","prototype","get","set","value","equals","typeOf","number","greaterThanOrEquals","object","x","y","bool","complete","isComplete","updateParticlePool","system","life","burstAmount","length","i","maximum","billboardCollection","particleEstimate","Math","ceil","particles","particlePool","numToAdd","max","j","particle","_billboard","add","push","getOrCreateParticle","pop","addParticleToPool","freeParticlePool","numParticles","numInPool","estimate","start","p","remove","removeBillboard","updateBillboard","billboard","width","height","position","r","lerp","red","normalizedAge","g","green","b","blue","a","alpha","addParticle","randomBetween","_normalizedAge","_age","multiplyByScalar","velocity","calculateNumberToEmit","dt","mod","v","numToEmit","floor","burst","currentTime","time","minimum","rotatedVelocityScratch","update","frameState","secondsDifference","multiply","combinedMatrix","emit","multiplyByPoint","subtract","normalize","burstLength","raiseEvent","frameNumber","isDestroyed","destroy"],"mappings":"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","sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport BillboardCollection from \"./BillboardCollection.js\";\nimport CircleEmitter from \"./CircleEmitter.js\";\nimport Particle from \"./Particle.js\";\n\nvar defaultImageSize = new Cartesian2(1.0, 1.0);\n\n/**\n * A ParticleSystem manages the updating and display of a collection of particles.\n *\n * @alias ParticleSystem\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.show=true] Whether to display the particle system.\n * @param {ParticleSystem~updateCallback} [options.updateCallback] The callback function to be called each frame to update a particle.\n * @param {ParticleEmitter} [options.emitter=new CircleEmitter(0.5)] The particle emitter for this system.\n * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms the particle system from model to world coordinates.\n * @param {Matrix4} [options.emitterModelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms the particle system emitter within the particle systems local coordinate system.\n * @param {Number} [options.emissionRate=5] The number of particles to emit per second.\n * @param {ParticleBurst[]} [options.bursts] An array of {@link ParticleBurst}, emitting bursts of particles at periodic times.\n * @param {Boolean} [options.loop=true] Whether the particle system should loop its bursts when it is complete.\n * @param {Number} [options.scale=1.0] Sets the scale to apply to the image of the particle for the duration of its particleLife.\n * @param {Number} [options.startScale] The initial scale to apply to the image of the particle at the beginning of its life.\n * @param {Number} [options.endScale] The final scale to apply to the image of the particle at the end of its life.\n * @param {Color} [options.color=Color.WHITE] Sets the color of a particle for the duration of its particleLife.\n * @param {Color} [options.startColor] The color of the particle at the beginning of its life.\n * @param {Color} [options.endColor] The color of the particle at the end of its life.\n * @param {Object} [options.image] The URI, HTMLImageElement, or HTMLCanvasElement to use for the billboard.\n * @param {Cartesian2} [options.imageSize=new Cartesian2(1.0, 1.0)] If set, overrides the minimumImageSize and maximumImageSize inputs that scale the particle image's dimensions in pixels.\n * @param {Cartesian2} [options.minimumImageSize] Sets the minimum bound, width by height, above which to randomly scale the particle image's dimensions in pixels.\n * @param {Cartesian2} [options.maximumImageSize] Sets the maximum bound, width by height, below which to randomly scale the particle image's dimensions in pixels.\n * @param {Boolean} [options.sizeInMeters] Sets if the size of particles is in meters or pixels. <code>true</code> to size the particles in meters; otherwise, the size is in pixels.\n * @param {Number} [options.speed=1.0] If set, overrides the minimumSpeed and maximumSpeed inputs with this value.\n * @param {Number} [options.minimumSpeed] Sets the minimum bound in meters per second above which a particle's actual speed will be randomly chosen.\n * @param {Number} [options.maximumSpeed] Sets the maximum bound in meters per second below which a particle's actual speed will be randomly chosen.\n * @param {Number} [options.lifetime=Number.MAX_VALUE] How long the particle system will emit particles, in seconds.\n * @param {Number} [options.particleLife=5.0] If set, overrides the minimumParticleLife and maximumParticleLife inputs with this value.\n * @param {Number} [options.minimumParticleLife] Sets the minimum bound in seconds for the possible duration of a particle's life above which a particle's actual life will be randomly chosen.\n * @param {Number} [options.maximumParticleLife] Sets the maximum bound in seconds for the possible duration of a particle's life below which a particle's actual life will be randomly chosen.\n * @param {Number} [options.mass=1.0] Sets the minimum and maximum mass of particles in kilograms.\n * @param {Number} [options.minimumMass] Sets the minimum bound for the mass of a particle in kilograms. A particle's actual mass will be chosen as a random amount above this value.\n * @param {Number} [options.maximumMass] Sets the maximum mass of particles in kilograms. A particle's actual mass will be chosen as a random amount below this value.\n * @tutorial {@link https://cesium.com/docs/tutorials/particle-systems/|Particle Systems Tutorial}\n * @demo {@link https://sandcastle.cesium.com/?src=Particle%20System.html&label=Showcases|Particle Systems Tutorial Demo}\n * @demo {@link https://sandcastle.cesium.com/?src=Particle%20System%20Fireworks.html&label=Showcases|Particle Systems Fireworks Demo}\n */\nfunction ParticleSystem(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  /**\n   * Whether to display the particle system.\n   * @type {Boolean}\n   * @default true\n   */\n  this.show = defaultValue(options.show, true);\n\n  /**\n   * An array of force callbacks. The callback is passed a {@link Particle} and the difference from the last time\n   * @type {ParticleSystem~updateCallback}\n   * @default undefined\n   */\n  this.updateCallback = options.updateCallback;\n\n  /**\n   * Whether the particle system should loop it's bursts when it is complete.\n   * @type {Boolean}\n   * @default true\n   */\n  this.loop = defaultValue(options.loop, true);\n\n  /**\n   * The URI, HTMLImageElement, or HTMLCanvasElement to use for the billboard.\n   * @type {Object}\n   * @default undefined\n   */\n  this.image = defaultValue(options.image, undefined);\n\n  var emitter = options.emitter;\n  if (!defined(emitter)) {\n    emitter = new CircleEmitter(0.5);\n  }\n  this._emitter = emitter;\n\n  this._bursts = options.bursts;\n\n  this._modelMatrix = Matrix4.clone(\n    defaultValue(options.modelMatrix, Matrix4.IDENTITY)\n  );\n  this._emitterModelMatrix = Matrix4.clone(\n    defaultValue(options.emitterModelMatrix, Matrix4.IDENTITY)\n  );\n  this._matrixDirty = true;\n  this._combinedMatrix = new Matrix4();\n\n  this._startColor = Color.clone(\n    defaultValue(options.color, defaultValue(options.startColor, Color.WHITE))\n  );\n  this._endColor = Color.clone(\n    defaultValue(options.color, defaultValue(options.endColor, Color.WHITE))\n  );\n\n  this._startScale = defaultValue(\n    options.scale,\n    defaultValue(options.startScale, 1.0)\n  );\n  this._endScale = defaultValue(\n    options.scale,\n    defaultValue(options.endScale, 1.0)\n  );\n\n  this._emissionRate = defaultValue(options.emissionRate, 5.0);\n\n  this._minimumSpeed = defaultValue(\n    options.speed,\n    defaultValue(options.minimumSpeed, 1.0)\n  );\n  this._maximumSpeed = defaultValue(\n    options.speed,\n    defaultValue(options.maximumSpeed, 1.0)\n  );\n\n  this._minimumParticleLife = defaultValue(\n    options.particleLife,\n    defaultValue(options.minimumParticleLife, 5.0)\n  );\n  this._maximumParticleLife = defaultValue(\n    options.particleLife,\n    defaultValue(options.maximumParticleLife, 5.0)\n  );\n\n  this._minimumMass = defaultValue(\n    options.mass,\n    defaultValue(options.minimumMass, 1.0)\n  );\n  this._maximumMass = defaultValue(\n    options.mass,\n    defaultValue(options.maximumMass, 1.0)\n  );\n\n  this._minimumImageSize = Cartesian2.clone(\n    defaultValue(\n      options.imageSize,\n      defaultValue(options.minimumImageSize, defaultImageSize)\n    )\n  );\n  this._maximumImageSize = Cartesian2.clone(\n    defaultValue(\n      options.imageSize,\n      defaultValue(options.maximumImageSize, defaultImageSize)\n    )\n  );\n\n  this._sizeInMeters = defaultValue(options.sizeInMeters, false);\n\n  this._lifetime = defaultValue(options.lifetime, Number.MAX_VALUE);\n\n  this._billboardCollection = undefined;\n  this._particles = [];\n\n  // An array of available particles that we can reuse instead of allocating new.\n  this._particlePool = [];\n\n  this._previousTime = undefined;\n  this._currentTime = 0.0;\n  this._carryOver = 0.0;\n\n  this._complete = new Event();\n  this._isComplete = false;\n\n  this._updateParticlePool = true;\n  this._particleEstimate = 0;\n}\n\nObject.defineProperties(ParticleSystem.prototype, {\n  /**\n   * The particle emitter for this\n   * @memberof ParticleSystem.prototype\n   * @type {ParticleEmitter}\n   * @default CircleEmitter\n   */\n  emitter: {\n    get: function () {\n      return this._emitter;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n      this._emitter = value;\n    },\n  },\n  /**\n   * An array of {@link ParticleBurst}, emitting bursts of particles at periodic times.\n   * @memberof ParticleSystem.prototype\n   * @type {ParticleBurst[]}\n   * @default undefined\n   */\n  bursts: {\n    get: function () {\n      return this._bursts;\n    },\n    set: function (value) {\n      this._bursts = value;\n      this._updateParticlePool = true;\n    },\n  },\n  /**\n   * The 4x4 transformation matrix that transforms the particle system from model to world coordinates.\n   * @memberof ParticleSystem.prototype\n   * @type {Matrix4}\n   * @default Matrix4.IDENTITY\n   */\n  modelMatrix: {\n    get: function () {\n      return this._modelMatrix;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n      this._matrixDirty =\n        this._matrixDirty || !Matrix4.equals(this._modelMatrix, value);\n      Matrix4.clone(value, this._modelMatrix);\n    },\n  },\n  /**\n   * The 4x4 transformation matrix that transforms the particle system emitter within the particle systems local coordinate system.\n   * @memberof ParticleSystem.prototype\n   * @type {Matrix4}\n   * @default Matrix4.IDENTITY\n   */\n  emitterModelMatrix: {\n    get: function () {\n      return this._emitterModelMatrix;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n      this._matrixDirty =\n        this._matrixDirty || !Matrix4.equals(this._emitterModelMatrix, value);\n      Matrix4.clone(value, this._emitterModelMatrix);\n    },\n  },\n  /**\n   * The color of the particle at the beginning of its life.\n   * @memberof ParticleSystem.prototype\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  startColor: {\n    get: function () {\n      return this._startColor;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n      Color.clone(value, this._startColor);\n    },\n  },\n  /**\n   * The color of the particle at the end of its life.\n   * @memberof ParticleSystem.prototype\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  endColor: {\n    get: function () {\n      return this._endColor;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n      Color.clone(value, this._endColor);\n    },\n  },\n  /**\n   * The initial scale to apply to the image of the particle at the beginning of its life.\n   * @memberof ParticleSystem.prototype\n   * @type {Number}\n   * @default 1.0\n   */\n  startScale: {\n    get: function () {\n      return this._startScale;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._startScale = value;\n    },\n  },\n  /**\n   * The final scale to apply to the image of the particle at the end of its life.\n   * @memberof ParticleSystem.prototype\n   * @type {Number}\n   * @default 1.0\n   */\n  endScale: {\n    get: function () {\n      return this._endScale;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._endScale = value;\n    },\n  },\n  /**\n   * The number of particles to emit per second.\n   * @memberof ParticleSystem.prototype\n   * @type {Number}\n   * @default 5\n   */\n  emissionRate: {\n    get: function () {\n      return this._emissionRate;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._emissionRate = value;\n      this._updateParticlePool = true;\n    },\n  },\n  /**\n   * Sets the minimum bound in meters per second above which a particle's actual speed will be randomly chosen.\n   * @memberof ParticleSystem.prototype\n   * @type {Number}\n   * @default 1.0\n   */\n  minimumSpeed: {\n    get: function () {\n      return this._minimumSpeed;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._minimumSpeed = value;\n    },\n  },\n  /**\n   * Sets the maximum bound in meters per second below which a particle's actual speed will be randomly chosen.\n   * @memberof ParticleSystem.prototype\n   * @type {Number}\n   * @default 1.0\n   */\n  maximumSpeed: {\n    get: function () {\n      return this._maximumSpeed;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._maximumSpeed = value;\n    },\n  },\n  /**\n   * Sets the minimum bound in seconds for the possible duration of a particle's life above which a particle's actual life will be randomly chosen.\n   * @memberof ParticleSystem.prototype\n   * @type {Number}\n   * @default 5.0\n   */\n  minimumParticleLife: {\n    get: function () {\n      return this._minimumParticleLife;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._minimumParticleLife = value;\n    },\n  },\n  /**\n   * Sets the maximum bound in seconds for the possible duration of a particle's life below which a particle's actual life will be randomly chosen.\n   * @memberof ParticleSystem.prototype\n   * @type {Number}\n   * @default 5.0\n   */\n  maximumParticleLife: {\n    get: function () {\n      return this._maximumParticleLife;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._maximumParticleLife = value;\n      this._updateParticlePool = true;\n    },\n  },\n  /**\n   * Sets the minimum mass of particles in kilograms.\n   * @memberof ParticleSystem.prototype\n   * @type {Number}\n   * @default 1.0\n   */\n  minimumMass: {\n    get: function () {\n      return this._minimumMass;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._minimumMass = value;\n    },\n  },\n  /**\n   * Sets the maximum mass of particles in kilograms.\n   * @memberof ParticleSystem.prototype\n   * @type {Number}\n   * @default 1.0\n   */\n  maximumMass: {\n    get: function () {\n      return this._maximumMass;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._maximumMass = value;\n    },\n  },\n  /**\n   * Sets the minimum bound, width by height, above which to randomly scale the particle image's dimensions in pixels.\n   * @memberof ParticleSystem.prototype\n   * @type {Cartesian2}\n   * @default new Cartesian2(1.0, 1.0)\n   */\n  minimumImageSize: {\n    get: function () {\n      return this._minimumImageSize;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.object(\"value\", value);\n      Check.typeOf.number.greaterThanOrEquals(\"value.x\", value.x, 0.0);\n      Check.typeOf.number.greaterThanOrEquals(\"value.y\", value.y, 0.0);\n      //>>includeEnd('debug');\n      this._minimumImageSize = value;\n    },\n  },\n  /**\n   * Sets the maximum bound, width by height, below which to randomly scale the particle image's dimensions in pixels.\n   * @memberof ParticleSystem.prototype\n   * @type {Cartesian2}\n   * @default new Cartesian2(1.0, 1.0)\n   */\n  maximumImageSize: {\n    get: function () {\n      return this._maximumImageSize;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.object(\"value\", value);\n      Check.typeOf.number.greaterThanOrEquals(\"value.x\", value.x, 0.0);\n      Check.typeOf.number.greaterThanOrEquals(\"value.y\", value.y, 0.0);\n      //>>includeEnd('debug');\n      this._maximumImageSize = value;\n    },\n  },\n  /**\n   * Gets or sets if the particle size is in meters or pixels. <code>true</code> to size particles in meters; otherwise, the size is in pixels.\n   * @memberof ParticleSystem.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  sizeInMeters: {\n    get: function () {\n      return this._sizeInMeters;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.bool(\"value\", value);\n      //>>includeEnd('debug');\n      this._sizeInMeters = value;\n    },\n  },\n  /**\n   * How long the particle system will emit particles, in seconds.\n   * @memberof ParticleSystem.prototype\n   * @type {Number}\n   * @default Number.MAX_VALUE\n   */\n  lifetime: {\n    get: function () {\n      return this._lifetime;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._lifetime = value;\n    },\n  },\n  /**\n   * Fires an event when the particle system has reached the end of its lifetime.\n   * @memberof ParticleSystem.prototype\n   * @type {Event}\n   */\n  complete: {\n    get: function () {\n      return this._complete;\n    },\n  },\n  /**\n   * When <code>true</code>, the particle system has reached the end of its lifetime; <code>false</code> otherwise.\n   * @memberof ParticleSystem.prototype\n   * @type {Boolean}\n   */\n  isComplete: {\n    get: function () {\n      return this._isComplete;\n    },\n  },\n});\n\nfunction updateParticlePool(system) {\n  var emissionRate = system._emissionRate;\n  var life = system._maximumParticleLife;\n\n  var burstAmount = 0;\n  var bursts = system._bursts;\n  if (defined(bursts)) {\n    var length = bursts.length;\n    for (var i = 0; i < length; ++i) {\n      burstAmount += bursts[i].maximum;\n    }\n  }\n\n  var billboardCollection = system._billboardCollection;\n  var image = system.image;\n\n  var particleEstimate = Math.ceil(emissionRate * life + burstAmount);\n  var particles = system._particles;\n  var particlePool = system._particlePool;\n  var numToAdd = Math.max(\n    particleEstimate - particles.length - particlePool.length,\n    0\n  );\n\n  for (var j = 0; j < numToAdd; ++j) {\n    var particle = new Particle();\n    particle._billboard = billboardCollection.add({\n      image: image,\n    });\n    particlePool.push(particle);\n  }\n\n  system._particleEstimate = particleEstimate;\n}\n\nfunction getOrCreateParticle(system) {\n  // Try to reuse an existing particle from the pool.\n  var particle = system._particlePool.pop();\n  if (!defined(particle)) {\n    // Create a new one\n    particle = new Particle();\n  }\n  return particle;\n}\n\nfunction addParticleToPool(system, particle) {\n  system._particlePool.push(particle);\n}\n\nfunction freeParticlePool(system) {\n  var particles = system._particles;\n  var particlePool = system._particlePool;\n  var billboardCollection = system._billboardCollection;\n\n  var numParticles = particles.length;\n  var numInPool = particlePool.length;\n  var estimate = system._particleEstimate;\n\n  var start = numInPool - Math.max(estimate - numParticles - numInPool, 0);\n  for (var i = start; i < numInPool; ++i) {\n    var p = particlePool[i];\n    billboardCollection.remove(p._billboard);\n  }\n  particlePool.length = start;\n}\n\nfunction removeBillboard(particle) {\n  if (defined(particle._billboard)) {\n    particle._billboard.show = false;\n  }\n}\n\nfunction updateBillboard(system, particle) {\n  var billboard = particle._billboard;\n  if (!defined(billboard)) {\n    billboard = particle._billboard = system._billboardCollection.add({\n      image: particle.image,\n    });\n  }\n  billboard.width = particle.imageSize.x;\n  billboard.height = particle.imageSize.y;\n  billboard.position = particle.position;\n  billboard.sizeInMeters = system.sizeInMeters;\n  billboard.show = true;\n\n  // Update the color\n  var r = CesiumMath.lerp(\n    particle.startColor.red,\n    particle.endColor.red,\n    particle.normalizedAge\n  );\n  var g = CesiumMath.lerp(\n    particle.startColor.green,\n    particle.endColor.green,\n    particle.normalizedAge\n  );\n  var b = CesiumMath.lerp(\n    particle.startColor.blue,\n    particle.endColor.blue,\n    particle.normalizedAge\n  );\n  var a = CesiumMath.lerp(\n    particle.startColor.alpha,\n    particle.endColor.alpha,\n    particle.normalizedAge\n  );\n  billboard.color = new Color(r, g, b, a);\n\n  // Update the scale\n  billboard.scale = CesiumMath.lerp(\n    particle.startScale,\n    particle.endScale,\n    particle.normalizedAge\n  );\n}\n\nfunction addParticle(system, particle) {\n  particle.startColor = Color.clone(system._startColor, particle.startColor);\n  particle.endColor = Color.clone(system._endColor, particle.endColor);\n  particle.startScale = system._startScale;\n  particle.endScale = system._endScale;\n  particle.image = system.image;\n  particle.life = CesiumMath.randomBetween(\n    system._minimumParticleLife,\n    system._maximumParticleLife\n  );\n  particle.mass = CesiumMath.randomBetween(\n    system._minimumMass,\n    system._maximumMass\n  );\n  particle.imageSize.x = CesiumMath.randomBetween(\n    system._minimumImageSize.x,\n    system._maximumImageSize.x\n  );\n  particle.imageSize.y = CesiumMath.randomBetween(\n    system._minimumImageSize.y,\n    system._maximumImageSize.y\n  );\n\n  // Reset the normalizedAge and age in case the particle was reused.\n  particle._normalizedAge = 0.0;\n  particle._age = 0.0;\n\n  var speed = CesiumMath.randomBetween(\n    system._minimumSpeed,\n    system._maximumSpeed\n  );\n  Cartesian3.multiplyByScalar(particle.velocity, speed, particle.velocity);\n\n  system._particles.push(particle);\n}\n\nfunction calculateNumberToEmit(system, dt) {\n  // This emitter is finished if it exceeds it's lifetime.\n  if (system._isComplete) {\n    return 0;\n  }\n\n  dt = CesiumMath.mod(dt, system._lifetime);\n\n  // Compute the number of particles to emit based on the emissionRate.\n  var v = dt * system._emissionRate;\n  var numToEmit = Math.floor(v);\n  system._carryOver += v - numToEmit;\n  if (system._carryOver > 1.0) {\n    numToEmit++;\n    system._carryOver -= 1.0;\n  }\n\n  // Apply any bursts\n  if (defined(system.bursts)) {\n    var length = system.bursts.length;\n    for (var i = 0; i < length; i++) {\n      var burst = system.bursts[i];\n      var currentTime = system._currentTime;\n      if (defined(burst) && !burst._complete && currentTime > burst.time) {\n        numToEmit += CesiumMath.randomBetween(burst.minimum, burst.maximum);\n        burst._complete = true;\n      }\n    }\n  }\n\n  return numToEmit;\n}\n\nvar rotatedVelocityScratch = new Cartesian3();\n\n/**\n * @private\n */\nParticleSystem.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n\n  if (!defined(this._billboardCollection)) {\n    this._billboardCollection = new BillboardCollection();\n  }\n\n  if (this._updateParticlePool) {\n    updateParticlePool(this);\n    this._updateParticlePool = false;\n  }\n\n  // Compute the frame time\n  var dt = 0.0;\n  if (this._previousTime) {\n    dt = JulianDate.secondsDifference(frameState.time, this._previousTime);\n  }\n\n  if (dt < 0.0) {\n    dt = 0.0;\n  }\n\n  var particles = this._particles;\n  var emitter = this._emitter;\n  var updateCallback = this.updateCallback;\n\n  var i;\n  var particle;\n\n  // update particles and remove dead particles\n  var length = particles.length;\n  for (i = 0; i < length; ++i) {\n    particle = particles[i];\n    if (!particle.update(dt, updateCallback)) {\n      removeBillboard(particle);\n      // Add the particle back to the pool so it can be reused.\n      addParticleToPool(this, particle);\n      particles[i] = particles[length - 1];\n      --i;\n      --length;\n    } else {\n      updateBillboard(this, particle);\n    }\n  }\n  particles.length = length;\n\n  var numToEmit = calculateNumberToEmit(this, dt);\n\n  if (numToEmit > 0 && defined(emitter)) {\n    // Compute the final model matrix by combining the particle systems model matrix and the emitter matrix.\n    if (this._matrixDirty) {\n      this._combinedMatrix = Matrix4.multiply(\n        this.modelMatrix,\n        this.emitterModelMatrix,\n        this._combinedMatrix\n      );\n      this._matrixDirty = false;\n    }\n\n    var combinedMatrix = this._combinedMatrix;\n\n    for (i = 0; i < numToEmit; i++) {\n      // Create a new particle.\n      particle = getOrCreateParticle(this);\n\n      // Let the emitter initialize the particle.\n      this._emitter.emit(particle);\n\n      //For the velocity we need to add it to the original position and then multiply by point.\n      Cartesian3.add(\n        particle.position,\n        particle.velocity,\n        rotatedVelocityScratch\n      );\n      Matrix4.multiplyByPoint(\n        combinedMatrix,\n        rotatedVelocityScratch,\n        rotatedVelocityScratch\n      );\n\n      // Change the position to be in world coordinates\n      particle.position = Matrix4.multiplyByPoint(\n        combinedMatrix,\n        particle.position,\n        particle.position\n      );\n\n      // Orient the velocity in world space as well.\n      Cartesian3.subtract(\n        rotatedVelocityScratch,\n        particle.position,\n        particle.velocity\n      );\n      Cartesian3.normalize(particle.velocity, particle.velocity);\n\n      // Add the particle to the system.\n      addParticle(this, particle);\n      updateBillboard(this, particle);\n    }\n  }\n\n  this._billboardCollection.update(frameState);\n  this._previousTime = JulianDate.clone(frameState.time, this._previousTime);\n  this._currentTime += dt;\n\n  if (\n    this._lifetime !== Number.MAX_VALUE &&\n    this._currentTime > this._lifetime\n  ) {\n    if (this.loop) {\n      this._currentTime = CesiumMath.mod(this._currentTime, this._lifetime);\n      if (this.bursts) {\n        var burstLength = this.bursts.length;\n        // Reset any bursts\n        for (i = 0; i < burstLength; i++) {\n          this.bursts[i]._complete = false;\n        }\n      }\n    } else {\n      this._isComplete = true;\n      this._complete.raiseEvent(this);\n    }\n  }\n\n  // free particles in the pool and release billboard GPU memory\n  if (frameState.frameNumber % 120 === 0) {\n    freeParticlePool(this);\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see ParticleSystem#destroy\n */\nParticleSystem.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see ParticleSystem#isDestroyed\n */\nParticleSystem.prototype.destroy = function () {\n  this._billboardCollection =\n    this._billboardCollection && this._billboardCollection.destroy();\n  return destroyObject(this);\n};\n\n/**\n * A function used to modify attributes of the particle at each time step. This can include force modifications,\n * color, sizing, etc.\n *\n * @callback ParticleSystem~updateCallback\n *\n * @param {Particle} particle The particle being updated.\n * @param {Number} dt The time in seconds since the last update.\n *\n * @example\n * function applyGravity(particle, dt) {\n *    var position = particle.position;\n *    var gravityVector = Cesium.Cartesian3.normalize(position, new Cesium.Cartesian3());\n *    Cesium.Cartesian3.multiplyByScalar(gravityVector, GRAVITATIONAL_CONSTANT * dt, gravityVector);\n *    particle.velocity = Cesium.Cartesian3.add(particle.velocity, gravityVector, particle.velocity);\n * }\n */\nexport default ParticleSystem;\n"]},"metadata":{},"sourceType":"module"}