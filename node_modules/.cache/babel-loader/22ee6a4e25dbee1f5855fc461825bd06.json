{"ast":null,"code":"import Uri from \"../ThirdParty/Uri.js\";\nimport when from \"../ThirdParty/when.js\";\nimport Check from \"./Check.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ion from \"./Ion.js\";\nimport Resource from \"./Resource.js\";\nimport RuntimeError from \"./RuntimeError.js\";\n/**\n * A {@link Resource} instance that encapsulates Cesium ion asset access.\n * This object is normally not instantiated directly, use {@link IonResource.fromAssetId}.\n *\n * @alias IonResource\n * @constructor\n * @augments Resource\n *\n * @param {Object} endpoint The result of the Cesium ion asset endpoint service.\n * @param {Resource} endpointResource The resource used to retreive the endpoint.\n *\n * @see Ion\n * @see IonImageryProvider\n * @see createWorldTerrain\n * @see https://cesium.com\n */\n\nfunction IonResource(endpoint, endpointResource) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"endpoint\", endpoint);\n  Check.defined(\"endpointResource\", endpointResource); //>>includeEnd('debug');\n\n  var options;\n  var externalType = endpoint.externalType;\n  var isExternal = defined(externalType);\n\n  if (!isExternal) {\n    options = {\n      url: endpoint.url,\n      retryAttempts: 1,\n      retryCallback: retryCallback\n    };\n  } else if (externalType === \"3DTILES\" || externalType === \"STK_TERRAIN_SERVER\") {\n    // 3D Tiles and STK Terrain Server external assets can still be represented as an IonResource\n    options = {\n      url: endpoint.options.url\n    };\n  } else {\n    //External imagery assets have additional configuration that can't be represented as a Resource\n    throw new RuntimeError(\"Ion.createResource does not support external imagery assets; use IonImageryProvider instead.\");\n  }\n\n  Resource.call(this, options); // The asset endpoint data returned from ion.\n\n  this._ionEndpoint = endpoint;\n  this._ionEndpointDomain = isExternal ? undefined : new Uri(endpoint.url).authority; // The endpoint resource to fetch when a new token is needed\n\n  this._ionEndpointResource = endpointResource; // The primary IonResource from which an instance is derived\n\n  this._ionRoot = undefined; // Shared promise for endpooint requests amd credits (only ever set on the root request)\n\n  this._pendingPromise = undefined;\n  this._credits = undefined;\n  this._isExternal = isExternal;\n}\n\nif (defined(Object.create)) {\n  IonResource.prototype = Object.create(Resource.prototype);\n  IonResource.prototype.constructor = IonResource;\n}\n/**\n * Asynchronously creates an instance.\n *\n * @param {Number} assetId The Cesium ion asset id.\n * @param {Object} [options] An object with the following properties:\n * @param {String} [options.accessToken=Ion.defaultAccessToken] The access token to use.\n * @param {String|Resource} [options.server=Ion.defaultServer] The resource to the Cesium ion API server.\n * @returns {Promise.<IonResource>} A Promise to am instance representing the Cesium ion Asset.\n *\n * @example\n * //Load a Cesium3DTileset with asset ID of 124624234\n * viewer.scene.primitives.add(new Cesium.Cesium3DTileset({ url: Cesium.IonResource.fromAssetId(124624234) }));\n *\n * @example\n * //Load a CZML file with asset ID of 10890\n * Cesium.IonResource.fromAssetId(10890)\n *   .then(function (resource) {\n *     viewer.dataSources.add(Cesium.CzmlDataSource.load(resource));\n *   });\n */\n\n\nIonResource.fromAssetId = function (assetId, options) {\n  var endpointResource = IonResource._createEndpointResource(assetId, options);\n\n  return endpointResource.fetchJson().then(function (endpoint) {\n    return new IonResource(endpoint, endpointResource);\n  });\n};\n\nObject.defineProperties(IonResource.prototype, {\n  /**\n   * Gets the credits required for attribution of the asset.\n   *\n   * @memberof IonResource.prototype\n   * @type {Credit[]}\n   * @readonly\n   */\n  credits: {\n    get: function () {\n      // Only we're not the root, return its credits;\n      if (defined(this._ionRoot)) {\n        return this._ionRoot.credits;\n      } // We are the root\n\n\n      if (defined(this._credits)) {\n        return this._credits;\n      }\n\n      this._credits = IonResource.getCreditsFromEndpoint(this._ionEndpoint, this._ionEndpointResource);\n      return this._credits;\n    }\n  }\n});\n/** @private */\n\nIonResource.getCreditsFromEndpoint = function (endpoint, endpointResource) {\n  var credits = endpoint.attributions.map(Credit.getIonCredit);\n  var defaultTokenCredit = Ion.getDefaultTokenCredit(endpointResource.queryParameters.access_token);\n\n  if (defined(defaultTokenCredit)) {\n    credits.push(Credit.clone(defaultTokenCredit));\n  }\n\n  return credits;\n};\n/** @inheritdoc */\n\n\nIonResource.prototype.clone = function (result) {\n  // We always want to use the root's information because it's the most up-to-date\n  var ionRoot = defaultValue(this._ionRoot, this);\n\n  if (!defined(result)) {\n    result = new IonResource(ionRoot._ionEndpoint, ionRoot._ionEndpointResource);\n  }\n\n  result = Resource.prototype.clone.call(this, result);\n  result._ionRoot = ionRoot;\n  result._isExternal = this._isExternal;\n  return result;\n};\n\nIonResource.prototype.fetchImage = function (options) {\n  if (!this._isExternal) {\n    var userOptions = options;\n    options = {\n      preferBlob: true\n    };\n\n    if (defined(userOptions)) {\n      options.flipY = userOptions.flipY;\n      options.preferImageBitmap = userOptions.preferImageBitmap;\n    }\n  }\n\n  return Resource.prototype.fetchImage.call(this, options);\n};\n\nIonResource.prototype._makeRequest = function (options) {\n  // Don't send ion access token to non-ion servers.\n  if (this._isExternal || new Uri(this.url).authority !== this._ionEndpointDomain) {\n    return Resource.prototype._makeRequest.call(this, options);\n  }\n\n  if (!defined(options.headers)) {\n    options.headers = {};\n  }\n\n  options.headers.Authorization = \"Bearer \" + this._ionEndpoint.accessToken;\n  return Resource.prototype._makeRequest.call(this, options);\n};\n/**\n * @private\n */\n\n\nIonResource._createEndpointResource = function (assetId, options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"assetId\", assetId); //>>includeEnd('debug');\n\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var server = defaultValue(options.server, Ion.defaultServer);\n  var accessToken = defaultValue(options.accessToken, Ion.defaultAccessToken);\n  server = Resource.createIfNeeded(server);\n  var resourceOptions = {\n    url: \"v1/assets/\" + assetId + \"/endpoint\"\n  };\n\n  if (defined(accessToken)) {\n    resourceOptions.queryParameters = {\n      access_token: accessToken\n    };\n  }\n\n  return server.getDerivedResource(resourceOptions);\n};\n\nfunction retryCallback(that, error) {\n  var ionRoot = defaultValue(that._ionRoot, that);\n  var endpointResource = ionRoot._ionEndpointResource; // We only want to retry in the case of invalid credentials (401) or image\n  // requests(since Image failures can not provide a status code)\n\n  if (!defined(error) || error.statusCode !== 401 && !(error.target instanceof Image)) {\n    return when.resolve(false);\n  } // We use a shared pending promise for all derived assets, since they share\n  // a common access_token.  If we're already requesting a new token for this\n  // asset, we wait on the same promise.\n\n\n  if (!defined(ionRoot._pendingPromise)) {\n    ionRoot._pendingPromise = endpointResource.fetchJson().then(function (newEndpoint) {\n      //Set the token for root resource so new derived resources automatically pick it up\n      ionRoot._ionEndpoint = newEndpoint;\n      return newEndpoint;\n    }).always(function (newEndpoint) {\n      // Pass or fail, we're done with this promise, the next failure should use a new one.\n      ionRoot._pendingPromise = undefined;\n      return newEndpoint;\n    });\n  }\n\n  return ionRoot._pendingPromise.then(function (newEndpoint) {\n    // Set the new token and endpoint for this resource\n    that._ionEndpoint = newEndpoint;\n    return true;\n  });\n}\n\nexport default IonResource;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/IonResource.js"],"names":["Uri","when","Check","Credit","defaultValue","defined","Ion","Resource","RuntimeError","IonResource","endpoint","endpointResource","options","externalType","isExternal","url","retryAttempts","retryCallback","call","_ionEndpoint","_ionEndpointDomain","undefined","authority","_ionEndpointResource","_ionRoot","_pendingPromise","_credits","_isExternal","Object","create","prototype","constructor","fromAssetId","assetId","_createEndpointResource","fetchJson","then","defineProperties","credits","get","getCreditsFromEndpoint","attributions","map","getIonCredit","defaultTokenCredit","getDefaultTokenCredit","queryParameters","access_token","push","clone","result","ionRoot","fetchImage","userOptions","preferBlob","flipY","preferImageBitmap","_makeRequest","headers","Authorization","accessToken","EMPTY_OBJECT","server","defaultServer","defaultAccessToken","createIfNeeded","resourceOptions","getDerivedResource","that","error","statusCode","target","Image","resolve","newEndpoint","always"],"mappings":"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","sourcesContent":["import Uri from \"../ThirdParty/Uri.js\";\nimport when from \"../ThirdParty/when.js\";\nimport Check from \"./Check.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ion from \"./Ion.js\";\nimport Resource from \"./Resource.js\";\nimport RuntimeError from \"./RuntimeError.js\";\n\n/**\n * A {@link Resource} instance that encapsulates Cesium ion asset access.\n * This object is normally not instantiated directly, use {@link IonResource.fromAssetId}.\n *\n * @alias IonResource\n * @constructor\n * @augments Resource\n *\n * @param {Object} endpoint The result of the Cesium ion asset endpoint service.\n * @param {Resource} endpointResource The resource used to retreive the endpoint.\n *\n * @see Ion\n * @see IonImageryProvider\n * @see createWorldTerrain\n * @see https://cesium.com\n */\nfunction IonResource(endpoint, endpointResource) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"endpoint\", endpoint);\n  Check.defined(\"endpointResource\", endpointResource);\n  //>>includeEnd('debug');\n\n  var options;\n  var externalType = endpoint.externalType;\n  var isExternal = defined(externalType);\n\n  if (!isExternal) {\n    options = {\n      url: endpoint.url,\n      retryAttempts: 1,\n      retryCallback: retryCallback,\n    };\n  } else if (\n    externalType === \"3DTILES\" ||\n    externalType === \"STK_TERRAIN_SERVER\"\n  ) {\n    // 3D Tiles and STK Terrain Server external assets can still be represented as an IonResource\n    options = { url: endpoint.options.url };\n  } else {\n    //External imagery assets have additional configuration that can't be represented as a Resource\n    throw new RuntimeError(\n      \"Ion.createResource does not support external imagery assets; use IonImageryProvider instead.\"\n    );\n  }\n\n  Resource.call(this, options);\n\n  // The asset endpoint data returned from ion.\n  this._ionEndpoint = endpoint;\n  this._ionEndpointDomain = isExternal\n    ? undefined\n    : new Uri(endpoint.url).authority;\n\n  // The endpoint resource to fetch when a new token is needed\n  this._ionEndpointResource = endpointResource;\n\n  // The primary IonResource from which an instance is derived\n  this._ionRoot = undefined;\n\n  // Shared promise for endpooint requests amd credits (only ever set on the root request)\n  this._pendingPromise = undefined;\n  this._credits = undefined;\n  this._isExternal = isExternal;\n}\n\nif (defined(Object.create)) {\n  IonResource.prototype = Object.create(Resource.prototype);\n  IonResource.prototype.constructor = IonResource;\n}\n\n/**\n * Asynchronously creates an instance.\n *\n * @param {Number} assetId The Cesium ion asset id.\n * @param {Object} [options] An object with the following properties:\n * @param {String} [options.accessToken=Ion.defaultAccessToken] The access token to use.\n * @param {String|Resource} [options.server=Ion.defaultServer] The resource to the Cesium ion API server.\n * @returns {Promise.<IonResource>} A Promise to am instance representing the Cesium ion Asset.\n *\n * @example\n * //Load a Cesium3DTileset with asset ID of 124624234\n * viewer.scene.primitives.add(new Cesium.Cesium3DTileset({ url: Cesium.IonResource.fromAssetId(124624234) }));\n *\n * @example\n * //Load a CZML file with asset ID of 10890\n * Cesium.IonResource.fromAssetId(10890)\n *   .then(function (resource) {\n *     viewer.dataSources.add(Cesium.CzmlDataSource.load(resource));\n *   });\n */\nIonResource.fromAssetId = function (assetId, options) {\n  var endpointResource = IonResource._createEndpointResource(assetId, options);\n\n  return endpointResource.fetchJson().then(function (endpoint) {\n    return new IonResource(endpoint, endpointResource);\n  });\n};\n\nObject.defineProperties(IonResource.prototype, {\n  /**\n   * Gets the credits required for attribution of the asset.\n   *\n   * @memberof IonResource.prototype\n   * @type {Credit[]}\n   * @readonly\n   */\n  credits: {\n    get: function () {\n      // Only we're not the root, return its credits;\n      if (defined(this._ionRoot)) {\n        return this._ionRoot.credits;\n      }\n\n      // We are the root\n      if (defined(this._credits)) {\n        return this._credits;\n      }\n\n      this._credits = IonResource.getCreditsFromEndpoint(\n        this._ionEndpoint,\n        this._ionEndpointResource\n      );\n\n      return this._credits;\n    },\n  },\n});\n\n/** @private */\nIonResource.getCreditsFromEndpoint = function (endpoint, endpointResource) {\n  var credits = endpoint.attributions.map(Credit.getIonCredit);\n  var defaultTokenCredit = Ion.getDefaultTokenCredit(\n    endpointResource.queryParameters.access_token\n  );\n  if (defined(defaultTokenCredit)) {\n    credits.push(Credit.clone(defaultTokenCredit));\n  }\n  return credits;\n};\n\n/** @inheritdoc */\nIonResource.prototype.clone = function (result) {\n  // We always want to use the root's information because it's the most up-to-date\n  var ionRoot = defaultValue(this._ionRoot, this);\n\n  if (!defined(result)) {\n    result = new IonResource(\n      ionRoot._ionEndpoint,\n      ionRoot._ionEndpointResource\n    );\n  }\n\n  result = Resource.prototype.clone.call(this, result);\n  result._ionRoot = ionRoot;\n  result._isExternal = this._isExternal;\n\n  return result;\n};\n\nIonResource.prototype.fetchImage = function (options) {\n  if (!this._isExternal) {\n    var userOptions = options;\n    options = {\n      preferBlob: true,\n    };\n    if (defined(userOptions)) {\n      options.flipY = userOptions.flipY;\n      options.preferImageBitmap = userOptions.preferImageBitmap;\n    }\n  }\n\n  return Resource.prototype.fetchImage.call(this, options);\n};\n\nIonResource.prototype._makeRequest = function (options) {\n  // Don't send ion access token to non-ion servers.\n  if (\n    this._isExternal ||\n    new Uri(this.url).authority !== this._ionEndpointDomain\n  ) {\n    return Resource.prototype._makeRequest.call(this, options);\n  }\n\n  if (!defined(options.headers)) {\n    options.headers = {};\n  }\n  options.headers.Authorization = \"Bearer \" + this._ionEndpoint.accessToken;\n\n  return Resource.prototype._makeRequest.call(this, options);\n};\n\n/**\n * @private\n */\nIonResource._createEndpointResource = function (assetId, options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"assetId\", assetId);\n  //>>includeEnd('debug');\n\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var server = defaultValue(options.server, Ion.defaultServer);\n  var accessToken = defaultValue(options.accessToken, Ion.defaultAccessToken);\n  server = Resource.createIfNeeded(server);\n\n  var resourceOptions = {\n    url: \"v1/assets/\" + assetId + \"/endpoint\",\n  };\n\n  if (defined(accessToken)) {\n    resourceOptions.queryParameters = { access_token: accessToken };\n  }\n\n  return server.getDerivedResource(resourceOptions);\n};\n\nfunction retryCallback(that, error) {\n  var ionRoot = defaultValue(that._ionRoot, that);\n  var endpointResource = ionRoot._ionEndpointResource;\n\n  // We only want to retry in the case of invalid credentials (401) or image\n  // requests(since Image failures can not provide a status code)\n  if (\n    !defined(error) ||\n    (error.statusCode !== 401 && !(error.target instanceof Image))\n  ) {\n    return when.resolve(false);\n  }\n\n  // We use a shared pending promise for all derived assets, since they share\n  // a common access_token.  If we're already requesting a new token for this\n  // asset, we wait on the same promise.\n  if (!defined(ionRoot._pendingPromise)) {\n    ionRoot._pendingPromise = endpointResource\n      .fetchJson()\n      .then(function (newEndpoint) {\n        //Set the token for root resource so new derived resources automatically pick it up\n        ionRoot._ionEndpoint = newEndpoint;\n        return newEndpoint;\n      })\n      .always(function (newEndpoint) {\n        // Pass or fail, we're done with this promise, the next failure should use a new one.\n        ionRoot._pendingPromise = undefined;\n        return newEndpoint;\n      });\n  }\n\n  return ionRoot._pendingPromise.then(function (newEndpoint) {\n    // Set the new token and endpoint for this resource\n    that._ionEndpoint = newEndpoint;\n    return true;\n  });\n}\nexport default IonResource;\n"]},"metadata":{},"sourceType":"module"}