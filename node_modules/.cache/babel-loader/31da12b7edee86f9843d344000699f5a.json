{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n/**\n * Describes a two dimensional icon located at the position of the containing {@link Entity}.\n * <p>\n * <div align='center'>\n * <img src='Images/Billboard.png' width='400' height='300' /><br />\n * Example billboards\n * </div>\n * </p>\n *\n * @alias BillboardGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the billboard.\n * @param {Property} [options.image] A Property specifying the Image, URI, or Canvas to use for the billboard.\n * @param {Property} [options.scale=1.0] A numeric Property specifying the scale to apply to the image size.\n * @param {Property} [options.pixelOffset=Cartesian2.ZERO] A {@link Cartesian2} Property specifying the pixel offset.\n * @param {Property} [options.eyeOffset=Cartesian3.ZERO] A {@link Cartesian3} Property specifying the eye offset.\n * @param {Property} [options.horizontalOrigin=HorizontalOrigin.CENTER] A Property specifying the {@link HorizontalOrigin}.\n * @param {Property} [options.verticalOrigin=VerticalOrigin.CENTER] A Property specifying the {@link VerticalOrigin}.\n * @param {Property} [options.heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @param {Property} [options.color=Color.WHITE] A Property specifying the tint {@link Color} of the image.\n * @param {Property} [options.rotation=0] A numeric Property specifying the rotation about the alignedAxis.\n * @param {Property} [options.alignedAxis=Cartesian3.ZERO] A {@link Cartesian3} Property specifying the unit vector axis of rotation.\n * @param {Property} [options.sizeInMeters] A boolean Property specifying whether this billboard's size should be measured in meters.\n * @param {Property} [options.width] A numeric Property specifying the width of the billboard in pixels, overriding the native size.\n * @param {Property} [options.height] A numeric Property specifying the height of the billboard in pixels, overriding the native size.\n * @param {Property} [options.scaleByDistance] A {@link NearFarScalar} Property used to scale the point based on distance from the camera.\n * @param {Property} [options.translucencyByDistance] A {@link NearFarScalar} Property used to set translucency based on distance from the camera.\n * @param {Property} [options.pixelOffsetScaleByDistance] A {@link NearFarScalar} Property used to set pixelOffset based on distance from the camera.\n * @param {Property} [options.imageSubRegion] A Property specifying a {@link BoundingRectangle} that defines a sub-region of the image to use for the billboard, rather than the entire image, measured in pixels from the bottom-left.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this billboard will be displayed.\n * @param {Property} [options.disableDepthTestDistance] A Property specifying the distance from the camera at which to disable the depth test to.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Billboards.html|Cesium Sandcastle Billboard Demo}\n */\n\nfunction BillboardGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._image = undefined;\n  this._imageSubscription = undefined;\n  this._scale = undefined;\n  this._scaleSubscription = undefined;\n  this._pixelOffset = undefined;\n  this._pixelOffsetSubscription = undefined;\n  this._eyeOffset = undefined;\n  this._eyeOffsetSubscription = undefined;\n  this._horizontalOrigin = undefined;\n  this._horizontalOriginSubscription = undefined;\n  this._verticalOrigin = undefined;\n  this._verticalOriginSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._rotation = undefined;\n  this._rotationSubscription = undefined;\n  this._alignedAxis = undefined;\n  this._alignedAxisSubscription = undefined;\n  this._sizeInMeters = undefined;\n  this._sizeInMetersSubscription = undefined;\n  this._width = undefined;\n  this._widthSubscription = undefined;\n  this._height = undefined;\n  this._heightSubscription = undefined;\n  this._scaleByDistance = undefined;\n  this._scaleByDistanceSubscription = undefined;\n  this._translucencyByDistance = undefined;\n  this._translucencyByDistanceSubscription = undefined;\n  this._pixelOffsetScaleByDistance = undefined;\n  this._pixelOffsetScaleByDistanceSubscription = undefined;\n  this._imageSubRegion = undefined;\n  this._imageSubRegionSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._disableDepthTestDistance = undefined;\n  this._disableDepthTestDistanceSubscription = undefined;\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(BillboardGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof BillboardGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function get() {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the billboard.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the Image, URI, or Canvas to use for the billboard.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   */\n  image: createPropertyDescriptor(\"image\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the uniform scale to apply to the image.\n   * A scale greater than <code>1.0</code> enlarges the billboard while a scale less than <code>1.0</code> shrinks it.\n   * <p>\n   * <div align='center'>\n   * <img src='Images/Billboard.setScale.png' width='400' height='300' /><br/>\n   * From left to right in the above image, the scales are <code>0.5</code>, <code>1.0</code>, and <code>2.0</code>.\n   * </div>\n   * </p>\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  scale: createPropertyDescriptor(\"scale\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the billboard's pixel offset in screen space\n   * from the origin of this billboard.  This is commonly used to align multiple billboards and labels at\n   * the same position, e.g., an image and text.  The screen space origin is the top, left corner of the\n   * canvas; <code>x</code> increases from left to right, and <code>y</code> increases from top to bottom.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Billboard.setPixelOffset.default.png' width='250' height='188' /></td>\n   * <td align='center'><code>b.pixeloffset = new Cartesian2(50, 25);</code><br/><img src='Images/Billboard.setPixelOffset.x50y-25.png' width='250' height='188' /></td>\n   * </tr></table>\n   * The billboard's origin is indicated by the yellow point.\n   * </div>\n   * </p>\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default Cartesian2.ZERO\n   */\n  pixelOffset: createPropertyDescriptor(\"pixelOffset\"),\n\n  /**\n   * Gets or sets the {@link Cartesian3} Property specifying the billboard's offset in eye coordinates.\n   * Eye coordinates is a left-handed coordinate system, where <code>x</code> points towards the viewer's\n   * right, <code>y</code> points up, and <code>z</code> points into the screen.\n   * <p>\n   * An eye offset is commonly used to arrange multiple billboards or objects at the same position, e.g., to\n   * arrange a billboard above its corresponding 3D model.\n   * </p>\n   * Below, the billboard is positioned at the center of the Earth but an eye offset makes it always\n   * appear on top of the Earth regardless of the viewer's or Earth's orientation.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.one.png' width='250' height='188' /></td>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.two.png' width='250' height='188' /></td>\n   * </tr></table>\n   * <code>b.eyeOffset = new Cartesian3(0.0, 8000000.0, 0.0);</code>\n   * </div>\n   * </p>\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default Cartesian3.ZERO\n   */\n  eyeOffset: createPropertyDescriptor(\"eyeOffset\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HorizontalOrigin}.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default HorizontalOrigin.CENTER\n   */\n  horizontalOrigin: createPropertyDescriptor(\"horizontalOrigin\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link VerticalOrigin}.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default VerticalOrigin.CENTER\n   */\n  verticalOrigin: createPropertyDescriptor(\"verticalOrigin\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} that is multiplied with the <code>image</code>.\n   * This has two common use cases.  First, the same white texture may be used by many different billboards,\n   * each with a different color, to create colored billboards. Second, the color's alpha component can be\n   * used to make the billboard translucent as shown below. An alpha of <code>0.0</code> makes the billboard\n   * transparent, and <code>1.0</code> makes the billboard opaque.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Billboard.setColor.Alpha255.png' width='250' height='188' /></td>\n   * <td align='center'><code>alpha : 0.5</code><br/><img src='Images/Billboard.setColor.Alpha127.png' width='250' height='188' /></td>\n   * </tr></table>\n   * </div>\n   * </p>\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the rotation of the image\n   * counter clockwise from the <code>alignedAxis</code>.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default 0\n   */\n  rotation: createPropertyDescriptor(\"rotation\"),\n\n  /**\n   * Gets or sets the {@link Cartesian3} Property specifying the unit vector axis of rotation\n   * in the fixed frame. When set to Cartesian3.ZERO the rotation is from the top of the screen.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default Cartesian3.ZERO\n   */\n  alignedAxis: createPropertyDescriptor(\"alignedAxis\"),\n\n  /**\n   * Gets or sets the boolean Property specifying if this billboard's size will be measured in meters.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default false\n   */\n  sizeInMeters: createPropertyDescriptor(\"sizeInMeters\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the billboard in pixels.\n   * When undefined, the native width is used.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   */\n  width: createPropertyDescriptor(\"width\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the height of the billboard in pixels.\n   * When undefined, the native height is used.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   */\n  height: createPropertyDescriptor(\"height\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the scale of the billboard based on the distance from the camera.\n   * A billboard's scale will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's scale remains clamped to the nearest bound.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   */\n  scaleByDistance: createPropertyDescriptor(\"scaleByDistance\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the translucency of the billboard based on the distance from the camera.\n   * A billboard's translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's translucency remains clamped to the nearest bound.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   */\n  translucencyByDistance: createPropertyDescriptor(\"translucencyByDistance\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the pixel offset of the billboard based on the distance from the camera.\n   * A billboard's pixel offset will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's pixel offset remains clamped to the nearest bound.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   */\n  pixelOffsetScaleByDistance: createPropertyDescriptor(\"pixelOffsetScaleByDistance\"),\n\n  /**\n   * Gets or sets the Property specifying a {@link BoundingRectangle} that defines a\n   * sub-region of the <code>image</code> to use for the billboard, rather than the entire image,\n   * measured in pixels from the bottom-left.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   */\n  imageSubRegion: createPropertyDescriptor(\"imageSubRegion\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this billboard will be displayed.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\"distanceDisplayCondition\"),\n\n  /**\n   * Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n   * When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   */\n  disableDepthTestDistance: createPropertyDescriptor(\"disableDepthTestDistance\")\n});\n/**\n * Duplicates this instance.\n *\n * @param {BillboardGraphics} [result] The object onto which to store the result.\n * @returns {BillboardGraphics} The modified result parameter or a new instance if one was not provided.\n */\n\nBillboardGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new BillboardGraphics(this);\n  }\n\n  result.show = this._show;\n  result.image = this._image;\n  result.scale = this._scale;\n  result.pixelOffset = this._pixelOffset;\n  result.eyeOffset = this._eyeOffset;\n  result.horizontalOrigin = this._horizontalOrigin;\n  result.verticalOrigin = this._verticalOrigin;\n  result.heightReference = this._heightReference;\n  result.color = this._color;\n  result.rotation = this._rotation;\n  result.alignedAxis = this._alignedAxis;\n  result.sizeInMeters = this._sizeInMeters;\n  result.width = this._width;\n  result.height = this._height;\n  result.scaleByDistance = this._scaleByDistance;\n  result.translucencyByDistance = this._translucencyByDistance;\n  result.pixelOffsetScaleByDistance = this._pixelOffsetScaleByDistance;\n  result.imageSubRegion = this._imageSubRegion;\n  result.distanceDisplayCondition = this._distanceDisplayCondition;\n  result.disableDepthTestDistance = this._disableDepthTestDistance;\n  return result;\n};\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {BillboardGraphics} source The object to be merged into this object.\n */\n\n\nBillboardGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  } //>>includeEnd('debug');\n\n\n  this.show = defaultValue(this._show, source.show);\n  this.image = defaultValue(this._image, source.image);\n  this.scale = defaultValue(this._scale, source.scale);\n  this.pixelOffset = defaultValue(this._pixelOffset, source.pixelOffset);\n  this.eyeOffset = defaultValue(this._eyeOffset, source.eyeOffset);\n  this.horizontalOrigin = defaultValue(this._horizontalOrigin, source.horizontalOrigin);\n  this.verticalOrigin = defaultValue(this._verticalOrigin, source.verticalOrigin);\n  this.heightReference = defaultValue(this._heightReference, source.heightReference);\n  this.color = defaultValue(this._color, source.color);\n  this.rotation = defaultValue(this._rotation, source.rotation);\n  this.alignedAxis = defaultValue(this._alignedAxis, source.alignedAxis);\n  this.sizeInMeters = defaultValue(this._sizeInMeters, source.sizeInMeters);\n  this.width = defaultValue(this._width, source.width);\n  this.height = defaultValue(this._height, source.height);\n  this.scaleByDistance = defaultValue(this._scaleByDistance, source.scaleByDistance);\n  this.translucencyByDistance = defaultValue(this._translucencyByDistance, source.translucencyByDistance);\n  this.pixelOffsetScaleByDistance = defaultValue(this._pixelOffsetScaleByDistance, source.pixelOffsetScaleByDistance);\n  this.imageSubRegion = defaultValue(this._imageSubRegion, source.imageSubRegion);\n  this.distanceDisplayCondition = defaultValue(this._distanceDisplayCondition, source.distanceDisplayCondition);\n  this.disableDepthTestDistance = defaultValue(this._disableDepthTestDistance, source.disableDepthTestDistance);\n};\n\nexport default BillboardGraphics;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/BillboardGraphics.js"],"names":["defaultValue","defined","DeveloperError","Event","createPropertyDescriptor","BillboardGraphics","options","_definitionChanged","_show","undefined","_showSubscription","_image","_imageSubscription","_scale","_scaleSubscription","_pixelOffset","_pixelOffsetSubscription","_eyeOffset","_eyeOffsetSubscription","_horizontalOrigin","_horizontalOriginSubscription","_verticalOrigin","_verticalOriginSubscription","_heightReference","_heightReferenceSubscription","_color","_colorSubscription","_rotation","_rotationSubscription","_alignedAxis","_alignedAxisSubscription","_sizeInMeters","_sizeInMetersSubscription","_width","_widthSubscription","_height","_heightSubscription","_scaleByDistance","_scaleByDistanceSubscription","_translucencyByDistance","_translucencyByDistanceSubscription","_pixelOffsetScaleByDistance","_pixelOffsetScaleByDistanceSubscription","_imageSubRegion","_imageSubRegionSubscription","_distanceDisplayCondition","_distanceDisplayConditionSubscription","_disableDepthTestDistance","_disableDepthTestDistanceSubscription","merge","EMPTY_OBJECT","Object","defineProperties","prototype","definitionChanged","get","show","image","scale","pixelOffset","eyeOffset","horizontalOrigin","verticalOrigin","heightReference","color","rotation","alignedAxis","sizeInMeters","width","height","scaleByDistance","translucencyByDistance","pixelOffsetScaleByDistance","imageSubRegion","distanceDisplayCondition","disableDepthTestDistance","clone","result","source"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * Describes a two dimensional icon located at the position of the containing {@link Entity}.\n * <p>\n * <div align='center'>\n * <img src='Images/Billboard.png' width='400' height='300' /><br />\n * Example billboards\n * </div>\n * </p>\n *\n * @alias BillboardGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the billboard.\n * @param {Property} [options.image] A Property specifying the Image, URI, or Canvas to use for the billboard.\n * @param {Property} [options.scale=1.0] A numeric Property specifying the scale to apply to the image size.\n * @param {Property} [options.pixelOffset=Cartesian2.ZERO] A {@link Cartesian2} Property specifying the pixel offset.\n * @param {Property} [options.eyeOffset=Cartesian3.ZERO] A {@link Cartesian3} Property specifying the eye offset.\n * @param {Property} [options.horizontalOrigin=HorizontalOrigin.CENTER] A Property specifying the {@link HorizontalOrigin}.\n * @param {Property} [options.verticalOrigin=VerticalOrigin.CENTER] A Property specifying the {@link VerticalOrigin}.\n * @param {Property} [options.heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @param {Property} [options.color=Color.WHITE] A Property specifying the tint {@link Color} of the image.\n * @param {Property} [options.rotation=0] A numeric Property specifying the rotation about the alignedAxis.\n * @param {Property} [options.alignedAxis=Cartesian3.ZERO] A {@link Cartesian3} Property specifying the unit vector axis of rotation.\n * @param {Property} [options.sizeInMeters] A boolean Property specifying whether this billboard's size should be measured in meters.\n * @param {Property} [options.width] A numeric Property specifying the width of the billboard in pixels, overriding the native size.\n * @param {Property} [options.height] A numeric Property specifying the height of the billboard in pixels, overriding the native size.\n * @param {Property} [options.scaleByDistance] A {@link NearFarScalar} Property used to scale the point based on distance from the camera.\n * @param {Property} [options.translucencyByDistance] A {@link NearFarScalar} Property used to set translucency based on distance from the camera.\n * @param {Property} [options.pixelOffsetScaleByDistance] A {@link NearFarScalar} Property used to set pixelOffset based on distance from the camera.\n * @param {Property} [options.imageSubRegion] A Property specifying a {@link BoundingRectangle} that defines a sub-region of the image to use for the billboard, rather than the entire image, measured in pixels from the bottom-left.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this billboard will be displayed.\n * @param {Property} [options.disableDepthTestDistance] A Property specifying the distance from the camera at which to disable the depth test to.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Billboards.html|Cesium Sandcastle Billboard Demo}\n */\nfunction BillboardGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._image = undefined;\n  this._imageSubscription = undefined;\n  this._scale = undefined;\n  this._scaleSubscription = undefined;\n  this._pixelOffset = undefined;\n  this._pixelOffsetSubscription = undefined;\n  this._eyeOffset = undefined;\n  this._eyeOffsetSubscription = undefined;\n  this._horizontalOrigin = undefined;\n  this._horizontalOriginSubscription = undefined;\n  this._verticalOrigin = undefined;\n  this._verticalOriginSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._rotation = undefined;\n  this._rotationSubscription = undefined;\n  this._alignedAxis = undefined;\n  this._alignedAxisSubscription = undefined;\n  this._sizeInMeters = undefined;\n  this._sizeInMetersSubscription = undefined;\n  this._width = undefined;\n  this._widthSubscription = undefined;\n  this._height = undefined;\n  this._heightSubscription = undefined;\n  this._scaleByDistance = undefined;\n  this._scaleByDistanceSubscription = undefined;\n  this._translucencyByDistance = undefined;\n  this._translucencyByDistanceSubscription = undefined;\n  this._pixelOffsetScaleByDistance = undefined;\n  this._pixelOffsetScaleByDistanceSubscription = undefined;\n  this._imageSubRegion = undefined;\n  this._imageSubRegionSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._disableDepthTestDistance = undefined;\n  this._disableDepthTestDistanceSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(BillboardGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof BillboardGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the billboard.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the Image, URI, or Canvas to use for the billboard.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   */\n  image: createPropertyDescriptor(\"image\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the uniform scale to apply to the image.\n   * A scale greater than <code>1.0</code> enlarges the billboard while a scale less than <code>1.0</code> shrinks it.\n   * <p>\n   * <div align='center'>\n   * <img src='Images/Billboard.setScale.png' width='400' height='300' /><br/>\n   * From left to right in the above image, the scales are <code>0.5</code>, <code>1.0</code>, and <code>2.0</code>.\n   * </div>\n   * </p>\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  scale: createPropertyDescriptor(\"scale\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the billboard's pixel offset in screen space\n   * from the origin of this billboard.  This is commonly used to align multiple billboards and labels at\n   * the same position, e.g., an image and text.  The screen space origin is the top, left corner of the\n   * canvas; <code>x</code> increases from left to right, and <code>y</code> increases from top to bottom.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Billboard.setPixelOffset.default.png' width='250' height='188' /></td>\n   * <td align='center'><code>b.pixeloffset = new Cartesian2(50, 25);</code><br/><img src='Images/Billboard.setPixelOffset.x50y-25.png' width='250' height='188' /></td>\n   * </tr></table>\n   * The billboard's origin is indicated by the yellow point.\n   * </div>\n   * </p>\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default Cartesian2.ZERO\n   */\n  pixelOffset: createPropertyDescriptor(\"pixelOffset\"),\n\n  /**\n   * Gets or sets the {@link Cartesian3} Property specifying the billboard's offset in eye coordinates.\n   * Eye coordinates is a left-handed coordinate system, where <code>x</code> points towards the viewer's\n   * right, <code>y</code> points up, and <code>z</code> points into the screen.\n   * <p>\n   * An eye offset is commonly used to arrange multiple billboards or objects at the same position, e.g., to\n   * arrange a billboard above its corresponding 3D model.\n   * </p>\n   * Below, the billboard is positioned at the center of the Earth but an eye offset makes it always\n   * appear on top of the Earth regardless of the viewer's or Earth's orientation.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.one.png' width='250' height='188' /></td>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.two.png' width='250' height='188' /></td>\n   * </tr></table>\n   * <code>b.eyeOffset = new Cartesian3(0.0, 8000000.0, 0.0);</code>\n   * </div>\n   * </p>\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default Cartesian3.ZERO\n   */\n  eyeOffset: createPropertyDescriptor(\"eyeOffset\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HorizontalOrigin}.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default HorizontalOrigin.CENTER\n   */\n  horizontalOrigin: createPropertyDescriptor(\"horizontalOrigin\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link VerticalOrigin}.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default VerticalOrigin.CENTER\n   */\n  verticalOrigin: createPropertyDescriptor(\"verticalOrigin\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} that is multiplied with the <code>image</code>.\n   * This has two common use cases.  First, the same white texture may be used by many different billboards,\n   * each with a different color, to create colored billboards. Second, the color's alpha component can be\n   * used to make the billboard translucent as shown below. An alpha of <code>0.0</code> makes the billboard\n   * transparent, and <code>1.0</code> makes the billboard opaque.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Billboard.setColor.Alpha255.png' width='250' height='188' /></td>\n   * <td align='center'><code>alpha : 0.5</code><br/><img src='Images/Billboard.setColor.Alpha127.png' width='250' height='188' /></td>\n   * </tr></table>\n   * </div>\n   * </p>\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the rotation of the image\n   * counter clockwise from the <code>alignedAxis</code>.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default 0\n   */\n  rotation: createPropertyDescriptor(\"rotation\"),\n\n  /**\n   * Gets or sets the {@link Cartesian3} Property specifying the unit vector axis of rotation\n   * in the fixed frame. When set to Cartesian3.ZERO the rotation is from the top of the screen.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default Cartesian3.ZERO\n   */\n  alignedAxis: createPropertyDescriptor(\"alignedAxis\"),\n\n  /**\n   * Gets or sets the boolean Property specifying if this billboard's size will be measured in meters.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   * @default false\n   */\n  sizeInMeters: createPropertyDescriptor(\"sizeInMeters\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the billboard in pixels.\n   * When undefined, the native width is used.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   */\n  width: createPropertyDescriptor(\"width\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the height of the billboard in pixels.\n   * When undefined, the native height is used.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   */\n  height: createPropertyDescriptor(\"height\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the scale of the billboard based on the distance from the camera.\n   * A billboard's scale will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's scale remains clamped to the nearest bound.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   */\n  scaleByDistance: createPropertyDescriptor(\"scaleByDistance\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the translucency of the billboard based on the distance from the camera.\n   * A billboard's translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's translucency remains clamped to the nearest bound.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   */\n  translucencyByDistance: createPropertyDescriptor(\"translucencyByDistance\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the pixel offset of the billboard based on the distance from the camera.\n   * A billboard's pixel offset will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's pixel offset remains clamped to the nearest bound.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   */\n  pixelOffsetScaleByDistance: createPropertyDescriptor(\n    \"pixelOffsetScaleByDistance\"\n  ),\n\n  /**\n   * Gets or sets the Property specifying a {@link BoundingRectangle} that defines a\n   * sub-region of the <code>image</code> to use for the billboard, rather than the entire image,\n   * measured in pixels from the bottom-left.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   */\n  imageSubRegion: createPropertyDescriptor(\"imageSubRegion\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this billboard will be displayed.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n\n  /**\n   * Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n   * When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property}\n   */\n  disableDepthTestDistance: createPropertyDescriptor(\n    \"disableDepthTestDistance\"\n  ),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {BillboardGraphics} [result] The object onto which to store the result.\n * @returns {BillboardGraphics} The modified result parameter or a new instance if one was not provided.\n */\nBillboardGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new BillboardGraphics(this);\n  }\n  result.show = this._show;\n  result.image = this._image;\n  result.scale = this._scale;\n  result.pixelOffset = this._pixelOffset;\n  result.eyeOffset = this._eyeOffset;\n  result.horizontalOrigin = this._horizontalOrigin;\n  result.verticalOrigin = this._verticalOrigin;\n  result.heightReference = this._heightReference;\n  result.color = this._color;\n  result.rotation = this._rotation;\n  result.alignedAxis = this._alignedAxis;\n  result.sizeInMeters = this._sizeInMeters;\n  result.width = this._width;\n  result.height = this._height;\n  result.scaleByDistance = this._scaleByDistance;\n  result.translucencyByDistance = this._translucencyByDistance;\n  result.pixelOffsetScaleByDistance = this._pixelOffsetScaleByDistance;\n  result.imageSubRegion = this._imageSubRegion;\n  result.distanceDisplayCondition = this._distanceDisplayCondition;\n  result.disableDepthTestDistance = this._disableDepthTestDistance;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {BillboardGraphics} source The object to be merged into this object.\n */\nBillboardGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this._show, source.show);\n  this.image = defaultValue(this._image, source.image);\n  this.scale = defaultValue(this._scale, source.scale);\n  this.pixelOffset = defaultValue(this._pixelOffset, source.pixelOffset);\n  this.eyeOffset = defaultValue(this._eyeOffset, source.eyeOffset);\n  this.horizontalOrigin = defaultValue(\n    this._horizontalOrigin,\n    source.horizontalOrigin\n  );\n  this.verticalOrigin = defaultValue(\n    this._verticalOrigin,\n    source.verticalOrigin\n  );\n  this.heightReference = defaultValue(\n    this._heightReference,\n    source.heightReference\n  );\n  this.color = defaultValue(this._color, source.color);\n  this.rotation = defaultValue(this._rotation, source.rotation);\n  this.alignedAxis = defaultValue(this._alignedAxis, source.alignedAxis);\n  this.sizeInMeters = defaultValue(this._sizeInMeters, source.sizeInMeters);\n  this.width = defaultValue(this._width, source.width);\n  this.height = defaultValue(this._height, source.height);\n  this.scaleByDistance = defaultValue(\n    this._scaleByDistance,\n    source.scaleByDistance\n  );\n  this.translucencyByDistance = defaultValue(\n    this._translucencyByDistance,\n    source.translucencyByDistance\n  );\n  this.pixelOffsetScaleByDistance = defaultValue(\n    this._pixelOffsetScaleByDistance,\n    source.pixelOffsetScaleByDistance\n  );\n  this.imageSubRegion = defaultValue(\n    this._imageSubRegion,\n    source.imageSubRegion\n  );\n  this.distanceDisplayCondition = defaultValue(\n    this._distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n  this.disableDepthTestDistance = defaultValue(\n    this._disableDepthTestDistance,\n    source.disableDepthTestDistance\n  );\n};\nexport default BillboardGraphics;\n"]},"metadata":{},"sourceType":"module"}