{"ast":null,"code":"import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport ViewportQuadFS from \"../Shaders/ViewportQuadFS.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport Material from \"./Material.js\";\n/**\n * A viewport aligned quad.\n *\n * @alias ViewportQuad\n * @constructor\n *\n * @param {BoundingRectangle} [rectangle] The {@link BoundingRectangle} defining the quad's position within the viewport.\n * @param {Material} [material] The {@link Material} defining the surface appearance of the viewport quad.\n *\n * @example\n * var viewportQuad = new Cesium.ViewportQuad(new Cesium.BoundingRectangle(0, 0, 80, 40));\n * viewportQuad.material.uniforms.color = new Cesium.Color(1.0, 0.0, 0.0, 1.0);\n */\n\nfunction ViewportQuad(rectangle, material) {\n  /**\n   * Determines if the viewport quad primitive will be shown.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.show = true;\n\n  if (!defined(rectangle)) {\n    rectangle = new BoundingRectangle();\n  }\n  /**\n   * The BoundingRectangle defining the quad's position within the viewport.\n   *\n   * @type {BoundingRectangle}\n   *\n   * @example\n   * viewportQuad.rectangle = new Cesium.BoundingRectangle(0, 0, 80, 40);\n   */\n\n\n  this.rectangle = BoundingRectangle.clone(rectangle);\n\n  if (!defined(material)) {\n    material = Material.fromType(Material.ColorType, {\n      color: new Color(1.0, 1.0, 1.0, 1.0)\n    });\n  }\n  /**\n   * The surface appearance of the viewport quad.  This can be one of several built-in {@link Material} objects or a custom material, scripted with\n   * {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}.\n   * <p>\n   * The default material is <code>Material.ColorType</code>.\n   * </p>\n   *\n   * @type Material\n   *\n   * @example\n   * // 1. Change the color of the default material to yellow\n   * viewportQuad.material.uniforms.color = new Cesium.Color(1.0, 1.0, 0.0, 1.0);\n   *\n   * // 2. Change material to horizontal stripes\n   * viewportQuad.material = Cesium.Material.fromType(Cesium.Material.StripeType);\n   *\n   * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n   */\n\n\n  this.material = material;\n  this._material = undefined;\n  this._overlayCommand = undefined;\n  this._rs = undefined;\n}\n/**\n * Called when {@link Viewer} or {@link CesiumWidget} render the scene to\n * get the draw commands needed to render this primitive.\n * <p>\n * Do not call this function directly.  This is documented just to\n * list the exceptions that may be propagated when the scene is rendered:\n * </p>\n *\n * @exception {DeveloperError} this.material must be defined.\n * @exception {DeveloperError} this.rectangle must be defined.\n */\n\n\nViewportQuad.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  } //>>includeStart('debug', pragmas.debug);\n\n\n  if (!defined(this.material)) {\n    throw new DeveloperError(\"this.material must be defined.\");\n  }\n\n  if (!defined(this.rectangle)) {\n    throw new DeveloperError(\"this.rectangle must be defined.\");\n  } //>>includeEnd('debug');\n\n\n  var rs = this._rs;\n\n  if (!defined(rs) || !BoundingRectangle.equals(rs.viewport, this.rectangle)) {\n    this._rs = RenderState.fromCache({\n      blending: BlendingState.ALPHA_BLEND,\n      viewport: this.rectangle\n    });\n  }\n\n  var pass = frameState.passes;\n\n  if (pass.render) {\n    var context = frameState.context;\n\n    if (this._material !== this.material || !defined(this._overlayCommand)) {\n      // Recompile shader when material changes\n      this._material = this.material;\n\n      if (defined(this._overlayCommand)) {\n        this._overlayCommand.shaderProgram.destroy();\n      }\n\n      var fs = new ShaderSource({\n        sources: [this._material.shaderSource, ViewportQuadFS]\n      });\n      this._overlayCommand = context.createViewportQuadCommand(fs, {\n        renderState: this._rs,\n        uniformMap: this._material._uniforms,\n        owner: this\n      });\n      this._overlayCommand.pass = Pass.OVERLAY;\n    }\n\n    this._material.update(context);\n\n    this._overlayCommand.uniformMap = this._material._uniforms;\n    frameState.commandList.push(this._overlayCommand);\n  }\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see ViewportQuad#destroy\n */\n\n\nViewportQuad.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * quad = quad && quad.destroy();\n *\n * @see ViewportQuad#isDestroyed\n */\n\n\nViewportQuad.prototype.destroy = function () {\n  if (defined(this._overlayCommand)) {\n    this._overlayCommand.shaderProgram = this._overlayCommand.shaderProgram && this._overlayCommand.shaderProgram.destroy();\n  }\n\n  return destroyObject(this);\n};\n\nexport default ViewportQuad;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/ViewportQuad.js"],"names":["BoundingRectangle","Color","defined","destroyObject","DeveloperError","Pass","RenderState","ShaderSource","ViewportQuadFS","BlendingState","Material","ViewportQuad","rectangle","material","show","clone","fromType","ColorType","color","_material","undefined","_overlayCommand","_rs","prototype","update","frameState","rs","equals","viewport","fromCache","blending","ALPHA_BLEND","pass","passes","render","context","shaderProgram","destroy","fs","sources","shaderSource","createViewportQuadCommand","renderState","uniformMap","_uniforms","owner","OVERLAY","commandList","push","isDestroyed"],"mappings":"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","sourcesContent":["import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport ViewportQuadFS from \"../Shaders/ViewportQuadFS.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport Material from \"./Material.js\";\n\n/**\n * A viewport aligned quad.\n *\n * @alias ViewportQuad\n * @constructor\n *\n * @param {BoundingRectangle} [rectangle] The {@link BoundingRectangle} defining the quad's position within the viewport.\n * @param {Material} [material] The {@link Material} defining the surface appearance of the viewport quad.\n *\n * @example\n * var viewportQuad = new Cesium.ViewportQuad(new Cesium.BoundingRectangle(0, 0, 80, 40));\n * viewportQuad.material.uniforms.color = new Cesium.Color(1.0, 0.0, 0.0, 1.0);\n */\nfunction ViewportQuad(rectangle, material) {\n  /**\n   * Determines if the viewport quad primitive will be shown.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.show = true;\n\n  if (!defined(rectangle)) {\n    rectangle = new BoundingRectangle();\n  }\n\n  /**\n   * The BoundingRectangle defining the quad's position within the viewport.\n   *\n   * @type {BoundingRectangle}\n   *\n   * @example\n   * viewportQuad.rectangle = new Cesium.BoundingRectangle(0, 0, 80, 40);\n   */\n  this.rectangle = BoundingRectangle.clone(rectangle);\n\n  if (!defined(material)) {\n    material = Material.fromType(Material.ColorType, {\n      color: new Color(1.0, 1.0, 1.0, 1.0),\n    });\n  }\n\n  /**\n   * The surface appearance of the viewport quad.  This can be one of several built-in {@link Material} objects or a custom material, scripted with\n   * {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}.\n   * <p>\n   * The default material is <code>Material.ColorType</code>.\n   * </p>\n   *\n   * @type Material\n   *\n   * @example\n   * // 1. Change the color of the default material to yellow\n   * viewportQuad.material.uniforms.color = new Cesium.Color(1.0, 1.0, 0.0, 1.0);\n   *\n   * // 2. Change material to horizontal stripes\n   * viewportQuad.material = Cesium.Material.fromType(Cesium.Material.StripeType);\n   *\n   * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n   */\n  this.material = material;\n  this._material = undefined;\n\n  this._overlayCommand = undefined;\n  this._rs = undefined;\n}\n\n/**\n * Called when {@link Viewer} or {@link CesiumWidget} render the scene to\n * get the draw commands needed to render this primitive.\n * <p>\n * Do not call this function directly.  This is documented just to\n * list the exceptions that may be propagated when the scene is rendered:\n * </p>\n *\n * @exception {DeveloperError} this.material must be defined.\n * @exception {DeveloperError} this.rectangle must be defined.\n */\nViewportQuad.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(this.material)) {\n    throw new DeveloperError(\"this.material must be defined.\");\n  }\n  if (!defined(this.rectangle)) {\n    throw new DeveloperError(\"this.rectangle must be defined.\");\n  }\n  //>>includeEnd('debug');\n\n  var rs = this._rs;\n  if (!defined(rs) || !BoundingRectangle.equals(rs.viewport, this.rectangle)) {\n    this._rs = RenderState.fromCache({\n      blending: BlendingState.ALPHA_BLEND,\n      viewport: this.rectangle,\n    });\n  }\n\n  var pass = frameState.passes;\n  if (pass.render) {\n    var context = frameState.context;\n\n    if (this._material !== this.material || !defined(this._overlayCommand)) {\n      // Recompile shader when material changes\n      this._material = this.material;\n\n      if (defined(this._overlayCommand)) {\n        this._overlayCommand.shaderProgram.destroy();\n      }\n\n      var fs = new ShaderSource({\n        sources: [this._material.shaderSource, ViewportQuadFS],\n      });\n      this._overlayCommand = context.createViewportQuadCommand(fs, {\n        renderState: this._rs,\n        uniformMap: this._material._uniforms,\n        owner: this,\n      });\n      this._overlayCommand.pass = Pass.OVERLAY;\n    }\n\n    this._material.update(context);\n\n    this._overlayCommand.uniformMap = this._material._uniforms;\n    frameState.commandList.push(this._overlayCommand);\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see ViewportQuad#destroy\n */\nViewportQuad.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * quad = quad && quad.destroy();\n *\n * @see ViewportQuad#isDestroyed\n */\nViewportQuad.prototype.destroy = function () {\n  if (defined(this._overlayCommand)) {\n    this._overlayCommand.shaderProgram =\n      this._overlayCommand.shaderProgram &&\n      this._overlayCommand.shaderProgram.destroy();\n  }\n  return destroyObject(this);\n};\nexport default ViewportQuad;\n"]},"metadata":{},"sourceType":"module"}