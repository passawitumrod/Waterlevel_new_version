{"ast":null,"code":"import Cartesian2 from \"./Cartesian2.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport WebMercatorProjection from \"./WebMercatorProjection.js\";\n/**\n * A tiling scheme for geometry referenced to a {@link WebMercatorProjection}, EPSG:3857.  This is\n * the tiling scheme used by Google Maps, Microsoft Bing Maps, and most of ESRI ArcGIS Online.\n *\n * @alias WebMercatorTilingScheme\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid whose surface is being tiled. Defaults to\n * the WGS84 ellipsoid.\n * @param {Number} [options.numberOfLevelZeroTilesX=1] The number of tiles in the X direction at level zero of\n *        the tile tree.\n * @param {Number} [options.numberOfLevelZeroTilesY=1] The number of tiles in the Y direction at level zero of\n *        the tile tree.\n * @param {Cartesian2} [options.rectangleSouthwestInMeters] The southwest corner of the rectangle covered by the\n *        tiling scheme, in meters.  If this parameter or rectangleNortheastInMeters is not specified, the entire\n *        globe is covered in the longitude direction and an equal distance is covered in the latitude\n *        direction, resulting in a square projection.\n * @param {Cartesian2} [options.rectangleNortheastInMeters] The northeast corner of the rectangle covered by the\n *        tiling scheme, in meters.  If this parameter or rectangleSouthwestInMeters is not specified, the entire\n *        globe is covered in the longitude direction and an equal distance is covered in the latitude\n *        direction, resulting in a square projection.\n */\n\nfunction WebMercatorTilingScheme(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n  this._numberOfLevelZeroTilesX = defaultValue(options.numberOfLevelZeroTilesX, 1);\n  this._numberOfLevelZeroTilesY = defaultValue(options.numberOfLevelZeroTilesY, 1);\n  this._projection = new WebMercatorProjection(this._ellipsoid);\n\n  if (defined(options.rectangleSouthwestInMeters) && defined(options.rectangleNortheastInMeters)) {\n    this._rectangleSouthwestInMeters = options.rectangleSouthwestInMeters;\n    this._rectangleNortheastInMeters = options.rectangleNortheastInMeters;\n  } else {\n    var semimajorAxisTimesPi = this._ellipsoid.maximumRadius * Math.PI;\n    this._rectangleSouthwestInMeters = new Cartesian2(-semimajorAxisTimesPi, -semimajorAxisTimesPi);\n    this._rectangleNortheastInMeters = new Cartesian2(semimajorAxisTimesPi, semimajorAxisTimesPi);\n  }\n\n  var southwest = this._projection.unproject(this._rectangleSouthwestInMeters);\n\n  var northeast = this._projection.unproject(this._rectangleNortheastInMeters);\n\n  this._rectangle = new Rectangle(southwest.longitude, southwest.latitude, northeast.longitude, northeast.latitude);\n}\n\nObject.defineProperties(WebMercatorTilingScheme.prototype, {\n  /**\n   * Gets the ellipsoid that is tiled by this tiling scheme.\n   * @memberof WebMercatorTilingScheme.prototype\n   * @type {Ellipsoid}\n   */\n  ellipsoid: {\n    get: function get() {\n      return this._ellipsoid;\n    }\n  },\n\n  /**\n   * Gets the rectangle, in radians, covered by this tiling scheme.\n   * @memberof WebMercatorTilingScheme.prototype\n   * @type {Rectangle}\n   */\n  rectangle: {\n    get: function get() {\n      return this._rectangle;\n    }\n  },\n\n  /**\n   * Gets the map projection used by this tiling scheme.\n   * @memberof WebMercatorTilingScheme.prototype\n   * @type {MapProjection}\n   */\n  projection: {\n    get: function get() {\n      return this._projection;\n    }\n  }\n});\n/**\n * Gets the total number of tiles in the X direction at a specified level-of-detail.\n *\n * @param {Number} level The level-of-detail.\n * @returns {Number} The number of tiles in the X direction at the given level.\n */\n\nWebMercatorTilingScheme.prototype.getNumberOfXTilesAtLevel = function (level) {\n  return this._numberOfLevelZeroTilesX << level;\n};\n/**\n * Gets the total number of tiles in the Y direction at a specified level-of-detail.\n *\n * @param {Number} level The level-of-detail.\n * @returns {Number} The number of tiles in the Y direction at the given level.\n */\n\n\nWebMercatorTilingScheme.prototype.getNumberOfYTilesAtLevel = function (level) {\n  return this._numberOfLevelZeroTilesY << level;\n};\n/**\n * Transforms a rectangle specified in geodetic radians to the native coordinate system\n * of this tiling scheme.\n *\n * @param {Rectangle} rectangle The rectangle to transform.\n * @param {Rectangle} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the native rectangle if 'result'\n *          is undefined.\n */\n\n\nWebMercatorTilingScheme.prototype.rectangleToNativeRectangle = function (rectangle, result) {\n  var projection = this._projection;\n  var southwest = projection.project(Rectangle.southwest(rectangle));\n  var northeast = projection.project(Rectangle.northeast(rectangle));\n\n  if (!defined(result)) {\n    return new Rectangle(southwest.x, southwest.y, northeast.x, northeast.y);\n  }\n\n  result.west = southwest.x;\n  result.south = southwest.y;\n  result.east = northeast.x;\n  result.north = northeast.y;\n  return result;\n};\n/**\n * Converts tile x, y coordinates and level to a rectangle expressed in the native coordinates\n * of the tiling scheme.\n *\n * @param {Number} x The integer x coordinate of the tile.\n * @param {Number} y The integer y coordinate of the tile.\n * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {Object} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the rectangle\n *          if 'result' is undefined.\n */\n\n\nWebMercatorTilingScheme.prototype.tileXYToNativeRectangle = function (x, y, level, result) {\n  var xTiles = this.getNumberOfXTilesAtLevel(level);\n  var yTiles = this.getNumberOfYTilesAtLevel(level);\n  var xTileWidth = (this._rectangleNortheastInMeters.x - this._rectangleSouthwestInMeters.x) / xTiles;\n  var west = this._rectangleSouthwestInMeters.x + x * xTileWidth;\n  var east = this._rectangleSouthwestInMeters.x + (x + 1) * xTileWidth;\n  var yTileHeight = (this._rectangleNortheastInMeters.y - this._rectangleSouthwestInMeters.y) / yTiles;\n  var north = this._rectangleNortheastInMeters.y - y * yTileHeight;\n  var south = this._rectangleNortheastInMeters.y - (y + 1) * yTileHeight;\n\n  if (!defined(result)) {\n    return new Rectangle(west, south, east, north);\n  }\n\n  result.west = west;\n  result.south = south;\n  result.east = east;\n  result.north = north;\n  return result;\n};\n/**\n * Converts tile x, y coordinates and level to a cartographic rectangle in radians.\n *\n * @param {Number} x The integer x coordinate of the tile.\n * @param {Number} y The integer y coordinate of the tile.\n * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {Object} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the rectangle\n *          if 'result' is undefined.\n */\n\n\nWebMercatorTilingScheme.prototype.tileXYToRectangle = function (x, y, level, result) {\n  var nativeRectangle = this.tileXYToNativeRectangle(x, y, level, result);\n  var projection = this._projection;\n  var southwest = projection.unproject(new Cartesian2(nativeRectangle.west, nativeRectangle.south));\n  var northeast = projection.unproject(new Cartesian2(nativeRectangle.east, nativeRectangle.north));\n  nativeRectangle.west = southwest.longitude;\n  nativeRectangle.south = southwest.latitude;\n  nativeRectangle.east = northeast.longitude;\n  nativeRectangle.north = northeast.latitude;\n  return nativeRectangle;\n};\n/**\n * Calculates the tile x, y coordinates of the tile containing\n * a given cartographic position.\n *\n * @param {Cartographic} position The position.\n * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {Cartesian2} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Cartesian2} The specified 'result', or a new object containing the tile x, y coordinates\n *          if 'result' is undefined.\n */\n\n\nWebMercatorTilingScheme.prototype.positionToTileXY = function (position, level, result) {\n  var rectangle = this._rectangle;\n\n  if (!Rectangle.contains(rectangle, position)) {\n    // outside the bounds of the tiling scheme\n    return undefined;\n  }\n\n  var xTiles = this.getNumberOfXTilesAtLevel(level);\n  var yTiles = this.getNumberOfYTilesAtLevel(level);\n  var overallWidth = this._rectangleNortheastInMeters.x - this._rectangleSouthwestInMeters.x;\n  var xTileWidth = overallWidth / xTiles;\n  var overallHeight = this._rectangleNortheastInMeters.y - this._rectangleSouthwestInMeters.y;\n  var yTileHeight = overallHeight / yTiles;\n  var projection = this._projection;\n  var webMercatorPosition = projection.project(position);\n  var distanceFromWest = webMercatorPosition.x - this._rectangleSouthwestInMeters.x;\n  var distanceFromNorth = this._rectangleNortheastInMeters.y - webMercatorPosition.y;\n  var xTileCoordinate = distanceFromWest / xTileWidth | 0;\n\n  if (xTileCoordinate >= xTiles) {\n    xTileCoordinate = xTiles - 1;\n  }\n\n  var yTileCoordinate = distanceFromNorth / yTileHeight | 0;\n\n  if (yTileCoordinate >= yTiles) {\n    yTileCoordinate = yTiles - 1;\n  }\n\n  if (!defined(result)) {\n    return new Cartesian2(xTileCoordinate, yTileCoordinate);\n  }\n\n  result.x = xTileCoordinate;\n  result.y = yTileCoordinate;\n  return result;\n};\n\nexport default WebMercatorTilingScheme;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/WebMercatorTilingScheme.js"],"names":["Cartesian2","defaultValue","defined","Ellipsoid","Rectangle","WebMercatorProjection","WebMercatorTilingScheme","options","EMPTY_OBJECT","_ellipsoid","ellipsoid","WGS84","_numberOfLevelZeroTilesX","numberOfLevelZeroTilesX","_numberOfLevelZeroTilesY","numberOfLevelZeroTilesY","_projection","rectangleSouthwestInMeters","rectangleNortheastInMeters","_rectangleSouthwestInMeters","_rectangleNortheastInMeters","semimajorAxisTimesPi","maximumRadius","Math","PI","southwest","unproject","northeast","_rectangle","longitude","latitude","Object","defineProperties","prototype","get","rectangle","projection","getNumberOfXTilesAtLevel","level","getNumberOfYTilesAtLevel","rectangleToNativeRectangle","result","project","x","y","west","south","east","north","tileXYToNativeRectangle","xTiles","yTiles","xTileWidth","yTileHeight","tileXYToRectangle","nativeRectangle","positionToTileXY","position","contains","undefined","overallWidth","overallHeight","webMercatorPosition","distanceFromWest","distanceFromNorth","xTileCoordinate","yTileCoordinate"],"mappings":"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","sourcesContent":["import Cartesian2 from \"./Cartesian2.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport WebMercatorProjection from \"./WebMercatorProjection.js\";\n\n/**\n * A tiling scheme for geometry referenced to a {@link WebMercatorProjection}, EPSG:3857.  This is\n * the tiling scheme used by Google Maps, Microsoft Bing Maps, and most of ESRI ArcGIS Online.\n *\n * @alias WebMercatorTilingScheme\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid whose surface is being tiled. Defaults to\n * the WGS84 ellipsoid.\n * @param {Number} [options.numberOfLevelZeroTilesX=1] The number of tiles in the X direction at level zero of\n *        the tile tree.\n * @param {Number} [options.numberOfLevelZeroTilesY=1] The number of tiles in the Y direction at level zero of\n *        the tile tree.\n * @param {Cartesian2} [options.rectangleSouthwestInMeters] The southwest corner of the rectangle covered by the\n *        tiling scheme, in meters.  If this parameter or rectangleNortheastInMeters is not specified, the entire\n *        globe is covered in the longitude direction and an equal distance is covered in the latitude\n *        direction, resulting in a square projection.\n * @param {Cartesian2} [options.rectangleNortheastInMeters] The northeast corner of the rectangle covered by the\n *        tiling scheme, in meters.  If this parameter or rectangleSouthwestInMeters is not specified, the entire\n *        globe is covered in the longitude direction and an equal distance is covered in the latitude\n *        direction, resulting in a square projection.\n */\nfunction WebMercatorTilingScheme(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n  this._numberOfLevelZeroTilesX = defaultValue(\n    options.numberOfLevelZeroTilesX,\n    1\n  );\n  this._numberOfLevelZeroTilesY = defaultValue(\n    options.numberOfLevelZeroTilesY,\n    1\n  );\n\n  this._projection = new WebMercatorProjection(this._ellipsoid);\n\n  if (\n    defined(options.rectangleSouthwestInMeters) &&\n    defined(options.rectangleNortheastInMeters)\n  ) {\n    this._rectangleSouthwestInMeters = options.rectangleSouthwestInMeters;\n    this._rectangleNortheastInMeters = options.rectangleNortheastInMeters;\n  } else {\n    var semimajorAxisTimesPi = this._ellipsoid.maximumRadius * Math.PI;\n    this._rectangleSouthwestInMeters = new Cartesian2(\n      -semimajorAxisTimesPi,\n      -semimajorAxisTimesPi\n    );\n    this._rectangleNortheastInMeters = new Cartesian2(\n      semimajorAxisTimesPi,\n      semimajorAxisTimesPi\n    );\n  }\n\n  var southwest = this._projection.unproject(this._rectangleSouthwestInMeters);\n  var northeast = this._projection.unproject(this._rectangleNortheastInMeters);\n  this._rectangle = new Rectangle(\n    southwest.longitude,\n    southwest.latitude,\n    northeast.longitude,\n    northeast.latitude\n  );\n}\n\nObject.defineProperties(WebMercatorTilingScheme.prototype, {\n  /**\n   * Gets the ellipsoid that is tiled by this tiling scheme.\n   * @memberof WebMercatorTilingScheme.prototype\n   * @type {Ellipsoid}\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, covered by this tiling scheme.\n   * @memberof WebMercatorTilingScheme.prototype\n   * @type {Rectangle}\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    },\n  },\n\n  /**\n   * Gets the map projection used by this tiling scheme.\n   * @memberof WebMercatorTilingScheme.prototype\n   * @type {MapProjection}\n   */\n  projection: {\n    get: function () {\n      return this._projection;\n    },\n  },\n});\n\n/**\n * Gets the total number of tiles in the X direction at a specified level-of-detail.\n *\n * @param {Number} level The level-of-detail.\n * @returns {Number} The number of tiles in the X direction at the given level.\n */\nWebMercatorTilingScheme.prototype.getNumberOfXTilesAtLevel = function (level) {\n  return this._numberOfLevelZeroTilesX << level;\n};\n\n/**\n * Gets the total number of tiles in the Y direction at a specified level-of-detail.\n *\n * @param {Number} level The level-of-detail.\n * @returns {Number} The number of tiles in the Y direction at the given level.\n */\nWebMercatorTilingScheme.prototype.getNumberOfYTilesAtLevel = function (level) {\n  return this._numberOfLevelZeroTilesY << level;\n};\n\n/**\n * Transforms a rectangle specified in geodetic radians to the native coordinate system\n * of this tiling scheme.\n *\n * @param {Rectangle} rectangle The rectangle to transform.\n * @param {Rectangle} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the native rectangle if 'result'\n *          is undefined.\n */\nWebMercatorTilingScheme.prototype.rectangleToNativeRectangle = function (\n  rectangle,\n  result\n) {\n  var projection = this._projection;\n  var southwest = projection.project(Rectangle.southwest(rectangle));\n  var northeast = projection.project(Rectangle.northeast(rectangle));\n\n  if (!defined(result)) {\n    return new Rectangle(southwest.x, southwest.y, northeast.x, northeast.y);\n  }\n\n  result.west = southwest.x;\n  result.south = southwest.y;\n  result.east = northeast.x;\n  result.north = northeast.y;\n  return result;\n};\n\n/**\n * Converts tile x, y coordinates and level to a rectangle expressed in the native coordinates\n * of the tiling scheme.\n *\n * @param {Number} x The integer x coordinate of the tile.\n * @param {Number} y The integer y coordinate of the tile.\n * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {Object} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the rectangle\n *          if 'result' is undefined.\n */\nWebMercatorTilingScheme.prototype.tileXYToNativeRectangle = function (\n  x,\n  y,\n  level,\n  result\n) {\n  var xTiles = this.getNumberOfXTilesAtLevel(level);\n  var yTiles = this.getNumberOfYTilesAtLevel(level);\n\n  var xTileWidth =\n    (this._rectangleNortheastInMeters.x - this._rectangleSouthwestInMeters.x) /\n    xTiles;\n  var west = this._rectangleSouthwestInMeters.x + x * xTileWidth;\n  var east = this._rectangleSouthwestInMeters.x + (x + 1) * xTileWidth;\n\n  var yTileHeight =\n    (this._rectangleNortheastInMeters.y - this._rectangleSouthwestInMeters.y) /\n    yTiles;\n  var north = this._rectangleNortheastInMeters.y - y * yTileHeight;\n  var south = this._rectangleNortheastInMeters.y - (y + 1) * yTileHeight;\n\n  if (!defined(result)) {\n    return new Rectangle(west, south, east, north);\n  }\n\n  result.west = west;\n  result.south = south;\n  result.east = east;\n  result.north = north;\n  return result;\n};\n\n/**\n * Converts tile x, y coordinates and level to a cartographic rectangle in radians.\n *\n * @param {Number} x The integer x coordinate of the tile.\n * @param {Number} y The integer y coordinate of the tile.\n * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {Object} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the rectangle\n *          if 'result' is undefined.\n */\nWebMercatorTilingScheme.prototype.tileXYToRectangle = function (\n  x,\n  y,\n  level,\n  result\n) {\n  var nativeRectangle = this.tileXYToNativeRectangle(x, y, level, result);\n\n  var projection = this._projection;\n  var southwest = projection.unproject(\n    new Cartesian2(nativeRectangle.west, nativeRectangle.south)\n  );\n  var northeast = projection.unproject(\n    new Cartesian2(nativeRectangle.east, nativeRectangle.north)\n  );\n\n  nativeRectangle.west = southwest.longitude;\n  nativeRectangle.south = southwest.latitude;\n  nativeRectangle.east = northeast.longitude;\n  nativeRectangle.north = northeast.latitude;\n  return nativeRectangle;\n};\n\n/**\n * Calculates the tile x, y coordinates of the tile containing\n * a given cartographic position.\n *\n * @param {Cartographic} position The position.\n * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {Cartesian2} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Cartesian2} The specified 'result', or a new object containing the tile x, y coordinates\n *          if 'result' is undefined.\n */\nWebMercatorTilingScheme.prototype.positionToTileXY = function (\n  position,\n  level,\n  result\n) {\n  var rectangle = this._rectangle;\n  if (!Rectangle.contains(rectangle, position)) {\n    // outside the bounds of the tiling scheme\n    return undefined;\n  }\n\n  var xTiles = this.getNumberOfXTilesAtLevel(level);\n  var yTiles = this.getNumberOfYTilesAtLevel(level);\n\n  var overallWidth =\n    this._rectangleNortheastInMeters.x - this._rectangleSouthwestInMeters.x;\n  var xTileWidth = overallWidth / xTiles;\n  var overallHeight =\n    this._rectangleNortheastInMeters.y - this._rectangleSouthwestInMeters.y;\n  var yTileHeight = overallHeight / yTiles;\n\n  var projection = this._projection;\n\n  var webMercatorPosition = projection.project(position);\n  var distanceFromWest =\n    webMercatorPosition.x - this._rectangleSouthwestInMeters.x;\n  var distanceFromNorth =\n    this._rectangleNortheastInMeters.y - webMercatorPosition.y;\n\n  var xTileCoordinate = (distanceFromWest / xTileWidth) | 0;\n  if (xTileCoordinate >= xTiles) {\n    xTileCoordinate = xTiles - 1;\n  }\n  var yTileCoordinate = (distanceFromNorth / yTileHeight) | 0;\n  if (yTileCoordinate >= yTiles) {\n    yTileCoordinate = yTiles - 1;\n  }\n\n  if (!defined(result)) {\n    return new Cartesian2(xTileCoordinate, yTileCoordinate);\n  }\n\n  result.x = xTileCoordinate;\n  result.y = yTileCoordinate;\n  return result;\n};\nexport default WebMercatorTilingScheme;\n"]},"metadata":{},"sourceType":"module"}