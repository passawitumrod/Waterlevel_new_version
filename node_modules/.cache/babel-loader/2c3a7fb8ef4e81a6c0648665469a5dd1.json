{"ast":null,"code":"import defined from \"../../Core/defined.js\";\nimport destroyObject from \"../../Core/destroyObject.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport FeatureDetection from \"../../Core/FeatureDetection.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nimport getElement from \"../getElement.js\";\nimport ProjectionPickerViewModel from \"./ProjectionPickerViewModel.js\";\nvar perspectivePath = \"M 28.15625,10.4375 9.125,13.21875 13.75,43.25 41.75,55.09375 50.8125,37 54.5,11.9375 z m 0.125,3 19.976451,0.394265 L 43.03125,16.875 22.6875,14.28125 z M 50.971746,15.705477 47.90625,36.03125 42.53125,46 44.84375,19.3125 z M 12.625,16.03125 l 29.15625,3.6875 -2.65625,31 L 16.4375,41.125 z\";\nvar orthographicPath = \"m 31.560594,6.5254438 -20.75,12.4687502 0.1875,24.5625 22.28125,11.8125 19.5,-12 0.65625,-0.375 0,-0.75 0.0312,-23.21875 z m 0.0625,3.125 16.65625,9.5000002 -16.125,10.28125 -17.34375,-9.71875 z m 18.96875,11.1875002 0.15625,20.65625 -17.46875,10.59375 0.15625,-20.28125 z m -37.0625,1.25 17.21875,9.625 -0.15625,19.21875 -16.9375,-9 z\";\n/**\n * The ProjectionPicker is a single button widget for switching between perspective and orthographic projections.\n *\n * @alias ProjectionPicker\n * @constructor\n *\n * @param {Element|String} container The DOM element or ID that will contain the widget.\n * @param {Scene} scene The Scene instance to use.\n *\n * @exception {DeveloperError} Element with id \"container\" does not exist in the document.\n *\n * @example\n * // In HTML head, include a link to the ProjectionPicker.css stylesheet,\n * // and in the body, include: <div id=\"projectionPickerContainer\"></div>\n * // Note: This code assumes you already have a Scene instance.\n *\n * var projectionPicker = new Cesium.ProjectionPicker('projectionPickerContainer', scene);\n */\n\nfunction ProjectionPicker(container, scene) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(container)) {\n    throw new DeveloperError(\"container is required.\");\n  }\n\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  } //>>includeEnd('debug');\n\n\n  container = getElement(container);\n  var viewModel = new ProjectionPickerViewModel(scene);\n  viewModel._perspectivePath = perspectivePath;\n  viewModel._orthographicPath = orthographicPath;\n  var wrapper = document.createElement(\"span\");\n  wrapper.className = \"cesium-projectionPicker-wrapper cesium-toolbar-button\";\n  container.appendChild(wrapper);\n  var button = document.createElement(\"button\");\n  button.type = \"button\";\n  button.className = \"cesium-button cesium-toolbar-button\";\n  button.setAttribute(\"data-bind\", '\\\ncss: { \"cesium-projectionPicker-buttonPerspective\": !_orthographic,\\\n       \"cesium-projectionPicker-buttonOrthographic\": _orthographic,\\\n       \"cesium-button-disabled\" : sceneMode === _sceneMode.SCENE2D || _flightInProgress, \\\n       \"cesium-projectionPicker-selected\": dropDownVisible },\\\nattr: { title: selectedTooltip },\\\nclick: toggleDropDown');\n  button.innerHTML = '\\\n<!-- ko cesiumSvgPath: { path: _perspectivePath, width: 64, height: 64, css: \"cesium-projectionPicker-iconPerspective\" } --><!-- /ko -->\\\n<!-- ko cesiumSvgPath: { path: _orthographicPath, width: 64, height: 64, css: \"cesium-projectionPicker-iconOrthographic\" } --><!-- /ko -->';\n  wrapper.appendChild(button);\n  var perspectiveButton = document.createElement(\"button\");\n  perspectiveButton.type = \"button\";\n  perspectiveButton.className = \"cesium-button cesium-toolbar-button cesium-projectionPicker-dropDown-icon\";\n  perspectiveButton.setAttribute(\"data-bind\", '\\\ncss: { \"cesium-projectionPicker-visible\" : (dropDownVisible && _orthographic),\\\n       \"cesium-projectionPicker-none\" : !_orthographic,\\\n       \"cesium-projectionPicker-hidden\" : !dropDownVisible },\\\nattr: { title: tooltipPerspective },\\\nclick: switchToPerspective,\\\ncesiumSvgPath: { path: _perspectivePath, width: 64, height: 64 }');\n  wrapper.appendChild(perspectiveButton);\n  var orthographicButton = document.createElement(\"button\");\n  orthographicButton.type = \"button\";\n  orthographicButton.className = \"cesium-button cesium-toolbar-button cesium-projectionPicker-dropDown-icon\";\n  orthographicButton.setAttribute(\"data-bind\", '\\\ncss: { \"cesium-projectionPicker-visible\" : (dropDownVisible && !_orthographic),\\\n       \"cesium-projectionPicker-none\" : _orthographic,\\\n       \"cesium-projectionPicker-hidden\" : !dropDownVisible},\\\nattr: { title: tooltipOrthographic },\\\nclick: switchToOrthographic,\\\ncesiumSvgPath: { path: _orthographicPath, width: 64, height: 64 }');\n  wrapper.appendChild(orthographicButton);\n  knockout.applyBindings(viewModel, wrapper);\n  this._viewModel = viewModel;\n  this._container = container;\n  this._wrapper = wrapper;\n\n  this._closeDropDown = function (e) {\n    if (!wrapper.contains(e.target)) {\n      viewModel.dropDownVisible = false;\n    }\n  };\n\n  if (FeatureDetection.supportsPointerEvents()) {\n    document.addEventListener(\"pointerdown\", this._closeDropDown, true);\n  } else {\n    document.addEventListener(\"mousedown\", this._closeDropDown, true);\n    document.addEventListener(\"touchstart\", this._closeDropDown, true);\n  }\n}\n\nObject.defineProperties(ProjectionPicker.prototype, {\n  /**\n   * Gets the parent container.\n   * @memberof ProjectionPicker.prototype\n   *\n   * @type {Element}\n   */\n  container: {\n    get: function () {\n      return this._container;\n    }\n  },\n\n  /**\n   * Gets the view model.\n   * @memberof ProjectionPicker.prototype\n   *\n   * @type {ProjectionPickerViewModel}\n   */\n  viewModel: {\n    get: function () {\n      return this._viewModel;\n    }\n  }\n});\n/**\n * @returns {Boolean} true if the object has been destroyed, false otherwise.\n */\n\nProjectionPicker.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys the widget.  Should be called if permanently\n * removing the widget from layout.\n */\n\n\nProjectionPicker.prototype.destroy = function () {\n  this._viewModel.destroy();\n\n  if (FeatureDetection.supportsPointerEvents()) {\n    document.removeEventListener(\"pointerdown\", this._closeDropDown, true);\n  } else {\n    document.removeEventListener(\"mousedown\", this._closeDropDown, true);\n    document.removeEventListener(\"touchstart\", this._closeDropDown, true);\n  }\n\n  knockout.cleanNode(this._wrapper);\n\n  this._container.removeChild(this._wrapper);\n\n  return destroyObject(this);\n};\n\nexport default ProjectionPicker;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Widgets/ProjectionPicker/ProjectionPicker.js"],"names":["defined","destroyObject","DeveloperError","FeatureDetection","knockout","getElement","ProjectionPickerViewModel","perspectivePath","orthographicPath","ProjectionPicker","container","scene","viewModel","_perspectivePath","_orthographicPath","wrapper","document","createElement","className","appendChild","button","type","setAttribute","innerHTML","perspectiveButton","orthographicButton","applyBindings","_viewModel","_container","_wrapper","_closeDropDown","e","contains","target","dropDownVisible","supportsPointerEvents","addEventListener","Object","defineProperties","prototype","get","isDestroyed","destroy","removeEventListener","cleanNode","removeChild"],"mappings":"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","sourcesContent":["import defined from \"../../Core/defined.js\";\nimport destroyObject from \"../../Core/destroyObject.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport FeatureDetection from \"../../Core/FeatureDetection.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nimport getElement from \"../getElement.js\";\nimport ProjectionPickerViewModel from \"./ProjectionPickerViewModel.js\";\n\nvar perspectivePath =\n  \"M 28.15625,10.4375 9.125,13.21875 13.75,43.25 41.75,55.09375 50.8125,37 54.5,11.9375 z m 0.125,3 19.976451,0.394265 L 43.03125,16.875 22.6875,14.28125 z M 50.971746,15.705477 47.90625,36.03125 42.53125,46 44.84375,19.3125 z M 12.625,16.03125 l 29.15625,3.6875 -2.65625,31 L 16.4375,41.125 z\";\nvar orthographicPath =\n  \"m 31.560594,6.5254438 -20.75,12.4687502 0.1875,24.5625 22.28125,11.8125 19.5,-12 0.65625,-0.375 0,-0.75 0.0312,-23.21875 z m 0.0625,3.125 16.65625,9.5000002 -16.125,10.28125 -17.34375,-9.71875 z m 18.96875,11.1875002 0.15625,20.65625 -17.46875,10.59375 0.15625,-20.28125 z m -37.0625,1.25 17.21875,9.625 -0.15625,19.21875 -16.9375,-9 z\";\n\n/**\n * The ProjectionPicker is a single button widget for switching between perspective and orthographic projections.\n *\n * @alias ProjectionPicker\n * @constructor\n *\n * @param {Element|String} container The DOM element or ID that will contain the widget.\n * @param {Scene} scene The Scene instance to use.\n *\n * @exception {DeveloperError} Element with id \"container\" does not exist in the document.\n *\n * @example\n * // In HTML head, include a link to the ProjectionPicker.css stylesheet,\n * // and in the body, include: <div id=\"projectionPickerContainer\"></div>\n * // Note: This code assumes you already have a Scene instance.\n *\n * var projectionPicker = new Cesium.ProjectionPicker('projectionPickerContainer', scene);\n */\nfunction ProjectionPicker(container, scene) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(container)) {\n    throw new DeveloperError(\"container is required.\");\n  }\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  container = getElement(container);\n\n  var viewModel = new ProjectionPickerViewModel(scene);\n\n  viewModel._perspectivePath = perspectivePath;\n  viewModel._orthographicPath = orthographicPath;\n\n  var wrapper = document.createElement(\"span\");\n  wrapper.className = \"cesium-projectionPicker-wrapper cesium-toolbar-button\";\n  container.appendChild(wrapper);\n\n  var button = document.createElement(\"button\");\n  button.type = \"button\";\n  button.className = \"cesium-button cesium-toolbar-button\";\n  button.setAttribute(\n    \"data-bind\",\n    '\\\ncss: { \"cesium-projectionPicker-buttonPerspective\": !_orthographic,\\\n       \"cesium-projectionPicker-buttonOrthographic\": _orthographic,\\\n       \"cesium-button-disabled\" : sceneMode === _sceneMode.SCENE2D || _flightInProgress, \\\n       \"cesium-projectionPicker-selected\": dropDownVisible },\\\nattr: { title: selectedTooltip },\\\nclick: toggleDropDown'\n  );\n  button.innerHTML =\n    '\\\n<!-- ko cesiumSvgPath: { path: _perspectivePath, width: 64, height: 64, css: \"cesium-projectionPicker-iconPerspective\" } --><!-- /ko -->\\\n<!-- ko cesiumSvgPath: { path: _orthographicPath, width: 64, height: 64, css: \"cesium-projectionPicker-iconOrthographic\" } --><!-- /ko -->';\n  wrapper.appendChild(button);\n\n  var perspectiveButton = document.createElement(\"button\");\n  perspectiveButton.type = \"button\";\n  perspectiveButton.className =\n    \"cesium-button cesium-toolbar-button cesium-projectionPicker-dropDown-icon\";\n  perspectiveButton.setAttribute(\n    \"data-bind\",\n    '\\\ncss: { \"cesium-projectionPicker-visible\" : (dropDownVisible && _orthographic),\\\n       \"cesium-projectionPicker-none\" : !_orthographic,\\\n       \"cesium-projectionPicker-hidden\" : !dropDownVisible },\\\nattr: { title: tooltipPerspective },\\\nclick: switchToPerspective,\\\ncesiumSvgPath: { path: _perspectivePath, width: 64, height: 64 }'\n  );\n  wrapper.appendChild(perspectiveButton);\n\n  var orthographicButton = document.createElement(\"button\");\n  orthographicButton.type = \"button\";\n  orthographicButton.className =\n    \"cesium-button cesium-toolbar-button cesium-projectionPicker-dropDown-icon\";\n  orthographicButton.setAttribute(\n    \"data-bind\",\n    '\\\ncss: { \"cesium-projectionPicker-visible\" : (dropDownVisible && !_orthographic),\\\n       \"cesium-projectionPicker-none\" : _orthographic,\\\n       \"cesium-projectionPicker-hidden\" : !dropDownVisible},\\\nattr: { title: tooltipOrthographic },\\\nclick: switchToOrthographic,\\\ncesiumSvgPath: { path: _orthographicPath, width: 64, height: 64 }'\n  );\n  wrapper.appendChild(orthographicButton);\n\n  knockout.applyBindings(viewModel, wrapper);\n\n  this._viewModel = viewModel;\n  this._container = container;\n  this._wrapper = wrapper;\n\n  this._closeDropDown = function (e) {\n    if (!wrapper.contains(e.target)) {\n      viewModel.dropDownVisible = false;\n    }\n  };\n  if (FeatureDetection.supportsPointerEvents()) {\n    document.addEventListener(\"pointerdown\", this._closeDropDown, true);\n  } else {\n    document.addEventListener(\"mousedown\", this._closeDropDown, true);\n    document.addEventListener(\"touchstart\", this._closeDropDown, true);\n  }\n}\n\nObject.defineProperties(ProjectionPicker.prototype, {\n  /**\n   * Gets the parent container.\n   * @memberof ProjectionPicker.prototype\n   *\n   * @type {Element}\n   */\n  container: {\n    get: function () {\n      return this._container;\n    },\n  },\n\n  /**\n   * Gets the view model.\n   * @memberof ProjectionPicker.prototype\n   *\n   * @type {ProjectionPickerViewModel}\n   */\n  viewModel: {\n    get: function () {\n      return this._viewModel;\n    },\n  },\n});\n\n/**\n * @returns {Boolean} true if the object has been destroyed, false otherwise.\n */\nProjectionPicker.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the widget.  Should be called if permanently\n * removing the widget from layout.\n */\nProjectionPicker.prototype.destroy = function () {\n  this._viewModel.destroy();\n\n  if (FeatureDetection.supportsPointerEvents()) {\n    document.removeEventListener(\"pointerdown\", this._closeDropDown, true);\n  } else {\n    document.removeEventListener(\"mousedown\", this._closeDropDown, true);\n    document.removeEventListener(\"touchstart\", this._closeDropDown, true);\n  }\n\n  knockout.cleanNode(this._wrapper);\n  this._container.removeChild(this._wrapper);\n\n  return destroyObject(this);\n};\nexport default ProjectionPicker;\n"]},"metadata":{},"sourceType":"module"}