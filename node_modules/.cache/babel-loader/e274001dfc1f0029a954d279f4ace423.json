{"ast":null,"code":"import arrayRemoveDuplicates from \"../Core/arrayRemoveDuplicates.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport PolylinePipeline from \"../Core/PolylinePipeline.js\";\nimport Material from \"./Material.js\";\n/**\n * A renderable polyline. Create this by calling {@link PolylineCollection#add}\n *\n * @alias Polyline\n * @internalConstructor\n * @class\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.show=true] <code>true</code> if this polyline will be shown; otherwise, <code>false</code>.\n * @param {Number} [options.width=1.0] The width of the polyline in pixels.\n * @param {Boolean} [options.loop=false] Whether a line segment will be added between the last and first line positions to make this line a loop.\n * @param {Material} [options.material=Material.ColorType] The material.\n * @param {Cartesian3[]} [options.positions] The positions.\n * @param {Object} [options.id] The user-defined object to be returned when this polyline is picked.\n * @param {DistanceDisplayCondition} [options.distanceDisplayCondition] The condition specifying at what distance from the camera that this polyline will be displayed.\n * @param {PolylineCollection} polylineCollection The renderable polyline collection.\n *\n * @see PolylineCollection\n *\n */\n\nfunction Polyline(options, polylineCollection) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._show = defaultValue(options.show, true);\n  this._width = defaultValue(options.width, 1.0);\n  this._loop = defaultValue(options.loop, false);\n  this._distanceDisplayCondition = options.distanceDisplayCondition;\n  this._material = options.material;\n\n  if (!defined(this._material)) {\n    this._material = Material.fromType(Material.ColorType, {\n      color: new Color(1.0, 1.0, 1.0, 1.0)\n    });\n  }\n\n  var positions = options.positions;\n\n  if (!defined(positions)) {\n    positions = [];\n  }\n\n  this._positions = positions;\n  this._actualPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\n\n  if (this._loop && this._actualPositions.length > 2) {\n    if (this._actualPositions === this._positions) {\n      this._actualPositions = positions.slice();\n    }\n\n    this._actualPositions.push(Cartesian3.clone(this._actualPositions[0]));\n  }\n\n  this._length = this._actualPositions.length;\n  this._id = options.id;\n  var modelMatrix;\n\n  if (defined(polylineCollection)) {\n    modelMatrix = Matrix4.clone(polylineCollection.modelMatrix);\n  }\n\n  this._modelMatrix = modelMatrix;\n  this._segments = PolylinePipeline.wrapLongitude(this._actualPositions, modelMatrix);\n  this._actualLength = undefined; // eslint-disable-next-line no-use-before-define\n\n  this._propertiesChanged = new Uint32Array(NUMBER_OF_PROPERTIES);\n  this._polylineCollection = polylineCollection;\n  this._dirty = false;\n  this._pickId = undefined;\n  this._boundingVolume = BoundingSphere.fromPoints(this._actualPositions);\n  this._boundingVolumeWC = BoundingSphere.transform(this._boundingVolume, this._modelMatrix);\n  this._boundingVolume2D = new BoundingSphere(); // modified in PolylineCollection\n}\n\nvar POSITION_INDEX = Polyline.POSITION_INDEX = 0;\nvar SHOW_INDEX = Polyline.SHOW_INDEX = 1;\nvar WIDTH_INDEX = Polyline.WIDTH_INDEX = 2;\nvar MATERIAL_INDEX = Polyline.MATERIAL_INDEX = 3;\nvar POSITION_SIZE_INDEX = Polyline.POSITION_SIZE_INDEX = 4;\nvar DISTANCE_DISPLAY_CONDITION = Polyline.DISTANCE_DISPLAY_CONDITION = 5;\nvar NUMBER_OF_PROPERTIES = Polyline.NUMBER_OF_PROPERTIES = 6;\n\nfunction makeDirty(polyline, propertyChanged) {\n  ++polyline._propertiesChanged[propertyChanged];\n  var polylineCollection = polyline._polylineCollection;\n\n  if (defined(polylineCollection)) {\n    polylineCollection._updatePolyline(polyline, propertyChanged);\n\n    polyline._dirty = true;\n  }\n}\n\nObject.defineProperties(Polyline.prototype, {\n  /**\n   * Determines if this polyline will be shown.  Use this to hide or show a polyline, instead\n   * of removing it and re-adding it to the collection.\n   * @memberof Polyline.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      if (value !== this._show) {\n        this._show = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the positions of the polyline.\n   * @memberof Polyline.prototype\n   * @type {Cartesian3[]}\n   * @example\n   * polyline.positions = Cesium.Cartesian3.fromDegreesArray([\n   *     0.0, 0.0,\n   *     10.0, 0.0,\n   *     0.0, 20.0\n   * ]);\n   */\n  positions: {\n    get: function () {\n      return this._positions;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      var positions = arrayRemoveDuplicates(value, Cartesian3.equalsEpsilon);\n\n      if (this._loop && positions.length > 2) {\n        if (positions === value) {\n          positions = value.slice();\n        }\n\n        positions.push(Cartesian3.clone(positions[0]));\n      }\n\n      if (this._actualPositions.length !== positions.length || this._actualPositions.length !== this._length) {\n        makeDirty(this, POSITION_SIZE_INDEX);\n      }\n\n      this._positions = value;\n      this._actualPositions = positions;\n      this._length = positions.length;\n      this._boundingVolume = BoundingSphere.fromPoints(this._actualPositions, this._boundingVolume);\n      this._boundingVolumeWC = BoundingSphere.transform(this._boundingVolume, this._modelMatrix, this._boundingVolumeWC);\n      makeDirty(this, POSITION_INDEX);\n      this.update();\n    }\n  },\n\n  /**\n   * Gets or sets the surface appearance of the polyline.  This can be one of several built-in {@link Material} objects or a custom material, scripted with\n   * {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}.\n   * @memberof Polyline.prototype\n   * @type {Material}\n   */\n  material: {\n    get: function () {\n      return this._material;\n    },\n    set: function (material) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(material)) {\n        throw new DeveloperError(\"material is required.\");\n      } //>>includeEnd('debug');\n\n\n      if (this._material !== material) {\n        this._material = material;\n        makeDirty(this, MATERIAL_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the width of the polyline.\n   * @memberof Polyline.prototype\n   * @type {Number}\n   */\n  width: {\n    get: function () {\n      return this._width;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      var width = this._width;\n\n      if (value !== width) {\n        this._width = value;\n        makeDirty(this, WIDTH_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets whether a line segment will be added between the first and last polyline positions.\n   * @memberof Polyline.prototype\n   * @type {Boolean}\n   */\n  loop: {\n    get: function () {\n      return this._loop;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      if (value !== this._loop) {\n        var positions = this._actualPositions;\n\n        if (value) {\n          if (positions.length > 2 && !Cartesian3.equals(positions[0], positions[positions.length - 1])) {\n            if (positions.length === this._positions.length) {\n              this._actualPositions = positions = this._positions.slice();\n            }\n\n            positions.push(Cartesian3.clone(positions[0]));\n          }\n        } else if (positions.length > 2 && Cartesian3.equals(positions[0], positions[positions.length - 1])) {\n          if (positions.length - 1 === this._positions.length) {\n            this._actualPositions = this._positions;\n          } else {\n            positions.pop();\n          }\n        }\n\n        this._loop = value;\n        makeDirty(this, POSITION_SIZE_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the user-defined value returned when the polyline is picked.\n   * @memberof Polyline.prototype\n   * @type {*}\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n    set: function (value) {\n      this._id = value;\n\n      if (defined(this._pickId)) {\n        this._pickId.object.id = value;\n      }\n    }\n  },\n\n  /**\n   * @private\n   */\n  pickId: {\n    get: function () {\n      return this._pickId;\n    }\n  },\n\n  /**\n   * Gets the destruction status of this polyline\n   * @memberof Polyline.prototype\n   * @type {Boolean}\n   * @default false\n   * @private\n   */\n  isDestroyed: {\n    get: function () {\n      return !defined(this._polylineCollection);\n    }\n  },\n\n  /**\n   * Gets or sets the condition specifying at what distance from the camera that this polyline will be displayed.\n   * @memberof Polyline.prototype\n   * @type {DistanceDisplayCondition}\n   * @default undefined\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._distanceDisplayCondition;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\"far distance must be greater than near distance.\");\n      } //>>includeEnd('debug');\n\n\n      if (!DistanceDisplayCondition.equals(value, this._distanceDisplayCondition)) {\n        this._distanceDisplayCondition = DistanceDisplayCondition.clone(value, this._distanceDisplayCondition);\n        makeDirty(this, DISTANCE_DISPLAY_CONDITION);\n      }\n    }\n  }\n});\n/**\n * @private\n */\n\nPolyline.prototype.update = function () {\n  var modelMatrix = Matrix4.IDENTITY;\n\n  if (defined(this._polylineCollection)) {\n    modelMatrix = this._polylineCollection.modelMatrix;\n  }\n\n  var segmentPositionsLength = this._segments.positions.length;\n  var segmentLengths = this._segments.lengths;\n  var positionsChanged = this._propertiesChanged[POSITION_INDEX] > 0 || this._propertiesChanged[POSITION_SIZE_INDEX] > 0;\n\n  if (!Matrix4.equals(modelMatrix, this._modelMatrix) || positionsChanged) {\n    this._segments = PolylinePipeline.wrapLongitude(this._actualPositions, modelMatrix);\n    this._boundingVolumeWC = BoundingSphere.transform(this._boundingVolume, modelMatrix, this._boundingVolumeWC);\n  }\n\n  this._modelMatrix = Matrix4.clone(modelMatrix, this._modelMatrix);\n\n  if (this._segments.positions.length !== segmentPositionsLength) {\n    // number of positions changed\n    makeDirty(this, POSITION_SIZE_INDEX);\n  } else {\n    var length = segmentLengths.length;\n\n    for (var i = 0; i < length; ++i) {\n      if (segmentLengths[i] !== this._segments.lengths[i]) {\n        // indices changed\n        makeDirty(this, POSITION_SIZE_INDEX);\n        break;\n      }\n    }\n  }\n};\n/**\n * @private\n */\n\n\nPolyline.prototype.getPickId = function (context) {\n  if (!defined(this._pickId)) {\n    this._pickId = context.createPickId({\n      primitive: this,\n      collection: this._polylineCollection,\n      id: this._id\n    });\n  }\n\n  return this._pickId;\n};\n\nPolyline.prototype._clean = function () {\n  this._dirty = false;\n  var properties = this._propertiesChanged;\n\n  for (var k = 0; k < NUMBER_OF_PROPERTIES - 1; ++k) {\n    properties[k] = 0;\n  }\n};\n\nPolyline.prototype._destroy = function () {\n  this._pickId = this._pickId && this._pickId.destroy();\n  this._material = this._material && this._material.destroy();\n  this._polylineCollection = undefined;\n};\n\nexport default Polyline;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/Polyline.js"],"names":["arrayRemoveDuplicates","BoundingSphere","Cartesian3","Color","defaultValue","defined","DeveloperError","DistanceDisplayCondition","Matrix4","PolylinePipeline","Material","Polyline","options","polylineCollection","EMPTY_OBJECT","_show","show","_width","width","_loop","loop","_distanceDisplayCondition","distanceDisplayCondition","_material","material","fromType","ColorType","color","positions","_positions","_actualPositions","equalsEpsilon","length","slice","push","clone","_length","_id","id","modelMatrix","_modelMatrix","_segments","wrapLongitude","_actualLength","undefined","_propertiesChanged","Uint32Array","NUMBER_OF_PROPERTIES","_polylineCollection","_dirty","_pickId","_boundingVolume","fromPoints","_boundingVolumeWC","transform","_boundingVolume2D","POSITION_INDEX","SHOW_INDEX","WIDTH_INDEX","MATERIAL_INDEX","POSITION_SIZE_INDEX","DISTANCE_DISPLAY_CONDITION","makeDirty","polyline","propertyChanged","_updatePolyline","Object","defineProperties","prototype","get","set","value","update","equals","pop","object","pickId","isDestroyed","far","near","IDENTITY","segmentPositionsLength","segmentLengths","lengths","positionsChanged","i","getPickId","context","createPickId","primitive","collection","_clean","properties","k","_destroy","destroy"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,kCAAlC;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,wBAAP,MAAqC,qCAArC;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA;;;;;;;;;;;;;;;;;;;;;AAoBA,SAASC,QAAT,CAAkBC,OAAlB,EAA2BC,kBAA3B,EAA+C;AAC7CD,EAAAA,OAAO,GAAGR,YAAY,CAACQ,OAAD,EAAUR,YAAY,CAACU,YAAvB,CAAtB;AAEA,OAAKC,KAAL,GAAaX,YAAY,CAACQ,OAAO,CAACI,IAAT,EAAe,IAAf,CAAzB;AACA,OAAKC,MAAL,GAAcb,YAAY,CAACQ,OAAO,CAACM,KAAT,EAAgB,GAAhB,CAA1B;AACA,OAAKC,KAAL,GAAaf,YAAY,CAACQ,OAAO,CAACQ,IAAT,EAAe,KAAf,CAAzB;AACA,OAAKC,yBAAL,GAAiCT,OAAO,CAACU,wBAAzC;AAEA,OAAKC,SAAL,GAAiBX,OAAO,CAACY,QAAzB;;AACA,MAAI,CAACnB,OAAO,CAAC,KAAKkB,SAAN,CAAZ,EAA8B;AAC5B,SAAKA,SAAL,GAAiBb,QAAQ,CAACe,QAAT,CAAkBf,QAAQ,CAACgB,SAA3B,EAAsC;AACrDC,MAAAA,KAAK,EAAE,IAAIxB,KAAJ,CAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB;AAD8C,KAAtC,CAAjB;AAGD;;AAED,MAAIyB,SAAS,GAAGhB,OAAO,CAACgB,SAAxB;;AACA,MAAI,CAACvB,OAAO,CAACuB,SAAD,CAAZ,EAAyB;AACvBA,IAAAA,SAAS,GAAG,EAAZ;AACD;;AAED,OAAKC,UAAL,GAAkBD,SAAlB;AACA,OAAKE,gBAAL,GAAwB9B,qBAAqB,CAC3C4B,SAD2C,EAE3C1B,UAAU,CAAC6B,aAFgC,CAA7C;;AAKA,MAAI,KAAKZ,KAAL,IAAc,KAAKW,gBAAL,CAAsBE,MAAtB,GAA+B,CAAjD,EAAoD;AAClD,QAAI,KAAKF,gBAAL,KAA0B,KAAKD,UAAnC,EAA+C;AAC7C,WAAKC,gBAAL,GAAwBF,SAAS,CAACK,KAAV,EAAxB;AACD;;AACD,SAAKH,gBAAL,CAAsBI,IAAtB,CAA2BhC,UAAU,CAACiC,KAAX,CAAiB,KAAKL,gBAAL,CAAsB,CAAtB,CAAjB,CAA3B;AACD;;AAED,OAAKM,OAAL,GAAe,KAAKN,gBAAL,CAAsBE,MAArC;AACA,OAAKK,GAAL,GAAWzB,OAAO,CAAC0B,EAAnB;AAEA,MAAIC,WAAJ;;AACA,MAAIlC,OAAO,CAACQ,kBAAD,CAAX,EAAiC;AAC/B0B,IAAAA,WAAW,GAAG/B,OAAO,CAAC2B,KAAR,CAActB,kBAAkB,CAAC0B,WAAjC,CAAd;AACD;;AAED,OAAKC,YAAL,GAAoBD,WAApB;AACA,OAAKE,SAAL,GAAiBhC,gBAAgB,CAACiC,aAAjB,CACf,KAAKZ,gBADU,EAEfS,WAFe,CAAjB;AAKA,OAAKI,aAAL,GAAqBC,SAArB,CA/C6C,CAiD7C;;AACA,OAAKC,kBAAL,GAA0B,IAAIC,WAAJ,CAAgBC,oBAAhB,CAA1B;AACA,OAAKC,mBAAL,GAA2BnC,kBAA3B;AACA,OAAKoC,MAAL,GAAc,KAAd;AACA,OAAKC,OAAL,GAAeN,SAAf;AACA,OAAKO,eAAL,GAAuBlD,cAAc,CAACmD,UAAf,CAA0B,KAAKtB,gBAA/B,CAAvB;AACA,OAAKuB,iBAAL,GAAyBpD,cAAc,CAACqD,SAAf,CACvB,KAAKH,eADkB,EAEvB,KAAKX,YAFkB,CAAzB;AAIA,OAAKe,iBAAL,GAAyB,IAAItD,cAAJ,EAAzB,CA3D6C,CA2DE;AAChD;;AAED,IAAIuD,cAAc,GAAI7C,QAAQ,CAAC6C,cAAT,GAA0B,CAAhD;AACA,IAAIC,UAAU,GAAI9C,QAAQ,CAAC8C,UAAT,GAAsB,CAAxC;AACA,IAAIC,WAAW,GAAI/C,QAAQ,CAAC+C,WAAT,GAAuB,CAA1C;AACA,IAAIC,cAAc,GAAIhD,QAAQ,CAACgD,cAAT,GAA0B,CAAhD;AACA,IAAIC,mBAAmB,GAAIjD,QAAQ,CAACiD,mBAAT,GAA+B,CAA1D;AACA,IAAIC,0BAA0B,GAAIlD,QAAQ,CAACkD,0BAAT,GAAsC,CAAxE;AACA,IAAId,oBAAoB,GAAIpC,QAAQ,CAACoC,oBAAT,GAAgC,CAA5D;;AAEA,SAASe,SAAT,CAAmBC,QAAnB,EAA6BC,eAA7B,EAA8C;AAC5C,IAAED,QAAQ,CAAClB,kBAAT,CAA4BmB,eAA5B,CAAF;AACA,MAAInD,kBAAkB,GAAGkD,QAAQ,CAACf,mBAAlC;;AACA,MAAI3C,OAAO,CAACQ,kBAAD,CAAX,EAAiC;AAC/BA,IAAAA,kBAAkB,CAACoD,eAAnB,CAAmCF,QAAnC,EAA6CC,eAA7C;;AACAD,IAAAA,QAAQ,CAACd,MAAT,GAAkB,IAAlB;AACD;AACF;;AAEDiB,MAAM,CAACC,gBAAP,CAAwBxD,QAAQ,CAACyD,SAAjC,EAA4C;AAC1C;;;;;;AAMApD,EAAAA,IAAI,EAAE;AACJqD,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKtD,KAAZ;AACD,KAHG;AAIJuD,IAAAA,GAAG,EAAE,UAAUC,KAAV,EAAiB;AACpB;AACA,UAAI,CAAClE,OAAO,CAACkE,KAAD,CAAZ,EAAqB;AACnB,cAAM,IAAIjE,cAAJ,CAAmB,oBAAnB,CAAN;AACD,OAJmB,CAKpB;;;AAEA,UAAIiE,KAAK,KAAK,KAAKxD,KAAnB,EAA0B;AACxB,aAAKA,KAAL,GAAawD,KAAb;AACAT,QAAAA,SAAS,CAAC,IAAD,EAAOL,UAAP,CAAT;AACD;AACF;AAfG,GAPoC;;AAyB1C;;;;;;;;;;;AAWA7B,EAAAA,SAAS,EAAE;AACTyC,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKxC,UAAZ;AACD,KAHQ;AAITyC,IAAAA,GAAG,EAAE,UAAUC,KAAV,EAAiB;AACpB;AACA,UAAI,CAAClE,OAAO,CAACkE,KAAD,CAAZ,EAAqB;AACnB,cAAM,IAAIjE,cAAJ,CAAmB,oBAAnB,CAAN;AACD,OAJmB,CAKpB;;;AAEA,UAAIsB,SAAS,GAAG5B,qBAAqB,CAACuE,KAAD,EAAQrE,UAAU,CAAC6B,aAAnB,CAArC;;AAEA,UAAI,KAAKZ,KAAL,IAAcS,SAAS,CAACI,MAAV,GAAmB,CAArC,EAAwC;AACtC,YAAIJ,SAAS,KAAK2C,KAAlB,EAAyB;AACvB3C,UAAAA,SAAS,GAAG2C,KAAK,CAACtC,KAAN,EAAZ;AACD;;AACDL,QAAAA,SAAS,CAACM,IAAV,CAAehC,UAAU,CAACiC,KAAX,CAAiBP,SAAS,CAAC,CAAD,CAA1B,CAAf;AACD;;AAED,UACE,KAAKE,gBAAL,CAAsBE,MAAtB,KAAiCJ,SAAS,CAACI,MAA3C,IACA,KAAKF,gBAAL,CAAsBE,MAAtB,KAAiC,KAAKI,OAFxC,EAGE;AACA0B,QAAAA,SAAS,CAAC,IAAD,EAAOF,mBAAP,CAAT;AACD;;AAED,WAAK/B,UAAL,GAAkB0C,KAAlB;AACA,WAAKzC,gBAAL,GAAwBF,SAAxB;AACA,WAAKQ,OAAL,GAAeR,SAAS,CAACI,MAAzB;AACA,WAAKmB,eAAL,GAAuBlD,cAAc,CAACmD,UAAf,CACrB,KAAKtB,gBADgB,EAErB,KAAKqB,eAFgB,CAAvB;AAIA,WAAKE,iBAAL,GAAyBpD,cAAc,CAACqD,SAAf,CACvB,KAAKH,eADkB,EAEvB,KAAKX,YAFkB,EAGvB,KAAKa,iBAHkB,CAAzB;AAKAS,MAAAA,SAAS,CAAC,IAAD,EAAON,cAAP,CAAT;AAEA,WAAKgB,MAAL;AACD;AA1CQ,GApC+B;;AAiF1C;;;;;;AAMAhD,EAAAA,QAAQ,EAAE;AACR6C,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAK9C,SAAZ;AACD,KAHO;AAIR+C,IAAAA,GAAG,EAAE,UAAU9C,QAAV,EAAoB;AACvB;AACA,UAAI,CAACnB,OAAO,CAACmB,QAAD,CAAZ,EAAwB;AACtB,cAAM,IAAIlB,cAAJ,CAAmB,uBAAnB,CAAN;AACD,OAJsB,CAKvB;;;AAEA,UAAI,KAAKiB,SAAL,KAAmBC,QAAvB,EAAiC;AAC/B,aAAKD,SAAL,GAAiBC,QAAjB;AACAsC,QAAAA,SAAS,CAAC,IAAD,EAAOH,cAAP,CAAT;AACD;AACF;AAfO,GAvFgC;;AAyG1C;;;;;AAKAzC,EAAAA,KAAK,EAAE;AACLmD,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKpD,MAAZ;AACD,KAHI;AAILqD,IAAAA,GAAG,EAAE,UAAUC,KAAV,EAAiB;AACpB;AACA,UAAI,CAAClE,OAAO,CAACkE,KAAD,CAAZ,EAAqB;AACnB,cAAM,IAAIjE,cAAJ,CAAmB,oBAAnB,CAAN;AACD,OAJmB,CAKpB;;;AAEA,UAAIY,KAAK,GAAG,KAAKD,MAAjB;;AACA,UAAIsD,KAAK,KAAKrD,KAAd,EAAqB;AACnB,aAAKD,MAAL,GAAcsD,KAAd;AACAT,QAAAA,SAAS,CAAC,IAAD,EAAOJ,WAAP,CAAT;AACD;AACF;AAhBI,GA9GmC;;AAiI1C;;;;;AAKAtC,EAAAA,IAAI,EAAE;AACJiD,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKlD,KAAZ;AACD,KAHG;AAIJmD,IAAAA,GAAG,EAAE,UAAUC,KAAV,EAAiB;AACpB;AACA,UAAI,CAAClE,OAAO,CAACkE,KAAD,CAAZ,EAAqB;AACnB,cAAM,IAAIjE,cAAJ,CAAmB,oBAAnB,CAAN;AACD,OAJmB,CAKpB;;;AAEA,UAAIiE,KAAK,KAAK,KAAKpD,KAAnB,EAA0B;AACxB,YAAIS,SAAS,GAAG,KAAKE,gBAArB;;AACA,YAAIyC,KAAJ,EAAW;AACT,cACE3C,SAAS,CAACI,MAAV,GAAmB,CAAnB,IACA,CAAC9B,UAAU,CAACuE,MAAX,CAAkB7C,SAAS,CAAC,CAAD,CAA3B,EAAgCA,SAAS,CAACA,SAAS,CAACI,MAAV,GAAmB,CAApB,CAAzC,CAFH,EAGE;AACA,gBAAIJ,SAAS,CAACI,MAAV,KAAqB,KAAKH,UAAL,CAAgBG,MAAzC,EAAiD;AAC/C,mBAAKF,gBAAL,GAAwBF,SAAS,GAAG,KAAKC,UAAL,CAAgBI,KAAhB,EAApC;AACD;;AACDL,YAAAA,SAAS,CAACM,IAAV,CAAehC,UAAU,CAACiC,KAAX,CAAiBP,SAAS,CAAC,CAAD,CAA1B,CAAf;AACD;AACF,SAVD,MAUO,IACLA,SAAS,CAACI,MAAV,GAAmB,CAAnB,IACA9B,UAAU,CAACuE,MAAX,CAAkB7C,SAAS,CAAC,CAAD,CAA3B,EAAgCA,SAAS,CAACA,SAAS,CAACI,MAAV,GAAmB,CAApB,CAAzC,CAFK,EAGL;AACA,cAAIJ,SAAS,CAACI,MAAV,GAAmB,CAAnB,KAAyB,KAAKH,UAAL,CAAgBG,MAA7C,EAAqD;AACnD,iBAAKF,gBAAL,GAAwB,KAAKD,UAA7B;AACD,WAFD,MAEO;AACLD,YAAAA,SAAS,CAAC8C,GAAV;AACD;AACF;;AAED,aAAKvD,KAAL,GAAaoD,KAAb;AACAT,QAAAA,SAAS,CAAC,IAAD,EAAOF,mBAAP,CAAT;AACD;AACF;AArCG,GAtIoC;;AA8K1C;;;;;AAKAtB,EAAAA,EAAE,EAAE;AACF+B,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKhC,GAAZ;AACD,KAHC;AAIFiC,IAAAA,GAAG,EAAE,UAAUC,KAAV,EAAiB;AACpB,WAAKlC,GAAL,GAAWkC,KAAX;;AACA,UAAIlE,OAAO,CAAC,KAAK6C,OAAN,CAAX,EAA2B;AACzB,aAAKA,OAAL,CAAayB,MAAb,CAAoBrC,EAApB,GAAyBiC,KAAzB;AACD;AACF;AATC,GAnLsC;;AA+L1C;;;AAGAK,EAAAA,MAAM,EAAE;AACNP,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKnB,OAAZ;AACD;AAHK,GAlMkC;;AAwM1C;;;;;;;AAOA2B,EAAAA,WAAW,EAAE;AACXR,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,CAAChE,OAAO,CAAC,KAAK2C,mBAAN,CAAf;AACD;AAHU,GA/M6B;;AAqN1C;;;;;;AAMA1B,EAAAA,wBAAwB,EAAE;AACxB+C,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKhD,yBAAZ;AACD,KAHuB;AAIxBiD,IAAAA,GAAG,EAAE,UAAUC,KAAV,EAAiB;AACpB;AACA,UAAIlE,OAAO,CAACkE,KAAD,CAAP,IAAkBA,KAAK,CAACO,GAAN,IAAaP,KAAK,CAACQ,IAAzC,EAA+C;AAC7C,cAAM,IAAIzE,cAAJ,CACJ,kDADI,CAAN;AAGD,OANmB,CAOpB;;;AACA,UACE,CAACC,wBAAwB,CAACkE,MAAzB,CAAgCF,KAAhC,EAAuC,KAAKlD,yBAA5C,CADH,EAEE;AACA,aAAKA,yBAAL,GAAiCd,wBAAwB,CAAC4B,KAAzB,CAC/BoC,KAD+B,EAE/B,KAAKlD,yBAF0B,CAAjC;AAIAyC,QAAAA,SAAS,CAAC,IAAD,EAAOD,0BAAP,CAAT;AACD;AACF;AArBuB;AA3NgB,CAA5C;AAoPA;;;;AAGAlD,QAAQ,CAACyD,SAAT,CAAmBI,MAAnB,GAA4B,YAAY;AACtC,MAAIjC,WAAW,GAAG/B,OAAO,CAACwE,QAA1B;;AACA,MAAI3E,OAAO,CAAC,KAAK2C,mBAAN,CAAX,EAAuC;AACrCT,IAAAA,WAAW,GAAG,KAAKS,mBAAL,CAAyBT,WAAvC;AACD;;AAED,MAAI0C,sBAAsB,GAAG,KAAKxC,SAAL,CAAeb,SAAf,CAAyBI,MAAtD;AACA,MAAIkD,cAAc,GAAG,KAAKzC,SAAL,CAAe0C,OAApC;AAEA,MAAIC,gBAAgB,GAClB,KAAKvC,kBAAL,CAAwBW,cAAxB,IAA0C,CAA1C,IACA,KAAKX,kBAAL,CAAwBe,mBAAxB,IAA+C,CAFjD;;AAGA,MAAI,CAACpD,OAAO,CAACiE,MAAR,CAAelC,WAAf,EAA4B,KAAKC,YAAjC,CAAD,IAAmD4C,gBAAvD,EAAyE;AACvE,SAAK3C,SAAL,GAAiBhC,gBAAgB,CAACiC,aAAjB,CACf,KAAKZ,gBADU,EAEfS,WAFe,CAAjB;AAIA,SAAKc,iBAAL,GAAyBpD,cAAc,CAACqD,SAAf,CACvB,KAAKH,eADkB,EAEvBZ,WAFuB,EAGvB,KAAKc,iBAHkB,CAAzB;AAKD;;AAED,OAAKb,YAAL,GAAoBhC,OAAO,CAAC2B,KAAR,CAAcI,WAAd,EAA2B,KAAKC,YAAhC,CAApB;;AAEA,MAAI,KAAKC,SAAL,CAAeb,SAAf,CAAyBI,MAAzB,KAAoCiD,sBAAxC,EAAgE;AAC9D;AACAnB,IAAAA,SAAS,CAAC,IAAD,EAAOF,mBAAP,CAAT;AACD,GAHD,MAGO;AACL,QAAI5B,MAAM,GAAGkD,cAAc,CAAClD,MAA5B;;AACA,SAAK,IAAIqD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrD,MAApB,EAA4B,EAAEqD,CAA9B,EAAiC;AAC/B,UAAIH,cAAc,CAACG,CAAD,CAAd,KAAsB,KAAK5C,SAAL,CAAe0C,OAAf,CAAuBE,CAAvB,CAA1B,EAAqD;AACnD;AACAvB,QAAAA,SAAS,CAAC,IAAD,EAAOF,mBAAP,CAAT;AACA;AACD;AACF;AACF;AACF,CAvCD;AAyCA;;;;;AAGAjD,QAAQ,CAACyD,SAAT,CAAmBkB,SAAnB,GAA+B,UAAUC,OAAV,EAAmB;AAChD,MAAI,CAAClF,OAAO,CAAC,KAAK6C,OAAN,CAAZ,EAA4B;AAC1B,SAAKA,OAAL,GAAeqC,OAAO,CAACC,YAAR,CAAqB;AAClCC,MAAAA,SAAS,EAAE,IADuB;AAElCC,MAAAA,UAAU,EAAE,KAAK1C,mBAFiB;AAGlCV,MAAAA,EAAE,EAAE,KAAKD;AAHyB,KAArB,CAAf;AAKD;;AACD,SAAO,KAAKa,OAAZ;AACD,CATD;;AAWAvC,QAAQ,CAACyD,SAAT,CAAmBuB,MAAnB,GAA4B,YAAY;AACtC,OAAK1C,MAAL,GAAc,KAAd;AACA,MAAI2C,UAAU,GAAG,KAAK/C,kBAAtB;;AACA,OAAK,IAAIgD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG9C,oBAAoB,GAAG,CAA3C,EAA8C,EAAE8C,CAAhD,EAAmD;AACjDD,IAAAA,UAAU,CAACC,CAAD,CAAV,GAAgB,CAAhB;AACD;AACF,CAND;;AAQAlF,QAAQ,CAACyD,SAAT,CAAmB0B,QAAnB,GAA8B,YAAY;AACxC,OAAK5C,OAAL,GAAe,KAAKA,OAAL,IAAgB,KAAKA,OAAL,CAAa6C,OAAb,EAA/B;AACA,OAAKxE,SAAL,GAAiB,KAAKA,SAAL,IAAkB,KAAKA,SAAL,CAAewE,OAAf,EAAnC;AACA,OAAK/C,mBAAL,GAA2BJ,SAA3B;AACD,CAJD;;AAKA,eAAejC,QAAf","sourcesContent":["import arrayRemoveDuplicates from \"../Core/arrayRemoveDuplicates.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport PolylinePipeline from \"../Core/PolylinePipeline.js\";\nimport Material from \"./Material.js\";\n\n/**\n * A renderable polyline. Create this by calling {@link PolylineCollection#add}\n *\n * @alias Polyline\n * @internalConstructor\n * @class\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.show=true] <code>true</code> if this polyline will be shown; otherwise, <code>false</code>.\n * @param {Number} [options.width=1.0] The width of the polyline in pixels.\n * @param {Boolean} [options.loop=false] Whether a line segment will be added between the last and first line positions to make this line a loop.\n * @param {Material} [options.material=Material.ColorType] The material.\n * @param {Cartesian3[]} [options.positions] The positions.\n * @param {Object} [options.id] The user-defined object to be returned when this polyline is picked.\n * @param {DistanceDisplayCondition} [options.distanceDisplayCondition] The condition specifying at what distance from the camera that this polyline will be displayed.\n * @param {PolylineCollection} polylineCollection The renderable polyline collection.\n *\n * @see PolylineCollection\n *\n */\nfunction Polyline(options, polylineCollection) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._show = defaultValue(options.show, true);\n  this._width = defaultValue(options.width, 1.0);\n  this._loop = defaultValue(options.loop, false);\n  this._distanceDisplayCondition = options.distanceDisplayCondition;\n\n  this._material = options.material;\n  if (!defined(this._material)) {\n    this._material = Material.fromType(Material.ColorType, {\n      color: new Color(1.0, 1.0, 1.0, 1.0),\n    });\n  }\n\n  var positions = options.positions;\n  if (!defined(positions)) {\n    positions = [];\n  }\n\n  this._positions = positions;\n  this._actualPositions = arrayRemoveDuplicates(\n    positions,\n    Cartesian3.equalsEpsilon\n  );\n\n  if (this._loop && this._actualPositions.length > 2) {\n    if (this._actualPositions === this._positions) {\n      this._actualPositions = positions.slice();\n    }\n    this._actualPositions.push(Cartesian3.clone(this._actualPositions[0]));\n  }\n\n  this._length = this._actualPositions.length;\n  this._id = options.id;\n\n  var modelMatrix;\n  if (defined(polylineCollection)) {\n    modelMatrix = Matrix4.clone(polylineCollection.modelMatrix);\n  }\n\n  this._modelMatrix = modelMatrix;\n  this._segments = PolylinePipeline.wrapLongitude(\n    this._actualPositions,\n    modelMatrix\n  );\n\n  this._actualLength = undefined;\n\n  // eslint-disable-next-line no-use-before-define\n  this._propertiesChanged = new Uint32Array(NUMBER_OF_PROPERTIES);\n  this._polylineCollection = polylineCollection;\n  this._dirty = false;\n  this._pickId = undefined;\n  this._boundingVolume = BoundingSphere.fromPoints(this._actualPositions);\n  this._boundingVolumeWC = BoundingSphere.transform(\n    this._boundingVolume,\n    this._modelMatrix\n  );\n  this._boundingVolume2D = new BoundingSphere(); // modified in PolylineCollection\n}\n\nvar POSITION_INDEX = (Polyline.POSITION_INDEX = 0);\nvar SHOW_INDEX = (Polyline.SHOW_INDEX = 1);\nvar WIDTH_INDEX = (Polyline.WIDTH_INDEX = 2);\nvar MATERIAL_INDEX = (Polyline.MATERIAL_INDEX = 3);\nvar POSITION_SIZE_INDEX = (Polyline.POSITION_SIZE_INDEX = 4);\nvar DISTANCE_DISPLAY_CONDITION = (Polyline.DISTANCE_DISPLAY_CONDITION = 5);\nvar NUMBER_OF_PROPERTIES = (Polyline.NUMBER_OF_PROPERTIES = 6);\n\nfunction makeDirty(polyline, propertyChanged) {\n  ++polyline._propertiesChanged[propertyChanged];\n  var polylineCollection = polyline._polylineCollection;\n  if (defined(polylineCollection)) {\n    polylineCollection._updatePolyline(polyline, propertyChanged);\n    polyline._dirty = true;\n  }\n}\n\nObject.defineProperties(Polyline.prototype, {\n  /**\n   * Determines if this polyline will be shown.  Use this to hide or show a polyline, instead\n   * of removing it and re-adding it to the collection.\n   * @memberof Polyline.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (value !== this._show) {\n        this._show = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the positions of the polyline.\n   * @memberof Polyline.prototype\n   * @type {Cartesian3[]}\n   * @example\n   * polyline.positions = Cesium.Cartesian3.fromDegreesArray([\n   *     0.0, 0.0,\n   *     10.0, 0.0,\n   *     0.0, 20.0\n   * ]);\n   */\n  positions: {\n    get: function () {\n      return this._positions;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      var positions = arrayRemoveDuplicates(value, Cartesian3.equalsEpsilon);\n\n      if (this._loop && positions.length > 2) {\n        if (positions === value) {\n          positions = value.slice();\n        }\n        positions.push(Cartesian3.clone(positions[0]));\n      }\n\n      if (\n        this._actualPositions.length !== positions.length ||\n        this._actualPositions.length !== this._length\n      ) {\n        makeDirty(this, POSITION_SIZE_INDEX);\n      }\n\n      this._positions = value;\n      this._actualPositions = positions;\n      this._length = positions.length;\n      this._boundingVolume = BoundingSphere.fromPoints(\n        this._actualPositions,\n        this._boundingVolume\n      );\n      this._boundingVolumeWC = BoundingSphere.transform(\n        this._boundingVolume,\n        this._modelMatrix,\n        this._boundingVolumeWC\n      );\n      makeDirty(this, POSITION_INDEX);\n\n      this.update();\n    },\n  },\n\n  /**\n   * Gets or sets the surface appearance of the polyline.  This can be one of several built-in {@link Material} objects or a custom material, scripted with\n   * {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}.\n   * @memberof Polyline.prototype\n   * @type {Material}\n   */\n  material: {\n    get: function () {\n      return this._material;\n    },\n    set: function (material) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(material)) {\n        throw new DeveloperError(\"material is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (this._material !== material) {\n        this._material = material;\n        makeDirty(this, MATERIAL_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the width of the polyline.\n   * @memberof Polyline.prototype\n   * @type {Number}\n   */\n  width: {\n    get: function () {\n      return this._width;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      var width = this._width;\n      if (value !== width) {\n        this._width = value;\n        makeDirty(this, WIDTH_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets whether a line segment will be added between the first and last polyline positions.\n   * @memberof Polyline.prototype\n   * @type {Boolean}\n   */\n  loop: {\n    get: function () {\n      return this._loop;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (value !== this._loop) {\n        var positions = this._actualPositions;\n        if (value) {\n          if (\n            positions.length > 2 &&\n            !Cartesian3.equals(positions[0], positions[positions.length - 1])\n          ) {\n            if (positions.length === this._positions.length) {\n              this._actualPositions = positions = this._positions.slice();\n            }\n            positions.push(Cartesian3.clone(positions[0]));\n          }\n        } else if (\n          positions.length > 2 &&\n          Cartesian3.equals(positions[0], positions[positions.length - 1])\n        ) {\n          if (positions.length - 1 === this._positions.length) {\n            this._actualPositions = this._positions;\n          } else {\n            positions.pop();\n          }\n        }\n\n        this._loop = value;\n        makeDirty(this, POSITION_SIZE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the user-defined value returned when the polyline is picked.\n   * @memberof Polyline.prototype\n   * @type {*}\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n    set: function (value) {\n      this._id = value;\n      if (defined(this._pickId)) {\n        this._pickId.object.id = value;\n      }\n    },\n  },\n\n  /**\n   * @private\n   */\n  pickId: {\n    get: function () {\n      return this._pickId;\n    },\n  },\n\n  /**\n   * Gets the destruction status of this polyline\n   * @memberof Polyline.prototype\n   * @type {Boolean}\n   * @default false\n   * @private\n   */\n  isDestroyed: {\n    get: function () {\n      return !defined(this._polylineCollection);\n    },\n  },\n\n  /**\n   * Gets or sets the condition specifying at what distance from the camera that this polyline will be displayed.\n   * @memberof Polyline.prototype\n   * @type {DistanceDisplayCondition}\n   * @default undefined\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._distanceDisplayCondition;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\n          \"far distance must be greater than near distance.\"\n        );\n      }\n      //>>includeEnd('debug');\n      if (\n        !DistanceDisplayCondition.equals(value, this._distanceDisplayCondition)\n      ) {\n        this._distanceDisplayCondition = DistanceDisplayCondition.clone(\n          value,\n          this._distanceDisplayCondition\n        );\n        makeDirty(this, DISTANCE_DISPLAY_CONDITION);\n      }\n    },\n  },\n});\n\n/**\n * @private\n */\nPolyline.prototype.update = function () {\n  var modelMatrix = Matrix4.IDENTITY;\n  if (defined(this._polylineCollection)) {\n    modelMatrix = this._polylineCollection.modelMatrix;\n  }\n\n  var segmentPositionsLength = this._segments.positions.length;\n  var segmentLengths = this._segments.lengths;\n\n  var positionsChanged =\n    this._propertiesChanged[POSITION_INDEX] > 0 ||\n    this._propertiesChanged[POSITION_SIZE_INDEX] > 0;\n  if (!Matrix4.equals(modelMatrix, this._modelMatrix) || positionsChanged) {\n    this._segments = PolylinePipeline.wrapLongitude(\n      this._actualPositions,\n      modelMatrix\n    );\n    this._boundingVolumeWC = BoundingSphere.transform(\n      this._boundingVolume,\n      modelMatrix,\n      this._boundingVolumeWC\n    );\n  }\n\n  this._modelMatrix = Matrix4.clone(modelMatrix, this._modelMatrix);\n\n  if (this._segments.positions.length !== segmentPositionsLength) {\n    // number of positions changed\n    makeDirty(this, POSITION_SIZE_INDEX);\n  } else {\n    var length = segmentLengths.length;\n    for (var i = 0; i < length; ++i) {\n      if (segmentLengths[i] !== this._segments.lengths[i]) {\n        // indices changed\n        makeDirty(this, POSITION_SIZE_INDEX);\n        break;\n      }\n    }\n  }\n};\n\n/**\n * @private\n */\nPolyline.prototype.getPickId = function (context) {\n  if (!defined(this._pickId)) {\n    this._pickId = context.createPickId({\n      primitive: this,\n      collection: this._polylineCollection,\n      id: this._id,\n    });\n  }\n  return this._pickId;\n};\n\nPolyline.prototype._clean = function () {\n  this._dirty = false;\n  var properties = this._propertiesChanged;\n  for (var k = 0; k < NUMBER_OF_PROPERTIES - 1; ++k) {\n    properties[k] = 0;\n  }\n};\n\nPolyline.prototype._destroy = function () {\n  this._pickId = this._pickId && this._pickId.destroy();\n  this._material = this._material && this._material.destroy();\n  this._polylineCollection = undefined;\n};\nexport default Polyline;\n"]},"metadata":{},"sourceType":"module"}