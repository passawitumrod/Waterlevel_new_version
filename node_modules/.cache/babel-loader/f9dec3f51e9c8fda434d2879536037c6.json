{"ast":null,"code":"import DeveloperError from \"../Core/DeveloperError.js\";\n/**\n * Defines a bounding volume for a tile. This type describes an interface\n * and is not intended to be instantiated directly.\n *\n * @see TileBoundingRegion\n * @see TileBoundingSphere\n * @see TileOrientedBoundingBox\n *\n * @private\n */\n\nfunction TileBoundingVolume() {}\n/**\n * The underlying bounding volume.\n *\n * @memberof TileBoundingVolume.prototype\n *\n * @type {Object}\n * @readonly\n */\n\n\nTileBoundingVolume.prototype.boundingVolume = undefined;\n/**\n * The underlying bounding sphere.\n *\n * @memberof TileBoundingVolume.prototype\n *\n * @type {BoundingSphere}\n * @readonly\n */\n\nTileBoundingVolume.prototype.boundingSphere = undefined;\n/**\n * Calculates the distance between the tile and the camera.\n *\n * @param {FrameState} frameState The frame state.\n * @return {Number} The distance between the tile and the camera, in meters.\n *                  Returns 0.0 if the camera is inside the tile.\n */\n\nTileBoundingVolume.prototype.distanceToCamera = function (frameState) {\n  DeveloperError.throwInstantiationError();\n};\n/**\n * Determines which side of a plane this volume is located.\n *\n * @param {Plane} plane The plane to test against.\n * @returns {Intersect} {@link Intersect.INSIDE} if the entire volume is on the side of the plane\n *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire volume is\n *                      on the opposite side, and {@link Intersect.INTERSECTING} if the volume\n *                      intersects the plane.\n */\n\n\nTileBoundingVolume.prototype.intersectPlane = function (plane) {\n  DeveloperError.throwInstantiationError();\n};\n/**\n * Creates a debug primitive that shows the outline of the tile bounding\n * volume.\n *\n * @param {Color} color The desired color of the primitive's mesh\n * @return {Primitive}\n */\n\n\nTileBoundingVolume.prototype.createDebugVolume = function (color) {\n  DeveloperError.throwInstantiationError();\n};\n\nexport default TileBoundingVolume;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/TileBoundingVolume.js"],"names":["DeveloperError","TileBoundingVolume","prototype","boundingVolume","undefined","boundingSphere","distanceToCamera","frameState","throwInstantiationError","intersectPlane","plane","createDebugVolume","color"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,2BAA3B;AAEA;;;;;;;;;;;AAUA,SAASC,kBAAT,GAA8B,CAAE;AAEhC;;;;;;;;;;AAQAA,kBAAkB,CAACC,SAAnB,CAA6BC,cAA7B,GAA8CC,SAA9C;AAEA;;;;;;;;;AAQAH,kBAAkB,CAACC,SAAnB,CAA6BG,cAA7B,GAA8CD,SAA9C;AAEA;;;;;;;;AAOAH,kBAAkB,CAACC,SAAnB,CAA6BI,gBAA7B,GAAgD,UAAUC,UAAV,EAAsB;AACpEP,EAAAA,cAAc,CAACQ,uBAAf;AACD,CAFD;AAIA;;;;;;;;;;;AASAP,kBAAkB,CAACC,SAAnB,CAA6BO,cAA7B,GAA8C,UAAUC,KAAV,EAAiB;AAC7DV,EAAAA,cAAc,CAACQ,uBAAf;AACD,CAFD;AAIA;;;;;;;;;AAOAP,kBAAkB,CAACC,SAAnB,CAA6BS,iBAA7B,GAAiD,UAAUC,KAAV,EAAiB;AAChEZ,EAAAA,cAAc,CAACQ,uBAAf;AACD,CAFD;;AAGA,eAAeP,kBAAf","sourcesContent":["import DeveloperError from \"../Core/DeveloperError.js\";\n\n/**\n * Defines a bounding volume for a tile. This type describes an interface\n * and is not intended to be instantiated directly.\n *\n * @see TileBoundingRegion\n * @see TileBoundingSphere\n * @see TileOrientedBoundingBox\n *\n * @private\n */\nfunction TileBoundingVolume() {}\n\n/**\n * The underlying bounding volume.\n *\n * @memberof TileBoundingVolume.prototype\n *\n * @type {Object}\n * @readonly\n */\nTileBoundingVolume.prototype.boundingVolume = undefined;\n\n/**\n * The underlying bounding sphere.\n *\n * @memberof TileBoundingVolume.prototype\n *\n * @type {BoundingSphere}\n * @readonly\n */\nTileBoundingVolume.prototype.boundingSphere = undefined;\n\n/**\n * Calculates the distance between the tile and the camera.\n *\n * @param {FrameState} frameState The frame state.\n * @return {Number} The distance between the tile and the camera, in meters.\n *                  Returns 0.0 if the camera is inside the tile.\n */\nTileBoundingVolume.prototype.distanceToCamera = function (frameState) {\n  DeveloperError.throwInstantiationError();\n};\n\n/**\n * Determines which side of a plane this volume is located.\n *\n * @param {Plane} plane The plane to test against.\n * @returns {Intersect} {@link Intersect.INSIDE} if the entire volume is on the side of the plane\n *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire volume is\n *                      on the opposite side, and {@link Intersect.INTERSECTING} if the volume\n *                      intersects the plane.\n */\nTileBoundingVolume.prototype.intersectPlane = function (plane) {\n  DeveloperError.throwInstantiationError();\n};\n\n/**\n * Creates a debug primitive that shows the outline of the tile bounding\n * volume.\n *\n * @param {Color} color The desired color of the primitive's mesh\n * @return {Primitive}\n */\nTileBoundingVolume.prototype.createDebugVolume = function (color) {\n  DeveloperError.throwInstantiationError();\n};\nexport default TileBoundingVolume;\n"]},"metadata":{},"sourceType":"module"}