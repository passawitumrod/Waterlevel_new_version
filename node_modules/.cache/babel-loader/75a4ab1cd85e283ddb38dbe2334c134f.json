{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\nvar defaultRepeat = new Cartesian2(1, 1);\nvar defaultTransparent = false;\nvar defaultColor = Color.WHITE;\n/**\n * A {@link MaterialProperty} that maps to image {@link Material} uniforms.\n * @alias ImageMaterialProperty\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.image] A Property specifying the Image, URL, Canvas, or Video.\n * @param {Property} [options.repeat=new Cartesian2(1.0, 1.0)] A {@link Cartesian2} Property specifying the number of times the image repeats in each direction.\n * @param {Property} [options.color=Color.WHITE] The color applied to the image\n * @param {Property} [options.transparent=false] Set to true when the image has transparency (for example, when a png has transparent sections)\n */\n\nfunction ImageMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._definitionChanged = new Event();\n  this._image = undefined;\n  this._imageSubscription = undefined;\n  this._repeat = undefined;\n  this._repeatSubscription = undefined;\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._transparent = undefined;\n  this._transparentSubscription = undefined;\n  this.image = options.image;\n  this.repeat = options.repeat;\n  this.color = options.color;\n  this.transparent = options.transparent;\n}\n\nObject.defineProperties(ImageMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof ImageMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._image) && Property.isConstant(this._repeat);\n    }\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof ImageMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the Property specifying Image, URL, Canvas, or Video to use.\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property}\n   */\n  image: createPropertyDescriptor(\"image\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the number of times the image repeats in each direction.\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property}\n   * @default new Cartesian2(1, 1)\n   */\n  repeat: createPropertyDescriptor(\"repeat\"),\n\n  /**\n   * Gets or sets the Color Property specifying the desired color applied to the image.\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the Boolean Property specifying whether the image has transparency\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  transparent: createPropertyDescriptor(\"transparent\")\n});\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\n\nImageMaterialProperty.prototype.getType = function (time) {\n  return \"Image\";\n};\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\n\nImageMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n\n  result.image = Property.getValueOrUndefined(this._image, time);\n  result.repeat = Property.getValueOrClonedDefault(this._repeat, time, defaultRepeat, result.repeat);\n  result.color = Property.getValueOrClonedDefault(this._color, time, defaultColor, result.color);\n\n  if (Property.getValueOrDefault(this._transparent, time, defaultTransparent)) {\n    result.color.alpha = Math.min(0.99, result.color.alpha);\n  }\n\n  return result;\n};\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nImageMaterialProperty.prototype.equals = function (other) {\n  return this === other || other instanceof ImageMaterialProperty && Property.equals(this._image, other._image) && Property.equals(this._repeat, other._repeat) && Property.equals(this._color, other._color) && Property.equals(this._transparent, other._transparent);\n};\n\nexport default ImageMaterialProperty;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/DataSources/ImageMaterialProperty.js"],"names":["Cartesian2","Color","defaultValue","defined","Event","createPropertyDescriptor","Property","defaultRepeat","defaultTransparent","defaultColor","WHITE","ImageMaterialProperty","options","EMPTY_OBJECT","_definitionChanged","_image","undefined","_imageSubscription","_repeat","_repeatSubscription","_color","_colorSubscription","_transparent","_transparentSubscription","image","repeat","color","transparent","Object","defineProperties","prototype","isConstant","get","definitionChanged","getType","time","getValue","result","getValueOrUndefined","getValueOrClonedDefault","getValueOrDefault","alpha","Math","min","equals","other"],"mappings":"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","sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\nvar defaultRepeat = new Cartesian2(1, 1);\nvar defaultTransparent = false;\nvar defaultColor = Color.WHITE;\n\n/**\n * A {@link MaterialProperty} that maps to image {@link Material} uniforms.\n * @alias ImageMaterialProperty\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.image] A Property specifying the Image, URL, Canvas, or Video.\n * @param {Property} [options.repeat=new Cartesian2(1.0, 1.0)] A {@link Cartesian2} Property specifying the number of times the image repeats in each direction.\n * @param {Property} [options.color=Color.WHITE] The color applied to the image\n * @param {Property} [options.transparent=false] Set to true when the image has transparency (for example, when a png has transparent sections)\n */\nfunction ImageMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._definitionChanged = new Event();\n  this._image = undefined;\n  this._imageSubscription = undefined;\n  this._repeat = undefined;\n  this._repeatSubscription = undefined;\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._transparent = undefined;\n  this._transparentSubscription = undefined;\n\n  this.image = options.image;\n  this.repeat = options.repeat;\n  this.color = options.color;\n  this.transparent = options.transparent;\n}\n\nObject.defineProperties(ImageMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof ImageMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        Property.isConstant(this._image) && Property.isConstant(this._repeat)\n      );\n    },\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof ImageMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the Property specifying Image, URL, Canvas, or Video to use.\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property}\n   */\n  image: createPropertyDescriptor(\"image\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the number of times the image repeats in each direction.\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property}\n   * @default new Cartesian2(1, 1)\n   */\n  repeat: createPropertyDescriptor(\"repeat\"),\n\n  /**\n   * Gets or sets the Color Property specifying the desired color applied to the image.\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the Boolean Property specifying whether the image has transparency\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  transparent: createPropertyDescriptor(\"transparent\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nImageMaterialProperty.prototype.getType = function (time) {\n  return \"Image\";\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nImageMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n\n  result.image = Property.getValueOrUndefined(this._image, time);\n  result.repeat = Property.getValueOrClonedDefault(\n    this._repeat,\n    time,\n    defaultRepeat,\n    result.repeat\n  );\n  result.color = Property.getValueOrClonedDefault(\n    this._color,\n    time,\n    defaultColor,\n    result.color\n  );\n  if (Property.getValueOrDefault(this._transparent, time, defaultTransparent)) {\n    result.color.alpha = Math.min(0.99, result.color.alpha);\n  }\n\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nImageMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (other instanceof ImageMaterialProperty &&\n      Property.equals(this._image, other._image) &&\n      Property.equals(this._repeat, other._repeat) &&\n      Property.equals(this._color, other._color) &&\n      Property.equals(this._transparent, other._transparent))\n  );\n};\nexport default ImageMaterialProperty;\n"]},"metadata":{},"sourceType":"module"}