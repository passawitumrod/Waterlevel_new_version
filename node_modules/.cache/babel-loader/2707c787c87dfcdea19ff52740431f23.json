{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport VertexFormat from \"../Core/VertexFormat.js\";\nimport AllMaterialAppearanceFS from \"../Shaders/Appearances/AllMaterialAppearanceFS.js\";\nimport AllMaterialAppearanceVS from \"../Shaders/Appearances/AllMaterialAppearanceVS.js\";\nimport BasicMaterialAppearanceFS from \"../Shaders/Appearances/BasicMaterialAppearanceFS.js\";\nimport BasicMaterialAppearanceVS from \"../Shaders/Appearances/BasicMaterialAppearanceVS.js\";\nimport TexturedMaterialAppearanceFS from \"../Shaders/Appearances/TexturedMaterialAppearanceFS.js\";\nimport TexturedMaterialAppearanceVS from \"../Shaders/Appearances/TexturedMaterialAppearanceVS.js\";\nimport Appearance from \"./Appearance.js\";\nimport Material from \"./Material.js\";\n/**\n     * An appearance for arbitrary geometry (as opposed to {@link EllipsoidSurfaceAppearance}, for example)\n     * that supports shading with materials.\n     *\n     * @alias MaterialAppearance\n     * @constructor\n     *\n     * @param {Object} [options] Object with the following properties:\n     * @param {Boolean} [options.flat=false] When <code>true</code>, flat shading is used in the fragment shader, which means lighting is not taking into account.\n     * @param {Boolean} [options.faceForward=!options.closed] When <code>true</code>, the fragment shader flips the surface normal as needed to ensure that the normal faces the viewer to avoid dark spots.  This is useful when both sides of a geometry should be shaded like {@link WallGeometry}.\n     * @param {Boolean} [options.translucent=true] When <code>true</code>, the geometry is expected to appear translucent so {@link MaterialAppearance#renderState} has alpha blending enabled.\n     * @param {Boolean} [options.closed=false] When <code>true</code>, the geometry is expected to be closed so {@link MaterialAppearance#renderState} has backface culling enabled.\n     * @param {MaterialAppearance.MaterialSupport} [options.materialSupport=MaterialAppearance.MaterialSupport.TEXTURED] The type of materials that will be supported.\n     * @param {Material} [options.material=Material.ColorType] The material used to determine the fragment color.\n     * @param {String} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n     * @param {String} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n     * @param {RenderState} [options.renderState] Optional render state to override the default render state.\n     *\n     * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n     * @demo {@link https://sandcastle.cesium.com/index.html?src=Materials.html|Cesium Sandcastle Material Appearance Demo}\n     *\n     * @example\n     * var primitive = new Cesium.Primitive({\n     *   geometryInstances : new Cesium.GeometryInstance({\n     *     geometry : new Cesium.WallGeometry({\n            materialSupport :  Cesium.MaterialAppearance.MaterialSupport.BASIC.vertexFormat,\n     *       // ...\n     *     })\n     *   }),\n     *   appearance : new Cesium.MaterialAppearance({\n     *     material : Cesium.Material.fromType('Color'),\n     *     faceForward : true\n     *   })\n     *\n     * });\n     */\n\nfunction MaterialAppearance(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var translucent = defaultValue(options.translucent, true);\n  var closed = defaultValue(options.closed, false);\n  var materialSupport = defaultValue(options.materialSupport, MaterialAppearance.MaterialSupport.TEXTURED);\n  /**\n   * The material used to determine the fragment color.  Unlike other {@link MaterialAppearance}\n   * properties, this is not read-only, so an appearance's material can change on the fly.\n   *\n   * @type Material\n   *\n   * @default {@link Material.ColorType}\n   *\n   * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n   */\n\n  this.material = defined(options.material) ? options.material : Material.fromType(Material.ColorType);\n  /**\n   * When <code>true</code>, the geometry is expected to appear translucent.\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n\n  this.translucent = translucent;\n  this._vertexShaderSource = defaultValue(options.vertexShaderSource, materialSupport.vertexShaderSource);\n  this._fragmentShaderSource = defaultValue(options.fragmentShaderSource, materialSupport.fragmentShaderSource);\n  this._renderState = Appearance.getDefaultRenderState(translucent, closed, options.renderState);\n  this._closed = closed; // Non-derived members\n\n  this._materialSupport = materialSupport;\n  this._vertexFormat = materialSupport.vertexFormat;\n  this._flat = defaultValue(options.flat, false);\n  this._faceForward = defaultValue(options.faceForward, !closed);\n}\n\nObject.defineProperties(MaterialAppearance.prototype, {\n  /**\n   * The GLSL source code for the vertex shader.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  vertexShaderSource: {\n    get: function () {\n      return this._vertexShaderSource;\n    }\n  },\n\n  /**\n   * The GLSL source code for the fragment shader.  The full fragment shader\n   * source is built procedurally taking into account {@link MaterialAppearance#material},\n   * {@link MaterialAppearance#flat}, and {@link MaterialAppearance#faceForward}.\n   * Use {@link MaterialAppearance#getFragmentShaderSource} to get the full source.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  fragmentShaderSource: {\n    get: function () {\n      return this._fragmentShaderSource;\n    }\n  },\n\n  /**\n   * The WebGL fixed-function state to use when rendering the geometry.\n   * <p>\n   * The render state can be explicitly defined when constructing a {@link MaterialAppearance}\n   * instance, or it is set implicitly via {@link MaterialAppearance#translucent}\n   * and {@link MaterialAppearance#closed}.\n   * </p>\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {Object}\n   * @readonly\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    }\n  },\n\n  /**\n   * When <code>true</code>, the geometry is expected to be closed so\n   * {@link MaterialAppearance#renderState} has backface culling enabled.\n   * If the viewer enters the geometry, it will not be visible.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  closed: {\n    get: function () {\n      return this._closed;\n    }\n  },\n\n  /**\n   * The type of materials supported by this instance.  This impacts the required\n   * {@link VertexFormat} and the complexity of the vertex and fragment shaders.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {MaterialAppearance.MaterialSupport}\n   * @readonly\n   *\n   * @default {@link MaterialAppearance.MaterialSupport.TEXTURED}\n   */\n  materialSupport: {\n    get: function () {\n      return this._materialSupport;\n    }\n  },\n\n  /**\n   * The {@link VertexFormat} that this appearance instance is compatible with.\n   * A geometry can have more vertex attributes and still be compatible - at a\n   * potential performance cost - but it can't have less.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type VertexFormat\n   * @readonly\n   *\n   * @default {@link MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat}\n   */\n  vertexFormat: {\n    get: function () {\n      return this._vertexFormat;\n    }\n  },\n\n  /**\n   * When <code>true</code>, flat shading is used in the fragment shader,\n   * which means lighting is not taking into account.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  flat: {\n    get: function () {\n      return this._flat;\n    }\n  },\n\n  /**\n   * When <code>true</code>, the fragment shader flips the surface normal\n   * as needed to ensure that the normal faces the viewer to avoid\n   * dark spots.  This is useful when both sides of a geometry should be\n   * shaded like {@link WallGeometry}.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  faceForward: {\n    get: function () {\n      return this._faceForward;\n    }\n  }\n});\n/**\n * Procedurally creates the full GLSL fragment shader source.  For {@link MaterialAppearance},\n * this is derived from {@link MaterialAppearance#fragmentShaderSource}, {@link MaterialAppearance#material},\n * {@link MaterialAppearance#flat}, and {@link MaterialAppearance#faceForward}.\n *\n * @function\n *\n * @returns {String} The full GLSL fragment shader source.\n */\n\nMaterialAppearance.prototype.getFragmentShaderSource = Appearance.prototype.getFragmentShaderSource;\n/**\n * Determines if the geometry is translucent based on {@link MaterialAppearance#translucent} and {@link Material#isTranslucent}.\n *\n * @function\n *\n * @returns {Boolean} <code>true</code> if the appearance is translucent.\n */\n\nMaterialAppearance.prototype.isTranslucent = Appearance.prototype.isTranslucent;\n/**\n * Creates a render state.  This is not the final render state instance; instead,\n * it can contain a subset of render state properties identical to the render state\n * created in the context.\n *\n * @function\n *\n * @returns {Object} The render state.\n */\n\nMaterialAppearance.prototype.getRenderState = Appearance.prototype.getRenderState;\n/**\n * Determines the type of {@link Material} that is supported by a\n * {@link MaterialAppearance} instance.  This is a trade-off between\n * flexibility (a wide array of materials) and memory/performance\n * (required vertex format and GLSL shader complexity.\n * @exports MaterialAppearance.MaterialSupport\n */\n\nMaterialAppearance.MaterialSupport = {\n  /**\n   * Only basic materials, which require just <code>position</code> and\n   * <code>normal</code> vertex attributes, are supported.\n   *\n   * @constant\n   */\n  BASIC: Object.freeze({\n    vertexFormat: VertexFormat.POSITION_AND_NORMAL,\n    vertexShaderSource: BasicMaterialAppearanceVS,\n    fragmentShaderSource: BasicMaterialAppearanceFS\n  }),\n\n  /**\n   * Materials with textures, which require <code>position</code>,\n   * <code>normal</code>, and <code>st</code> vertex attributes,\n   * are supported.  The vast majority of materials fall into this category.\n   *\n   * @constant\n   */\n  TEXTURED: Object.freeze({\n    vertexFormat: VertexFormat.POSITION_NORMAL_AND_ST,\n    vertexShaderSource: TexturedMaterialAppearanceVS,\n    fragmentShaderSource: TexturedMaterialAppearanceFS\n  }),\n\n  /**\n   * All materials, including those that work in tangent space, are supported.\n   * This requires <code>position</code>, <code>normal</code>, <code>st</code>,\n   * <code>tangent</code>, and <code>bitangent</code> vertex attributes.\n   *\n   * @constant\n   */\n  ALL: Object.freeze({\n    vertexFormat: VertexFormat.ALL,\n    vertexShaderSource: AllMaterialAppearanceVS,\n    fragmentShaderSource: AllMaterialAppearanceFS\n  })\n};\nexport default MaterialAppearance;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/MaterialAppearance.js"],"names":["defaultValue","defined","VertexFormat","AllMaterialAppearanceFS","AllMaterialAppearanceVS","BasicMaterialAppearanceFS","BasicMaterialAppearanceVS","TexturedMaterialAppearanceFS","TexturedMaterialAppearanceVS","Appearance","Material","MaterialAppearance","options","EMPTY_OBJECT","translucent","closed","materialSupport","MaterialSupport","TEXTURED","material","fromType","ColorType","_vertexShaderSource","vertexShaderSource","_fragmentShaderSource","fragmentShaderSource","_renderState","getDefaultRenderState","renderState","_closed","_materialSupport","_vertexFormat","vertexFormat","_flat","flat","_faceForward","faceForward","Object","defineProperties","prototype","get","getFragmentShaderSource","isTranslucent","getRenderState","BASIC","freeze","POSITION_AND_NORMAL","POSITION_NORMAL_AND_ST","ALL"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport VertexFormat from \"../Core/VertexFormat.js\";\nimport AllMaterialAppearanceFS from \"../Shaders/Appearances/AllMaterialAppearanceFS.js\";\nimport AllMaterialAppearanceVS from \"../Shaders/Appearances/AllMaterialAppearanceVS.js\";\nimport BasicMaterialAppearanceFS from \"../Shaders/Appearances/BasicMaterialAppearanceFS.js\";\nimport BasicMaterialAppearanceVS from \"../Shaders/Appearances/BasicMaterialAppearanceVS.js\";\nimport TexturedMaterialAppearanceFS from \"../Shaders/Appearances/TexturedMaterialAppearanceFS.js\";\nimport TexturedMaterialAppearanceVS from \"../Shaders/Appearances/TexturedMaterialAppearanceVS.js\";\nimport Appearance from \"./Appearance.js\";\nimport Material from \"./Material.js\";\n\n/**\n     * An appearance for arbitrary geometry (as opposed to {@link EllipsoidSurfaceAppearance}, for example)\n     * that supports shading with materials.\n     *\n     * @alias MaterialAppearance\n     * @constructor\n     *\n     * @param {Object} [options] Object with the following properties:\n     * @param {Boolean} [options.flat=false] When <code>true</code>, flat shading is used in the fragment shader, which means lighting is not taking into account.\n     * @param {Boolean} [options.faceForward=!options.closed] When <code>true</code>, the fragment shader flips the surface normal as needed to ensure that the normal faces the viewer to avoid dark spots.  This is useful when both sides of a geometry should be shaded like {@link WallGeometry}.\n     * @param {Boolean} [options.translucent=true] When <code>true</code>, the geometry is expected to appear translucent so {@link MaterialAppearance#renderState} has alpha blending enabled.\n     * @param {Boolean} [options.closed=false] When <code>true</code>, the geometry is expected to be closed so {@link MaterialAppearance#renderState} has backface culling enabled.\n     * @param {MaterialAppearance.MaterialSupport} [options.materialSupport=MaterialAppearance.MaterialSupport.TEXTURED] The type of materials that will be supported.\n     * @param {Material} [options.material=Material.ColorType] The material used to determine the fragment color.\n     * @param {String} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n     * @param {String} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n     * @param {RenderState} [options.renderState] Optional render state to override the default render state.\n     *\n     * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n     * @demo {@link https://sandcastle.cesium.com/index.html?src=Materials.html|Cesium Sandcastle Material Appearance Demo}\n     *\n     * @example\n     * var primitive = new Cesium.Primitive({\n     *   geometryInstances : new Cesium.GeometryInstance({\n     *     geometry : new Cesium.WallGeometry({\n            materialSupport :  Cesium.MaterialAppearance.MaterialSupport.BASIC.vertexFormat,\n     *       // ...\n     *     })\n     *   }),\n     *   appearance : new Cesium.MaterialAppearance({\n     *     material : Cesium.Material.fromType('Color'),\n     *     faceForward : true\n     *   })\n     *\n     * });\n     */\nfunction MaterialAppearance(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var translucent = defaultValue(options.translucent, true);\n  var closed = defaultValue(options.closed, false);\n  var materialSupport = defaultValue(\n    options.materialSupport,\n    MaterialAppearance.MaterialSupport.TEXTURED\n  );\n\n  /**\n   * The material used to determine the fragment color.  Unlike other {@link MaterialAppearance}\n   * properties, this is not read-only, so an appearance's material can change on the fly.\n   *\n   * @type Material\n   *\n   * @default {@link Material.ColorType}\n   *\n   * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n   */\n  this.material = defined(options.material)\n    ? options.material\n    : Material.fromType(Material.ColorType);\n\n  /**\n   * When <code>true</code>, the geometry is expected to appear translucent.\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  this.translucent = translucent;\n\n  this._vertexShaderSource = defaultValue(\n    options.vertexShaderSource,\n    materialSupport.vertexShaderSource\n  );\n  this._fragmentShaderSource = defaultValue(\n    options.fragmentShaderSource,\n    materialSupport.fragmentShaderSource\n  );\n  this._renderState = Appearance.getDefaultRenderState(\n    translucent,\n    closed,\n    options.renderState\n  );\n  this._closed = closed;\n\n  // Non-derived members\n\n  this._materialSupport = materialSupport;\n  this._vertexFormat = materialSupport.vertexFormat;\n  this._flat = defaultValue(options.flat, false);\n  this._faceForward = defaultValue(options.faceForward, !closed);\n}\n\nObject.defineProperties(MaterialAppearance.prototype, {\n  /**\n   * The GLSL source code for the vertex shader.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  vertexShaderSource: {\n    get: function () {\n      return this._vertexShaderSource;\n    },\n  },\n\n  /**\n   * The GLSL source code for the fragment shader.  The full fragment shader\n   * source is built procedurally taking into account {@link MaterialAppearance#material},\n   * {@link MaterialAppearance#flat}, and {@link MaterialAppearance#faceForward}.\n   * Use {@link MaterialAppearance#getFragmentShaderSource} to get the full source.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  fragmentShaderSource: {\n    get: function () {\n      return this._fragmentShaderSource;\n    },\n  },\n\n  /**\n   * The WebGL fixed-function state to use when rendering the geometry.\n   * <p>\n   * The render state can be explicitly defined when constructing a {@link MaterialAppearance}\n   * instance, or it is set implicitly via {@link MaterialAppearance#translucent}\n   * and {@link MaterialAppearance#closed}.\n   * </p>\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {Object}\n   * @readonly\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the geometry is expected to be closed so\n   * {@link MaterialAppearance#renderState} has backface culling enabled.\n   * If the viewer enters the geometry, it will not be visible.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  closed: {\n    get: function () {\n      return this._closed;\n    },\n  },\n\n  /**\n   * The type of materials supported by this instance.  This impacts the required\n   * {@link VertexFormat} and the complexity of the vertex and fragment shaders.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {MaterialAppearance.MaterialSupport}\n   * @readonly\n   *\n   * @default {@link MaterialAppearance.MaterialSupport.TEXTURED}\n   */\n  materialSupport: {\n    get: function () {\n      return this._materialSupport;\n    },\n  },\n\n  /**\n   * The {@link VertexFormat} that this appearance instance is compatible with.\n   * A geometry can have more vertex attributes and still be compatible - at a\n   * potential performance cost - but it can't have less.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type VertexFormat\n   * @readonly\n   *\n   * @default {@link MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat}\n   */\n  vertexFormat: {\n    get: function () {\n      return this._vertexFormat;\n    },\n  },\n\n  /**\n   * When <code>true</code>, flat shading is used in the fragment shader,\n   * which means lighting is not taking into account.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  flat: {\n    get: function () {\n      return this._flat;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the fragment shader flips the surface normal\n   * as needed to ensure that the normal faces the viewer to avoid\n   * dark spots.  This is useful when both sides of a geometry should be\n   * shaded like {@link WallGeometry}.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  faceForward: {\n    get: function () {\n      return this._faceForward;\n    },\n  },\n});\n\n/**\n * Procedurally creates the full GLSL fragment shader source.  For {@link MaterialAppearance},\n * this is derived from {@link MaterialAppearance#fragmentShaderSource}, {@link MaterialAppearance#material},\n * {@link MaterialAppearance#flat}, and {@link MaterialAppearance#faceForward}.\n *\n * @function\n *\n * @returns {String} The full GLSL fragment shader source.\n */\nMaterialAppearance.prototype.getFragmentShaderSource =\n  Appearance.prototype.getFragmentShaderSource;\n\n/**\n * Determines if the geometry is translucent based on {@link MaterialAppearance#translucent} and {@link Material#isTranslucent}.\n *\n * @function\n *\n * @returns {Boolean} <code>true</code> if the appearance is translucent.\n */\nMaterialAppearance.prototype.isTranslucent = Appearance.prototype.isTranslucent;\n\n/**\n * Creates a render state.  This is not the final render state instance; instead,\n * it can contain a subset of render state properties identical to the render state\n * created in the context.\n *\n * @function\n *\n * @returns {Object} The render state.\n */\nMaterialAppearance.prototype.getRenderState =\n  Appearance.prototype.getRenderState;\n\n/**\n * Determines the type of {@link Material} that is supported by a\n * {@link MaterialAppearance} instance.  This is a trade-off between\n * flexibility (a wide array of materials) and memory/performance\n * (required vertex format and GLSL shader complexity.\n * @exports MaterialAppearance.MaterialSupport\n */\nMaterialAppearance.MaterialSupport = {\n  /**\n   * Only basic materials, which require just <code>position</code> and\n   * <code>normal</code> vertex attributes, are supported.\n   *\n   * @constant\n   */\n  BASIC: Object.freeze({\n    vertexFormat: VertexFormat.POSITION_AND_NORMAL,\n    vertexShaderSource: BasicMaterialAppearanceVS,\n    fragmentShaderSource: BasicMaterialAppearanceFS,\n  }),\n  /**\n   * Materials with textures, which require <code>position</code>,\n   * <code>normal</code>, and <code>st</code> vertex attributes,\n   * are supported.  The vast majority of materials fall into this category.\n   *\n   * @constant\n   */\n  TEXTURED: Object.freeze({\n    vertexFormat: VertexFormat.POSITION_NORMAL_AND_ST,\n    vertexShaderSource: TexturedMaterialAppearanceVS,\n    fragmentShaderSource: TexturedMaterialAppearanceFS,\n  }),\n  /**\n   * All materials, including those that work in tangent space, are supported.\n   * This requires <code>position</code>, <code>normal</code>, <code>st</code>,\n   * <code>tangent</code>, and <code>bitangent</code> vertex attributes.\n   *\n   * @constant\n   */\n  ALL: Object.freeze({\n    vertexFormat: VertexFormat.ALL,\n    vertexShaderSource: AllMaterialAppearanceVS,\n    fragmentShaderSource: AllMaterialAppearanceFS,\n  }),\n};\nexport default MaterialAppearance;\n"]},"metadata":{},"sourceType":"module"}