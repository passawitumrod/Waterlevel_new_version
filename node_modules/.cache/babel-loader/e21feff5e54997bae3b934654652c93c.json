{"ast":null,"code":"import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Resource from \"../Core/Resource.js\";\nimport ColorBlendMode from \"../Scene/ColorBlendMode.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport Model from \"../Scene/Model.js\";\nimport ModelAnimationLoop from \"../Scene/ModelAnimationLoop.js\";\nimport ShadowMode from \"../Scene/ShadowMode.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\nvar defaultScale = 1.0;\nvar defaultMinimumPixelSize = 0.0;\nvar defaultIncrementallyLoadTextures = true;\nvar defaultClampAnimations = true;\nvar defaultShadows = ShadowMode.ENABLED;\nvar defaultHeightReference = HeightReference.NONE;\nvar defaultSilhouetteColor = Color.RED;\nvar defaultSilhouetteSize = 0.0;\nvar defaultColor = Color.WHITE;\nvar defaultColorBlendMode = ColorBlendMode.HIGHLIGHT;\nvar defaultColorBlendAmount = 0.5;\nvar defaultImageBasedLightingFactor = new Cartesian2(1.0, 1.0);\nvar modelMatrixScratch = new Matrix4();\nvar nodeMatrixScratch = new Matrix4();\n/**\n * A {@link Visualizer} which maps {@link Entity#model} to a {@link Model}.\n * @alias ModelVisualizer\n * @constructor\n *\n * @param {Scene} scene The scene the primitives will be rendered in.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n */\n\nfunction ModelVisualizer(scene, entityCollection) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n\n  if (!defined(entityCollection)) {\n    throw new DeveloperError(\"entityCollection is required.\");\n  } //>>includeEnd('debug');\n\n\n  entityCollection.collectionChanged.addEventListener(ModelVisualizer.prototype._onCollectionChanged, this);\n  this._scene = scene;\n  this._primitives = scene.primitives;\n  this._entityCollection = entityCollection;\n  this._modelHash = {};\n  this._entitiesToVisualize = new AssociativeArray();\n\n  this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n}\n/**\n * Updates models created this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {Boolean} This function always returns true.\n */\n\n\nModelVisualizer.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  } //>>includeEnd('debug');\n\n\n  var entities = this._entitiesToVisualize.values;\n  var modelHash = this._modelHash;\n  var primitives = this._primitives;\n\n  for (var i = 0, len = entities.length; i < len; i++) {\n    var entity = entities[i];\n    var modelGraphics = entity._model;\n    var resource;\n    var modelData = modelHash[entity.id];\n    var show = entity.isShowing && entity.isAvailable(time) && Property.getValueOrDefault(modelGraphics._show, time, true);\n    var modelMatrix;\n\n    if (show) {\n      modelMatrix = entity.computeModelMatrix(time, modelMatrixScratch);\n      resource = Resource.createIfNeeded(Property.getValueOrUndefined(modelGraphics._uri, time));\n      show = defined(modelMatrix) && defined(resource);\n    }\n\n    if (!show) {\n      if (defined(modelData)) {\n        modelData.modelPrimitive.show = false;\n      }\n\n      continue;\n    }\n\n    var model = defined(modelData) ? modelData.modelPrimitive : undefined;\n\n    if (!defined(model) || resource.url !== modelData.url) {\n      if (defined(model)) {\n        primitives.removeAndDestroy(model);\n        delete modelHash[entity.id];\n      }\n\n      model = Model.fromGltf({\n        url: resource,\n        incrementallyLoadTextures: Property.getValueOrDefault(modelGraphics._incrementallyLoadTextures, time, defaultIncrementallyLoadTextures),\n        scene: this._scene\n      });\n      model.id = entity;\n      primitives.add(model);\n      modelData = {\n        modelPrimitive: model,\n        url: resource.url,\n        animationsRunning: false,\n        nodeTransformationsScratch: {},\n        articulationsScratch: {},\n        loadFail: false\n      };\n      modelHash[entity.id] = modelData;\n      checkModelLoad(model, entity, modelHash);\n    }\n\n    model.show = true;\n    model.scale = Property.getValueOrDefault(modelGraphics._scale, time, defaultScale);\n    model.minimumPixelSize = Property.getValueOrDefault(modelGraphics._minimumPixelSize, time, defaultMinimumPixelSize);\n    model.maximumScale = Property.getValueOrUndefined(modelGraphics._maximumScale, time);\n    model.modelMatrix = Matrix4.clone(modelMatrix, model.modelMatrix);\n    model.shadows = Property.getValueOrDefault(modelGraphics._shadows, time, defaultShadows);\n    model.heightReference = Property.getValueOrDefault(modelGraphics._heightReference, time, defaultHeightReference);\n    model.distanceDisplayCondition = Property.getValueOrUndefined(modelGraphics._distanceDisplayCondition, time);\n    model.silhouetteColor = Property.getValueOrDefault(modelGraphics._silhouetteColor, time, defaultSilhouetteColor, model._silhouetteColor);\n    model.silhouetteSize = Property.getValueOrDefault(modelGraphics._silhouetteSize, time, defaultSilhouetteSize);\n    model.color = Property.getValueOrDefault(modelGraphics._color, time, defaultColor, model._color);\n    model.colorBlendMode = Property.getValueOrDefault(modelGraphics._colorBlendMode, time, defaultColorBlendMode);\n    model.colorBlendAmount = Property.getValueOrDefault(modelGraphics._colorBlendAmount, time, defaultColorBlendAmount);\n    model.clippingPlanes = Property.getValueOrUndefined(modelGraphics._clippingPlanes, time);\n    model.clampAnimations = Property.getValueOrDefault(modelGraphics._clampAnimations, time, defaultClampAnimations);\n    model.imageBasedLightingFactor = Property.getValueOrDefault(modelGraphics._imageBasedLightingFactor, time, defaultImageBasedLightingFactor);\n    model.lightColor = Property.getValueOrUndefined(modelGraphics._lightColor, time);\n\n    if (model.ready) {\n      var runAnimations = Property.getValueOrDefault(modelGraphics._runAnimations, time, true);\n\n      if (modelData.animationsRunning !== runAnimations) {\n        if (runAnimations) {\n          model.activeAnimations.addAll({\n            loop: ModelAnimationLoop.REPEAT\n          });\n        } else {\n          model.activeAnimations.removeAll();\n        }\n\n        modelData.animationsRunning = runAnimations;\n      } // Apply node transformations\n\n\n      var nodeTransformations = Property.getValueOrUndefined(modelGraphics._nodeTransformations, time, modelData.nodeTransformationsScratch);\n\n      if (defined(nodeTransformations)) {\n        var nodeNames = Object.keys(nodeTransformations);\n\n        for (var nodeIndex = 0, nodeLength = nodeNames.length; nodeIndex < nodeLength; ++nodeIndex) {\n          var nodeName = nodeNames[nodeIndex];\n          var nodeTransformation = nodeTransformations[nodeName];\n\n          if (!defined(nodeTransformation)) {\n            continue;\n          }\n\n          var modelNode = model.getNode(nodeName);\n\n          if (!defined(modelNode)) {\n            continue;\n          }\n\n          var transformationMatrix = Matrix4.fromTranslationRotationScale(nodeTransformation, nodeMatrixScratch);\n          modelNode.matrix = Matrix4.multiply(modelNode.originalMatrix, transformationMatrix, transformationMatrix);\n        }\n      } // Apply articulations\n\n\n      var anyArticulationUpdated = false;\n      var articulations = Property.getValueOrUndefined(modelGraphics._articulations, time, modelData.articulationsScratch);\n\n      if (defined(articulations)) {\n        var articulationStageKeys = Object.keys(articulations);\n\n        for (var s = 0, numKeys = articulationStageKeys.length; s < numKeys; ++s) {\n          var key = articulationStageKeys[s];\n          var articulationStageValue = articulations[key];\n\n          if (!defined(articulationStageValue)) {\n            continue;\n          }\n\n          anyArticulationUpdated = true;\n          model.setArticulationStage(key, articulationStageValue);\n        }\n      }\n\n      if (anyArticulationUpdated) {\n        model.applyArticulations();\n      }\n    }\n  }\n\n  return true;\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\n\n\nModelVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Removes and destroys all primitives created by this instance.\n */\n\n\nModelVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(ModelVisualizer.prototype._onCollectionChanged, this);\n\n  var entities = this._entitiesToVisualize.values;\n  var modelHash = this._modelHash;\n  var primitives = this._primitives;\n\n  for (var i = entities.length - 1; i > -1; i--) {\n    removeModel(this, entities[i], modelHash, primitives);\n  }\n\n  return destroyObject(this);\n};\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\n\n\nModelVisualizer.prototype.getBoundingSphere = function (entity, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required.\");\n  }\n\n  if (!defined(result)) {\n    throw new DeveloperError(\"result is required.\");\n  } //>>includeEnd('debug');\n\n\n  var modelData = this._modelHash[entity.id];\n\n  if (!defined(modelData) || modelData.loadFail) {\n    return BoundingSphereState.FAILED;\n  }\n\n  var model = modelData.modelPrimitive;\n\n  if (!defined(model) || !model.show) {\n    return BoundingSphereState.FAILED;\n  }\n\n  if (!model.ready) {\n    return BoundingSphereState.PENDING;\n  }\n\n  if (model.heightReference === HeightReference.NONE) {\n    BoundingSphere.transform(model.boundingSphere, model.modelMatrix, result);\n  } else {\n    if (!defined(model._clampedModelMatrix)) {\n      return BoundingSphereState.PENDING;\n    }\n\n    BoundingSphere.transform(model.boundingSphere, model._clampedModelMatrix, result);\n  }\n\n  return BoundingSphereState.DONE;\n};\n/**\n * @private\n */\n\n\nModelVisualizer.prototype._onCollectionChanged = function (entityCollection, added, removed, changed) {\n  var i;\n  var entity;\n  var entities = this._entitiesToVisualize;\n  var modelHash = this._modelHash;\n  var primitives = this._primitives;\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n\n    if (defined(entity._model) && defined(entity._position)) {\n      entities.set(entity.id, entity);\n    }\n  }\n\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n\n    if (defined(entity._model) && defined(entity._position)) {\n      clearNodeTransformationsArticulationsScratch(entity, modelHash);\n      entities.set(entity.id, entity);\n    } else {\n      removeModel(this, entity, modelHash, primitives);\n      entities.remove(entity.id);\n    }\n  }\n\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    removeModel(this, entity, modelHash, primitives);\n    entities.remove(entity.id);\n  }\n};\n\nfunction removeModel(visualizer, entity, modelHash, primitives) {\n  var modelData = modelHash[entity.id];\n\n  if (defined(modelData)) {\n    primitives.removeAndDestroy(modelData.modelPrimitive);\n    delete modelHash[entity.id];\n  }\n}\n\nfunction clearNodeTransformationsArticulationsScratch(entity, modelHash) {\n  var modelData = modelHash[entity.id];\n\n  if (defined(modelData)) {\n    modelData.nodeTransformationsScratch = {};\n    modelData.articulationsScratch = {};\n  }\n}\n\nfunction checkModelLoad(model, entity, modelHash) {\n  model.readyPromise.otherwise(function (error) {\n    console.error(error);\n    modelHash[entity.id].loadFail = true;\n  });\n}\n\nexport default ModelVisualizer;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/ModelVisualizer.js"],"names":["AssociativeArray","BoundingSphere","Cartesian2","Color","defined","destroyObject","DeveloperError","Matrix4","Resource","ColorBlendMode","HeightReference","Model","ModelAnimationLoop","ShadowMode","BoundingSphereState","Property","defaultScale","defaultMinimumPixelSize","defaultIncrementallyLoadTextures","defaultClampAnimations","defaultShadows","ENABLED","defaultHeightReference","NONE","defaultSilhouetteColor","RED","defaultSilhouetteSize","defaultColor","WHITE","defaultColorBlendMode","HIGHLIGHT","defaultColorBlendAmount","defaultImageBasedLightingFactor","modelMatrixScratch","nodeMatrixScratch","ModelVisualizer","scene","entityCollection","collectionChanged","addEventListener","prototype","_onCollectionChanged","_scene","_primitives","primitives","_entityCollection","_modelHash","_entitiesToVisualize","values","update","time","entities","modelHash","i","len","length","entity","modelGraphics","_model","resource","modelData","id","show","isShowing","isAvailable","getValueOrDefault","_show","modelMatrix","computeModelMatrix","createIfNeeded","getValueOrUndefined","_uri","modelPrimitive","model","undefined","url","removeAndDestroy","fromGltf","incrementallyLoadTextures","_incrementallyLoadTextures","add","animationsRunning","nodeTransformationsScratch","articulationsScratch","loadFail","checkModelLoad","scale","_scale","minimumPixelSize","_minimumPixelSize","maximumScale","_maximumScale","clone","shadows","_shadows","heightReference","_heightReference","distanceDisplayCondition","_distanceDisplayCondition","silhouetteColor","_silhouetteColor","silhouetteSize","_silhouetteSize","color","_color","colorBlendMode","_colorBlendMode","colorBlendAmount","_colorBlendAmount","clippingPlanes","_clippingPlanes","clampAnimations","_clampAnimations","imageBasedLightingFactor","_imageBasedLightingFactor","lightColor","_lightColor","ready","runAnimations","_runAnimations","activeAnimations","addAll","loop","REPEAT","removeAll","nodeTransformations","_nodeTransformations","nodeNames","Object","keys","nodeIndex","nodeLength","nodeName","nodeTransformation","modelNode","getNode","transformationMatrix","fromTranslationRotationScale","matrix","multiply","originalMatrix","anyArticulationUpdated","articulations","_articulations","articulationStageKeys","s","numKeys","key","articulationStageValue","setArticulationStage","applyArticulations","isDestroyed","destroy","removeEventListener","removeModel","getBoundingSphere","result","FAILED","PENDING","transform","boundingSphere","_clampedModelMatrix","DONE","added","removed","changed","_position","set","clearNodeTransformationsArticulationsScratch","remove","visualizer","readyPromise","otherwise","error","console"],"mappings":"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","sourcesContent":["import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Resource from \"../Core/Resource.js\";\nimport ColorBlendMode from \"../Scene/ColorBlendMode.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport Model from \"../Scene/Model.js\";\nimport ModelAnimationLoop from \"../Scene/ModelAnimationLoop.js\";\nimport ShadowMode from \"../Scene/ShadowMode.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\n\nvar defaultScale = 1.0;\nvar defaultMinimumPixelSize = 0.0;\nvar defaultIncrementallyLoadTextures = true;\nvar defaultClampAnimations = true;\nvar defaultShadows = ShadowMode.ENABLED;\nvar defaultHeightReference = HeightReference.NONE;\nvar defaultSilhouetteColor = Color.RED;\nvar defaultSilhouetteSize = 0.0;\nvar defaultColor = Color.WHITE;\nvar defaultColorBlendMode = ColorBlendMode.HIGHLIGHT;\nvar defaultColorBlendAmount = 0.5;\nvar defaultImageBasedLightingFactor = new Cartesian2(1.0, 1.0);\n\nvar modelMatrixScratch = new Matrix4();\nvar nodeMatrixScratch = new Matrix4();\n\n/**\n * A {@link Visualizer} which maps {@link Entity#model} to a {@link Model}.\n * @alias ModelVisualizer\n * @constructor\n *\n * @param {Scene} scene The scene the primitives will be rendered in.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n */\nfunction ModelVisualizer(scene, entityCollection) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  if (!defined(entityCollection)) {\n    throw new DeveloperError(\"entityCollection is required.\");\n  }\n  //>>includeEnd('debug');\n\n  entityCollection.collectionChanged.addEventListener(\n    ModelVisualizer.prototype._onCollectionChanged,\n    this\n  );\n\n  this._scene = scene;\n  this._primitives = scene.primitives;\n  this._entityCollection = entityCollection;\n  this._modelHash = {};\n  this._entitiesToVisualize = new AssociativeArray();\n  this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n}\n\n/**\n * Updates models created this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {Boolean} This function always returns true.\n */\nModelVisualizer.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var entities = this._entitiesToVisualize.values;\n  var modelHash = this._modelHash;\n  var primitives = this._primitives;\n\n  for (var i = 0, len = entities.length; i < len; i++) {\n    var entity = entities[i];\n    var modelGraphics = entity._model;\n\n    var resource;\n    var modelData = modelHash[entity.id];\n    var show =\n      entity.isShowing &&\n      entity.isAvailable(time) &&\n      Property.getValueOrDefault(modelGraphics._show, time, true);\n\n    var modelMatrix;\n    if (show) {\n      modelMatrix = entity.computeModelMatrix(time, modelMatrixScratch);\n      resource = Resource.createIfNeeded(\n        Property.getValueOrUndefined(modelGraphics._uri, time)\n      );\n      show = defined(modelMatrix) && defined(resource);\n    }\n\n    if (!show) {\n      if (defined(modelData)) {\n        modelData.modelPrimitive.show = false;\n      }\n      continue;\n    }\n\n    var model = defined(modelData) ? modelData.modelPrimitive : undefined;\n    if (!defined(model) || resource.url !== modelData.url) {\n      if (defined(model)) {\n        primitives.removeAndDestroy(model);\n        delete modelHash[entity.id];\n      }\n      model = Model.fromGltf({\n        url: resource,\n        incrementallyLoadTextures: Property.getValueOrDefault(\n          modelGraphics._incrementallyLoadTextures,\n          time,\n          defaultIncrementallyLoadTextures\n        ),\n        scene: this._scene,\n      });\n      model.id = entity;\n      primitives.add(model);\n\n      modelData = {\n        modelPrimitive: model,\n        url: resource.url,\n        animationsRunning: false,\n        nodeTransformationsScratch: {},\n        articulationsScratch: {},\n        loadFail: false,\n      };\n      modelHash[entity.id] = modelData;\n\n      checkModelLoad(model, entity, modelHash);\n    }\n\n    model.show = true;\n    model.scale = Property.getValueOrDefault(\n      modelGraphics._scale,\n      time,\n      defaultScale\n    );\n    model.minimumPixelSize = Property.getValueOrDefault(\n      modelGraphics._minimumPixelSize,\n      time,\n      defaultMinimumPixelSize\n    );\n    model.maximumScale = Property.getValueOrUndefined(\n      modelGraphics._maximumScale,\n      time\n    );\n    model.modelMatrix = Matrix4.clone(modelMatrix, model.modelMatrix);\n    model.shadows = Property.getValueOrDefault(\n      modelGraphics._shadows,\n      time,\n      defaultShadows\n    );\n    model.heightReference = Property.getValueOrDefault(\n      modelGraphics._heightReference,\n      time,\n      defaultHeightReference\n    );\n    model.distanceDisplayCondition = Property.getValueOrUndefined(\n      modelGraphics._distanceDisplayCondition,\n      time\n    );\n    model.silhouetteColor = Property.getValueOrDefault(\n      modelGraphics._silhouetteColor,\n      time,\n      defaultSilhouetteColor,\n      model._silhouetteColor\n    );\n    model.silhouetteSize = Property.getValueOrDefault(\n      modelGraphics._silhouetteSize,\n      time,\n      defaultSilhouetteSize\n    );\n    model.color = Property.getValueOrDefault(\n      modelGraphics._color,\n      time,\n      defaultColor,\n      model._color\n    );\n    model.colorBlendMode = Property.getValueOrDefault(\n      modelGraphics._colorBlendMode,\n      time,\n      defaultColorBlendMode\n    );\n    model.colorBlendAmount = Property.getValueOrDefault(\n      modelGraphics._colorBlendAmount,\n      time,\n      defaultColorBlendAmount\n    );\n    model.clippingPlanes = Property.getValueOrUndefined(\n      modelGraphics._clippingPlanes,\n      time\n    );\n    model.clampAnimations = Property.getValueOrDefault(\n      modelGraphics._clampAnimations,\n      time,\n      defaultClampAnimations\n    );\n    model.imageBasedLightingFactor = Property.getValueOrDefault(\n      modelGraphics._imageBasedLightingFactor,\n      time,\n      defaultImageBasedLightingFactor\n    );\n    model.lightColor = Property.getValueOrUndefined(\n      modelGraphics._lightColor,\n      time\n    );\n\n    if (model.ready) {\n      var runAnimations = Property.getValueOrDefault(\n        modelGraphics._runAnimations,\n        time,\n        true\n      );\n      if (modelData.animationsRunning !== runAnimations) {\n        if (runAnimations) {\n          model.activeAnimations.addAll({\n            loop: ModelAnimationLoop.REPEAT,\n          });\n        } else {\n          model.activeAnimations.removeAll();\n        }\n        modelData.animationsRunning = runAnimations;\n      }\n\n      // Apply node transformations\n      var nodeTransformations = Property.getValueOrUndefined(\n        modelGraphics._nodeTransformations,\n        time,\n        modelData.nodeTransformationsScratch\n      );\n      if (defined(nodeTransformations)) {\n        var nodeNames = Object.keys(nodeTransformations);\n        for (\n          var nodeIndex = 0, nodeLength = nodeNames.length;\n          nodeIndex < nodeLength;\n          ++nodeIndex\n        ) {\n          var nodeName = nodeNames[nodeIndex];\n\n          var nodeTransformation = nodeTransformations[nodeName];\n          if (!defined(nodeTransformation)) {\n            continue;\n          }\n\n          var modelNode = model.getNode(nodeName);\n          if (!defined(modelNode)) {\n            continue;\n          }\n\n          var transformationMatrix = Matrix4.fromTranslationRotationScale(\n            nodeTransformation,\n            nodeMatrixScratch\n          );\n          modelNode.matrix = Matrix4.multiply(\n            modelNode.originalMatrix,\n            transformationMatrix,\n            transformationMatrix\n          );\n        }\n      }\n\n      // Apply articulations\n      var anyArticulationUpdated = false;\n      var articulations = Property.getValueOrUndefined(\n        modelGraphics._articulations,\n        time,\n        modelData.articulationsScratch\n      );\n      if (defined(articulations)) {\n        var articulationStageKeys = Object.keys(articulations);\n        for (\n          var s = 0, numKeys = articulationStageKeys.length;\n          s < numKeys;\n          ++s\n        ) {\n          var key = articulationStageKeys[s];\n\n          var articulationStageValue = articulations[key];\n          if (!defined(articulationStageValue)) {\n            continue;\n          }\n\n          anyArticulationUpdated = true;\n          model.setArticulationStage(key, articulationStageValue);\n        }\n      }\n\n      if (anyArticulationUpdated) {\n        model.applyArticulations();\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\nModelVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Removes and destroys all primitives created by this instance.\n */\nModelVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(\n    ModelVisualizer.prototype._onCollectionChanged,\n    this\n  );\n  var entities = this._entitiesToVisualize.values;\n  var modelHash = this._modelHash;\n  var primitives = this._primitives;\n  for (var i = entities.length - 1; i > -1; i--) {\n    removeModel(this, entities[i], modelHash, primitives);\n  }\n  return destroyObject(this);\n};\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nModelVisualizer.prototype.getBoundingSphere = function (entity, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required.\");\n  }\n  if (!defined(result)) {\n    throw new DeveloperError(\"result is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var modelData = this._modelHash[entity.id];\n  if (!defined(modelData) || modelData.loadFail) {\n    return BoundingSphereState.FAILED;\n  }\n\n  var model = modelData.modelPrimitive;\n  if (!defined(model) || !model.show) {\n    return BoundingSphereState.FAILED;\n  }\n\n  if (!model.ready) {\n    return BoundingSphereState.PENDING;\n  }\n\n  if (model.heightReference === HeightReference.NONE) {\n    BoundingSphere.transform(model.boundingSphere, model.modelMatrix, result);\n  } else {\n    if (!defined(model._clampedModelMatrix)) {\n      return BoundingSphereState.PENDING;\n    }\n    BoundingSphere.transform(\n      model.boundingSphere,\n      model._clampedModelMatrix,\n      result\n    );\n  }\n  return BoundingSphereState.DONE;\n};\n\n/**\n * @private\n */\nModelVisualizer.prototype._onCollectionChanged = function (\n  entityCollection,\n  added,\n  removed,\n  changed\n) {\n  var i;\n  var entity;\n  var entities = this._entitiesToVisualize;\n  var modelHash = this._modelHash;\n  var primitives = this._primitives;\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n    if (defined(entity._model) && defined(entity._position)) {\n      entities.set(entity.id, entity);\n    }\n  }\n\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n    if (defined(entity._model) && defined(entity._position)) {\n      clearNodeTransformationsArticulationsScratch(entity, modelHash);\n      entities.set(entity.id, entity);\n    } else {\n      removeModel(this, entity, modelHash, primitives);\n      entities.remove(entity.id);\n    }\n  }\n\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    removeModel(this, entity, modelHash, primitives);\n    entities.remove(entity.id);\n  }\n};\n\nfunction removeModel(visualizer, entity, modelHash, primitives) {\n  var modelData = modelHash[entity.id];\n  if (defined(modelData)) {\n    primitives.removeAndDestroy(modelData.modelPrimitive);\n    delete modelHash[entity.id];\n  }\n}\n\nfunction clearNodeTransformationsArticulationsScratch(entity, modelHash) {\n  var modelData = modelHash[entity.id];\n  if (defined(modelData)) {\n    modelData.nodeTransformationsScratch = {};\n    modelData.articulationsScratch = {};\n  }\n}\n\nfunction checkModelLoad(model, entity, modelHash) {\n  model.readyPromise.otherwise(function (error) {\n    console.error(error);\n    modelHash[entity.id].loadFail = true;\n  });\n}\nexport default ModelVisualizer;\n"]},"metadata":{},"sourceType":"module"}