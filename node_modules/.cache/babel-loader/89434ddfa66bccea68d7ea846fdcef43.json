{"ast":null,"code":"import addExtensionsUsed from './addExtensionsUsed.js';\nimport ForEach from './ForEach.js';\nimport defaultValue from '../../Core/defaultValue.js';\nimport defined from '../../Core/defined.js';\nimport WebGLConstants from '../../Core/WebGLConstants.js';\nvar defaultBlendEquation = [WebGLConstants.FUNC_ADD, WebGLConstants.FUNC_ADD];\nvar defaultBlendFactors = [WebGLConstants.ONE, WebGLConstants.ZERO, WebGLConstants.ONE, WebGLConstants.ZERO];\n\nfunction isStateEnabled(renderStates, state) {\n  var enabled = renderStates.enable;\n\n  if (!defined(enabled)) {\n    return false;\n  }\n\n  return enabled.indexOf(state) > -1;\n}\n\nvar supportedBlendFactors = [WebGLConstants.ZERO, WebGLConstants.ONE, WebGLConstants.SRC_COLOR, WebGLConstants.ONE_MINUS_SRC_COLOR, WebGLConstants.SRC_ALPHA, WebGLConstants.ONE_MINUS_SRC_ALPHA, WebGLConstants.DST_ALPHA, WebGLConstants.ONE_MINUS_DST_ALPHA, WebGLConstants.DST_COLOR, WebGLConstants.ONE_MINUS_DST_COLOR]; // If any of the blend factors are not supported, return the default\n\nfunction getSupportedBlendFactors(value, defaultValue) {\n  if (!defined(value)) {\n    return defaultValue;\n  }\n\n  for (var i = 0; i < 4; i++) {\n    if (supportedBlendFactors.indexOf(value[i]) === -1) {\n      return defaultValue;\n    }\n  }\n\n  return value;\n}\n/**\n * Move glTF 1.0 technique render states to glTF 2.0 materials properties and KHR_blend extension.\n *\n * @param {Object} gltf A javascript object containing a glTF asset.\n * @returns {Object} The updated glTF asset.\n *\n * @private\n */\n\n\nfunction moveTechniqueRenderStates(gltf) {\n  var blendingForTechnique = {};\n  var materialPropertiesForTechnique = {};\n  var techniquesLegacy = gltf.techniques;\n\n  if (!defined(techniquesLegacy)) {\n    return gltf;\n  }\n\n  ForEach.technique(gltf, function (techniqueLegacy, techniqueIndex) {\n    var renderStates = techniqueLegacy.states;\n\n    if (defined(renderStates)) {\n      var materialProperties = materialPropertiesForTechnique[techniqueIndex] = {}; // If BLEND is enabled, the material should have alpha mode BLEND\n\n      if (isStateEnabled(renderStates, WebGLConstants.BLEND)) {\n        materialProperties.alphaMode = 'BLEND';\n        var blendFunctions = renderStates.functions;\n\n        if (defined(blendFunctions) && (defined(blendFunctions.blendEquationSeparate) || defined(blendFunctions.blendFuncSeparate))) {\n          blendingForTechnique[techniqueIndex] = {\n            blendEquation: defaultValue(blendFunctions.blendEquationSeparate, defaultBlendEquation),\n            blendFactors: getSupportedBlendFactors(blendFunctions.blendFuncSeparate, defaultBlendFactors)\n          };\n        }\n      } // If CULL_FACE is not enabled, the material should be doubleSided\n\n\n      if (!isStateEnabled(renderStates, WebGLConstants.CULL_FACE)) {\n        materialProperties.doubleSided = true;\n      }\n\n      delete techniqueLegacy.states;\n    }\n  });\n\n  if (Object.keys(blendingForTechnique).length > 0) {\n    if (!defined(gltf.extensions)) {\n      gltf.extensions = {};\n    }\n\n    addExtensionsUsed(gltf, 'KHR_blend');\n  }\n\n  ForEach.material(gltf, function (material) {\n    if (defined(material.technique)) {\n      var materialProperties = materialPropertiesForTechnique[material.technique];\n      ForEach.objectLegacy(materialProperties, function (value, property) {\n        material[property] = value;\n      });\n      var blending = blendingForTechnique[material.technique];\n\n      if (defined(blending)) {\n        if (!defined(material.extensions)) {\n          material.extensions = {};\n        }\n\n        material.extensions.KHR_blend = blending;\n      }\n    }\n  });\n  return gltf;\n}\n\nexport default moveTechniqueRenderStates;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/ThirdParty/GltfPipeline/moveTechniqueRenderStates.js"],"names":["addExtensionsUsed","ForEach","defaultValue","defined","WebGLConstants","defaultBlendEquation","FUNC_ADD","defaultBlendFactors","ONE","ZERO","isStateEnabled","renderStates","state","enabled","enable","indexOf","supportedBlendFactors","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","getSupportedBlendFactors","value","i","moveTechniqueRenderStates","gltf","blendingForTechnique","materialPropertiesForTechnique","techniquesLegacy","techniques","technique","techniqueLegacy","techniqueIndex","states","materialProperties","BLEND","alphaMode","blendFunctions","functions","blendEquationSeparate","blendFuncSeparate","blendEquation","blendFactors","CULL_FACE","doubleSided","Object","keys","length","extensions","material","objectLegacy","property","blending","KHR_blend"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,wBAA9B;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AAEI,IAAIC,oBAAoB,GAAG,CACvBD,cAAc,CAACE,QADQ,EAEvBF,cAAc,CAACE,QAFQ,CAA3B;AAKA,IAAIC,mBAAmB,GAAG,CACtBH,cAAc,CAACI,GADO,EAEtBJ,cAAc,CAACK,IAFO,EAGtBL,cAAc,CAACI,GAHO,EAItBJ,cAAc,CAACK,IAJO,CAA1B;;AAOA,SAASC,cAAT,CAAwBC,YAAxB,EAAsCC,KAAtC,EAA6C;AACzC,MAAIC,OAAO,GAAGF,YAAY,CAACG,MAA3B;;AACA,MAAI,CAACX,OAAO,CAACU,OAAD,CAAZ,EAAuB;AACnB,WAAO,KAAP;AACH;;AAED,SAAQA,OAAO,CAACE,OAAR,CAAgBH,KAAhB,IAAyB,CAAC,CAAlC;AACH;;AAED,IAAII,qBAAqB,GAAG,CACxBZ,cAAc,CAACK,IADS,EAExBL,cAAc,CAACI,GAFS,EAGxBJ,cAAc,CAACa,SAHS,EAIxBb,cAAc,CAACc,mBAJS,EAKxBd,cAAc,CAACe,SALS,EAMxBf,cAAc,CAACgB,mBANS,EAOxBhB,cAAc,CAACiB,SAPS,EAQxBjB,cAAc,CAACkB,mBARS,EASxBlB,cAAc,CAACmB,SATS,EAUxBnB,cAAc,CAACoB,mBAVS,CAA5B,C,CAaA;;AACA,SAASC,wBAAT,CAAkCC,KAAlC,EAAyCxB,YAAzC,EAAuD;AACnD,MAAI,CAACC,OAAO,CAACuB,KAAD,CAAZ,EAAqB;AACjB,WAAOxB,YAAP;AACH;;AAED,OAAK,IAAIyB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,QAAIX,qBAAqB,CAACD,OAAtB,CAA8BW,KAAK,CAACC,CAAD,CAAnC,MAA4C,CAAC,CAAjD,EAAoD;AAChD,aAAOzB,YAAP;AACH;AACJ;;AAED,SAAOwB,KAAP;AACH;AAED;;;;;;;;;;AAQA,SAASE,yBAAT,CAAmCC,IAAnC,EAAyC;AACrC,MAAIC,oBAAoB,GAAG,EAA3B;AACA,MAAIC,8BAA8B,GAAG,EAArC;AACA,MAAIC,gBAAgB,GAAGH,IAAI,CAACI,UAA5B;;AACA,MAAI,CAAC9B,OAAO,CAAC6B,gBAAD,CAAZ,EAAgC;AAC5B,WAAOH,IAAP;AACH;;AAED5B,EAAAA,OAAO,CAACiC,SAAR,CAAkBL,IAAlB,EAAwB,UAAUM,eAAV,EAA2BC,cAA3B,EAA2C;AAC/D,QAAIzB,YAAY,GAAGwB,eAAe,CAACE,MAAnC;;AACA,QAAIlC,OAAO,CAACQ,YAAD,CAAX,EAA2B;AACvB,UAAI2B,kBAAkB,GAAGP,8BAA8B,CAACK,cAAD,CAA9B,GAAiD,EAA1E,CADuB,CAGvB;;AACA,UAAI1B,cAAc,CAACC,YAAD,EAAeP,cAAc,CAACmC,KAA9B,CAAlB,EAAwD;AACpDD,QAAAA,kBAAkB,CAACE,SAAnB,GAA+B,OAA/B;AAEA,YAAIC,cAAc,GAAG9B,YAAY,CAAC+B,SAAlC;;AACA,YAAIvC,OAAO,CAACsC,cAAD,CAAP,KAA4BtC,OAAO,CAACsC,cAAc,CAACE,qBAAhB,CAAP,IACrBxC,OAAO,CAACsC,cAAc,CAACG,iBAAhB,CADd,CAAJ,EACuD;AACnDd,UAAAA,oBAAoB,CAACM,cAAD,CAApB,GAAuC;AACnCS,YAAAA,aAAa,EAAE3C,YAAY,CAACuC,cAAc,CAACE,qBAAhB,EAAuCtC,oBAAvC,CADQ;AAEnCyC,YAAAA,YAAY,EAAErB,wBAAwB,CAACgB,cAAc,CAACG,iBAAhB,EAAmCrC,mBAAnC;AAFH,WAAvC;AAIH;AACJ,OAfsB,CAiBvB;;;AACA,UAAI,CAACG,cAAc,CAACC,YAAD,EAAeP,cAAc,CAAC2C,SAA9B,CAAnB,EAA6D;AACzDT,QAAAA,kBAAkB,CAACU,WAAnB,GAAiC,IAAjC;AACH;;AAED,aAAOb,eAAe,CAACE,MAAvB;AACH;AACJ,GA1BD;;AA4BA,MAAIY,MAAM,CAACC,IAAP,CAAYpB,oBAAZ,EAAkCqB,MAAlC,GAA2C,CAA/C,EAAkD;AAC9C,QAAI,CAAChD,OAAO,CAAC0B,IAAI,CAACuB,UAAN,CAAZ,EAA+B;AAC3BvB,MAAAA,IAAI,CAACuB,UAAL,GAAkB,EAAlB;AACH;;AAEDpD,IAAAA,iBAAiB,CAAC6B,IAAD,EAAO,WAAP,CAAjB;AACH;;AAED5B,EAAAA,OAAO,CAACoD,QAAR,CAAiBxB,IAAjB,EAAuB,UAAUwB,QAAV,EAAoB;AACvC,QAAIlD,OAAO,CAACkD,QAAQ,CAACnB,SAAV,CAAX,EAAiC;AAC7B,UAAII,kBAAkB,GAAGP,8BAA8B,CAACsB,QAAQ,CAACnB,SAAV,CAAvD;AACAjC,MAAAA,OAAO,CAACqD,YAAR,CAAqBhB,kBAArB,EAAyC,UAAUZ,KAAV,EAAiB6B,QAAjB,EAA2B;AAChEF,QAAAA,QAAQ,CAACE,QAAD,CAAR,GAAqB7B,KAArB;AACH,OAFD;AAIA,UAAI8B,QAAQ,GAAG1B,oBAAoB,CAACuB,QAAQ,CAACnB,SAAV,CAAnC;;AACA,UAAI/B,OAAO,CAACqD,QAAD,CAAX,EAAuB;AACnB,YAAI,CAACrD,OAAO,CAACkD,QAAQ,CAACD,UAAV,CAAZ,EAAmC;AAC/BC,UAAAA,QAAQ,CAACD,UAAT,GAAsB,EAAtB;AACH;;AAEDC,QAAAA,QAAQ,CAACD,UAAT,CAAoBK,SAApB,GAAgCD,QAAhC;AACH;AACJ;AACJ,GAhBD;AAkBA,SAAO3B,IAAP;AACH;;AAED,eAAeD,yBAAf","sourcesContent":["import addExtensionsUsed from './addExtensionsUsed.js'\nimport ForEach from './ForEach.js'\nimport defaultValue from '../../Core/defaultValue.js'\nimport defined from '../../Core/defined.js'\nimport WebGLConstants from '../../Core/WebGLConstants.js'\n\n    var defaultBlendEquation = [\n        WebGLConstants.FUNC_ADD,\n        WebGLConstants.FUNC_ADD\n    ];\n\n    var defaultBlendFactors = [\n        WebGLConstants.ONE,\n        WebGLConstants.ZERO,\n        WebGLConstants.ONE,\n        WebGLConstants.ZERO\n    ];\n\n    function isStateEnabled(renderStates, state) {\n        var enabled = renderStates.enable;\n        if (!defined(enabled)) {\n            return false;\n        }\n\n        return (enabled.indexOf(state) > -1);\n    }\n\n    var supportedBlendFactors = [\n        WebGLConstants.ZERO,\n        WebGLConstants.ONE,\n        WebGLConstants.SRC_COLOR,\n        WebGLConstants.ONE_MINUS_SRC_COLOR,\n        WebGLConstants.SRC_ALPHA,\n        WebGLConstants.ONE_MINUS_SRC_ALPHA,\n        WebGLConstants.DST_ALPHA,\n        WebGLConstants.ONE_MINUS_DST_ALPHA,\n        WebGLConstants.DST_COLOR,\n        WebGLConstants.ONE_MINUS_DST_COLOR\n    ];\n\n    // If any of the blend factors are not supported, return the default\n    function getSupportedBlendFactors(value, defaultValue) {\n        if (!defined(value)) {\n            return defaultValue;\n        }\n\n        for (var i = 0; i < 4; i++) {\n            if (supportedBlendFactors.indexOf(value[i]) === -1) {\n                return defaultValue;\n            }\n        }\n\n        return value;\n    }\n\n    /**\n     * Move glTF 1.0 technique render states to glTF 2.0 materials properties and KHR_blend extension.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @returns {Object} The updated glTF asset.\n     *\n     * @private\n     */\n    function moveTechniqueRenderStates(gltf) {\n        var blendingForTechnique = {};\n        var materialPropertiesForTechnique = {};\n        var techniquesLegacy = gltf.techniques;\n        if (!defined(techniquesLegacy)) {\n            return gltf;\n        }\n\n        ForEach.technique(gltf, function (techniqueLegacy, techniqueIndex) {\n            var renderStates = techniqueLegacy.states;\n            if (defined(renderStates)) {\n                var materialProperties = materialPropertiesForTechnique[techniqueIndex] = {};\n\n                // If BLEND is enabled, the material should have alpha mode BLEND\n                if (isStateEnabled(renderStates, WebGLConstants.BLEND)) {\n                    materialProperties.alphaMode = 'BLEND';\n\n                    var blendFunctions = renderStates.functions;\n                    if (defined(blendFunctions) && (defined(blendFunctions.blendEquationSeparate)\n                            || defined(blendFunctions.blendFuncSeparate))) {\n                        blendingForTechnique[techniqueIndex] = {\n                            blendEquation: defaultValue(blendFunctions.blendEquationSeparate, defaultBlendEquation),\n                            blendFactors: getSupportedBlendFactors(blendFunctions.blendFuncSeparate, defaultBlendFactors)\n                        };\n                    }\n                }\n\n                // If CULL_FACE is not enabled, the material should be doubleSided\n                if (!isStateEnabled(renderStates, WebGLConstants.CULL_FACE)) {\n                    materialProperties.doubleSided = true;\n                }\n\n                delete techniqueLegacy.states;\n            }\n        });\n\n        if (Object.keys(blendingForTechnique).length > 0) {\n            if (!defined(gltf.extensions)) {\n                gltf.extensions = {};\n            }\n\n            addExtensionsUsed(gltf, 'KHR_blend');\n        }\n\n        ForEach.material(gltf, function (material) {\n            if (defined(material.technique)) {\n                var materialProperties = materialPropertiesForTechnique[material.technique];\n                ForEach.objectLegacy(materialProperties, function (value, property) {\n                    material[property] = value;\n                });\n\n                var blending = blendingForTechnique[material.technique];\n                if (defined(blending)) {\n                    if (!defined(material.extensions)) {\n                        material.extensions = {};\n                    }\n\n                    material.extensions.KHR_blend = blending;\n                }\n            }\n        });\n\n        return gltf;\n    }\n\n    export default moveTechniqueRenderStates;\n"]},"metadata":{},"sourceType":"module"}