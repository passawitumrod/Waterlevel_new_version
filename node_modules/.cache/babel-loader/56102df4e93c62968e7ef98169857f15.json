{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport FeatureDetection from \"../Core/FeatureDetection.js\";\nimport VertexFormat from \"../Core/VertexFormat.js\";\nimport PerInstanceFlatColorAppearanceFS from \"../Shaders/Appearances/PerInstanceFlatColorAppearanceFS.js\";\nimport PolylineColorAppearanceVS from \"../Shaders/Appearances/PolylineColorAppearanceVS.js\";\nimport PolylineCommon from \"../Shaders/PolylineCommon.js\";\nimport Appearance from \"./Appearance.js\";\nvar defaultVertexShaderSource = PolylineCommon + \"\\n\" + PolylineColorAppearanceVS;\nvar defaultFragmentShaderSource = PerInstanceFlatColorAppearanceFS;\n\nif (!FeatureDetection.isInternetExplorer()) {\n  defaultVertexShaderSource = \"#define CLIP_POLYLINE \\n\" + defaultVertexShaderSource;\n}\n/**\n * An appearance for {@link GeometryInstance} instances with color attributes and\n * {@link PolylineGeometry} or {@link GroundPolylineGeometry}.\n * This allows several geometry instances, each with a different color, to\n * be drawn with the same {@link Primitive}.\n *\n * @alias PolylineColorAppearance\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.translucent=true] When <code>true</code>, the geometry is expected to appear translucent so {@link PolylineColorAppearance#renderState} has alpha blending enabled.\n * @param {String} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n * @param {String} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n * @param {RenderState} [options.renderState] Optional render state to override the default render state.\n *\n * @example\n * // A solid white line segment\n * var primitive = new Cesium.Primitive({\n *   geometryInstances : new Cesium.GeometryInstance({\n *     geometry : new Cesium.PolylineGeometry({\n *       positions : Cesium.Cartesian3.fromDegreesArray([\n *         0.0, 0.0,\n *         5.0, 0.0\n *       ]),\n *       width : 10.0,\n *       vertexFormat : Cesium.PolylineColorAppearance.VERTEX_FORMAT\n *     }),\n *     attributes : {\n *       color : Cesium.ColorGeometryInstanceAttribute.fromColor(new Cesium.Color(1.0, 1.0, 1.0, 1.0))\n *     }\n *   }),\n *   appearance : new Cesium.PolylineColorAppearance({\n *     translucent : false\n *   })\n * });\n */\n\n\nfunction PolylineColorAppearance(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var translucent = defaultValue(options.translucent, true);\n  var closed = false;\n  var vertexFormat = PolylineColorAppearance.VERTEX_FORMAT;\n  /**\n   * This property is part of the {@link Appearance} interface, but is not\n   * used by {@link PolylineColorAppearance} since a fully custom fragment shader is used.\n   *\n   * @type Material\n   *\n   * @default undefined\n   */\n\n  this.material = undefined;\n  /**\n   * When <code>true</code>, the geometry is expected to appear translucent so\n   * {@link PolylineColorAppearance#renderState} has alpha blending enabled.\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n\n  this.translucent = translucent;\n  this._vertexShaderSource = defaultValue(options.vertexShaderSource, defaultVertexShaderSource);\n  this._fragmentShaderSource = defaultValue(options.fragmentShaderSource, defaultFragmentShaderSource);\n  this._renderState = Appearance.getDefaultRenderState(translucent, closed, options.renderState);\n  this._closed = closed; // Non-derived members\n\n  this._vertexFormat = vertexFormat;\n}\n\nObject.defineProperties(PolylineColorAppearance.prototype, {\n  /**\n   * The GLSL source code for the vertex shader.\n   *\n   * @memberof PolylineColorAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  vertexShaderSource: {\n    get: function get() {\n      return this._vertexShaderSource;\n    }\n  },\n\n  /**\n   * The GLSL source code for the fragment shader.\n   *\n   * @memberof PolylineColorAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  fragmentShaderSource: {\n    get: function get() {\n      return this._fragmentShaderSource;\n    }\n  },\n\n  /**\n   * The WebGL fixed-function state to use when rendering the geometry.\n   * <p>\n   * The render state can be explicitly defined when constructing a {@link PolylineColorAppearance}\n   * instance, or it is set implicitly via {@link PolylineColorAppearance#translucent}.\n   * </p>\n   *\n   * @memberof PolylineColorAppearance.prototype\n   *\n   * @type {Object}\n   * @readonly\n   */\n  renderState: {\n    get: function get() {\n      return this._renderState;\n    }\n  },\n\n  /**\n   * When <code>true</code>, the geometry is expected to be closed so\n   * {@link PolylineColorAppearance#renderState} has backface culling enabled.\n   * This is always <code>false</code> for <code>PolylineColorAppearance</code>.\n   *\n   * @memberof PolylineColorAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  closed: {\n    get: function get() {\n      return this._closed;\n    }\n  },\n\n  /**\n   * The {@link VertexFormat} that this appearance instance is compatible with.\n   * A geometry can have more vertex attributes and still be compatible - at a\n   * potential performance cost - but it can't have less.\n   *\n   * @memberof PolylineColorAppearance.prototype\n   *\n   * @type VertexFormat\n   * @readonly\n   *\n   * @default {@link PolylineColorAppearance.VERTEX_FORMAT}\n   */\n  vertexFormat: {\n    get: function get() {\n      return this._vertexFormat;\n    }\n  }\n});\n/**\n * The {@link VertexFormat} that all {@link PolylineColorAppearance} instances\n * are compatible with. This requires only a <code>position</code> attribute.\n *\n * @type VertexFormat\n *\n * @constant\n */\n\nPolylineColorAppearance.VERTEX_FORMAT = VertexFormat.POSITION_ONLY;\n/**\n * Procedurally creates the full GLSL fragment shader source.\n *\n * @function\n *\n * @returns {String} The full GLSL fragment shader source.\n */\n\nPolylineColorAppearance.prototype.getFragmentShaderSource = Appearance.prototype.getFragmentShaderSource;\n/**\n * Determines if the geometry is translucent based on {@link PolylineColorAppearance#translucent}.\n *\n * @function\n *\n * @returns {Boolean} <code>true</code> if the appearance is translucent.\n */\n\nPolylineColorAppearance.prototype.isTranslucent = Appearance.prototype.isTranslucent;\n/**\n * Creates a render state.  This is not the final render state instance; instead,\n * it can contain a subset of render state properties identical to the render state\n * created in the context.\n *\n * @function\n *\n * @returns {Object} The render state.\n */\n\nPolylineColorAppearance.prototype.getRenderState = Appearance.prototype.getRenderState;\nexport default PolylineColorAppearance;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/PolylineColorAppearance.js"],"names":["defaultValue","FeatureDetection","VertexFormat","PerInstanceFlatColorAppearanceFS","PolylineColorAppearanceVS","PolylineCommon","Appearance","defaultVertexShaderSource","defaultFragmentShaderSource","isInternetExplorer","PolylineColorAppearance","options","EMPTY_OBJECT","translucent","closed","vertexFormat","VERTEX_FORMAT","material","undefined","_vertexShaderSource","vertexShaderSource","_fragmentShaderSource","fragmentShaderSource","_renderState","getDefaultRenderState","renderState","_closed","_vertexFormat","Object","defineProperties","prototype","get","POSITION_ONLY","getFragmentShaderSource","isTranslucent","getRenderState"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport FeatureDetection from \"../Core/FeatureDetection.js\";\nimport VertexFormat from \"../Core/VertexFormat.js\";\nimport PerInstanceFlatColorAppearanceFS from \"../Shaders/Appearances/PerInstanceFlatColorAppearanceFS.js\";\nimport PolylineColorAppearanceVS from \"../Shaders/Appearances/PolylineColorAppearanceVS.js\";\nimport PolylineCommon from \"../Shaders/PolylineCommon.js\";\nimport Appearance from \"./Appearance.js\";\n\nvar defaultVertexShaderSource =\n  PolylineCommon + \"\\n\" + PolylineColorAppearanceVS;\nvar defaultFragmentShaderSource = PerInstanceFlatColorAppearanceFS;\n\nif (!FeatureDetection.isInternetExplorer()) {\n  defaultVertexShaderSource =\n    \"#define CLIP_POLYLINE \\n\" + defaultVertexShaderSource;\n}\n\n/**\n * An appearance for {@link GeometryInstance} instances with color attributes and\n * {@link PolylineGeometry} or {@link GroundPolylineGeometry}.\n * This allows several geometry instances, each with a different color, to\n * be drawn with the same {@link Primitive}.\n *\n * @alias PolylineColorAppearance\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.translucent=true] When <code>true</code>, the geometry is expected to appear translucent so {@link PolylineColorAppearance#renderState} has alpha blending enabled.\n * @param {String} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n * @param {String} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n * @param {RenderState} [options.renderState] Optional render state to override the default render state.\n *\n * @example\n * // A solid white line segment\n * var primitive = new Cesium.Primitive({\n *   geometryInstances : new Cesium.GeometryInstance({\n *     geometry : new Cesium.PolylineGeometry({\n *       positions : Cesium.Cartesian3.fromDegreesArray([\n *         0.0, 0.0,\n *         5.0, 0.0\n *       ]),\n *       width : 10.0,\n *       vertexFormat : Cesium.PolylineColorAppearance.VERTEX_FORMAT\n *     }),\n *     attributes : {\n *       color : Cesium.ColorGeometryInstanceAttribute.fromColor(new Cesium.Color(1.0, 1.0, 1.0, 1.0))\n *     }\n *   }),\n *   appearance : new Cesium.PolylineColorAppearance({\n *     translucent : false\n *   })\n * });\n */\nfunction PolylineColorAppearance(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var translucent = defaultValue(options.translucent, true);\n  var closed = false;\n  var vertexFormat = PolylineColorAppearance.VERTEX_FORMAT;\n\n  /**\n   * This property is part of the {@link Appearance} interface, but is not\n   * used by {@link PolylineColorAppearance} since a fully custom fragment shader is used.\n   *\n   * @type Material\n   *\n   * @default undefined\n   */\n  this.material = undefined;\n\n  /**\n   * When <code>true</code>, the geometry is expected to appear translucent so\n   * {@link PolylineColorAppearance#renderState} has alpha blending enabled.\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  this.translucent = translucent;\n\n  this._vertexShaderSource = defaultValue(\n    options.vertexShaderSource,\n    defaultVertexShaderSource\n  );\n  this._fragmentShaderSource = defaultValue(\n    options.fragmentShaderSource,\n    defaultFragmentShaderSource\n  );\n  this._renderState = Appearance.getDefaultRenderState(\n    translucent,\n    closed,\n    options.renderState\n  );\n  this._closed = closed;\n\n  // Non-derived members\n\n  this._vertexFormat = vertexFormat;\n}\n\nObject.defineProperties(PolylineColorAppearance.prototype, {\n  /**\n   * The GLSL source code for the vertex shader.\n   *\n   * @memberof PolylineColorAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  vertexShaderSource: {\n    get: function () {\n      return this._vertexShaderSource;\n    },\n  },\n\n  /**\n   * The GLSL source code for the fragment shader.\n   *\n   * @memberof PolylineColorAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  fragmentShaderSource: {\n    get: function () {\n      return this._fragmentShaderSource;\n    },\n  },\n\n  /**\n   * The WebGL fixed-function state to use when rendering the geometry.\n   * <p>\n   * The render state can be explicitly defined when constructing a {@link PolylineColorAppearance}\n   * instance, or it is set implicitly via {@link PolylineColorAppearance#translucent}.\n   * </p>\n   *\n   * @memberof PolylineColorAppearance.prototype\n   *\n   * @type {Object}\n   * @readonly\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the geometry is expected to be closed so\n   * {@link PolylineColorAppearance#renderState} has backface culling enabled.\n   * This is always <code>false</code> for <code>PolylineColorAppearance</code>.\n   *\n   * @memberof PolylineColorAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  closed: {\n    get: function () {\n      return this._closed;\n    },\n  },\n\n  /**\n   * The {@link VertexFormat} that this appearance instance is compatible with.\n   * A geometry can have more vertex attributes and still be compatible - at a\n   * potential performance cost - but it can't have less.\n   *\n   * @memberof PolylineColorAppearance.prototype\n   *\n   * @type VertexFormat\n   * @readonly\n   *\n   * @default {@link PolylineColorAppearance.VERTEX_FORMAT}\n   */\n  vertexFormat: {\n    get: function () {\n      return this._vertexFormat;\n    },\n  },\n});\n\n/**\n * The {@link VertexFormat} that all {@link PolylineColorAppearance} instances\n * are compatible with. This requires only a <code>position</code> attribute.\n *\n * @type VertexFormat\n *\n * @constant\n */\nPolylineColorAppearance.VERTEX_FORMAT = VertexFormat.POSITION_ONLY;\n\n/**\n * Procedurally creates the full GLSL fragment shader source.\n *\n * @function\n *\n * @returns {String} The full GLSL fragment shader source.\n */\nPolylineColorAppearance.prototype.getFragmentShaderSource =\n  Appearance.prototype.getFragmentShaderSource;\n\n/**\n * Determines if the geometry is translucent based on {@link PolylineColorAppearance#translucent}.\n *\n * @function\n *\n * @returns {Boolean} <code>true</code> if the appearance is translucent.\n */\nPolylineColorAppearance.prototype.isTranslucent =\n  Appearance.prototype.isTranslucent;\n\n/**\n * Creates a render state.  This is not the final render state instance; instead,\n * it can contain a subset of render state properties identical to the render state\n * created in the context.\n *\n * @function\n *\n * @returns {Object} The render state.\n */\nPolylineColorAppearance.prototype.getRenderState =\n  Appearance.prototype.getRenderState;\nexport default PolylineColorAppearance;\n"]},"metadata":{},"sourceType":"module"}