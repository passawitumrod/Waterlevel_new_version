{"ast":null,"code":"import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport Primitive from \"../Scene/Primitive.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport MaterialProperty from \"./MaterialProperty.js\";\nimport Property from \"./Property.js\";\nvar colorScratch = new Color();\nvar distanceDisplayConditionScratch = new DistanceDisplayCondition();\nvar defaultDistanceDisplayCondition = new DistanceDisplayCondition();\nvar defaultOffset = Cartesian3.ZERO;\nvar offsetScratch = new Cartesian3();\n\nfunction Batch(primitives, translucent, appearanceType, depthFailAppearanceType, depthFailMaterialProperty, closed, shadows) {\n  this.translucent = translucent;\n  this.appearanceType = appearanceType;\n  this.depthFailAppearanceType = depthFailAppearanceType;\n  this.depthFailMaterialProperty = depthFailMaterialProperty;\n  this.depthFailMaterial = undefined;\n  this.closed = closed;\n  this.shadows = shadows;\n  this.primitives = primitives;\n  this.createPrimitive = false;\n  this.waitingOnCreate = false;\n  this.primitive = undefined;\n  this.oldPrimitive = undefined;\n  this.geometry = new AssociativeArray();\n  this.updaters = new AssociativeArray();\n  this.updatersWithAttributes = new AssociativeArray();\n  this.attributes = new AssociativeArray();\n  this.subscriptions = new AssociativeArray();\n  this.showsUpdated = new AssociativeArray();\n  this.itemsToRemove = [];\n  this.invalidated = false;\n  var removeMaterialSubscription;\n\n  if (defined(depthFailMaterialProperty)) {\n    removeMaterialSubscription = depthFailMaterialProperty.definitionChanged.addEventListener(Batch.prototype.onMaterialChanged, this);\n  }\n\n  this.removeMaterialSubscription = removeMaterialSubscription;\n}\n\nBatch.prototype.onMaterialChanged = function () {\n  this.invalidated = true;\n};\n\nBatch.prototype.isMaterial = function (updater) {\n  var material = this.depthFailMaterialProperty;\n  var updaterMaterial = updater.depthFailMaterialProperty;\n\n  if (updaterMaterial === material) {\n    return true;\n  }\n\n  if (defined(material)) {\n    return material.equals(updaterMaterial);\n  }\n\n  return false;\n};\n\nBatch.prototype.add = function (updater, instance) {\n  var id = updater.id;\n  this.createPrimitive = true;\n  this.geometry.set(id, instance);\n  this.updaters.set(id, updater);\n\n  if (!updater.hasConstantFill || !updater.fillMaterialProperty.isConstant || !Property.isConstant(updater.distanceDisplayConditionProperty) || !Property.isConstant(updater.terrainOffsetProperty)) {\n    this.updatersWithAttributes.set(id, updater);\n  } else {\n    var that = this;\n    this.subscriptions.set(id, updater.entity.definitionChanged.addEventListener(function (entity, propertyName, newValue, oldValue) {\n      if (propertyName === \"isShowing\") {\n        that.showsUpdated.set(updater.id, updater);\n      }\n    }));\n  }\n};\n\nBatch.prototype.remove = function (updater) {\n  var id = updater.id;\n  this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n\n  if (this.updaters.remove(id)) {\n    this.updatersWithAttributes.remove(id);\n    var unsubscribe = this.subscriptions.get(id);\n\n    if (defined(unsubscribe)) {\n      unsubscribe();\n      this.subscriptions.remove(id);\n      this.showsUpdated.remove(id);\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nBatch.prototype.update = function (time) {\n  var isUpdated = true;\n  var removedCount = 0;\n  var primitive = this.primitive;\n  var primitives = this.primitives;\n  var i;\n\n  if (this.createPrimitive) {\n    var geometries = this.geometry.values;\n    var geometriesLength = geometries.length;\n\n    if (geometriesLength > 0) {\n      if (defined(primitive)) {\n        if (!defined(this.oldPrimitive)) {\n          this.oldPrimitive = primitive;\n        } else {\n          primitives.remove(primitive);\n        }\n      }\n\n      var depthFailAppearance;\n\n      if (defined(this.depthFailAppearanceType)) {\n        if (defined(this.depthFailMaterialProperty)) {\n          this.depthFailMaterial = MaterialProperty.getValue(time, this.depthFailMaterialProperty, this.depthFailMaterial);\n        }\n\n        depthFailAppearance = new this.depthFailAppearanceType({\n          material: this.depthFailMaterial,\n          translucent: this.translucent,\n          closed: this.closed\n        });\n      }\n\n      primitive = new Primitive({\n        show: false,\n        asynchronous: true,\n        geometryInstances: geometries.slice(),\n        appearance: new this.appearanceType({\n          translucent: this.translucent,\n          closed: this.closed\n        }),\n        depthFailAppearance: depthFailAppearance,\n        shadows: this.shadows\n      });\n      primitives.add(primitive);\n      isUpdated = false;\n    } else {\n      if (defined(primitive)) {\n        primitives.remove(primitive);\n        primitive = undefined;\n      }\n\n      var oldPrimitive = this.oldPrimitive;\n\n      if (defined(oldPrimitive)) {\n        primitives.remove(oldPrimitive);\n        this.oldPrimitive = undefined;\n      }\n    }\n\n    this.attributes.removeAll();\n    this.primitive = primitive;\n    this.createPrimitive = false;\n    this.waitingOnCreate = true;\n  } else if (defined(primitive) && primitive.ready) {\n    primitive.show = true;\n\n    if (defined(this.oldPrimitive)) {\n      primitives.remove(this.oldPrimitive);\n      this.oldPrimitive = undefined;\n    }\n\n    if (defined(this.depthFailAppearanceType) && !(this.depthFailMaterialProperty instanceof ColorMaterialProperty)) {\n      this.depthFailMaterial = MaterialProperty.getValue(time, this.depthFailMaterialProperty, this.depthFailMaterial);\n      this.primitive.depthFailAppearance.material = this.depthFailMaterial;\n    }\n\n    var updatersWithAttributes = this.updatersWithAttributes.values;\n    var length = updatersWithAttributes.length;\n    var waitingOnCreate = this.waitingOnCreate;\n\n    for (i = 0; i < length; i++) {\n      var updater = updatersWithAttributes[i];\n      var instance = this.geometry.get(updater.id);\n      var attributes = this.attributes.get(instance.id.id);\n\n      if (!defined(attributes)) {\n        attributes = primitive.getGeometryInstanceAttributes(instance.id);\n        this.attributes.set(instance.id.id, attributes);\n      }\n\n      if (!updater.fillMaterialProperty.isConstant || waitingOnCreate) {\n        var colorProperty = updater.fillMaterialProperty.color;\n        var resultColor = Property.getValueOrDefault(colorProperty, time, Color.WHITE, colorScratch);\n\n        if (!Color.equals(attributes._lastColor, resultColor)) {\n          attributes._lastColor = Color.clone(resultColor, attributes._lastColor);\n          attributes.color = ColorGeometryInstanceAttribute.toValue(resultColor, attributes.color);\n\n          if (this.translucent && attributes.color[3] === 255 || !this.translucent && attributes.color[3] !== 255) {\n            this.itemsToRemove[removedCount++] = updater;\n          }\n        }\n      }\n\n      if (defined(this.depthFailAppearanceType) && updater.depthFailMaterialProperty instanceof ColorMaterialProperty && (!updater.depthFailMaterialProperty.isConstant || waitingOnCreate)) {\n        var depthFailColorProperty = updater.depthFailMaterialProperty.color;\n        var depthColor = Property.getValueOrDefault(depthFailColorProperty, time, Color.WHITE, colorScratch);\n\n        if (!Color.equals(attributes._lastDepthFailColor, depthColor)) {\n          attributes._lastDepthFailColor = Color.clone(depthColor, attributes._lastDepthFailColor);\n          attributes.depthFailColor = ColorGeometryInstanceAttribute.toValue(depthColor, attributes.depthFailColor);\n        }\n      }\n\n      var show = updater.entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n      var currentShow = attributes.show[0] === 1;\n\n      if (show !== currentShow) {\n        attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n      }\n\n      var distanceDisplayConditionProperty = updater.distanceDisplayConditionProperty;\n\n      if (!Property.isConstant(distanceDisplayConditionProperty)) {\n        var distanceDisplayCondition = Property.getValueOrDefault(distanceDisplayConditionProperty, time, defaultDistanceDisplayCondition, distanceDisplayConditionScratch);\n\n        if (!DistanceDisplayCondition.equals(distanceDisplayCondition, attributes._lastDistanceDisplayCondition)) {\n          attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition, attributes._lastDistanceDisplayCondition);\n          attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n        }\n      }\n\n      var offsetProperty = updater.terrainOffsetProperty;\n\n      if (!Property.isConstant(offsetProperty)) {\n        var offset = Property.getValueOrDefault(offsetProperty, time, defaultOffset, offsetScratch);\n\n        if (!Cartesian3.equals(offset, attributes._lastOffset)) {\n          attributes._lastOffset = Cartesian3.clone(offset, attributes._lastOffset);\n          attributes.offset = OffsetGeometryInstanceAttribute.toValue(offset, attributes.offset);\n        }\n      }\n    }\n\n    this.updateShows(primitive);\n    this.waitingOnCreate = false;\n  } else if (defined(primitive) && !primitive.ready) {\n    isUpdated = false;\n  }\n\n  this.itemsToRemove.length = removedCount;\n  return isUpdated;\n};\n\nBatch.prototype.updateShows = function (primitive) {\n  var showsUpdated = this.showsUpdated.values;\n  var length = showsUpdated.length;\n\n  for (var i = 0; i < length; i++) {\n    var updater = showsUpdated[i];\n    var instance = this.geometry.get(updater.id);\n    var attributes = this.attributes.get(instance.id.id);\n\n    if (!defined(attributes)) {\n      attributes = primitive.getGeometryInstanceAttributes(instance.id);\n      this.attributes.set(instance.id.id, attributes);\n    }\n\n    var show = updater.entity.isShowing;\n    var currentShow = attributes.show[0] === 1;\n\n    if (show !== currentShow) {\n      attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n      instance.attributes.show.value[0] = attributes.show[0];\n    }\n  }\n\n  this.showsUpdated.removeAll();\n};\n\nBatch.prototype.contains = function (updater) {\n  return this.updaters.contains(updater.id);\n};\n\nBatch.prototype.getBoundingSphere = function (updater, result) {\n  var primitive = this.primitive;\n\n  if (!primitive.ready) {\n    return BoundingSphereState.PENDING;\n  }\n\n  var attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n\n  if (!defined(attributes) || !defined(attributes.boundingSphere) || //\n  defined(attributes.show) && attributes.show[0] === 0) {\n    return BoundingSphereState.FAILED;\n  }\n\n  attributes.boundingSphere.clone(result);\n  return BoundingSphereState.DONE;\n};\n\nBatch.prototype.destroy = function () {\n  var primitive = this.primitive;\n  var primitives = this.primitives;\n\n  if (defined(primitive)) {\n    primitives.remove(primitive);\n  }\n\n  var oldPrimitive = this.oldPrimitive;\n\n  if (defined(oldPrimitive)) {\n    primitives.remove(oldPrimitive);\n  }\n\n  if (defined(this.removeMaterialSubscription)) {\n    this.removeMaterialSubscription();\n  }\n};\n/**\n * @private\n */\n\n\nfunction StaticGeometryColorBatch(primitives, appearanceType, depthFailAppearanceType, closed, shadows) {\n  this._solidItems = [];\n  this._translucentItems = [];\n  this._primitives = primitives;\n  this._appearanceType = appearanceType;\n  this._depthFailAppearanceType = depthFailAppearanceType;\n  this._closed = closed;\n  this._shadows = shadows;\n}\n\nStaticGeometryColorBatch.prototype.add = function (time, updater) {\n  var items;\n  var translucent;\n  var instance = updater.createFillGeometryInstance(time);\n\n  if (instance.attributes.color.value[3] === 255) {\n    items = this._solidItems;\n    translucent = false;\n  } else {\n    items = this._translucentItems;\n    translucent = true;\n  }\n\n  var length = items.length;\n\n  for (var i = 0; i < length; i++) {\n    var item = items[i];\n\n    if (item.isMaterial(updater)) {\n      item.add(updater, instance);\n      return;\n    }\n  }\n\n  var batch = new Batch(this._primitives, translucent, this._appearanceType, this._depthFailAppearanceType, updater.depthFailMaterialProperty, this._closed, this._shadows);\n  batch.add(updater, instance);\n  items.push(batch);\n};\n\nfunction removeItem(items, updater) {\n  var length = items.length;\n\n  for (var i = length - 1; i >= 0; i--) {\n    var item = items[i];\n\n    if (item.remove(updater)) {\n      if (item.updaters.length === 0) {\n        items.splice(i, 1);\n        item.destroy();\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n}\n\nStaticGeometryColorBatch.prototype.remove = function (updater) {\n  if (!removeItem(this._solidItems, updater)) {\n    removeItem(this._translucentItems, updater);\n  }\n};\n\nfunction moveItems(batch, items, time) {\n  var itemsMoved = false;\n  var length = items.length;\n\n  for (var i = 0; i < length; ++i) {\n    var item = items[i];\n    var itemsToRemove = item.itemsToRemove;\n    var itemsToMoveLength = itemsToRemove.length;\n\n    if (itemsToMoveLength > 0) {\n      for (i = 0; i < itemsToMoveLength; i++) {\n        var updater = itemsToRemove[i];\n        item.remove(updater);\n        batch.add(time, updater);\n        itemsMoved = true;\n      }\n    }\n  }\n\n  return itemsMoved;\n}\n\nfunction updateItems(batch, items, time, isUpdated) {\n  var length = items.length;\n  var i;\n\n  for (i = length - 1; i >= 0; i--) {\n    var item = items[i];\n\n    if (item.invalidated) {\n      items.splice(i, 1);\n      var updaters = item.updaters.values;\n      var updatersLength = updaters.length;\n\n      for (var h = 0; h < updatersLength; h++) {\n        batch.add(time, updaters[h]);\n      }\n\n      item.destroy();\n    }\n  }\n\n  length = items.length;\n\n  for (i = 0; i < length; ++i) {\n    isUpdated = items[i].update(time) && isUpdated;\n  }\n\n  return isUpdated;\n}\n\nStaticGeometryColorBatch.prototype.update = function (time) {\n  //Perform initial update\n  var isUpdated = updateItems(this, this._solidItems, time, true);\n  isUpdated = updateItems(this, this._translucentItems, time, isUpdated) && isUpdated; //If any items swapped between solid/translucent, we need to\n  //move them between batches\n\n  var solidsMoved = moveItems(this, this._solidItems, time);\n  var translucentsMoved = moveItems(this, this._translucentItems, time); //If we moved anything around, we need to re-build the primitive\n\n  if (solidsMoved || translucentsMoved) {\n    isUpdated = updateItems(this, this._solidItems, time, isUpdated) && isUpdated;\n    isUpdated = updateItems(this, this._translucentItems, time, isUpdated) && isUpdated;\n  }\n\n  return isUpdated;\n};\n\nfunction getBoundingSphere(items, updater, result) {\n  var length = items.length;\n\n  for (var i = 0; i < length; i++) {\n    var item = items[i];\n\n    if (item.contains(updater)) {\n      return item.getBoundingSphere(updater, result);\n    }\n  }\n\n  return BoundingSphereState.FAILED;\n}\n\nStaticGeometryColorBatch.prototype.getBoundingSphere = function (updater, result) {\n  var boundingSphere = getBoundingSphere(this._solidItems, updater, result);\n\n  if (boundingSphere === BoundingSphereState.FAILED) {\n    return getBoundingSphere(this._translucentItems, updater, result);\n  }\n\n  return boundingSphere;\n};\n\nfunction removeAllPrimitives(items) {\n  var length = items.length;\n\n  for (var i = 0; i < length; i++) {\n    items[i].destroy();\n  }\n\n  items.length = 0;\n}\n\nStaticGeometryColorBatch.prototype.removeAllPrimitives = function () {\n  removeAllPrimitives(this._solidItems);\n  removeAllPrimitives(this._translucentItems);\n};\n\nexport default StaticGeometryColorBatch;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/DataSources/StaticGeometryColorBatch.js"],"names":["AssociativeArray","Cartesian3","Color","ColorGeometryInstanceAttribute","defined","DistanceDisplayCondition","DistanceDisplayConditionGeometryInstanceAttribute","OffsetGeometryInstanceAttribute","ShowGeometryInstanceAttribute","Primitive","BoundingSphereState","ColorMaterialProperty","MaterialProperty","Property","colorScratch","distanceDisplayConditionScratch","defaultDistanceDisplayCondition","defaultOffset","ZERO","offsetScratch","Batch","primitives","translucent","appearanceType","depthFailAppearanceType","depthFailMaterialProperty","closed","shadows","depthFailMaterial","undefined","createPrimitive","waitingOnCreate","primitive","oldPrimitive","geometry","updaters","updatersWithAttributes","attributes","subscriptions","showsUpdated","itemsToRemove","invalidated","removeMaterialSubscription","definitionChanged","addEventListener","prototype","onMaterialChanged","isMaterial","updater","material","updaterMaterial","equals","add","instance","id","set","hasConstantFill","fillMaterialProperty","isConstant","distanceDisplayConditionProperty","terrainOffsetProperty","that","entity","propertyName","newValue","oldValue","remove","unsubscribe","get","update","time","isUpdated","removedCount","i","geometries","values","geometriesLength","length","depthFailAppearance","getValue","show","asynchronous","geometryInstances","slice","appearance","removeAll","ready","getGeometryInstanceAttributes","colorProperty","color","resultColor","getValueOrDefault","WHITE","_lastColor","clone","toValue","depthFailColorProperty","depthColor","_lastDepthFailColor","depthFailColor","isShowing","isFilled","currentShow","distanceDisplayCondition","_lastDistanceDisplayCondition","offsetProperty","offset","_lastOffset","updateShows","value","contains","getBoundingSphere","result","PENDING","boundingSphere","FAILED","DONE","destroy","StaticGeometryColorBatch","_solidItems","_translucentItems","_primitives","_appearanceType","_depthFailAppearanceType","_closed","_shadows","items","createFillGeometryInstance","item","batch","push","removeItem","splice","moveItems","itemsMoved","itemsToMoveLength","updateItems","updatersLength","h","solidsMoved","translucentsMoved","removeAllPrimitives"],"mappings":"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","sourcesContent":["import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport Primitive from \"../Scene/Primitive.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport MaterialProperty from \"./MaterialProperty.js\";\nimport Property from \"./Property.js\";\n\nvar colorScratch = new Color();\nvar distanceDisplayConditionScratch = new DistanceDisplayCondition();\nvar defaultDistanceDisplayCondition = new DistanceDisplayCondition();\nvar defaultOffset = Cartesian3.ZERO;\nvar offsetScratch = new Cartesian3();\n\nfunction Batch(\n  primitives,\n  translucent,\n  appearanceType,\n  depthFailAppearanceType,\n  depthFailMaterialProperty,\n  closed,\n  shadows\n) {\n  this.translucent = translucent;\n  this.appearanceType = appearanceType;\n  this.depthFailAppearanceType = depthFailAppearanceType;\n  this.depthFailMaterialProperty = depthFailMaterialProperty;\n  this.depthFailMaterial = undefined;\n  this.closed = closed;\n  this.shadows = shadows;\n  this.primitives = primitives;\n  this.createPrimitive = false;\n  this.waitingOnCreate = false;\n  this.primitive = undefined;\n  this.oldPrimitive = undefined;\n  this.geometry = new AssociativeArray();\n  this.updaters = new AssociativeArray();\n  this.updatersWithAttributes = new AssociativeArray();\n  this.attributes = new AssociativeArray();\n  this.subscriptions = new AssociativeArray();\n  this.showsUpdated = new AssociativeArray();\n  this.itemsToRemove = [];\n  this.invalidated = false;\n\n  var removeMaterialSubscription;\n  if (defined(depthFailMaterialProperty)) {\n    removeMaterialSubscription = depthFailMaterialProperty.definitionChanged.addEventListener(\n      Batch.prototype.onMaterialChanged,\n      this\n    );\n  }\n  this.removeMaterialSubscription = removeMaterialSubscription;\n}\n\nBatch.prototype.onMaterialChanged = function () {\n  this.invalidated = true;\n};\n\nBatch.prototype.isMaterial = function (updater) {\n  var material = this.depthFailMaterialProperty;\n  var updaterMaterial = updater.depthFailMaterialProperty;\n  if (updaterMaterial === material) {\n    return true;\n  }\n  if (defined(material)) {\n    return material.equals(updaterMaterial);\n  }\n  return false;\n};\n\nBatch.prototype.add = function (updater, instance) {\n  var id = updater.id;\n  this.createPrimitive = true;\n  this.geometry.set(id, instance);\n  this.updaters.set(id, updater);\n  if (\n    !updater.hasConstantFill ||\n    !updater.fillMaterialProperty.isConstant ||\n    !Property.isConstant(updater.distanceDisplayConditionProperty) ||\n    !Property.isConstant(updater.terrainOffsetProperty)\n  ) {\n    this.updatersWithAttributes.set(id, updater);\n  } else {\n    var that = this;\n    this.subscriptions.set(\n      id,\n      updater.entity.definitionChanged.addEventListener(function (\n        entity,\n        propertyName,\n        newValue,\n        oldValue\n      ) {\n        if (propertyName === \"isShowing\") {\n          that.showsUpdated.set(updater.id, updater);\n        }\n      })\n    );\n  }\n};\n\nBatch.prototype.remove = function (updater) {\n  var id = updater.id;\n  this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n  if (this.updaters.remove(id)) {\n    this.updatersWithAttributes.remove(id);\n    var unsubscribe = this.subscriptions.get(id);\n    if (defined(unsubscribe)) {\n      unsubscribe();\n      this.subscriptions.remove(id);\n      this.showsUpdated.remove(id);\n    }\n    return true;\n  }\n  return false;\n};\n\nBatch.prototype.update = function (time) {\n  var isUpdated = true;\n  var removedCount = 0;\n  var primitive = this.primitive;\n  var primitives = this.primitives;\n  var i;\n\n  if (this.createPrimitive) {\n    var geometries = this.geometry.values;\n    var geometriesLength = geometries.length;\n    if (geometriesLength > 0) {\n      if (defined(primitive)) {\n        if (!defined(this.oldPrimitive)) {\n          this.oldPrimitive = primitive;\n        } else {\n          primitives.remove(primitive);\n        }\n      }\n\n      var depthFailAppearance;\n      if (defined(this.depthFailAppearanceType)) {\n        if (defined(this.depthFailMaterialProperty)) {\n          this.depthFailMaterial = MaterialProperty.getValue(\n            time,\n            this.depthFailMaterialProperty,\n            this.depthFailMaterial\n          );\n        }\n        depthFailAppearance = new this.depthFailAppearanceType({\n          material: this.depthFailMaterial,\n          translucent: this.translucent,\n          closed: this.closed,\n        });\n      }\n\n      primitive = new Primitive({\n        show: false,\n        asynchronous: true,\n        geometryInstances: geometries.slice(),\n        appearance: new this.appearanceType({\n          translucent: this.translucent,\n          closed: this.closed,\n        }),\n        depthFailAppearance: depthFailAppearance,\n        shadows: this.shadows,\n      });\n      primitives.add(primitive);\n      isUpdated = false;\n    } else {\n      if (defined(primitive)) {\n        primitives.remove(primitive);\n        primitive = undefined;\n      }\n      var oldPrimitive = this.oldPrimitive;\n      if (defined(oldPrimitive)) {\n        primitives.remove(oldPrimitive);\n        this.oldPrimitive = undefined;\n      }\n    }\n\n    this.attributes.removeAll();\n    this.primitive = primitive;\n    this.createPrimitive = false;\n    this.waitingOnCreate = true;\n  } else if (defined(primitive) && primitive.ready) {\n    primitive.show = true;\n    if (defined(this.oldPrimitive)) {\n      primitives.remove(this.oldPrimitive);\n      this.oldPrimitive = undefined;\n    }\n\n    if (\n      defined(this.depthFailAppearanceType) &&\n      !(this.depthFailMaterialProperty instanceof ColorMaterialProperty)\n    ) {\n      this.depthFailMaterial = MaterialProperty.getValue(\n        time,\n        this.depthFailMaterialProperty,\n        this.depthFailMaterial\n      );\n      this.primitive.depthFailAppearance.material = this.depthFailMaterial;\n    }\n\n    var updatersWithAttributes = this.updatersWithAttributes.values;\n    var length = updatersWithAttributes.length;\n    var waitingOnCreate = this.waitingOnCreate;\n    for (i = 0; i < length; i++) {\n      var updater = updatersWithAttributes[i];\n      var instance = this.geometry.get(updater.id);\n\n      var attributes = this.attributes.get(instance.id.id);\n      if (!defined(attributes)) {\n        attributes = primitive.getGeometryInstanceAttributes(instance.id);\n        this.attributes.set(instance.id.id, attributes);\n      }\n\n      if (!updater.fillMaterialProperty.isConstant || waitingOnCreate) {\n        var colorProperty = updater.fillMaterialProperty.color;\n        var resultColor = Property.getValueOrDefault(\n          colorProperty,\n          time,\n          Color.WHITE,\n          colorScratch\n        );\n        if (!Color.equals(attributes._lastColor, resultColor)) {\n          attributes._lastColor = Color.clone(\n            resultColor,\n            attributes._lastColor\n          );\n          attributes.color = ColorGeometryInstanceAttribute.toValue(\n            resultColor,\n            attributes.color\n          );\n          if (\n            (this.translucent && attributes.color[3] === 255) ||\n            (!this.translucent && attributes.color[3] !== 255)\n          ) {\n            this.itemsToRemove[removedCount++] = updater;\n          }\n        }\n      }\n\n      if (\n        defined(this.depthFailAppearanceType) &&\n        updater.depthFailMaterialProperty instanceof ColorMaterialProperty &&\n        (!updater.depthFailMaterialProperty.isConstant || waitingOnCreate)\n      ) {\n        var depthFailColorProperty = updater.depthFailMaterialProperty.color;\n        var depthColor = Property.getValueOrDefault(\n          depthFailColorProperty,\n          time,\n          Color.WHITE,\n          colorScratch\n        );\n        if (!Color.equals(attributes._lastDepthFailColor, depthColor)) {\n          attributes._lastDepthFailColor = Color.clone(\n            depthColor,\n            attributes._lastDepthFailColor\n          );\n          attributes.depthFailColor = ColorGeometryInstanceAttribute.toValue(\n            depthColor,\n            attributes.depthFailColor\n          );\n        }\n      }\n\n      var show =\n        updater.entity.isShowing &&\n        (updater.hasConstantFill || updater.isFilled(time));\n      var currentShow = attributes.show[0] === 1;\n      if (show !== currentShow) {\n        attributes.show = ShowGeometryInstanceAttribute.toValue(\n          show,\n          attributes.show\n        );\n      }\n\n      var distanceDisplayConditionProperty =\n        updater.distanceDisplayConditionProperty;\n      if (!Property.isConstant(distanceDisplayConditionProperty)) {\n        var distanceDisplayCondition = Property.getValueOrDefault(\n          distanceDisplayConditionProperty,\n          time,\n          defaultDistanceDisplayCondition,\n          distanceDisplayConditionScratch\n        );\n        if (\n          !DistanceDisplayCondition.equals(\n            distanceDisplayCondition,\n            attributes._lastDistanceDisplayCondition\n          )\n        ) {\n          attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(\n            distanceDisplayCondition,\n            attributes._lastDistanceDisplayCondition\n          );\n          attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(\n            distanceDisplayCondition,\n            attributes.distanceDisplayCondition\n          );\n        }\n      }\n\n      var offsetProperty = updater.terrainOffsetProperty;\n      if (!Property.isConstant(offsetProperty)) {\n        var offset = Property.getValueOrDefault(\n          offsetProperty,\n          time,\n          defaultOffset,\n          offsetScratch\n        );\n        if (!Cartesian3.equals(offset, attributes._lastOffset)) {\n          attributes._lastOffset = Cartesian3.clone(\n            offset,\n            attributes._lastOffset\n          );\n          attributes.offset = OffsetGeometryInstanceAttribute.toValue(\n            offset,\n            attributes.offset\n          );\n        }\n      }\n    }\n\n    this.updateShows(primitive);\n    this.waitingOnCreate = false;\n  } else if (defined(primitive) && !primitive.ready) {\n    isUpdated = false;\n  }\n  this.itemsToRemove.length = removedCount;\n  return isUpdated;\n};\n\nBatch.prototype.updateShows = function (primitive) {\n  var showsUpdated = this.showsUpdated.values;\n  var length = showsUpdated.length;\n  for (var i = 0; i < length; i++) {\n    var updater = showsUpdated[i];\n    var instance = this.geometry.get(updater.id);\n\n    var attributes = this.attributes.get(instance.id.id);\n    if (!defined(attributes)) {\n      attributes = primitive.getGeometryInstanceAttributes(instance.id);\n      this.attributes.set(instance.id.id, attributes);\n    }\n\n    var show = updater.entity.isShowing;\n    var currentShow = attributes.show[0] === 1;\n    if (show !== currentShow) {\n      attributes.show = ShowGeometryInstanceAttribute.toValue(\n        show,\n        attributes.show\n      );\n      instance.attributes.show.value[0] = attributes.show[0];\n    }\n  }\n  this.showsUpdated.removeAll();\n};\n\nBatch.prototype.contains = function (updater) {\n  return this.updaters.contains(updater.id);\n};\n\nBatch.prototype.getBoundingSphere = function (updater, result) {\n  var primitive = this.primitive;\n  if (!primitive.ready) {\n    return BoundingSphereState.PENDING;\n  }\n  var attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n  if (\n    !defined(attributes) ||\n    !defined(attributes.boundingSphere) || //\n    (defined(attributes.show) && attributes.show[0] === 0)\n  ) {\n    return BoundingSphereState.FAILED;\n  }\n  attributes.boundingSphere.clone(result);\n  return BoundingSphereState.DONE;\n};\n\nBatch.prototype.destroy = function () {\n  var primitive = this.primitive;\n  var primitives = this.primitives;\n  if (defined(primitive)) {\n    primitives.remove(primitive);\n  }\n  var oldPrimitive = this.oldPrimitive;\n  if (defined(oldPrimitive)) {\n    primitives.remove(oldPrimitive);\n  }\n  if (defined(this.removeMaterialSubscription)) {\n    this.removeMaterialSubscription();\n  }\n};\n\n/**\n * @private\n */\nfunction StaticGeometryColorBatch(\n  primitives,\n  appearanceType,\n  depthFailAppearanceType,\n  closed,\n  shadows\n) {\n  this._solidItems = [];\n  this._translucentItems = [];\n  this._primitives = primitives;\n  this._appearanceType = appearanceType;\n  this._depthFailAppearanceType = depthFailAppearanceType;\n  this._closed = closed;\n  this._shadows = shadows;\n}\n\nStaticGeometryColorBatch.prototype.add = function (time, updater) {\n  var items;\n  var translucent;\n  var instance = updater.createFillGeometryInstance(time);\n  if (instance.attributes.color.value[3] === 255) {\n    items = this._solidItems;\n    translucent = false;\n  } else {\n    items = this._translucentItems;\n    translucent = true;\n  }\n\n  var length = items.length;\n  for (var i = 0; i < length; i++) {\n    var item = items[i];\n    if (item.isMaterial(updater)) {\n      item.add(updater, instance);\n      return;\n    }\n  }\n  var batch = new Batch(\n    this._primitives,\n    translucent,\n    this._appearanceType,\n    this._depthFailAppearanceType,\n    updater.depthFailMaterialProperty,\n    this._closed,\n    this._shadows\n  );\n  batch.add(updater, instance);\n  items.push(batch);\n};\n\nfunction removeItem(items, updater) {\n  var length = items.length;\n  for (var i = length - 1; i >= 0; i--) {\n    var item = items[i];\n    if (item.remove(updater)) {\n      if (item.updaters.length === 0) {\n        items.splice(i, 1);\n        item.destroy();\n      }\n      return true;\n    }\n  }\n  return false;\n}\n\nStaticGeometryColorBatch.prototype.remove = function (updater) {\n  if (!removeItem(this._solidItems, updater)) {\n    removeItem(this._translucentItems, updater);\n  }\n};\n\nfunction moveItems(batch, items, time) {\n  var itemsMoved = false;\n  var length = items.length;\n  for (var i = 0; i < length; ++i) {\n    var item = items[i];\n    var itemsToRemove = item.itemsToRemove;\n    var itemsToMoveLength = itemsToRemove.length;\n    if (itemsToMoveLength > 0) {\n      for (i = 0; i < itemsToMoveLength; i++) {\n        var updater = itemsToRemove[i];\n        item.remove(updater);\n        batch.add(time, updater);\n        itemsMoved = true;\n      }\n    }\n  }\n  return itemsMoved;\n}\n\nfunction updateItems(batch, items, time, isUpdated) {\n  var length = items.length;\n  var i;\n  for (i = length - 1; i >= 0; i--) {\n    var item = items[i];\n    if (item.invalidated) {\n      items.splice(i, 1);\n      var updaters = item.updaters.values;\n      var updatersLength = updaters.length;\n      for (var h = 0; h < updatersLength; h++) {\n        batch.add(time, updaters[h]);\n      }\n      item.destroy();\n    }\n  }\n\n  length = items.length;\n  for (i = 0; i < length; ++i) {\n    isUpdated = items[i].update(time) && isUpdated;\n  }\n  return isUpdated;\n}\n\nStaticGeometryColorBatch.prototype.update = function (time) {\n  //Perform initial update\n  var isUpdated = updateItems(this, this._solidItems, time, true);\n  isUpdated =\n    updateItems(this, this._translucentItems, time, isUpdated) && isUpdated;\n\n  //If any items swapped between solid/translucent, we need to\n  //move them between batches\n  var solidsMoved = moveItems(this, this._solidItems, time);\n  var translucentsMoved = moveItems(this, this._translucentItems, time);\n\n  //If we moved anything around, we need to re-build the primitive\n  if (solidsMoved || translucentsMoved) {\n    isUpdated =\n      updateItems(this, this._solidItems, time, isUpdated) && isUpdated;\n    isUpdated =\n      updateItems(this, this._translucentItems, time, isUpdated) && isUpdated;\n  }\n\n  return isUpdated;\n};\n\nfunction getBoundingSphere(items, updater, result) {\n  var length = items.length;\n  for (var i = 0; i < length; i++) {\n    var item = items[i];\n    if (item.contains(updater)) {\n      return item.getBoundingSphere(updater, result);\n    }\n  }\n  return BoundingSphereState.FAILED;\n}\n\nStaticGeometryColorBatch.prototype.getBoundingSphere = function (\n  updater,\n  result\n) {\n  var boundingSphere = getBoundingSphere(this._solidItems, updater, result);\n  if (boundingSphere === BoundingSphereState.FAILED) {\n    return getBoundingSphere(this._translucentItems, updater, result);\n  }\n  return boundingSphere;\n};\n\nfunction removeAllPrimitives(items) {\n  var length = items.length;\n  for (var i = 0; i < length; i++) {\n    items[i].destroy();\n  }\n  items.length = 0;\n}\n\nStaticGeometryColorBatch.prototype.removeAllPrimitives = function () {\n  removeAllPrimitives(this._solidItems);\n  removeAllPrimitives(this._translucentItems);\n};\nexport default StaticGeometryColorBatch;\n"]},"metadata":{},"sourceType":"module"}