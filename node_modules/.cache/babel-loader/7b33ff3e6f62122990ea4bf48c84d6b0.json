{"ast":null,"code":"import WebGLConstants from \"../Core/WebGLConstants.js\";\n/**\n * Enumerates all possible filters used when minifying WebGL textures.\n *\n * @exports TextureMinificationFilter\n *\n * @see TextureMagnificationFilter\n */\n\nvar TextureMinificationFilter = {\n  /**\n   * Samples the texture by returning the closest pixel.\n   *\n   * @type {Number}\n   * @constant\n   */\n  NEAREST: WebGLConstants.NEAREST,\n\n  /**\n   * Samples the texture through bi-linear interpolation of the four nearest pixels. This produces smoother results than <code>NEAREST</code> filtering.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LINEAR: WebGLConstants.LINEAR,\n\n  /**\n   * Selects the nearest mip level and applies nearest sampling within that level.\n   * <p>\n   * Requires that the texture has a mipmap. The mip level is chosen by the view angle and screen-space size of the texture.\n   * </p>\n   *\n   * @type {Number}\n   * @constant\n   */\n  NEAREST_MIPMAP_NEAREST: WebGLConstants.NEAREST_MIPMAP_NEAREST,\n\n  /**\n   * Selects the nearest mip level and applies linear sampling within that level.\n   * <p>\n   * Requires that the texture has a mipmap. The mip level is chosen by the view angle and screen-space size of the texture.\n   * </p>\n   *\n   * @type {Number}\n   * @constant\n   */\n  LINEAR_MIPMAP_NEAREST: WebGLConstants.LINEAR_MIPMAP_NEAREST,\n\n  /**\n   * Read texture values with nearest sampling from two adjacent mip levels and linearly interpolate the results.\n   * <p>\n   * This option provides a good balance of visual quality and speed when sampling from a mipmapped texture.\n   * </p>\n   * <p>\n   * Requires that the texture has a mipmap. The mip level is chosen by the view angle and screen-space size of the texture.\n   * </p>\n   *\n   * @type {Number}\n   * @constant\n   */\n  NEAREST_MIPMAP_LINEAR: WebGLConstants.NEAREST_MIPMAP_LINEAR,\n\n  /**\n   * Read texture values with linear sampling from two adjacent mip levels and linearly interpolate the results.\n   * <p>\n   * This option provides a good balance of visual quality and speed when sampling from a mipmapped texture.\n   * </p>\n   * <p>\n   * Requires that the texture has a mipmap. The mip level is chosen by the view angle and screen-space size of the texture.\n   * </p>\n   * @type {Number}\n   * @constant\n   */\n  LINEAR_MIPMAP_LINEAR: WebGLConstants.LINEAR_MIPMAP_LINEAR,\n\n  /**\n   * Validates the given <code>textureMinificationFilter</code> with respect to the possible enum values.\n   *\n   * @private\n   *\n   * @param textureMinificationFilter\n   * @returns {Boolean} <code>true</code> if <code>textureMinificationFilter</code> is valid.\n   */\n  validate: function (textureMinificationFilter) {\n    return textureMinificationFilter === TextureMinificationFilter.NEAREST || textureMinificationFilter === TextureMinificationFilter.LINEAR || textureMinificationFilter === TextureMinificationFilter.NEAREST_MIPMAP_NEAREST || textureMinificationFilter === TextureMinificationFilter.LINEAR_MIPMAP_NEAREST || textureMinificationFilter === TextureMinificationFilter.NEAREST_MIPMAP_LINEAR || textureMinificationFilter === TextureMinificationFilter.LINEAR_MIPMAP_LINEAR;\n  }\n};\nexport default Object.freeze(TextureMinificationFilter);","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Renderer/TextureMinificationFilter.js"],"names":["WebGLConstants","TextureMinificationFilter","NEAREST","LINEAR","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","validate","textureMinificationFilter","Object","freeze"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,2BAA3B;AAEA;;;;;;;;AAOA,IAAIC,yBAAyB,GAAG;AAC9B;;;;;;AAMAC,EAAAA,OAAO,EAAEF,cAAc,CAACE,OAPM;;AAQ9B;;;;;;AAMAC,EAAAA,MAAM,EAAEH,cAAc,CAACG,MAdO;;AAe9B;;;;;;;;;AASAC,EAAAA,sBAAsB,EAAEJ,cAAc,CAACI,sBAxBT;;AAyB9B;;;;;;;;;AASAC,EAAAA,qBAAqB,EAAEL,cAAc,CAACK,qBAlCR;;AAmC9B;;;;;;;;;;;;AAYAC,EAAAA,qBAAqB,EAAEN,cAAc,CAACM,qBA/CR;;AAgD9B;;;;;;;;;;;AAWAC,EAAAA,oBAAoB,EAAEP,cAAc,CAACO,oBA3DP;;AA6D9B;;;;;;;;AAQAC,EAAAA,QAAQ,EAAE,UAAUC,yBAAV,EAAqC;AAC7C,WACEA,yBAAyB,KAAKR,yBAAyB,CAACC,OAAxD,IACAO,yBAAyB,KAAKR,yBAAyB,CAACE,MADxD,IAEAM,yBAAyB,KACvBR,yBAAyB,CAACG,sBAH5B,IAIAK,yBAAyB,KACvBR,yBAAyB,CAACI,qBAL5B,IAMAI,yBAAyB,KACvBR,yBAAyB,CAACK,qBAP5B,IAQAG,yBAAyB,KACvBR,yBAAyB,CAACM,oBAV9B;AAYD;AAlF6B,CAAhC;AAoFA,eAAeG,MAAM,CAACC,MAAP,CAAcV,yBAAd,CAAf","sourcesContent":["import WebGLConstants from \"../Core/WebGLConstants.js\";\n\n/**\n * Enumerates all possible filters used when minifying WebGL textures.\n *\n * @exports TextureMinificationFilter\n *\n * @see TextureMagnificationFilter\n */\nvar TextureMinificationFilter = {\n  /**\n   * Samples the texture by returning the closest pixel.\n   *\n   * @type {Number}\n   * @constant\n   */\n  NEAREST: WebGLConstants.NEAREST,\n  /**\n   * Samples the texture through bi-linear interpolation of the four nearest pixels. This produces smoother results than <code>NEAREST</code> filtering.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LINEAR: WebGLConstants.LINEAR,\n  /**\n   * Selects the nearest mip level and applies nearest sampling within that level.\n   * <p>\n   * Requires that the texture has a mipmap. The mip level is chosen by the view angle and screen-space size of the texture.\n   * </p>\n   *\n   * @type {Number}\n   * @constant\n   */\n  NEAREST_MIPMAP_NEAREST: WebGLConstants.NEAREST_MIPMAP_NEAREST,\n  /**\n   * Selects the nearest mip level and applies linear sampling within that level.\n   * <p>\n   * Requires that the texture has a mipmap. The mip level is chosen by the view angle and screen-space size of the texture.\n   * </p>\n   *\n   * @type {Number}\n   * @constant\n   */\n  LINEAR_MIPMAP_NEAREST: WebGLConstants.LINEAR_MIPMAP_NEAREST,\n  /**\n   * Read texture values with nearest sampling from two adjacent mip levels and linearly interpolate the results.\n   * <p>\n   * This option provides a good balance of visual quality and speed when sampling from a mipmapped texture.\n   * </p>\n   * <p>\n   * Requires that the texture has a mipmap. The mip level is chosen by the view angle and screen-space size of the texture.\n   * </p>\n   *\n   * @type {Number}\n   * @constant\n   */\n  NEAREST_MIPMAP_LINEAR: WebGLConstants.NEAREST_MIPMAP_LINEAR,\n  /**\n   * Read texture values with linear sampling from two adjacent mip levels and linearly interpolate the results.\n   * <p>\n   * This option provides a good balance of visual quality and speed when sampling from a mipmapped texture.\n   * </p>\n   * <p>\n   * Requires that the texture has a mipmap. The mip level is chosen by the view angle and screen-space size of the texture.\n   * </p>\n   * @type {Number}\n   * @constant\n   */\n  LINEAR_MIPMAP_LINEAR: WebGLConstants.LINEAR_MIPMAP_LINEAR,\n\n  /**\n   * Validates the given <code>textureMinificationFilter</code> with respect to the possible enum values.\n   *\n   * @private\n   *\n   * @param textureMinificationFilter\n   * @returns {Boolean} <code>true</code> if <code>textureMinificationFilter</code> is valid.\n   */\n  validate: function (textureMinificationFilter) {\n    return (\n      textureMinificationFilter === TextureMinificationFilter.NEAREST ||\n      textureMinificationFilter === TextureMinificationFilter.LINEAR ||\n      textureMinificationFilter ===\n        TextureMinificationFilter.NEAREST_MIPMAP_NEAREST ||\n      textureMinificationFilter ===\n        TextureMinificationFilter.LINEAR_MIPMAP_NEAREST ||\n      textureMinificationFilter ===\n        TextureMinificationFilter.NEAREST_MIPMAP_LINEAR ||\n      textureMinificationFilter ===\n        TextureMinificationFilter.LINEAR_MIPMAP_LINEAR\n    );\n  },\n};\nexport default Object.freeze(TextureMinificationFilter);\n"]},"metadata":{},"sourceType":"module"}