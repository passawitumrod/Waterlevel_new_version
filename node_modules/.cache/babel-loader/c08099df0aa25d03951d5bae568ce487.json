{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport FeatureDetection from \"../Core/FeatureDetection.js\";\nimport VertexFormat from \"../Core/VertexFormat.js\";\nimport PolylineMaterialAppearanceVS from \"../Shaders/Appearances/PolylineMaterialAppearanceVS.js\";\nimport PolylineCommon from \"../Shaders/PolylineCommon.js\";\nimport PolylineFS from \"../Shaders/PolylineFS.js\";\nimport Appearance from \"./Appearance.js\";\nimport Material from \"./Material.js\";\nvar defaultVertexShaderSource = PolylineCommon + \"\\n\" + PolylineMaterialAppearanceVS;\nvar defaultFragmentShaderSource = PolylineFS;\n\nif (!FeatureDetection.isInternetExplorer()) {\n  defaultVertexShaderSource = \"#define CLIP_POLYLINE \\n\" + defaultVertexShaderSource;\n}\n/**\n * An appearance for {@link PolylineGeometry} that supports shading with materials.\n *\n * @alias PolylineMaterialAppearance\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.translucent=true] When <code>true</code>, the geometry is expected to appear translucent so {@link PolylineMaterialAppearance#renderState} has alpha blending enabled.\n * @param {Material} [options.material=Material.ColorType] The material used to determine the fragment color.\n * @param {String} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n * @param {String} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n * @param {RenderState} [options.renderState] Optional render state to override the default render state.\n *\n * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n *\n * @example\n * var primitive = new Cesium.Primitive({\n *   geometryInstances : new Cesium.GeometryInstance({\n *     geometry : new Cesium.PolylineGeometry({\n *       positions : Cesium.Cartesian3.fromDegreesArray([\n *         0.0, 0.0,\n *         5.0, 0.0\n *       ]),\n *       width : 10.0,\n *       vertexFormat : Cesium.PolylineMaterialAppearance.VERTEX_FORMAT\n *     })\n *   }),\n *   appearance : new Cesium.PolylineMaterialAppearance({\n *     material : Cesium.Material.fromType('Color')\n *   })\n * });\n */\n\n\nfunction PolylineMaterialAppearance(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var translucent = defaultValue(options.translucent, true);\n  var closed = false;\n  var vertexFormat = PolylineMaterialAppearance.VERTEX_FORMAT;\n  /**\n   * The material used to determine the fragment color.  Unlike other {@link PolylineMaterialAppearance}\n   * properties, this is not read-only, so an appearance's material can change on the fly.\n   *\n   * @type Material\n   *\n   * @default {@link Material.ColorType}\n   *\n   * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n   */\n\n  this.material = defined(options.material) ? options.material : Material.fromType(Material.ColorType);\n  /**\n   * When <code>true</code>, the geometry is expected to appear translucent so\n   * {@link PolylineMaterialAppearance#renderState} has alpha blending enabled.\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n\n  this.translucent = translucent;\n  this._vertexShaderSource = defaultValue(options.vertexShaderSource, defaultVertexShaderSource);\n  this._fragmentShaderSource = defaultValue(options.fragmentShaderSource, defaultFragmentShaderSource);\n  this._renderState = Appearance.getDefaultRenderState(translucent, closed, options.renderState);\n  this._closed = closed; // Non-derived members\n\n  this._vertexFormat = vertexFormat;\n}\n\nObject.defineProperties(PolylineMaterialAppearance.prototype, {\n  /**\n   * The GLSL source code for the vertex shader.\n   *\n   * @memberof PolylineMaterialAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  vertexShaderSource: {\n    get: function () {\n      var vs = this._vertexShaderSource;\n\n      if (this.material.shaderSource.search(/varying\\s+float\\s+v_polylineAngle;/g) !== -1) {\n        vs = \"#define POLYLINE_DASH\\n\" + vs;\n      }\n\n      return vs;\n    }\n  },\n\n  /**\n   * The GLSL source code for the fragment shader.\n   *\n   * @memberof PolylineMaterialAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  fragmentShaderSource: {\n    get: function () {\n      return this._fragmentShaderSource;\n    }\n  },\n\n  /**\n   * The WebGL fixed-function state to use when rendering the geometry.\n   * <p>\n   * The render state can be explicitly defined when constructing a {@link PolylineMaterialAppearance}\n   * instance, or it is set implicitly via {@link PolylineMaterialAppearance#translucent}\n   * and {@link PolylineMaterialAppearance#closed}.\n   * </p>\n   *\n   * @memberof PolylineMaterialAppearance.prototype\n   *\n   * @type {Object}\n   * @readonly\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    }\n  },\n\n  /**\n   * When <code>true</code>, the geometry is expected to be closed so\n   * {@link PolylineMaterialAppearance#renderState} has backface culling enabled.\n   * This is always <code>false</code> for <code>PolylineMaterialAppearance</code>.\n   *\n   * @memberof PolylineMaterialAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  closed: {\n    get: function () {\n      return this._closed;\n    }\n  },\n\n  /**\n   * The {@link VertexFormat} that this appearance instance is compatible with.\n   * A geometry can have more vertex attributes and still be compatible - at a\n   * potential performance cost - but it can't have less.\n   *\n   * @memberof PolylineMaterialAppearance.prototype\n   *\n   * @type VertexFormat\n   * @readonly\n   *\n   * @default {@link PolylineMaterialAppearance.VERTEX_FORMAT}\n   */\n  vertexFormat: {\n    get: function () {\n      return this._vertexFormat;\n    }\n  }\n});\n/**\n * The {@link VertexFormat} that all {@link PolylineMaterialAppearance} instances\n * are compatible with. This requires <code>position</code> and <code>st</code> attributes.\n *\n * @type VertexFormat\n *\n * @constant\n */\n\nPolylineMaterialAppearance.VERTEX_FORMAT = VertexFormat.POSITION_AND_ST;\n/**\n * Procedurally creates the full GLSL fragment shader source.  For {@link PolylineMaterialAppearance},\n * this is derived from {@link PolylineMaterialAppearance#fragmentShaderSource} and {@link PolylineMaterialAppearance#material}.\n *\n * @function\n *\n * @returns {String} The full GLSL fragment shader source.\n */\n\nPolylineMaterialAppearance.prototype.getFragmentShaderSource = Appearance.prototype.getFragmentShaderSource;\n/**\n * Determines if the geometry is translucent based on {@link PolylineMaterialAppearance#translucent} and {@link Material#isTranslucent}.\n *\n * @function\n *\n * @returns {Boolean} <code>true</code> if the appearance is translucent.\n */\n\nPolylineMaterialAppearance.prototype.isTranslucent = Appearance.prototype.isTranslucent;\n/**\n * Creates a render state.  This is not the final render state instance; instead,\n * it can contain a subset of render state properties identical to the render state\n * created in the context.\n *\n * @function\n *\n * @returns {Object} The render state.\n */\n\nPolylineMaterialAppearance.prototype.getRenderState = Appearance.prototype.getRenderState;\nexport default PolylineMaterialAppearance;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/PolylineMaterialAppearance.js"],"names":["defaultValue","defined","FeatureDetection","VertexFormat","PolylineMaterialAppearanceVS","PolylineCommon","PolylineFS","Appearance","Material","defaultVertexShaderSource","defaultFragmentShaderSource","isInternetExplorer","PolylineMaterialAppearance","options","EMPTY_OBJECT","translucent","closed","vertexFormat","VERTEX_FORMAT","material","fromType","ColorType","_vertexShaderSource","vertexShaderSource","_fragmentShaderSource","fragmentShaderSource","_renderState","getDefaultRenderState","renderState","_closed","_vertexFormat","Object","defineProperties","prototype","get","vs","shaderSource","search","POSITION_AND_ST","getFragmentShaderSource","isTranslucent","getRenderState"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport FeatureDetection from \"../Core/FeatureDetection.js\";\nimport VertexFormat from \"../Core/VertexFormat.js\";\nimport PolylineMaterialAppearanceVS from \"../Shaders/Appearances/PolylineMaterialAppearanceVS.js\";\nimport PolylineCommon from \"../Shaders/PolylineCommon.js\";\nimport PolylineFS from \"../Shaders/PolylineFS.js\";\nimport Appearance from \"./Appearance.js\";\nimport Material from \"./Material.js\";\n\nvar defaultVertexShaderSource =\n  PolylineCommon + \"\\n\" + PolylineMaterialAppearanceVS;\nvar defaultFragmentShaderSource = PolylineFS;\n\nif (!FeatureDetection.isInternetExplorer()) {\n  defaultVertexShaderSource =\n    \"#define CLIP_POLYLINE \\n\" + defaultVertexShaderSource;\n}\n\n/**\n * An appearance for {@link PolylineGeometry} that supports shading with materials.\n *\n * @alias PolylineMaterialAppearance\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.translucent=true] When <code>true</code>, the geometry is expected to appear translucent so {@link PolylineMaterialAppearance#renderState} has alpha blending enabled.\n * @param {Material} [options.material=Material.ColorType] The material used to determine the fragment color.\n * @param {String} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n * @param {String} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n * @param {RenderState} [options.renderState] Optional render state to override the default render state.\n *\n * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n *\n * @example\n * var primitive = new Cesium.Primitive({\n *   geometryInstances : new Cesium.GeometryInstance({\n *     geometry : new Cesium.PolylineGeometry({\n *       positions : Cesium.Cartesian3.fromDegreesArray([\n *         0.0, 0.0,\n *         5.0, 0.0\n *       ]),\n *       width : 10.0,\n *       vertexFormat : Cesium.PolylineMaterialAppearance.VERTEX_FORMAT\n *     })\n *   }),\n *   appearance : new Cesium.PolylineMaterialAppearance({\n *     material : Cesium.Material.fromType('Color')\n *   })\n * });\n */\nfunction PolylineMaterialAppearance(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var translucent = defaultValue(options.translucent, true);\n  var closed = false;\n  var vertexFormat = PolylineMaterialAppearance.VERTEX_FORMAT;\n\n  /**\n   * The material used to determine the fragment color.  Unlike other {@link PolylineMaterialAppearance}\n   * properties, this is not read-only, so an appearance's material can change on the fly.\n   *\n   * @type Material\n   *\n   * @default {@link Material.ColorType}\n   *\n   * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n   */\n  this.material = defined(options.material)\n    ? options.material\n    : Material.fromType(Material.ColorType);\n\n  /**\n   * When <code>true</code>, the geometry is expected to appear translucent so\n   * {@link PolylineMaterialAppearance#renderState} has alpha blending enabled.\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  this.translucent = translucent;\n\n  this._vertexShaderSource = defaultValue(\n    options.vertexShaderSource,\n    defaultVertexShaderSource\n  );\n  this._fragmentShaderSource = defaultValue(\n    options.fragmentShaderSource,\n    defaultFragmentShaderSource\n  );\n  this._renderState = Appearance.getDefaultRenderState(\n    translucent,\n    closed,\n    options.renderState\n  );\n  this._closed = closed;\n\n  // Non-derived members\n\n  this._vertexFormat = vertexFormat;\n}\n\nObject.defineProperties(PolylineMaterialAppearance.prototype, {\n  /**\n   * The GLSL source code for the vertex shader.\n   *\n   * @memberof PolylineMaterialAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  vertexShaderSource: {\n    get: function () {\n      var vs = this._vertexShaderSource;\n      if (\n        this.material.shaderSource.search(\n          /varying\\s+float\\s+v_polylineAngle;/g\n        ) !== -1\n      ) {\n        vs = \"#define POLYLINE_DASH\\n\" + vs;\n      }\n      return vs;\n    },\n  },\n\n  /**\n   * The GLSL source code for the fragment shader.\n   *\n   * @memberof PolylineMaterialAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  fragmentShaderSource: {\n    get: function () {\n      return this._fragmentShaderSource;\n    },\n  },\n\n  /**\n   * The WebGL fixed-function state to use when rendering the geometry.\n   * <p>\n   * The render state can be explicitly defined when constructing a {@link PolylineMaterialAppearance}\n   * instance, or it is set implicitly via {@link PolylineMaterialAppearance#translucent}\n   * and {@link PolylineMaterialAppearance#closed}.\n   * </p>\n   *\n   * @memberof PolylineMaterialAppearance.prototype\n   *\n   * @type {Object}\n   * @readonly\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the geometry is expected to be closed so\n   * {@link PolylineMaterialAppearance#renderState} has backface culling enabled.\n   * This is always <code>false</code> for <code>PolylineMaterialAppearance</code>.\n   *\n   * @memberof PolylineMaterialAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  closed: {\n    get: function () {\n      return this._closed;\n    },\n  },\n\n  /**\n   * The {@link VertexFormat} that this appearance instance is compatible with.\n   * A geometry can have more vertex attributes and still be compatible - at a\n   * potential performance cost - but it can't have less.\n   *\n   * @memberof PolylineMaterialAppearance.prototype\n   *\n   * @type VertexFormat\n   * @readonly\n   *\n   * @default {@link PolylineMaterialAppearance.VERTEX_FORMAT}\n   */\n  vertexFormat: {\n    get: function () {\n      return this._vertexFormat;\n    },\n  },\n});\n\n/**\n * The {@link VertexFormat} that all {@link PolylineMaterialAppearance} instances\n * are compatible with. This requires <code>position</code> and <code>st</code> attributes.\n *\n * @type VertexFormat\n *\n * @constant\n */\nPolylineMaterialAppearance.VERTEX_FORMAT = VertexFormat.POSITION_AND_ST;\n\n/**\n * Procedurally creates the full GLSL fragment shader source.  For {@link PolylineMaterialAppearance},\n * this is derived from {@link PolylineMaterialAppearance#fragmentShaderSource} and {@link PolylineMaterialAppearance#material}.\n *\n * @function\n *\n * @returns {String} The full GLSL fragment shader source.\n */\nPolylineMaterialAppearance.prototype.getFragmentShaderSource =\n  Appearance.prototype.getFragmentShaderSource;\n\n/**\n * Determines if the geometry is translucent based on {@link PolylineMaterialAppearance#translucent} and {@link Material#isTranslucent}.\n *\n * @function\n *\n * @returns {Boolean} <code>true</code> if the appearance is translucent.\n */\nPolylineMaterialAppearance.prototype.isTranslucent =\n  Appearance.prototype.isTranslucent;\n\n/**\n * Creates a render state.  This is not the final render state instance; instead,\n * it can contain a subset of render state properties identical to the render state\n * created in the context.\n *\n * @function\n *\n * @returns {Object} The render state.\n */\nPolylineMaterialAppearance.prototype.getRenderState =\n  Appearance.prototype.getRenderState;\nexport default PolylineMaterialAppearance;\n"]},"metadata":{},"sourceType":"module"}