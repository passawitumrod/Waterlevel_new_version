{"ast":null,"code":"import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TimeInterval from \"../Core/TimeInterval.js\";\nimport Entity from \"./Entity.js\";\nvar entityOptionsScratch = {\n  id: undefined\n};\n\nfunction fireChangedEvent(collection) {\n  if (collection._firing) {\n    collection._refire = true;\n    return;\n  }\n\n  if (collection._suspendCount === 0) {\n    var added = collection._addedEntities;\n    var removed = collection._removedEntities;\n    var changed = collection._changedEntities;\n\n    if (changed.length !== 0 || added.length !== 0 || removed.length !== 0) {\n      collection._firing = true;\n\n      do {\n        collection._refire = false;\n        var addedArray = added.values.slice(0);\n        var removedArray = removed.values.slice(0);\n        var changedArray = changed.values.slice(0);\n        added.removeAll();\n        removed.removeAll();\n        changed.removeAll();\n\n        collection._collectionChanged.raiseEvent(collection, addedArray, removedArray, changedArray);\n      } while (collection._refire);\n\n      collection._firing = false;\n    }\n  }\n}\n/**\n * An observable collection of {@link Entity} instances where each entity has a unique id.\n * @alias EntityCollection\n * @constructor\n *\n * @param {DataSource|CompositeEntityCollection} [owner] The data source (or composite entity collection) which created this collection.\n */\n\n\nfunction EntityCollection(owner) {\n  this._owner = owner;\n  this._entities = new AssociativeArray();\n  this._addedEntities = new AssociativeArray();\n  this._removedEntities = new AssociativeArray();\n  this._changedEntities = new AssociativeArray();\n  this._suspendCount = 0;\n  this._collectionChanged = new Event();\n  this._id = createGuid();\n  this._show = true;\n  this._firing = false;\n  this._refire = false;\n}\n/**\n * Prevents {@link EntityCollection#collectionChanged} events from being raised\n * until a corresponding call is made to {@link EntityCollection#resumeEvents}, at which\n * point a single event will be raised that covers all suspended operations.\n * This allows for many items to be added and removed efficiently.\n * This function can be safely called multiple times as long as there\n * are corresponding calls to {@link EntityCollection#resumeEvents}.\n */\n\n\nEntityCollection.prototype.suspendEvents = function () {\n  this._suspendCount++;\n};\n/**\n * Resumes raising {@link EntityCollection#collectionChanged} events immediately\n * when an item is added or removed.  Any modifications made while while events were suspended\n * will be triggered as a single event when this function is called.\n * This function is reference counted and can safely be called multiple times as long as there\n * are corresponding calls to {@link EntityCollection#resumeEvents}.\n *\n * @exception {DeveloperError} resumeEvents can not be called before suspendEvents.\n */\n\n\nEntityCollection.prototype.resumeEvents = function () {\n  //>>includeStart('debug', pragmas.debug);\n  if (this._suspendCount === 0) {\n    throw new DeveloperError(\"resumeEvents can not be called before suspendEvents.\");\n  } //>>includeEnd('debug');\n\n\n  this._suspendCount--;\n  fireChangedEvent(this);\n};\n/**\n * The signature of the event generated by {@link EntityCollection#collectionChanged}.\n * @function\n *\n * @param {EntityCollection} collection The collection that triggered the event.\n * @param {Entity[]} added The array of {@link Entity} instances that have been added to the collection.\n * @param {Entity[]} removed The array of {@link Entity} instances that have been removed from the collection.\n * @param {Entity[]} changed The array of {@link Entity} instances that have been modified.\n */\n\n\nEntityCollection.collectionChangedEventCallback = undefined;\nObject.defineProperties(EntityCollection.prototype, {\n  /**\n   * Gets the event that is fired when entities are added or removed from the collection.\n   * The generated event is a {@link EntityCollection.collectionChangedEventCallback}.\n   * @memberof EntityCollection.prototype\n   * @readonly\n   * @type {Event}\n   */\n  collectionChanged: {\n    get: function get() {\n      return this._collectionChanged;\n    }\n  },\n\n  /**\n   * Gets a globally unique identifier for this collection.\n   * @memberof EntityCollection.prototype\n   * @readonly\n   * @type {String}\n   */\n  id: {\n    get: function get() {\n      return this._id;\n    }\n  },\n\n  /**\n   * Gets the array of Entity instances in the collection.\n   * This array should not be modified directly.\n   * @memberof EntityCollection.prototype\n   * @readonly\n   * @type {Entity[]}\n   */\n  values: {\n    get: function get() {\n      return this._entities.values;\n    }\n  },\n\n  /**\n   * Gets whether or not this entity collection should be\n   * displayed.  When true, each entity is only displayed if\n   * its own show property is also true.\n   * @memberof EntityCollection.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function get() {\n      return this._show;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      if (value === this._show) {\n        return;\n      } //Since entity.isShowing includes the EntityCollection.show state\n      //in its calculation, we need to loop over the entities array\n      //twice, once to get the old showing value and a second time\n      //to raise the changed event.\n\n\n      this.suspendEvents();\n      var i;\n      var oldShows = [];\n      var entities = this._entities.values;\n      var entitiesLength = entities.length;\n\n      for (i = 0; i < entitiesLength; i++) {\n        oldShows.push(entities[i].isShowing);\n      }\n\n      this._show = value;\n\n      for (i = 0; i < entitiesLength; i++) {\n        var oldShow = oldShows[i];\n        var entity = entities[i];\n\n        if (oldShow !== entity.isShowing) {\n          entity.definitionChanged.raiseEvent(entity, \"isShowing\", entity.isShowing, oldShow);\n        }\n      }\n\n      this.resumeEvents();\n    }\n  },\n\n  /**\n   * Gets the owner of this entity collection, ie. the data source or composite entity collection which created it.\n   * @memberof EntityCollection.prototype\n   * @readonly\n   * @type {DataSource|CompositeEntityCollection}\n   */\n  owner: {\n    get: function get() {\n      return this._owner;\n    }\n  }\n});\n/**\n * Computes the maximum availability of the entities in the collection.\n * If the collection contains a mix of infinitely available data and non-infinite data,\n * it will return the interval pertaining to the non-infinite data only.  If all\n * data is infinite, an infinite interval will be returned.\n *\n * @returns {TimeInterval} The availability of entities in the collection.\n */\n\nEntityCollection.prototype.computeAvailability = function () {\n  var startTime = Iso8601.MAXIMUM_VALUE;\n  var stopTime = Iso8601.MINIMUM_VALUE;\n  var entities = this._entities.values;\n\n  for (var i = 0, len = entities.length; i < len; i++) {\n    var entity = entities[i];\n    var availability = entity.availability;\n\n    if (defined(availability)) {\n      var start = availability.start;\n      var stop = availability.stop;\n\n      if (JulianDate.lessThan(start, startTime) && !start.equals(Iso8601.MINIMUM_VALUE)) {\n        startTime = start;\n      }\n\n      if (JulianDate.greaterThan(stop, stopTime) && !stop.equals(Iso8601.MAXIMUM_VALUE)) {\n        stopTime = stop;\n      }\n    }\n  }\n\n  if (Iso8601.MAXIMUM_VALUE.equals(startTime)) {\n    startTime = Iso8601.MINIMUM_VALUE;\n  }\n\n  if (Iso8601.MINIMUM_VALUE.equals(stopTime)) {\n    stopTime = Iso8601.MAXIMUM_VALUE;\n  }\n\n  return new TimeInterval({\n    start: startTime,\n    stop: stopTime\n  });\n};\n/**\n * Add an entity to the collection.\n *\n * @param {Entity} entity The entity to be added.\n * @returns {Entity} The entity that was added.\n * @exception {DeveloperError} An entity with <entity.id> already exists in this collection.\n */\n\n\nEntityCollection.prototype.add = function (entity) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required.\");\n  } //>>includeEnd('debug');\n\n\n  if (!(entity instanceof Entity)) {\n    entity = new Entity(entity);\n  }\n\n  var id = entity.id;\n  var entities = this._entities;\n\n  if (entities.contains(id)) {\n    throw new RuntimeError(\"An entity with id \" + id + \" already exists in this collection.\");\n  }\n\n  entity.entityCollection = this;\n  entities.set(id, entity);\n\n  if (!this._removedEntities.remove(id)) {\n    this._addedEntities.set(id, entity);\n  }\n\n  entity.definitionChanged.addEventListener(EntityCollection.prototype._onEntityDefinitionChanged, this);\n  fireChangedEvent(this);\n  return entity;\n};\n/**\n * Removes an entity from the collection.\n *\n * @param {Entity} entity The entity to be removed.\n * @returns {Boolean} true if the item was removed, false if it did not exist in the collection.\n */\n\n\nEntityCollection.prototype.remove = function (entity) {\n  if (!defined(entity)) {\n    return false;\n  }\n\n  return this.removeById(entity.id);\n};\n/**\n * Returns true if the provided entity is in this collection, false otherwise.\n *\n * @param {Entity} entity The entity.\n * @returns {Boolean} true if the provided entity is in this collection, false otherwise.\n */\n\n\nEntityCollection.prototype.contains = function (entity) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required\");\n  } //>>includeEnd('debug');\n\n\n  return this._entities.get(entity.id) === entity;\n};\n/**\n * Removes an entity with the provided id from the collection.\n *\n * @param {String} id The id of the entity to remove.\n * @returns {Boolean} true if the item was removed, false if no item with the provided id existed in the collection.\n */\n\n\nEntityCollection.prototype.removeById = function (id) {\n  if (!defined(id)) {\n    return false;\n  }\n\n  var entities = this._entities;\n  var entity = entities.get(id);\n\n  if (!this._entities.remove(id)) {\n    return false;\n  }\n\n  if (!this._addedEntities.remove(id)) {\n    this._removedEntities.set(id, entity);\n\n    this._changedEntities.remove(id);\n  }\n\n  this._entities.remove(id);\n\n  entity.definitionChanged.removeEventListener(EntityCollection.prototype._onEntityDefinitionChanged, this);\n  fireChangedEvent(this);\n  return true;\n};\n/**\n * Removes all Entities from the collection.\n */\n\n\nEntityCollection.prototype.removeAll = function () {\n  //The event should only contain items added before events were suspended\n  //and the contents of the collection.\n  var entities = this._entities;\n  var entitiesLength = entities.length;\n  var array = entities.values;\n  var addedEntities = this._addedEntities;\n  var removed = this._removedEntities;\n\n  for (var i = 0; i < entitiesLength; i++) {\n    var existingItem = array[i];\n    var existingItemId = existingItem.id;\n    var addedItem = addedEntities.get(existingItemId);\n\n    if (!defined(addedItem)) {\n      existingItem.definitionChanged.removeEventListener(EntityCollection.prototype._onEntityDefinitionChanged, this);\n      removed.set(existingItemId, existingItem);\n    }\n  }\n\n  entities.removeAll();\n  addedEntities.removeAll();\n\n  this._changedEntities.removeAll();\n\n  fireChangedEvent(this);\n};\n/**\n * Gets an entity with the specified id.\n *\n * @param {String} id The id of the entity to retrieve.\n * @returns {Entity} The entity with the provided id or undefined if the id did not exist in the collection.\n */\n\n\nEntityCollection.prototype.getById = function (id) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required.\");\n  } //>>includeEnd('debug');\n\n\n  return this._entities.get(id);\n};\n/**\n * Gets an entity with the specified id or creates it and adds it to the collection if it does not exist.\n *\n * @param {String} id The id of the entity to retrieve or create.\n * @returns {Entity} The new or existing object.\n */\n\n\nEntityCollection.prototype.getOrCreateEntity = function (id) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required.\");\n  } //>>includeEnd('debug');\n\n\n  var entity = this._entities.get(id);\n\n  if (!defined(entity)) {\n    entityOptionsScratch.id = id;\n    entity = new Entity(entityOptionsScratch);\n    this.add(entity);\n  }\n\n  return entity;\n};\n\nEntityCollection.prototype._onEntityDefinitionChanged = function (entity) {\n  var id = entity.id;\n\n  if (!this._addedEntities.contains(id)) {\n    this._changedEntities.set(id, entity);\n  }\n\n  fireChangedEvent(this);\n};\n\nexport default EntityCollection;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/EntityCollection.js"],"names":["AssociativeArray","createGuid","defined","DeveloperError","Event","Iso8601","JulianDate","RuntimeError","TimeInterval","Entity","entityOptionsScratch","id","undefined","fireChangedEvent","collection","_firing","_refire","_suspendCount","added","_addedEntities","removed","_removedEntities","changed","_changedEntities","length","addedArray","values","slice","removedArray","changedArray","removeAll","_collectionChanged","raiseEvent","EntityCollection","owner","_owner","_entities","_id","_show","prototype","suspendEvents","resumeEvents","collectionChangedEventCallback","Object","defineProperties","collectionChanged","get","show","set","value","i","oldShows","entities","entitiesLength","push","isShowing","oldShow","entity","definitionChanged","computeAvailability","startTime","MAXIMUM_VALUE","stopTime","MINIMUM_VALUE","len","availability","start","stop","lessThan","equals","greaterThan","add","contains","entityCollection","remove","addEventListener","_onEntityDefinitionChanged","removeById","removeEventListener","array","addedEntities","existingItem","existingItemId","addedItem","getById","getOrCreateEntity"],"mappings":"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","sourcesContent":["import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TimeInterval from \"../Core/TimeInterval.js\";\nimport Entity from \"./Entity.js\";\n\nvar entityOptionsScratch = {\n  id: undefined,\n};\n\nfunction fireChangedEvent(collection) {\n  if (collection._firing) {\n    collection._refire = true;\n    return;\n  }\n\n  if (collection._suspendCount === 0) {\n    var added = collection._addedEntities;\n    var removed = collection._removedEntities;\n    var changed = collection._changedEntities;\n    if (changed.length !== 0 || added.length !== 0 || removed.length !== 0) {\n      collection._firing = true;\n      do {\n        collection._refire = false;\n        var addedArray = added.values.slice(0);\n        var removedArray = removed.values.slice(0);\n        var changedArray = changed.values.slice(0);\n\n        added.removeAll();\n        removed.removeAll();\n        changed.removeAll();\n        collection._collectionChanged.raiseEvent(\n          collection,\n          addedArray,\n          removedArray,\n          changedArray\n        );\n      } while (collection._refire);\n      collection._firing = false;\n    }\n  }\n}\n\n/**\n * An observable collection of {@link Entity} instances where each entity has a unique id.\n * @alias EntityCollection\n * @constructor\n *\n * @param {DataSource|CompositeEntityCollection} [owner] The data source (or composite entity collection) which created this collection.\n */\nfunction EntityCollection(owner) {\n  this._owner = owner;\n  this._entities = new AssociativeArray();\n  this._addedEntities = new AssociativeArray();\n  this._removedEntities = new AssociativeArray();\n  this._changedEntities = new AssociativeArray();\n  this._suspendCount = 0;\n  this._collectionChanged = new Event();\n  this._id = createGuid();\n  this._show = true;\n  this._firing = false;\n  this._refire = false;\n}\n\n/**\n * Prevents {@link EntityCollection#collectionChanged} events from being raised\n * until a corresponding call is made to {@link EntityCollection#resumeEvents}, at which\n * point a single event will be raised that covers all suspended operations.\n * This allows for many items to be added and removed efficiently.\n * This function can be safely called multiple times as long as there\n * are corresponding calls to {@link EntityCollection#resumeEvents}.\n */\nEntityCollection.prototype.suspendEvents = function () {\n  this._suspendCount++;\n};\n\n/**\n * Resumes raising {@link EntityCollection#collectionChanged} events immediately\n * when an item is added or removed.  Any modifications made while while events were suspended\n * will be triggered as a single event when this function is called.\n * This function is reference counted and can safely be called multiple times as long as there\n * are corresponding calls to {@link EntityCollection#resumeEvents}.\n *\n * @exception {DeveloperError} resumeEvents can not be called before suspendEvents.\n */\nEntityCollection.prototype.resumeEvents = function () {\n  //>>includeStart('debug', pragmas.debug);\n  if (this._suspendCount === 0) {\n    throw new DeveloperError(\n      \"resumeEvents can not be called before suspendEvents.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  this._suspendCount--;\n  fireChangedEvent(this);\n};\n\n/**\n * The signature of the event generated by {@link EntityCollection#collectionChanged}.\n * @function\n *\n * @param {EntityCollection} collection The collection that triggered the event.\n * @param {Entity[]} added The array of {@link Entity} instances that have been added to the collection.\n * @param {Entity[]} removed The array of {@link Entity} instances that have been removed from the collection.\n * @param {Entity[]} changed The array of {@link Entity} instances that have been modified.\n */\nEntityCollection.collectionChangedEventCallback = undefined;\n\nObject.defineProperties(EntityCollection.prototype, {\n  /**\n   * Gets the event that is fired when entities are added or removed from the collection.\n   * The generated event is a {@link EntityCollection.collectionChangedEventCallback}.\n   * @memberof EntityCollection.prototype\n   * @readonly\n   * @type {Event}\n   */\n  collectionChanged: {\n    get: function () {\n      return this._collectionChanged;\n    },\n  },\n  /**\n   * Gets a globally unique identifier for this collection.\n   * @memberof EntityCollection.prototype\n   * @readonly\n   * @type {String}\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n  /**\n   * Gets the array of Entity instances in the collection.\n   * This array should not be modified directly.\n   * @memberof EntityCollection.prototype\n   * @readonly\n   * @type {Entity[]}\n   */\n  values: {\n    get: function () {\n      return this._entities.values;\n    },\n  },\n  /**\n   * Gets whether or not this entity collection should be\n   * displayed.  When true, each entity is only displayed if\n   * its own show property is also true.\n   * @memberof EntityCollection.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (value === this._show) {\n        return;\n      }\n\n      //Since entity.isShowing includes the EntityCollection.show state\n      //in its calculation, we need to loop over the entities array\n      //twice, once to get the old showing value and a second time\n      //to raise the changed event.\n      this.suspendEvents();\n\n      var i;\n      var oldShows = [];\n      var entities = this._entities.values;\n      var entitiesLength = entities.length;\n\n      for (i = 0; i < entitiesLength; i++) {\n        oldShows.push(entities[i].isShowing);\n      }\n\n      this._show = value;\n\n      for (i = 0; i < entitiesLength; i++) {\n        var oldShow = oldShows[i];\n        var entity = entities[i];\n        if (oldShow !== entity.isShowing) {\n          entity.definitionChanged.raiseEvent(\n            entity,\n            \"isShowing\",\n            entity.isShowing,\n            oldShow\n          );\n        }\n      }\n\n      this.resumeEvents();\n    },\n  },\n  /**\n   * Gets the owner of this entity collection, ie. the data source or composite entity collection which created it.\n   * @memberof EntityCollection.prototype\n   * @readonly\n   * @type {DataSource|CompositeEntityCollection}\n   */\n  owner: {\n    get: function () {\n      return this._owner;\n    },\n  },\n});\n\n/**\n * Computes the maximum availability of the entities in the collection.\n * If the collection contains a mix of infinitely available data and non-infinite data,\n * it will return the interval pertaining to the non-infinite data only.  If all\n * data is infinite, an infinite interval will be returned.\n *\n * @returns {TimeInterval} The availability of entities in the collection.\n */\nEntityCollection.prototype.computeAvailability = function () {\n  var startTime = Iso8601.MAXIMUM_VALUE;\n  var stopTime = Iso8601.MINIMUM_VALUE;\n  var entities = this._entities.values;\n  for (var i = 0, len = entities.length; i < len; i++) {\n    var entity = entities[i];\n    var availability = entity.availability;\n    if (defined(availability)) {\n      var start = availability.start;\n      var stop = availability.stop;\n      if (\n        JulianDate.lessThan(start, startTime) &&\n        !start.equals(Iso8601.MINIMUM_VALUE)\n      ) {\n        startTime = start;\n      }\n      if (\n        JulianDate.greaterThan(stop, stopTime) &&\n        !stop.equals(Iso8601.MAXIMUM_VALUE)\n      ) {\n        stopTime = stop;\n      }\n    }\n  }\n\n  if (Iso8601.MAXIMUM_VALUE.equals(startTime)) {\n    startTime = Iso8601.MINIMUM_VALUE;\n  }\n  if (Iso8601.MINIMUM_VALUE.equals(stopTime)) {\n    stopTime = Iso8601.MAXIMUM_VALUE;\n  }\n  return new TimeInterval({\n    start: startTime,\n    stop: stopTime,\n  });\n};\n\n/**\n * Add an entity to the collection.\n *\n * @param {Entity} entity The entity to be added.\n * @returns {Entity} The entity that was added.\n * @exception {DeveloperError} An entity with <entity.id> already exists in this collection.\n */\nEntityCollection.prototype.add = function (entity) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!(entity instanceof Entity)) {\n    entity = new Entity(entity);\n  }\n\n  var id = entity.id;\n  var entities = this._entities;\n  if (entities.contains(id)) {\n    throw new RuntimeError(\n      \"An entity with id \" + id + \" already exists in this collection.\"\n    );\n  }\n\n  entity.entityCollection = this;\n  entities.set(id, entity);\n\n  if (!this._removedEntities.remove(id)) {\n    this._addedEntities.set(id, entity);\n  }\n  entity.definitionChanged.addEventListener(\n    EntityCollection.prototype._onEntityDefinitionChanged,\n    this\n  );\n\n  fireChangedEvent(this);\n  return entity;\n};\n\n/**\n * Removes an entity from the collection.\n *\n * @param {Entity} entity The entity to be removed.\n * @returns {Boolean} true if the item was removed, false if it did not exist in the collection.\n */\nEntityCollection.prototype.remove = function (entity) {\n  if (!defined(entity)) {\n    return false;\n  }\n  return this.removeById(entity.id);\n};\n\n/**\n * Returns true if the provided entity is in this collection, false otherwise.\n *\n * @param {Entity} entity The entity.\n * @returns {Boolean} true if the provided entity is in this collection, false otherwise.\n */\nEntityCollection.prototype.contains = function (entity) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required\");\n  }\n  //>>includeEnd('debug');\n  return this._entities.get(entity.id) === entity;\n};\n\n/**\n * Removes an entity with the provided id from the collection.\n *\n * @param {String} id The id of the entity to remove.\n * @returns {Boolean} true if the item was removed, false if no item with the provided id existed in the collection.\n */\nEntityCollection.prototype.removeById = function (id) {\n  if (!defined(id)) {\n    return false;\n  }\n\n  var entities = this._entities;\n  var entity = entities.get(id);\n  if (!this._entities.remove(id)) {\n    return false;\n  }\n\n  if (!this._addedEntities.remove(id)) {\n    this._removedEntities.set(id, entity);\n    this._changedEntities.remove(id);\n  }\n  this._entities.remove(id);\n  entity.definitionChanged.removeEventListener(\n    EntityCollection.prototype._onEntityDefinitionChanged,\n    this\n  );\n  fireChangedEvent(this);\n\n  return true;\n};\n\n/**\n * Removes all Entities from the collection.\n */\nEntityCollection.prototype.removeAll = function () {\n  //The event should only contain items added before events were suspended\n  //and the contents of the collection.\n  var entities = this._entities;\n  var entitiesLength = entities.length;\n  var array = entities.values;\n\n  var addedEntities = this._addedEntities;\n  var removed = this._removedEntities;\n\n  for (var i = 0; i < entitiesLength; i++) {\n    var existingItem = array[i];\n    var existingItemId = existingItem.id;\n    var addedItem = addedEntities.get(existingItemId);\n    if (!defined(addedItem)) {\n      existingItem.definitionChanged.removeEventListener(\n        EntityCollection.prototype._onEntityDefinitionChanged,\n        this\n      );\n      removed.set(existingItemId, existingItem);\n    }\n  }\n\n  entities.removeAll();\n  addedEntities.removeAll();\n  this._changedEntities.removeAll();\n  fireChangedEvent(this);\n};\n\n/**\n * Gets an entity with the specified id.\n *\n * @param {String} id The id of the entity to retrieve.\n * @returns {Entity} The entity with the provided id or undefined if the id did not exist in the collection.\n */\nEntityCollection.prototype.getById = function (id) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required.\");\n  }\n  //>>includeEnd('debug');\n\n  return this._entities.get(id);\n};\n\n/**\n * Gets an entity with the specified id or creates it and adds it to the collection if it does not exist.\n *\n * @param {String} id The id of the entity to retrieve or create.\n * @returns {Entity} The new or existing object.\n */\nEntityCollection.prototype.getOrCreateEntity = function (id) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var entity = this._entities.get(id);\n  if (!defined(entity)) {\n    entityOptionsScratch.id = id;\n    entity = new Entity(entityOptionsScratch);\n    this.add(entity);\n  }\n  return entity;\n};\n\nEntityCollection.prototype._onEntityDefinitionChanged = function (entity) {\n  var id = entity.id;\n  if (!this._addedEntities.contains(id)) {\n    this._changedEntities.set(id, entity);\n  }\n  fireChangedEvent(this);\n};\nexport default EntityCollection;\n"]},"metadata":{},"sourceType":"module"}