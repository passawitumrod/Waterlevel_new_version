{"ast":null,"code":"/**\n * A queue that can enqueue items at the end, and dequeue items from the front.\n *\n * @alias Queue\n * @constructor\n */\nfunction Queue() {\n  this._array = [];\n  this._offset = 0;\n  this._length = 0;\n}\n\nObject.defineProperties(Queue.prototype, {\n  /**\n   * The length of the queue.\n   *\n   * @memberof Queue.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      return this._length;\n    }\n  }\n});\n/**\n * Enqueues the specified item.\n *\n * @param {*} item The item to enqueue.\n */\n\nQueue.prototype.enqueue = function (item) {\n  this._array.push(item);\n\n  this._length++;\n};\n/**\n * Dequeues an item.  Returns undefined if the queue is empty.\n *\n * @returns {*} The the dequeued item.\n */\n\n\nQueue.prototype.dequeue = function () {\n  if (this._length === 0) {\n    return undefined;\n  }\n\n  var array = this._array;\n  var offset = this._offset;\n  var item = array[offset];\n  array[offset] = undefined;\n  offset++;\n\n  if (offset > 10 && offset * 2 > array.length) {\n    //compact array\n    this._array = array.slice(offset);\n    offset = 0;\n  }\n\n  this._offset = offset;\n  this._length--;\n  return item;\n};\n/**\n * Returns the item at the front of the queue.  Returns undefined if the queue is empty.\n *\n * @returns {*} The item at the front of the queue.\n */\n\n\nQueue.prototype.peek = function () {\n  if (this._length === 0) {\n    return undefined;\n  }\n\n  return this._array[this._offset];\n};\n/**\n * Check whether this queue contains the specified item.\n *\n * @param {*} item The item to search for.\n */\n\n\nQueue.prototype.contains = function (item) {\n  return this._array.indexOf(item) !== -1;\n};\n/**\n * Remove all items from the queue.\n */\n\n\nQueue.prototype.clear = function () {\n  this._array.length = this._offset = this._length = 0;\n};\n/**\n * Sort the items in the queue in-place.\n *\n * @param {Queue~Comparator} compareFunction A function that defines the sort order.\n */\n\n\nQueue.prototype.sort = function (compareFunction) {\n  if (this._offset > 0) {\n    //compact array\n    this._array = this._array.slice(this._offset);\n    this._offset = 0;\n  }\n\n  this._array.sort(compareFunction);\n};\n/**\n * A function used to compare two items while sorting a queue.\n * @callback Queue~Comparator\n *\n * @param {*} a An item in the array.\n * @param {*} b An item in the array.\n * @returns {Number} Returns a negative value if <code>a</code> is less than <code>b</code>,\n *          a positive value if <code>a</code> is greater than <code>b</code>, or\n *          0 if <code>a</code> is equal to <code>b</code>.\n *\n * @example\n * function compareNumbers(a, b) {\n *     return a - b;\n * }\n */\n\n\nexport default Queue;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/Queue.js"],"names":["Queue","_array","_offset","_length","Object","defineProperties","prototype","length","get","enqueue","item","push","dequeue","undefined","array","offset","slice","peek","contains","indexOf","clear","sort","compareFunction"],"mappings":"AAAA;;;;;;AAMA,SAASA,KAAT,GAAiB;AACf,OAAKC,MAAL,GAAc,EAAd;AACA,OAAKC,OAAL,GAAe,CAAf;AACA,OAAKC,OAAL,GAAe,CAAf;AACD;;AAEDC,MAAM,CAACC,gBAAP,CAAwBL,KAAK,CAACM,SAA9B,EAAyC;AACvC;;;;;;;;AAQAC,EAAAA,MAAM,EAAE;AACNC,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKL,OAAZ;AACD;AAHK;AAT+B,CAAzC;AAgBA;;;;;;AAKAH,KAAK,CAACM,SAAN,CAAgBG,OAAhB,GAA0B,UAAUC,IAAV,EAAgB;AACxC,OAAKT,MAAL,CAAYU,IAAZ,CAAiBD,IAAjB;;AACA,OAAKP,OAAL;AACD,CAHD;AAKA;;;;;;;AAKAH,KAAK,CAACM,SAAN,CAAgBM,OAAhB,GAA0B,YAAY;AACpC,MAAI,KAAKT,OAAL,KAAiB,CAArB,EAAwB;AACtB,WAAOU,SAAP;AACD;;AAED,MAAIC,KAAK,GAAG,KAAKb,MAAjB;AACA,MAAIc,MAAM,GAAG,KAAKb,OAAlB;AACA,MAAIQ,IAAI,GAAGI,KAAK,CAACC,MAAD,CAAhB;AACAD,EAAAA,KAAK,CAACC,MAAD,CAAL,GAAgBF,SAAhB;AAEAE,EAAAA,MAAM;;AACN,MAAIA,MAAM,GAAG,EAAT,IAAeA,MAAM,GAAG,CAAT,GAAaD,KAAK,CAACP,MAAtC,EAA8C;AAC5C;AACA,SAAKN,MAAL,GAAca,KAAK,CAACE,KAAN,CAAYD,MAAZ,CAAd;AACAA,IAAAA,MAAM,GAAG,CAAT;AACD;;AAED,OAAKb,OAAL,GAAea,MAAf;AACA,OAAKZ,OAAL;AAEA,SAAOO,IAAP;AACD,CArBD;AAuBA;;;;;;;AAKAV,KAAK,CAACM,SAAN,CAAgBW,IAAhB,GAAuB,YAAY;AACjC,MAAI,KAAKd,OAAL,KAAiB,CAArB,EAAwB;AACtB,WAAOU,SAAP;AACD;;AAED,SAAO,KAAKZ,MAAL,CAAY,KAAKC,OAAjB,CAAP;AACD,CAND;AAQA;;;;;;;AAKAF,KAAK,CAACM,SAAN,CAAgBY,QAAhB,GAA2B,UAAUR,IAAV,EAAgB;AACzC,SAAO,KAAKT,MAAL,CAAYkB,OAAZ,CAAoBT,IAApB,MAA8B,CAAC,CAAtC;AACD,CAFD;AAIA;;;;;AAGAV,KAAK,CAACM,SAAN,CAAgBc,KAAhB,GAAwB,YAAY;AAClC,OAAKnB,MAAL,CAAYM,MAAZ,GAAqB,KAAKL,OAAL,GAAe,KAAKC,OAAL,GAAe,CAAnD;AACD,CAFD;AAIA;;;;;;;AAKAH,KAAK,CAACM,SAAN,CAAgBe,IAAhB,GAAuB,UAAUC,eAAV,EAA2B;AAChD,MAAI,KAAKpB,OAAL,GAAe,CAAnB,EAAsB;AACpB;AACA,SAAKD,MAAL,GAAc,KAAKA,MAAL,CAAYe,KAAZ,CAAkB,KAAKd,OAAvB,CAAd;AACA,SAAKA,OAAL,GAAe,CAAf;AACD;;AAED,OAAKD,MAAL,CAAYoB,IAAZ,CAAiBC,eAAjB;AACD,CARD;AAUA;;;;;;;;;;;;;;;;;AAeA,eAAetB,KAAf","sourcesContent":["/**\n * A queue that can enqueue items at the end, and dequeue items from the front.\n *\n * @alias Queue\n * @constructor\n */\nfunction Queue() {\n  this._array = [];\n  this._offset = 0;\n  this._length = 0;\n}\n\nObject.defineProperties(Queue.prototype, {\n  /**\n   * The length of the queue.\n   *\n   * @memberof Queue.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      return this._length;\n    },\n  },\n});\n\n/**\n * Enqueues the specified item.\n *\n * @param {*} item The item to enqueue.\n */\nQueue.prototype.enqueue = function (item) {\n  this._array.push(item);\n  this._length++;\n};\n\n/**\n * Dequeues an item.  Returns undefined if the queue is empty.\n *\n * @returns {*} The the dequeued item.\n */\nQueue.prototype.dequeue = function () {\n  if (this._length === 0) {\n    return undefined;\n  }\n\n  var array = this._array;\n  var offset = this._offset;\n  var item = array[offset];\n  array[offset] = undefined;\n\n  offset++;\n  if (offset > 10 && offset * 2 > array.length) {\n    //compact array\n    this._array = array.slice(offset);\n    offset = 0;\n  }\n\n  this._offset = offset;\n  this._length--;\n\n  return item;\n};\n\n/**\n * Returns the item at the front of the queue.  Returns undefined if the queue is empty.\n *\n * @returns {*} The item at the front of the queue.\n */\nQueue.prototype.peek = function () {\n  if (this._length === 0) {\n    return undefined;\n  }\n\n  return this._array[this._offset];\n};\n\n/**\n * Check whether this queue contains the specified item.\n *\n * @param {*} item The item to search for.\n */\nQueue.prototype.contains = function (item) {\n  return this._array.indexOf(item) !== -1;\n};\n\n/**\n * Remove all items from the queue.\n */\nQueue.prototype.clear = function () {\n  this._array.length = this._offset = this._length = 0;\n};\n\n/**\n * Sort the items in the queue in-place.\n *\n * @param {Queue~Comparator} compareFunction A function that defines the sort order.\n */\nQueue.prototype.sort = function (compareFunction) {\n  if (this._offset > 0) {\n    //compact array\n    this._array = this._array.slice(this._offset);\n    this._offset = 0;\n  }\n\n  this._array.sort(compareFunction);\n};\n\n/**\n * A function used to compare two items while sorting a queue.\n * @callback Queue~Comparator\n *\n * @param {*} a An item in the array.\n * @param {*} b An item in the array.\n * @returns {Number} Returns a negative value if <code>a</code> is less than <code>b</code>,\n *          a positive value if <code>a</code> is greater than <code>b</code>, or\n *          0 if <code>a</code> is equal to <code>b</code>.\n *\n * @example\n * function compareNumbers(a, b) {\n *     return a - b;\n * }\n */\nexport default Queue;\n"]},"metadata":{},"sourceType":"module"}