{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport GeographicProjection from \"../Core/GeographicProjection.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TileProviderError from \"../Core/TileProviderError.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport when from \"../ThirdParty/when.js\";\nimport UrlTemplateImageryProvider from \"./UrlTemplateImageryProvider.js\";\n/**\n * An imagery provider that provides tiled imagery as generated by\n * {@link http://www.maptiler.org/|MapTiler}, {@link http://www.klokan.cz/projects/gdal2tiles/|GDAL2Tiles}, etc.\n *\n * @alias TileMapServiceImageryProvider\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Resource|String|Promise<Resource>|Promise<String>} [options.url='.'] Path to image tiles on server.\n * @param {String} [options.fileExtension='png'] The file extension for images on the server.\n * @param {Credit|String} [options.credit=''] A credit for the data source, which is displayed on the canvas.\n * @param {Number} [options.minimumLevel=0] The minimum level-of-detail supported by the imagery provider.  Take care when specifying\n *                 this that the number of tiles at the minimum level is small, such as four or less.  A larger number is likely\n *                 to result in rendering problems.\n * @param {Number} [options.maximumLevel] The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n * @param {Rectangle} [options.rectangle=Rectangle.MAX_VALUE] The rectangle, in radians, covered by the image.\n * @param {TilingScheme} [options.tilingScheme] The tiling scheme specifying how the ellipsoidal\n * surface is broken into tiles.  If this parameter is not provided, a {@link WebMercatorTilingScheme}\n * is used.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n *                    this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *                    parameter is specified, the WGS84 ellipsoid is used.\n * @param {Number} [options.tileWidth=256] Pixel width of image tiles.\n * @param {Number} [options.tileHeight=256] Pixel height of image tiles.\n * @param {Boolean} [options.flipXY] Older versions of gdal2tiles.py flipped X and Y values in tilemapresource.xml.\n * Specifying this option will do the same, allowing for loading of these incorrect tilesets.\n * @returns {UrlTemplateImageryProvider} The imagery provider.\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n * @example\n * var tms = new Cesium.TileMapServiceImageryProvider({\n *    url : '../images/cesium_maptiler/Cesium_Logo_Color',\n *    fileExtension: 'png',\n *    maximumLevel: 4,\n *    rectangle: new Cesium.Rectangle(\n *        Cesium.Math.toRadians(-120.0),\n *        Cesium.Math.toRadians(20.0),\n *        Cesium.Math.toRadians(-60.0),\n *        Cesium.Math.toRadians(40.0))\n * });\n */\n\nfunction TileMapServiceImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT); //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(options.url)) {\n    throw new DeveloperError(\"options.url is required.\");\n  } //>>includeEnd('debug');\n\n\n  var deferred = when.defer();\n  UrlTemplateImageryProvider.call(this, deferred.promise);\n  this._tmsResource = undefined;\n  this._xmlResource = undefined;\n  this._options = options;\n  this._deferred = deferred;\n  this._metadataError = undefined;\n  this._metadataSuccess = this._metadataSuccess.bind(this);\n  this._metadataFailure = this._metadataFailure.bind(this);\n  this._requestMetadata = this._requestMetadata.bind(this);\n  var resource;\n  var that = this;\n  when(options.url).then(function (url) {\n    resource = Resource.createIfNeeded(url);\n    resource.appendForwardSlash();\n    that._tmsResource = resource;\n    that._xmlResource = resource.getDerivedResource({\n      url: \"tilemapresource.xml\"\n    });\n\n    that._requestMetadata();\n  }).otherwise(function (e) {\n    deferred.reject(e);\n  });\n}\n\nif (defined(Object.create)) {\n  TileMapServiceImageryProvider.prototype = Object.create(UrlTemplateImageryProvider.prototype);\n  TileMapServiceImageryProvider.prototype.constructor = TileMapServiceImageryProvider;\n}\n\nTileMapServiceImageryProvider.prototype._requestMetadata = function () {\n  // Try to load remaining parameters from XML\n  this._xmlResource.fetchXML().then(this._metadataSuccess).otherwise(this._metadataFailure);\n};\n/**\n * Mutates the properties of a given rectangle so it does not extend outside of the given tiling scheme's rectangle\n * @private\n */\n\n\nfunction confineRectangleToTilingScheme(rectangle, tilingScheme) {\n  if (rectangle.west < tilingScheme.rectangle.west) {\n    rectangle.west = tilingScheme.rectangle.west;\n  }\n\n  if (rectangle.east > tilingScheme.rectangle.east) {\n    rectangle.east = tilingScheme.rectangle.east;\n  }\n\n  if (rectangle.south < tilingScheme.rectangle.south) {\n    rectangle.south = tilingScheme.rectangle.south;\n  }\n\n  if (rectangle.north > tilingScheme.rectangle.north) {\n    rectangle.north = tilingScheme.rectangle.north;\n  }\n\n  return rectangle;\n}\n\nfunction calculateSafeMinimumDetailLevel(tilingScheme, rectangle, minimumLevel) {\n  // Check the number of tiles at the minimum level.  If it's more than four,\n  // try requesting the lower levels anyway, because starting at the higher minimum\n  // level will cause too many tiles to be downloaded and rendered.\n  var swTile = tilingScheme.positionToTileXY(Rectangle.southwest(rectangle), minimumLevel);\n  var neTile = tilingScheme.positionToTileXY(Rectangle.northeast(rectangle), minimumLevel);\n  var tileCount = (Math.abs(neTile.x - swTile.x) + 1) * (Math.abs(neTile.y - swTile.y) + 1);\n\n  if (tileCount > 4) {\n    return 0;\n  }\n\n  return minimumLevel;\n}\n\nTileMapServiceImageryProvider.prototype._metadataSuccess = function (xml) {\n  var tileFormatRegex = /tileformat/i;\n  var tileSetRegex = /tileset/i;\n  var tileSetsRegex = /tilesets/i;\n  var bboxRegex = /boundingbox/i;\n  var format, bbox, tilesets;\n  var tilesetsList = []; //list of TileSets\n\n  var xmlResource = this._xmlResource;\n  var metadataError = this._metadataError;\n  var deferred = this._deferred;\n  var requestMetadata = this._requestMetadata; // Allowing options properties (already copied to that) to override XML values\n  // Iterate XML Document nodes for properties\n\n  var nodeList = xml.childNodes[0].childNodes;\n\n  for (var i = 0; i < nodeList.length; i++) {\n    if (tileFormatRegex.test(nodeList.item(i).nodeName)) {\n      format = nodeList.item(i);\n    } else if (tileSetsRegex.test(nodeList.item(i).nodeName)) {\n      tilesets = nodeList.item(i); // Node list of TileSets\n\n      var tileSetNodes = nodeList.item(i).childNodes; // Iterate the nodes to find all TileSets\n\n      for (var j = 0; j < tileSetNodes.length; j++) {\n        if (tileSetRegex.test(tileSetNodes.item(j).nodeName)) {\n          // Add them to tilesets list\n          tilesetsList.push(tileSetNodes.item(j));\n        }\n      }\n    } else if (bboxRegex.test(nodeList.item(i).nodeName)) {\n      bbox = nodeList.item(i);\n    }\n  }\n\n  var message;\n\n  if (!defined(tilesets) || !defined(bbox)) {\n    message = \"Unable to find expected tilesets or bbox attributes in \" + xmlResource.url + \".\";\n    metadataError = TileProviderError.handleError(metadataError, this, this.errorEvent, message, undefined, undefined, undefined, requestMetadata);\n\n    if (!metadataError.retry) {\n      deferred.reject(new RuntimeError(message));\n    }\n\n    this._metadataError = metadataError;\n    return;\n  }\n\n  var options = this._options;\n  var fileExtension = defaultValue(options.fileExtension, format.getAttribute(\"extension\"));\n  var tileWidth = defaultValue(options.tileWidth, parseInt(format.getAttribute(\"width\"), 10));\n  var tileHeight = defaultValue(options.tileHeight, parseInt(format.getAttribute(\"height\"), 10));\n  var minimumLevel = defaultValue(options.minimumLevel, parseInt(tilesetsList[0].getAttribute(\"order\"), 10));\n  var maximumLevel = defaultValue(options.maximumLevel, parseInt(tilesetsList[tilesetsList.length - 1].getAttribute(\"order\"), 10));\n  var tilingSchemeName = tilesets.getAttribute(\"profile\");\n  var tilingScheme = options.tilingScheme;\n\n  if (!defined(tilingScheme)) {\n    if (tilingSchemeName === \"geodetic\" || tilingSchemeName === \"global-geodetic\") {\n      tilingScheme = new GeographicTilingScheme({\n        ellipsoid: options.ellipsoid\n      });\n    } else if (tilingSchemeName === \"mercator\" || tilingSchemeName === \"global-mercator\") {\n      tilingScheme = new WebMercatorTilingScheme({\n        ellipsoid: options.ellipsoid\n      });\n    } else {\n      message = xmlResource.url + \"specifies an unsupported profile attribute, \" + tilingSchemeName + \".\";\n      metadataError = TileProviderError.handleError(metadataError, this, this.errorEvent, message, undefined, undefined, undefined, requestMetadata);\n\n      if (!metadataError.retry) {\n        deferred.reject(new RuntimeError(message));\n      }\n\n      this._metadataError = metadataError;\n      return;\n    }\n  } // rectangle handling\n\n\n  var rectangle = Rectangle.clone(options.rectangle);\n\n  if (!defined(rectangle)) {\n    var sw;\n    var ne;\n    var swXY;\n    var neXY; // In older versions of gdal x and y values were flipped, which is why we check for an option to flip\n    // the values here as well. Unfortunately there is no way to autodetect whether flipping is needed.\n\n    var flipXY = defaultValue(options.flipXY, false);\n\n    if (flipXY) {\n      swXY = new Cartesian2(parseFloat(bbox.getAttribute(\"miny\")), parseFloat(bbox.getAttribute(\"minx\")));\n      neXY = new Cartesian2(parseFloat(bbox.getAttribute(\"maxy\")), parseFloat(bbox.getAttribute(\"maxx\")));\n    } else {\n      swXY = new Cartesian2(parseFloat(bbox.getAttribute(\"minx\")), parseFloat(bbox.getAttribute(\"miny\")));\n      neXY = new Cartesian2(parseFloat(bbox.getAttribute(\"maxx\")), parseFloat(bbox.getAttribute(\"maxy\")));\n    } // Determine based on the profile attribute if this tileset was generated by gdal2tiles.py, which\n    // uses 'mercator' and 'geodetic' profiles, or by a tool compliant with the TMS standard, which is\n    // 'global-mercator' and 'global-geodetic' profiles. In the gdal2Tiles case, X and Y are always in\n    // geodetic degrees.\n\n\n    var isGdal2tiles = tilingSchemeName === \"geodetic\" || tilingSchemeName === \"mercator\";\n\n    if (tilingScheme.projection instanceof GeographicProjection || isGdal2tiles) {\n      sw = Cartographic.fromDegrees(swXY.x, swXY.y);\n      ne = Cartographic.fromDegrees(neXY.x, neXY.y);\n    } else {\n      var projection = tilingScheme.projection;\n      sw = projection.unproject(swXY);\n      ne = projection.unproject(neXY);\n    }\n\n    rectangle = new Rectangle(sw.longitude, sw.latitude, ne.longitude, ne.latitude);\n  } // The rectangle must not be outside the bounds allowed by the tiling scheme.\n\n\n  rectangle = confineRectangleToTilingScheme(rectangle, tilingScheme); // clamp our minimum detail level to something that isn't going to request a ridiculous number of tiles\n\n  minimumLevel = calculateSafeMinimumDetailLevel(tilingScheme, rectangle, minimumLevel);\n\n  var templateResource = this._tmsResource.getDerivedResource({\n    url: \"{z}/{x}/{reverseY}.\" + fileExtension\n  });\n\n  deferred.resolve({\n    url: templateResource,\n    tilingScheme: tilingScheme,\n    rectangle: rectangle,\n    tileWidth: tileWidth,\n    tileHeight: tileHeight,\n    minimumLevel: minimumLevel,\n    maximumLevel: maximumLevel,\n    tileDiscardPolicy: options.tileDiscardPolicy,\n    credit: options.credit\n  });\n};\n\nTileMapServiceImageryProvider.prototype._metadataFailure = function (error) {\n  // Can't load XML, still allow options and defaults\n  var options = this._options;\n  var fileExtension = defaultValue(options.fileExtension, \"png\");\n  var tileWidth = defaultValue(options.tileWidth, 256);\n  var tileHeight = defaultValue(options.tileHeight, 256);\n  var maximumLevel = options.maximumLevel;\n  var tilingScheme = defined(options.tilingScheme) ? options.tilingScheme : new WebMercatorTilingScheme({\n    ellipsoid: options.ellipsoid\n  });\n  var rectangle = defaultValue(options.rectangle, tilingScheme.rectangle); // The rectangle must not be outside the bounds allowed by the tiling scheme.\n\n  rectangle = confineRectangleToTilingScheme(rectangle, tilingScheme); // make sure we use a safe minimum detail level, so we don't request a ridiculous number of tiles\n\n  var minimumLevel = calculateSafeMinimumDetailLevel(tilingScheme, rectangle, options.maximumLevel);\n\n  var templateResource = this._tmsResource.getDerivedResource({\n    url: \"{z}/{x}/{reverseY}.\" + fileExtension\n  });\n\n  this._deferred.resolve({\n    url: templateResource,\n    tilingScheme: tilingScheme,\n    rectangle: rectangle,\n    tileWidth: tileWidth,\n    tileHeight: tileHeight,\n    minimumLevel: minimumLevel,\n    maximumLevel: maximumLevel,\n    tileDiscardPolicy: options.tileDiscardPolicy,\n    credit: options.credit\n  });\n};\n\nexport default TileMapServiceImageryProvider;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/TileMapServiceImageryProvider.js"],"names":["Cartesian2","Cartographic","defaultValue","defined","DeveloperError","GeographicProjection","GeographicTilingScheme","Rectangle","Resource","RuntimeError","TileProviderError","WebMercatorTilingScheme","when","UrlTemplateImageryProvider","TileMapServiceImageryProvider","options","EMPTY_OBJECT","url","deferred","defer","call","promise","_tmsResource","undefined","_xmlResource","_options","_deferred","_metadataError","_metadataSuccess","bind","_metadataFailure","_requestMetadata","resource","that","then","createIfNeeded","appendForwardSlash","getDerivedResource","otherwise","e","reject","Object","create","prototype","constructor","fetchXML","confineRectangleToTilingScheme","rectangle","tilingScheme","west","east","south","north","calculateSafeMinimumDetailLevel","minimumLevel","swTile","positionToTileXY","southwest","neTile","northeast","tileCount","Math","abs","x","y","xml","tileFormatRegex","tileSetRegex","tileSetsRegex","bboxRegex","format","bbox","tilesets","tilesetsList","xmlResource","metadataError","requestMetadata","nodeList","childNodes","i","length","test","item","nodeName","tileSetNodes","j","push","message","handleError","errorEvent","retry","fileExtension","getAttribute","tileWidth","parseInt","tileHeight","maximumLevel","tilingSchemeName","ellipsoid","clone","sw","ne","swXY","neXY","flipXY","parseFloat","isGdal2tiles","projection","fromDegrees","unproject","longitude","latitude","templateResource","resolve","tileDiscardPolicy","credit","error"],"mappings":"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","sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport GeographicProjection from \"../Core/GeographicProjection.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TileProviderError from \"../Core/TileProviderError.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport when from \"../ThirdParty/when.js\";\nimport UrlTemplateImageryProvider from \"./UrlTemplateImageryProvider.js\";\n\n/**\n * An imagery provider that provides tiled imagery as generated by\n * {@link http://www.maptiler.org/|MapTiler}, {@link http://www.klokan.cz/projects/gdal2tiles/|GDAL2Tiles}, etc.\n *\n * @alias TileMapServiceImageryProvider\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Resource|String|Promise<Resource>|Promise<String>} [options.url='.'] Path to image tiles on server.\n * @param {String} [options.fileExtension='png'] The file extension for images on the server.\n * @param {Credit|String} [options.credit=''] A credit for the data source, which is displayed on the canvas.\n * @param {Number} [options.minimumLevel=0] The minimum level-of-detail supported by the imagery provider.  Take care when specifying\n *                 this that the number of tiles at the minimum level is small, such as four or less.  A larger number is likely\n *                 to result in rendering problems.\n * @param {Number} [options.maximumLevel] The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n * @param {Rectangle} [options.rectangle=Rectangle.MAX_VALUE] The rectangle, in radians, covered by the image.\n * @param {TilingScheme} [options.tilingScheme] The tiling scheme specifying how the ellipsoidal\n * surface is broken into tiles.  If this parameter is not provided, a {@link WebMercatorTilingScheme}\n * is used.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n *                    this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *                    parameter is specified, the WGS84 ellipsoid is used.\n * @param {Number} [options.tileWidth=256] Pixel width of image tiles.\n * @param {Number} [options.tileHeight=256] Pixel height of image tiles.\n * @param {Boolean} [options.flipXY] Older versions of gdal2tiles.py flipped X and Y values in tilemapresource.xml.\n * Specifying this option will do the same, allowing for loading of these incorrect tilesets.\n * @returns {UrlTemplateImageryProvider} The imagery provider.\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n * @example\n * var tms = new Cesium.TileMapServiceImageryProvider({\n *    url : '../images/cesium_maptiler/Cesium_Logo_Color',\n *    fileExtension: 'png',\n *    maximumLevel: 4,\n *    rectangle: new Cesium.Rectangle(\n *        Cesium.Math.toRadians(-120.0),\n *        Cesium.Math.toRadians(20.0),\n *        Cesium.Math.toRadians(-60.0),\n *        Cesium.Math.toRadians(40.0))\n * });\n */\nfunction TileMapServiceImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options.url)) {\n    throw new DeveloperError(\"options.url is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var deferred = when.defer();\n  UrlTemplateImageryProvider.call(this, deferred.promise);\n\n  this._tmsResource = undefined;\n  this._xmlResource = undefined;\n  this._options = options;\n  this._deferred = deferred;\n  this._metadataError = undefined;\n\n  this._metadataSuccess = this._metadataSuccess.bind(this);\n  this._metadataFailure = this._metadataFailure.bind(this);\n  this._requestMetadata = this._requestMetadata.bind(this);\n\n  var resource;\n  var that = this;\n  when(options.url)\n    .then(function (url) {\n      resource = Resource.createIfNeeded(url);\n      resource.appendForwardSlash();\n\n      that._tmsResource = resource;\n      that._xmlResource = resource.getDerivedResource({\n        url: \"tilemapresource.xml\",\n      });\n\n      that._requestMetadata();\n    })\n    .otherwise(function (e) {\n      deferred.reject(e);\n    });\n}\n\nif (defined(Object.create)) {\n  TileMapServiceImageryProvider.prototype = Object.create(\n    UrlTemplateImageryProvider.prototype\n  );\n  TileMapServiceImageryProvider.prototype.constructor = TileMapServiceImageryProvider;\n}\n\nTileMapServiceImageryProvider.prototype._requestMetadata = function () {\n  // Try to load remaining parameters from XML\n  this._xmlResource\n    .fetchXML()\n    .then(this._metadataSuccess)\n    .otherwise(this._metadataFailure);\n};\n\n/**\n * Mutates the properties of a given rectangle so it does not extend outside of the given tiling scheme's rectangle\n * @private\n */\nfunction confineRectangleToTilingScheme(rectangle, tilingScheme) {\n  if (rectangle.west < tilingScheme.rectangle.west) {\n    rectangle.west = tilingScheme.rectangle.west;\n  }\n  if (rectangle.east > tilingScheme.rectangle.east) {\n    rectangle.east = tilingScheme.rectangle.east;\n  }\n  if (rectangle.south < tilingScheme.rectangle.south) {\n    rectangle.south = tilingScheme.rectangle.south;\n  }\n  if (rectangle.north > tilingScheme.rectangle.north) {\n    rectangle.north = tilingScheme.rectangle.north;\n  }\n  return rectangle;\n}\n\nfunction calculateSafeMinimumDetailLevel(\n  tilingScheme,\n  rectangle,\n  minimumLevel\n) {\n  // Check the number of tiles at the minimum level.  If it's more than four,\n  // try requesting the lower levels anyway, because starting at the higher minimum\n  // level will cause too many tiles to be downloaded and rendered.\n  var swTile = tilingScheme.positionToTileXY(\n    Rectangle.southwest(rectangle),\n    minimumLevel\n  );\n  var neTile = tilingScheme.positionToTileXY(\n    Rectangle.northeast(rectangle),\n    minimumLevel\n  );\n  var tileCount =\n    (Math.abs(neTile.x - swTile.x) + 1) * (Math.abs(neTile.y - swTile.y) + 1);\n  if (tileCount > 4) {\n    return 0;\n  }\n  return minimumLevel;\n}\n\nTileMapServiceImageryProvider.prototype._metadataSuccess = function (xml) {\n  var tileFormatRegex = /tileformat/i;\n  var tileSetRegex = /tileset/i;\n  var tileSetsRegex = /tilesets/i;\n  var bboxRegex = /boundingbox/i;\n  var format, bbox, tilesets;\n  var tilesetsList = []; //list of TileSets\n  var xmlResource = this._xmlResource;\n  var metadataError = this._metadataError;\n  var deferred = this._deferred;\n  var requestMetadata = this._requestMetadata;\n\n  // Allowing options properties (already copied to that) to override XML values\n\n  // Iterate XML Document nodes for properties\n  var nodeList = xml.childNodes[0].childNodes;\n  for (var i = 0; i < nodeList.length; i++) {\n    if (tileFormatRegex.test(nodeList.item(i).nodeName)) {\n      format = nodeList.item(i);\n    } else if (tileSetsRegex.test(nodeList.item(i).nodeName)) {\n      tilesets = nodeList.item(i); // Node list of TileSets\n      var tileSetNodes = nodeList.item(i).childNodes;\n      // Iterate the nodes to find all TileSets\n      for (var j = 0; j < tileSetNodes.length; j++) {\n        if (tileSetRegex.test(tileSetNodes.item(j).nodeName)) {\n          // Add them to tilesets list\n          tilesetsList.push(tileSetNodes.item(j));\n        }\n      }\n    } else if (bboxRegex.test(nodeList.item(i).nodeName)) {\n      bbox = nodeList.item(i);\n    }\n  }\n\n  var message;\n  if (!defined(tilesets) || !defined(bbox)) {\n    message =\n      \"Unable to find expected tilesets or bbox attributes in \" +\n      xmlResource.url +\n      \".\";\n    metadataError = TileProviderError.handleError(\n      metadataError,\n      this,\n      this.errorEvent,\n      message,\n      undefined,\n      undefined,\n      undefined,\n      requestMetadata\n    );\n    if (!metadataError.retry) {\n      deferred.reject(new RuntimeError(message));\n    }\n    this._metadataError = metadataError;\n    return;\n  }\n\n  var options = this._options;\n  var fileExtension = defaultValue(\n    options.fileExtension,\n    format.getAttribute(\"extension\")\n  );\n  var tileWidth = defaultValue(\n    options.tileWidth,\n    parseInt(format.getAttribute(\"width\"), 10)\n  );\n  var tileHeight = defaultValue(\n    options.tileHeight,\n    parseInt(format.getAttribute(\"height\"), 10)\n  );\n  var minimumLevel = defaultValue(\n    options.minimumLevel,\n    parseInt(tilesetsList[0].getAttribute(\"order\"), 10)\n  );\n  var maximumLevel = defaultValue(\n    options.maximumLevel,\n    parseInt(tilesetsList[tilesetsList.length - 1].getAttribute(\"order\"), 10)\n  );\n  var tilingSchemeName = tilesets.getAttribute(\"profile\");\n  var tilingScheme = options.tilingScheme;\n\n  if (!defined(tilingScheme)) {\n    if (\n      tilingSchemeName === \"geodetic\" ||\n      tilingSchemeName === \"global-geodetic\"\n    ) {\n      tilingScheme = new GeographicTilingScheme({\n        ellipsoid: options.ellipsoid,\n      });\n    } else if (\n      tilingSchemeName === \"mercator\" ||\n      tilingSchemeName === \"global-mercator\"\n    ) {\n      tilingScheme = new WebMercatorTilingScheme({\n        ellipsoid: options.ellipsoid,\n      });\n    } else {\n      message =\n        xmlResource.url +\n        \"specifies an unsupported profile attribute, \" +\n        tilingSchemeName +\n        \".\";\n      metadataError = TileProviderError.handleError(\n        metadataError,\n        this,\n        this.errorEvent,\n        message,\n        undefined,\n        undefined,\n        undefined,\n        requestMetadata\n      );\n      if (!metadataError.retry) {\n        deferred.reject(new RuntimeError(message));\n      }\n      this._metadataError = metadataError;\n      return;\n    }\n  }\n\n  // rectangle handling\n  var rectangle = Rectangle.clone(options.rectangle);\n\n  if (!defined(rectangle)) {\n    var sw;\n    var ne;\n    var swXY;\n    var neXY;\n\n    // In older versions of gdal x and y values were flipped, which is why we check for an option to flip\n    // the values here as well. Unfortunately there is no way to autodetect whether flipping is needed.\n    var flipXY = defaultValue(options.flipXY, false);\n    if (flipXY) {\n      swXY = new Cartesian2(\n        parseFloat(bbox.getAttribute(\"miny\")),\n        parseFloat(bbox.getAttribute(\"minx\"))\n      );\n      neXY = new Cartesian2(\n        parseFloat(bbox.getAttribute(\"maxy\")),\n        parseFloat(bbox.getAttribute(\"maxx\"))\n      );\n    } else {\n      swXY = new Cartesian2(\n        parseFloat(bbox.getAttribute(\"minx\")),\n        parseFloat(bbox.getAttribute(\"miny\"))\n      );\n      neXY = new Cartesian2(\n        parseFloat(bbox.getAttribute(\"maxx\")),\n        parseFloat(bbox.getAttribute(\"maxy\"))\n      );\n    }\n\n    // Determine based on the profile attribute if this tileset was generated by gdal2tiles.py, which\n    // uses 'mercator' and 'geodetic' profiles, or by a tool compliant with the TMS standard, which is\n    // 'global-mercator' and 'global-geodetic' profiles. In the gdal2Tiles case, X and Y are always in\n    // geodetic degrees.\n    var isGdal2tiles =\n      tilingSchemeName === \"geodetic\" || tilingSchemeName === \"mercator\";\n    if (\n      tilingScheme.projection instanceof GeographicProjection ||\n      isGdal2tiles\n    ) {\n      sw = Cartographic.fromDegrees(swXY.x, swXY.y);\n      ne = Cartographic.fromDegrees(neXY.x, neXY.y);\n    } else {\n      var projection = tilingScheme.projection;\n      sw = projection.unproject(swXY);\n      ne = projection.unproject(neXY);\n    }\n\n    rectangle = new Rectangle(\n      sw.longitude,\n      sw.latitude,\n      ne.longitude,\n      ne.latitude\n    );\n  }\n\n  // The rectangle must not be outside the bounds allowed by the tiling scheme.\n  rectangle = confineRectangleToTilingScheme(rectangle, tilingScheme);\n  // clamp our minimum detail level to something that isn't going to request a ridiculous number of tiles\n  minimumLevel = calculateSafeMinimumDetailLevel(\n    tilingScheme,\n    rectangle,\n    minimumLevel\n  );\n\n  var templateResource = this._tmsResource.getDerivedResource({\n    url: \"{z}/{x}/{reverseY}.\" + fileExtension,\n  });\n\n  deferred.resolve({\n    url: templateResource,\n    tilingScheme: tilingScheme,\n    rectangle: rectangle,\n    tileWidth: tileWidth,\n    tileHeight: tileHeight,\n    minimumLevel: minimumLevel,\n    maximumLevel: maximumLevel,\n    tileDiscardPolicy: options.tileDiscardPolicy,\n    credit: options.credit,\n  });\n};\n\nTileMapServiceImageryProvider.prototype._metadataFailure = function (error) {\n  // Can't load XML, still allow options and defaults\n  var options = this._options;\n  var fileExtension = defaultValue(options.fileExtension, \"png\");\n  var tileWidth = defaultValue(options.tileWidth, 256);\n  var tileHeight = defaultValue(options.tileHeight, 256);\n  var maximumLevel = options.maximumLevel;\n  var tilingScheme = defined(options.tilingScheme)\n    ? options.tilingScheme\n    : new WebMercatorTilingScheme({ ellipsoid: options.ellipsoid });\n\n  var rectangle = defaultValue(options.rectangle, tilingScheme.rectangle);\n  // The rectangle must not be outside the bounds allowed by the tiling scheme.\n  rectangle = confineRectangleToTilingScheme(rectangle, tilingScheme);\n\n  // make sure we use a safe minimum detail level, so we don't request a ridiculous number of tiles\n  var minimumLevel = calculateSafeMinimumDetailLevel(\n    tilingScheme,\n    rectangle,\n    options.maximumLevel\n  );\n\n  var templateResource = this._tmsResource.getDerivedResource({\n    url: \"{z}/{x}/{reverseY}.\" + fileExtension,\n  });\n\n  this._deferred.resolve({\n    url: templateResource,\n    tilingScheme: tilingScheme,\n    rectangle: rectangle,\n    tileWidth: tileWidth,\n    tileHeight: tileHeight,\n    minimumLevel: minimumLevel,\n    maximumLevel: maximumLevel,\n    tileDiscardPolicy: options.tileDiscardPolicy,\n    credit: options.credit,\n  });\n};\n\nexport default TileMapServiceImageryProvider;\n"]},"metadata":{},"sourceType":"module"}