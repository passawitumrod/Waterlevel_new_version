{"ast":null,"code":"import Matrix4 from \"../Core/Matrix4.js\";\n/**\n * A model node with a transform for user-defined animations.  A glTF asset can\n * contain animations that target a node's transform.  This class allows\n * changing a node's transform externally so animation can be driven by another\n * source, not just an animation in the glTF asset.\n * <p>\n * Use {@link Model#getNode} to create an instance.\n * </p>\n *\n * @alias ModelNode\n * @internalConstructor\n * @class\n *\n * @example\n * var node = model.getNode('LOD3sp');\n * node.matrix = Cesium.Matrix4.fromScale(new Cesium.Cartesian3(5.0, 1.0, 1.0), node.matrix);\n *\n * @see Model#getNode\n */\n\nfunction ModelNode(model, node, runtimeNode, id, matrix) {\n  this._model = model;\n  this._runtimeNode = runtimeNode;\n  this._name = node.name;\n  this._id = id;\n  /**\n   * @private\n   */\n\n  this.useMatrix = false;\n  this._show = true;\n  this._matrix = Matrix4.clone(matrix);\n  this._originalMatrix = Matrix4.clone(matrix);\n}\n\nObject.defineProperties(ModelNode.prototype, {\n  /**\n   * The value of the <code>name</code> property of this node.\n   *\n   * @memberof ModelNode.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  name: {\n    get: function get() {\n      return this._name;\n    }\n  },\n\n  /**\n   * The index of the node.\n   *\n   * @memberof ModelNode.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  id: {\n    get: function get() {\n      return this._id;\n    }\n  },\n\n  /**\n   * Determines if this node and its children will be shown.\n   *\n   * @memberof ModelNode.prototype\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  show: {\n    get: function get() {\n      return this._show;\n    },\n    set: function set(value) {\n      if (this._show !== value) {\n        this._show = value;\n        this._model._perNodeShowDirty = true;\n      }\n    }\n  },\n\n  /**\n   * The node's 4x4 matrix transform from its local coordinates to\n   * its parent's.\n   * <p>\n   * For changes to take effect, this property must be assigned to;\n   * setting individual elements of the matrix will not work.\n   * </p>\n   *\n   * @memberof ModelNode.prototype\n   * @type {Matrix4}\n   */\n  matrix: {\n    get: function get() {\n      return this._matrix;\n    },\n    set: function set(value) {\n      this._matrix = Matrix4.clone(value, this._matrix);\n      this.useMatrix = true;\n      var model = this._model;\n      model._cesiumAnimationsDirty = true;\n      this._runtimeNode.dirtyNumber = model._maxDirtyNumber;\n    }\n  },\n\n  /**\n   * Gets the node's original 4x4 matrix transform from its local coordinates to\n   * its parent's, without any node transformations or articulations applied.\n   *\n   * @memberof ModelNode.prototype\n   * @type {Matrix4}\n   */\n  originalMatrix: {\n    get: function get() {\n      return this._originalMatrix;\n    }\n  }\n});\n/**\n * @private\n */\n\nModelNode.prototype.setMatrix = function (matrix) {\n  // Update matrix but do not set the dirty flag since this is used internally\n  // to keep the matrix in-sync during a glTF animation.\n  Matrix4.clone(matrix, this._matrix);\n};\n\nexport default ModelNode;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/ModelNode.js"],"names":["Matrix4","ModelNode","model","node","runtimeNode","id","matrix","_model","_runtimeNode","_name","name","_id","useMatrix","_show","_matrix","clone","_originalMatrix","Object","defineProperties","prototype","get","show","set","value","_perNodeShowDirty","_cesiumAnimationsDirty","dirtyNumber","_maxDirtyNumber","originalMatrix","setMatrix"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,oBAApB;AAEA;;;;;;;;;;;;;;;;;;;;AAmBA,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,IAA1B,EAAgCC,WAAhC,EAA6CC,EAA7C,EAAiDC,MAAjD,EAAyD;AACvD,OAAKC,MAAL,GAAcL,KAAd;AACA,OAAKM,YAAL,GAAoBJ,WAApB;AACA,OAAKK,KAAL,GAAaN,IAAI,CAACO,IAAlB;AACA,OAAKC,GAAL,GAAWN,EAAX;AAEA;;;;AAGA,OAAKO,SAAL,GAAiB,KAAjB;AAEA,OAAKC,KAAL,GAAa,IAAb;AACA,OAAKC,OAAL,GAAed,OAAO,CAACe,KAAR,CAAcT,MAAd,CAAf;AACA,OAAKU,eAAL,GAAuBhB,OAAO,CAACe,KAAR,CAAcT,MAAd,CAAvB;AACD;;AAEDW,MAAM,CAACC,gBAAP,CAAwBjB,SAAS,CAACkB,SAAlC,EAA6C;AAC3C;;;;;;;;AAQAT,EAAAA,IAAI,EAAE;AACJU,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKX,KAAZ;AACD;AAHG,GATqC;;AAe3C;;;;;;;;AAQAJ,EAAAA,EAAE,EAAE;AACFe,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKT,GAAZ;AACD;AAHC,GAvBuC;;AA6B3C;;;;;;;;AAQAU,EAAAA,IAAI,EAAE;AACJD,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKP,KAAZ;AACD,KAHG;AAIJS,IAAAA,GAAG,EAAE,aAAUC,KAAV,EAAiB;AACpB,UAAI,KAAKV,KAAL,KAAeU,KAAnB,EAA0B;AACxB,aAAKV,KAAL,GAAaU,KAAb;AACA,aAAKhB,MAAL,CAAYiB,iBAAZ,GAAgC,IAAhC;AACD;AACF;AATG,GArCqC;;AAiD3C;;;;;;;;;;;AAWAlB,EAAAA,MAAM,EAAE;AACNc,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKN,OAAZ;AACD,KAHK;AAINQ,IAAAA,GAAG,EAAE,aAAUC,KAAV,EAAiB;AACpB,WAAKT,OAAL,GAAed,OAAO,CAACe,KAAR,CAAcQ,KAAd,EAAqB,KAAKT,OAA1B,CAAf;AACA,WAAKF,SAAL,GAAiB,IAAjB;AAEA,UAAIV,KAAK,GAAG,KAAKK,MAAjB;AACAL,MAAAA,KAAK,CAACuB,sBAAN,GAA+B,IAA/B;AACA,WAAKjB,YAAL,CAAkBkB,WAAlB,GAAgCxB,KAAK,CAACyB,eAAtC;AACD;AAXK,GA5DmC;;AA0E3C;;;;;;;AAOAC,EAAAA,cAAc,EAAE;AACdR,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKJ,eAAZ;AACD;AAHa;AAjF2B,CAA7C;AAwFA;;;;AAGAf,SAAS,CAACkB,SAAV,CAAoBU,SAApB,GAAgC,UAAUvB,MAAV,EAAkB;AAChD;AACA;AACAN,EAAAA,OAAO,CAACe,KAAR,CAAcT,MAAd,EAAsB,KAAKQ,OAA3B;AACD,CAJD;;AAKA,eAAeb,SAAf","sourcesContent":["import Matrix4 from \"../Core/Matrix4.js\";\n\n/**\n * A model node with a transform for user-defined animations.  A glTF asset can\n * contain animations that target a node's transform.  This class allows\n * changing a node's transform externally so animation can be driven by another\n * source, not just an animation in the glTF asset.\n * <p>\n * Use {@link Model#getNode} to create an instance.\n * </p>\n *\n * @alias ModelNode\n * @internalConstructor\n * @class\n *\n * @example\n * var node = model.getNode('LOD3sp');\n * node.matrix = Cesium.Matrix4.fromScale(new Cesium.Cartesian3(5.0, 1.0, 1.0), node.matrix);\n *\n * @see Model#getNode\n */\nfunction ModelNode(model, node, runtimeNode, id, matrix) {\n  this._model = model;\n  this._runtimeNode = runtimeNode;\n  this._name = node.name;\n  this._id = id;\n\n  /**\n   * @private\n   */\n  this.useMatrix = false;\n\n  this._show = true;\n  this._matrix = Matrix4.clone(matrix);\n  this._originalMatrix = Matrix4.clone(matrix);\n}\n\nObject.defineProperties(ModelNode.prototype, {\n  /**\n   * The value of the <code>name</code> property of this node.\n   *\n   * @memberof ModelNode.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n  },\n\n  /**\n   * The index of the node.\n   *\n   * @memberof ModelNode.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n\n  /**\n   * Determines if this node and its children will be shown.\n   *\n   * @memberof ModelNode.prototype\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      if (this._show !== value) {\n        this._show = value;\n        this._model._perNodeShowDirty = true;\n      }\n    },\n  },\n\n  /**\n   * The node's 4x4 matrix transform from its local coordinates to\n   * its parent's.\n   * <p>\n   * For changes to take effect, this property must be assigned to;\n   * setting individual elements of the matrix will not work.\n   * </p>\n   *\n   * @memberof ModelNode.prototype\n   * @type {Matrix4}\n   */\n  matrix: {\n    get: function () {\n      return this._matrix;\n    },\n    set: function (value) {\n      this._matrix = Matrix4.clone(value, this._matrix);\n      this.useMatrix = true;\n\n      var model = this._model;\n      model._cesiumAnimationsDirty = true;\n      this._runtimeNode.dirtyNumber = model._maxDirtyNumber;\n    },\n  },\n\n  /**\n   * Gets the node's original 4x4 matrix transform from its local coordinates to\n   * its parent's, without any node transformations or articulations applied.\n   *\n   * @memberof ModelNode.prototype\n   * @type {Matrix4}\n   */\n  originalMatrix: {\n    get: function () {\n      return this._originalMatrix;\n    },\n  },\n});\n\n/**\n * @private\n */\nModelNode.prototype.setMatrix = function (matrix) {\n  // Update matrix but do not set the dirty flag since this is used internally\n  // to keep the matrix in-sync during a glTF animation.\n  Matrix4.clone(matrix, this._matrix);\n};\nexport default ModelNode;\n"]},"metadata":{},"sourceType":"module"}