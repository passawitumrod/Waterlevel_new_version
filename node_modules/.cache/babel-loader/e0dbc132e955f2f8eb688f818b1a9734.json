{"ast":null,"code":"import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CoplanarPolygonGeometryLibrary from \"./CoplanarPolygonGeometryLibrary.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryInstance from \"./GeometryInstance.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport PolygonGeometryLibrary from \"./PolygonGeometryLibrary.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\n\nfunction createGeometryFromPositions(positions) {\n  var length = positions.length;\n  var flatPositions = new Float64Array(length * 3);\n  var indices = IndexDatatype.createTypedArray(length, length * 2);\n  var positionIndex = 0;\n  var index = 0;\n\n  for (var i = 0; i < length; i++) {\n    var position = positions[i];\n    flatPositions[positionIndex++] = position.x;\n    flatPositions[positionIndex++] = position.y;\n    flatPositions[positionIndex++] = position.z;\n    indices[index++] = i;\n    indices[index++] = (i + 1) % length;\n  }\n\n  var attributes = new GeometryAttributes({\n    position: new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: flatPositions\n    })\n  });\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.LINES\n  });\n}\n/**\n * A description of the outline of a polygon composed of arbitrary coplanar positions.\n *\n * @alias CoplanarPolygonOutlineGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n *\n * @see CoplanarPolygonOutlineGeometry.createGeometry\n *\n * @example\n * var polygonOutline = new Cesium.CoplanarPolygonOutlineGeometry({\n *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\n *      -90.0, 30.0, 0.0,\n *      -90.0, 30.0, 1000.0,\n *      -80.0, 30.0, 1000.0,\n *      -80.0, 30.0, 0.0\n *   ])\n * });\n * var geometry = Cesium.CoplanarPolygonOutlineGeometry.createGeometry(polygonOutline);\n */\n\n\nfunction CoplanarPolygonOutlineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var polygonHierarchy = options.polygonHierarchy; //>>includeStart('debug', pragmas.debug);\n\n  Check.defined(\"options.polygonHierarchy\", polygonHierarchy); //>>includeEnd('debug');\n\n  this._polygonHierarchy = polygonHierarchy;\n  this._workerName = \"createCoplanarPolygonOutlineGeometry\";\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n\n  this.packedLength = PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) + 1;\n}\n/**\n * A description of a coplanar polygon outline from an array of positions.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n * @returns {CoplanarPolygonOutlineGeometry}\n */\n\n\nCoplanarPolygonOutlineGeometry.fromPositions = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT); //>>includeStart('debug', pragmas.debug);\n\n  Check.defined(\"options.positions\", options.positions); //>>includeEnd('debug');\n\n  var newOptions = {\n    polygonHierarchy: {\n      positions: options.positions\n    }\n  };\n  return new CoplanarPolygonOutlineGeometry(newOptions);\n};\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CoplanarPolygonOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\n\n\nCoplanarPolygonOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array); //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(value._polygonHierarchy, array, startingIndex);\n  array[startingIndex] = value.packedLength;\n  return array;\n};\n\nvar scratchOptions = {\n  polygonHierarchy: {}\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CoplanarPolygonOutlineGeometry} [result] The object into which to store the result.\n * @returns {CoplanarPolygonOutlineGeometry} The modified result parameter or a new CoplanarPolygonOutlineGeometry instance if one was not provided.\n */\n\nCoplanarPolygonOutlineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array); //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\n  startingIndex = polygonHierarchy.startingIndex;\n  delete polygonHierarchy.startingIndex;\n  var packedLength = array[startingIndex];\n\n  if (!defined(result)) {\n    result = new CoplanarPolygonOutlineGeometry(scratchOptions);\n  }\n\n  result._polygonHierarchy = polygonHierarchy;\n  result.packedLength = packedLength;\n  return result;\n};\n/**\n * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\n *\n * @param {CoplanarPolygonOutlineGeometry} polygonGeometry A description of the polygon.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\n\n\nCoplanarPolygonOutlineGeometry.createGeometry = function (polygonGeometry) {\n  var polygonHierarchy = polygonGeometry._polygonHierarchy;\n  var outerPositions = polygonHierarchy.positions;\n  outerPositions = arrayRemoveDuplicates(outerPositions, Cartesian3.equalsEpsilon, true);\n\n  if (outerPositions.length < 3) {\n    return;\n  }\n\n  var isValid = CoplanarPolygonGeometryLibrary.validOutline(outerPositions);\n\n  if (!isValid) {\n    return undefined;\n  }\n\n  var polygons = PolygonGeometryLibrary.polygonOutlinesFromHierarchy(polygonHierarchy, false);\n\n  if (polygons.length === 0) {\n    return undefined;\n  }\n\n  var geometries = [];\n\n  for (var i = 0; i < polygons.length; i++) {\n    var geometryInstance = new GeometryInstance({\n      geometry: createGeometryFromPositions(polygons[i])\n    });\n    geometries.push(geometryInstance);\n  }\n\n  var geometry = GeometryPipeline.combineInstances(geometries)[0];\n  var boundingSphere = BoundingSphere.fromPoints(polygonHierarchy.positions);\n  return new Geometry({\n    attributes: geometry.attributes,\n    indices: geometry.indices,\n    primitiveType: geometry.primitiveType,\n    boundingSphere: boundingSphere\n  });\n};\n\nexport default CoplanarPolygonOutlineGeometry;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/CoplanarPolygonOutlineGeometry.js"],"names":["arrayRemoveDuplicates","BoundingSphere","Cartesian3","Check","ComponentDatatype","CoplanarPolygonGeometryLibrary","defaultValue","defined","Geometry","GeometryAttribute","GeometryAttributes","GeometryInstance","GeometryPipeline","IndexDatatype","PolygonGeometryLibrary","PrimitiveType","createGeometryFromPositions","positions","length","flatPositions","Float64Array","indices","createTypedArray","positionIndex","index","i","position","x","y","z","attributes","componentDatatype","DOUBLE","componentsPerAttribute","values","primitiveType","LINES","CoplanarPolygonOutlineGeometry","options","EMPTY_OBJECT","polygonHierarchy","_polygonHierarchy","_workerName","packedLength","computeHierarchyPackedLength","fromPositions","newOptions","pack","value","array","startingIndex","typeOf","object","packPolygonHierarchy","scratchOptions","unpack","result","unpackPolygonHierarchy","createGeometry","polygonGeometry","outerPositions","equalsEpsilon","isValid","validOutline","undefined","polygons","polygonOutlinesFromHierarchy","geometries","geometryInstance","geometry","push","combineInstances","boundingSphere","fromPoints"],"mappings":"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","sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CoplanarPolygonGeometryLibrary from \"./CoplanarPolygonGeometryLibrary.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryInstance from \"./GeometryInstance.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport PolygonGeometryLibrary from \"./PolygonGeometryLibrary.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\n\nfunction createGeometryFromPositions(positions) {\n  var length = positions.length;\n  var flatPositions = new Float64Array(length * 3);\n  var indices = IndexDatatype.createTypedArray(length, length * 2);\n\n  var positionIndex = 0;\n  var index = 0;\n\n  for (var i = 0; i < length; i++) {\n    var position = positions[i];\n    flatPositions[positionIndex++] = position.x;\n    flatPositions[positionIndex++] = position.y;\n    flatPositions[positionIndex++] = position.z;\n\n    indices[index++] = i;\n    indices[index++] = (i + 1) % length;\n  }\n\n  var attributes = new GeometryAttributes({\n    position: new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: flatPositions,\n    }),\n  });\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.LINES,\n  });\n}\n\n/**\n * A description of the outline of a polygon composed of arbitrary coplanar positions.\n *\n * @alias CoplanarPolygonOutlineGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n *\n * @see CoplanarPolygonOutlineGeometry.createGeometry\n *\n * @example\n * var polygonOutline = new Cesium.CoplanarPolygonOutlineGeometry({\n *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\n *      -90.0, 30.0, 0.0,\n *      -90.0, 30.0, 1000.0,\n *      -80.0, 30.0, 1000.0,\n *      -80.0, 30.0, 0.0\n *   ])\n * });\n * var geometry = Cesium.CoplanarPolygonOutlineGeometry.createGeometry(polygonOutline);\n */\nfunction CoplanarPolygonOutlineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var polygonHierarchy = options.polygonHierarchy;\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.polygonHierarchy\", polygonHierarchy);\n  //>>includeEnd('debug');\n\n  this._polygonHierarchy = polygonHierarchy;\n  this._workerName = \"createCoplanarPolygonOutlineGeometry\";\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) + 1;\n}\n\n/**\n * A description of a coplanar polygon outline from an array of positions.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n * @returns {CoplanarPolygonOutlineGeometry}\n */\nCoplanarPolygonOutlineGeometry.fromPositions = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.positions\", options.positions);\n  //>>includeEnd('debug');\n\n  var newOptions = {\n    polygonHierarchy: {\n      positions: options.positions,\n    },\n  };\n  return new CoplanarPolygonOutlineGeometry(newOptions);\n};\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CoplanarPolygonOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCoplanarPolygonOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\n    value._polygonHierarchy,\n    array,\n    startingIndex\n  );\n\n  array[startingIndex] = value.packedLength;\n\n  return array;\n};\n\nvar scratchOptions = {\n  polygonHierarchy: {},\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CoplanarPolygonOutlineGeometry} [result] The object into which to store the result.\n * @returns {CoplanarPolygonOutlineGeometry} The modified result parameter or a new CoplanarPolygonOutlineGeometry instance if one was not provided.\n */\nCoplanarPolygonOutlineGeometry.unpack = function (\n  array,\n  startingIndex,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(\n    array,\n    startingIndex\n  );\n  startingIndex = polygonHierarchy.startingIndex;\n  delete polygonHierarchy.startingIndex;\n  var packedLength = array[startingIndex];\n\n  if (!defined(result)) {\n    result = new CoplanarPolygonOutlineGeometry(scratchOptions);\n  }\n\n  result._polygonHierarchy = polygonHierarchy;\n  result.packedLength = packedLength;\n\n  return result;\n};\n\n/**\n * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\n *\n * @param {CoplanarPolygonOutlineGeometry} polygonGeometry A description of the polygon.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCoplanarPolygonOutlineGeometry.createGeometry = function (polygonGeometry) {\n  var polygonHierarchy = polygonGeometry._polygonHierarchy;\n\n  var outerPositions = polygonHierarchy.positions;\n  outerPositions = arrayRemoveDuplicates(\n    outerPositions,\n    Cartesian3.equalsEpsilon,\n    true\n  );\n  if (outerPositions.length < 3) {\n    return;\n  }\n  var isValid = CoplanarPolygonGeometryLibrary.validOutline(outerPositions);\n  if (!isValid) {\n    return undefined;\n  }\n\n  var polygons = PolygonGeometryLibrary.polygonOutlinesFromHierarchy(\n    polygonHierarchy,\n    false\n  );\n\n  if (polygons.length === 0) {\n    return undefined;\n  }\n\n  var geometries = [];\n\n  for (var i = 0; i < polygons.length; i++) {\n    var geometryInstance = new GeometryInstance({\n      geometry: createGeometryFromPositions(polygons[i]),\n    });\n    geometries.push(geometryInstance);\n  }\n\n  var geometry = GeometryPipeline.combineInstances(geometries)[0];\n  var boundingSphere = BoundingSphere.fromPoints(polygonHierarchy.positions);\n\n  return new Geometry({\n    attributes: geometry.attributes,\n    indices: geometry.indices,\n    primitiveType: geometry.primitiveType,\n    boundingSphere: boundingSphere,\n  });\n};\nexport default CoplanarPolygonOutlineGeometry;\n"]},"metadata":{},"sourceType":"module"}