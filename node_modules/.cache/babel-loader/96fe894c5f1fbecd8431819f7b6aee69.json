{"ast":null,"code":"function kdbush(points, getX, getY, nodeSize, ArrayType) {\n  return new KDBush(points, getX, getY, nodeSize, ArrayType);\n}\n\nfunction KDBush(points, getX, getY, nodeSize, ArrayType) {\n  getX = getX || defaultGetX;\n  getY = getY || defaultGetY;\n  ArrayType = ArrayType || Array;\n  this.nodeSize = nodeSize || 64;\n  this.points = points;\n  this.ids = new ArrayType(points.length);\n  this.coords = new ArrayType(points.length * 2);\n\n  for (var i = 0; i < points.length; i++) {\n    this.ids[i] = i;\n    this.coords[2 * i] = getX(points[i]);\n    this.coords[2 * i + 1] = getY(points[i]);\n  }\n\n  sort(this.ids, this.coords, this.nodeSize, 0, this.ids.length - 1, 0);\n}\n\nKDBush.prototype = {\n  range: function (minX, minY, maxX, maxY) {\n    return range(this.ids, this.coords, minX, minY, maxX, maxY, this.nodeSize);\n  },\n  within: function (x, y, r) {\n    return within(this.ids, this.coords, x, y, r, this.nodeSize);\n  }\n};\n\nfunction defaultGetX(p) {\n  return p[0];\n}\n\nfunction defaultGetY(p) {\n  return p[1];\n}\n\nfunction range(ids, coords, minX, minY, maxX, maxY, nodeSize) {\n  var stack = [0, ids.length - 1, 0];\n  var result = [];\n  var x, y;\n\n  while (stack.length) {\n    var axis = stack.pop();\n    var right = stack.pop();\n    var left = stack.pop();\n\n    if (right - left <= nodeSize) {\n      for (var i = left; i <= right; i++) {\n        x = coords[2 * i];\n        y = coords[2 * i + 1];\n        if (x >= minX && x <= maxX && y >= minY && y <= maxY) result.push(ids[i]);\n      }\n\n      continue;\n    }\n\n    var m = Math.floor((left + right) / 2);\n    x = coords[2 * m];\n    y = coords[2 * m + 1];\n    if (x >= minX && x <= maxX && y >= minY && y <= maxY) result.push(ids[m]);\n    var nextAxis = (axis + 1) % 2;\n\n    if (axis === 0 ? minX <= x : minY <= y) {\n      stack.push(left);\n      stack.push(m - 1);\n      stack.push(nextAxis);\n    }\n\n    if (axis === 0 ? maxX >= x : maxY >= y) {\n      stack.push(m + 1);\n      stack.push(right);\n      stack.push(nextAxis);\n    }\n  }\n\n  return result;\n}\n\nfunction sort(ids, coords, nodeSize, left, right, depth) {\n  if (right - left <= nodeSize) return;\n  var m = Math.floor((left + right) / 2);\n  select(ids, coords, m, left, right, depth % 2);\n  sort(ids, coords, nodeSize, left, m - 1, depth + 1);\n  sort(ids, coords, nodeSize, m + 1, right, depth + 1);\n}\n\nfunction select(ids, coords, k, left, right, inc) {\n  while (right > left) {\n    if (right - left > 600) {\n      var n = right - left + 1;\n      var m = k - left + 1;\n      var z = Math.log(n);\n      var s = 0.5 * Math.exp(2 * z / 3);\n      var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      select(ids, coords, k, newLeft, newRight, inc);\n    }\n\n    var t = coords[2 * k + inc];\n    var i = left;\n    var j = right;\n    swapItem(ids, coords, left, k);\n    if (coords[2 * right + inc] > t) swapItem(ids, coords, left, right);\n\n    while (i < j) {\n      swapItem(ids, coords, i, j);\n      i++;\n      j--;\n\n      while (coords[2 * i + inc] < t) i++;\n\n      while (coords[2 * j + inc] > t) j--;\n    }\n\n    if (coords[2 * left + inc] === t) swapItem(ids, coords, left, j);else {\n      j++;\n      swapItem(ids, coords, j, right);\n    }\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n}\n\nfunction swapItem(ids, coords, i, j) {\n  swap(ids, i, j);\n  swap(coords, 2 * i, 2 * j);\n  swap(coords, 2 * i + 1, 2 * j + 1);\n}\n\nfunction swap(arr, i, j) {\n  var tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\n\nfunction within(ids, coords, qx, qy, r, nodeSize) {\n  var stack = [0, ids.length - 1, 0];\n  var result = [];\n  var r2 = r * r;\n\n  while (stack.length) {\n    var axis = stack.pop();\n    var right = stack.pop();\n    var left = stack.pop();\n\n    if (right - left <= nodeSize) {\n      for (var i = left; i <= right; i++) {\n        if (sqDist(coords[2 * i], coords[2 * i + 1], qx, qy) <= r2) result.push(ids[i]);\n      }\n\n      continue;\n    }\n\n    var m = Math.floor((left + right) / 2);\n    var x = coords[2 * m];\n    var y = coords[2 * m + 1];\n    if (sqDist(x, y, qx, qy) <= r2) result.push(ids[m]);\n    var nextAxis = (axis + 1) % 2;\n\n    if (axis === 0 ? qx - r <= x : qy - r <= y) {\n      stack.push(left);\n      stack.push(m - 1);\n      stack.push(nextAxis);\n    }\n\n    if (axis === 0 ? qx + r >= x : qy + r >= y) {\n      stack.push(m + 1);\n      stack.push(right);\n      stack.push(nextAxis);\n    }\n  }\n\n  return result;\n}\n\nfunction sqDist(ax, ay, bx, by) {\n  var dx = ax - bx;\n  var dy = ay - by;\n  return dx * dx + dy * dy;\n}\n\nexport default kdbush;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/ThirdParty/kdbush.js"],"names":["kdbush","points","getX","getY","nodeSize","ArrayType","KDBush","defaultGetX","defaultGetY","Array","ids","length","coords","i","sort","prototype","range","minX","minY","maxX","maxY","within","x","y","r","p","stack","result","axis","pop","right","left","push","m","Math","floor","nextAxis","depth","select","k","inc","n","z","log","s","exp","sd","sqrt","newLeft","max","newRight","min","t","j","swapItem","swap","arr","tmp","qx","qy","r2","sqDist","ax","ay","bx","by","dx","dy"],"mappings":"AAAA,SAASA,MAAT,CAAgBC,MAAhB,EAAwBC,IAAxB,EAA8BC,IAA9B,EAAoCC,QAApC,EAA8CC,SAA9C,EAAyD;AACrD,SAAO,IAAIC,MAAJ,CAAWL,MAAX,EAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,QAA/B,EAAyCC,SAAzC,CAAP;AACH;;AAED,SAASC,MAAT,CAAgBL,MAAhB,EAAwBC,IAAxB,EAA8BC,IAA9B,EAAoCC,QAApC,EAA8CC,SAA9C,EAAyD;AACrDH,EAAAA,IAAI,GAAGA,IAAI,IAAIK,WAAf;AACAJ,EAAAA,IAAI,GAAGA,IAAI,IAAIK,WAAf;AACAH,EAAAA,SAAS,GAAGA,SAAS,IAAII,KAAzB;AAEA,OAAKL,QAAL,GAAgBA,QAAQ,IAAI,EAA5B;AACA,OAAKH,MAAL,GAAcA,MAAd;AAEA,OAAKS,GAAL,GAAW,IAAIL,SAAJ,CAAcJ,MAAM,CAACU,MAArB,CAAX;AACA,OAAKC,MAAL,GAAc,IAAIP,SAAJ,CAAcJ,MAAM,CAACU,MAAP,GAAgB,CAA9B,CAAd;;AAEA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,MAAM,CAACU,MAA3B,EAAmCE,CAAC,EAApC,EAAwC;AACpC,SAAKH,GAAL,CAASG,CAAT,IAAcA,CAAd;AACA,SAAKD,MAAL,CAAY,IAAIC,CAAhB,IAAqBX,IAAI,CAACD,MAAM,CAACY,CAAD,CAAP,CAAzB;AACA,SAAKD,MAAL,CAAY,IAAIC,CAAJ,GAAQ,CAApB,IAAyBV,IAAI,CAACF,MAAM,CAACY,CAAD,CAAP,CAA7B;AACH;;AAEDC,EAAAA,IAAI,CAAC,KAAKJ,GAAN,EAAW,KAAKE,MAAhB,EAAwB,KAAKR,QAA7B,EAAuC,CAAvC,EAA0C,KAAKM,GAAL,CAASC,MAAT,GAAkB,CAA5D,EAA+D,CAA/D,CAAJ;AACH;;AAEDL,MAAM,CAACS,SAAP,GAAmB;AACfC,EAAAA,KAAK,EAAE,UAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,IAAtB,EAA4BC,IAA5B,EAAkC;AACrC,WAAOJ,KAAK,CAAC,KAAKN,GAAN,EAAW,KAAKE,MAAhB,EAAwBK,IAAxB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0CC,IAA1C,EAAgD,KAAKhB,QAArD,CAAZ;AACH,GAHc;AAKfiB,EAAAA,MAAM,EAAE,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmB;AACvB,WAAOH,MAAM,CAAC,KAAKX,GAAN,EAAW,KAAKE,MAAhB,EAAwBU,CAAxB,EAA2BC,CAA3B,EAA8BC,CAA9B,EAAiC,KAAKpB,QAAtC,CAAb;AACH;AAPc,CAAnB;;AAUA,SAASG,WAAT,CAAqBkB,CAArB,EAAwB;AAAE,SAAOA,CAAC,CAAC,CAAD,CAAR;AAAc;;AACxC,SAASjB,WAAT,CAAqBiB,CAArB,EAAwB;AAAE,SAAOA,CAAC,CAAC,CAAD,CAAR;AAAc;;AAExC,SAAST,KAAT,CAAeN,GAAf,EAAoBE,MAApB,EAA4BK,IAA5B,EAAkCC,IAAlC,EAAwCC,IAAxC,EAA8CC,IAA9C,EAAoDhB,QAApD,EAA8D;AAC1D,MAAIsB,KAAK,GAAG,CAAC,CAAD,EAAIhB,GAAG,CAACC,MAAJ,GAAa,CAAjB,EAAoB,CAApB,CAAZ;AACA,MAAIgB,MAAM,GAAG,EAAb;AACA,MAAIL,CAAJ,EAAOC,CAAP;;AAEA,SAAOG,KAAK,CAACf,MAAb,EAAqB;AACjB,QAAIiB,IAAI,GAAGF,KAAK,CAACG,GAAN,EAAX;AACA,QAAIC,KAAK,GAAGJ,KAAK,CAACG,GAAN,EAAZ;AACA,QAAIE,IAAI,GAAGL,KAAK,CAACG,GAAN,EAAX;;AAEA,QAAIC,KAAK,GAAGC,IAAR,IAAgB3B,QAApB,EAA8B;AAC1B,WAAK,IAAIS,CAAC,GAAGkB,IAAb,EAAmBlB,CAAC,IAAIiB,KAAxB,EAA+BjB,CAAC,EAAhC,EAAoC;AAChCS,QAAAA,CAAC,GAAGV,MAAM,CAAC,IAAIC,CAAL,CAAV;AACAU,QAAAA,CAAC,GAAGX,MAAM,CAAC,IAAIC,CAAJ,GAAQ,CAAT,CAAV;AACA,YAAIS,CAAC,IAAIL,IAAL,IAAaK,CAAC,IAAIH,IAAlB,IAA0BI,CAAC,IAAIL,IAA/B,IAAuCK,CAAC,IAAIH,IAAhD,EAAsDO,MAAM,CAACK,IAAP,CAAYtB,GAAG,CAACG,CAAD,CAAf;AACzD;;AACD;AACH;;AAED,QAAIoB,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,IAAI,GAAGD,KAAR,IAAiB,CAA5B,CAAR;AAEAR,IAAAA,CAAC,GAAGV,MAAM,CAAC,IAAIqB,CAAL,CAAV;AACAV,IAAAA,CAAC,GAAGX,MAAM,CAAC,IAAIqB,CAAJ,GAAQ,CAAT,CAAV;AAEA,QAAIX,CAAC,IAAIL,IAAL,IAAaK,CAAC,IAAIH,IAAlB,IAA0BI,CAAC,IAAIL,IAA/B,IAAuCK,CAAC,IAAIH,IAAhD,EAAsDO,MAAM,CAACK,IAAP,CAAYtB,GAAG,CAACuB,CAAD,CAAf;AAEtD,QAAIG,QAAQ,GAAG,CAACR,IAAI,GAAG,CAAR,IAAa,CAA5B;;AAEA,QAAIA,IAAI,KAAK,CAAT,GAAaX,IAAI,IAAIK,CAArB,GAAyBJ,IAAI,IAAIK,CAArC,EAAwC;AACpCG,MAAAA,KAAK,CAACM,IAAN,CAAWD,IAAX;AACAL,MAAAA,KAAK,CAACM,IAAN,CAAWC,CAAC,GAAG,CAAf;AACAP,MAAAA,KAAK,CAACM,IAAN,CAAWI,QAAX;AACH;;AACD,QAAIR,IAAI,KAAK,CAAT,GAAaT,IAAI,IAAIG,CAArB,GAAyBF,IAAI,IAAIG,CAArC,EAAwC;AACpCG,MAAAA,KAAK,CAACM,IAAN,CAAWC,CAAC,GAAG,CAAf;AACAP,MAAAA,KAAK,CAACM,IAAN,CAAWF,KAAX;AACAJ,MAAAA,KAAK,CAACM,IAAN,CAAWI,QAAX;AACH;AACJ;;AAED,SAAOT,MAAP;AACH;;AAED,SAASb,IAAT,CAAcJ,GAAd,EAAmBE,MAAnB,EAA2BR,QAA3B,EAAqC2B,IAArC,EAA2CD,KAA3C,EAAkDO,KAAlD,EAAyD;AACrD,MAAIP,KAAK,GAAGC,IAAR,IAAgB3B,QAApB,EAA8B;AAE9B,MAAI6B,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,IAAI,GAAGD,KAAR,IAAiB,CAA5B,CAAR;AAEAQ,EAAAA,MAAM,CAAC5B,GAAD,EAAME,MAAN,EAAcqB,CAAd,EAAiBF,IAAjB,EAAuBD,KAAvB,EAA8BO,KAAK,GAAG,CAAtC,CAAN;AAEAvB,EAAAA,IAAI,CAACJ,GAAD,EAAME,MAAN,EAAcR,QAAd,EAAwB2B,IAAxB,EAA8BE,CAAC,GAAG,CAAlC,EAAqCI,KAAK,GAAG,CAA7C,CAAJ;AACAvB,EAAAA,IAAI,CAACJ,GAAD,EAAME,MAAN,EAAcR,QAAd,EAAwB6B,CAAC,GAAG,CAA5B,EAA+BH,KAA/B,EAAsCO,KAAK,GAAG,CAA9C,CAAJ;AACH;;AAED,SAASC,MAAT,CAAgB5B,GAAhB,EAAqBE,MAArB,EAA6B2B,CAA7B,EAAgCR,IAAhC,EAAsCD,KAAtC,EAA6CU,GAA7C,EAAkD;AAE9C,SAAOV,KAAK,GAAGC,IAAf,EAAqB;AACjB,QAAID,KAAK,GAAGC,IAAR,GAAe,GAAnB,EAAwB;AACpB,UAAIU,CAAC,GAAGX,KAAK,GAAGC,IAAR,GAAe,CAAvB;AACA,UAAIE,CAAC,GAAGM,CAAC,GAAGR,IAAJ,GAAW,CAAnB;AACA,UAAIW,CAAC,GAAGR,IAAI,CAACS,GAAL,CAASF,CAAT,CAAR;AACA,UAAIG,CAAC,GAAG,MAAMV,IAAI,CAACW,GAAL,CAAS,IAAIH,CAAJ,GAAQ,CAAjB,CAAd;AACA,UAAII,EAAE,GAAG,MAAMZ,IAAI,CAACa,IAAL,CAAUL,CAAC,GAAGE,CAAJ,IAASH,CAAC,GAAGG,CAAb,IAAkBH,CAA5B,CAAN,IAAwCR,CAAC,GAAGQ,CAAC,GAAG,CAAR,GAAY,CAAZ,GAAgB,CAAC,CAAjB,GAAqB,CAA7D,CAAT;AACA,UAAIO,OAAO,GAAGd,IAAI,CAACe,GAAL,CAASlB,IAAT,EAAeG,IAAI,CAACC,KAAL,CAAWI,CAAC,GAAGN,CAAC,GAAGW,CAAJ,GAAQH,CAAZ,GAAgBK,EAA3B,CAAf,CAAd;AACA,UAAII,QAAQ,GAAGhB,IAAI,CAACiB,GAAL,CAASrB,KAAT,EAAgBI,IAAI,CAACC,KAAL,CAAWI,CAAC,GAAG,CAACE,CAAC,GAAGR,CAAL,IAAUW,CAAV,GAAcH,CAAlB,GAAsBK,EAAjC,CAAhB,CAAf;AACAR,MAAAA,MAAM,CAAC5B,GAAD,EAAME,MAAN,EAAc2B,CAAd,EAAiBS,OAAjB,EAA0BE,QAA1B,EAAoCV,GAApC,CAAN;AACH;;AAED,QAAIY,CAAC,GAAGxC,MAAM,CAAC,IAAI2B,CAAJ,GAAQC,GAAT,CAAd;AACA,QAAI3B,CAAC,GAAGkB,IAAR;AACA,QAAIsB,CAAC,GAAGvB,KAAR;AAEAwB,IAAAA,QAAQ,CAAC5C,GAAD,EAAME,MAAN,EAAcmB,IAAd,EAAoBQ,CAApB,CAAR;AACA,QAAI3B,MAAM,CAAC,IAAIkB,KAAJ,GAAYU,GAAb,CAAN,GAA0BY,CAA9B,EAAiCE,QAAQ,CAAC5C,GAAD,EAAME,MAAN,EAAcmB,IAAd,EAAoBD,KAApB,CAAR;;AAEjC,WAAOjB,CAAC,GAAGwC,CAAX,EAAc;AACVC,MAAAA,QAAQ,CAAC5C,GAAD,EAAME,MAAN,EAAcC,CAAd,EAAiBwC,CAAjB,CAAR;AACAxC,MAAAA,CAAC;AACDwC,MAAAA,CAAC;;AACD,aAAOzC,MAAM,CAAC,IAAIC,CAAJ,GAAQ2B,GAAT,CAAN,GAAsBY,CAA7B,EAAgCvC,CAAC;;AACjC,aAAOD,MAAM,CAAC,IAAIyC,CAAJ,GAAQb,GAAT,CAAN,GAAsBY,CAA7B,EAAgCC,CAAC;AACpC;;AAED,QAAIzC,MAAM,CAAC,IAAImB,IAAJ,GAAWS,GAAZ,CAAN,KAA2BY,CAA/B,EAAkCE,QAAQ,CAAC5C,GAAD,EAAME,MAAN,EAAcmB,IAAd,EAAoBsB,CAApB,CAAR,CAAlC,KACK;AACDA,MAAAA,CAAC;AACDC,MAAAA,QAAQ,CAAC5C,GAAD,EAAME,MAAN,EAAcyC,CAAd,EAAiBvB,KAAjB,CAAR;AACH;AAED,QAAIuB,CAAC,IAAId,CAAT,EAAYR,IAAI,GAAGsB,CAAC,GAAG,CAAX;AACZ,QAAId,CAAC,IAAIc,CAAT,EAAYvB,KAAK,GAAGuB,CAAC,GAAG,CAAZ;AACf;AACJ;;AAED,SAASC,QAAT,CAAkB5C,GAAlB,EAAuBE,MAAvB,EAA+BC,CAA/B,EAAkCwC,CAAlC,EAAqC;AACjCE,EAAAA,IAAI,CAAC7C,GAAD,EAAMG,CAAN,EAASwC,CAAT,CAAJ;AACAE,EAAAA,IAAI,CAAC3C,MAAD,EAAS,IAAIC,CAAb,EAAgB,IAAIwC,CAApB,CAAJ;AACAE,EAAAA,IAAI,CAAC3C,MAAD,EAAS,IAAIC,CAAJ,GAAQ,CAAjB,EAAoB,IAAIwC,CAAJ,GAAQ,CAA5B,CAAJ;AACH;;AAED,SAASE,IAAT,CAAcC,GAAd,EAAmB3C,CAAnB,EAAsBwC,CAAtB,EAAyB;AACrB,MAAII,GAAG,GAAGD,GAAG,CAAC3C,CAAD,CAAb;AACA2C,EAAAA,GAAG,CAAC3C,CAAD,CAAH,GAAS2C,GAAG,CAACH,CAAD,CAAZ;AACAG,EAAAA,GAAG,CAACH,CAAD,CAAH,GAASI,GAAT;AACH;;AAED,SAASpC,MAAT,CAAgBX,GAAhB,EAAqBE,MAArB,EAA6B8C,EAA7B,EAAiCC,EAAjC,EAAqCnC,CAArC,EAAwCpB,QAAxC,EAAkD;AAC9C,MAAIsB,KAAK,GAAG,CAAC,CAAD,EAAIhB,GAAG,CAACC,MAAJ,GAAa,CAAjB,EAAoB,CAApB,CAAZ;AACA,MAAIgB,MAAM,GAAG,EAAb;AACA,MAAIiC,EAAE,GAAGpC,CAAC,GAAGA,CAAb;;AAEA,SAAOE,KAAK,CAACf,MAAb,EAAqB;AACjB,QAAIiB,IAAI,GAAGF,KAAK,CAACG,GAAN,EAAX;AACA,QAAIC,KAAK,GAAGJ,KAAK,CAACG,GAAN,EAAZ;AACA,QAAIE,IAAI,GAAGL,KAAK,CAACG,GAAN,EAAX;;AAEA,QAAIC,KAAK,GAAGC,IAAR,IAAgB3B,QAApB,EAA8B;AAC1B,WAAK,IAAIS,CAAC,GAAGkB,IAAb,EAAmBlB,CAAC,IAAIiB,KAAxB,EAA+BjB,CAAC,EAAhC,EAAoC;AAChC,YAAIgD,MAAM,CAACjD,MAAM,CAAC,IAAIC,CAAL,CAAP,EAAgBD,MAAM,CAAC,IAAIC,CAAJ,GAAQ,CAAT,CAAtB,EAAmC6C,EAAnC,EAAuCC,EAAvC,CAAN,IAAoDC,EAAxD,EAA4DjC,MAAM,CAACK,IAAP,CAAYtB,GAAG,CAACG,CAAD,CAAf;AAC/D;;AACD;AACH;;AAED,QAAIoB,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,IAAI,GAAGD,KAAR,IAAiB,CAA5B,CAAR;AAEA,QAAIR,CAAC,GAAGV,MAAM,CAAC,IAAIqB,CAAL,CAAd;AACA,QAAIV,CAAC,GAAGX,MAAM,CAAC,IAAIqB,CAAJ,GAAQ,CAAT,CAAd;AAEA,QAAI4B,MAAM,CAACvC,CAAD,EAAIC,CAAJ,EAAOmC,EAAP,EAAWC,EAAX,CAAN,IAAwBC,EAA5B,EAAgCjC,MAAM,CAACK,IAAP,CAAYtB,GAAG,CAACuB,CAAD,CAAf;AAEhC,QAAIG,QAAQ,GAAG,CAACR,IAAI,GAAG,CAAR,IAAa,CAA5B;;AAEA,QAAIA,IAAI,KAAK,CAAT,GAAa8B,EAAE,GAAGlC,CAAL,IAAUF,CAAvB,GAA2BqC,EAAE,GAAGnC,CAAL,IAAUD,CAAzC,EAA4C;AACxCG,MAAAA,KAAK,CAACM,IAAN,CAAWD,IAAX;AACAL,MAAAA,KAAK,CAACM,IAAN,CAAWC,CAAC,GAAG,CAAf;AACAP,MAAAA,KAAK,CAACM,IAAN,CAAWI,QAAX;AACH;;AACD,QAAIR,IAAI,KAAK,CAAT,GAAa8B,EAAE,GAAGlC,CAAL,IAAUF,CAAvB,GAA2BqC,EAAE,GAAGnC,CAAL,IAAUD,CAAzC,EAA4C;AACxCG,MAAAA,KAAK,CAACM,IAAN,CAAWC,CAAC,GAAG,CAAf;AACAP,MAAAA,KAAK,CAACM,IAAN,CAAWF,KAAX;AACAJ,MAAAA,KAAK,CAACM,IAAN,CAAWI,QAAX;AACH;AACJ;;AAED,SAAOT,MAAP;AACH;;AAED,SAASkC,MAAT,CAAgBC,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B,EAAgC;AAC5B,MAAIC,EAAE,GAAGJ,EAAE,GAAGE,EAAd;AACA,MAAIG,EAAE,GAAGJ,EAAE,GAAGE,EAAd;AACA,SAAOC,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAtB;AACH;;AAED,eAAenE,MAAf","sourcesContent":["function kdbush(points, getX, getY, nodeSize, ArrayType) {\n    return new KDBush(points, getX, getY, nodeSize, ArrayType);\n}\n\nfunction KDBush(points, getX, getY, nodeSize, ArrayType) {\n    getX = getX || defaultGetX;\n    getY = getY || defaultGetY;\n    ArrayType = ArrayType || Array;\n\n    this.nodeSize = nodeSize || 64;\n    this.points = points;\n\n    this.ids = new ArrayType(points.length);\n    this.coords = new ArrayType(points.length * 2);\n\n    for (var i = 0; i < points.length; i++) {\n        this.ids[i] = i;\n        this.coords[2 * i] = getX(points[i]);\n        this.coords[2 * i + 1] = getY(points[i]);\n    }\n\n    sort(this.ids, this.coords, this.nodeSize, 0, this.ids.length - 1, 0);\n}\n\nKDBush.prototype = {\n    range: function (minX, minY, maxX, maxY) {\n        return range(this.ids, this.coords, minX, minY, maxX, maxY, this.nodeSize);\n    },\n\n    within: function (x, y, r) {\n        return within(this.ids, this.coords, x, y, r, this.nodeSize);\n    }\n};\n\nfunction defaultGetX(p) { return p[0]; }\nfunction defaultGetY(p) { return p[1]; }\n\nfunction range(ids, coords, minX, minY, maxX, maxY, nodeSize) {\n    var stack = [0, ids.length - 1, 0];\n    var result = [];\n    var x, y;\n\n    while (stack.length) {\n        var axis = stack.pop();\n        var right = stack.pop();\n        var left = stack.pop();\n\n        if (right - left <= nodeSize) {\n            for (var i = left; i <= right; i++) {\n                x = coords[2 * i];\n                y = coords[2 * i + 1];\n                if (x >= minX && x <= maxX && y >= minY && y <= maxY) result.push(ids[i]);\n            }\n            continue;\n        }\n\n        var m = Math.floor((left + right) / 2);\n\n        x = coords[2 * m];\n        y = coords[2 * m + 1];\n\n        if (x >= minX && x <= maxX && y >= minY && y <= maxY) result.push(ids[m]);\n\n        var nextAxis = (axis + 1) % 2;\n\n        if (axis === 0 ? minX <= x : minY <= y) {\n            stack.push(left);\n            stack.push(m - 1);\n            stack.push(nextAxis);\n        }\n        if (axis === 0 ? maxX >= x : maxY >= y) {\n            stack.push(m + 1);\n            stack.push(right);\n            stack.push(nextAxis);\n        }\n    }\n\n    return result;\n}\n\nfunction sort(ids, coords, nodeSize, left, right, depth) {\n    if (right - left <= nodeSize) return;\n\n    var m = Math.floor((left + right) / 2);\n\n    select(ids, coords, m, left, right, depth % 2);\n\n    sort(ids, coords, nodeSize, left, m - 1, depth + 1);\n    sort(ids, coords, nodeSize, m + 1, right, depth + 1);\n}\n\nfunction select(ids, coords, k, left, right, inc) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            var n = right - left + 1;\n            var m = k - left + 1;\n            var z = Math.log(n);\n            var s = 0.5 * Math.exp(2 * z / 3);\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            select(ids, coords, k, newLeft, newRight, inc);\n        }\n\n        var t = coords[2 * k + inc];\n        var i = left;\n        var j = right;\n\n        swapItem(ids, coords, left, k);\n        if (coords[2 * right + inc] > t) swapItem(ids, coords, left, right);\n\n        while (i < j) {\n            swapItem(ids, coords, i, j);\n            i++;\n            j--;\n            while (coords[2 * i + inc] < t) i++;\n            while (coords[2 * j + inc] > t) j--;\n        }\n\n        if (coords[2 * left + inc] === t) swapItem(ids, coords, left, j);\n        else {\n            j++;\n            swapItem(ids, coords, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swapItem(ids, coords, i, j) {\n    swap(ids, i, j);\n    swap(coords, 2 * i, 2 * j);\n    swap(coords, 2 * i + 1, 2 * j + 1);\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction within(ids, coords, qx, qy, r, nodeSize) {\n    var stack = [0, ids.length - 1, 0];\n    var result = [];\n    var r2 = r * r;\n\n    while (stack.length) {\n        var axis = stack.pop();\n        var right = stack.pop();\n        var left = stack.pop();\n\n        if (right - left <= nodeSize) {\n            for (var i = left; i <= right; i++) {\n                if (sqDist(coords[2 * i], coords[2 * i + 1], qx, qy) <= r2) result.push(ids[i]);\n            }\n            continue;\n        }\n\n        var m = Math.floor((left + right) / 2);\n\n        var x = coords[2 * m];\n        var y = coords[2 * m + 1];\n\n        if (sqDist(x, y, qx, qy) <= r2) result.push(ids[m]);\n\n        var nextAxis = (axis + 1) % 2;\n\n        if (axis === 0 ? qx - r <= x : qy - r <= y) {\n            stack.push(left);\n            stack.push(m - 1);\n            stack.push(nextAxis);\n        }\n        if (axis === 0 ? qx + r >= x : qy + r >= y) {\n            stack.push(m + 1);\n            stack.push(right);\n            stack.push(nextAxis);\n        }\n    }\n\n    return result;\n}\n\nfunction sqDist(ax, ay, bx, by) {\n    var dx = ax - bx;\n    var dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\nexport default kdbush;\n"]},"metadata":{},"sourceType":"module"}