{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n/**\n * A {@link MaterialProperty} that maps to PolylineArrow {@link Material} uniforms.\n *\n * @param {Property} [color=Color.WHITE] The {@link Color} Property to be used.\n *\n * @alias PolylineArrowMaterialProperty\n * @constructor\n */\n\nfunction PolylineArrowMaterialProperty(color) {\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this.color = color;\n}\n\nObject.defineProperties(PolylineArrowMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof PolylineArrowMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function get() {\n      return Property.isConstant(this._color);\n    }\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof PolylineArrowMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function get() {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the {@link Color} {@link Property}.\n   * @memberof PolylineArrowMaterialProperty.prototype\n   * @type {Property}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\")\n});\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\n\nPolylineArrowMaterialProperty.prototype.getType = function (time) {\n  return \"PolylineArrow\";\n};\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\n\nPolylineArrowMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n\n  result.color = Property.getValueOrClonedDefault(this._color, time, Color.WHITE, result.color);\n  return result;\n};\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nPolylineArrowMaterialProperty.prototype.equals = function (other) {\n  return this === other || //\n  other instanceof PolylineArrowMaterialProperty && //\n  Property.equals(this._color, other._color);\n};\n\nexport default PolylineArrowMaterialProperty;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/PolylineArrowMaterialProperty.js"],"names":["Color","defined","Event","createPropertyDescriptor","Property","PolylineArrowMaterialProperty","color","_definitionChanged","_color","undefined","_colorSubscription","Object","defineProperties","prototype","isConstant","get","definitionChanged","getType","time","getValue","result","getValueOrClonedDefault","WHITE","equals","other"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,wBAAP,MAAqC,+BAArC;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA;;;;;;;;;AAQA,SAASC,6BAAT,CAAuCC,KAAvC,EAA8C;AAC5C,OAAKC,kBAAL,GAA0B,IAAIL,KAAJ,EAA1B;AACA,OAAKM,MAAL,GAAcC,SAAd;AACA,OAAKC,kBAAL,GAA0BD,SAA1B;AAEA,OAAKH,KAAL,GAAaA,KAAb;AACD;;AAEDK,MAAM,CAACC,gBAAP,CAAwBP,6BAA6B,CAACQ,SAAtD,EAAiE;AAC/D;;;;;;;;AAQAC,EAAAA,UAAU,EAAE;AACVC,IAAAA,GAAG,EAAE,eAAY;AACf,aAAOX,QAAQ,CAACU,UAAT,CAAoB,KAAKN,MAAzB,CAAP;AACD;AAHS,GATmD;;AAc/D;;;;;;;;;AASAQ,EAAAA,iBAAiB,EAAE;AACjBD,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKR,kBAAZ;AACD;AAHgB,GAvB4C;;AA4B/D;;;;;;AAMAD,EAAAA,KAAK,EAAEH,wBAAwB,CAAC,OAAD;AAlCgC,CAAjE;AAqCA;;;;;;;AAMAE,6BAA6B,CAACQ,SAA9B,CAAwCI,OAAxC,GAAkD,UAAUC,IAAV,EAAgB;AAChE,SAAO,eAAP;AACD,CAFD;AAIA;;;;;;;;;AAOAb,6BAA6B,CAACQ,SAA9B,CAAwCM,QAAxC,GAAmD,UAAUD,IAAV,EAAgBE,MAAhB,EAAwB;AACzE,MAAI,CAACnB,OAAO,CAACmB,MAAD,CAAZ,EAAsB;AACpBA,IAAAA,MAAM,GAAG,EAAT;AACD;;AACDA,EAAAA,MAAM,CAACd,KAAP,GAAeF,QAAQ,CAACiB,uBAAT,CACb,KAAKb,MADQ,EAEbU,IAFa,EAGblB,KAAK,CAACsB,KAHO,EAIbF,MAAM,CAACd,KAJM,CAAf;AAMA,SAAOc,MAAP;AACD,CAXD;AAaA;;;;;;;;;AAOAf,6BAA6B,CAACQ,SAA9B,CAAwCU,MAAxC,GAAiD,UAAUC,KAAV,EAAiB;AAChE,SACE,SAASA,KAAT,IAAkB;AACjBA,EAAAA,KAAK,YAAYnB,6BAAjB,IAAkD;AACjDD,EAAAA,QAAQ,CAACmB,MAAT,CAAgB,KAAKf,MAArB,EAA6BgB,KAAK,CAAChB,MAAnC,CAHJ;AAKD,CAND;;AAOA,eAAeH,6BAAf","sourcesContent":["import Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link MaterialProperty} that maps to PolylineArrow {@link Material} uniforms.\n *\n * @param {Property} [color=Color.WHITE] The {@link Color} Property to be used.\n *\n * @alias PolylineArrowMaterialProperty\n * @constructor\n */\nfunction PolylineArrowMaterialProperty(color) {\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n\n  this.color = color;\n}\n\nObject.defineProperties(PolylineArrowMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof PolylineArrowMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._color);\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof PolylineArrowMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets or sets the {@link Color} {@link Property}.\n   * @memberof PolylineArrowMaterialProperty.prototype\n   * @type {Property}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nPolylineArrowMaterialProperty.prototype.getType = function (time) {\n  return \"PolylineArrow\";\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPolylineArrowMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n  result.color = Property.getValueOrClonedDefault(\n    this._color,\n    time,\n    Color.WHITE,\n    result.color\n  );\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPolylineArrowMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof PolylineArrowMaterialProperty && //\n      Property.equals(this._color, other._color))\n  );\n};\nexport default PolylineArrowMaterialProperty;\n"]},"metadata":{},"sourceType":"module"}