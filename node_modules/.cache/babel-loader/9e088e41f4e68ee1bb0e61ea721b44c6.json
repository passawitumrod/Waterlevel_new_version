{"ast":null,"code":"import defined from \"../../Core/defined.js\";\nimport destroyObject from \"../../Core/destroyObject.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport EventHelper from \"../../Core/EventHelper.js\";\nimport OrthographicFrustum from \"../../Core/OrthographicFrustum.js\";\nimport SceneMode from \"../../Scene/SceneMode.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\n/**\n * The view model for {@link ProjectionPicker}.\n * @alias ProjectionPickerViewModel\n * @constructor\n *\n * @param {Scene} scene The Scene to switch projections.\n */\n\nfunction ProjectionPickerViewModel(scene) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  } //>>includeEnd('debug');\n\n\n  this._scene = scene;\n  this._orthographic = scene.camera.frustum instanceof OrthographicFrustum;\n  this._flightInProgress = false;\n  /**\n   * Gets or sets whether the button drop-down is currently visible.  This property is observable.\n   * @type {Boolean}\n   * @default false\n   */\n\n  this.dropDownVisible = false;\n  /**\n   * Gets or sets the perspective projection tooltip.  This property is observable.\n   * @type {String}\n   * @default 'Perspective Projection'\n   */\n\n  this.tooltipPerspective = \"Perspective Projection\";\n  /**\n   * Gets or sets the orthographic projection tooltip.  This property is observable.\n   * @type {String}\n   * @default 'Orthographic Projection'\n   */\n\n  this.tooltipOrthographic = \"Orthographic Projection\";\n  /**\n   * Gets the currently active tooltip.  This property is observable.\n   * @type {String}\n   */\n\n  this.selectedTooltip = undefined;\n  /**\n   * Gets or sets the current SceneMode.  This property is observable.\n   * @type {SceneMode}\n   */\n\n  this.sceneMode = scene.mode;\n  knockout.track(this, [\"_orthographic\", \"_flightInProgress\", \"sceneMode\", \"dropDownVisible\", \"tooltipPerspective\", \"tooltipOrthographic\"]);\n  var that = this;\n  knockout.defineProperty(this, \"selectedTooltip\", function () {\n    if (that._orthographic) {\n      return that.tooltipOrthographic;\n    }\n\n    return that.tooltipPerspective;\n  });\n  this._toggleDropDown = createCommand(function () {\n    if (that.sceneMode === SceneMode.SCENE2D || that._flightInProgress) {\n      return;\n    }\n\n    that.dropDownVisible = !that.dropDownVisible;\n  });\n  this._eventHelper = new EventHelper();\n\n  this._eventHelper.add(scene.morphComplete, function (transitioner, oldMode, newMode, isMorphing) {\n    that.sceneMode = newMode;\n    that._orthographic = newMode === SceneMode.SCENE2D || that._scene.camera.frustum instanceof OrthographicFrustum;\n  });\n\n  this._eventHelper.add(scene.preRender, function () {\n    that._flightInProgress = defined(scene.camera._currentFlight);\n  });\n\n  this._switchToPerspective = createCommand(function () {\n    if (that.sceneMode === SceneMode.SCENE2D) {\n      return;\n    }\n\n    that._scene.camera.switchToPerspectiveFrustum();\n\n    that._orthographic = false;\n    that.dropDownVisible = false;\n  });\n  this._switchToOrthographic = createCommand(function () {\n    if (that.sceneMode === SceneMode.SCENE2D) {\n      return;\n    }\n\n    that._scene.camera.switchToOrthographicFrustum();\n\n    that._orthographic = true;\n    that.dropDownVisible = false;\n  }); //Used by knockout\n\n  this._sceneMode = SceneMode;\n}\n\nObject.defineProperties(ProjectionPickerViewModel.prototype, {\n  /**\n   * Gets the scene\n   * @memberof ProjectionPickerViewModel.prototype\n   * @type {Scene}\n   */\n  scene: {\n    get: function get() {\n      return this._scene;\n    }\n  },\n\n  /**\n   * Gets the command to toggle the drop down box.\n   * @memberof ProjectionPickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  toggleDropDown: {\n    get: function get() {\n      return this._toggleDropDown;\n    }\n  },\n\n  /**\n   * Gets the command to switch to a perspective projection.\n   * @memberof ProjectionPickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  switchToPerspective: {\n    get: function get() {\n      return this._switchToPerspective;\n    }\n  },\n\n  /**\n   * Gets the command to switch to orthographic projection.\n   * @memberof ProjectionPickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  switchToOrthographic: {\n    get: function get() {\n      return this._switchToOrthographic;\n    }\n  },\n\n  /**\n   * Gets whether the scene is currently using an orthographic projection.\n   * @memberof ProjectionPickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  isOrthographicProjection: {\n    get: function get() {\n      return this._orthographic;\n    }\n  }\n});\n/**\n * @returns {Boolean} true if the object has been destroyed, false otherwise.\n */\n\nProjectionPickerViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys the view model.\n */\n\n\nProjectionPickerViewModel.prototype.destroy = function () {\n  this._eventHelper.removeAll();\n\n  destroyObject(this);\n};\n\nexport default ProjectionPickerViewModel;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Widgets/ProjectionPicker/ProjectionPickerViewModel.js"],"names":["defined","destroyObject","DeveloperError","EventHelper","OrthographicFrustum","SceneMode","knockout","createCommand","ProjectionPickerViewModel","scene","_scene","_orthographic","camera","frustum","_flightInProgress","dropDownVisible","tooltipPerspective","tooltipOrthographic","selectedTooltip","undefined","sceneMode","mode","track","that","defineProperty","_toggleDropDown","SCENE2D","_eventHelper","add","morphComplete","transitioner","oldMode","newMode","isMorphing","preRender","_currentFlight","_switchToPerspective","switchToPerspectiveFrustum","_switchToOrthographic","switchToOrthographicFrustum","_sceneMode","Object","defineProperties","prototype","get","toggleDropDown","switchToPerspective","switchToOrthographic","isOrthographicProjection","isDestroyed","destroy","removeAll"],"mappings":"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","sourcesContent":["import defined from \"../../Core/defined.js\";\nimport destroyObject from \"../../Core/destroyObject.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport EventHelper from \"../../Core/EventHelper.js\";\nimport OrthographicFrustum from \"../../Core/OrthographicFrustum.js\";\nimport SceneMode from \"../../Scene/SceneMode.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\n\n/**\n * The view model for {@link ProjectionPicker}.\n * @alias ProjectionPickerViewModel\n * @constructor\n *\n * @param {Scene} scene The Scene to switch projections.\n */\nfunction ProjectionPickerViewModel(scene) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._scene = scene;\n  this._orthographic = scene.camera.frustum instanceof OrthographicFrustum;\n  this._flightInProgress = false;\n\n  /**\n   * Gets or sets whether the button drop-down is currently visible.  This property is observable.\n   * @type {Boolean}\n   * @default false\n   */\n  this.dropDownVisible = false;\n\n  /**\n   * Gets or sets the perspective projection tooltip.  This property is observable.\n   * @type {String}\n   * @default 'Perspective Projection'\n   */\n  this.tooltipPerspective = \"Perspective Projection\";\n\n  /**\n   * Gets or sets the orthographic projection tooltip.  This property is observable.\n   * @type {String}\n   * @default 'Orthographic Projection'\n   */\n  this.tooltipOrthographic = \"Orthographic Projection\";\n\n  /**\n   * Gets the currently active tooltip.  This property is observable.\n   * @type {String}\n   */\n  this.selectedTooltip = undefined;\n\n  /**\n   * Gets or sets the current SceneMode.  This property is observable.\n   * @type {SceneMode}\n   */\n  this.sceneMode = scene.mode;\n\n  knockout.track(this, [\n    \"_orthographic\",\n    \"_flightInProgress\",\n    \"sceneMode\",\n    \"dropDownVisible\",\n    \"tooltipPerspective\",\n    \"tooltipOrthographic\",\n  ]);\n\n  var that = this;\n  knockout.defineProperty(this, \"selectedTooltip\", function () {\n    if (that._orthographic) {\n      return that.tooltipOrthographic;\n    }\n    return that.tooltipPerspective;\n  });\n\n  this._toggleDropDown = createCommand(function () {\n    if (that.sceneMode === SceneMode.SCENE2D || that._flightInProgress) {\n      return;\n    }\n\n    that.dropDownVisible = !that.dropDownVisible;\n  });\n\n  this._eventHelper = new EventHelper();\n  this._eventHelper.add(scene.morphComplete, function (\n    transitioner,\n    oldMode,\n    newMode,\n    isMorphing\n  ) {\n    that.sceneMode = newMode;\n    that._orthographic =\n      newMode === SceneMode.SCENE2D ||\n      that._scene.camera.frustum instanceof OrthographicFrustum;\n  });\n  this._eventHelper.add(scene.preRender, function () {\n    that._flightInProgress = defined(scene.camera._currentFlight);\n  });\n\n  this._switchToPerspective = createCommand(function () {\n    if (that.sceneMode === SceneMode.SCENE2D) {\n      return;\n    }\n\n    that._scene.camera.switchToPerspectiveFrustum();\n    that._orthographic = false;\n    that.dropDownVisible = false;\n  });\n\n  this._switchToOrthographic = createCommand(function () {\n    if (that.sceneMode === SceneMode.SCENE2D) {\n      return;\n    }\n\n    that._scene.camera.switchToOrthographicFrustum();\n    that._orthographic = true;\n    that.dropDownVisible = false;\n  });\n\n  //Used by knockout\n  this._sceneMode = SceneMode;\n}\n\nObject.defineProperties(ProjectionPickerViewModel.prototype, {\n  /**\n   * Gets the scene\n   * @memberof ProjectionPickerViewModel.prototype\n   * @type {Scene}\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    },\n  },\n\n  /**\n   * Gets the command to toggle the drop down box.\n   * @memberof ProjectionPickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  toggleDropDown: {\n    get: function () {\n      return this._toggleDropDown;\n    },\n  },\n\n  /**\n   * Gets the command to switch to a perspective projection.\n   * @memberof ProjectionPickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  switchToPerspective: {\n    get: function () {\n      return this._switchToPerspective;\n    },\n  },\n\n  /**\n   * Gets the command to switch to orthographic projection.\n   * @memberof ProjectionPickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  switchToOrthographic: {\n    get: function () {\n      return this._switchToOrthographic;\n    },\n  },\n\n  /**\n   * Gets whether the scene is currently using an orthographic projection.\n   * @memberof ProjectionPickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  isOrthographicProjection: {\n    get: function () {\n      return this._orthographic;\n    },\n  },\n});\n\n/**\n * @returns {Boolean} true if the object has been destroyed, false otherwise.\n */\nProjectionPickerViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the view model.\n */\nProjectionPickerViewModel.prototype.destroy = function () {\n  this._eventHelper.removeAll();\n  destroyObject(this);\n};\nexport default ProjectionPickerViewModel;\n"]},"metadata":{},"sourceType":"module"}