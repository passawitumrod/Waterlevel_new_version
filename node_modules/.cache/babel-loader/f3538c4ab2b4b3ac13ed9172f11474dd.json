{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport EllipseGeometry from \"./EllipseGeometry.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n/**\n * A description of a circle on the ellipsoid. Circle geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n *\n * @alias CircleGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.center The circle's center point in the fixed frame.\n * @param {Number} options.radius The radius in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the circle will be on.\n * @param {Number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\n * @param {Number} [options.granularity=0.02] The angular distance between points on the circle in radians.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n *\n * @exception {DeveloperError} radius must be greater than zero.\n * @exception {DeveloperError} granularity must be greater than zero.\n *\n * @see CircleGeometry.createGeometry\n * @see Packable\n *\n * @example\n * // Create a circle.\n * var circle = new Cesium.CircleGeometry({\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n *   radius : 100000.0\n * });\n * var geometry = Cesium.CircleGeometry.createGeometry(circle);\n */\n\nfunction CircleGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var radius = options.radius; //>>includeStart('debug', pragmas.debug);\n\n  Check.typeOf.number(\"radius\", radius); //>>includeEnd('debug');\n\n  var ellipseGeometryOptions = {\n    center: options.center,\n    semiMajorAxis: radius,\n    semiMinorAxis: radius,\n    ellipsoid: options.ellipsoid,\n    height: options.height,\n    extrudedHeight: options.extrudedHeight,\n    granularity: options.granularity,\n    vertexFormat: options.vertexFormat,\n    stRotation: options.stRotation,\n    shadowVolume: options.shadowVolume\n  };\n  this._ellipseGeometry = new EllipseGeometry(ellipseGeometryOptions);\n  this._workerName = \"createCircleGeometry\";\n}\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\n\n\nCircleGeometry.packedLength = EllipseGeometry.packedLength;\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CircleGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\n\nCircleGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value); //>>includeEnd('debug');\n\n  return EllipseGeometry.pack(value._ellipseGeometry, array, startingIndex);\n};\n\nvar scratchEllipseGeometry = new EllipseGeometry({\n  center: new Cartesian3(),\n  semiMajorAxis: 1.0,\n  semiMinorAxis: 1.0\n});\nvar scratchOptions = {\n  center: new Cartesian3(),\n  radius: undefined,\n  ellipsoid: Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\n  height: undefined,\n  extrudedHeight: undefined,\n  granularity: undefined,\n  vertexFormat: new VertexFormat(),\n  stRotation: undefined,\n  semiMajorAxis: undefined,\n  semiMinorAxis: undefined,\n  shadowVolume: undefined\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CircleGeometry} [result] The object into which to store the result.\n * @returns {CircleGeometry} The modified result parameter or a new CircleGeometry instance if one was not provided.\n */\n\nCircleGeometry.unpack = function (array, startingIndex, result) {\n  var ellipseGeometry = EllipseGeometry.unpack(array, startingIndex, scratchEllipseGeometry);\n  scratchOptions.center = Cartesian3.clone(ellipseGeometry._center, scratchOptions.center);\n  scratchOptions.ellipsoid = Ellipsoid.clone(ellipseGeometry._ellipsoid, scratchOptions.ellipsoid);\n  scratchOptions.height = ellipseGeometry._height;\n  scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\n  scratchOptions.granularity = ellipseGeometry._granularity;\n  scratchOptions.vertexFormat = VertexFormat.clone(ellipseGeometry._vertexFormat, scratchOptions.vertexFormat);\n  scratchOptions.stRotation = ellipseGeometry._stRotation;\n  scratchOptions.shadowVolume = ellipseGeometry._shadowVolume;\n\n  if (!defined(result)) {\n    scratchOptions.radius = ellipseGeometry._semiMajorAxis;\n    return new CircleGeometry(scratchOptions);\n  }\n\n  scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\n  scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\n  result._ellipseGeometry = new EllipseGeometry(scratchOptions);\n  return result;\n};\n/**\n * Computes the geometric representation of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\n *\n * @param {CircleGeometry} circleGeometry A description of the circle.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\n\n\nCircleGeometry.createGeometry = function (circleGeometry) {\n  return EllipseGeometry.createGeometry(circleGeometry._ellipseGeometry);\n};\n/**\n * @private\n */\n\n\nCircleGeometry.createShadowVolume = function (circleGeometry, minHeightFunc, maxHeightFunc) {\n  var granularity = circleGeometry._ellipseGeometry._granularity;\n  var ellipsoid = circleGeometry._ellipseGeometry._ellipsoid;\n  var minHeight = minHeightFunc(granularity, ellipsoid);\n  var maxHeight = maxHeightFunc(granularity, ellipsoid);\n  return new CircleGeometry({\n    center: circleGeometry._ellipseGeometry._center,\n    radius: circleGeometry._ellipseGeometry._semiMajorAxis,\n    ellipsoid: ellipsoid,\n    stRotation: circleGeometry._ellipseGeometry._stRotation,\n    granularity: granularity,\n    extrudedHeight: minHeight,\n    height: maxHeight,\n    vertexFormat: VertexFormat.POSITION_ONLY,\n    shadowVolume: true\n  });\n};\n\nObject.defineProperties(CircleGeometry.prototype, {\n  /**\n   * @private\n   */\n  rectangle: {\n    get: function get() {\n      return this._ellipseGeometry.rectangle;\n    }\n  },\n\n  /**\n   * For remapping texture coordinates when rendering CircleGeometries as GroundPrimitives.\n   * @private\n   */\n  textureCoordinateRotationPoints: {\n    get: function get() {\n      return this._ellipseGeometry.textureCoordinateRotationPoints;\n    }\n  }\n});\nexport default CircleGeometry;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/CircleGeometry.js"],"names":["Cartesian3","Check","defaultValue","defined","EllipseGeometry","Ellipsoid","VertexFormat","CircleGeometry","options","EMPTY_OBJECT","radius","typeOf","number","ellipseGeometryOptions","center","semiMajorAxis","semiMinorAxis","ellipsoid","height","extrudedHeight","granularity","vertexFormat","stRotation","shadowVolume","_ellipseGeometry","_workerName","packedLength","pack","value","array","startingIndex","object","scratchEllipseGeometry","scratchOptions","undefined","clone","UNIT_SPHERE","unpack","result","ellipseGeometry","_center","_ellipsoid","_height","_extrudedHeight","_granularity","_vertexFormat","_stRotation","_shadowVolume","_semiMajorAxis","_semiMinorAxis","createGeometry","circleGeometry","createShadowVolume","minHeightFunc","maxHeightFunc","minHeight","maxHeight","POSITION_ONLY","Object","defineProperties","prototype","rectangle","get","textureCoordinateRotationPoints"],"mappings":"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","sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport EllipseGeometry from \"./EllipseGeometry.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\n/**\n * A description of a circle on the ellipsoid. Circle geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n *\n * @alias CircleGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.center The circle's center point in the fixed frame.\n * @param {Number} options.radius The radius in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the circle will be on.\n * @param {Number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\n * @param {Number} [options.granularity=0.02] The angular distance between points on the circle in radians.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n *\n * @exception {DeveloperError} radius must be greater than zero.\n * @exception {DeveloperError} granularity must be greater than zero.\n *\n * @see CircleGeometry.createGeometry\n * @see Packable\n *\n * @example\n * // Create a circle.\n * var circle = new Cesium.CircleGeometry({\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n *   radius : 100000.0\n * });\n * var geometry = Cesium.CircleGeometry.createGeometry(circle);\n */\nfunction CircleGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var radius = options.radius;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"radius\", radius);\n  //>>includeEnd('debug');\n\n  var ellipseGeometryOptions = {\n    center: options.center,\n    semiMajorAxis: radius,\n    semiMinorAxis: radius,\n    ellipsoid: options.ellipsoid,\n    height: options.height,\n    extrudedHeight: options.extrudedHeight,\n    granularity: options.granularity,\n    vertexFormat: options.vertexFormat,\n    stRotation: options.stRotation,\n    shadowVolume: options.shadowVolume,\n  };\n  this._ellipseGeometry = new EllipseGeometry(ellipseGeometryOptions);\n  this._workerName = \"createCircleGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nCircleGeometry.packedLength = EllipseGeometry.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CircleGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCircleGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  //>>includeEnd('debug');\n  return EllipseGeometry.pack(value._ellipseGeometry, array, startingIndex);\n};\n\nvar scratchEllipseGeometry = new EllipseGeometry({\n  center: new Cartesian3(),\n  semiMajorAxis: 1.0,\n  semiMinorAxis: 1.0,\n});\nvar scratchOptions = {\n  center: new Cartesian3(),\n  radius: undefined,\n  ellipsoid: Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\n  height: undefined,\n  extrudedHeight: undefined,\n  granularity: undefined,\n  vertexFormat: new VertexFormat(),\n  stRotation: undefined,\n  semiMajorAxis: undefined,\n  semiMinorAxis: undefined,\n  shadowVolume: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CircleGeometry} [result] The object into which to store the result.\n * @returns {CircleGeometry} The modified result parameter or a new CircleGeometry instance if one was not provided.\n */\nCircleGeometry.unpack = function (array, startingIndex, result) {\n  var ellipseGeometry = EllipseGeometry.unpack(\n    array,\n    startingIndex,\n    scratchEllipseGeometry\n  );\n  scratchOptions.center = Cartesian3.clone(\n    ellipseGeometry._center,\n    scratchOptions.center\n  );\n  scratchOptions.ellipsoid = Ellipsoid.clone(\n    ellipseGeometry._ellipsoid,\n    scratchOptions.ellipsoid\n  );\n  scratchOptions.height = ellipseGeometry._height;\n  scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\n  scratchOptions.granularity = ellipseGeometry._granularity;\n  scratchOptions.vertexFormat = VertexFormat.clone(\n    ellipseGeometry._vertexFormat,\n    scratchOptions.vertexFormat\n  );\n  scratchOptions.stRotation = ellipseGeometry._stRotation;\n  scratchOptions.shadowVolume = ellipseGeometry._shadowVolume;\n\n  if (!defined(result)) {\n    scratchOptions.radius = ellipseGeometry._semiMajorAxis;\n    return new CircleGeometry(scratchOptions);\n  }\n\n  scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\n  scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\n  result._ellipseGeometry = new EllipseGeometry(scratchOptions);\n  return result;\n};\n\n/**\n * Computes the geometric representation of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\n *\n * @param {CircleGeometry} circleGeometry A description of the circle.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCircleGeometry.createGeometry = function (circleGeometry) {\n  return EllipseGeometry.createGeometry(circleGeometry._ellipseGeometry);\n};\n\n/**\n * @private\n */\nCircleGeometry.createShadowVolume = function (\n  circleGeometry,\n  minHeightFunc,\n  maxHeightFunc\n) {\n  var granularity = circleGeometry._ellipseGeometry._granularity;\n  var ellipsoid = circleGeometry._ellipseGeometry._ellipsoid;\n\n  var minHeight = minHeightFunc(granularity, ellipsoid);\n  var maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n  return new CircleGeometry({\n    center: circleGeometry._ellipseGeometry._center,\n    radius: circleGeometry._ellipseGeometry._semiMajorAxis,\n    ellipsoid: ellipsoid,\n    stRotation: circleGeometry._ellipseGeometry._stRotation,\n    granularity: granularity,\n    extrudedHeight: minHeight,\n    height: maxHeight,\n    vertexFormat: VertexFormat.POSITION_ONLY,\n    shadowVolume: true,\n  });\n};\n\nObject.defineProperties(CircleGeometry.prototype, {\n  /**\n   * @private\n   */\n  rectangle: {\n    get: function () {\n      return this._ellipseGeometry.rectangle;\n    },\n  },\n  /**\n   * For remapping texture coordinates when rendering CircleGeometries as GroundPrimitives.\n   * @private\n   */\n  textureCoordinateRotationPoints: {\n    get: function () {\n      return this._ellipseGeometry.textureCoordinateRotationPoints;\n    },\n  },\n});\nexport default CircleGeometry;\n"]},"metadata":{},"sourceType":"module"}