{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport combine from \"../Core/combine.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport Cesium3DTileBatchTable from \"./Cesium3DTileBatchTable.js\";\nimport Cesium3DTileFeature from \"./Cesium3DTileFeature.js\";\nimport Cesium3DTileRefine from \"./Cesium3DTileRefine.js\";\nimport PointCloud from \"./PointCloud.js\";\nimport PointCloudShading from \"./PointCloudShading.js\";\nimport SceneMode from \"./SceneMode.js\";\n/**\n * Represents the contents of a\n * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/PointCloud|Point Cloud}\n * tile in a {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification|3D Tiles} tileset.\n * <p>\n * Implements the {@link Cesium3DTileContent} interface.\n * </p>\n *\n * @alias PointCloud3DTileContent\n * @constructor\n *\n * @private\n */\n\nfunction PointCloud3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset) {\n  this._tileset = tileset;\n  this._tile = tile;\n  this._resource = resource;\n  this._pickId = undefined; // Only defined when batchTable is undefined\n\n  this._batchTable = undefined; // Used when feature table contains BATCH_ID semantic\n\n  this._styleDirty = false;\n  this._features = undefined;\n  /**\n   * @inheritdoc Cesium3DTileContent#featurePropertiesDirty\n   */\n\n  this.featurePropertiesDirty = false;\n  this._pointCloud = new PointCloud({\n    arrayBuffer: arrayBuffer,\n    byteOffset: byteOffset,\n    cull: false,\n    opaquePass: Pass.CESIUM_3D_TILE,\n    vertexShaderLoaded: getVertexShaderLoaded(this),\n    fragmentShaderLoaded: getFragmentShaderLoaded(this),\n    uniformMapLoaded: getUniformMapLoaded(this),\n    batchTableLoaded: getBatchTableLoaded(this),\n    pickIdLoaded: getPickIdLoaded(this)\n  });\n}\n\nObject.defineProperties(PointCloud3DTileContent.prototype, {\n  featuresLength: {\n    get: function () {\n      if (defined(this._batchTable)) {\n        return this._batchTable.featuresLength;\n      }\n\n      return 0;\n    }\n  },\n  pointsLength: {\n    get: function () {\n      return this._pointCloud.pointsLength;\n    }\n  },\n  trianglesLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  geometryByteLength: {\n    get: function () {\n      return this._pointCloud.geometryByteLength;\n    }\n  },\n  texturesByteLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  batchTableByteLength: {\n    get: function () {\n      if (defined(this._batchTable)) {\n        return this._batchTable.memorySizeInBytes;\n      }\n\n      return 0;\n    }\n  },\n  innerContents: {\n    get: function () {\n      return undefined;\n    }\n  },\n  readyPromise: {\n    get: function () {\n      return this._pointCloud.readyPromise;\n    }\n  },\n  tileset: {\n    get: function () {\n      return this._tileset;\n    }\n  },\n  tile: {\n    get: function () {\n      return this._tile;\n    }\n  },\n  url: {\n    get: function () {\n      return this._resource.getUrlComponent(true);\n    }\n  },\n  batchTable: {\n    get: function () {\n      return this._batchTable;\n    }\n  }\n});\n\nfunction getVertexShaderLoaded(content) {\n  return function (vs) {\n    if (defined(content._batchTable)) {\n      return content._batchTable.getVertexShaderCallback(false, \"a_batchId\", undefined)(vs);\n    }\n\n    return vs;\n  };\n}\n\nfunction getFragmentShaderLoaded(content) {\n  return function (fs) {\n    if (defined(content._batchTable)) {\n      return content._batchTable.getFragmentShaderCallback(false, undefined)(fs);\n    }\n\n    return \"uniform vec4 czm_pickColor;\\n\" + fs;\n  };\n}\n\nfunction getUniformMapLoaded(content) {\n  return function (uniformMap) {\n    if (defined(content._batchTable)) {\n      return content._batchTable.getUniformMapCallback()(uniformMap);\n    }\n\n    return combine(uniformMap, {\n      czm_pickColor: function () {\n        return content._pickId.color;\n      }\n    });\n  };\n}\n\nfunction getBatchTableLoaded(content) {\n  return function (batchLength, batchTableJson, batchTableBinary) {\n    content._batchTable = new Cesium3DTileBatchTable(content, batchLength, batchTableJson, batchTableBinary);\n  };\n}\n\nfunction getPickIdLoaded(content) {\n  return function () {\n    return defined(content._batchTable) ? content._batchTable.getPickId() : \"czm_pickColor\";\n  };\n}\n\nfunction getGeometricError(content) {\n  var pointCloudShading = content._tileset.pointCloudShading;\n\n  var sphereVolume = content._tile.contentBoundingVolume.boundingSphere.volume();\n\n  var baseResolutionApproximation = CesiumMath.cbrt(sphereVolume / content.pointsLength);\n  var geometricError = content._tile.geometricError;\n\n  if (geometricError === 0) {\n    if (defined(pointCloudShading) && defined(pointCloudShading.baseResolution)) {\n      geometricError = pointCloudShading.baseResolution;\n    } else {\n      geometricError = baseResolutionApproximation;\n    }\n  }\n\n  return geometricError;\n}\n\nfunction createFeatures(content) {\n  var featuresLength = content.featuresLength;\n\n  if (!defined(content._features) && featuresLength > 0) {\n    var features = new Array(featuresLength);\n\n    for (var i = 0; i < featuresLength; ++i) {\n      features[i] = new Cesium3DTileFeature(content, i);\n    }\n\n    content._features = features;\n  }\n}\n\nPointCloud3DTileContent.prototype.hasProperty = function (batchId, name) {\n  if (defined(this._batchTable)) {\n    return this._batchTable.hasProperty(batchId, name);\n  }\n\n  return false;\n};\n/**\n * Part of the {@link Cesium3DTileContent} interface.\n *\n * In this context a feature refers to a group of points that share the same BATCH_ID.\n * For example all the points that represent a door in a house point cloud would be a feature.\n *\n * Features are backed by a batch table and can be colored, shown/hidden, picked, etc like features\n * in b3dm and i3dm.\n *\n * When the BATCH_ID semantic is omitted and the point cloud stores per-point properties, they\n * are not accessible by getFeature. They are only used for dynamic styling.\n */\n\n\nPointCloud3DTileContent.prototype.getFeature = function (batchId) {\n  if (!defined(this._batchTable)) {\n    return undefined;\n  }\n\n  var featuresLength = this.featuresLength; //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(batchId) || batchId < 0 || batchId >= featuresLength) {\n    throw new DeveloperError(\"batchId is required and between zero and featuresLength - 1 (\" + (featuresLength - 1) + \").\");\n  } //>>includeEnd('debug');\n\n\n  createFeatures(this);\n  return this._features[batchId];\n};\n\nPointCloud3DTileContent.prototype.applyDebugSettings = function (enabled, color) {\n  this._pointCloud.color = enabled ? color : Color.WHITE;\n};\n\nPointCloud3DTileContent.prototype.applyStyle = function (style) {\n  if (defined(this._batchTable)) {\n    this._batchTable.applyStyle(style);\n  } else {\n    this._styleDirty = true;\n  }\n};\n\nvar defaultShading = new PointCloudShading();\n\nPointCloud3DTileContent.prototype.update = function (tileset, frameState) {\n  var pointCloud = this._pointCloud;\n  var pointCloudShading = defaultValue(tileset.pointCloudShading, defaultShading);\n  var tile = this._tile;\n  var batchTable = this._batchTable;\n  var mode = frameState.mode;\n  var clippingPlanes = tileset.clippingPlanes;\n\n  if (!defined(this._pickId) && !defined(batchTable)) {\n    this._pickId = frameState.context.createPickId({\n      primitive: tileset,\n      content: this\n    });\n  }\n\n  if (defined(batchTable)) {\n    batchTable.update(tileset, frameState);\n  }\n\n  var boundingSphere;\n\n  if (defined(tile._contentBoundingVolume)) {\n    boundingSphere = mode === SceneMode.SCENE3D ? tile._contentBoundingVolume.boundingSphere : tile._contentBoundingVolume2D.boundingSphere;\n  } else {\n    boundingSphere = mode === SceneMode.SCENE3D ? tile._boundingVolume.boundingSphere : tile._boundingVolume2D.boundingSphere;\n  }\n\n  var styleDirty = this._styleDirty;\n  this._styleDirty = false;\n  pointCloud.clippingPlanesOriginMatrix = tileset.clippingPlanesOriginMatrix;\n  pointCloud.style = defined(batchTable) ? undefined : tileset.style;\n  pointCloud.styleDirty = styleDirty;\n  pointCloud.modelMatrix = tile.computedTransform;\n  pointCloud.time = tileset.timeSinceLoad;\n  pointCloud.shadows = tileset.shadows;\n  pointCloud.boundingSphere = boundingSphere;\n  pointCloud.clippingPlanes = clippingPlanes;\n  pointCloud.isClipped = defined(clippingPlanes) && clippingPlanes.enabled && tile._isClipped;\n  pointCloud.clippingPlanesDirty = tile.clippingPlanesDirty;\n  pointCloud.attenuation = pointCloudShading.attenuation;\n  pointCloud.backFaceCulling = pointCloudShading.backFaceCulling;\n  pointCloud.normalShading = pointCloudShading.normalShading;\n  pointCloud.geometricError = getGeometricError(this);\n  pointCloud.geometricErrorScale = pointCloudShading.geometricErrorScale;\n\n  if (defined(pointCloudShading) && defined(pointCloudShading.maximumAttenuation)) {\n    pointCloud.maximumAttenuation = pointCloudShading.maximumAttenuation;\n  } else if (tile.refine === Cesium3DTileRefine.ADD) {\n    pointCloud.maximumAttenuation = 5.0;\n  } else {\n    pointCloud.maximumAttenuation = tileset.maximumScreenSpaceError;\n  }\n\n  pointCloud.update(frameState);\n};\n\nPointCloud3DTileContent.prototype.isDestroyed = function () {\n  return false;\n};\n\nPointCloud3DTileContent.prototype.destroy = function () {\n  this._pickId = this._pickId && this._pickId.destroy();\n  this._pointCloud = this._pointCloud && this._pointCloud.destroy();\n  this._batchTable = this._batchTable && this._batchTable.destroy();\n  return destroyObject(this);\n};\n\nexport default PointCloud3DTileContent;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/PointCloud3DTileContent.js"],"names":["Color","combine","defaultValue","defined","destroyObject","DeveloperError","CesiumMath","Pass","Cesium3DTileBatchTable","Cesium3DTileFeature","Cesium3DTileRefine","PointCloud","PointCloudShading","SceneMode","PointCloud3DTileContent","tileset","tile","resource","arrayBuffer","byteOffset","_tileset","_tile","_resource","_pickId","undefined","_batchTable","_styleDirty","_features","featurePropertiesDirty","_pointCloud","cull","opaquePass","CESIUM_3D_TILE","vertexShaderLoaded","getVertexShaderLoaded","fragmentShaderLoaded","getFragmentShaderLoaded","uniformMapLoaded","getUniformMapLoaded","batchTableLoaded","getBatchTableLoaded","pickIdLoaded","getPickIdLoaded","Object","defineProperties","prototype","featuresLength","get","pointsLength","trianglesLength","geometryByteLength","texturesByteLength","batchTableByteLength","memorySizeInBytes","innerContents","readyPromise","url","getUrlComponent","batchTable","content","vs","getVertexShaderCallback","fs","getFragmentShaderCallback","uniformMap","getUniformMapCallback","czm_pickColor","color","batchLength","batchTableJson","batchTableBinary","getPickId","getGeometricError","pointCloudShading","sphereVolume","contentBoundingVolume","boundingSphere","volume","baseResolutionApproximation","cbrt","geometricError","baseResolution","createFeatures","features","Array","i","hasProperty","batchId","name","getFeature","applyDebugSettings","enabled","WHITE","applyStyle","style","defaultShading","update","frameState","pointCloud","mode","clippingPlanes","context","createPickId","primitive","_contentBoundingVolume","SCENE3D","_contentBoundingVolume2D","_boundingVolume","_boundingVolume2D","styleDirty","clippingPlanesOriginMatrix","modelMatrix","computedTransform","time","timeSinceLoad","shadows","isClipped","_isClipped","clippingPlanesDirty","attenuation","backFaceCulling","normalShading","geometricErrorScale","maximumAttenuation","refine","ADD","maximumScreenSpaceError","isDestroyed","destroy"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,sBAAP,MAAmC,6BAAnC;AACA,OAAOC,mBAAP,MAAgC,0BAAhC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,iBAAP,MAA8B,wBAA9B;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA;;;;;;;;;;;;;;AAaA,SAASC,uBAAT,CACEC,OADF,EAEEC,IAFF,EAGEC,QAHF,EAIEC,WAJF,EAKEC,UALF,EAME;AACA,OAAKC,QAAL,GAAgBL,OAAhB;AACA,OAAKM,KAAL,GAAaL,IAAb;AACA,OAAKM,SAAL,GAAiBL,QAAjB;AACA,OAAKM,OAAL,GAAeC,SAAf,CAJA,CAI0B;;AAC1B,OAAKC,WAAL,GAAmBD,SAAnB,CALA,CAK8B;;AAC9B,OAAKE,WAAL,GAAmB,KAAnB;AACA,OAAKC,SAAL,GAAiBH,SAAjB;AAEA;;;;AAGA,OAAKI,sBAAL,GAA8B,KAA9B;AAEA,OAAKC,WAAL,GAAmB,IAAIlB,UAAJ,CAAe;AAChCO,IAAAA,WAAW,EAAEA,WADmB;AAEhCC,IAAAA,UAAU,EAAEA,UAFoB;AAGhCW,IAAAA,IAAI,EAAE,KAH0B;AAIhCC,IAAAA,UAAU,EAAExB,IAAI,CAACyB,cAJe;AAKhCC,IAAAA,kBAAkB,EAAEC,qBAAqB,CAAC,IAAD,CALT;AAMhCC,IAAAA,oBAAoB,EAAEC,uBAAuB,CAAC,IAAD,CANb;AAOhCC,IAAAA,gBAAgB,EAAEC,mBAAmB,CAAC,IAAD,CAPL;AAQhCC,IAAAA,gBAAgB,EAAEC,mBAAmB,CAAC,IAAD,CARL;AAShCC,IAAAA,YAAY,EAAEC,eAAe,CAAC,IAAD;AATG,GAAf,CAAnB;AAWD;;AAEDC,MAAM,CAACC,gBAAP,CAAwB9B,uBAAuB,CAAC+B,SAAhD,EAA2D;AACzDC,EAAAA,cAAc,EAAE;AACdC,IAAAA,GAAG,EAAE,YAAY;AACf,UAAI5C,OAAO,CAAC,KAAKsB,WAAN,CAAX,EAA+B;AAC7B,eAAO,KAAKA,WAAL,CAAiBqB,cAAxB;AACD;;AACD,aAAO,CAAP;AACD;AANa,GADyC;AAUzDE,EAAAA,YAAY,EAAE;AACZD,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKlB,WAAL,CAAiBmB,YAAxB;AACD;AAHW,GAV2C;AAgBzDC,EAAAA,eAAe,EAAE;AACfF,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,CAAP;AACD;AAHc,GAhBwC;AAsBzDG,EAAAA,kBAAkB,EAAE;AAClBH,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKlB,WAAL,CAAiBqB,kBAAxB;AACD;AAHiB,GAtBqC;AA4BzDC,EAAAA,kBAAkB,EAAE;AAClBJ,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,CAAP;AACD;AAHiB,GA5BqC;AAkCzDK,EAAAA,oBAAoB,EAAE;AACpBL,IAAAA,GAAG,EAAE,YAAY;AACf,UAAI5C,OAAO,CAAC,KAAKsB,WAAN,CAAX,EAA+B;AAC7B,eAAO,KAAKA,WAAL,CAAiB4B,iBAAxB;AACD;;AACD,aAAO,CAAP;AACD;AANmB,GAlCmC;AA2CzDC,EAAAA,aAAa,EAAE;AACbP,IAAAA,GAAG,EAAE,YAAY;AACf,aAAOvB,SAAP;AACD;AAHY,GA3C0C;AAiDzD+B,EAAAA,YAAY,EAAE;AACZR,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKlB,WAAL,CAAiB0B,YAAxB;AACD;AAHW,GAjD2C;AAuDzDxC,EAAAA,OAAO,EAAE;AACPgC,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAK3B,QAAZ;AACD;AAHM,GAvDgD;AA6DzDJ,EAAAA,IAAI,EAAE;AACJ+B,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAK1B,KAAZ;AACD;AAHG,GA7DmD;AAmEzDmC,EAAAA,GAAG,EAAE;AACHT,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKzB,SAAL,CAAemC,eAAf,CAA+B,IAA/B,CAAP;AACD;AAHE,GAnEoD;AAyEzDC,EAAAA,UAAU,EAAE;AACVX,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKtB,WAAZ;AACD;AAHS;AAzE6C,CAA3D;;AAgFA,SAASS,qBAAT,CAA+ByB,OAA/B,EAAwC;AACtC,SAAO,UAAUC,EAAV,EAAc;AACnB,QAAIzD,OAAO,CAACwD,OAAO,CAAClC,WAAT,CAAX,EAAkC;AAChC,aAAOkC,OAAO,CAAClC,WAAR,CAAoBoC,uBAApB,CACL,KADK,EAEL,WAFK,EAGLrC,SAHK,EAILoC,EAJK,CAAP;AAKD;;AACD,WAAOA,EAAP;AACD,GATD;AAUD;;AAED,SAASxB,uBAAT,CAAiCuB,OAAjC,EAA0C;AACxC,SAAO,UAAUG,EAAV,EAAc;AACnB,QAAI3D,OAAO,CAACwD,OAAO,CAAClC,WAAT,CAAX,EAAkC;AAChC,aAAOkC,OAAO,CAAClC,WAAR,CAAoBsC,yBAApB,CACL,KADK,EAELvC,SAFK,EAGLsC,EAHK,CAAP;AAID;;AACD,WAAO,kCAAkCA,EAAzC;AACD,GARD;AASD;;AAED,SAASxB,mBAAT,CAA6BqB,OAA7B,EAAsC;AACpC,SAAO,UAAUK,UAAV,EAAsB;AAC3B,QAAI7D,OAAO,CAACwD,OAAO,CAAClC,WAAT,CAAX,EAAkC;AAChC,aAAOkC,OAAO,CAAClC,WAAR,CAAoBwC,qBAApB,GAA4CD,UAA5C,CAAP;AACD;;AACD,WAAO/D,OAAO,CAAC+D,UAAD,EAAa;AACzBE,MAAAA,aAAa,EAAE,YAAY;AACzB,eAAOP,OAAO,CAACpC,OAAR,CAAgB4C,KAAvB;AACD;AAHwB,KAAb,CAAd;AAKD,GATD;AAUD;;AAED,SAAS3B,mBAAT,CAA6BmB,OAA7B,EAAsC;AACpC,SAAO,UAAUS,WAAV,EAAuBC,cAAvB,EAAuCC,gBAAvC,EAAyD;AAC9DX,IAAAA,OAAO,CAAClC,WAAR,GAAsB,IAAIjB,sBAAJ,CACpBmD,OADoB,EAEpBS,WAFoB,EAGpBC,cAHoB,EAIpBC,gBAJoB,CAAtB;AAMD,GAPD;AAQD;;AAED,SAAS5B,eAAT,CAAyBiB,OAAzB,EAAkC;AAChC,SAAO,YAAY;AACjB,WAAOxD,OAAO,CAACwD,OAAO,CAAClC,WAAT,CAAP,GACHkC,OAAO,CAAClC,WAAR,CAAoB8C,SAApB,EADG,GAEH,eAFJ;AAGD,GAJD;AAKD;;AAED,SAASC,iBAAT,CAA2Bb,OAA3B,EAAoC;AAClC,MAAIc,iBAAiB,GAAGd,OAAO,CAACvC,QAAR,CAAiBqD,iBAAzC;;AACA,MAAIC,YAAY,GAAGf,OAAO,CAACtC,KAAR,CAAcsD,qBAAd,CAAoCC,cAApC,CAAmDC,MAAnD,EAAnB;;AACA,MAAIC,2BAA2B,GAAGxE,UAAU,CAACyE,IAAX,CAChCL,YAAY,GAAGf,OAAO,CAACX,YADS,CAAlC;AAIA,MAAIgC,cAAc,GAAGrB,OAAO,CAACtC,KAAR,CAAc2D,cAAnC;;AACA,MAAIA,cAAc,KAAK,CAAvB,EAA0B;AACxB,QACE7E,OAAO,CAACsE,iBAAD,CAAP,IACAtE,OAAO,CAACsE,iBAAiB,CAACQ,cAAnB,CAFT,EAGE;AACAD,MAAAA,cAAc,GAAGP,iBAAiB,CAACQ,cAAnC;AACD,KALD,MAKO;AACLD,MAAAA,cAAc,GAAGF,2BAAjB;AACD;AACF;;AACD,SAAOE,cAAP;AACD;;AAED,SAASE,cAAT,CAAwBvB,OAAxB,EAAiC;AAC/B,MAAIb,cAAc,GAAGa,OAAO,CAACb,cAA7B;;AACA,MAAI,CAAC3C,OAAO,CAACwD,OAAO,CAAChC,SAAT,CAAR,IAA+BmB,cAAc,GAAG,CAApD,EAAuD;AACrD,QAAIqC,QAAQ,GAAG,IAAIC,KAAJ,CAAUtC,cAAV,CAAf;;AACA,SAAK,IAAIuC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvC,cAApB,EAAoC,EAAEuC,CAAtC,EAAyC;AACvCF,MAAAA,QAAQ,CAACE,CAAD,CAAR,GAAc,IAAI5E,mBAAJ,CAAwBkD,OAAxB,EAAiC0B,CAAjC,CAAd;AACD;;AACD1B,IAAAA,OAAO,CAAChC,SAAR,GAAoBwD,QAApB;AACD;AACF;;AAEDrE,uBAAuB,CAAC+B,SAAxB,CAAkCyC,WAAlC,GAAgD,UAAUC,OAAV,EAAmBC,IAAnB,EAAyB;AACvE,MAAIrF,OAAO,CAAC,KAAKsB,WAAN,CAAX,EAA+B;AAC7B,WAAO,KAAKA,WAAL,CAAiB6D,WAAjB,CAA6BC,OAA7B,EAAsCC,IAAtC,CAAP;AACD;;AACD,SAAO,KAAP;AACD,CALD;AAOA;;;;;;;;;;;;;;AAYA1E,uBAAuB,CAAC+B,SAAxB,CAAkC4C,UAAlC,GAA+C,UAAUF,OAAV,EAAmB;AAChE,MAAI,CAACpF,OAAO,CAAC,KAAKsB,WAAN,CAAZ,EAAgC;AAC9B,WAAOD,SAAP;AACD;;AACD,MAAIsB,cAAc,GAAG,KAAKA,cAA1B,CAJgE,CAKhE;;AACA,MAAI,CAAC3C,OAAO,CAACoF,OAAD,CAAR,IAAqBA,OAAO,GAAG,CAA/B,IAAoCA,OAAO,IAAIzC,cAAnD,EAAmE;AACjE,UAAM,IAAIzC,cAAJ,CACJ,mEACGyC,cAAc,GAAG,CADpB,IAEE,IAHE,CAAN;AAKD,GAZ+D,CAahE;;;AACAoC,EAAAA,cAAc,CAAC,IAAD,CAAd;AACA,SAAO,KAAKvD,SAAL,CAAe4D,OAAf,CAAP;AACD,CAhBD;;AAkBAzE,uBAAuB,CAAC+B,SAAxB,CAAkC6C,kBAAlC,GAAuD,UACrDC,OADqD,EAErDxB,KAFqD,EAGrD;AACA,OAAKtC,WAAL,CAAiBsC,KAAjB,GAAyBwB,OAAO,GAAGxB,KAAH,GAAWnE,KAAK,CAAC4F,KAAjD;AACD,CALD;;AAOA9E,uBAAuB,CAAC+B,SAAxB,CAAkCgD,UAAlC,GAA+C,UAAUC,KAAV,EAAiB;AAC9D,MAAI3F,OAAO,CAAC,KAAKsB,WAAN,CAAX,EAA+B;AAC7B,SAAKA,WAAL,CAAiBoE,UAAjB,CAA4BC,KAA5B;AACD,GAFD,MAEO;AACL,SAAKpE,WAAL,GAAmB,IAAnB;AACD;AACF,CAND;;AAQA,IAAIqE,cAAc,GAAG,IAAInF,iBAAJ,EAArB;;AAEAE,uBAAuB,CAAC+B,SAAxB,CAAkCmD,MAAlC,GAA2C,UAAUjF,OAAV,EAAmBkF,UAAnB,EAA+B;AACxE,MAAIC,UAAU,GAAG,KAAKrE,WAAtB;AACA,MAAI4C,iBAAiB,GAAGvE,YAAY,CAClCa,OAAO,CAAC0D,iBAD0B,EAElCsB,cAFkC,CAApC;AAIA,MAAI/E,IAAI,GAAG,KAAKK,KAAhB;AACA,MAAIqC,UAAU,GAAG,KAAKjC,WAAtB;AACA,MAAI0E,IAAI,GAAGF,UAAU,CAACE,IAAtB;AACA,MAAIC,cAAc,GAAGrF,OAAO,CAACqF,cAA7B;;AAEA,MAAI,CAACjG,OAAO,CAAC,KAAKoB,OAAN,CAAR,IAA0B,CAACpB,OAAO,CAACuD,UAAD,CAAtC,EAAoD;AAClD,SAAKnC,OAAL,GAAe0E,UAAU,CAACI,OAAX,CAAmBC,YAAnB,CAAgC;AAC7CC,MAAAA,SAAS,EAAExF,OADkC;AAE7C4C,MAAAA,OAAO,EAAE;AAFoC,KAAhC,CAAf;AAID;;AAED,MAAIxD,OAAO,CAACuD,UAAD,CAAX,EAAyB;AACvBA,IAAAA,UAAU,CAACsC,MAAX,CAAkBjF,OAAlB,EAA2BkF,UAA3B;AACD;;AAED,MAAIrB,cAAJ;;AACA,MAAIzE,OAAO,CAACa,IAAI,CAACwF,sBAAN,CAAX,EAA0C;AACxC5B,IAAAA,cAAc,GACZuB,IAAI,KAAKtF,SAAS,CAAC4F,OAAnB,GACIzF,IAAI,CAACwF,sBAAL,CAA4B5B,cADhC,GAEI5D,IAAI,CAAC0F,wBAAL,CAA8B9B,cAHpC;AAID,GALD,MAKO;AACLA,IAAAA,cAAc,GACZuB,IAAI,KAAKtF,SAAS,CAAC4F,OAAnB,GACIzF,IAAI,CAAC2F,eAAL,CAAqB/B,cADzB,GAEI5D,IAAI,CAAC4F,iBAAL,CAAuBhC,cAH7B;AAID;;AAED,MAAIiC,UAAU,GAAG,KAAKnF,WAAtB;AACA,OAAKA,WAAL,GAAmB,KAAnB;AAEAwE,EAAAA,UAAU,CAACY,0BAAX,GAAwC/F,OAAO,CAAC+F,0BAAhD;AACAZ,EAAAA,UAAU,CAACJ,KAAX,GAAmB3F,OAAO,CAACuD,UAAD,CAAP,GAAsBlC,SAAtB,GAAkCT,OAAO,CAAC+E,KAA7D;AACAI,EAAAA,UAAU,CAACW,UAAX,GAAwBA,UAAxB;AACAX,EAAAA,UAAU,CAACa,WAAX,GAAyB/F,IAAI,CAACgG,iBAA9B;AACAd,EAAAA,UAAU,CAACe,IAAX,GAAkBlG,OAAO,CAACmG,aAA1B;AACAhB,EAAAA,UAAU,CAACiB,OAAX,GAAqBpG,OAAO,CAACoG,OAA7B;AACAjB,EAAAA,UAAU,CAACtB,cAAX,GAA4BA,cAA5B;AACAsB,EAAAA,UAAU,CAACE,cAAX,GAA4BA,cAA5B;AACAF,EAAAA,UAAU,CAACkB,SAAX,GACEjH,OAAO,CAACiG,cAAD,CAAP,IAA2BA,cAAc,CAACT,OAA1C,IAAqD3E,IAAI,CAACqG,UAD5D;AAEAnB,EAAAA,UAAU,CAACoB,mBAAX,GAAiCtG,IAAI,CAACsG,mBAAtC;AACApB,EAAAA,UAAU,CAACqB,WAAX,GAAyB9C,iBAAiB,CAAC8C,WAA3C;AACArB,EAAAA,UAAU,CAACsB,eAAX,GAA6B/C,iBAAiB,CAAC+C,eAA/C;AACAtB,EAAAA,UAAU,CAACuB,aAAX,GAA2BhD,iBAAiB,CAACgD,aAA7C;AACAvB,EAAAA,UAAU,CAAClB,cAAX,GAA4BR,iBAAiB,CAAC,IAAD,CAA7C;AACA0B,EAAAA,UAAU,CAACwB,mBAAX,GAAiCjD,iBAAiB,CAACiD,mBAAnD;;AACA,MACEvH,OAAO,CAACsE,iBAAD,CAAP,IACAtE,OAAO,CAACsE,iBAAiB,CAACkD,kBAAnB,CAFT,EAGE;AACAzB,IAAAA,UAAU,CAACyB,kBAAX,GAAgClD,iBAAiB,CAACkD,kBAAlD;AACD,GALD,MAKO,IAAI3G,IAAI,CAAC4G,MAAL,KAAgBlH,kBAAkB,CAACmH,GAAvC,EAA4C;AACjD3B,IAAAA,UAAU,CAACyB,kBAAX,GAAgC,GAAhC;AACD,GAFM,MAEA;AACLzB,IAAAA,UAAU,CAACyB,kBAAX,GAAgC5G,OAAO,CAAC+G,uBAAxC;AACD;;AAED5B,EAAAA,UAAU,CAACF,MAAX,CAAkBC,UAAlB;AACD,CAlED;;AAoEAnF,uBAAuB,CAAC+B,SAAxB,CAAkCkF,WAAlC,GAAgD,YAAY;AAC1D,SAAO,KAAP;AACD,CAFD;;AAIAjH,uBAAuB,CAAC+B,SAAxB,CAAkCmF,OAAlC,GAA4C,YAAY;AACtD,OAAKzG,OAAL,GAAe,KAAKA,OAAL,IAAgB,KAAKA,OAAL,CAAayG,OAAb,EAA/B;AACA,OAAKnG,WAAL,GAAmB,KAAKA,WAAL,IAAoB,KAAKA,WAAL,CAAiBmG,OAAjB,EAAvC;AACA,OAAKvG,WAAL,GAAmB,KAAKA,WAAL,IAAoB,KAAKA,WAAL,CAAiBuG,OAAjB,EAAvC;AACA,SAAO5H,aAAa,CAAC,IAAD,CAApB;AACD,CALD;;AAMA,eAAeU,uBAAf","sourcesContent":["import Color from \"../Core/Color.js\";\nimport combine from \"../Core/combine.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport Cesium3DTileBatchTable from \"./Cesium3DTileBatchTable.js\";\nimport Cesium3DTileFeature from \"./Cesium3DTileFeature.js\";\nimport Cesium3DTileRefine from \"./Cesium3DTileRefine.js\";\nimport PointCloud from \"./PointCloud.js\";\nimport PointCloudShading from \"./PointCloudShading.js\";\nimport SceneMode from \"./SceneMode.js\";\n\n/**\n * Represents the contents of a\n * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/PointCloud|Point Cloud}\n * tile in a {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification|3D Tiles} tileset.\n * <p>\n * Implements the {@link Cesium3DTileContent} interface.\n * </p>\n *\n * @alias PointCloud3DTileContent\n * @constructor\n *\n * @private\n */\nfunction PointCloud3DTileContent(\n  tileset,\n  tile,\n  resource,\n  arrayBuffer,\n  byteOffset\n) {\n  this._tileset = tileset;\n  this._tile = tile;\n  this._resource = resource;\n  this._pickId = undefined; // Only defined when batchTable is undefined\n  this._batchTable = undefined; // Used when feature table contains BATCH_ID semantic\n  this._styleDirty = false;\n  this._features = undefined;\n\n  /**\n   * @inheritdoc Cesium3DTileContent#featurePropertiesDirty\n   */\n  this.featurePropertiesDirty = false;\n\n  this._pointCloud = new PointCloud({\n    arrayBuffer: arrayBuffer,\n    byteOffset: byteOffset,\n    cull: false,\n    opaquePass: Pass.CESIUM_3D_TILE,\n    vertexShaderLoaded: getVertexShaderLoaded(this),\n    fragmentShaderLoaded: getFragmentShaderLoaded(this),\n    uniformMapLoaded: getUniformMapLoaded(this),\n    batchTableLoaded: getBatchTableLoaded(this),\n    pickIdLoaded: getPickIdLoaded(this),\n  });\n}\n\nObject.defineProperties(PointCloud3DTileContent.prototype, {\n  featuresLength: {\n    get: function () {\n      if (defined(this._batchTable)) {\n        return this._batchTable.featuresLength;\n      }\n      return 0;\n    },\n  },\n\n  pointsLength: {\n    get: function () {\n      return this._pointCloud.pointsLength;\n    },\n  },\n\n  trianglesLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  geometryByteLength: {\n    get: function () {\n      return this._pointCloud.geometryByteLength;\n    },\n  },\n\n  texturesByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  batchTableByteLength: {\n    get: function () {\n      if (defined(this._batchTable)) {\n        return this._batchTable.memorySizeInBytes;\n      }\n      return 0;\n    },\n  },\n\n  innerContents: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  readyPromise: {\n    get: function () {\n      return this._pointCloud.readyPromise;\n    },\n  },\n\n  tileset: {\n    get: function () {\n      return this._tileset;\n    },\n  },\n\n  tile: {\n    get: function () {\n      return this._tile;\n    },\n  },\n\n  url: {\n    get: function () {\n      return this._resource.getUrlComponent(true);\n    },\n  },\n\n  batchTable: {\n    get: function () {\n      return this._batchTable;\n    },\n  },\n});\n\nfunction getVertexShaderLoaded(content) {\n  return function (vs) {\n    if (defined(content._batchTable)) {\n      return content._batchTable.getVertexShaderCallback(\n        false,\n        \"a_batchId\",\n        undefined\n      )(vs);\n    }\n    return vs;\n  };\n}\n\nfunction getFragmentShaderLoaded(content) {\n  return function (fs) {\n    if (defined(content._batchTable)) {\n      return content._batchTable.getFragmentShaderCallback(\n        false,\n        undefined\n      )(fs);\n    }\n    return \"uniform vec4 czm_pickColor;\\n\" + fs;\n  };\n}\n\nfunction getUniformMapLoaded(content) {\n  return function (uniformMap) {\n    if (defined(content._batchTable)) {\n      return content._batchTable.getUniformMapCallback()(uniformMap);\n    }\n    return combine(uniformMap, {\n      czm_pickColor: function () {\n        return content._pickId.color;\n      },\n    });\n  };\n}\n\nfunction getBatchTableLoaded(content) {\n  return function (batchLength, batchTableJson, batchTableBinary) {\n    content._batchTable = new Cesium3DTileBatchTable(\n      content,\n      batchLength,\n      batchTableJson,\n      batchTableBinary\n    );\n  };\n}\n\nfunction getPickIdLoaded(content) {\n  return function () {\n    return defined(content._batchTable)\n      ? content._batchTable.getPickId()\n      : \"czm_pickColor\";\n  };\n}\n\nfunction getGeometricError(content) {\n  var pointCloudShading = content._tileset.pointCloudShading;\n  var sphereVolume = content._tile.contentBoundingVolume.boundingSphere.volume();\n  var baseResolutionApproximation = CesiumMath.cbrt(\n    sphereVolume / content.pointsLength\n  );\n\n  var geometricError = content._tile.geometricError;\n  if (geometricError === 0) {\n    if (\n      defined(pointCloudShading) &&\n      defined(pointCloudShading.baseResolution)\n    ) {\n      geometricError = pointCloudShading.baseResolution;\n    } else {\n      geometricError = baseResolutionApproximation;\n    }\n  }\n  return geometricError;\n}\n\nfunction createFeatures(content) {\n  var featuresLength = content.featuresLength;\n  if (!defined(content._features) && featuresLength > 0) {\n    var features = new Array(featuresLength);\n    for (var i = 0; i < featuresLength; ++i) {\n      features[i] = new Cesium3DTileFeature(content, i);\n    }\n    content._features = features;\n  }\n}\n\nPointCloud3DTileContent.prototype.hasProperty = function (batchId, name) {\n  if (defined(this._batchTable)) {\n    return this._batchTable.hasProperty(batchId, name);\n  }\n  return false;\n};\n\n/**\n * Part of the {@link Cesium3DTileContent} interface.\n *\n * In this context a feature refers to a group of points that share the same BATCH_ID.\n * For example all the points that represent a door in a house point cloud would be a feature.\n *\n * Features are backed by a batch table and can be colored, shown/hidden, picked, etc like features\n * in b3dm and i3dm.\n *\n * When the BATCH_ID semantic is omitted and the point cloud stores per-point properties, they\n * are not accessible by getFeature. They are only used for dynamic styling.\n */\nPointCloud3DTileContent.prototype.getFeature = function (batchId) {\n  if (!defined(this._batchTable)) {\n    return undefined;\n  }\n  var featuresLength = this.featuresLength;\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(batchId) || batchId < 0 || batchId >= featuresLength) {\n    throw new DeveloperError(\n      \"batchId is required and between zero and featuresLength - 1 (\" +\n        (featuresLength - 1) +\n        \").\"\n    );\n  }\n  //>>includeEnd('debug');\n  createFeatures(this);\n  return this._features[batchId];\n};\n\nPointCloud3DTileContent.prototype.applyDebugSettings = function (\n  enabled,\n  color\n) {\n  this._pointCloud.color = enabled ? color : Color.WHITE;\n};\n\nPointCloud3DTileContent.prototype.applyStyle = function (style) {\n  if (defined(this._batchTable)) {\n    this._batchTable.applyStyle(style);\n  } else {\n    this._styleDirty = true;\n  }\n};\n\nvar defaultShading = new PointCloudShading();\n\nPointCloud3DTileContent.prototype.update = function (tileset, frameState) {\n  var pointCloud = this._pointCloud;\n  var pointCloudShading = defaultValue(\n    tileset.pointCloudShading,\n    defaultShading\n  );\n  var tile = this._tile;\n  var batchTable = this._batchTable;\n  var mode = frameState.mode;\n  var clippingPlanes = tileset.clippingPlanes;\n\n  if (!defined(this._pickId) && !defined(batchTable)) {\n    this._pickId = frameState.context.createPickId({\n      primitive: tileset,\n      content: this,\n    });\n  }\n\n  if (defined(batchTable)) {\n    batchTable.update(tileset, frameState);\n  }\n\n  var boundingSphere;\n  if (defined(tile._contentBoundingVolume)) {\n    boundingSphere =\n      mode === SceneMode.SCENE3D\n        ? tile._contentBoundingVolume.boundingSphere\n        : tile._contentBoundingVolume2D.boundingSphere;\n  } else {\n    boundingSphere =\n      mode === SceneMode.SCENE3D\n        ? tile._boundingVolume.boundingSphere\n        : tile._boundingVolume2D.boundingSphere;\n  }\n\n  var styleDirty = this._styleDirty;\n  this._styleDirty = false;\n\n  pointCloud.clippingPlanesOriginMatrix = tileset.clippingPlanesOriginMatrix;\n  pointCloud.style = defined(batchTable) ? undefined : tileset.style;\n  pointCloud.styleDirty = styleDirty;\n  pointCloud.modelMatrix = tile.computedTransform;\n  pointCloud.time = tileset.timeSinceLoad;\n  pointCloud.shadows = tileset.shadows;\n  pointCloud.boundingSphere = boundingSphere;\n  pointCloud.clippingPlanes = clippingPlanes;\n  pointCloud.isClipped =\n    defined(clippingPlanes) && clippingPlanes.enabled && tile._isClipped;\n  pointCloud.clippingPlanesDirty = tile.clippingPlanesDirty;\n  pointCloud.attenuation = pointCloudShading.attenuation;\n  pointCloud.backFaceCulling = pointCloudShading.backFaceCulling;\n  pointCloud.normalShading = pointCloudShading.normalShading;\n  pointCloud.geometricError = getGeometricError(this);\n  pointCloud.geometricErrorScale = pointCloudShading.geometricErrorScale;\n  if (\n    defined(pointCloudShading) &&\n    defined(pointCloudShading.maximumAttenuation)\n  ) {\n    pointCloud.maximumAttenuation = pointCloudShading.maximumAttenuation;\n  } else if (tile.refine === Cesium3DTileRefine.ADD) {\n    pointCloud.maximumAttenuation = 5.0;\n  } else {\n    pointCloud.maximumAttenuation = tileset.maximumScreenSpaceError;\n  }\n\n  pointCloud.update(frameState);\n};\n\nPointCloud3DTileContent.prototype.isDestroyed = function () {\n  return false;\n};\n\nPointCloud3DTileContent.prototype.destroy = function () {\n  this._pickId = this._pickId && this._pickId.destroy();\n  this._pointCloud = this._pointCloud && this._pointCloud.destroy();\n  this._batchTable = this._batchTable && this._batchTable.destroy();\n  return destroyObject(this);\n};\nexport default PointCloud3DTileContent;\n"]},"metadata":{},"sourceType":"module"}