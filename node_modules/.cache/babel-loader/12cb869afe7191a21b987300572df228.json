{"ast":null,"code":"import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport HorizontalOrigin from \"../Scene/HorizontalOrigin.js\";\nimport VerticalOrigin from \"../Scene/VerticalOrigin.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\nvar defaultColor = Color.WHITE;\nvar defaultEyeOffset = Cartesian3.ZERO;\nvar defaultHeightReference = HeightReference.NONE;\nvar defaultPixelOffset = Cartesian2.ZERO;\nvar defaultScale = 1.0;\nvar defaultRotation = 0.0;\nvar defaultAlignedAxis = Cartesian3.ZERO;\nvar defaultHorizontalOrigin = HorizontalOrigin.CENTER;\nvar defaultVerticalOrigin = VerticalOrigin.CENTER;\nvar defaultSizeInMeters = false;\nvar positionScratch = new Cartesian3();\nvar colorScratch = new Color();\nvar eyeOffsetScratch = new Cartesian3();\nvar pixelOffsetScratch = new Cartesian2();\nvar scaleByDistanceScratch = new NearFarScalar();\nvar translucencyByDistanceScratch = new NearFarScalar();\nvar pixelOffsetScaleByDistanceScratch = new NearFarScalar();\nvar boundingRectangleScratch = new BoundingRectangle();\nvar distanceDisplayConditionScratch = new DistanceDisplayCondition();\n\nfunction EntityData(entity) {\n  this.entity = entity;\n  this.billboard = undefined;\n  this.textureValue = undefined;\n}\n/**\n * A {@link Visualizer} which maps {@link Entity#billboard} to a {@link Billboard}.\n * @alias BillboardVisualizer\n * @constructor\n *\n * @param {EntityCluster} entityCluster The entity cluster to manage the collection of billboards and optionally cluster with other entities.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n */\n\n\nfunction BillboardVisualizer(entityCluster, entityCollection) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entityCluster)) {\n    throw new DeveloperError(\"entityCluster is required.\");\n  }\n\n  if (!defined(entityCollection)) {\n    throw new DeveloperError(\"entityCollection is required.\");\n  } //>>includeEnd('debug');\n\n\n  entityCollection.collectionChanged.addEventListener(BillboardVisualizer.prototype._onCollectionChanged, this);\n  this._cluster = entityCluster;\n  this._entityCollection = entityCollection;\n  this._items = new AssociativeArray();\n\n  this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n}\n/**\n * Updates the primitives created by this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {Boolean} This function always returns true.\n */\n\n\nBillboardVisualizer.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  } //>>includeEnd('debug');\n\n\n  var items = this._items.values;\n  var cluster = this._cluster;\n\n  for (var i = 0, len = items.length; i < len; i++) {\n    var item = items[i];\n    var entity = item.entity;\n    var billboardGraphics = entity._billboard;\n    var textureValue;\n    var billboard = item.billboard;\n    var show = entity.isShowing && entity.isAvailable(time) && Property.getValueOrDefault(billboardGraphics._show, time, true);\n    var position;\n\n    if (show) {\n      position = Property.getValueOrUndefined(entity._position, time, positionScratch);\n      textureValue = Property.getValueOrUndefined(billboardGraphics._image, time);\n      show = defined(position) && defined(textureValue);\n    }\n\n    if (!show) {\n      //don't bother creating or updating anything else\n      returnPrimitive(item, entity, cluster);\n      continue;\n    }\n\n    if (!Property.isConstant(entity._position)) {\n      cluster._clusterDirty = true;\n    }\n\n    if (!defined(billboard)) {\n      billboard = cluster.getBillboard(entity);\n      billboard.id = entity;\n      billboard.image = undefined;\n      item.billboard = billboard;\n    }\n\n    billboard.show = show;\n\n    if (!defined(billboard.image) || item.textureValue !== textureValue) {\n      billboard.image = textureValue;\n      item.textureValue = textureValue;\n    }\n\n    billboard.position = position;\n    billboard.color = Property.getValueOrDefault(billboardGraphics._color, time, defaultColor, colorScratch);\n    billboard.eyeOffset = Property.getValueOrDefault(billboardGraphics._eyeOffset, time, defaultEyeOffset, eyeOffsetScratch);\n    billboard.heightReference = Property.getValueOrDefault(billboardGraphics._heightReference, time, defaultHeightReference);\n    billboard.pixelOffset = Property.getValueOrDefault(billboardGraphics._pixelOffset, time, defaultPixelOffset, pixelOffsetScratch);\n    billboard.scale = Property.getValueOrDefault(billboardGraphics._scale, time, defaultScale);\n    billboard.rotation = Property.getValueOrDefault(billboardGraphics._rotation, time, defaultRotation);\n    billboard.alignedAxis = Property.getValueOrDefault(billboardGraphics._alignedAxis, time, defaultAlignedAxis);\n    billboard.horizontalOrigin = Property.getValueOrDefault(billboardGraphics._horizontalOrigin, time, defaultHorizontalOrigin);\n    billboard.verticalOrigin = Property.getValueOrDefault(billboardGraphics._verticalOrigin, time, defaultVerticalOrigin);\n    billboard.width = Property.getValueOrUndefined(billboardGraphics._width, time);\n    billboard.height = Property.getValueOrUndefined(billboardGraphics._height, time);\n    billboard.scaleByDistance = Property.getValueOrUndefined(billboardGraphics._scaleByDistance, time, scaleByDistanceScratch);\n    billboard.translucencyByDistance = Property.getValueOrUndefined(billboardGraphics._translucencyByDistance, time, translucencyByDistanceScratch);\n    billboard.pixelOffsetScaleByDistance = Property.getValueOrUndefined(billboardGraphics._pixelOffsetScaleByDistance, time, pixelOffsetScaleByDistanceScratch);\n    billboard.sizeInMeters = Property.getValueOrDefault(billboardGraphics._sizeInMeters, time, defaultSizeInMeters);\n    billboard.distanceDisplayCondition = Property.getValueOrUndefined(billboardGraphics._distanceDisplayCondition, time, distanceDisplayConditionScratch);\n    billboard.disableDepthTestDistance = Property.getValueOrUndefined(billboardGraphics._disableDepthTestDistance, time);\n    var subRegion = Property.getValueOrUndefined(billboardGraphics._imageSubRegion, time, boundingRectangleScratch);\n\n    if (defined(subRegion)) {\n      billboard.setImageSubRegion(billboard._imageId, subRegion);\n    }\n  }\n\n  return true;\n};\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\n\n\nBillboardVisualizer.prototype.getBoundingSphere = function (entity, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required.\");\n  }\n\n  if (!defined(result)) {\n    throw new DeveloperError(\"result is required.\");\n  } //>>includeEnd('debug');\n\n\n  var item = this._items.get(entity.id);\n\n  if (!defined(item) || !defined(item.billboard)) {\n    return BoundingSphereState.FAILED;\n  }\n\n  var billboard = item.billboard;\n\n  if (billboard.heightReference === HeightReference.NONE) {\n    result.center = Cartesian3.clone(billboard.position, result.center);\n  } else {\n    if (!defined(billboard._clampedPosition)) {\n      return BoundingSphereState.PENDING;\n    }\n\n    result.center = Cartesian3.clone(billboard._clampedPosition, result.center);\n  }\n\n  result.radius = 0;\n  return BoundingSphereState.DONE;\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\n\n\nBillboardVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Removes and destroys all primitives created by this instance.\n */\n\n\nBillboardVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(BillboardVisualizer.prototype._onCollectionChanged, this);\n\n  var entities = this._entityCollection.values;\n\n  for (var i = 0; i < entities.length; i++) {\n    this._cluster.removeBillboard(entities[i]);\n  }\n\n  return destroyObject(this);\n};\n\nBillboardVisualizer.prototype._onCollectionChanged = function (entityCollection, added, removed, changed) {\n  var i;\n  var entity;\n  var items = this._items;\n  var cluster = this._cluster;\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n\n    if (defined(entity._billboard) && defined(entity._position)) {\n      items.set(entity.id, new EntityData(entity));\n    }\n  }\n\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n\n    if (defined(entity._billboard) && defined(entity._position)) {\n      if (!items.contains(entity.id)) {\n        items.set(entity.id, new EntityData(entity));\n      }\n    } else {\n      returnPrimitive(items.get(entity.id), entity, cluster);\n      items.remove(entity.id);\n    }\n  }\n\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    returnPrimitive(items.get(entity.id), entity, cluster);\n    items.remove(entity.id);\n  }\n};\n\nfunction returnPrimitive(item, entity, cluster) {\n  if (defined(item)) {\n    item.billboard = undefined;\n    cluster.removeBillboard(entity);\n  }\n}\n\nexport default BillboardVisualizer;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/DataSources/BillboardVisualizer.js"],"names":["AssociativeArray","BoundingRectangle","Cartesian2","Cartesian3","Color","defined","destroyObject","DeveloperError","DistanceDisplayCondition","NearFarScalar","HeightReference","HorizontalOrigin","VerticalOrigin","BoundingSphereState","Property","defaultColor","WHITE","defaultEyeOffset","ZERO","defaultHeightReference","NONE","defaultPixelOffset","defaultScale","defaultRotation","defaultAlignedAxis","defaultHorizontalOrigin","CENTER","defaultVerticalOrigin","defaultSizeInMeters","positionScratch","colorScratch","eyeOffsetScratch","pixelOffsetScratch","scaleByDistanceScratch","translucencyByDistanceScratch","pixelOffsetScaleByDistanceScratch","boundingRectangleScratch","distanceDisplayConditionScratch","EntityData","entity","billboard","undefined","textureValue","BillboardVisualizer","entityCluster","entityCollection","collectionChanged","addEventListener","prototype","_onCollectionChanged","_cluster","_entityCollection","_items","values","update","time","items","cluster","i","len","length","item","billboardGraphics","_billboard","show","isShowing","isAvailable","getValueOrDefault","_show","position","getValueOrUndefined","_position","_image","returnPrimitive","isConstant","_clusterDirty","getBillboard","id","image","color","_color","eyeOffset","_eyeOffset","heightReference","_heightReference","pixelOffset","_pixelOffset","scale","_scale","rotation","_rotation","alignedAxis","_alignedAxis","horizontalOrigin","_horizontalOrigin","verticalOrigin","_verticalOrigin","width","_width","height","_height","scaleByDistance","_scaleByDistance","translucencyByDistance","_translucencyByDistance","pixelOffsetScaleByDistance","_pixelOffsetScaleByDistance","sizeInMeters","_sizeInMeters","distanceDisplayCondition","_distanceDisplayCondition","disableDepthTestDistance","_disableDepthTestDistance","subRegion","_imageSubRegion","setImageSubRegion","_imageId","getBoundingSphere","result","get","FAILED","center","clone","_clampedPosition","PENDING","radius","DONE","isDestroyed","destroy","removeEventListener","entities","removeBillboard","added","removed","changed","set","contains","remove"],"mappings":"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","sourcesContent":["import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport HorizontalOrigin from \"../Scene/HorizontalOrigin.js\";\nimport VerticalOrigin from \"../Scene/VerticalOrigin.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\n\nvar defaultColor = Color.WHITE;\nvar defaultEyeOffset = Cartesian3.ZERO;\nvar defaultHeightReference = HeightReference.NONE;\nvar defaultPixelOffset = Cartesian2.ZERO;\nvar defaultScale = 1.0;\nvar defaultRotation = 0.0;\nvar defaultAlignedAxis = Cartesian3.ZERO;\nvar defaultHorizontalOrigin = HorizontalOrigin.CENTER;\nvar defaultVerticalOrigin = VerticalOrigin.CENTER;\nvar defaultSizeInMeters = false;\n\nvar positionScratch = new Cartesian3();\nvar colorScratch = new Color();\nvar eyeOffsetScratch = new Cartesian3();\nvar pixelOffsetScratch = new Cartesian2();\nvar scaleByDistanceScratch = new NearFarScalar();\nvar translucencyByDistanceScratch = new NearFarScalar();\nvar pixelOffsetScaleByDistanceScratch = new NearFarScalar();\nvar boundingRectangleScratch = new BoundingRectangle();\nvar distanceDisplayConditionScratch = new DistanceDisplayCondition();\n\nfunction EntityData(entity) {\n  this.entity = entity;\n  this.billboard = undefined;\n  this.textureValue = undefined;\n}\n\n/**\n * A {@link Visualizer} which maps {@link Entity#billboard} to a {@link Billboard}.\n * @alias BillboardVisualizer\n * @constructor\n *\n * @param {EntityCluster} entityCluster The entity cluster to manage the collection of billboards and optionally cluster with other entities.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n */\nfunction BillboardVisualizer(entityCluster, entityCollection) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entityCluster)) {\n    throw new DeveloperError(\"entityCluster is required.\");\n  }\n  if (!defined(entityCollection)) {\n    throw new DeveloperError(\"entityCollection is required.\");\n  }\n  //>>includeEnd('debug');\n\n  entityCollection.collectionChanged.addEventListener(\n    BillboardVisualizer.prototype._onCollectionChanged,\n    this\n  );\n\n  this._cluster = entityCluster;\n  this._entityCollection = entityCollection;\n  this._items = new AssociativeArray();\n  this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n}\n\n/**\n * Updates the primitives created by this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {Boolean} This function always returns true.\n */\nBillboardVisualizer.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var items = this._items.values;\n  var cluster = this._cluster;\n\n  for (var i = 0, len = items.length; i < len; i++) {\n    var item = items[i];\n    var entity = item.entity;\n    var billboardGraphics = entity._billboard;\n    var textureValue;\n    var billboard = item.billboard;\n    var show =\n      entity.isShowing &&\n      entity.isAvailable(time) &&\n      Property.getValueOrDefault(billboardGraphics._show, time, true);\n    var position;\n    if (show) {\n      position = Property.getValueOrUndefined(\n        entity._position,\n        time,\n        positionScratch\n      );\n      textureValue = Property.getValueOrUndefined(\n        billboardGraphics._image,\n        time\n      );\n      show = defined(position) && defined(textureValue);\n    }\n\n    if (!show) {\n      //don't bother creating or updating anything else\n      returnPrimitive(item, entity, cluster);\n      continue;\n    }\n\n    if (!Property.isConstant(entity._position)) {\n      cluster._clusterDirty = true;\n    }\n\n    if (!defined(billboard)) {\n      billboard = cluster.getBillboard(entity);\n      billboard.id = entity;\n      billboard.image = undefined;\n      item.billboard = billboard;\n    }\n\n    billboard.show = show;\n    if (!defined(billboard.image) || item.textureValue !== textureValue) {\n      billboard.image = textureValue;\n      item.textureValue = textureValue;\n    }\n    billboard.position = position;\n    billboard.color = Property.getValueOrDefault(\n      billboardGraphics._color,\n      time,\n      defaultColor,\n      colorScratch\n    );\n    billboard.eyeOffset = Property.getValueOrDefault(\n      billboardGraphics._eyeOffset,\n      time,\n      defaultEyeOffset,\n      eyeOffsetScratch\n    );\n    billboard.heightReference = Property.getValueOrDefault(\n      billboardGraphics._heightReference,\n      time,\n      defaultHeightReference\n    );\n    billboard.pixelOffset = Property.getValueOrDefault(\n      billboardGraphics._pixelOffset,\n      time,\n      defaultPixelOffset,\n      pixelOffsetScratch\n    );\n    billboard.scale = Property.getValueOrDefault(\n      billboardGraphics._scale,\n      time,\n      defaultScale\n    );\n    billboard.rotation = Property.getValueOrDefault(\n      billboardGraphics._rotation,\n      time,\n      defaultRotation\n    );\n    billboard.alignedAxis = Property.getValueOrDefault(\n      billboardGraphics._alignedAxis,\n      time,\n      defaultAlignedAxis\n    );\n    billboard.horizontalOrigin = Property.getValueOrDefault(\n      billboardGraphics._horizontalOrigin,\n      time,\n      defaultHorizontalOrigin\n    );\n    billboard.verticalOrigin = Property.getValueOrDefault(\n      billboardGraphics._verticalOrigin,\n      time,\n      defaultVerticalOrigin\n    );\n    billboard.width = Property.getValueOrUndefined(\n      billboardGraphics._width,\n      time\n    );\n    billboard.height = Property.getValueOrUndefined(\n      billboardGraphics._height,\n      time\n    );\n    billboard.scaleByDistance = Property.getValueOrUndefined(\n      billboardGraphics._scaleByDistance,\n      time,\n      scaleByDistanceScratch\n    );\n    billboard.translucencyByDistance = Property.getValueOrUndefined(\n      billboardGraphics._translucencyByDistance,\n      time,\n      translucencyByDistanceScratch\n    );\n    billboard.pixelOffsetScaleByDistance = Property.getValueOrUndefined(\n      billboardGraphics._pixelOffsetScaleByDistance,\n      time,\n      pixelOffsetScaleByDistanceScratch\n    );\n    billboard.sizeInMeters = Property.getValueOrDefault(\n      billboardGraphics._sizeInMeters,\n      time,\n      defaultSizeInMeters\n    );\n    billboard.distanceDisplayCondition = Property.getValueOrUndefined(\n      billboardGraphics._distanceDisplayCondition,\n      time,\n      distanceDisplayConditionScratch\n    );\n    billboard.disableDepthTestDistance = Property.getValueOrUndefined(\n      billboardGraphics._disableDepthTestDistance,\n      time\n    );\n\n    var subRegion = Property.getValueOrUndefined(\n      billboardGraphics._imageSubRegion,\n      time,\n      boundingRectangleScratch\n    );\n    if (defined(subRegion)) {\n      billboard.setImageSubRegion(billboard._imageId, subRegion);\n    }\n  }\n  return true;\n};\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nBillboardVisualizer.prototype.getBoundingSphere = function (entity, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required.\");\n  }\n  if (!defined(result)) {\n    throw new DeveloperError(\"result is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var item = this._items.get(entity.id);\n  if (!defined(item) || !defined(item.billboard)) {\n    return BoundingSphereState.FAILED;\n  }\n\n  var billboard = item.billboard;\n  if (billboard.heightReference === HeightReference.NONE) {\n    result.center = Cartesian3.clone(billboard.position, result.center);\n  } else {\n    if (!defined(billboard._clampedPosition)) {\n      return BoundingSphereState.PENDING;\n    }\n    result.center = Cartesian3.clone(billboard._clampedPosition, result.center);\n  }\n  result.radius = 0;\n  return BoundingSphereState.DONE;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\nBillboardVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Removes and destroys all primitives created by this instance.\n */\nBillboardVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(\n    BillboardVisualizer.prototype._onCollectionChanged,\n    this\n  );\n  var entities = this._entityCollection.values;\n  for (var i = 0; i < entities.length; i++) {\n    this._cluster.removeBillboard(entities[i]);\n  }\n  return destroyObject(this);\n};\n\nBillboardVisualizer.prototype._onCollectionChanged = function (\n  entityCollection,\n  added,\n  removed,\n  changed\n) {\n  var i;\n  var entity;\n  var items = this._items;\n  var cluster = this._cluster;\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n    if (defined(entity._billboard) && defined(entity._position)) {\n      items.set(entity.id, new EntityData(entity));\n    }\n  }\n\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n    if (defined(entity._billboard) && defined(entity._position)) {\n      if (!items.contains(entity.id)) {\n        items.set(entity.id, new EntityData(entity));\n      }\n    } else {\n      returnPrimitive(items.get(entity.id), entity, cluster);\n      items.remove(entity.id);\n    }\n  }\n\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    returnPrimitive(items.get(entity.id), entity, cluster);\n    items.remove(entity.id);\n  }\n};\n\nfunction returnPrimitive(item, entity, cluster) {\n  if (defined(item)) {\n    item.billboard = undefined;\n    cluster.removeBillboard(entity);\n  }\n}\nexport default BillboardVisualizer;\n"]},"metadata":{},"sourceType":"module"}