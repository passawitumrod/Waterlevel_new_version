{"ast":null,"code":"/**\n * Represents a Gregorian date in a more precise format than the JavaScript Date object.\n * In addition to submillisecond precision, this object can also represent leap seconds.\n * @alias GregorianDate\n * @constructor\n *\n * @see JulianDate#toGregorianDate\n */\nfunction GregorianDate(year, month, day, hour, minute, second, millisecond, isLeapSecond) {\n  /**\n   * Gets or sets the year as a whole number.\n   * @type {Number}\n   */\n  this.year = year;\n  /**\n   * Gets or sets the month as a whole number with range [1, 12].\n   * @type {Number}\n   */\n\n  this.month = month;\n  /**\n   * Gets or sets the day of the month as a whole number starting at 1.\n   * @type {Number}\n   */\n\n  this.day = day;\n  /**\n   * Gets or sets the hour as a whole number with range [0, 23].\n   * @type {Number}\n   */\n\n  this.hour = hour;\n  /**\n   * Gets or sets the minute of the hour as a whole number with range [0, 59].\n   * @type {Number}\n   */\n\n  this.minute = minute;\n  /**\n   * Gets or sets the second of the minute as a whole number with range [0, 60], with 60 representing a leap second.\n   * @type {Number}\n   */\n\n  this.second = second;\n  /**\n   * Gets or sets the millisecond of the second as a floating point number with range [0.0, 1000.0).\n   * @type {Number}\n   */\n\n  this.millisecond = millisecond;\n  /**\n   * Gets or sets whether this time is during a leap second.\n   * @type {Boolean}\n   */\n\n  this.isLeapSecond = isLeapSecond;\n}\n\nexport default GregorianDate;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/GregorianDate.js"],"names":["GregorianDate","year","month","day","hour","minute","second","millisecond","isLeapSecond"],"mappings":"AAAA;;;;;;;;AAQA,SAASA,aAAT,CACEC,IADF,EAEEC,KAFF,EAGEC,GAHF,EAIEC,IAJF,EAKEC,MALF,EAMEC,MANF,EAOEC,WAPF,EAQEC,YARF,EASE;AACA;;;;AAIA,OAAKP,IAAL,GAAYA,IAAZ;AACA;;;;;AAIA,OAAKC,KAAL,GAAaA,KAAb;AACA;;;;;AAIA,OAAKC,GAAL,GAAWA,GAAX;AACA;;;;;AAIA,OAAKC,IAAL,GAAYA,IAAZ;AACA;;;;;AAIA,OAAKC,MAAL,GAAcA,MAAd;AACA;;;;;AAIA,OAAKC,MAAL,GAAcA,MAAd;AACA;;;;;AAIA,OAAKC,WAAL,GAAmBA,WAAnB;AACA;;;;;AAIA,OAAKC,YAAL,GAAoBA,YAApB;AACD;;AACD,eAAeR,aAAf","sourcesContent":["/**\n * Represents a Gregorian date in a more precise format than the JavaScript Date object.\n * In addition to submillisecond precision, this object can also represent leap seconds.\n * @alias GregorianDate\n * @constructor\n *\n * @see JulianDate#toGregorianDate\n */\nfunction GregorianDate(\n  year,\n  month,\n  day,\n  hour,\n  minute,\n  second,\n  millisecond,\n  isLeapSecond\n) {\n  /**\n   * Gets or sets the year as a whole number.\n   * @type {Number}\n   */\n  this.year = year;\n  /**\n   * Gets or sets the month as a whole number with range [1, 12].\n   * @type {Number}\n   */\n  this.month = month;\n  /**\n   * Gets or sets the day of the month as a whole number starting at 1.\n   * @type {Number}\n   */\n  this.day = day;\n  /**\n   * Gets or sets the hour as a whole number with range [0, 23].\n   * @type {Number}\n   */\n  this.hour = hour;\n  /**\n   * Gets or sets the minute of the hour as a whole number with range [0, 59].\n   * @type {Number}\n   */\n  this.minute = minute;\n  /**\n   * Gets or sets the second of the minute as a whole number with range [0, 60], with 60 representing a leap second.\n   * @type {Number}\n   */\n  this.second = second;\n  /**\n   * Gets or sets the millisecond of the second as a floating point number with range [0.0, 1000.0).\n   * @type {Number}\n   */\n  this.millisecond = millisecond;\n  /**\n   * Gets or sets whether this time is during a leap second.\n   * @type {Boolean}\n   */\n  this.isLeapSecond = isLeapSecond;\n}\nexport default GregorianDate;\n"]},"metadata":{},"sourceType":"module"}