{"ast":null,"code":"import SceneMode from \"./SceneMode.js\";\n/**\n * State information about the current frame.  An instance of this class\n * is provided to update functions.\n *\n * @param {Context} context The rendering context\n * @param {CreditDisplay} creditDisplay Handles adding and removing credits from an HTML element\n * @param {JobScheduler} jobScheduler The job scheduler\n *\n * @alias FrameState\n * @constructor\n *\n * @private\n */\n\nfunction FrameState(context, creditDisplay, jobScheduler) {\n  /**\n   * The rendering context.\n   *\n   * @type {Context}\n   */\n  this.context = context;\n  /**\n   * An array of rendering commands.\n   *\n   * @type {DrawCommand[]}\n   */\n\n  this.commandList = [];\n  /**\n   * An array of shadow maps.\n   * @type {ShadowMap[]}\n   */\n\n  this.shadowMaps = [];\n  /**\n   * The BRDF look up texture generator used for image-based lighting for PBR models\n   * @type {BrdfLutGenerator}\n   */\n\n  this.brdfLutGenerator = undefined;\n  /**\n   * The environment map used for image-based lighting for PBR models\n   * @type {CubeMap}\n   */\n\n  this.environmentMap = undefined;\n  /**\n   * The spherical harmonic coefficients used for image-based lighting for PBR models.\n   * @type {Cartesian3[]}\n   */\n\n  this.sphericalHarmonicCoefficients = undefined;\n  /**\n   * The specular environment atlas used for image-based lighting for PBR models.\n   * @type {Texture}\n   */\n\n  this.specularEnvironmentMaps = undefined;\n  /**\n   * The maximum level-of-detail of the specular environment atlas used for image-based lighting for PBR models.\n   * @type {Number}\n   */\n\n  this.specularEnvironmentMapsMaximumLOD = undefined;\n  /**\n   * The current mode of the scene.\n   *\n   * @type {SceneMode}\n   * @default {@link SceneMode.SCENE3D}\n   */\n\n  this.mode = SceneMode.SCENE3D;\n  /**\n   * The current morph transition time between 2D/Columbus View and 3D,\n   * with 0.0 being 2D or Columbus View and 1.0 being 3D.\n   *\n   * @type {Number}\n   */\n\n  this.morphTime = SceneMode.getMorphTime(SceneMode.SCENE3D);\n  /**\n   * The current frame number.\n   *\n   * @type {Number}\n   * @default 0\n   */\n\n  this.frameNumber = 0;\n  /**\n   * <code>true</code> if a new frame has been issued and the frame number has been updated.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n\n  this.newFrame = false;\n  /**\n   * The scene's current time.\n   *\n   * @type {JulianDate}\n   * @default undefined\n   */\n\n  this.time = undefined;\n  /**\n   * The job scheduler.\n   *\n   * @type {JobScheduler}\n   */\n\n  this.jobScheduler = jobScheduler;\n  /**\n   * The map projection to use in 2D and Columbus View modes.\n   *\n   * @type {MapProjection}\n   * @default undefined\n   */\n\n  this.mapProjection = undefined;\n  /**\n   * The current camera.\n   *\n   * @type {Camera}\n   * @default undefined\n   */\n\n  this.camera = undefined;\n  /**\n   * Whether the camera is underground.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n\n  this.cameraUnderground = false;\n  /**\n   * The culling volume.\n   *\n   * @type {CullingVolume}\n   * @default undefined\n   */\n\n  this.cullingVolume = undefined;\n  /**\n   * The current occluder.\n   *\n   * @type {Occluder}\n   * @default undefined\n   */\n\n  this.occluder = undefined;\n  /**\n   * The maximum screen-space error used to drive level-of-detail refinement.  Higher\n   * values will provide better performance but lower visual quality.\n   *\n   * @type {Number}\n   * @default 2\n   */\n\n  this.maximumScreenSpaceError = undefined;\n  /**\n   * Ratio between a pixel and a density-independent pixel. Provides a standard unit of\n   * measure for real pixel measurements appropriate to a particular device.\n   *\n   * @type {Number}\n   * @default 1.0\n   */\n\n  this.pixelRatio = 1.0;\n  this.passes = {\n    /**\n     * <code>true</code> if the primitive should update for a render pass, <code>false</code> otherwise.\n     *\n     * @type {Boolean}\n     * @default false\n     */\n    render: false,\n\n    /**\n     * <code>true</code> if the primitive should update for a picking pass, <code>false</code> otherwise.\n     *\n     * @type {Boolean}\n     * @default false\n     */\n    pick: false,\n\n    /**\n     * <code>true</code> if the primitive should update for a depth only pass, <code>false</code> otherwise.\n     * @type {Boolean}\n     * @default false\n     */\n    depth: false,\n\n    /**\n     * <code>true</code> if the primitive should update for a per-feature post-process pass, <code>false</code> otherwise.\n     * @type {Boolean}\n     * @default false\n     */\n    postProcess: false,\n\n    /**\n     * <code>true</code> if the primitive should update for an offscreen pass, <code>false</code> otherwise.\n     * @type {Boolean}\n     * @default false\n     */\n    offscreen: false\n  };\n  /**\n   * The credit display.\n   *\n   * @type {CreditDisplay}\n   */\n\n  this.creditDisplay = creditDisplay;\n  /**\n   * An array of functions to be called at the end of the frame.  This array\n   * will be cleared after each frame.\n   * <p>\n   * This allows queueing up events in <code>update</code> functions and\n   * firing them at a time when the subscribers are free to change the\n   * scene state, e.g., manipulate the camera, instead of firing events\n   * directly in <code>update</code> functions.\n   * </p>\n   *\n   * @type {FrameState~AfterRenderCallback[]}\n   *\n   * @example\n   * frameState.afterRender.push(function() {\n   *   // take some action, raise an event, etc.\n   * });\n   */\n\n  this.afterRender = [];\n  /**\n   * Gets whether or not to optimized for 3D only.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n\n  this.scene3DOnly = false;\n  this.fog = {\n    /**\n     * <code>true</code> if fog is enabled, <code>false</code> otherwise.\n     * @type {Boolean}\n     * @default false\n     */\n    enabled: false,\n\n    /**\n     * A positive number used to mix the color and fog color based on camera distance.\n     *\n     * @type {Number}\n     * @default undefined\n     */\n    density: undefined,\n\n    /**\n     * A scalar used to modify the screen space error of geometry partially in fog.\n     *\n     * @type {Number}\n     * @default undefined\n     */\n    sse: undefined,\n\n    /**\n     * The minimum brightness of terrain with fog applied.\n     *\n     * @type {Number}\n     * @default undefined\n     */\n    minimumBrightness: undefined\n  };\n  /**\n   * A scalar used to exaggerate the terrain.\n   * @type {Number}\n   * @default 1.0\n   */\n\n  this.terrainExaggeration = 1.0;\n  this.shadowState = {\n    /**\n     * Whether there are any active shadow maps this frame.\n     * @type {Boolean}\n     */\n    shadowsEnabled: true,\n\n    /**\n     * Whether there are any active shadow maps that originate from light sources. Does not\n     * include shadow maps that are used for analytical purposes.\n     */\n    lightShadowsEnabled: true,\n\n    /**\n     * All shadow maps that are enabled this frame.\n     */\n    shadowMaps: [],\n\n    /**\n     * Shadow maps that originate from light sources. Does not include shadow maps that are used for\n     * analytical purposes. Only these shadow maps will be used to generate receive shadows shaders.\n     */\n    lightShadowMaps: [],\n\n    /**\n     * The near plane of the scene's frustum commands. Used for fitting cascaded shadow maps.\n     * @type {Number}\n     */\n    nearPlane: 1.0,\n\n    /**\n     * The far plane of the scene's frustum commands. Used for fitting cascaded shadow maps.\n     * @type {Number}\n     */\n    farPlane: 5000.0,\n\n    /**\n     * The size of the bounding volume that is closest to the camera. This is used to place more shadow detail near the object.\n     * @type {Number}\n     */\n    closestObjectSize: 1000.0,\n\n    /**\n     * The time when a shadow map was last dirty\n     * @type {Number}\n     */\n    lastDirtyTime: 0,\n\n    /**\n     * Whether the shadows maps are out of view this frame\n     * @type {Boolean}\n     */\n    outOfView: true\n  };\n  /**\n   * The position of the splitter to use when rendering imagery layers on either side of a splitter.\n   * This value should be between 0.0 and 1.0 with 0 being the far left of the viewport and 1 being the far right of the viewport.\n   * @type {Number}\n   * @default 0.0\n   */\n\n  this.imagerySplitPosition = 0.0;\n  /**\n   * Distances to the near and far planes of the camera frustums\n   * @type {Number[]}\n   * @default []\n   */\n\n  this.frustumSplits = [];\n  /**\n   * The current scene background color\n   *\n   * @type {Color}\n   */\n\n  this.backgroundColor = undefined;\n  /**\n   * The light used to shade the scene.\n   *\n   * @type {Light}\n   */\n\n  this.light = undefined;\n  /**\n   * The distance from the camera at which to disable the depth test of billboards, labels and points\n   * to, for example, prevent clipping against terrain. When set to zero, the depth test should always\n   * be applied. When less than zero, the depth test should never be applied.\n   * @type {Number}\n   */\n\n  this.minimumDisableDepthTestDistance = undefined;\n  /**\n   * When <code>false</code>, 3D Tiles will render normally. When <code>true</code>, classified 3D Tile geometry will render normally and\n   * unclassified 3D Tile geometry will render with the color multiplied with {@link FrameState#invertClassificationColor}.\n   * @type {Boolean}\n   * @default false\n   */\n\n  this.invertClassification = false;\n  /**\n   * The highlight color of unclassified 3D Tile geometry when {@link FrameState#invertClassification} is <code>true</code>.\n   * @type {Color}\n   */\n\n  this.invertClassificationColor = undefined;\n  /**\n   * Whether or not the scene uses a logarithmic depth buffer.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n\n  this.useLogDepth = false;\n  /**\n   * Additional state used to update 3D Tilesets.\n   *\n   * @type {Cesium3DTilePassState}\n   */\n\n  this.tilesetPassState = undefined;\n  /**\n   * The minimum terrain height out of all rendered terrain tiles. Used to improve culling for objects underneath the ellipsoid but above terrain.\n   *\n   * @type {Number}\n   * @default 0.0\n   */\n\n  this.minimumTerrainHeight = 0.0;\n}\n/**\n * A function that will be called at the end of the frame.\n *\n * @callback FrameState~AfterRenderCallback\n */\n\n\nexport default FrameState;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/FrameState.js"],"names":["SceneMode","FrameState","context","creditDisplay","jobScheduler","commandList","shadowMaps","brdfLutGenerator","undefined","environmentMap","sphericalHarmonicCoefficients","specularEnvironmentMaps","specularEnvironmentMapsMaximumLOD","mode","SCENE3D","morphTime","getMorphTime","frameNumber","newFrame","time","mapProjection","camera","cameraUnderground","cullingVolume","occluder","maximumScreenSpaceError","pixelRatio","passes","render","pick","depth","postProcess","offscreen","afterRender","scene3DOnly","fog","enabled","density","sse","minimumBrightness","terrainExaggeration","shadowState","shadowsEnabled","lightShadowsEnabled","lightShadowMaps","nearPlane","farPlane","closestObjectSize","lastDirtyTime","outOfView","imagerySplitPosition","frustumSplits","backgroundColor","light","minimumDisableDepthTestDistance","invertClassification","invertClassificationColor","useLogDepth","tilesetPassState","minimumTerrainHeight"],"mappings":"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","sourcesContent":["import SceneMode from \"./SceneMode.js\";\n\n/**\n * State information about the current frame.  An instance of this class\n * is provided to update functions.\n *\n * @param {Context} context The rendering context\n * @param {CreditDisplay} creditDisplay Handles adding and removing credits from an HTML element\n * @param {JobScheduler} jobScheduler The job scheduler\n *\n * @alias FrameState\n * @constructor\n *\n * @private\n */\nfunction FrameState(context, creditDisplay, jobScheduler) {\n  /**\n   * The rendering context.\n   *\n   * @type {Context}\n   */\n  this.context = context;\n\n  /**\n   * An array of rendering commands.\n   *\n   * @type {DrawCommand[]}\n   */\n  this.commandList = [];\n\n  /**\n   * An array of shadow maps.\n   * @type {ShadowMap[]}\n   */\n  this.shadowMaps = [];\n\n  /**\n   * The BRDF look up texture generator used for image-based lighting for PBR models\n   * @type {BrdfLutGenerator}\n   */\n  this.brdfLutGenerator = undefined;\n\n  /**\n   * The environment map used for image-based lighting for PBR models\n   * @type {CubeMap}\n   */\n  this.environmentMap = undefined;\n\n  /**\n   * The spherical harmonic coefficients used for image-based lighting for PBR models.\n   * @type {Cartesian3[]}\n   */\n  this.sphericalHarmonicCoefficients = undefined;\n\n  /**\n   * The specular environment atlas used for image-based lighting for PBR models.\n   * @type {Texture}\n   */\n  this.specularEnvironmentMaps = undefined;\n\n  /**\n   * The maximum level-of-detail of the specular environment atlas used for image-based lighting for PBR models.\n   * @type {Number}\n   */\n  this.specularEnvironmentMapsMaximumLOD = undefined;\n\n  /**\n   * The current mode of the scene.\n   *\n   * @type {SceneMode}\n   * @default {@link SceneMode.SCENE3D}\n   */\n  this.mode = SceneMode.SCENE3D;\n\n  /**\n   * The current morph transition time between 2D/Columbus View and 3D,\n   * with 0.0 being 2D or Columbus View and 1.0 being 3D.\n   *\n   * @type {Number}\n   */\n  this.morphTime = SceneMode.getMorphTime(SceneMode.SCENE3D);\n\n  /**\n   * The current frame number.\n   *\n   * @type {Number}\n   * @default 0\n   */\n  this.frameNumber = 0;\n\n  /**\n   * <code>true</code> if a new frame has been issued and the frame number has been updated.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.newFrame = false;\n\n  /**\n   * The scene's current time.\n   *\n   * @type {JulianDate}\n   * @default undefined\n   */\n  this.time = undefined;\n\n  /**\n   * The job scheduler.\n   *\n   * @type {JobScheduler}\n   */\n  this.jobScheduler = jobScheduler;\n\n  /**\n   * The map projection to use in 2D and Columbus View modes.\n   *\n   * @type {MapProjection}\n   * @default undefined\n   */\n  this.mapProjection = undefined;\n\n  /**\n   * The current camera.\n   *\n   * @type {Camera}\n   * @default undefined\n   */\n  this.camera = undefined;\n\n  /**\n   * Whether the camera is underground.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.cameraUnderground = false;\n\n  /**\n   * The culling volume.\n   *\n   * @type {CullingVolume}\n   * @default undefined\n   */\n  this.cullingVolume = undefined;\n\n  /**\n   * The current occluder.\n   *\n   * @type {Occluder}\n   * @default undefined\n   */\n  this.occluder = undefined;\n\n  /**\n   * The maximum screen-space error used to drive level-of-detail refinement.  Higher\n   * values will provide better performance but lower visual quality.\n   *\n   * @type {Number}\n   * @default 2\n   */\n  this.maximumScreenSpaceError = undefined;\n\n  /**\n   * Ratio between a pixel and a density-independent pixel. Provides a standard unit of\n   * measure for real pixel measurements appropriate to a particular device.\n   *\n   * @type {Number}\n   * @default 1.0\n   */\n  this.pixelRatio = 1.0;\n\n  this.passes = {\n    /**\n     * <code>true</code> if the primitive should update for a render pass, <code>false</code> otherwise.\n     *\n     * @type {Boolean}\n     * @default false\n     */\n    render: false,\n\n    /**\n     * <code>true</code> if the primitive should update for a picking pass, <code>false</code> otherwise.\n     *\n     * @type {Boolean}\n     * @default false\n     */\n    pick: false,\n\n    /**\n     * <code>true</code> if the primitive should update for a depth only pass, <code>false</code> otherwise.\n     * @type {Boolean}\n     * @default false\n     */\n    depth: false,\n\n    /**\n     * <code>true</code> if the primitive should update for a per-feature post-process pass, <code>false</code> otherwise.\n     * @type {Boolean}\n     * @default false\n     */\n    postProcess: false,\n\n    /**\n     * <code>true</code> if the primitive should update for an offscreen pass, <code>false</code> otherwise.\n     * @type {Boolean}\n     * @default false\n     */\n    offscreen: false,\n  };\n\n  /**\n   * The credit display.\n   *\n   * @type {CreditDisplay}\n   */\n  this.creditDisplay = creditDisplay;\n\n  /**\n   * An array of functions to be called at the end of the frame.  This array\n   * will be cleared after each frame.\n   * <p>\n   * This allows queueing up events in <code>update</code> functions and\n   * firing them at a time when the subscribers are free to change the\n   * scene state, e.g., manipulate the camera, instead of firing events\n   * directly in <code>update</code> functions.\n   * </p>\n   *\n   * @type {FrameState~AfterRenderCallback[]}\n   *\n   * @example\n   * frameState.afterRender.push(function() {\n   *   // take some action, raise an event, etc.\n   * });\n   */\n  this.afterRender = [];\n\n  /**\n   * Gets whether or not to optimized for 3D only.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.scene3DOnly = false;\n\n  this.fog = {\n    /**\n     * <code>true</code> if fog is enabled, <code>false</code> otherwise.\n     * @type {Boolean}\n     * @default false\n     */\n    enabled: false,\n    /**\n     * A positive number used to mix the color and fog color based on camera distance.\n     *\n     * @type {Number}\n     * @default undefined\n     */\n    density: undefined,\n    /**\n     * A scalar used to modify the screen space error of geometry partially in fog.\n     *\n     * @type {Number}\n     * @default undefined\n     */\n    sse: undefined,\n    /**\n     * The minimum brightness of terrain with fog applied.\n     *\n     * @type {Number}\n     * @default undefined\n     */\n    minimumBrightness: undefined,\n  };\n\n  /**\n   * A scalar used to exaggerate the terrain.\n   * @type {Number}\n   * @default 1.0\n   */\n  this.terrainExaggeration = 1.0;\n\n  this.shadowState = {\n    /**\n     * Whether there are any active shadow maps this frame.\n     * @type {Boolean}\n     */\n    shadowsEnabled: true,\n\n    /**\n     * Whether there are any active shadow maps that originate from light sources. Does not\n     * include shadow maps that are used for analytical purposes.\n     */\n    lightShadowsEnabled: true,\n\n    /**\n     * All shadow maps that are enabled this frame.\n     */\n    shadowMaps: [],\n\n    /**\n     * Shadow maps that originate from light sources. Does not include shadow maps that are used for\n     * analytical purposes. Only these shadow maps will be used to generate receive shadows shaders.\n     */\n    lightShadowMaps: [],\n\n    /**\n     * The near plane of the scene's frustum commands. Used for fitting cascaded shadow maps.\n     * @type {Number}\n     */\n    nearPlane: 1.0,\n\n    /**\n     * The far plane of the scene's frustum commands. Used for fitting cascaded shadow maps.\n     * @type {Number}\n     */\n    farPlane: 5000.0,\n\n    /**\n     * The size of the bounding volume that is closest to the camera. This is used to place more shadow detail near the object.\n     * @type {Number}\n     */\n    closestObjectSize: 1000.0,\n\n    /**\n     * The time when a shadow map was last dirty\n     * @type {Number}\n     */\n    lastDirtyTime: 0,\n\n    /**\n     * Whether the shadows maps are out of view this frame\n     * @type {Boolean}\n     */\n    outOfView: true,\n  };\n\n  /**\n   * The position of the splitter to use when rendering imagery layers on either side of a splitter.\n   * This value should be between 0.0 and 1.0 with 0 being the far left of the viewport and 1 being the far right of the viewport.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.imagerySplitPosition = 0.0;\n\n  /**\n   * Distances to the near and far planes of the camera frustums\n   * @type {Number[]}\n   * @default []\n   */\n  this.frustumSplits = [];\n\n  /**\n   * The current scene background color\n   *\n   * @type {Color}\n   */\n  this.backgroundColor = undefined;\n\n  /**\n   * The light used to shade the scene.\n   *\n   * @type {Light}\n   */\n  this.light = undefined;\n\n  /**\n   * The distance from the camera at which to disable the depth test of billboards, labels and points\n   * to, for example, prevent clipping against terrain. When set to zero, the depth test should always\n   * be applied. When less than zero, the depth test should never be applied.\n   * @type {Number}\n   */\n  this.minimumDisableDepthTestDistance = undefined;\n\n  /**\n   * When <code>false</code>, 3D Tiles will render normally. When <code>true</code>, classified 3D Tile geometry will render normally and\n   * unclassified 3D Tile geometry will render with the color multiplied with {@link FrameState#invertClassificationColor}.\n   * @type {Boolean}\n   * @default false\n   */\n  this.invertClassification = false;\n\n  /**\n   * The highlight color of unclassified 3D Tile geometry when {@link FrameState#invertClassification} is <code>true</code>.\n   * @type {Color}\n   */\n  this.invertClassificationColor = undefined;\n\n  /**\n   * Whether or not the scene uses a logarithmic depth buffer.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.useLogDepth = false;\n\n  /**\n   * Additional state used to update 3D Tilesets.\n   *\n   * @type {Cesium3DTilePassState}\n   */\n  this.tilesetPassState = undefined;\n\n  /**\n   * The minimum terrain height out of all rendered terrain tiles. Used to improve culling for objects underneath the ellipsoid but above terrain.\n   *\n   * @type {Number}\n   * @default 0.0\n   */\n  this.minimumTerrainHeight = 0.0;\n}\n\n/**\n * A function that will be called at the end of the frame.\n *\n * @callback FrameState~AfterRenderCallback\n */\nexport default FrameState;\n"]},"metadata":{},"sourceType":"module"}