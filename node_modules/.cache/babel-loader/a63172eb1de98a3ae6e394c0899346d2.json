{"ast":null,"code":"import when from \"../ThirdParty/when.js\";\nimport Check from \"./Check.js\";\nimport CompressedTextureBuffer from \"./CompressedTextureBuffer.js\";\nimport defined from \"./defined.js\";\nimport PixelFormat from \"./PixelFormat.js\";\nimport Resource from \"./Resource.js\";\nimport RuntimeError from \"./RuntimeError.js\";\nimport WebGLConstants from \"./WebGLConstants.js\";\n/**\n * Asynchronously loads and parses the given URL to a KTX file or parses the raw binary data of a KTX file.\n * Returns a promise that will resolve to an object containing the image buffer, width, height and format once loaded,\n * or reject if the URL failed to load or failed to parse the data.  The data is loaded\n * using XMLHttpRequest, which means that in order to make requests to another origin,\n * the server must have Cross-Origin Resource Sharing (CORS) headers enabled.\n * <p>\n * The following are part of the KTX format specification but are not supported:\n * <ul>\n *     <li>Big-endian files</li>\n *     <li>Metadata</li>\n *     <li>3D textures</li>\n *     <li>Texture Arrays</li>\n *     <li>Cubemaps</li>\n *     <li>Mipmaps</li>\n * </ul>\n * </p>\n *\n * @exports loadKTX\n *\n * @param {Resource|String|ArrayBuffer} resourceOrUrlOrBuffer The URL of the binary data or an ArrayBuffer.\n * @returns {Promise.<CompressedTextureBuffer>|undefined} A promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\n *\n * @exception {RuntimeError} Invalid KTX file.\n * @exception {RuntimeError} File is the wrong endianness.\n * @exception {RuntimeError} glInternalFormat is not a valid format.\n * @exception {RuntimeError} glType must be zero when the texture is compressed.\n * @exception {RuntimeError} The type size for compressed textures must be 1.\n * @exception {RuntimeError} glFormat must be zero when the texture is compressed.\n * @exception {RuntimeError} Generating mipmaps for a compressed texture is unsupported.\n * @exception {RuntimeError} The base internal format must be the same as the format for uncompressed textures.\n * @exception {RuntimeError} 3D textures are not supported.\n * @exception {RuntimeError} Texture arrays are not supported.\n * @exception {RuntimeError} Cubemaps are not supported.\n *\n * @example\n * // load a single URL asynchronously\n * Cesium.loadKTX('some/url').then(function(ktxData) {\n *     var width = ktxData.width;\n *     var height = ktxData.height;\n *     var format = ktxData.internalFormat;\n *     var arrayBufferView = ktxData.bufferView;\n *     // use the data to create a texture\n * }).otherwise(function(error) {\n *     // an error occurred\n * });\n *\n * @see {@link https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/|KTX file format}\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\n */\n\nfunction loadKTX(resourceOrUrlOrBuffer) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"resourceOrUrlOrBuffer\", resourceOrUrlOrBuffer); //>>includeEnd('debug');\n\n  var loadPromise;\n\n  if (resourceOrUrlOrBuffer instanceof ArrayBuffer || ArrayBuffer.isView(resourceOrUrlOrBuffer)) {\n    loadPromise = when.resolve(resourceOrUrlOrBuffer);\n  } else {\n    var resource = Resource.createIfNeeded(resourceOrUrlOrBuffer);\n    loadPromise = resource.fetchArrayBuffer();\n  }\n\n  if (!defined(loadPromise)) {\n    return undefined;\n  }\n\n  return loadPromise.then(function (data) {\n    if (defined(data)) {\n      return parseKTX(data);\n    }\n  });\n}\n\nvar fileIdentifier = [0xab, 0x4b, 0x54, 0x58, 0x20, 0x31, 0x31, 0xbb, 0x0d, 0x0a, 0x1a, 0x0a];\nvar endiannessTest = 0x04030201;\nvar faceOrder = [\"positiveX\", \"negativeX\", \"positiveY\", \"negativeY\", \"positiveZ\", \"negativeZ\"];\nvar sizeOfUint32 = 4;\n\nfunction parseKTX(data) {\n  var byteBuffer = new Uint8Array(data);\n  var isKTX = true;\n  var i;\n\n  for (i = 0; i < fileIdentifier.length; ++i) {\n    if (fileIdentifier[i] !== byteBuffer[i]) {\n      isKTX = false;\n      break;\n    }\n  }\n\n  if (!isKTX) {\n    throw new RuntimeError(\"Invalid KTX file.\");\n  }\n\n  var view;\n  var byteOffset;\n\n  if (defined(data.buffer)) {\n    view = new DataView(data.buffer);\n    byteOffset = data.byteOffset;\n  } else {\n    view = new DataView(data);\n    byteOffset = 0;\n  }\n\n  byteOffset += 12; // skip identifier\n\n  var endianness = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  if (endianness !== endiannessTest) {\n    throw new RuntimeError(\"File is the wrong endianness.\");\n  }\n\n  var glType = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var glTypeSize = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var glFormat = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var glInternalFormat = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var glBaseInternalFormat = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var pixelWidth = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var pixelHeight = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var pixelDepth = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var numberOfArrayElements = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var numberOfFaces = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var numberOfMipmapLevels = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var bytesOfKeyValueByteSize = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32; // skip metadata\n\n  byteOffset += bytesOfKeyValueByteSize;\n  var imageSize = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var texture;\n\n  if (defined(data.buffer)) {\n    texture = new Uint8Array(data.buffer, byteOffset, imageSize);\n  } else {\n    texture = new Uint8Array(data, byteOffset, imageSize);\n  } // Some tools use a sized internal format.\n  // See table 2: https://www.opengl.org/sdk/docs/man/html/glTexImage2D.xhtml\n\n\n  if (glInternalFormat === WebGLConstants.RGB8) {\n    glInternalFormat = PixelFormat.RGB;\n  } else if (glInternalFormat === WebGLConstants.RGBA8) {\n    glInternalFormat = PixelFormat.RGBA;\n  }\n\n  if (!PixelFormat.validate(glInternalFormat)) {\n    throw new RuntimeError(\"glInternalFormat is not a valid format.\");\n  }\n\n  if (PixelFormat.isCompressedFormat(glInternalFormat)) {\n    if (glType !== 0) {\n      throw new RuntimeError(\"glType must be zero when the texture is compressed.\");\n    }\n\n    if (glTypeSize !== 1) {\n      throw new RuntimeError(\"The type size for compressed textures must be 1.\");\n    }\n\n    if (glFormat !== 0) {\n      throw new RuntimeError(\"glFormat must be zero when the texture is compressed.\");\n    }\n  } else if (glType !== WebGLConstants.UNSIGNED_BYTE) {\n    throw new RuntimeError(\"Only unsigned byte buffers are supported.\");\n  } else if (glBaseInternalFormat !== glFormat) {\n    throw new RuntimeError(\"The base internal format must be the same as the format for uncompressed textures.\");\n  }\n\n  if (pixelDepth !== 0) {\n    throw new RuntimeError(\"3D textures are unsupported.\");\n  }\n\n  if (numberOfArrayElements !== 0) {\n    throw new RuntimeError(\"Texture arrays are unsupported.\");\n  }\n\n  var offset = texture.byteOffset;\n  var mipmaps = new Array(numberOfMipmapLevels);\n\n  for (i = 0; i < numberOfMipmapLevels; ++i) {\n    var level = mipmaps[i] = {};\n\n    for (var j = 0; j < numberOfFaces; ++j) {\n      var width = pixelWidth >> i;\n      var height = pixelHeight >> i;\n      var levelSize = PixelFormat.isCompressedFormat(glInternalFormat) ? PixelFormat.compressedTextureSizeInBytes(glInternalFormat, width, height) : PixelFormat.textureSizeInBytes(glInternalFormat, glType, width, height);\n      var levelBuffer = new Uint8Array(texture.buffer, offset, levelSize);\n      level[faceOrder[j]] = new CompressedTextureBuffer(glInternalFormat, width, height, levelBuffer);\n      offset += levelSize;\n    }\n\n    offset += 3 - (offset + 3) % 4 + 4;\n  }\n\n  var result = mipmaps;\n\n  if (numberOfFaces === 1) {\n    for (i = 0; i < numberOfMipmapLevels; ++i) {\n      result[i] = result[i][faceOrder[0]];\n    }\n  }\n\n  if (numberOfMipmapLevels === 1) {\n    result = result[0];\n  }\n\n  return result;\n}\n\nexport default loadKTX;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/loadKTX.js"],"names":["when","Check","CompressedTextureBuffer","defined","PixelFormat","Resource","RuntimeError","WebGLConstants","loadKTX","resourceOrUrlOrBuffer","loadPromise","ArrayBuffer","isView","resolve","resource","createIfNeeded","fetchArrayBuffer","undefined","then","data","parseKTX","fileIdentifier","endiannessTest","faceOrder","sizeOfUint32","byteBuffer","Uint8Array","isKTX","i","length","view","byteOffset","buffer","DataView","endianness","getUint32","glType","glTypeSize","glFormat","glInternalFormat","glBaseInternalFormat","pixelWidth","pixelHeight","pixelDepth","numberOfArrayElements","numberOfFaces","numberOfMipmapLevels","bytesOfKeyValueByteSize","imageSize","texture","RGB8","RGB","RGBA8","RGBA","validate","isCompressedFormat","UNSIGNED_BYTE","offset","mipmaps","Array","level","j","width","height","levelSize","compressedTextureSizeInBytes","textureSizeInBytes","levelBuffer","result"],"mappings":"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","sourcesContent":["import when from \"../ThirdParty/when.js\";\nimport Check from \"./Check.js\";\nimport CompressedTextureBuffer from \"./CompressedTextureBuffer.js\";\nimport defined from \"./defined.js\";\nimport PixelFormat from \"./PixelFormat.js\";\nimport Resource from \"./Resource.js\";\nimport RuntimeError from \"./RuntimeError.js\";\nimport WebGLConstants from \"./WebGLConstants.js\";\n\n/**\n * Asynchronously loads and parses the given URL to a KTX file or parses the raw binary data of a KTX file.\n * Returns a promise that will resolve to an object containing the image buffer, width, height and format once loaded,\n * or reject if the URL failed to load or failed to parse the data.  The data is loaded\n * using XMLHttpRequest, which means that in order to make requests to another origin,\n * the server must have Cross-Origin Resource Sharing (CORS) headers enabled.\n * <p>\n * The following are part of the KTX format specification but are not supported:\n * <ul>\n *     <li>Big-endian files</li>\n *     <li>Metadata</li>\n *     <li>3D textures</li>\n *     <li>Texture Arrays</li>\n *     <li>Cubemaps</li>\n *     <li>Mipmaps</li>\n * </ul>\n * </p>\n *\n * @exports loadKTX\n *\n * @param {Resource|String|ArrayBuffer} resourceOrUrlOrBuffer The URL of the binary data or an ArrayBuffer.\n * @returns {Promise.<CompressedTextureBuffer>|undefined} A promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\n *\n * @exception {RuntimeError} Invalid KTX file.\n * @exception {RuntimeError} File is the wrong endianness.\n * @exception {RuntimeError} glInternalFormat is not a valid format.\n * @exception {RuntimeError} glType must be zero when the texture is compressed.\n * @exception {RuntimeError} The type size for compressed textures must be 1.\n * @exception {RuntimeError} glFormat must be zero when the texture is compressed.\n * @exception {RuntimeError} Generating mipmaps for a compressed texture is unsupported.\n * @exception {RuntimeError} The base internal format must be the same as the format for uncompressed textures.\n * @exception {RuntimeError} 3D textures are not supported.\n * @exception {RuntimeError} Texture arrays are not supported.\n * @exception {RuntimeError} Cubemaps are not supported.\n *\n * @example\n * // load a single URL asynchronously\n * Cesium.loadKTX('some/url').then(function(ktxData) {\n *     var width = ktxData.width;\n *     var height = ktxData.height;\n *     var format = ktxData.internalFormat;\n *     var arrayBufferView = ktxData.bufferView;\n *     // use the data to create a texture\n * }).otherwise(function(error) {\n *     // an error occurred\n * });\n *\n * @see {@link https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/|KTX file format}\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\n */\nfunction loadKTX(resourceOrUrlOrBuffer) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"resourceOrUrlOrBuffer\", resourceOrUrlOrBuffer);\n  //>>includeEnd('debug');\n\n  var loadPromise;\n  if (\n    resourceOrUrlOrBuffer instanceof ArrayBuffer ||\n    ArrayBuffer.isView(resourceOrUrlOrBuffer)\n  ) {\n    loadPromise = when.resolve(resourceOrUrlOrBuffer);\n  } else {\n    var resource = Resource.createIfNeeded(resourceOrUrlOrBuffer);\n    loadPromise = resource.fetchArrayBuffer();\n  }\n\n  if (!defined(loadPromise)) {\n    return undefined;\n  }\n\n  return loadPromise.then(function (data) {\n    if (defined(data)) {\n      return parseKTX(data);\n    }\n  });\n}\n\nvar fileIdentifier = [\n  0xab,\n  0x4b,\n  0x54,\n  0x58,\n  0x20,\n  0x31,\n  0x31,\n  0xbb,\n  0x0d,\n  0x0a,\n  0x1a,\n  0x0a,\n];\nvar endiannessTest = 0x04030201;\nvar faceOrder = [\n  \"positiveX\",\n  \"negativeX\",\n  \"positiveY\",\n  \"negativeY\",\n  \"positiveZ\",\n  \"negativeZ\",\n];\n\nvar sizeOfUint32 = 4;\n\nfunction parseKTX(data) {\n  var byteBuffer = new Uint8Array(data);\n\n  var isKTX = true;\n  var i;\n  for (i = 0; i < fileIdentifier.length; ++i) {\n    if (fileIdentifier[i] !== byteBuffer[i]) {\n      isKTX = false;\n      break;\n    }\n  }\n\n  if (!isKTX) {\n    throw new RuntimeError(\"Invalid KTX file.\");\n  }\n\n  var view;\n  var byteOffset;\n\n  if (defined(data.buffer)) {\n    view = new DataView(data.buffer);\n    byteOffset = data.byteOffset;\n  } else {\n    view = new DataView(data);\n    byteOffset = 0;\n  }\n\n  byteOffset += 12; // skip identifier\n\n  var endianness = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  if (endianness !== endiannessTest) {\n    throw new RuntimeError(\"File is the wrong endianness.\");\n  }\n\n  var glType = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var glTypeSize = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var glFormat = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var glInternalFormat = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var glBaseInternalFormat = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var pixelWidth = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var pixelHeight = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var pixelDepth = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var numberOfArrayElements = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var numberOfFaces = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var numberOfMipmapLevels = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var bytesOfKeyValueByteSize = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  // skip metadata\n  byteOffset += bytesOfKeyValueByteSize;\n\n  var imageSize = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  var texture;\n  if (defined(data.buffer)) {\n    texture = new Uint8Array(data.buffer, byteOffset, imageSize);\n  } else {\n    texture = new Uint8Array(data, byteOffset, imageSize);\n  }\n\n  // Some tools use a sized internal format.\n  // See table 2: https://www.opengl.org/sdk/docs/man/html/glTexImage2D.xhtml\n  if (glInternalFormat === WebGLConstants.RGB8) {\n    glInternalFormat = PixelFormat.RGB;\n  } else if (glInternalFormat === WebGLConstants.RGBA8) {\n    glInternalFormat = PixelFormat.RGBA;\n  }\n\n  if (!PixelFormat.validate(glInternalFormat)) {\n    throw new RuntimeError(\"glInternalFormat is not a valid format.\");\n  }\n\n  if (PixelFormat.isCompressedFormat(glInternalFormat)) {\n    if (glType !== 0) {\n      throw new RuntimeError(\n        \"glType must be zero when the texture is compressed.\"\n      );\n    }\n    if (glTypeSize !== 1) {\n      throw new RuntimeError(\n        \"The type size for compressed textures must be 1.\"\n      );\n    }\n    if (glFormat !== 0) {\n      throw new RuntimeError(\n        \"glFormat must be zero when the texture is compressed.\"\n      );\n    }\n  } else if (glType !== WebGLConstants.UNSIGNED_BYTE) {\n    throw new RuntimeError(\"Only unsigned byte buffers are supported.\");\n  } else if (glBaseInternalFormat !== glFormat) {\n    throw new RuntimeError(\n      \"The base internal format must be the same as the format for uncompressed textures.\"\n    );\n  }\n\n  if (pixelDepth !== 0) {\n    throw new RuntimeError(\"3D textures are unsupported.\");\n  }\n\n  if (numberOfArrayElements !== 0) {\n    throw new RuntimeError(\"Texture arrays are unsupported.\");\n  }\n\n  var offset = texture.byteOffset;\n  var mipmaps = new Array(numberOfMipmapLevels);\n  for (i = 0; i < numberOfMipmapLevels; ++i) {\n    var level = (mipmaps[i] = {});\n    for (var j = 0; j < numberOfFaces; ++j) {\n      var width = pixelWidth >> i;\n      var height = pixelHeight >> i;\n      var levelSize = PixelFormat.isCompressedFormat(glInternalFormat)\n        ? PixelFormat.compressedTextureSizeInBytes(\n            glInternalFormat,\n            width,\n            height\n          )\n        : PixelFormat.textureSizeInBytes(\n            glInternalFormat,\n            glType,\n            width,\n            height\n          );\n      var levelBuffer = new Uint8Array(texture.buffer, offset, levelSize);\n      level[faceOrder[j]] = new CompressedTextureBuffer(\n        glInternalFormat,\n        width,\n        height,\n        levelBuffer\n      );\n      offset += levelSize;\n    }\n    offset += 3 - ((offset + 3) % 4) + 4;\n  }\n\n  var result = mipmaps;\n  if (numberOfFaces === 1) {\n    for (i = 0; i < numberOfMipmapLevels; ++i) {\n      result[i] = result[i][faceOrder[0]];\n    }\n  }\n  if (numberOfMipmapLevels === 1) {\n    result = result[0];\n  }\n\n  return result;\n}\nexport default loadKTX;\n"]},"metadata":{},"sourceType":"module"}