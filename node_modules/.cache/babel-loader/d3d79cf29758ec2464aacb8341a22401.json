{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nvar defaultSize = new Cartesian2(1.0, 1.0);\n/**\n * A particle emitted by a {@link ParticleSystem}.\n *\n * @alias Particle\n * @constructor\n *\n * @param {Object} options An object with the following properties:\n * @param {Number} [options.mass=1.0] The mass of the particle in kilograms.\n * @param {Cartesian3} [options.position=Cartesian3.ZERO] The initial position of the particle in world coordinates.\n * @param {Cartesian3} [options.velocity=Cartesian3.ZERO] The velocity vector of the particle in world coordinates.\n * @param {Number} [options.life=Number.MAX_VALUE] The life of the particle in seconds.\n * @param {Object} [options.image] The URI, HTMLImageElement, or HTMLCanvasElement to use for the billboard.\n * @param {Color} [options.startColor=Color.WHITE] The color of a particle when it is born.\n * @param {Color} [options.endColor=Color.WHITE] The color of a particle when it dies.\n * @param {Number} [options.startScale=1.0] The scale of the particle when it is born.\n * @param {Number} [options.endScale=1.0] The scale of the particle when it dies.\n * @param {Cartesian2} [options.imageSize=new Cartesian2(1.0, 1.0)] The dimensions, width by height, to scale the particle image in pixels.\n */\n\nfunction Particle(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  /**\n   * The mass of the particle in kilograms.\n   * @type {Number}\n   * @default 1.0\n   */\n\n  this.mass = defaultValue(options.mass, 1.0);\n  /**\n   * The positon of the particle in world coordinates.\n   * @type {Cartesian3}\n   * @default Cartesian3.ZERO\n   */\n\n  this.position = Cartesian3.clone(defaultValue(options.position, Cartesian3.ZERO));\n  /**\n   * The velocity of the particle in world coordinates.\n   * @type {Cartesian3}\n   * @default Cartesian3.ZERO\n   */\n\n  this.velocity = Cartesian3.clone(defaultValue(options.velocity, Cartesian3.ZERO));\n  /**\n   * The life of the particle in seconds.\n   * @type {Number}\n   * @default Number.MAX_VALUE\n   */\n\n  this.life = defaultValue(options.life, Number.MAX_VALUE);\n  /**\n   * The image to use for the particle.\n   * @type {Object}\n   * @default undefined\n   */\n\n  this.image = options.image;\n  /**\n   * The color of the particle when it is born.\n   * @type {Color}\n   * @default Color.WHITE\n   */\n\n  this.startColor = Color.clone(defaultValue(options.startColor, Color.WHITE));\n  /**\n   * The color of the particle when it dies.\n   * @type {Color}\n   * @default Color.WHITE\n   */\n\n  this.endColor = Color.clone(defaultValue(options.endColor, Color.WHITE));\n  /**\n   * the scale of the particle when it is born.\n   * @type {Number}\n   * @default 1.0\n   */\n\n  this.startScale = defaultValue(options.startScale, 1.0);\n  /**\n   * The scale of the particle when it dies.\n   * @type {Number}\n   * @default 1.0\n   */\n\n  this.endScale = defaultValue(options.endScale, 1.0);\n  /**\n   * The dimensions, width by height, to scale the particle image in pixels.\n   * @type {Cartesian2}\n   * @default new Cartesian(1.0, 1.0)\n   */\n\n  this.imageSize = Cartesian2.clone(defaultValue(options.imageSize, defaultSize));\n  this._age = 0.0;\n  this._normalizedAge = 0.0; // used by ParticleSystem\n\n  this._billboard = undefined;\n}\n\nObject.defineProperties(Particle.prototype, {\n  /**\n   * Gets the age of the particle in seconds.\n   * @memberof Particle.prototype\n   * @type {Number}\n   */\n  age: {\n    get: function () {\n      return this._age;\n    }\n  },\n\n  /**\n   * Gets the age normalized to a value in the range [0.0, 1.0].\n   * @memberof Particle.prototype\n   * @type {Number}\n   */\n  normalizedAge: {\n    get: function () {\n      return this._normalizedAge;\n    }\n  }\n});\nvar deltaScratch = new Cartesian3();\n/**\n * @private\n */\n\nParticle.prototype.update = function (dt, particleUpdateFunction) {\n  // Apply the velocity\n  Cartesian3.multiplyByScalar(this.velocity, dt, deltaScratch);\n  Cartesian3.add(this.position, deltaScratch, this.position); // Update any forces.\n\n  if (defined(particleUpdateFunction)) {\n    particleUpdateFunction(this, dt);\n  } // Age the particle\n\n\n  this._age += dt; // Compute the normalized age.\n\n  if (this.life === Number.MAX_VALUE) {\n    this._normalizedAge = 0.0;\n  } else {\n    this._normalizedAge = this._age / this.life;\n  } // If this particle is older than it's lifespan then die.\n\n\n  return this._age <= this.life;\n};\n\nexport default Particle;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/Particle.js"],"names":["Cartesian2","Cartesian3","Color","defaultValue","defined","defaultSize","Particle","options","EMPTY_OBJECT","mass","position","clone","ZERO","velocity","life","Number","MAX_VALUE","image","startColor","WHITE","endColor","startScale","endScale","imageSize","_age","_normalizedAge","_billboard","undefined","Object","defineProperties","prototype","age","get","normalizedAge","deltaScratch","update","dt","particleUpdateFunction","multiplyByScalar","add"],"mappings":"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","sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\n\nvar defaultSize = new Cartesian2(1.0, 1.0);\n\n/**\n * A particle emitted by a {@link ParticleSystem}.\n *\n * @alias Particle\n * @constructor\n *\n * @param {Object} options An object with the following properties:\n * @param {Number} [options.mass=1.0] The mass of the particle in kilograms.\n * @param {Cartesian3} [options.position=Cartesian3.ZERO] The initial position of the particle in world coordinates.\n * @param {Cartesian3} [options.velocity=Cartesian3.ZERO] The velocity vector of the particle in world coordinates.\n * @param {Number} [options.life=Number.MAX_VALUE] The life of the particle in seconds.\n * @param {Object} [options.image] The URI, HTMLImageElement, or HTMLCanvasElement to use for the billboard.\n * @param {Color} [options.startColor=Color.WHITE] The color of a particle when it is born.\n * @param {Color} [options.endColor=Color.WHITE] The color of a particle when it dies.\n * @param {Number} [options.startScale=1.0] The scale of the particle when it is born.\n * @param {Number} [options.endScale=1.0] The scale of the particle when it dies.\n * @param {Cartesian2} [options.imageSize=new Cartesian2(1.0, 1.0)] The dimensions, width by height, to scale the particle image in pixels.\n */\nfunction Particle(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  /**\n   * The mass of the particle in kilograms.\n   * @type {Number}\n   * @default 1.0\n   */\n  this.mass = defaultValue(options.mass, 1.0);\n  /**\n   * The positon of the particle in world coordinates.\n   * @type {Cartesian3}\n   * @default Cartesian3.ZERO\n   */\n  this.position = Cartesian3.clone(\n    defaultValue(options.position, Cartesian3.ZERO)\n  );\n  /**\n   * The velocity of the particle in world coordinates.\n   * @type {Cartesian3}\n   * @default Cartesian3.ZERO\n   */\n  this.velocity = Cartesian3.clone(\n    defaultValue(options.velocity, Cartesian3.ZERO)\n  );\n  /**\n   * The life of the particle in seconds.\n   * @type {Number}\n   * @default Number.MAX_VALUE\n   */\n  this.life = defaultValue(options.life, Number.MAX_VALUE);\n  /**\n   * The image to use for the particle.\n   * @type {Object}\n   * @default undefined\n   */\n  this.image = options.image;\n  /**\n   * The color of the particle when it is born.\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  this.startColor = Color.clone(defaultValue(options.startColor, Color.WHITE));\n  /**\n   * The color of the particle when it dies.\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  this.endColor = Color.clone(defaultValue(options.endColor, Color.WHITE));\n  /**\n   * the scale of the particle when it is born.\n   * @type {Number}\n   * @default 1.0\n   */\n  this.startScale = defaultValue(options.startScale, 1.0);\n  /**\n   * The scale of the particle when it dies.\n   * @type {Number}\n   * @default 1.0\n   */\n  this.endScale = defaultValue(options.endScale, 1.0);\n  /**\n   * The dimensions, width by height, to scale the particle image in pixels.\n   * @type {Cartesian2}\n   * @default new Cartesian(1.0, 1.0)\n   */\n  this.imageSize = Cartesian2.clone(\n    defaultValue(options.imageSize, defaultSize)\n  );\n\n  this._age = 0.0;\n  this._normalizedAge = 0.0;\n\n  // used by ParticleSystem\n  this._billboard = undefined;\n}\n\nObject.defineProperties(Particle.prototype, {\n  /**\n   * Gets the age of the particle in seconds.\n   * @memberof Particle.prototype\n   * @type {Number}\n   */\n  age: {\n    get: function () {\n      return this._age;\n    },\n  },\n  /**\n   * Gets the age normalized to a value in the range [0.0, 1.0].\n   * @memberof Particle.prototype\n   * @type {Number}\n   */\n  normalizedAge: {\n    get: function () {\n      return this._normalizedAge;\n    },\n  },\n});\n\nvar deltaScratch = new Cartesian3();\n\n/**\n * @private\n */\nParticle.prototype.update = function (dt, particleUpdateFunction) {\n  // Apply the velocity\n  Cartesian3.multiplyByScalar(this.velocity, dt, deltaScratch);\n  Cartesian3.add(this.position, deltaScratch, this.position);\n\n  // Update any forces.\n  if (defined(particleUpdateFunction)) {\n    particleUpdateFunction(this, dt);\n  }\n\n  // Age the particle\n  this._age += dt;\n\n  // Compute the normalized age.\n  if (this.life === Number.MAX_VALUE) {\n    this._normalizedAge = 0.0;\n  } else {\n    this._normalizedAge = this._age / this.life;\n  }\n\n  // If this particle is older than it's lifespan then die.\n  return this._age <= this.life;\n};\nexport default Particle;\n"]},"metadata":{},"sourceType":"module"}