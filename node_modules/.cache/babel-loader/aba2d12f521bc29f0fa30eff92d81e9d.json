{"ast":null,"code":"import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport GroundPolylinePrimitive from \"../Scene/GroundPolylinePrimitive.js\";\nimport PolylineColorAppearance from \"../Scene/PolylineColorAppearance.js\";\nimport PolylineMaterialAppearance from \"../Scene/PolylineMaterialAppearance.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport MaterialProperty from \"./MaterialProperty.js\";\nimport Property from \"./Property.js\";\nvar scratchColor = new Color();\nvar distanceDisplayConditionScratch = new DistanceDisplayCondition();\nvar defaultDistanceDisplayCondition = new DistanceDisplayCondition(); // Encapsulates a Primitive and all the entities that it represents.\n\nfunction Batch(orderedGroundPrimitives, classificationType, materialProperty, zIndex, asynchronous) {\n  var appearanceType;\n\n  if (materialProperty instanceof ColorMaterialProperty) {\n    appearanceType = PolylineColorAppearance;\n  } else {\n    appearanceType = PolylineMaterialAppearance;\n  }\n\n  this.orderedGroundPrimitives = orderedGroundPrimitives; // scene level primitive collection\n\n  this.classificationType = classificationType;\n  this.appearanceType = appearanceType;\n  this.materialProperty = materialProperty;\n  this.updaters = new AssociativeArray();\n  this.createPrimitive = true;\n  this.primitive = undefined; // a GroundPolylinePrimitive encapsulating all the entities\n\n  this.oldPrimitive = undefined;\n  this.geometry = new AssociativeArray();\n  this.material = undefined;\n  this.updatersWithAttributes = new AssociativeArray();\n  this.attributes = new AssociativeArray();\n  this.invalidated = false;\n  this.removeMaterialSubscription = materialProperty.definitionChanged.addEventListener(Batch.prototype.onMaterialChanged, this);\n  this.subscriptions = new AssociativeArray();\n  this.showsUpdated = new AssociativeArray();\n  this.zIndex = zIndex;\n  this._asynchronous = asynchronous;\n}\n\nBatch.prototype.onMaterialChanged = function () {\n  this.invalidated = true;\n}; // Check if the given updater's material is compatible with this batch\n\n\nBatch.prototype.isMaterial = function (updater) {\n  var material = this.materialProperty;\n  var updaterMaterial = updater.fillMaterialProperty;\n\n  if (updaterMaterial === material || updaterMaterial instanceof ColorMaterialProperty && material instanceof ColorMaterialProperty) {\n    return true;\n  }\n\n  return defined(material) && material.equals(updaterMaterial);\n};\n\nBatch.prototype.add = function (time, updater, geometryInstance) {\n  var id = updater.id;\n  this.updaters.set(id, updater);\n  this.geometry.set(id, geometryInstance); // Updaters with dynamic attributes must be tracked separately, may exit the batch\n\n  if (!updater.hasConstantFill || !updater.fillMaterialProperty.isConstant || !Property.isConstant(updater.distanceDisplayConditionProperty)) {\n    this.updatersWithAttributes.set(id, updater);\n  } else {\n    var that = this; // Listen for show changes. These will be synchronized in updateShows.\n\n    this.subscriptions.set(id, updater.entity.definitionChanged.addEventListener(function (entity, propertyName, newValue, oldValue) {\n      if (propertyName === \"isShowing\") {\n        that.showsUpdated.set(updater.id, updater);\n      }\n    }));\n  }\n\n  this.createPrimitive = true;\n};\n\nBatch.prototype.remove = function (updater) {\n  var id = updater.id;\n  this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n\n  if (this.updaters.remove(id)) {\n    this.updatersWithAttributes.remove(id);\n    var unsubscribe = this.subscriptions.get(id);\n\n    if (defined(unsubscribe)) {\n      unsubscribe();\n      this.subscriptions.remove(id);\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nBatch.prototype.update = function (time) {\n  var isUpdated = true;\n  var primitive = this.primitive;\n  var orderedGroundPrimitives = this.orderedGroundPrimitives;\n  var geometries = this.geometry.values;\n  var i;\n\n  if (this.createPrimitive) {\n    var geometriesLength = geometries.length;\n\n    if (geometriesLength > 0) {\n      if (defined(primitive)) {\n        // Keep a handle to the old primitive so it can be removed when the updated version is ready.\n        if (!defined(this.oldPrimitive)) {\n          this.oldPrimitive = primitive;\n        } else {\n          // For if the new primitive changes again before it is ready.\n          orderedGroundPrimitives.remove(primitive);\n        }\n      }\n\n      primitive = new GroundPolylinePrimitive({\n        show: false,\n        asynchronous: this._asynchronous,\n        geometryInstances: geometries.slice(),\n        appearance: new this.appearanceType(),\n        classificationType: this.classificationType\n      });\n\n      if (this.appearanceType === PolylineMaterialAppearance) {\n        this.material = MaterialProperty.getValue(time, this.materialProperty, this.material);\n        primitive.appearance.material = this.material;\n      }\n\n      orderedGroundPrimitives.add(primitive, this.zIndex);\n      isUpdated = false;\n    } else {\n      if (defined(primitive)) {\n        orderedGroundPrimitives.remove(primitive);\n        primitive = undefined;\n      }\n\n      var oldPrimitive = this.oldPrimitive;\n\n      if (defined(oldPrimitive)) {\n        orderedGroundPrimitives.remove(oldPrimitive);\n        this.oldPrimitive = undefined;\n      }\n    }\n\n    this.attributes.removeAll();\n    this.primitive = primitive;\n    this.createPrimitive = false;\n  } else if (defined(primitive) && primitive.ready) {\n    primitive.show = true;\n\n    if (defined(this.oldPrimitive)) {\n      orderedGroundPrimitives.remove(this.oldPrimitive);\n      this.oldPrimitive = undefined;\n    }\n\n    if (this.appearanceType === PolylineMaterialAppearance) {\n      this.material = MaterialProperty.getValue(time, this.materialProperty, this.material);\n      this.primitive.appearance.material = this.material;\n    }\n\n    var updatersWithAttributes = this.updatersWithAttributes.values;\n    var length = updatersWithAttributes.length;\n\n    for (i = 0; i < length; i++) {\n      var updater = updatersWithAttributes[i];\n      var entity = updater.entity;\n      var instance = this.geometry.get(updater.id);\n      var attributes = this.attributes.get(instance.id.id);\n\n      if (!defined(attributes)) {\n        attributes = primitive.getGeometryInstanceAttributes(instance.id);\n        this.attributes.set(instance.id.id, attributes);\n      }\n\n      if (!updater.fillMaterialProperty.isConstant) {\n        var colorProperty = updater.fillMaterialProperty.color;\n        var resultColor = Property.getValueOrDefault(colorProperty, time, Color.WHITE, scratchColor);\n\n        if (!Color.equals(attributes._lastColor, resultColor)) {\n          attributes._lastColor = Color.clone(resultColor, attributes._lastColor);\n          attributes.color = ColorGeometryInstanceAttribute.toValue(resultColor, attributes.color);\n        }\n      }\n\n      var show = entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n      var currentShow = attributes.show[0] === 1;\n\n      if (show !== currentShow) {\n        attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n      }\n\n      var distanceDisplayConditionProperty = updater.distanceDisplayConditionProperty;\n\n      if (!Property.isConstant(distanceDisplayConditionProperty)) {\n        var distanceDisplayCondition = Property.getValueOrDefault(distanceDisplayConditionProperty, time, defaultDistanceDisplayCondition, distanceDisplayConditionScratch);\n\n        if (!DistanceDisplayCondition.equals(distanceDisplayCondition, attributes._lastDistanceDisplayCondition)) {\n          attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition, attributes._lastDistanceDisplayCondition);\n          attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n        }\n      }\n    }\n\n    this.updateShows(primitive);\n  } else if (defined(primitive) && !primitive.ready) {\n    isUpdated = false;\n  }\n\n  return isUpdated;\n};\n\nBatch.prototype.updateShows = function (primitive) {\n  var showsUpdated = this.showsUpdated.values;\n  var length = showsUpdated.length;\n\n  for (var i = 0; i < length; i++) {\n    var updater = showsUpdated[i];\n    var entity = updater.entity;\n    var instance = this.geometry.get(updater.id);\n    var attributes = this.attributes.get(instance.id.id);\n\n    if (!defined(attributes)) {\n      attributes = primitive.getGeometryInstanceAttributes(instance.id);\n      this.attributes.set(instance.id.id, attributes);\n    }\n\n    var show = entity.isShowing;\n    var currentShow = attributes.show[0] === 1;\n\n    if (show !== currentShow) {\n      attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n      instance.attributes.show.value[0] = attributes.show[0];\n    }\n  }\n\n  this.showsUpdated.removeAll();\n};\n\nBatch.prototype.contains = function (updater) {\n  return this.updaters.contains(updater.id);\n};\n\nBatch.prototype.getBoundingSphere = function (updater, result) {\n  var primitive = this.primitive;\n\n  if (!primitive.ready) {\n    return BoundingSphereState.PENDING;\n  }\n\n  var attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n\n  if (!defined(attributes) || !defined(attributes.boundingSphere) || defined(attributes.show) && attributes.show[0] === 0) {\n    return BoundingSphereState.FAILED;\n  }\n\n  attributes.boundingSphere.clone(result);\n  return BoundingSphereState.DONE;\n};\n\nBatch.prototype.destroy = function () {\n  var primitive = this.primitive;\n  var orderedGroundPrimitives = this.orderedGroundPrimitives;\n\n  if (defined(primitive)) {\n    orderedGroundPrimitives.remove(primitive);\n  }\n\n  var oldPrimitive = this.oldPrimitive;\n\n  if (defined(oldPrimitive)) {\n    orderedGroundPrimitives.remove(oldPrimitive);\n  }\n\n  this.removeMaterialSubscription();\n};\n/**\n * @private\n */\n\n\nfunction StaticGroundPolylinePerMaterialBatch(orderedGroundPrimitives, classificationType, asynchronous) {\n  this._items = [];\n  this._orderedGroundPrimitives = orderedGroundPrimitives;\n  this._classificationType = classificationType;\n  this._asynchronous = defaultValue(asynchronous, true);\n}\n\nStaticGroundPolylinePerMaterialBatch.prototype.add = function (time, updater) {\n  var items = this._items;\n  var length = items.length;\n  var geometryInstance = updater.createFillGeometryInstance(time);\n  var zIndex = Property.getValueOrDefault(updater.zIndex, 0); // Check if the Entity represented by the updater has the same material or a material representable with per-instance color.\n\n  for (var i = 0; i < length; ++i) {\n    var item = items[i];\n\n    if (item.isMaterial(updater) && item.zIndex === zIndex) {\n      item.add(time, updater, geometryInstance);\n      return;\n    }\n  } // If a compatible batch wasn't found, create a new batch.\n\n\n  var batch = new Batch(this._orderedGroundPrimitives, this._classificationType, updater.fillMaterialProperty, zIndex, this._asynchronous);\n  batch.add(time, updater, geometryInstance);\n  items.push(batch);\n};\n\nStaticGroundPolylinePerMaterialBatch.prototype.remove = function (updater) {\n  var items = this._items;\n  var length = items.length;\n\n  for (var i = length - 1; i >= 0; i--) {\n    var item = items[i];\n\n    if (item.remove(updater)) {\n      if (item.updaters.length === 0) {\n        items.splice(i, 1);\n        item.destroy();\n      }\n\n      break;\n    }\n  }\n};\n\nStaticGroundPolylinePerMaterialBatch.prototype.update = function (time) {\n  var i;\n  var items = this._items;\n  var length = items.length;\n\n  for (i = length - 1; i >= 0; i--) {\n    var item = items[i];\n\n    if (item.invalidated) {\n      items.splice(i, 1);\n      var updaters = item.updaters.values;\n      var updatersLength = updaters.length;\n\n      for (var h = 0; h < updatersLength; h++) {\n        this.add(time, updaters[h]);\n      }\n\n      item.destroy();\n    }\n  }\n\n  var isUpdated = true;\n\n  for (i = 0; i < items.length; i++) {\n    isUpdated = items[i].update(time) && isUpdated;\n  }\n\n  return isUpdated;\n};\n\nStaticGroundPolylinePerMaterialBatch.prototype.getBoundingSphere = function (updater, result) {\n  var items = this._items;\n  var length = items.length;\n\n  for (var i = 0; i < length; i++) {\n    var item = items[i];\n\n    if (item.contains(updater)) {\n      return item.getBoundingSphere(updater, result);\n    }\n  }\n\n  return BoundingSphereState.FAILED;\n};\n\nStaticGroundPolylinePerMaterialBatch.prototype.removeAllPrimitives = function () {\n  var items = this._items;\n  var length = items.length;\n\n  for (var i = 0; i < length; i++) {\n    items[i].destroy();\n  }\n\n  this._items.length = 0;\n};\n\nexport default StaticGroundPolylinePerMaterialBatch;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/DataSources/StaticGroundPolylinePerMaterialBatch.js"],"names":["AssociativeArray","Color","ColorGeometryInstanceAttribute","defaultValue","defined","DistanceDisplayCondition","DistanceDisplayConditionGeometryInstanceAttribute","ShowGeometryInstanceAttribute","GroundPolylinePrimitive","PolylineColorAppearance","PolylineMaterialAppearance","BoundingSphereState","ColorMaterialProperty","MaterialProperty","Property","scratchColor","distanceDisplayConditionScratch","defaultDistanceDisplayCondition","Batch","orderedGroundPrimitives","classificationType","materialProperty","zIndex","asynchronous","appearanceType","updaters","createPrimitive","primitive","undefined","oldPrimitive","geometry","material","updatersWithAttributes","attributes","invalidated","removeMaterialSubscription","definitionChanged","addEventListener","prototype","onMaterialChanged","subscriptions","showsUpdated","_asynchronous","isMaterial","updater","updaterMaterial","fillMaterialProperty","equals","add","time","geometryInstance","id","set","hasConstantFill","isConstant","distanceDisplayConditionProperty","that","entity","propertyName","newValue","oldValue","remove","unsubscribe","get","update","isUpdated","geometries","values","i","geometriesLength","length","show","geometryInstances","slice","appearance","getValue","removeAll","ready","instance","getGeometryInstanceAttributes","colorProperty","color","resultColor","getValueOrDefault","WHITE","_lastColor","clone","toValue","isShowing","isFilled","currentShow","distanceDisplayCondition","_lastDistanceDisplayCondition","updateShows","value","contains","getBoundingSphere","result","PENDING","boundingSphere","FAILED","DONE","destroy","StaticGroundPolylinePerMaterialBatch","_items","_orderedGroundPrimitives","_classificationType","items","createFillGeometryInstance","item","batch","push","splice","updatersLength","h","removeAllPrimitives"],"mappings":"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","sourcesContent":["import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport GroundPolylinePrimitive from \"../Scene/GroundPolylinePrimitive.js\";\nimport PolylineColorAppearance from \"../Scene/PolylineColorAppearance.js\";\nimport PolylineMaterialAppearance from \"../Scene/PolylineMaterialAppearance.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport MaterialProperty from \"./MaterialProperty.js\";\nimport Property from \"./Property.js\";\n\nvar scratchColor = new Color();\nvar distanceDisplayConditionScratch = new DistanceDisplayCondition();\nvar defaultDistanceDisplayCondition = new DistanceDisplayCondition();\n\n// Encapsulates a Primitive and all the entities that it represents.\nfunction Batch(\n  orderedGroundPrimitives,\n  classificationType,\n  materialProperty,\n  zIndex,\n  asynchronous\n) {\n  var appearanceType;\n  if (materialProperty instanceof ColorMaterialProperty) {\n    appearanceType = PolylineColorAppearance;\n  } else {\n    appearanceType = PolylineMaterialAppearance;\n  }\n\n  this.orderedGroundPrimitives = orderedGroundPrimitives; // scene level primitive collection\n  this.classificationType = classificationType;\n  this.appearanceType = appearanceType;\n  this.materialProperty = materialProperty;\n  this.updaters = new AssociativeArray();\n  this.createPrimitive = true;\n  this.primitive = undefined; // a GroundPolylinePrimitive encapsulating all the entities\n  this.oldPrimitive = undefined;\n  this.geometry = new AssociativeArray();\n  this.material = undefined;\n  this.updatersWithAttributes = new AssociativeArray();\n  this.attributes = new AssociativeArray();\n  this.invalidated = false;\n  this.removeMaterialSubscription = materialProperty.definitionChanged.addEventListener(\n    Batch.prototype.onMaterialChanged,\n    this\n  );\n  this.subscriptions = new AssociativeArray();\n  this.showsUpdated = new AssociativeArray();\n  this.zIndex = zIndex;\n\n  this._asynchronous = asynchronous;\n}\n\nBatch.prototype.onMaterialChanged = function () {\n  this.invalidated = true;\n};\n\n// Check if the given updater's material is compatible with this batch\nBatch.prototype.isMaterial = function (updater) {\n  var material = this.materialProperty;\n  var updaterMaterial = updater.fillMaterialProperty;\n\n  if (\n    updaterMaterial === material ||\n    (updaterMaterial instanceof ColorMaterialProperty &&\n      material instanceof ColorMaterialProperty)\n  ) {\n    return true;\n  }\n  return defined(material) && material.equals(updaterMaterial);\n};\n\nBatch.prototype.add = function (time, updater, geometryInstance) {\n  var id = updater.id;\n  this.updaters.set(id, updater);\n  this.geometry.set(id, geometryInstance);\n  // Updaters with dynamic attributes must be tracked separately, may exit the batch\n  if (\n    !updater.hasConstantFill ||\n    !updater.fillMaterialProperty.isConstant ||\n    !Property.isConstant(updater.distanceDisplayConditionProperty)\n  ) {\n    this.updatersWithAttributes.set(id, updater);\n  } else {\n    var that = this;\n    // Listen for show changes. These will be synchronized in updateShows.\n    this.subscriptions.set(\n      id,\n      updater.entity.definitionChanged.addEventListener(function (\n        entity,\n        propertyName,\n        newValue,\n        oldValue\n      ) {\n        if (propertyName === \"isShowing\") {\n          that.showsUpdated.set(updater.id, updater);\n        }\n      })\n    );\n  }\n  this.createPrimitive = true;\n};\n\nBatch.prototype.remove = function (updater) {\n  var id = updater.id;\n  this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n  if (this.updaters.remove(id)) {\n    this.updatersWithAttributes.remove(id);\n    var unsubscribe = this.subscriptions.get(id);\n    if (defined(unsubscribe)) {\n      unsubscribe();\n      this.subscriptions.remove(id);\n    }\n    return true;\n  }\n  return false;\n};\n\nBatch.prototype.update = function (time) {\n  var isUpdated = true;\n  var primitive = this.primitive;\n  var orderedGroundPrimitives = this.orderedGroundPrimitives;\n  var geometries = this.geometry.values;\n  var i;\n\n  if (this.createPrimitive) {\n    var geometriesLength = geometries.length;\n    if (geometriesLength > 0) {\n      if (defined(primitive)) {\n        // Keep a handle to the old primitive so it can be removed when the updated version is ready.\n        if (!defined(this.oldPrimitive)) {\n          this.oldPrimitive = primitive;\n        } else {\n          // For if the new primitive changes again before it is ready.\n          orderedGroundPrimitives.remove(primitive);\n        }\n      }\n\n      primitive = new GroundPolylinePrimitive({\n        show: false,\n        asynchronous: this._asynchronous,\n        geometryInstances: geometries.slice(),\n        appearance: new this.appearanceType(),\n        classificationType: this.classificationType,\n      });\n\n      if (this.appearanceType === PolylineMaterialAppearance) {\n        this.material = MaterialProperty.getValue(\n          time,\n          this.materialProperty,\n          this.material\n        );\n        primitive.appearance.material = this.material;\n      }\n\n      orderedGroundPrimitives.add(primitive, this.zIndex);\n      isUpdated = false;\n    } else {\n      if (defined(primitive)) {\n        orderedGroundPrimitives.remove(primitive);\n        primitive = undefined;\n      }\n      var oldPrimitive = this.oldPrimitive;\n      if (defined(oldPrimitive)) {\n        orderedGroundPrimitives.remove(oldPrimitive);\n        this.oldPrimitive = undefined;\n      }\n    }\n\n    this.attributes.removeAll();\n    this.primitive = primitive;\n    this.createPrimitive = false;\n  } else if (defined(primitive) && primitive.ready) {\n    primitive.show = true;\n    if (defined(this.oldPrimitive)) {\n      orderedGroundPrimitives.remove(this.oldPrimitive);\n      this.oldPrimitive = undefined;\n    }\n\n    if (this.appearanceType === PolylineMaterialAppearance) {\n      this.material = MaterialProperty.getValue(\n        time,\n        this.materialProperty,\n        this.material\n      );\n      this.primitive.appearance.material = this.material;\n    }\n    var updatersWithAttributes = this.updatersWithAttributes.values;\n    var length = updatersWithAttributes.length;\n    for (i = 0; i < length; i++) {\n      var updater = updatersWithAttributes[i];\n      var entity = updater.entity;\n      var instance = this.geometry.get(updater.id);\n\n      var attributes = this.attributes.get(instance.id.id);\n      if (!defined(attributes)) {\n        attributes = primitive.getGeometryInstanceAttributes(instance.id);\n        this.attributes.set(instance.id.id, attributes);\n      }\n\n      if (!updater.fillMaterialProperty.isConstant) {\n        var colorProperty = updater.fillMaterialProperty.color;\n        var resultColor = Property.getValueOrDefault(\n          colorProperty,\n          time,\n          Color.WHITE,\n          scratchColor\n        );\n        if (!Color.equals(attributes._lastColor, resultColor)) {\n          attributes._lastColor = Color.clone(\n            resultColor,\n            attributes._lastColor\n          );\n          attributes.color = ColorGeometryInstanceAttribute.toValue(\n            resultColor,\n            attributes.color\n          );\n        }\n      }\n\n      var show =\n        entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n      var currentShow = attributes.show[0] === 1;\n      if (show !== currentShow) {\n        attributes.show = ShowGeometryInstanceAttribute.toValue(\n          show,\n          attributes.show\n        );\n      }\n\n      var distanceDisplayConditionProperty =\n        updater.distanceDisplayConditionProperty;\n      if (!Property.isConstant(distanceDisplayConditionProperty)) {\n        var distanceDisplayCondition = Property.getValueOrDefault(\n          distanceDisplayConditionProperty,\n          time,\n          defaultDistanceDisplayCondition,\n          distanceDisplayConditionScratch\n        );\n        if (\n          !DistanceDisplayCondition.equals(\n            distanceDisplayCondition,\n            attributes._lastDistanceDisplayCondition\n          )\n        ) {\n          attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(\n            distanceDisplayCondition,\n            attributes._lastDistanceDisplayCondition\n          );\n          attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(\n            distanceDisplayCondition,\n            attributes.distanceDisplayCondition\n          );\n        }\n      }\n    }\n\n    this.updateShows(primitive);\n  } else if (defined(primitive) && !primitive.ready) {\n    isUpdated = false;\n  }\n  return isUpdated;\n};\n\nBatch.prototype.updateShows = function (primitive) {\n  var showsUpdated = this.showsUpdated.values;\n  var length = showsUpdated.length;\n  for (var i = 0; i < length; i++) {\n    var updater = showsUpdated[i];\n    var entity = updater.entity;\n    var instance = this.geometry.get(updater.id);\n\n    var attributes = this.attributes.get(instance.id.id);\n    if (!defined(attributes)) {\n      attributes = primitive.getGeometryInstanceAttributes(instance.id);\n      this.attributes.set(instance.id.id, attributes);\n    }\n\n    var show = entity.isShowing;\n    var currentShow = attributes.show[0] === 1;\n    if (show !== currentShow) {\n      attributes.show = ShowGeometryInstanceAttribute.toValue(\n        show,\n        attributes.show\n      );\n      instance.attributes.show.value[0] = attributes.show[0];\n    }\n  }\n  this.showsUpdated.removeAll();\n};\n\nBatch.prototype.contains = function (updater) {\n  return this.updaters.contains(updater.id);\n};\n\nBatch.prototype.getBoundingSphere = function (updater, result) {\n  var primitive = this.primitive;\n  if (!primitive.ready) {\n    return BoundingSphereState.PENDING;\n  }\n  var attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n  if (\n    !defined(attributes) ||\n    !defined(attributes.boundingSphere) ||\n    (defined(attributes.show) && attributes.show[0] === 0)\n  ) {\n    return BoundingSphereState.FAILED;\n  }\n  attributes.boundingSphere.clone(result);\n  return BoundingSphereState.DONE;\n};\n\nBatch.prototype.destroy = function () {\n  var primitive = this.primitive;\n  var orderedGroundPrimitives = this.orderedGroundPrimitives;\n  if (defined(primitive)) {\n    orderedGroundPrimitives.remove(primitive);\n  }\n  var oldPrimitive = this.oldPrimitive;\n  if (defined(oldPrimitive)) {\n    orderedGroundPrimitives.remove(oldPrimitive);\n  }\n  this.removeMaterialSubscription();\n};\n\n/**\n * @private\n */\nfunction StaticGroundPolylinePerMaterialBatch(\n  orderedGroundPrimitives,\n  classificationType,\n  asynchronous\n) {\n  this._items = [];\n  this._orderedGroundPrimitives = orderedGroundPrimitives;\n  this._classificationType = classificationType;\n  this._asynchronous = defaultValue(asynchronous, true);\n}\n\nStaticGroundPolylinePerMaterialBatch.prototype.add = function (time, updater) {\n  var items = this._items;\n  var length = items.length;\n  var geometryInstance = updater.createFillGeometryInstance(time);\n  var zIndex = Property.getValueOrDefault(updater.zIndex, 0);\n  // Check if the Entity represented by the updater has the same material or a material representable with per-instance color.\n  for (var i = 0; i < length; ++i) {\n    var item = items[i];\n    if (item.isMaterial(updater) && item.zIndex === zIndex) {\n      item.add(time, updater, geometryInstance);\n      return;\n    }\n  }\n  // If a compatible batch wasn't found, create a new batch.\n  var batch = new Batch(\n    this._orderedGroundPrimitives,\n    this._classificationType,\n    updater.fillMaterialProperty,\n    zIndex,\n    this._asynchronous\n  );\n  batch.add(time, updater, geometryInstance);\n  items.push(batch);\n};\n\nStaticGroundPolylinePerMaterialBatch.prototype.remove = function (updater) {\n  var items = this._items;\n  var length = items.length;\n  for (var i = length - 1; i >= 0; i--) {\n    var item = items[i];\n    if (item.remove(updater)) {\n      if (item.updaters.length === 0) {\n        items.splice(i, 1);\n        item.destroy();\n      }\n      break;\n    }\n  }\n};\n\nStaticGroundPolylinePerMaterialBatch.prototype.update = function (time) {\n  var i;\n  var items = this._items;\n  var length = items.length;\n\n  for (i = length - 1; i >= 0; i--) {\n    var item = items[i];\n    if (item.invalidated) {\n      items.splice(i, 1);\n      var updaters = item.updaters.values;\n      var updatersLength = updaters.length;\n      for (var h = 0; h < updatersLength; h++) {\n        this.add(time, updaters[h]);\n      }\n      item.destroy();\n    }\n  }\n\n  var isUpdated = true;\n  for (i = 0; i < items.length; i++) {\n    isUpdated = items[i].update(time) && isUpdated;\n  }\n  return isUpdated;\n};\n\nStaticGroundPolylinePerMaterialBatch.prototype.getBoundingSphere = function (\n  updater,\n  result\n) {\n  var items = this._items;\n  var length = items.length;\n  for (var i = 0; i < length; i++) {\n    var item = items[i];\n    if (item.contains(updater)) {\n      return item.getBoundingSphere(updater, result);\n    }\n  }\n  return BoundingSphereState.FAILED;\n};\n\nStaticGroundPolylinePerMaterialBatch.prototype.removeAllPrimitives = function () {\n  var items = this._items;\n  var length = items.length;\n  for (var i = 0; i < length; i++) {\n    items[i].destroy();\n  }\n  this._items.length = 0;\n};\nexport default StaticGroundPolylinePerMaterialBatch;\n"]},"metadata":{},"sourceType":"module"}