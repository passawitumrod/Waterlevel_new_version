{"ast":null,"code":"import DeveloperError from \"./DeveloperError.js\";\n/**\n * @typedef {Object} GeocoderService~Result\n * @property {String} displayName The display name for a location\n * @property {Rectangle|Cartesian3} destination The bounding box for a location\n */\n\n/**\n * Provides geocoding through an external service. This type describes an interface and\n * is not intended to be used.\n * @alias GeocoderService\n * @constructor\n *\n * @see BingMapsGeocoderService\n * @see PeliasGeocoderService\n * @see OpenCageGeocoderService\n */\n\nfunction GeocoderService() {}\n/**\n * @function\n *\n * @param {String} query The query to be sent to the geocoder service\n * @param {GeocodeType} [type=GeocodeType.SEARCH] The type of geocode to perform.\n * @returns {Promise<GeocoderService~Result[]>}\n */\n\n\nGeocoderService.prototype.geocode = DeveloperError.throwInstantiationError;\nexport default GeocoderService;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/GeocoderService.js"],"names":["DeveloperError","GeocoderService","prototype","geocode","throwInstantiationError"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,qBAA3B;AAEA;;;;;;AAMA;;;;;;;;;;;AAUA,SAASC,eAAT,GAA2B,CAAE;AAE7B;;;;;;;;;AAOAA,eAAe,CAACC,SAAhB,CAA0BC,OAA1B,GAAoCH,cAAc,CAACI,uBAAnD;AACA,eAAeH,eAAf","sourcesContent":["import DeveloperError from \"./DeveloperError.js\";\n\n/**\n * @typedef {Object} GeocoderService~Result\n * @property {String} displayName The display name for a location\n * @property {Rectangle|Cartesian3} destination The bounding box for a location\n */\n\n/**\n * Provides geocoding through an external service. This type describes an interface and\n * is not intended to be used.\n * @alias GeocoderService\n * @constructor\n *\n * @see BingMapsGeocoderService\n * @see PeliasGeocoderService\n * @see OpenCageGeocoderService\n */\nfunction GeocoderService() {}\n\n/**\n * @function\n *\n * @param {String} query The query to be sent to the geocoder service\n * @param {GeocodeType} [type=GeocodeType.SEARCH] The type of geocode to perform.\n * @returns {Promise<GeocoderService~Result[]>}\n */\nGeocoderService.prototype.geocode = DeveloperError.throwInstantiationError;\nexport default GeocoderService;\n"]},"metadata":{},"sourceType":"module"}