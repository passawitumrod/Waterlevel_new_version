{"ast":null,"code":"import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport CesiumMath from \"./Math.js\";\nvar removeDuplicatesEpsilon = CesiumMath.EPSILON10;\n/**\n * Removes adjacent duplicate values in an array of values.\n *\n * @param {Array.<*>} [values] The array of values.\n * @param {Function} equalsEpsilon Function to compare values with an epsilon. Boolean equalsEpsilon(left, right, epsilon).\n * @param {Boolean} [wrapAround=false] Compare the last value in the array against the first value.\n * @returns {Array.<*>|undefined} A new array of values with no adjacent duplicate values or the input array if no duplicates were found.\n *\n * @example\n * // Returns [(1.0, 1.0, 1.0), (2.0, 2.0, 2.0), (3.0, 3.0, 3.0), (1.0, 1.0, 1.0)]\n * var values = [\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\n *     new Cesium.Cartesian3(2.0, 2.0, 2.0),\n *     new Cesium.Cartesian3(3.0, 3.0, 3.0),\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0)];\n * var nonDuplicatevalues = Cesium.PolylinePipeline.removeDuplicates(values, Cartesian3.equalsEpsilon);\n *\n * @example\n * // Returns [(1.0, 1.0, 1.0), (2.0, 2.0, 2.0), (3.0, 3.0, 3.0)]\n * var values = [\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\n *     new Cesium.Cartesian3(2.0, 2.0, 2.0),\n *     new Cesium.Cartesian3(3.0, 3.0, 3.0),\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0)];\n * var nonDuplicatevalues = Cesium.PolylinePipeline.removeDuplicates(values, Cartesian3.equalsEpsilon, true);\n *\n * @private\n */\n\nfunction arrayRemoveDuplicates(values, equalsEpsilon, wrapAround) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"equalsEpsilon\", equalsEpsilon); //>>includeEnd('debug');\n\n  if (!defined(values)) {\n    return undefined;\n  }\n\n  wrapAround = defaultValue(wrapAround, false);\n  var length = values.length;\n\n  if (length < 2) {\n    return values;\n  }\n\n  var i;\n  var v0;\n  var v1;\n\n  for (i = 1; i < length; ++i) {\n    v0 = values[i - 1];\n    v1 = values[i];\n\n    if (equalsEpsilon(v0, v1, removeDuplicatesEpsilon)) {\n      break;\n    }\n  }\n\n  if (i === length) {\n    if (wrapAround && equalsEpsilon(values[0], values[values.length - 1], removeDuplicatesEpsilon)) {\n      return values.slice(1);\n    }\n\n    return values;\n  }\n\n  var cleanedvalues = values.slice(0, i);\n\n  for (; i < length; ++i) {\n    // v0 is set by either the previous loop, or the previous clean point.\n    v1 = values[i];\n\n    if (!equalsEpsilon(v0, v1, removeDuplicatesEpsilon)) {\n      cleanedvalues.push(v1);\n      v0 = v1;\n    }\n  }\n\n  if (wrapAround && cleanedvalues.length > 1 && equalsEpsilon(cleanedvalues[0], cleanedvalues[cleanedvalues.length - 1], removeDuplicatesEpsilon)) {\n    cleanedvalues.shift();\n  }\n\n  return cleanedvalues;\n}\n\nexport default arrayRemoveDuplicates;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/arrayRemoveDuplicates.js"],"names":["Check","defaultValue","defined","CesiumMath","removeDuplicatesEpsilon","EPSILON10","arrayRemoveDuplicates","values","equalsEpsilon","wrapAround","undefined","length","i","v0","v1","slice","cleanedvalues","push","shift"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,UAAP,MAAuB,WAAvB;AAEA,IAAIC,uBAAuB,GAAGD,UAAU,CAACE,SAAzC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,SAASC,qBAAT,CAA+BC,MAA/B,EAAuCC,aAAvC,EAAsDC,UAAtD,EAAkE;AAChE;AACAT,EAAAA,KAAK,CAACE,OAAN,CAAc,eAAd,EAA+BM,aAA/B,EAFgE,CAGhE;;AAEA,MAAI,CAACN,OAAO,CAACK,MAAD,CAAZ,EAAsB;AACpB,WAAOG,SAAP;AACD;;AAEDD,EAAAA,UAAU,GAAGR,YAAY,CAACQ,UAAD,EAAa,KAAb,CAAzB;AAEA,MAAIE,MAAM,GAAGJ,MAAM,CAACI,MAApB;;AACA,MAAIA,MAAM,GAAG,CAAb,EAAgB;AACd,WAAOJ,MAAP;AACD;;AAED,MAAIK,CAAJ;AACA,MAAIC,EAAJ;AACA,MAAIC,EAAJ;;AAEA,OAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,MAAhB,EAAwB,EAAEC,CAA1B,EAA6B;AAC3BC,IAAAA,EAAE,GAAGN,MAAM,CAACK,CAAC,GAAG,CAAL,CAAX;AACAE,IAAAA,EAAE,GAAGP,MAAM,CAACK,CAAD,CAAX;;AACA,QAAIJ,aAAa,CAACK,EAAD,EAAKC,EAAL,EAASV,uBAAT,CAAjB,EAAoD;AAClD;AACD;AACF;;AAED,MAAIQ,CAAC,KAAKD,MAAV,EAAkB;AAChB,QACEF,UAAU,IACVD,aAAa,CACXD,MAAM,CAAC,CAAD,CADK,EAEXA,MAAM,CAACA,MAAM,CAACI,MAAP,GAAgB,CAAjB,CAFK,EAGXP,uBAHW,CAFf,EAOE;AACA,aAAOG,MAAM,CAACQ,KAAP,CAAa,CAAb,CAAP;AACD;;AACD,WAAOR,MAAP;AACD;;AAED,MAAIS,aAAa,GAAGT,MAAM,CAACQ,KAAP,CAAa,CAAb,EAAgBH,CAAhB,CAApB;;AACA,SAAOA,CAAC,GAAGD,MAAX,EAAmB,EAAEC,CAArB,EAAwB;AACtB;AACAE,IAAAA,EAAE,GAAGP,MAAM,CAACK,CAAD,CAAX;;AACA,QAAI,CAACJ,aAAa,CAACK,EAAD,EAAKC,EAAL,EAASV,uBAAT,CAAlB,EAAqD;AACnDY,MAAAA,aAAa,CAACC,IAAd,CAAmBH,EAAnB;AACAD,MAAAA,EAAE,GAAGC,EAAL;AACD;AACF;;AAED,MACEL,UAAU,IACVO,aAAa,CAACL,MAAd,GAAuB,CADvB,IAEAH,aAAa,CACXQ,aAAa,CAAC,CAAD,CADF,EAEXA,aAAa,CAACA,aAAa,CAACL,MAAd,GAAuB,CAAxB,CAFF,EAGXP,uBAHW,CAHf,EAQE;AACAY,IAAAA,aAAa,CAACE,KAAd;AACD;;AAED,SAAOF,aAAP;AACD;;AACD,eAAeV,qBAAf","sourcesContent":["import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport CesiumMath from \"./Math.js\";\n\nvar removeDuplicatesEpsilon = CesiumMath.EPSILON10;\n\n/**\n * Removes adjacent duplicate values in an array of values.\n *\n * @param {Array.<*>} [values] The array of values.\n * @param {Function} equalsEpsilon Function to compare values with an epsilon. Boolean equalsEpsilon(left, right, epsilon).\n * @param {Boolean} [wrapAround=false] Compare the last value in the array against the first value.\n * @returns {Array.<*>|undefined} A new array of values with no adjacent duplicate values or the input array if no duplicates were found.\n *\n * @example\n * // Returns [(1.0, 1.0, 1.0), (2.0, 2.0, 2.0), (3.0, 3.0, 3.0), (1.0, 1.0, 1.0)]\n * var values = [\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\n *     new Cesium.Cartesian3(2.0, 2.0, 2.0),\n *     new Cesium.Cartesian3(3.0, 3.0, 3.0),\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0)];\n * var nonDuplicatevalues = Cesium.PolylinePipeline.removeDuplicates(values, Cartesian3.equalsEpsilon);\n *\n * @example\n * // Returns [(1.0, 1.0, 1.0), (2.0, 2.0, 2.0), (3.0, 3.0, 3.0)]\n * var values = [\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\n *     new Cesium.Cartesian3(2.0, 2.0, 2.0),\n *     new Cesium.Cartesian3(3.0, 3.0, 3.0),\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0)];\n * var nonDuplicatevalues = Cesium.PolylinePipeline.removeDuplicates(values, Cartesian3.equalsEpsilon, true);\n *\n * @private\n */\nfunction arrayRemoveDuplicates(values, equalsEpsilon, wrapAround) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"equalsEpsilon\", equalsEpsilon);\n  //>>includeEnd('debug');\n\n  if (!defined(values)) {\n    return undefined;\n  }\n\n  wrapAround = defaultValue(wrapAround, false);\n\n  var length = values.length;\n  if (length < 2) {\n    return values;\n  }\n\n  var i;\n  var v0;\n  var v1;\n\n  for (i = 1; i < length; ++i) {\n    v0 = values[i - 1];\n    v1 = values[i];\n    if (equalsEpsilon(v0, v1, removeDuplicatesEpsilon)) {\n      break;\n    }\n  }\n\n  if (i === length) {\n    if (\n      wrapAround &&\n      equalsEpsilon(\n        values[0],\n        values[values.length - 1],\n        removeDuplicatesEpsilon\n      )\n    ) {\n      return values.slice(1);\n    }\n    return values;\n  }\n\n  var cleanedvalues = values.slice(0, i);\n  for (; i < length; ++i) {\n    // v0 is set by either the previous loop, or the previous clean point.\n    v1 = values[i];\n    if (!equalsEpsilon(v0, v1, removeDuplicatesEpsilon)) {\n      cleanedvalues.push(v1);\n      v0 = v1;\n    }\n  }\n\n  if (\n    wrapAround &&\n    cleanedvalues.length > 1 &&\n    equalsEpsilon(\n      cleanedvalues[0],\n      cleanedvalues[cleanedvalues.length - 1],\n      removeDuplicatesEpsilon\n    )\n  ) {\n    cleanedvalues.shift();\n  }\n\n  return cleanedvalues;\n}\nexport default arrayRemoveDuplicates;\n"]},"metadata":{},"sourceType":"module"}