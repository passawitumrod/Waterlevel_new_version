{"ast":null,"code":"import defined from \"../../Core/defined.js\";\nimport defaultValue from \"../../Core/defaultValue.js\";\nimport destroyObject from \"../../Core/destroyObject.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport Fullscreen from \"../../Core/Fullscreen.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\nimport getElement from \"../getElement.js\";\n/**\n * The view model for {@link FullscreenButton}.\n * @alias FullscreenButtonViewModel\n * @constructor\n *\n * @param {Element|String} [fullscreenElement=document.body] The element or id to be placed into fullscreen mode.\n * @param {Element|String} [container] The DOM element or ID that will contain the widget.\n */\n\nfunction FullscreenButtonViewModel(fullscreenElement, container) {\n  if (!defined(container)) {\n    container = document.body;\n  }\n\n  container = getElement(container);\n  var that = this;\n  var tmpIsFullscreen = knockout.observable(Fullscreen.fullscreen);\n  var tmpIsEnabled = knockout.observable(Fullscreen.enabled);\n  var ownerDocument = container.ownerDocument;\n  /**\n   * Gets whether or not fullscreen mode is active.  This property is observable.\n   *\n   * @type {Boolean}\n   */\n\n  this.isFullscreen = undefined;\n  knockout.defineProperty(this, \"isFullscreen\", {\n    get: function () {\n      return tmpIsFullscreen();\n    }\n  });\n  /**\n   * Gets or sets whether or not fullscreen functionality should be enabled.  This property is observable.\n   *\n   * @type {Boolean}\n   * @see Fullscreen.enabled\n   */\n\n  this.isFullscreenEnabled = undefined;\n  knockout.defineProperty(this, \"isFullscreenEnabled\", {\n    get: function () {\n      return tmpIsEnabled();\n    },\n    set: function (value) {\n      tmpIsEnabled(value && Fullscreen.enabled);\n    }\n  });\n  /**\n   * Gets the tooltip.  This property is observable.\n   *\n   * @type {String}\n   */\n\n  this.tooltip = undefined;\n  knockout.defineProperty(this, \"tooltip\", function () {\n    if (!this.isFullscreenEnabled) {\n      return \"Full screen unavailable\";\n    }\n\n    return tmpIsFullscreen() ? \"Exit full screen\" : \"Full screen\";\n  });\n  this._command = createCommand(function () {\n    if (Fullscreen.fullscreen) {\n      Fullscreen.exitFullscreen();\n    } else {\n      Fullscreen.requestFullscreen(that._fullscreenElement);\n    }\n  }, knockout.getObservable(this, \"isFullscreenEnabled\"));\n  this._fullscreenElement = defaultValue(getElement(fullscreenElement), ownerDocument.body);\n\n  this._callback = function () {\n    tmpIsFullscreen(Fullscreen.fullscreen);\n  };\n\n  ownerDocument.addEventListener(Fullscreen.changeEventName, this._callback);\n}\n\nObject.defineProperties(FullscreenButtonViewModel.prototype, {\n  /**\n   * Gets or sets the HTML element to place into fullscreen mode when the\n   * corresponding button is pressed.\n   * @memberof FullscreenButtonViewModel.prototype\n   *\n   * @type {Element}\n   */\n  fullscreenElement: {\n    //TODO:@exception {DeveloperError} value must be a valid HTML Element.\n    get: function () {\n      return this._fullscreenElement;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!(value instanceof Element)) {\n        throw new DeveloperError(\"value must be a valid Element.\");\n      } //>>includeEnd('debug');\n\n\n      this._fullscreenElement = value;\n    }\n  },\n\n  /**\n   * Gets the Command to toggle fullscreen mode.\n   * @memberof FullscreenButtonViewModel.prototype\n   *\n   * @type {Command}\n   */\n  command: {\n    get: function () {\n      return this._command;\n    }\n  }\n});\n/**\n * @returns {Boolean} true if the object has been destroyed, false otherwise.\n */\n\nFullscreenButtonViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys the view model.  Should be called to\n * properly clean up the view model when it is no longer needed.\n */\n\n\nFullscreenButtonViewModel.prototype.destroy = function () {\n  document.removeEventListener(Fullscreen.changeEventName, this._callback);\n  destroyObject(this);\n};\n\nexport default FullscreenButtonViewModel;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Widgets/FullscreenButton/FullscreenButtonViewModel.js"],"names":["defined","defaultValue","destroyObject","DeveloperError","Fullscreen","knockout","createCommand","getElement","FullscreenButtonViewModel","fullscreenElement","container","document","body","that","tmpIsFullscreen","observable","fullscreen","tmpIsEnabled","enabled","ownerDocument","isFullscreen","undefined","defineProperty","get","isFullscreenEnabled","set","value","tooltip","_command","exitFullscreen","requestFullscreen","_fullscreenElement","getObservable","_callback","addEventListener","changeEventName","Object","defineProperties","prototype","Element","command","isDestroyed","destroy","removeEventListener"],"mappings":"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","sourcesContent":["import defined from \"../../Core/defined.js\";\nimport defaultValue from \"../../Core/defaultValue.js\";\nimport destroyObject from \"../../Core/destroyObject.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport Fullscreen from \"../../Core/Fullscreen.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\nimport getElement from \"../getElement.js\";\n\n/**\n * The view model for {@link FullscreenButton}.\n * @alias FullscreenButtonViewModel\n * @constructor\n *\n * @param {Element|String} [fullscreenElement=document.body] The element or id to be placed into fullscreen mode.\n * @param {Element|String} [container] The DOM element or ID that will contain the widget.\n */\nfunction FullscreenButtonViewModel(fullscreenElement, container) {\n  if (!defined(container)) {\n    container = document.body;\n  }\n\n  container = getElement(container);\n\n  var that = this;\n\n  var tmpIsFullscreen = knockout.observable(Fullscreen.fullscreen);\n  var tmpIsEnabled = knockout.observable(Fullscreen.enabled);\n  var ownerDocument = container.ownerDocument;\n\n  /**\n   * Gets whether or not fullscreen mode is active.  This property is observable.\n   *\n   * @type {Boolean}\n   */\n  this.isFullscreen = undefined;\n  knockout.defineProperty(this, \"isFullscreen\", {\n    get: function () {\n      return tmpIsFullscreen();\n    },\n  });\n\n  /**\n   * Gets or sets whether or not fullscreen functionality should be enabled.  This property is observable.\n   *\n   * @type {Boolean}\n   * @see Fullscreen.enabled\n   */\n  this.isFullscreenEnabled = undefined;\n  knockout.defineProperty(this, \"isFullscreenEnabled\", {\n    get: function () {\n      return tmpIsEnabled();\n    },\n    set: function (value) {\n      tmpIsEnabled(value && Fullscreen.enabled);\n    },\n  });\n\n  /**\n   * Gets the tooltip.  This property is observable.\n   *\n   * @type {String}\n   */\n  this.tooltip = undefined;\n  knockout.defineProperty(this, \"tooltip\", function () {\n    if (!this.isFullscreenEnabled) {\n      return \"Full screen unavailable\";\n    }\n    return tmpIsFullscreen() ? \"Exit full screen\" : \"Full screen\";\n  });\n\n  this._command = createCommand(function () {\n    if (Fullscreen.fullscreen) {\n      Fullscreen.exitFullscreen();\n    } else {\n      Fullscreen.requestFullscreen(that._fullscreenElement);\n    }\n  }, knockout.getObservable(this, \"isFullscreenEnabled\"));\n\n  this._fullscreenElement = defaultValue(\n    getElement(fullscreenElement),\n    ownerDocument.body\n  );\n\n  this._callback = function () {\n    tmpIsFullscreen(Fullscreen.fullscreen);\n  };\n  ownerDocument.addEventListener(Fullscreen.changeEventName, this._callback);\n}\n\nObject.defineProperties(FullscreenButtonViewModel.prototype, {\n  /**\n   * Gets or sets the HTML element to place into fullscreen mode when the\n   * corresponding button is pressed.\n   * @memberof FullscreenButtonViewModel.prototype\n   *\n   * @type {Element}\n   */\n  fullscreenElement: {\n    //TODO:@exception {DeveloperError} value must be a valid HTML Element.\n    get: function () {\n      return this._fullscreenElement;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!(value instanceof Element)) {\n        throw new DeveloperError(\"value must be a valid Element.\");\n      }\n      //>>includeEnd('debug');\n\n      this._fullscreenElement = value;\n    },\n  },\n\n  /**\n   * Gets the Command to toggle fullscreen mode.\n   * @memberof FullscreenButtonViewModel.prototype\n   *\n   * @type {Command}\n   */\n  command: {\n    get: function () {\n      return this._command;\n    },\n  },\n});\n\n/**\n * @returns {Boolean} true if the object has been destroyed, false otherwise.\n */\nFullscreenButtonViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the view model.  Should be called to\n * properly clean up the view model when it is no longer needed.\n */\nFullscreenButtonViewModel.prototype.destroy = function () {\n  document.removeEventListener(Fullscreen.changeEventName, this._callback);\n  destroyObject(this);\n};\nexport default FullscreenButtonViewModel;\n"]},"metadata":{},"sourceType":"module"}