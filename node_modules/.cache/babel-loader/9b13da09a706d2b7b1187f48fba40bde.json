{"ast":null,"code":"import ApproximateTerrainHeights from \"../Core/ApproximateTerrainHeights.js\";\nimport ArcType from \"../Core/ArcType.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport CoplanarPolygonGeometry from \"../Core/CoplanarPolygonGeometry.js\";\nimport CoplanarPolygonOutlineGeometry from \"../Core/CoplanarPolygonOutlineGeometry.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport EllipsoidTangentPlane from \"../Core/EllipsoidTangentPlane.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport oneTimeWarning from \"../Core/oneTimeWarning.js\";\nimport PolygonGeometry from \"../Core/PolygonGeometry.js\";\nimport PolygonOutlineGeometry from \"../Core/PolygonOutlineGeometry.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport GroundGeometryUpdater from \"./GroundGeometryUpdater.js\";\nimport Property from \"./Property.js\";\nvar heightAndPerPositionHeightWarning = \"Entity polygons cannot have both height and perPositionHeight.  height will be ignored\";\nvar heightReferenceAndPerPositionHeightWarning = \"heightReference is not supported for entity polygons with perPositionHeight. heightReference will be ignored\";\nvar scratchColor = new Color();\nvar defaultOffset = Cartesian3.ZERO;\nvar offsetScratch = new Cartesian3();\nvar scratchRectangle = new Rectangle();\nvar scratch2DPositions = [];\nvar cart2Scratch = new Cartesian2();\n\nfunction PolygonGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.polygonHierarchy = undefined;\n  this.perPositionHeight = undefined;\n  this.closeTop = undefined;\n  this.closeBottom = undefined;\n  this.height = undefined;\n  this.extrudedHeight = undefined;\n  this.granularity = undefined;\n  this.stRotation = undefined;\n  this.offsetAttribute = undefined;\n  this.arcType = undefined;\n}\n/**\n * A {@link GeometryUpdater} for polygons.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias PolygonGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\n\n\nfunction PolygonGeometryUpdater(entity, scene) {\n  GroundGeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new PolygonGeometryOptions(entity),\n    geometryPropertyName: \"polygon\",\n    observedPropertyNames: [\"availability\", \"polygon\"]\n  });\n\n  this._onEntityPropertyChanged(entity, \"polygon\", entity.polygon, undefined);\n}\n\nif (defined(Object.create)) {\n  PolygonGeometryUpdater.prototype = Object.create(GroundGeometryUpdater.prototype);\n  PolygonGeometryUpdater.prototype.constructor = PolygonGeometryUpdater;\n}\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\n\n\nPolygonGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\"This instance does not represent a filled geometry.\");\n  } //>>includeEnd('debug');\n\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n  var options = this._options;\n  var attributes = {\n    show: new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time)),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(this._distanceDisplayConditionProperty.getValue(time)),\n    offset: undefined,\n    color: undefined\n  };\n\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    var currentColor;\n\n    if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n\n    attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n  }\n\n  if (defined(options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n  }\n\n  var geometry;\n\n  if (options.perPositionHeight && !defined(options.extrudedHeight)) {\n    geometry = new CoplanarPolygonGeometry(options);\n  } else {\n    geometry = new PolygonGeometry(options);\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: geometry,\n    attributes: attributes\n  });\n};\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\n\n\nPolygonGeometryUpdater.prototype.createOutlineGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\"This instance does not represent an outlined geometry.\");\n  } //>>includeEnd('debug');\n\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n  var options = this._options;\n  var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n  var attributes = {\n    show: new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n    color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition),\n    offset: undefined\n  };\n\n  if (defined(options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n  }\n\n  var geometry;\n\n  if (options.perPositionHeight && !defined(options.extrudedHeight)) {\n    geometry = new CoplanarPolygonOutlineGeometry(options);\n  } else {\n    geometry = new PolygonOutlineGeometry(options);\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: geometry,\n    attributes: attributes\n  });\n};\n\nPolygonGeometryUpdater.prototype._computeCenter = function (time, result) {\n  var hierarchy = Property.getValueOrUndefined(this._entity.polygon.hierarchy, time);\n\n  if (!defined(hierarchy)) {\n    return;\n  }\n\n  var positions = hierarchy.positions;\n\n  if (positions.length === 0) {\n    return;\n  }\n\n  var ellipsoid = this._scene.mapProjection.ellipsoid;\n  var tangentPlane = EllipsoidTangentPlane.fromPoints(positions, ellipsoid);\n  var positions2D = tangentPlane.projectPointsOntoPlane(positions, scratch2DPositions);\n  var length = positions2D.length;\n  var area = 0;\n  var j = length - 1;\n  var centroid2D = new Cartesian2();\n\n  for (var i = 0; i < length; j = i++) {\n    var p1 = positions2D[i];\n    var p2 = positions2D[j];\n    var f = p1.x * p2.y - p2.x * p1.y;\n    var sum = Cartesian2.add(p1, p2, cart2Scratch);\n    sum = Cartesian2.multiplyByScalar(sum, f, sum);\n    centroid2D = Cartesian2.add(centroid2D, sum, centroid2D);\n    area += f;\n  }\n\n  var a = 1.0 / (area * 3.0);\n  centroid2D = Cartesian2.multiplyByScalar(centroid2D, a, centroid2D);\n  return tangentPlane.projectPointOntoEllipsoid(centroid2D, result);\n};\n\nPolygonGeometryUpdater.prototype._isHidden = function (entity, polygon) {\n  return !defined(polygon.hierarchy) || GeometryUpdater.prototype._isHidden.call(this, entity, polygon);\n};\n\nPolygonGeometryUpdater.prototype._isOnTerrain = function (entity, polygon) {\n  var onTerrain = GroundGeometryUpdater.prototype._isOnTerrain.call(this, entity, polygon);\n\n  var perPositionHeightProperty = polygon.perPositionHeight;\n  var perPositionHeightEnabled = defined(perPositionHeightProperty) && (perPositionHeightProperty.isConstant ? perPositionHeightProperty.getValue(Iso8601.MINIMUM_VALUE) : true);\n  return onTerrain && !perPositionHeightEnabled;\n};\n\nPolygonGeometryUpdater.prototype._isDynamic = function (entity, polygon) {\n  return !polygon.hierarchy.isConstant || //\n  !Property.isConstant(polygon.height) || //\n  !Property.isConstant(polygon.extrudedHeight) || //\n  !Property.isConstant(polygon.granularity) || //\n  !Property.isConstant(polygon.stRotation) || //\n  !Property.isConstant(polygon.outlineWidth) || //\n  !Property.isConstant(polygon.perPositionHeight) || //\n  !Property.isConstant(polygon.closeTop) || //\n  !Property.isConstant(polygon.closeBottom) || //\n  !Property.isConstant(polygon.zIndex) || //\n  !Property.isConstant(polygon.arcType) || //\n  this._onTerrain && !Property.isConstant(this._materialProperty) && !(this._materialProperty instanceof ColorMaterialProperty);\n};\n\nPolygonGeometryUpdater.prototype._setStaticOptions = function (entity, polygon) {\n  var isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n  var options = this._options;\n  options.vertexFormat = isColorMaterial ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  var hierarchyValue = polygon.hierarchy.getValue(Iso8601.MINIMUM_VALUE);\n  var heightValue = Property.getValueOrUndefined(polygon.height, Iso8601.MINIMUM_VALUE);\n  var heightReferenceValue = Property.getValueOrDefault(polygon.heightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n  var extrudedHeightValue = Property.getValueOrUndefined(polygon.extrudedHeight, Iso8601.MINIMUM_VALUE);\n  var extrudedHeightReferenceValue = Property.getValueOrDefault(polygon.extrudedHeightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n  var perPositionHeightValue = Property.getValueOrDefault(polygon.perPositionHeight, Iso8601.MINIMUM_VALUE, false);\n  heightValue = GroundGeometryUpdater.getGeometryHeight(heightValue, heightReferenceValue);\n  var offsetAttribute;\n\n  if (perPositionHeightValue) {\n    if (defined(heightValue)) {\n      heightValue = undefined;\n      oneTimeWarning(heightAndPerPositionHeightWarning);\n    }\n\n    if (heightReferenceValue !== HeightReference.NONE && perPositionHeightValue) {\n      heightValue = undefined;\n      oneTimeWarning(heightReferenceAndPerPositionHeightWarning);\n    }\n  } else {\n    if (defined(extrudedHeightValue) && !defined(heightValue)) {\n      heightValue = 0;\n    }\n\n    offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n  }\n\n  options.polygonHierarchy = hierarchyValue;\n  options.granularity = Property.getValueOrUndefined(polygon.granularity, Iso8601.MINIMUM_VALUE);\n  options.stRotation = Property.getValueOrUndefined(polygon.stRotation, Iso8601.MINIMUM_VALUE);\n  options.perPositionHeight = perPositionHeightValue;\n  options.closeTop = Property.getValueOrDefault(polygon.closeTop, Iso8601.MINIMUM_VALUE, true);\n  options.closeBottom = Property.getValueOrDefault(polygon.closeBottom, Iso8601.MINIMUM_VALUE, true);\n  options.offsetAttribute = offsetAttribute;\n  options.height = heightValue;\n  options.arcType = Property.getValueOrDefault(polygon.arcType, Iso8601.MINIMUM_VALUE, ArcType.GEODESIC);\n  extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n\n  if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n    extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(PolygonGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n  }\n\n  options.extrudedHeight = extrudedHeightValue;\n};\n\nPolygonGeometryUpdater.prototype._getIsClosed = function (options) {\n  var height = options.height;\n  var extrudedHeight = options.extrudedHeight;\n  var isExtruded = defined(extrudedHeight) && extrudedHeight !== height;\n  return !options.perPositionHeight && (!isExtruded && height === 0 || isExtruded && options.closeTop && options.closeBottom);\n};\n\nPolygonGeometryUpdater.DynamicGeometryUpdater = DyanmicPolygonGeometryUpdater;\n/**\n * @private\n */\n\nfunction DyanmicPolygonGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n  DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n}\n\nif (defined(Object.create)) {\n  DyanmicPolygonGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n  DyanmicPolygonGeometryUpdater.prototype.constructor = DyanmicPolygonGeometryUpdater;\n}\n\nDyanmicPolygonGeometryUpdater.prototype._isHidden = function (entity, polygon, time) {\n  return !defined(this._options.polygonHierarchy) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, polygon, time);\n};\n\nDyanmicPolygonGeometryUpdater.prototype._setOptions = function (entity, polygon, time) {\n  var options = this._options;\n  options.polygonHierarchy = Property.getValueOrUndefined(polygon.hierarchy, time);\n  var heightValue = Property.getValueOrUndefined(polygon.height, time);\n  var heightReferenceValue = Property.getValueOrDefault(polygon.heightReference, time, HeightReference.NONE);\n  var extrudedHeightReferenceValue = Property.getValueOrDefault(polygon.extrudedHeightReference, time, HeightReference.NONE);\n  var extrudedHeightValue = Property.getValueOrUndefined(polygon.extrudedHeight, time);\n  var perPositionHeightValue = Property.getValueOrUndefined(polygon.perPositionHeight, time);\n  heightValue = GroundGeometryUpdater.getGeometryHeight(heightValue, extrudedHeightReferenceValue);\n  var offsetAttribute;\n\n  if (perPositionHeightValue) {\n    if (defined(heightValue)) {\n      heightValue = undefined;\n      oneTimeWarning(heightAndPerPositionHeightWarning);\n    }\n\n    if (heightReferenceValue !== HeightReference.NONE && perPositionHeightValue) {\n      heightValue = undefined;\n      oneTimeWarning(heightReferenceAndPerPositionHeightWarning);\n    }\n  } else {\n    if (defined(extrudedHeightValue) && !defined(heightValue)) {\n      heightValue = 0;\n    }\n\n    offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n  }\n\n  options.granularity = Property.getValueOrUndefined(polygon.granularity, time);\n  options.stRotation = Property.getValueOrUndefined(polygon.stRotation, time);\n  options.perPositionHeight = Property.getValueOrUndefined(polygon.perPositionHeight, time);\n  options.closeTop = Property.getValueOrDefault(polygon.closeTop, time, true);\n  options.closeBottom = Property.getValueOrDefault(polygon.closeBottom, time, true);\n  options.offsetAttribute = offsetAttribute;\n  options.height = heightValue;\n  options.arcType = Property.getValueOrDefault(polygon.arcType, time, ArcType.GEODESIC);\n  extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n\n  if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n    extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(PolygonGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n  }\n\n  options.extrudedHeight = extrudedHeightValue;\n};\n\nexport default PolygonGeometryUpdater;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/DataSources/PolygonGeometryUpdater.js"],"names":["ApproximateTerrainHeights","ArcType","Cartesian2","Cartesian3","Check","Color","ColorGeometryInstanceAttribute","CoplanarPolygonGeometry","CoplanarPolygonOutlineGeometry","defined","DeveloperError","DistanceDisplayConditionGeometryInstanceAttribute","EllipsoidTangentPlane","GeometryInstance","Iso8601","OffsetGeometryInstanceAttribute","oneTimeWarning","PolygonGeometry","PolygonOutlineGeometry","Rectangle","ShowGeometryInstanceAttribute","HeightReference","MaterialAppearance","PerInstanceColorAppearance","ColorMaterialProperty","DynamicGeometryUpdater","GeometryUpdater","GroundGeometryUpdater","Property","heightAndPerPositionHeightWarning","heightReferenceAndPerPositionHeightWarning","scratchColor","defaultOffset","ZERO","offsetScratch","scratchRectangle","scratch2DPositions","cart2Scratch","PolygonGeometryOptions","entity","id","vertexFormat","undefined","polygonHierarchy","perPositionHeight","closeTop","closeBottom","height","extrudedHeight","granularity","stRotation","offsetAttribute","arcType","PolygonGeometryUpdater","scene","call","geometryOptions","geometryPropertyName","observedPropertyNames","_onEntityPropertyChanged","polygon","Object","create","prototype","constructor","createFillGeometryInstance","time","_fillEnabled","_entity","isAvailable","options","_options","attributes","show","isShowing","_showProperty","getValue","_fillProperty","distanceDisplayCondition","fromDistanceDisplayCondition","_distanceDisplayConditionProperty","offset","color","_materialProperty","currentColor","isConstant","WHITE","fromColor","fromCartesian3","getValueOrDefault","_terrainOffsetProperty","geometry","createOutlineGeometryInstance","_outlineEnabled","outlineColor","_outlineColorProperty","BLACK","_showOutlineProperty","_computeCenter","result","hierarchy","getValueOrUndefined","positions","length","ellipsoid","_scene","mapProjection","tangentPlane","fromPoints","positions2D","projectPointsOntoPlane","area","j","centroid2D","i","p1","p2","f","x","y","sum","add","multiplyByScalar","a","projectPointOntoEllipsoid","_isHidden","_isOnTerrain","onTerrain","perPositionHeightProperty","perPositionHeightEnabled","MINIMUM_VALUE","_isDynamic","outlineWidth","zIndex","_onTerrain","_setStaticOptions","isColorMaterial","VERTEX_FORMAT","MaterialSupport","TEXTURED","hierarchyValue","heightValue","heightReferenceValue","heightReference","NONE","extrudedHeightValue","extrudedHeightReferenceValue","extrudedHeightReference","perPositionHeightValue","getGeometryHeight","computeGeometryOffsetAttribute","GEODESIC","getGeometryExtrudedHeight","CLAMP_TO_GROUND","getMinimumMaximumHeights","computeRectangle","minimumTerrainHeight","_getIsClosed","isExtruded","DyanmicPolygonGeometryUpdater","geometryUpdater","primitives","groundPrimitives","_setOptions"],"mappings":"AAAA,OAAOA,yBAAP,MAAsC,sCAAtC;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,8BAAP,MAA2C,2CAA3C;AACA,OAAOC,uBAAP,MAAoC,oCAApC;AACA,OAAOC,8BAAP,MAA2C,2CAA3C;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,iDAAP,MAA8D,8DAA9D;AACA,OAAOC,qBAAP,MAAkC,kCAAlC;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,+BAAP,MAA4C,4CAA5C;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AACA,OAAOC,sBAAP,MAAmC,mCAAnC;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,6BAAP,MAA0C,0CAA1C;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;AACA,OAAOC,0BAAP,MAAuC,wCAAvC;AACA,OAAOC,qBAAP,MAAkC,4BAAlC;AACA,OAAOC,sBAAP,MAAmC,6BAAnC;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,OAAOC,qBAAP,MAAkC,4BAAlC;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA,IAAIC,iCAAiC,GACnC,wFADF;AAEA,IAAIC,0CAA0C,GAC5C,8GADF;AAGA,IAAIC,YAAY,GAAG,IAAI1B,KAAJ,EAAnB;AACA,IAAI2B,aAAa,GAAG7B,UAAU,CAAC8B,IAA/B;AACA,IAAIC,aAAa,GAAG,IAAI/B,UAAJ,EAApB;AACA,IAAIgC,gBAAgB,GAAG,IAAIhB,SAAJ,EAAvB;AACA,IAAIiB,kBAAkB,GAAG,EAAzB;AACA,IAAIC,YAAY,GAAG,IAAInC,UAAJ,EAAnB;;AAEA,SAASoC,sBAAT,CAAgCC,MAAhC,EAAwC;AACtC,OAAKC,EAAL,GAAUD,MAAV;AACA,OAAKE,YAAL,GAAoBC,SAApB;AACA,OAAKC,gBAAL,GAAwBD,SAAxB;AACA,OAAKE,iBAAL,GAAyBF,SAAzB;AACA,OAAKG,QAAL,GAAgBH,SAAhB;AACA,OAAKI,WAAL,GAAmBJ,SAAnB;AACA,OAAKK,MAAL,GAAcL,SAAd;AACA,OAAKM,cAAL,GAAsBN,SAAtB;AACA,OAAKO,WAAL,GAAmBP,SAAnB;AACA,OAAKQ,UAAL,GAAkBR,SAAlB;AACA,OAAKS,eAAL,GAAuBT,SAAvB;AACA,OAAKU,OAAL,GAAeV,SAAf;AACD;AAED;;;;;;;;;;;AASA,SAASW,sBAAT,CAAgCd,MAAhC,EAAwCe,KAAxC,EAA+C;AAC7C3B,EAAAA,qBAAqB,CAAC4B,IAAtB,CAA2B,IAA3B,EAAiC;AAC/BhB,IAAAA,MAAM,EAAEA,MADuB;AAE/Be,IAAAA,KAAK,EAAEA,KAFwB;AAG/BE,IAAAA,eAAe,EAAE,IAAIlB,sBAAJ,CAA2BC,MAA3B,CAHc;AAI/BkB,IAAAA,oBAAoB,EAAE,SAJS;AAK/BC,IAAAA,qBAAqB,EAAE,CAAC,cAAD,EAAiB,SAAjB;AALQ,GAAjC;;AAQA,OAAKC,wBAAL,CAA8BpB,MAA9B,EAAsC,SAAtC,EAAiDA,MAAM,CAACqB,OAAxD,EAAiElB,SAAjE;AACD;;AAED,IAAIjC,OAAO,CAACoD,MAAM,CAACC,MAAR,CAAX,EAA4B;AAC1BT,EAAAA,sBAAsB,CAACU,SAAvB,GAAmCF,MAAM,CAACC,MAAP,CACjCnC,qBAAqB,CAACoC,SADW,CAAnC;AAGAV,EAAAA,sBAAsB,CAACU,SAAvB,CAAiCC,WAAjC,GAA+CX,sBAA/C;AACD;AAED;;;;;;;;;;AAQAA,sBAAsB,CAACU,SAAvB,CAAiCE,0BAAjC,GAA8D,UAAUC,IAAV,EAAgB;AAC5E;AACA9D,EAAAA,KAAK,CAACK,OAAN,CAAc,MAAd,EAAsByD,IAAtB;;AAEA,MAAI,CAAC,KAAKC,YAAV,EAAwB;AACtB,UAAM,IAAIzD,cAAJ,CACJ,qDADI,CAAN;AAGD,GAR2E,CAS5E;;;AAEA,MAAI6B,MAAM,GAAG,KAAK6B,OAAlB;AACA,MAAIC,WAAW,GAAG9B,MAAM,CAAC8B,WAAP,CAAmBH,IAAnB,CAAlB;AACA,MAAII,OAAO,GAAG,KAAKC,QAAnB;AAEA,MAAIC,UAAU,GAAG;AACfC,IAAAA,IAAI,EAAE,IAAIrD,6BAAJ,CACJiD,WAAW,IACT9B,MAAM,CAACmC,SADT,IAEE,KAAKC,aAAL,CAAmBC,QAAnB,CAA4BV,IAA5B,CAFF,IAGE,KAAKW,aAAL,CAAmBD,QAAnB,CAA4BV,IAA5B,CAJE,CADS;AAOfY,IAAAA,wBAAwB,EAAEnE,iDAAiD,CAACoE,4BAAlD,CACxB,KAAKC,iCAAL,CAAuCJ,QAAvC,CAAgDV,IAAhD,CADwB,CAPX;AAUfe,IAAAA,MAAM,EAAEvC,SAVO;AAWfwC,IAAAA,KAAK,EAAExC;AAXQ,GAAjB;;AAcA,MAAI,KAAKyC,iBAAL,YAAkC3D,qBAAtC,EAA6D;AAC3D,QAAI4D,YAAJ;;AACA,QACE3E,OAAO,CAAC,KAAK0E,iBAAL,CAAuBD,KAAxB,CAAP,KACC,KAAKC,iBAAL,CAAuBD,KAAvB,CAA6BG,UAA7B,IAA2ChB,WAD5C,CADF,EAGE;AACAe,MAAAA,YAAY,GAAG,KAAKD,iBAAL,CAAuBD,KAAvB,CAA6BN,QAA7B,CAAsCV,IAAtC,EAA4CnC,YAA5C,CAAf;AACD;;AACD,QAAI,CAACtB,OAAO,CAAC2E,YAAD,CAAZ,EAA4B;AAC1BA,MAAAA,YAAY,GAAG/E,KAAK,CAACiF,KAArB;AACD;;AACDd,IAAAA,UAAU,CAACU,KAAX,GAAmB5E,8BAA8B,CAACiF,SAA/B,CAAyCH,YAAzC,CAAnB;AACD;;AACD,MAAI3E,OAAO,CAAC6D,OAAO,CAACnB,eAAT,CAAX,EAAsC;AACpCqB,IAAAA,UAAU,CAACS,MAAX,GAAoBlE,+BAA+B,CAACyE,cAAhC,CAClB5D,QAAQ,CAAC6D,iBAAT,CACE,KAAKC,sBADP,EAEExB,IAFF,EAGElC,aAHF,EAIEE,aAJF,CADkB,CAApB;AAQD;;AAED,MAAIyD,QAAJ;;AACA,MAAIrB,OAAO,CAAC1B,iBAAR,IAA6B,CAACnC,OAAO,CAAC6D,OAAO,CAACtB,cAAT,CAAzC,EAAmE;AACjE2C,IAAAA,QAAQ,GAAG,IAAIpF,uBAAJ,CAA4B+D,OAA5B,CAAX;AACD,GAFD,MAEO;AACLqB,IAAAA,QAAQ,GAAG,IAAI1E,eAAJ,CAAoBqD,OAApB,CAAX;AACD;;AAED,SAAO,IAAIzD,gBAAJ,CAAqB;AAC1B2B,IAAAA,EAAE,EAAED,MADsB;AAE1BoD,IAAAA,QAAQ,EAAEA,QAFgB;AAG1BnB,IAAAA,UAAU,EAAEA;AAHc,GAArB,CAAP;AAKD,CAjED;AAmEA;;;;;;;;;;AAQAnB,sBAAsB,CAACU,SAAvB,CAAiC6B,6BAAjC,GAAiE,UAC/D1B,IAD+D,EAE/D;AACA;AACA9D,EAAAA,KAAK,CAACK,OAAN,CAAc,MAAd,EAAsByD,IAAtB;;AAEA,MAAI,CAAC,KAAK2B,eAAV,EAA2B;AACzB,UAAM,IAAInF,cAAJ,CACJ,wDADI,CAAN;AAGD,GARD,CASA;;;AAEA,MAAI6B,MAAM,GAAG,KAAK6B,OAAlB;AACA,MAAIC,WAAW,GAAG9B,MAAM,CAAC8B,WAAP,CAAmBH,IAAnB,CAAlB;AACA,MAAII,OAAO,GAAG,KAAKC,QAAnB;AACA,MAAIuB,YAAY,GAAGlE,QAAQ,CAAC6D,iBAAT,CACjB,KAAKM,qBADY,EAEjB7B,IAFiB,EAGjB7D,KAAK,CAAC2F,KAHW,EAIjBjE,YAJiB,CAAnB;;AAMA,MAAI+C,wBAAwB,GAAG,KAAKE,iCAAL,CAAuCJ,QAAvC,CAC7BV,IAD6B,CAA/B;;AAIA,MAAIM,UAAU,GAAG;AACfC,IAAAA,IAAI,EAAE,IAAIrD,6BAAJ,CACJiD,WAAW,IACT9B,MAAM,CAACmC,SADT,IAEE,KAAKC,aAAL,CAAmBC,QAAnB,CAA4BV,IAA5B,CAFF,IAGE,KAAK+B,oBAAL,CAA0BrB,QAA1B,CAAmCV,IAAnC,CAJE,CADS;AAOfgB,IAAAA,KAAK,EAAE5E,8BAA8B,CAACiF,SAA/B,CAAyCO,YAAzC,CAPQ;AAQfhB,IAAAA,wBAAwB,EAAEnE,iDAAiD,CAACoE,4BAAlD,CACxBD,wBADwB,CARX;AAWfG,IAAAA,MAAM,EAAEvC;AAXO,GAAjB;;AAcA,MAAIjC,OAAO,CAAC6D,OAAO,CAACnB,eAAT,CAAX,EAAsC;AACpCqB,IAAAA,UAAU,CAACS,MAAX,GAAoBlE,+BAA+B,CAACyE,cAAhC,CAClB5D,QAAQ,CAAC6D,iBAAT,CACE,KAAKC,sBADP,EAEExB,IAFF,EAGElC,aAHF,EAIEE,aAJF,CADkB,CAApB;AAQD;;AAED,MAAIyD,QAAJ;;AACA,MAAIrB,OAAO,CAAC1B,iBAAR,IAA6B,CAACnC,OAAO,CAAC6D,OAAO,CAACtB,cAAT,CAAzC,EAAmE;AACjE2C,IAAAA,QAAQ,GAAG,IAAInF,8BAAJ,CAAmC8D,OAAnC,CAAX;AACD,GAFD,MAEO;AACLqB,IAAAA,QAAQ,GAAG,IAAIzE,sBAAJ,CAA2BoD,OAA3B,CAAX;AACD;;AACD,SAAO,IAAIzD,gBAAJ,CAAqB;AAC1B2B,IAAAA,EAAE,EAAED,MADsB;AAE1BoD,IAAAA,QAAQ,EAAEA,QAFgB;AAG1BnB,IAAAA,UAAU,EAAEA;AAHc,GAArB,CAAP;AAKD,CA9DD;;AAgEAnB,sBAAsB,CAACU,SAAvB,CAAiCmC,cAAjC,GAAkD,UAAUhC,IAAV,EAAgBiC,MAAhB,EAAwB;AACxE,MAAIC,SAAS,GAAGxE,QAAQ,CAACyE,mBAAT,CACd,KAAKjC,OAAL,CAAaR,OAAb,CAAqBwC,SADP,EAEdlC,IAFc,CAAhB;;AAIA,MAAI,CAACzD,OAAO,CAAC2F,SAAD,CAAZ,EAAyB;AACvB;AACD;;AACD,MAAIE,SAAS,GAAGF,SAAS,CAACE,SAA1B;;AACA,MAAIA,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B;AACD;;AACD,MAAIC,SAAS,GAAG,KAAKC,MAAL,CAAYC,aAAZ,CAA0BF,SAA1C;AAEA,MAAIG,YAAY,GAAG/F,qBAAqB,CAACgG,UAAtB,CAAiCN,SAAjC,EAA4CE,SAA5C,CAAnB;AACA,MAAIK,WAAW,GAAGF,YAAY,CAACG,sBAAb,CAChBR,SADgB,EAEhBlE,kBAFgB,CAAlB;AAKA,MAAImE,MAAM,GAAGM,WAAW,CAACN,MAAzB;AACA,MAAIQ,IAAI,GAAG,CAAX;AACA,MAAIC,CAAC,GAAGT,MAAM,GAAG,CAAjB;AACA,MAAIU,UAAU,GAAG,IAAI/G,UAAJ,EAAjB;;AACA,OAAK,IAAIgH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,MAApB,EAA4BS,CAAC,GAAGE,CAAC,EAAjC,EAAqC;AACnC,QAAIC,EAAE,GAAGN,WAAW,CAACK,CAAD,CAApB;AACA,QAAIE,EAAE,GAAGP,WAAW,CAACG,CAAD,CAApB;AACA,QAAIK,CAAC,GAAGF,EAAE,CAACG,CAAH,GAAOF,EAAE,CAACG,CAAV,GAAcH,EAAE,CAACE,CAAH,GAAOH,EAAE,CAACI,CAAhC;AAEA,QAAIC,GAAG,GAAGtH,UAAU,CAACuH,GAAX,CAAeN,EAAf,EAAmBC,EAAnB,EAAuB/E,YAAvB,CAAV;AACAmF,IAAAA,GAAG,GAAGtH,UAAU,CAACwH,gBAAX,CAA4BF,GAA5B,EAAiCH,CAAjC,EAAoCG,GAApC,CAAN;AACAP,IAAAA,UAAU,GAAG/G,UAAU,CAACuH,GAAX,CAAeR,UAAf,EAA2BO,GAA3B,EAAgCP,UAAhC,CAAb;AAEAF,IAAAA,IAAI,IAAIM,CAAR;AACD;;AAED,MAAIM,CAAC,GAAG,OAAOZ,IAAI,GAAG,GAAd,CAAR;AACAE,EAAAA,UAAU,GAAG/G,UAAU,CAACwH,gBAAX,CAA4BT,UAA5B,EAAwCU,CAAxC,EAA2CV,UAA3C,CAAb;AACA,SAAON,YAAY,CAACiB,yBAAb,CAAuCX,UAAvC,EAAmDd,MAAnD,CAAP;AACD,CAvCD;;AAyCA9C,sBAAsB,CAACU,SAAvB,CAAiC8D,SAAjC,GAA6C,UAAUtF,MAAV,EAAkBqB,OAAlB,EAA2B;AACtE,SACE,CAACnD,OAAO,CAACmD,OAAO,CAACwC,SAAT,CAAR,IACA1E,eAAe,CAACqC,SAAhB,CAA0B8D,SAA1B,CAAoCtE,IAApC,CAAyC,IAAzC,EAA+ChB,MAA/C,EAAuDqB,OAAvD,CAFF;AAID,CALD;;AAOAP,sBAAsB,CAACU,SAAvB,CAAiC+D,YAAjC,GAAgD,UAAUvF,MAAV,EAAkBqB,OAAlB,EAA2B;AACzE,MAAImE,SAAS,GAAGpG,qBAAqB,CAACoC,SAAtB,CAAgC+D,YAAhC,CAA6CvE,IAA7C,CACd,IADc,EAEdhB,MAFc,EAGdqB,OAHc,CAAhB;;AAKA,MAAIoE,yBAAyB,GAAGpE,OAAO,CAAChB,iBAAxC;AACA,MAAIqF,wBAAwB,GAC1BxH,OAAO,CAACuH,yBAAD,CAAP,KACCA,yBAAyB,CAAC3C,UAA1B,GACG2C,yBAAyB,CAACpD,QAA1B,CAAmC9D,OAAO,CAACoH,aAA3C,CADH,GAEG,IAHJ,CADF;AAKA,SAAOH,SAAS,IAAI,CAACE,wBAArB;AACD,CAbD;;AAeA5E,sBAAsB,CAACU,SAAvB,CAAiCoE,UAAjC,GAA8C,UAAU5F,MAAV,EAAkBqB,OAAlB,EAA2B;AACvE,SACE,CAACA,OAAO,CAACwC,SAAR,CAAkBf,UAAnB,IAAiC;AACjC,GAACzD,QAAQ,CAACyD,UAAT,CAAoBzB,OAAO,CAACb,MAA5B,CADD,IACwC;AACxC,GAACnB,QAAQ,CAACyD,UAAT,CAAoBzB,OAAO,CAACZ,cAA5B,CAFD,IAEgD;AAChD,GAACpB,QAAQ,CAACyD,UAAT,CAAoBzB,OAAO,CAACX,WAA5B,CAHD,IAG6C;AAC7C,GAACrB,QAAQ,CAACyD,UAAT,CAAoBzB,OAAO,CAACV,UAA5B,CAJD,IAI4C;AAC5C,GAACtB,QAAQ,CAACyD,UAAT,CAAoBzB,OAAO,CAACwE,YAA5B,CALD,IAK8C;AAC9C,GAACxG,QAAQ,CAACyD,UAAT,CAAoBzB,OAAO,CAAChB,iBAA5B,CAND,IAMmD;AACnD,GAAChB,QAAQ,CAACyD,UAAT,CAAoBzB,OAAO,CAACf,QAA5B,CAPD,IAO0C;AAC1C,GAACjB,QAAQ,CAACyD,UAAT,CAAoBzB,OAAO,CAACd,WAA5B,CARD,IAQ6C;AAC7C,GAAClB,QAAQ,CAACyD,UAAT,CAAoBzB,OAAO,CAACyE,MAA5B,CATD,IASwC;AACxC,GAACzG,QAAQ,CAACyD,UAAT,CAAoBzB,OAAO,CAACR,OAA5B,CAVD,IAUyC;AACxC,OAAKkF,UAAL,IACC,CAAC1G,QAAQ,CAACyD,UAAT,CAAoB,KAAKF,iBAAzB,CADF,IAEC,EAAE,KAAKA,iBAAL,YAAkC3D,qBAApC,CAdJ;AAgBD,CAjBD;;AAmBA6B,sBAAsB,CAACU,SAAvB,CAAiCwE,iBAAjC,GAAqD,UACnDhG,MADmD,EAEnDqB,OAFmD,EAGnD;AACA,MAAI4E,eAAe,GAAG,KAAKrD,iBAAL,YAAkC3D,qBAAxD;AAEA,MAAI8C,OAAO,GAAG,KAAKC,QAAnB;AACAD,EAAAA,OAAO,CAAC7B,YAAR,GAAuB+F,eAAe,GAClCjH,0BAA0B,CAACkH,aADO,GAElCnH,kBAAkB,CAACoH,eAAnB,CAAmCC,QAAnC,CAA4ClG,YAFhD;AAIA,MAAImG,cAAc,GAAGhF,OAAO,CAACwC,SAAR,CAAkBxB,QAAlB,CAA2B9D,OAAO,CAACoH,aAAnC,CAArB;AACA,MAAIW,WAAW,GAAGjH,QAAQ,CAACyE,mBAAT,CAChBzC,OAAO,CAACb,MADQ,EAEhBjC,OAAO,CAACoH,aAFQ,CAAlB;AAIA,MAAIY,oBAAoB,GAAGlH,QAAQ,CAAC6D,iBAAT,CACzB7B,OAAO,CAACmF,eADiB,EAEzBjI,OAAO,CAACoH,aAFiB,EAGzB7G,eAAe,CAAC2H,IAHS,CAA3B;AAKA,MAAIC,mBAAmB,GAAGrH,QAAQ,CAACyE,mBAAT,CACxBzC,OAAO,CAACZ,cADgB,EAExBlC,OAAO,CAACoH,aAFgB,CAA1B;AAIA,MAAIgB,4BAA4B,GAAGtH,QAAQ,CAAC6D,iBAAT,CACjC7B,OAAO,CAACuF,uBADyB,EAEjCrI,OAAO,CAACoH,aAFyB,EAGjC7G,eAAe,CAAC2H,IAHiB,CAAnC;AAKA,MAAII,sBAAsB,GAAGxH,QAAQ,CAAC6D,iBAAT,CAC3B7B,OAAO,CAAChB,iBADmB,EAE3B9B,OAAO,CAACoH,aAFmB,EAG3B,KAH2B,CAA7B;AAMAW,EAAAA,WAAW,GAAGlH,qBAAqB,CAAC0H,iBAAtB,CACZR,WADY,EAEZC,oBAFY,CAAd;AAKA,MAAI3F,eAAJ;;AACA,MAAIiG,sBAAJ,EAA4B;AAC1B,QAAI3I,OAAO,CAACoI,WAAD,CAAX,EAA0B;AACxBA,MAAAA,WAAW,GAAGnG,SAAd;AACA1B,MAAAA,cAAc,CAACa,iCAAD,CAAd;AACD;;AACD,QACEiH,oBAAoB,KAAKzH,eAAe,CAAC2H,IAAzC,IACAI,sBAFF,EAGE;AACAP,MAAAA,WAAW,GAAGnG,SAAd;AACA1B,MAAAA,cAAc,CAACc,0CAAD,CAAd;AACD;AACF,GAZD,MAYO;AACL,QAAIrB,OAAO,CAACwI,mBAAD,CAAP,IAAgC,CAACxI,OAAO,CAACoI,WAAD,CAA5C,EAA2D;AACzDA,MAAAA,WAAW,GAAG,CAAd;AACD;;AACD1F,IAAAA,eAAe,GAAGxB,qBAAqB,CAAC2H,8BAAtB,CAChBT,WADgB,EAEhBC,oBAFgB,EAGhBG,mBAHgB,EAIhBC,4BAJgB,CAAlB;AAMD;;AAED5E,EAAAA,OAAO,CAAC3B,gBAAR,GAA2BiG,cAA3B;AACAtE,EAAAA,OAAO,CAACrB,WAAR,GAAsBrB,QAAQ,CAACyE,mBAAT,CACpBzC,OAAO,CAACX,WADY,EAEpBnC,OAAO,CAACoH,aAFY,CAAtB;AAIA5D,EAAAA,OAAO,CAACpB,UAAR,GAAqBtB,QAAQ,CAACyE,mBAAT,CACnBzC,OAAO,CAACV,UADW,EAEnBpC,OAAO,CAACoH,aAFW,CAArB;AAIA5D,EAAAA,OAAO,CAAC1B,iBAAR,GAA4BwG,sBAA5B;AACA9E,EAAAA,OAAO,CAACzB,QAAR,GAAmBjB,QAAQ,CAAC6D,iBAAT,CACjB7B,OAAO,CAACf,QADS,EAEjB/B,OAAO,CAACoH,aAFS,EAGjB,IAHiB,CAAnB;AAKA5D,EAAAA,OAAO,CAACxB,WAAR,GAAsBlB,QAAQ,CAAC6D,iBAAT,CACpB7B,OAAO,CAACd,WADY,EAEpBhC,OAAO,CAACoH,aAFY,EAGpB,IAHoB,CAAtB;AAKA5D,EAAAA,OAAO,CAACnB,eAAR,GAA0BA,eAA1B;AACAmB,EAAAA,OAAO,CAACvB,MAAR,GAAiB8F,WAAjB;AACAvE,EAAAA,OAAO,CAAClB,OAAR,GAAkBxB,QAAQ,CAAC6D,iBAAT,CAChB7B,OAAO,CAACR,OADQ,EAEhBtC,OAAO,CAACoH,aAFQ,EAGhBjI,OAAO,CAACsJ,QAHQ,CAAlB;AAMAN,EAAAA,mBAAmB,GAAGtH,qBAAqB,CAAC6H,yBAAtB,CACpBP,mBADoB,EAEpBC,4BAFoB,CAAtB;;AAIA,MAAID,mBAAmB,KAAKtH,qBAAqB,CAAC8H,eAAlD,EAAmE;AACjER,IAAAA,mBAAmB,GAAGjJ,yBAAyB,CAAC0J,wBAA1B,CACpBzI,eAAe,CAAC0I,gBAAhB,CAAiCrF,OAAjC,EAA0CnC,gBAA1C,CADoB,EAEpByH,oBAFF;AAGD;;AAEDtF,EAAAA,OAAO,CAACtB,cAAR,GAAyBiG,mBAAzB;AACD,CAzGD;;AA2GA5F,sBAAsB,CAACU,SAAvB,CAAiC8F,YAAjC,GAAgD,UAAUvF,OAAV,EAAmB;AACjE,MAAIvB,MAAM,GAAGuB,OAAO,CAACvB,MAArB;AACA,MAAIC,cAAc,GAAGsB,OAAO,CAACtB,cAA7B;AACA,MAAI8G,UAAU,GAAGrJ,OAAO,CAACuC,cAAD,CAAP,IAA2BA,cAAc,KAAKD,MAA/D;AACA,SACE,CAACuB,OAAO,CAAC1B,iBAAT,KACE,CAACkH,UAAD,IAAe/G,MAAM,KAAK,CAA3B,IACE+G,UAAU,IAAIxF,OAAO,CAACzB,QAAtB,IAAkCyB,OAAO,CAACxB,WAF7C,CADF;AAKD,CATD;;AAWAO,sBAAsB,CAAC5B,sBAAvB,GAAgDsI,6BAAhD;AAEA;;;;AAGA,SAASA,6BAAT,CACEC,eADF,EAEEC,UAFF,EAGEC,gBAHF,EAIE;AACAzI,EAAAA,sBAAsB,CAAC8B,IAAvB,CACE,IADF,EAEEyG,eAFF,EAGEC,UAHF,EAIEC,gBAJF;AAMD;;AAED,IAAIzJ,OAAO,CAACoD,MAAM,CAACC,MAAR,CAAX,EAA4B;AAC1BiG,EAAAA,6BAA6B,CAAChG,SAA9B,GAA0CF,MAAM,CAACC,MAAP,CACxCrC,sBAAsB,CAACsC,SADiB,CAA1C;AAGAgG,EAAAA,6BAA6B,CAAChG,SAA9B,CAAwCC,WAAxC,GAAsD+F,6BAAtD;AACD;;AAEDA,6BAA6B,CAAChG,SAA9B,CAAwC8D,SAAxC,GAAoD,UAClDtF,MADkD,EAElDqB,OAFkD,EAGlDM,IAHkD,EAIlD;AACA,SACE,CAACzD,OAAO,CAAC,KAAK8D,QAAL,CAAc5B,gBAAf,CAAR,IACAlB,sBAAsB,CAACsC,SAAvB,CAAiC8D,SAAjC,CAA2CtE,IAA3C,CAAgD,IAAhD,EAAsDhB,MAAtD,EAA8DqB,OAA9D,EAAuEM,IAAvE,CAFF;AAID,CATD;;AAWA6F,6BAA6B,CAAChG,SAA9B,CAAwCoG,WAAxC,GAAsD,UACpD5H,MADoD,EAEpDqB,OAFoD,EAGpDM,IAHoD,EAIpD;AACA,MAAII,OAAO,GAAG,KAAKC,QAAnB;AAEAD,EAAAA,OAAO,CAAC3B,gBAAR,GAA2Bf,QAAQ,CAACyE,mBAAT,CACzBzC,OAAO,CAACwC,SADiB,EAEzBlC,IAFyB,CAA3B;AAKA,MAAI2E,WAAW,GAAGjH,QAAQ,CAACyE,mBAAT,CAA6BzC,OAAO,CAACb,MAArC,EAA6CmB,IAA7C,CAAlB;AACA,MAAI4E,oBAAoB,GAAGlH,QAAQ,CAAC6D,iBAAT,CACzB7B,OAAO,CAACmF,eADiB,EAEzB7E,IAFyB,EAGzB7C,eAAe,CAAC2H,IAHS,CAA3B;AAKA,MAAIE,4BAA4B,GAAGtH,QAAQ,CAAC6D,iBAAT,CACjC7B,OAAO,CAACuF,uBADyB,EAEjCjF,IAFiC,EAGjC7C,eAAe,CAAC2H,IAHiB,CAAnC;AAKA,MAAIC,mBAAmB,GAAGrH,QAAQ,CAACyE,mBAAT,CACxBzC,OAAO,CAACZ,cADgB,EAExBkB,IAFwB,CAA1B;AAIA,MAAIkF,sBAAsB,GAAGxH,QAAQ,CAACyE,mBAAT,CAC3BzC,OAAO,CAAChB,iBADmB,EAE3BsB,IAF2B,CAA7B;AAKA2E,EAAAA,WAAW,GAAGlH,qBAAqB,CAAC0H,iBAAtB,CACZR,WADY,EAEZK,4BAFY,CAAd;AAKA,MAAI/F,eAAJ;;AACA,MAAIiG,sBAAJ,EAA4B;AAC1B,QAAI3I,OAAO,CAACoI,WAAD,CAAX,EAA0B;AACxBA,MAAAA,WAAW,GAAGnG,SAAd;AACA1B,MAAAA,cAAc,CAACa,iCAAD,CAAd;AACD;;AACD,QACEiH,oBAAoB,KAAKzH,eAAe,CAAC2H,IAAzC,IACAI,sBAFF,EAGE;AACAP,MAAAA,WAAW,GAAGnG,SAAd;AACA1B,MAAAA,cAAc,CAACc,0CAAD,CAAd;AACD;AACF,GAZD,MAYO;AACL,QAAIrB,OAAO,CAACwI,mBAAD,CAAP,IAAgC,CAACxI,OAAO,CAACoI,WAAD,CAA5C,EAA2D;AACzDA,MAAAA,WAAW,GAAG,CAAd;AACD;;AAED1F,IAAAA,eAAe,GAAGxB,qBAAqB,CAAC2H,8BAAtB,CAChBT,WADgB,EAEhBC,oBAFgB,EAGhBG,mBAHgB,EAIhBC,4BAJgB,CAAlB;AAMD;;AAED5E,EAAAA,OAAO,CAACrB,WAAR,GAAsBrB,QAAQ,CAACyE,mBAAT,CAA6BzC,OAAO,CAACX,WAArC,EAAkDiB,IAAlD,CAAtB;AACAI,EAAAA,OAAO,CAACpB,UAAR,GAAqBtB,QAAQ,CAACyE,mBAAT,CAA6BzC,OAAO,CAACV,UAArC,EAAiDgB,IAAjD,CAArB;AACAI,EAAAA,OAAO,CAAC1B,iBAAR,GAA4BhB,QAAQ,CAACyE,mBAAT,CAC1BzC,OAAO,CAAChB,iBADkB,EAE1BsB,IAF0B,CAA5B;AAIAI,EAAAA,OAAO,CAACzB,QAAR,GAAmBjB,QAAQ,CAAC6D,iBAAT,CAA2B7B,OAAO,CAACf,QAAnC,EAA6CqB,IAA7C,EAAmD,IAAnD,CAAnB;AACAI,EAAAA,OAAO,CAACxB,WAAR,GAAsBlB,QAAQ,CAAC6D,iBAAT,CACpB7B,OAAO,CAACd,WADY,EAEpBoB,IAFoB,EAGpB,IAHoB,CAAtB;AAKAI,EAAAA,OAAO,CAACnB,eAAR,GAA0BA,eAA1B;AACAmB,EAAAA,OAAO,CAACvB,MAAR,GAAiB8F,WAAjB;AACAvE,EAAAA,OAAO,CAAClB,OAAR,GAAkBxB,QAAQ,CAAC6D,iBAAT,CAChB7B,OAAO,CAACR,OADQ,EAEhBc,IAFgB,EAGhBjE,OAAO,CAACsJ,QAHQ,CAAlB;AAMAN,EAAAA,mBAAmB,GAAGtH,qBAAqB,CAAC6H,yBAAtB,CACpBP,mBADoB,EAEpBC,4BAFoB,CAAtB;;AAIA,MAAID,mBAAmB,KAAKtH,qBAAqB,CAAC8H,eAAlD,EAAmE;AACjER,IAAAA,mBAAmB,GAAGjJ,yBAAyB,CAAC0J,wBAA1B,CACpBzI,eAAe,CAAC0I,gBAAhB,CAAiCrF,OAAjC,EAA0CnC,gBAA1C,CADoB,EAEpByH,oBAFF;AAGD;;AAEDtF,EAAAA,OAAO,CAACtB,cAAR,GAAyBiG,mBAAzB;AACD,CA9FD;;AA+FA,eAAe5F,sBAAf","sourcesContent":["import ApproximateTerrainHeights from \"../Core/ApproximateTerrainHeights.js\";\nimport ArcType from \"../Core/ArcType.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport CoplanarPolygonGeometry from \"../Core/CoplanarPolygonGeometry.js\";\nimport CoplanarPolygonOutlineGeometry from \"../Core/CoplanarPolygonOutlineGeometry.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport EllipsoidTangentPlane from \"../Core/EllipsoidTangentPlane.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport oneTimeWarning from \"../Core/oneTimeWarning.js\";\nimport PolygonGeometry from \"../Core/PolygonGeometry.js\";\nimport PolygonOutlineGeometry from \"../Core/PolygonOutlineGeometry.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport GroundGeometryUpdater from \"./GroundGeometryUpdater.js\";\nimport Property from \"./Property.js\";\n\nvar heightAndPerPositionHeightWarning =\n  \"Entity polygons cannot have both height and perPositionHeight.  height will be ignored\";\nvar heightReferenceAndPerPositionHeightWarning =\n  \"heightReference is not supported for entity polygons with perPositionHeight. heightReference will be ignored\";\n\nvar scratchColor = new Color();\nvar defaultOffset = Cartesian3.ZERO;\nvar offsetScratch = new Cartesian3();\nvar scratchRectangle = new Rectangle();\nvar scratch2DPositions = [];\nvar cart2Scratch = new Cartesian2();\n\nfunction PolygonGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.polygonHierarchy = undefined;\n  this.perPositionHeight = undefined;\n  this.closeTop = undefined;\n  this.closeBottom = undefined;\n  this.height = undefined;\n  this.extrudedHeight = undefined;\n  this.granularity = undefined;\n  this.stRotation = undefined;\n  this.offsetAttribute = undefined;\n  this.arcType = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for polygons.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias PolygonGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction PolygonGeometryUpdater(entity, scene) {\n  GroundGeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new PolygonGeometryOptions(entity),\n    geometryPropertyName: \"polygon\",\n    observedPropertyNames: [\"availability\", \"polygon\"],\n  });\n\n  this._onEntityPropertyChanged(entity, \"polygon\", entity.polygon, undefined);\n}\n\nif (defined(Object.create)) {\n  PolygonGeometryUpdater.prototype = Object.create(\n    GroundGeometryUpdater.prototype\n  );\n  PolygonGeometryUpdater.prototype.constructor = PolygonGeometryUpdater;\n}\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nPolygonGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent a filled geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n  var options = this._options;\n\n  var attributes = {\n    show: new ShowGeometryInstanceAttribute(\n      isAvailable &&\n        entity.isShowing &&\n        this._showProperty.getValue(time) &&\n        this._fillProperty.getValue(time)\n    ),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n      this._distanceDisplayConditionProperty.getValue(time)\n    ),\n    offset: undefined,\n    color: undefined,\n  };\n\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    var currentColor;\n    if (\n      defined(this._materialProperty.color) &&\n      (this._materialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n  }\n  if (defined(options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch\n      )\n    );\n  }\n\n  var geometry;\n  if (options.perPositionHeight && !defined(options.extrudedHeight)) {\n    geometry = new CoplanarPolygonGeometry(options);\n  } else {\n    geometry = new PolygonGeometry(options);\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: geometry,\n    attributes: attributes,\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nPolygonGeometryUpdater.prototype.createOutlineGeometryInstance = function (\n  time\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent an outlined geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n  var options = this._options;\n  var outlineColor = Property.getValueOrDefault(\n    this._outlineColorProperty,\n    time,\n    Color.BLACK,\n    scratchColor\n  );\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n\n  var attributes = {\n    show: new ShowGeometryInstanceAttribute(\n      isAvailable &&\n        entity.isShowing &&\n        this._showProperty.getValue(time) &&\n        this._showOutlineProperty.getValue(time)\n    ),\n    color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n      distanceDisplayCondition\n    ),\n    offset: undefined,\n  };\n\n  if (defined(options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch\n      )\n    );\n  }\n\n  var geometry;\n  if (options.perPositionHeight && !defined(options.extrudedHeight)) {\n    geometry = new CoplanarPolygonOutlineGeometry(options);\n  } else {\n    geometry = new PolygonOutlineGeometry(options);\n  }\n  return new GeometryInstance({\n    id: entity,\n    geometry: geometry,\n    attributes: attributes,\n  });\n};\n\nPolygonGeometryUpdater.prototype._computeCenter = function (time, result) {\n  var hierarchy = Property.getValueOrUndefined(\n    this._entity.polygon.hierarchy,\n    time\n  );\n  if (!defined(hierarchy)) {\n    return;\n  }\n  var positions = hierarchy.positions;\n  if (positions.length === 0) {\n    return;\n  }\n  var ellipsoid = this._scene.mapProjection.ellipsoid;\n\n  var tangentPlane = EllipsoidTangentPlane.fromPoints(positions, ellipsoid);\n  var positions2D = tangentPlane.projectPointsOntoPlane(\n    positions,\n    scratch2DPositions\n  );\n\n  var length = positions2D.length;\n  var area = 0;\n  var j = length - 1;\n  var centroid2D = new Cartesian2();\n  for (var i = 0; i < length; j = i++) {\n    var p1 = positions2D[i];\n    var p2 = positions2D[j];\n    var f = p1.x * p2.y - p2.x * p1.y;\n\n    var sum = Cartesian2.add(p1, p2, cart2Scratch);\n    sum = Cartesian2.multiplyByScalar(sum, f, sum);\n    centroid2D = Cartesian2.add(centroid2D, sum, centroid2D);\n\n    area += f;\n  }\n\n  var a = 1.0 / (area * 3.0);\n  centroid2D = Cartesian2.multiplyByScalar(centroid2D, a, centroid2D);\n  return tangentPlane.projectPointOntoEllipsoid(centroid2D, result);\n};\n\nPolygonGeometryUpdater.prototype._isHidden = function (entity, polygon) {\n  return (\n    !defined(polygon.hierarchy) ||\n    GeometryUpdater.prototype._isHidden.call(this, entity, polygon)\n  );\n};\n\nPolygonGeometryUpdater.prototype._isOnTerrain = function (entity, polygon) {\n  var onTerrain = GroundGeometryUpdater.prototype._isOnTerrain.call(\n    this,\n    entity,\n    polygon\n  );\n  var perPositionHeightProperty = polygon.perPositionHeight;\n  var perPositionHeightEnabled =\n    defined(perPositionHeightProperty) &&\n    (perPositionHeightProperty.isConstant\n      ? perPositionHeightProperty.getValue(Iso8601.MINIMUM_VALUE)\n      : true);\n  return onTerrain && !perPositionHeightEnabled;\n};\n\nPolygonGeometryUpdater.prototype._isDynamic = function (entity, polygon) {\n  return (\n    !polygon.hierarchy.isConstant || //\n    !Property.isConstant(polygon.height) || //\n    !Property.isConstant(polygon.extrudedHeight) || //\n    !Property.isConstant(polygon.granularity) || //\n    !Property.isConstant(polygon.stRotation) || //\n    !Property.isConstant(polygon.outlineWidth) || //\n    !Property.isConstant(polygon.perPositionHeight) || //\n    !Property.isConstant(polygon.closeTop) || //\n    !Property.isConstant(polygon.closeBottom) || //\n    !Property.isConstant(polygon.zIndex) || //\n    !Property.isConstant(polygon.arcType) || //\n    (this._onTerrain &&\n      !Property.isConstant(this._materialProperty) &&\n      !(this._materialProperty instanceof ColorMaterialProperty))\n  );\n};\n\nPolygonGeometryUpdater.prototype._setStaticOptions = function (\n  entity,\n  polygon\n) {\n  var isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n\n  var options = this._options;\n  options.vertexFormat = isColorMaterial\n    ? PerInstanceColorAppearance.VERTEX_FORMAT\n    : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n\n  var hierarchyValue = polygon.hierarchy.getValue(Iso8601.MINIMUM_VALUE);\n  var heightValue = Property.getValueOrUndefined(\n    polygon.height,\n    Iso8601.MINIMUM_VALUE\n  );\n  var heightReferenceValue = Property.getValueOrDefault(\n    polygon.heightReference,\n    Iso8601.MINIMUM_VALUE,\n    HeightReference.NONE\n  );\n  var extrudedHeightValue = Property.getValueOrUndefined(\n    polygon.extrudedHeight,\n    Iso8601.MINIMUM_VALUE\n  );\n  var extrudedHeightReferenceValue = Property.getValueOrDefault(\n    polygon.extrudedHeightReference,\n    Iso8601.MINIMUM_VALUE,\n    HeightReference.NONE\n  );\n  var perPositionHeightValue = Property.getValueOrDefault(\n    polygon.perPositionHeight,\n    Iso8601.MINIMUM_VALUE,\n    false\n  );\n\n  heightValue = GroundGeometryUpdater.getGeometryHeight(\n    heightValue,\n    heightReferenceValue\n  );\n\n  var offsetAttribute;\n  if (perPositionHeightValue) {\n    if (defined(heightValue)) {\n      heightValue = undefined;\n      oneTimeWarning(heightAndPerPositionHeightWarning);\n    }\n    if (\n      heightReferenceValue !== HeightReference.NONE &&\n      perPositionHeightValue\n    ) {\n      heightValue = undefined;\n      oneTimeWarning(heightReferenceAndPerPositionHeightWarning);\n    }\n  } else {\n    if (defined(extrudedHeightValue) && !defined(heightValue)) {\n      heightValue = 0;\n    }\n    offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(\n      heightValue,\n      heightReferenceValue,\n      extrudedHeightValue,\n      extrudedHeightReferenceValue\n    );\n  }\n\n  options.polygonHierarchy = hierarchyValue;\n  options.granularity = Property.getValueOrUndefined(\n    polygon.granularity,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.stRotation = Property.getValueOrUndefined(\n    polygon.stRotation,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.perPositionHeight = perPositionHeightValue;\n  options.closeTop = Property.getValueOrDefault(\n    polygon.closeTop,\n    Iso8601.MINIMUM_VALUE,\n    true\n  );\n  options.closeBottom = Property.getValueOrDefault(\n    polygon.closeBottom,\n    Iso8601.MINIMUM_VALUE,\n    true\n  );\n  options.offsetAttribute = offsetAttribute;\n  options.height = heightValue;\n  options.arcType = Property.getValueOrDefault(\n    polygon.arcType,\n    Iso8601.MINIMUM_VALUE,\n    ArcType.GEODESIC\n  );\n\n  extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(\n    extrudedHeightValue,\n    extrudedHeightReferenceValue\n  );\n  if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n    extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(\n      PolygonGeometry.computeRectangle(options, scratchRectangle)\n    ).minimumTerrainHeight;\n  }\n\n  options.extrudedHeight = extrudedHeightValue;\n};\n\nPolygonGeometryUpdater.prototype._getIsClosed = function (options) {\n  var height = options.height;\n  var extrudedHeight = options.extrudedHeight;\n  var isExtruded = defined(extrudedHeight) && extrudedHeight !== height;\n  return (\n    !options.perPositionHeight &&\n    ((!isExtruded && height === 0) ||\n      (isExtruded && options.closeTop && options.closeBottom))\n  );\n};\n\nPolygonGeometryUpdater.DynamicGeometryUpdater = DyanmicPolygonGeometryUpdater;\n\n/**\n * @private\n */\nfunction DyanmicPolygonGeometryUpdater(\n  geometryUpdater,\n  primitives,\n  groundPrimitives\n) {\n  DynamicGeometryUpdater.call(\n    this,\n    geometryUpdater,\n    primitives,\n    groundPrimitives\n  );\n}\n\nif (defined(Object.create)) {\n  DyanmicPolygonGeometryUpdater.prototype = Object.create(\n    DynamicGeometryUpdater.prototype\n  );\n  DyanmicPolygonGeometryUpdater.prototype.constructor = DyanmicPolygonGeometryUpdater;\n}\n\nDyanmicPolygonGeometryUpdater.prototype._isHidden = function (\n  entity,\n  polygon,\n  time\n) {\n  return (\n    !defined(this._options.polygonHierarchy) ||\n    DynamicGeometryUpdater.prototype._isHidden.call(this, entity, polygon, time)\n  );\n};\n\nDyanmicPolygonGeometryUpdater.prototype._setOptions = function (\n  entity,\n  polygon,\n  time\n) {\n  var options = this._options;\n\n  options.polygonHierarchy = Property.getValueOrUndefined(\n    polygon.hierarchy,\n    time\n  );\n\n  var heightValue = Property.getValueOrUndefined(polygon.height, time);\n  var heightReferenceValue = Property.getValueOrDefault(\n    polygon.heightReference,\n    time,\n    HeightReference.NONE\n  );\n  var extrudedHeightReferenceValue = Property.getValueOrDefault(\n    polygon.extrudedHeightReference,\n    time,\n    HeightReference.NONE\n  );\n  var extrudedHeightValue = Property.getValueOrUndefined(\n    polygon.extrudedHeight,\n    time\n  );\n  var perPositionHeightValue = Property.getValueOrUndefined(\n    polygon.perPositionHeight,\n    time\n  );\n\n  heightValue = GroundGeometryUpdater.getGeometryHeight(\n    heightValue,\n    extrudedHeightReferenceValue\n  );\n\n  var offsetAttribute;\n  if (perPositionHeightValue) {\n    if (defined(heightValue)) {\n      heightValue = undefined;\n      oneTimeWarning(heightAndPerPositionHeightWarning);\n    }\n    if (\n      heightReferenceValue !== HeightReference.NONE &&\n      perPositionHeightValue\n    ) {\n      heightValue = undefined;\n      oneTimeWarning(heightReferenceAndPerPositionHeightWarning);\n    }\n  } else {\n    if (defined(extrudedHeightValue) && !defined(heightValue)) {\n      heightValue = 0;\n    }\n\n    offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(\n      heightValue,\n      heightReferenceValue,\n      extrudedHeightValue,\n      extrudedHeightReferenceValue\n    );\n  }\n\n  options.granularity = Property.getValueOrUndefined(polygon.granularity, time);\n  options.stRotation = Property.getValueOrUndefined(polygon.stRotation, time);\n  options.perPositionHeight = Property.getValueOrUndefined(\n    polygon.perPositionHeight,\n    time\n  );\n  options.closeTop = Property.getValueOrDefault(polygon.closeTop, time, true);\n  options.closeBottom = Property.getValueOrDefault(\n    polygon.closeBottom,\n    time,\n    true\n  );\n  options.offsetAttribute = offsetAttribute;\n  options.height = heightValue;\n  options.arcType = Property.getValueOrDefault(\n    polygon.arcType,\n    time,\n    ArcType.GEODESIC\n  );\n\n  extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(\n    extrudedHeightValue,\n    extrudedHeightReferenceValue\n  );\n  if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n    extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(\n      PolygonGeometry.computeRectangle(options, scratchRectangle)\n    ).minimumTerrainHeight;\n  }\n\n  options.extrudedHeight = extrudedHeightValue;\n};\nexport default PolygonGeometryUpdater;\n"]},"metadata":{},"sourceType":"module"}