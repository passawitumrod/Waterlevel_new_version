{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport PrimitiveType from \"../Core/PrimitiveType.js\";\n/**\n * Represents a command to the renderer for drawing.\n *\n * @private\n */\n\nfunction DrawCommand(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._boundingVolume = options.boundingVolume;\n  this._orientedBoundingBox = options.orientedBoundingBox;\n  this._cull = defaultValue(options.cull, true);\n  this._occlude = defaultValue(options.occlude, true);\n  this._modelMatrix = options.modelMatrix;\n  this._primitiveType = defaultValue(options.primitiveType, PrimitiveType.TRIANGLES);\n  this._vertexArray = options.vertexArray;\n  this._count = options.count;\n  this._offset = defaultValue(options.offset, 0);\n  this._instanceCount = defaultValue(options.instanceCount, 0);\n  this._shaderProgram = options.shaderProgram;\n  this._uniformMap = options.uniformMap;\n  this._renderState = options.renderState;\n  this._framebuffer = options.framebuffer;\n  this._pass = options.pass;\n  this._executeInClosestFrustum = defaultValue(options.executeInClosestFrustum, false);\n  this._owner = options.owner;\n  this._debugShowBoundingVolume = defaultValue(options.debugShowBoundingVolume, false);\n  this._debugOverlappingFrustums = 0;\n  this._castShadows = defaultValue(options.castShadows, false);\n  this._receiveShadows = defaultValue(options.receiveShadows, false);\n  this._pickId = options.pickId;\n  this._pickOnly = defaultValue(options.pickOnly, false);\n  this.dirty = true;\n  this.lastDirtyTime = 0;\n  /**\n   * @private\n   */\n\n  this.derivedCommands = {};\n}\n\nObject.defineProperties(DrawCommand.prototype, {\n  /**\n   * The bounding volume of the geometry in world space.  This is used for culling and frustum selection.\n   * <p>\n   * For best rendering performance, use the tightest possible bounding volume.  Although\n   * <code>undefined</code> is allowed, always try to provide a bounding volume to\n   * allow the tightest possible near and far planes to be computed for the scene, and\n   * minimize the number of frustums needed.\n   * </p>\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Object}\n   * @default undefined\n   *\n   * @see DrawCommand#debugShowBoundingVolume\n   */\n  boundingVolume: {\n    get: function () {\n      return this._boundingVolume;\n    },\n    set: function (value) {\n      if (this._boundingVolume !== value) {\n        this._boundingVolume = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * The oriented bounding box of the geometry in world space. If this is defined, it is used instead of\n   * {@link DrawCommand#boundingVolume} for plane intersection testing.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {OrientedBoundingBox}\n   * @default undefined\n   *\n   * @see DrawCommand#debugShowBoundingVolume\n   */\n  orientedBoundingBox: {\n    get: function () {\n      return this._orientedBoundingBox;\n    },\n    set: function (value) {\n      if (this._orientedBoundingBox !== value) {\n        this._orientedBoundingBox = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * When <code>true</code>, the renderer frustum and horizon culls the command based on its {@link DrawCommand#boundingVolume}.\n   * If the command was already culled, set this to <code>false</code> for a performance improvement.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default true\n   */\n  cull: {\n    get: function () {\n      return this._cull;\n    },\n    set: function (value) {\n      if (this._cull !== value) {\n        this._cull = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * When <code>true</code>, the horizon culls the command based on its {@link DrawCommand#boundingVolume}.\n   * {@link DrawCommand#cull} must also be <code>true</code> in order for the command to be culled.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default true\n   */\n  occlude: {\n    get: function () {\n      return this._occlude;\n    },\n    set: function (value) {\n      if (this._occlude !== value) {\n        this._occlude = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * The transformation from the geometry in model space to world space.\n   * <p>\n   * When <code>undefined</code>, the geometry is assumed to be defined in world space.\n   * </p>\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Matrix4}\n   * @default undefined\n   */\n  modelMatrix: {\n    get: function () {\n      return this._modelMatrix;\n    },\n    set: function (value) {\n      if (this._modelMatrix !== value) {\n        this._modelMatrix = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * The type of geometry in the vertex array.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {PrimitiveType}\n   * @default PrimitiveType.TRIANGLES\n   */\n  primitiveType: {\n    get: function () {\n      return this._primitiveType;\n    },\n    set: function (value) {\n      if (this._primitiveType !== value) {\n        this._primitiveType = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * The vertex array.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {VertexArray}\n   * @default undefined\n   */\n  vertexArray: {\n    get: function () {\n      return this._vertexArray;\n    },\n    set: function (value) {\n      if (this._vertexArray !== value) {\n        this._vertexArray = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * The number of vertices to draw in the vertex array.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Number}\n   * @default undefined\n   */\n  count: {\n    get: function () {\n      return this._count;\n    },\n    set: function (value) {\n      if (this._count !== value) {\n        this._count = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * The offset to start drawing in the vertex array.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Number}\n   * @default 0\n   */\n  offset: {\n    get: function () {\n      return this._offset;\n    },\n    set: function (value) {\n      if (this._offset !== value) {\n        this._offset = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * The number of instances to draw.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Number}\n   * @default 0\n   */\n  instanceCount: {\n    get: function () {\n      return this._instanceCount;\n    },\n    set: function (value) {\n      if (this._instanceCount !== value) {\n        this._instanceCount = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * The shader program to apply.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {ShaderProgram}\n   * @default undefined\n   */\n  shaderProgram: {\n    get: function () {\n      return this._shaderProgram;\n    },\n    set: function (value) {\n      if (this._shaderProgram !== value) {\n        this._shaderProgram = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * Whether this command should cast shadows when shadowing is enabled.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  castShadows: {\n    get: function () {\n      return this._castShadows;\n    },\n    set: function (value) {\n      if (this._castShadows !== value) {\n        this._castShadows = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * Whether this command should receive shadows when shadowing is enabled.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  receiveShadows: {\n    get: function () {\n      return this._receiveShadows;\n    },\n    set: function (value) {\n      if (this._receiveShadows !== value) {\n        this._receiveShadows = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * An object with functions whose names match the uniforms in the shader program\n   * and return values to set those uniforms.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Object}\n   * @default undefined\n   */\n  uniformMap: {\n    get: function () {\n      return this._uniformMap;\n    },\n    set: function (value) {\n      if (this._uniformMap !== value) {\n        this._uniformMap = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * The render state.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {RenderState}\n   * @default undefined\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    },\n    set: function (value) {\n      if (this._renderState !== value) {\n        this._renderState = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * The framebuffer to draw to.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Framebuffer}\n   * @default undefined\n   */\n  framebuffer: {\n    get: function () {\n      return this._framebuffer;\n    },\n    set: function (value) {\n      if (this._framebuffer !== value) {\n        this._framebuffer = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * The pass when to render.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Pass}\n   * @default undefined\n   */\n  pass: {\n    get: function () {\n      return this._pass;\n    },\n    set: function (value) {\n      if (this._pass !== value) {\n        this._pass = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * Specifies if this command is only to be executed in the frustum closest\n   * to the eye containing the bounding volume. Defaults to <code>false</code>.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  executeInClosestFrustum: {\n    get: function () {\n      return this._executeInClosestFrustum;\n    },\n    set: function (value) {\n      if (this._executeInClosestFrustum !== value) {\n        this._executeInClosestFrustum = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * The object who created this command.  This is useful for debugging command\n   * execution; it allows us to see who created a command when we only have a\n   * reference to the command, and can be used to selectively execute commands\n   * with {@link Scene#debugCommandFilter}.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Object}\n   * @default undefined\n   *\n   * @see Scene#debugCommandFilter\n   */\n  owner: {\n    get: function () {\n      return this._owner;\n    },\n    set: function (value) {\n      if (this._owner !== value) {\n        this._owner = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the {@link DrawCommand#boundingVolume} for this command, assuming it is a sphere, when the command executes.\n   * </p>\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default false\n   *\n   * @see DrawCommand#boundingVolume\n   */\n  debugShowBoundingVolume: {\n    get: function () {\n      return this._debugShowBoundingVolume;\n    },\n    set: function (value) {\n      if (this._debugShowBoundingVolume !== value) {\n        this._debugShowBoundingVolume = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * Used to implement Scene.debugShowFrustums.\n   * @private\n   */\n  debugOverlappingFrustums: {\n    get: function () {\n      return this._debugOverlappingFrustums;\n    },\n    set: function (value) {\n      if (this._debugOverlappingFrustums !== value) {\n        this._debugOverlappingFrustums = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * A GLSL string that will evaluate to a pick id. When <code>undefined</code>, the command will only draw depth\n   * during the pick pass.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {String}\n   * @default undefined\n   */\n  pickId: {\n    get: function () {\n      return this._pickId;\n    },\n    set: function (value) {\n      if (this._pickId !== value) {\n        this._pickId = value;\n        this.dirty = true;\n      }\n    }\n  },\n\n  /**\n   * Whether this command should be executed in the pick pass only.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  pickOnly: {\n    get: function () {\n      return this._pickOnly;\n    },\n    set: function (value) {\n      if (this._pickOnly !== value) {\n        this._pickOnly = value;\n        this.dirty = true;\n      }\n    }\n  }\n});\n/**\n * @private\n */\n\nDrawCommand.shallowClone = function (command, result) {\n  if (!defined(command)) {\n    return undefined;\n  }\n\n  if (!defined(result)) {\n    result = new DrawCommand();\n  }\n\n  result._boundingVolume = command._boundingVolume;\n  result._orientedBoundingBox = command._orientedBoundingBox;\n  result._cull = command._cull;\n  result._occlude = command._occlude;\n  result._modelMatrix = command._modelMatrix;\n  result._primitiveType = command._primitiveType;\n  result._vertexArray = command._vertexArray;\n  result._count = command._count;\n  result._offset = command._offset;\n  result._instanceCount = command._instanceCount;\n  result._shaderProgram = command._shaderProgram;\n  result._uniformMap = command._uniformMap;\n  result._renderState = command._renderState;\n  result._framebuffer = command._framebuffer;\n  result._pass = command._pass;\n  result._executeInClosestFrustum = command._executeInClosestFrustum;\n  result._owner = command._owner;\n  result._debugShowBoundingVolume = command._debugShowBoundingVolume;\n  result._debugOverlappingFrustums = command._debugOverlappingFrustums;\n  result._castShadows = command._castShadows;\n  result._receiveShadows = command._receiveShadows;\n  result._pickId = command._pickId;\n  result._pickOnly = command._pickOnly;\n  result.dirty = true;\n  result.lastDirtyTime = 0;\n  return result;\n};\n/**\n * Executes the draw command.\n *\n * @param {Context} context The renderer context in which to draw.\n * @param {PassState} [passState] The state for the current render pass.\n */\n\n\nDrawCommand.prototype.execute = function (context, passState) {\n  context.draw(this, passState);\n};\n\nexport default DrawCommand;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Renderer/DrawCommand.js"],"names":["defaultValue","defined","PrimitiveType","DrawCommand","options","EMPTY_OBJECT","_boundingVolume","boundingVolume","_orientedBoundingBox","orientedBoundingBox","_cull","cull","_occlude","occlude","_modelMatrix","modelMatrix","_primitiveType","primitiveType","TRIANGLES","_vertexArray","vertexArray","_count","count","_offset","offset","_instanceCount","instanceCount","_shaderProgram","shaderProgram","_uniformMap","uniformMap","_renderState","renderState","_framebuffer","framebuffer","_pass","pass","_executeInClosestFrustum","executeInClosestFrustum","_owner","owner","_debugShowBoundingVolume","debugShowBoundingVolume","_debugOverlappingFrustums","_castShadows","castShadows","_receiveShadows","receiveShadows","_pickId","pickId","_pickOnly","pickOnly","dirty","lastDirtyTime","derivedCommands","Object","defineProperties","prototype","get","set","value","debugOverlappingFrustums","shallowClone","command","result","undefined","execute","context","passState","draw"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport PrimitiveType from \"../Core/PrimitiveType.js\";\n\n/**\n * Represents a command to the renderer for drawing.\n *\n * @private\n */\nfunction DrawCommand(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._boundingVolume = options.boundingVolume;\n  this._orientedBoundingBox = options.orientedBoundingBox;\n  this._cull = defaultValue(options.cull, true);\n  this._occlude = defaultValue(options.occlude, true);\n  this._modelMatrix = options.modelMatrix;\n  this._primitiveType = defaultValue(\n    options.primitiveType,\n    PrimitiveType.TRIANGLES\n  );\n  this._vertexArray = options.vertexArray;\n  this._count = options.count;\n  this._offset = defaultValue(options.offset, 0);\n  this._instanceCount = defaultValue(options.instanceCount, 0);\n  this._shaderProgram = options.shaderProgram;\n  this._uniformMap = options.uniformMap;\n  this._renderState = options.renderState;\n  this._framebuffer = options.framebuffer;\n  this._pass = options.pass;\n  this._executeInClosestFrustum = defaultValue(\n    options.executeInClosestFrustum,\n    false\n  );\n  this._owner = options.owner;\n  this._debugShowBoundingVolume = defaultValue(\n    options.debugShowBoundingVolume,\n    false\n  );\n  this._debugOverlappingFrustums = 0;\n  this._castShadows = defaultValue(options.castShadows, false);\n  this._receiveShadows = defaultValue(options.receiveShadows, false);\n  this._pickId = options.pickId;\n  this._pickOnly = defaultValue(options.pickOnly, false);\n\n  this.dirty = true;\n  this.lastDirtyTime = 0;\n\n  /**\n   * @private\n   */\n  this.derivedCommands = {};\n}\n\nObject.defineProperties(DrawCommand.prototype, {\n  /**\n   * The bounding volume of the geometry in world space.  This is used for culling and frustum selection.\n   * <p>\n   * For best rendering performance, use the tightest possible bounding volume.  Although\n   * <code>undefined</code> is allowed, always try to provide a bounding volume to\n   * allow the tightest possible near and far planes to be computed for the scene, and\n   * minimize the number of frustums needed.\n   * </p>\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Object}\n   * @default undefined\n   *\n   * @see DrawCommand#debugShowBoundingVolume\n   */\n  boundingVolume: {\n    get: function () {\n      return this._boundingVolume;\n    },\n    set: function (value) {\n      if (this._boundingVolume !== value) {\n        this._boundingVolume = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The oriented bounding box of the geometry in world space. If this is defined, it is used instead of\n   * {@link DrawCommand#boundingVolume} for plane intersection testing.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {OrientedBoundingBox}\n   * @default undefined\n   *\n   * @see DrawCommand#debugShowBoundingVolume\n   */\n  orientedBoundingBox: {\n    get: function () {\n      return this._orientedBoundingBox;\n    },\n    set: function (value) {\n      if (this._orientedBoundingBox !== value) {\n        this._orientedBoundingBox = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * When <code>true</code>, the renderer frustum and horizon culls the command based on its {@link DrawCommand#boundingVolume}.\n   * If the command was already culled, set this to <code>false</code> for a performance improvement.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default true\n   */\n  cull: {\n    get: function () {\n      return this._cull;\n    },\n    set: function (value) {\n      if (this._cull !== value) {\n        this._cull = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * When <code>true</code>, the horizon culls the command based on its {@link DrawCommand#boundingVolume}.\n   * {@link DrawCommand#cull} must also be <code>true</code> in order for the command to be culled.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default true\n   */\n  occlude: {\n    get: function () {\n      return this._occlude;\n    },\n    set: function (value) {\n      if (this._occlude !== value) {\n        this._occlude = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The transformation from the geometry in model space to world space.\n   * <p>\n   * When <code>undefined</code>, the geometry is assumed to be defined in world space.\n   * </p>\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Matrix4}\n   * @default undefined\n   */\n  modelMatrix: {\n    get: function () {\n      return this._modelMatrix;\n    },\n    set: function (value) {\n      if (this._modelMatrix !== value) {\n        this._modelMatrix = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The type of geometry in the vertex array.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {PrimitiveType}\n   * @default PrimitiveType.TRIANGLES\n   */\n  primitiveType: {\n    get: function () {\n      return this._primitiveType;\n    },\n    set: function (value) {\n      if (this._primitiveType !== value) {\n        this._primitiveType = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The vertex array.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {VertexArray}\n   * @default undefined\n   */\n  vertexArray: {\n    get: function () {\n      return this._vertexArray;\n    },\n    set: function (value) {\n      if (this._vertexArray !== value) {\n        this._vertexArray = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The number of vertices to draw in the vertex array.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Number}\n   * @default undefined\n   */\n  count: {\n    get: function () {\n      return this._count;\n    },\n    set: function (value) {\n      if (this._count !== value) {\n        this._count = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The offset to start drawing in the vertex array.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Number}\n   * @default 0\n   */\n  offset: {\n    get: function () {\n      return this._offset;\n    },\n    set: function (value) {\n      if (this._offset !== value) {\n        this._offset = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The number of instances to draw.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Number}\n   * @default 0\n   */\n  instanceCount: {\n    get: function () {\n      return this._instanceCount;\n    },\n    set: function (value) {\n      if (this._instanceCount !== value) {\n        this._instanceCount = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The shader program to apply.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {ShaderProgram}\n   * @default undefined\n   */\n  shaderProgram: {\n    get: function () {\n      return this._shaderProgram;\n    },\n    set: function (value) {\n      if (this._shaderProgram !== value) {\n        this._shaderProgram = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * Whether this command should cast shadows when shadowing is enabled.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  castShadows: {\n    get: function () {\n      return this._castShadows;\n    },\n    set: function (value) {\n      if (this._castShadows !== value) {\n        this._castShadows = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * Whether this command should receive shadows when shadowing is enabled.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  receiveShadows: {\n    get: function () {\n      return this._receiveShadows;\n    },\n    set: function (value) {\n      if (this._receiveShadows !== value) {\n        this._receiveShadows = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * An object with functions whose names match the uniforms in the shader program\n   * and return values to set those uniforms.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Object}\n   * @default undefined\n   */\n  uniformMap: {\n    get: function () {\n      return this._uniformMap;\n    },\n    set: function (value) {\n      if (this._uniformMap !== value) {\n        this._uniformMap = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The render state.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {RenderState}\n   * @default undefined\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    },\n    set: function (value) {\n      if (this._renderState !== value) {\n        this._renderState = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The framebuffer to draw to.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Framebuffer}\n   * @default undefined\n   */\n  framebuffer: {\n    get: function () {\n      return this._framebuffer;\n    },\n    set: function (value) {\n      if (this._framebuffer !== value) {\n        this._framebuffer = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The pass when to render.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Pass}\n   * @default undefined\n   */\n  pass: {\n    get: function () {\n      return this._pass;\n    },\n    set: function (value) {\n      if (this._pass !== value) {\n        this._pass = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * Specifies if this command is only to be executed in the frustum closest\n   * to the eye containing the bounding volume. Defaults to <code>false</code>.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  executeInClosestFrustum: {\n    get: function () {\n      return this._executeInClosestFrustum;\n    },\n    set: function (value) {\n      if (this._executeInClosestFrustum !== value) {\n        this._executeInClosestFrustum = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The object who created this command.  This is useful for debugging command\n   * execution; it allows us to see who created a command when we only have a\n   * reference to the command, and can be used to selectively execute commands\n   * with {@link Scene#debugCommandFilter}.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Object}\n   * @default undefined\n   *\n   * @see Scene#debugCommandFilter\n   */\n  owner: {\n    get: function () {\n      return this._owner;\n    },\n    set: function (value) {\n      if (this._owner !== value) {\n        this._owner = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the {@link DrawCommand#boundingVolume} for this command, assuming it is a sphere, when the command executes.\n   * </p>\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default false\n   *\n   * @see DrawCommand#boundingVolume\n   */\n  debugShowBoundingVolume: {\n    get: function () {\n      return this._debugShowBoundingVolume;\n    },\n    set: function (value) {\n      if (this._debugShowBoundingVolume !== value) {\n        this._debugShowBoundingVolume = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * Used to implement Scene.debugShowFrustums.\n   * @private\n   */\n  debugOverlappingFrustums: {\n    get: function () {\n      return this._debugOverlappingFrustums;\n    },\n    set: function (value) {\n      if (this._debugOverlappingFrustums !== value) {\n        this._debugOverlappingFrustums = value;\n        this.dirty = true;\n      }\n    },\n  },\n  /**\n   * A GLSL string that will evaluate to a pick id. When <code>undefined</code>, the command will only draw depth\n   * during the pick pass.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {String}\n   * @default undefined\n   */\n  pickId: {\n    get: function () {\n      return this._pickId;\n    },\n    set: function (value) {\n      if (this._pickId !== value) {\n        this._pickId = value;\n        this.dirty = true;\n      }\n    },\n  },\n  /**\n   * Whether this command should be executed in the pick pass only.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  pickOnly: {\n    get: function () {\n      return this._pickOnly;\n    },\n    set: function (value) {\n      if (this._pickOnly !== value) {\n        this._pickOnly = value;\n        this.dirty = true;\n      }\n    },\n  },\n});\n\n/**\n * @private\n */\nDrawCommand.shallowClone = function (command, result) {\n  if (!defined(command)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    result = new DrawCommand();\n  }\n\n  result._boundingVolume = command._boundingVolume;\n  result._orientedBoundingBox = command._orientedBoundingBox;\n  result._cull = command._cull;\n  result._occlude = command._occlude;\n  result._modelMatrix = command._modelMatrix;\n  result._primitiveType = command._primitiveType;\n  result._vertexArray = command._vertexArray;\n  result._count = command._count;\n  result._offset = command._offset;\n  result._instanceCount = command._instanceCount;\n  result._shaderProgram = command._shaderProgram;\n  result._uniformMap = command._uniformMap;\n  result._renderState = command._renderState;\n  result._framebuffer = command._framebuffer;\n  result._pass = command._pass;\n  result._executeInClosestFrustum = command._executeInClosestFrustum;\n  result._owner = command._owner;\n  result._debugShowBoundingVolume = command._debugShowBoundingVolume;\n  result._debugOverlappingFrustums = command._debugOverlappingFrustums;\n  result._castShadows = command._castShadows;\n  result._receiveShadows = command._receiveShadows;\n  result._pickId = command._pickId;\n  result._pickOnly = command._pickOnly;\n\n  result.dirty = true;\n  result.lastDirtyTime = 0;\n\n  return result;\n};\n\n/**\n * Executes the draw command.\n *\n * @param {Context} context The renderer context in which to draw.\n * @param {PassState} [passState] The state for the current render pass.\n */\nDrawCommand.prototype.execute = function (context, passState) {\n  context.draw(this, passState);\n};\nexport default DrawCommand;\n"]},"metadata":{},"sourceType":"module"}