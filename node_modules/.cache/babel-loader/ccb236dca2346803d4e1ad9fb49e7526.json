{"ast":null,"code":"import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport RequestState from \"./RequestState.js\";\nimport RequestType from \"./RequestType.js\";\n/**\n * Stores information for making a request. In general this does not need to be constructed directly.\n *\n * @alias Request\n * @constructor\n * @namespace\n * @exports Request\n * @param {Object} [options] An object with the following properties:\n * @param {String} [options.url] The url to request.\n * @param {Request~RequestCallback} [options.requestFunction] The function that makes the actual data request.\n * @param {Request~CancelCallback} [options.cancelFunction] The function that is called when the request is cancelled.\n * @param {Request~PriorityCallback} [options.priorityFunction] The function that is called to update the request's priority, which occurs once per frame.\n * @param {Number} [options.priority=0.0] The initial priority of the request.\n * @param {Boolean} [options.throttle=false] Whether to throttle and prioritize the request. If false, the request will be sent immediately. If true, the request will be throttled and sent based on priority.\n * @param {Boolean} [options.throttleByServer=false] Whether to throttle the request by server.\n * @param {RequestType} [options.type=RequestType.OTHER] The type of request.\n */\n\nfunction Request(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var throttleByServer = defaultValue(options.throttleByServer, false);\n  var throttle = defaultValue(options.throttle, false);\n  /**\n   * The URL to request.\n   *\n   * @type {String}\n   */\n\n  this.url = options.url;\n  /**\n   * The function that makes the actual data request.\n   *\n   * @type {Request~RequestCallback}\n   */\n\n  this.requestFunction = options.requestFunction;\n  /**\n   * The function that is called when the request is cancelled.\n   *\n   * @type {Request~CancelCallback}\n   */\n\n  this.cancelFunction = options.cancelFunction;\n  /**\n   * The function that is called to update the request's priority, which occurs once per frame.\n   *\n   * @type {Request~PriorityCallback}\n   */\n\n  this.priorityFunction = options.priorityFunction;\n  /**\n   * Priority is a unit-less value where lower values represent higher priority.\n   * For world-based objects, this is usually the distance from the camera.\n   * A request that does not have a priority function defaults to a priority of 0.\n   *\n   * If priorityFunction is defined, this value is updated every frame with the result of that call.\n   *\n   * @type {Number}\n   * @default 0.0\n   */\n\n  this.priority = defaultValue(options.priority, 0.0);\n  /**\n   * Whether to throttle and prioritize the request. If false, the request will be sent immediately. If true, the\n   * request will be throttled and sent based on priority.\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n\n  this.throttle = throttle;\n  /**\n   * Whether to throttle the request by server. Browsers typically support about 6-8 parallel connections\n   * for HTTP/1 servers, and an unlimited amount of connections for HTTP/2 servers. Setting this value\n   * to <code>true</code> is preferable for requests going through HTTP/1 servers.\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n\n  this.throttleByServer = throttleByServer;\n  /**\n   * Type of request.\n   *\n   * @type {RequestType}\n   * @readonly\n   *\n   * @default RequestType.OTHER\n   */\n\n  this.type = defaultValue(options.type, RequestType.OTHER);\n  /**\n   * A key used to identify the server that a request is going to. It is derived from the url's authority and scheme.\n   *\n   * @type {String}\n   *\n   * @private\n   */\n\n  this.serverKey = undefined;\n  /**\n   * The current state of the request.\n   *\n   * @type {RequestState}\n   * @readonly\n   */\n\n  this.state = RequestState.UNISSUED;\n  /**\n   * The requests's deferred promise.\n   *\n   * @type {Object}\n   *\n   * @private\n   */\n\n  this.deferred = undefined;\n  /**\n   * Whether the request was explicitly cancelled.\n   *\n   * @type {Boolean}\n   *\n   * @private\n   */\n\n  this.cancelled = false;\n}\n/**\n * Mark the request as cancelled.\n *\n * @private\n */\n\n\nRequest.prototype.cancel = function () {\n  this.cancelled = true;\n};\n/**\n * Duplicates a Request instance.\n *\n * @param {Request} [result] The object onto which to store the result.\n *\n * @returns {Request} The modified result parameter or a new Resource instance if one was not provided.\n */\n\n\nRequest.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new Request(this);\n  }\n\n  result.url = this.url;\n  result.requestFunction = this.requestFunction;\n  result.cancelFunction = this.cancelFunction;\n  result.priorityFunction = this.priorityFunction;\n  result.priority = this.priority;\n  result.throttle = this.throttle;\n  result.throttleByServer = this.throttleByServer;\n  result.type = this.type;\n  result.serverKey = this.serverKey; // These get defaulted because the cloned request hasn't been issued\n\n  result.state = this.RequestState.UNISSUED;\n  result.deferred = undefined;\n  result.cancelled = false;\n  return result;\n};\n/**\n * The function that makes the actual data request.\n * @callback Request~RequestCallback\n * @returns {Promise} A promise for the requested data.\n */\n\n/**\n * The function that is called when the request is cancelled.\n * @callback Request~CancelCallback\n */\n\n/**\n * The function that is called to update the request's priority, which occurs once per frame.\n * @callback Request~PriorityCallback\n * @returns {Number} The updated priority value.\n */\n\n\nexport default Request;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/Request.js"],"names":["defaultValue","defined","RequestState","RequestType","Request","options","EMPTY_OBJECT","throttleByServer","throttle","url","requestFunction","cancelFunction","priorityFunction","priority","type","OTHER","serverKey","undefined","state","UNISSUED","deferred","cancelled","prototype","cancel","clone","result"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AAEA;;;;;;;;;;;;;;;;;;AAiBA,SAASC,OAAT,CAAiBC,OAAjB,EAA0B;AACxBA,EAAAA,OAAO,GAAGL,YAAY,CAACK,OAAD,EAAUL,YAAY,CAACM,YAAvB,CAAtB;AAEA,MAAIC,gBAAgB,GAAGP,YAAY,CAACK,OAAO,CAACE,gBAAT,EAA2B,KAA3B,CAAnC;AACA,MAAIC,QAAQ,GAAGR,YAAY,CAACK,OAAO,CAACG,QAAT,EAAmB,KAAnB,CAA3B;AAEA;;;;;;AAKA,OAAKC,GAAL,GAAWJ,OAAO,CAACI,GAAnB;AAEA;;;;;;AAKA,OAAKC,eAAL,GAAuBL,OAAO,CAACK,eAA/B;AAEA;;;;;;AAKA,OAAKC,cAAL,GAAsBN,OAAO,CAACM,cAA9B;AAEA;;;;;;AAKA,OAAKC,gBAAL,GAAwBP,OAAO,CAACO,gBAAhC;AAEA;;;;;;;;;;;AAUA,OAAKC,QAAL,GAAgBb,YAAY,CAACK,OAAO,CAACQ,QAAT,EAAmB,GAAnB,CAA5B;AAEA;;;;;;;;;;AASA,OAAKL,QAAL,GAAgBA,QAAhB;AAEA;;;;;;;;;;;AAUA,OAAKD,gBAAL,GAAwBA,gBAAxB;AAEA;;;;;;;;;AAQA,OAAKO,IAAL,GAAYd,YAAY,CAACK,OAAO,CAACS,IAAT,EAAeX,WAAW,CAACY,KAA3B,CAAxB;AAEA;;;;;;;;AAOA,OAAKC,SAAL,GAAiBC,SAAjB;AAEA;;;;;;;AAMA,OAAKC,KAAL,GAAahB,YAAY,CAACiB,QAA1B;AAEA;;;;;;;;AAOA,OAAKC,QAAL,GAAgBH,SAAhB;AAEA;;;;;;;;AAOA,OAAKI,SAAL,GAAiB,KAAjB;AACD;AAED;;;;;;;AAKAjB,OAAO,CAACkB,SAAR,CAAkBC,MAAlB,GAA2B,YAAY;AACrC,OAAKF,SAAL,GAAiB,IAAjB;AACD,CAFD;AAIA;;;;;;;;;AAOAjB,OAAO,CAACkB,SAAR,CAAkBE,KAAlB,GAA0B,UAAUC,MAAV,EAAkB;AAC1C,MAAI,CAACxB,OAAO,CAACwB,MAAD,CAAZ,EAAsB;AACpB,WAAO,IAAIrB,OAAJ,CAAY,IAAZ,CAAP;AACD;;AAEDqB,EAAAA,MAAM,CAAChB,GAAP,GAAa,KAAKA,GAAlB;AACAgB,EAAAA,MAAM,CAACf,eAAP,GAAyB,KAAKA,eAA9B;AACAe,EAAAA,MAAM,CAACd,cAAP,GAAwB,KAAKA,cAA7B;AACAc,EAAAA,MAAM,CAACb,gBAAP,GAA0B,KAAKA,gBAA/B;AACAa,EAAAA,MAAM,CAACZ,QAAP,GAAkB,KAAKA,QAAvB;AACAY,EAAAA,MAAM,CAACjB,QAAP,GAAkB,KAAKA,QAAvB;AACAiB,EAAAA,MAAM,CAAClB,gBAAP,GAA0B,KAAKA,gBAA/B;AACAkB,EAAAA,MAAM,CAACX,IAAP,GAAc,KAAKA,IAAnB;AACAW,EAAAA,MAAM,CAACT,SAAP,GAAmB,KAAKA,SAAxB,CAb0C,CAe1C;;AACAS,EAAAA,MAAM,CAACP,KAAP,GAAe,KAAKhB,YAAL,CAAkBiB,QAAjC;AACAM,EAAAA,MAAM,CAACL,QAAP,GAAkBH,SAAlB;AACAQ,EAAAA,MAAM,CAACJ,SAAP,GAAmB,KAAnB;AAEA,SAAOI,MAAP;AACD,CArBD;AAuBA;;;;;;AAMA;;;;;AAKA;;;;;;;AAKA,eAAerB,OAAf","sourcesContent":["import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport RequestState from \"./RequestState.js\";\nimport RequestType from \"./RequestType.js\";\n\n/**\n * Stores information for making a request. In general this does not need to be constructed directly.\n *\n * @alias Request\n * @constructor\n * @namespace\n * @exports Request\n * @param {Object} [options] An object with the following properties:\n * @param {String} [options.url] The url to request.\n * @param {Request~RequestCallback} [options.requestFunction] The function that makes the actual data request.\n * @param {Request~CancelCallback} [options.cancelFunction] The function that is called when the request is cancelled.\n * @param {Request~PriorityCallback} [options.priorityFunction] The function that is called to update the request's priority, which occurs once per frame.\n * @param {Number} [options.priority=0.0] The initial priority of the request.\n * @param {Boolean} [options.throttle=false] Whether to throttle and prioritize the request. If false, the request will be sent immediately. If true, the request will be throttled and sent based on priority.\n * @param {Boolean} [options.throttleByServer=false] Whether to throttle the request by server.\n * @param {RequestType} [options.type=RequestType.OTHER] The type of request.\n */\nfunction Request(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var throttleByServer = defaultValue(options.throttleByServer, false);\n  var throttle = defaultValue(options.throttle, false);\n\n  /**\n   * The URL to request.\n   *\n   * @type {String}\n   */\n  this.url = options.url;\n\n  /**\n   * The function that makes the actual data request.\n   *\n   * @type {Request~RequestCallback}\n   */\n  this.requestFunction = options.requestFunction;\n\n  /**\n   * The function that is called when the request is cancelled.\n   *\n   * @type {Request~CancelCallback}\n   */\n  this.cancelFunction = options.cancelFunction;\n\n  /**\n   * The function that is called to update the request's priority, which occurs once per frame.\n   *\n   * @type {Request~PriorityCallback}\n   */\n  this.priorityFunction = options.priorityFunction;\n\n  /**\n   * Priority is a unit-less value where lower values represent higher priority.\n   * For world-based objects, this is usually the distance from the camera.\n   * A request that does not have a priority function defaults to a priority of 0.\n   *\n   * If priorityFunction is defined, this value is updated every frame with the result of that call.\n   *\n   * @type {Number}\n   * @default 0.0\n   */\n  this.priority = defaultValue(options.priority, 0.0);\n\n  /**\n   * Whether to throttle and prioritize the request. If false, the request will be sent immediately. If true, the\n   * request will be throttled and sent based on priority.\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  this.throttle = throttle;\n\n  /**\n   * Whether to throttle the request by server. Browsers typically support about 6-8 parallel connections\n   * for HTTP/1 servers, and an unlimited amount of connections for HTTP/2 servers. Setting this value\n   * to <code>true</code> is preferable for requests going through HTTP/1 servers.\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  this.throttleByServer = throttleByServer;\n\n  /**\n   * Type of request.\n   *\n   * @type {RequestType}\n   * @readonly\n   *\n   * @default RequestType.OTHER\n   */\n  this.type = defaultValue(options.type, RequestType.OTHER);\n\n  /**\n   * A key used to identify the server that a request is going to. It is derived from the url's authority and scheme.\n   *\n   * @type {String}\n   *\n   * @private\n   */\n  this.serverKey = undefined;\n\n  /**\n   * The current state of the request.\n   *\n   * @type {RequestState}\n   * @readonly\n   */\n  this.state = RequestState.UNISSUED;\n\n  /**\n   * The requests's deferred promise.\n   *\n   * @type {Object}\n   *\n   * @private\n   */\n  this.deferred = undefined;\n\n  /**\n   * Whether the request was explicitly cancelled.\n   *\n   * @type {Boolean}\n   *\n   * @private\n   */\n  this.cancelled = false;\n}\n\n/**\n * Mark the request as cancelled.\n *\n * @private\n */\nRequest.prototype.cancel = function () {\n  this.cancelled = true;\n};\n\n/**\n * Duplicates a Request instance.\n *\n * @param {Request} [result] The object onto which to store the result.\n *\n * @returns {Request} The modified result parameter or a new Resource instance if one was not provided.\n */\nRequest.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new Request(this);\n  }\n\n  result.url = this.url;\n  result.requestFunction = this.requestFunction;\n  result.cancelFunction = this.cancelFunction;\n  result.priorityFunction = this.priorityFunction;\n  result.priority = this.priority;\n  result.throttle = this.throttle;\n  result.throttleByServer = this.throttleByServer;\n  result.type = this.type;\n  result.serverKey = this.serverKey;\n\n  // These get defaulted because the cloned request hasn't been issued\n  result.state = this.RequestState.UNISSUED;\n  result.deferred = undefined;\n  result.cancelled = false;\n\n  return result;\n};\n\n/**\n * The function that makes the actual data request.\n * @callback Request~RequestCallback\n * @returns {Promise} A promise for the requested data.\n */\n\n/**\n * The function that is called when the request is cancelled.\n * @callback Request~CancelCallback\n */\n\n/**\n * The function that is called to update the request's priority, which occurs once per frame.\n * @callback Request~PriorityCallback\n * @returns {Number} The updated priority value.\n */\nexport default Request;\n"]},"metadata":{},"sourceType":"module"}