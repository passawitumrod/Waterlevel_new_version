{"ast":null,"code":"import defined from \"./defined.js\";\n\nvar _supportsFullscreen;\n\nvar _names = {\n  requestFullscreen: undefined,\n  exitFullscreen: undefined,\n  fullscreenEnabled: undefined,\n  fullscreenElement: undefined,\n  fullscreenchange: undefined,\n  fullscreenerror: undefined\n};\n/**\n * Browser-independent functions for working with the standard fullscreen API.\n *\n * @exports Fullscreen\n * @namespace\n *\n * @see {@link http://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html|W3C Fullscreen Living Specification}\n */\n\nvar Fullscreen = {};\nObject.defineProperties(Fullscreen, {\n  /**\n   * The element that is currently fullscreen, if any.  To simply check if the\n   * browser is in fullscreen mode or not, use {@link Fullscreen#fullscreen}.\n   * @memberof Fullscreen\n   * @type {Object}\n   * @readonly\n   */\n  element: {\n    get: function get() {\n      if (!Fullscreen.supportsFullscreen()) {\n        return undefined;\n      }\n\n      return document[_names.fullscreenElement];\n    }\n  },\n\n  /**\n   * The name of the event on the document that is fired when fullscreen is\n   * entered or exited.  This event name is intended for use with addEventListener.\n   * In your event handler, to determine if the browser is in fullscreen mode or not,\n   * use {@link Fullscreen#fullscreen}.\n   * @memberof Fullscreen\n   * @type {String}\n   * @readonly\n   */\n  changeEventName: {\n    get: function get() {\n      if (!Fullscreen.supportsFullscreen()) {\n        return undefined;\n      }\n\n      return _names.fullscreenchange;\n    }\n  },\n\n  /**\n   * The name of the event that is fired when a fullscreen error\n   * occurs.  This event name is intended for use with addEventListener.\n   * @memberof Fullscreen\n   * @type {String}\n   * @readonly\n   */\n  errorEventName: {\n    get: function get() {\n      if (!Fullscreen.supportsFullscreen()) {\n        return undefined;\n      }\n\n      return _names.fullscreenerror;\n    }\n  },\n\n  /**\n   * Determine whether the browser will allow an element to be made fullscreen, or not.\n   * For example, by default, iframes cannot go fullscreen unless the containing page\n   * adds an \"allowfullscreen\" attribute (or prefixed equivalent).\n   * @memberof Fullscreen\n   * @type {Boolean}\n   * @readonly\n   */\n  enabled: {\n    get: function get() {\n      if (!Fullscreen.supportsFullscreen()) {\n        return undefined;\n      }\n\n      return document[_names.fullscreenEnabled];\n    }\n  },\n\n  /**\n   * Determines if the browser is currently in fullscreen mode.\n   * @memberof Fullscreen\n   * @type {Boolean}\n   * @readonly\n   */\n  fullscreen: {\n    get: function get() {\n      if (!Fullscreen.supportsFullscreen()) {\n        return undefined;\n      }\n\n      return Fullscreen.element !== null;\n    }\n  }\n});\n/**\n * Detects whether the browser supports the standard fullscreen API.\n *\n * @returns {Boolean} <code>true</code> if the browser supports the standard fullscreen API,\n * <code>false</code> otherwise.\n */\n\nFullscreen.supportsFullscreen = function () {\n  if (defined(_supportsFullscreen)) {\n    return _supportsFullscreen;\n  }\n\n  _supportsFullscreen = false;\n  var body = document.body;\n\n  if (typeof body.requestFullscreen === \"function\") {\n    // go with the unprefixed, standard set of names\n    _names.requestFullscreen = \"requestFullscreen\";\n    _names.exitFullscreen = \"exitFullscreen\";\n    _names.fullscreenEnabled = \"fullscreenEnabled\";\n    _names.fullscreenElement = \"fullscreenElement\";\n    _names.fullscreenchange = \"fullscreenchange\";\n    _names.fullscreenerror = \"fullscreenerror\";\n    _supportsFullscreen = true;\n    return _supportsFullscreen;\n  } //check for the correct combination of prefix plus the various names that browsers use\n\n\n  var prefixes = [\"webkit\", \"moz\", \"o\", \"ms\", \"khtml\"];\n  var name;\n\n  for (var i = 0, len = prefixes.length; i < len; ++i) {\n    var prefix = prefixes[i]; // casing of Fullscreen differs across browsers\n\n    name = prefix + \"RequestFullscreen\";\n\n    if (typeof body[name] === \"function\") {\n      _names.requestFullscreen = name;\n      _supportsFullscreen = true;\n    } else {\n      name = prefix + \"RequestFullScreen\";\n\n      if (typeof body[name] === \"function\") {\n        _names.requestFullscreen = name;\n        _supportsFullscreen = true;\n      }\n    } // disagreement about whether it's \"exit\" as per spec, or \"cancel\"\n\n\n    name = prefix + \"ExitFullscreen\";\n\n    if (typeof document[name] === \"function\") {\n      _names.exitFullscreen = name;\n    } else {\n      name = prefix + \"CancelFullScreen\";\n\n      if (typeof document[name] === \"function\") {\n        _names.exitFullscreen = name;\n      }\n    } // casing of Fullscreen differs across browsers\n\n\n    name = prefix + \"FullscreenEnabled\";\n\n    if (document[name] !== undefined) {\n      _names.fullscreenEnabled = name;\n    } else {\n      name = prefix + \"FullScreenEnabled\";\n\n      if (document[name] !== undefined) {\n        _names.fullscreenEnabled = name;\n      }\n    } // casing of Fullscreen differs across browsers\n\n\n    name = prefix + \"FullscreenElement\";\n\n    if (document[name] !== undefined) {\n      _names.fullscreenElement = name;\n    } else {\n      name = prefix + \"FullScreenElement\";\n\n      if (document[name] !== undefined) {\n        _names.fullscreenElement = name;\n      }\n    } // thankfully, event names are all lowercase per spec\n\n\n    name = prefix + \"fullscreenchange\"; // event names do not have 'on' in the front, but the property on the document does\n\n    if (document[\"on\" + name] !== undefined) {\n      //except on IE\n      if (prefix === \"ms\") {\n        name = \"MSFullscreenChange\";\n      }\n\n      _names.fullscreenchange = name;\n    }\n\n    name = prefix + \"fullscreenerror\";\n\n    if (document[\"on\" + name] !== undefined) {\n      //except on IE\n      if (prefix === \"ms\") {\n        name = \"MSFullscreenError\";\n      }\n\n      _names.fullscreenerror = name;\n    }\n  }\n\n  return _supportsFullscreen;\n};\n/**\n * Asynchronously requests the browser to enter fullscreen mode on the given element.\n * If fullscreen mode is not supported by the browser, does nothing.\n *\n * @param {Object} element The HTML element which will be placed into fullscreen mode.\n * @param {HMDVRDevice} [vrDevice] The VR device.\n *\n * @example\n * // Put the entire page into fullscreen.\n * Cesium.Fullscreen.requestFullscreen(document.body)\n *\n * // Place only the Cesium canvas into fullscreen.\n * Cesium.Fullscreen.requestFullscreen(scene.canvas)\n */\n\n\nFullscreen.requestFullscreen = function (element, vrDevice) {\n  if (!Fullscreen.supportsFullscreen()) {\n    return;\n  }\n\n  element[_names.requestFullscreen]({\n    vrDisplay: vrDevice\n  });\n};\n/**\n * Asynchronously exits fullscreen mode.  If the browser is not currently\n * in fullscreen, or if fullscreen mode is not supported by the browser, does nothing.\n */\n\n\nFullscreen.exitFullscreen = function () {\n  if (!Fullscreen.supportsFullscreen()) {\n    return;\n  }\n\n  document[_names.exitFullscreen]();\n}; //For unit tests\n\n\nFullscreen._names = _names;\nexport default Fullscreen;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/Fullscreen.js"],"names":["defined","_supportsFullscreen","_names","requestFullscreen","undefined","exitFullscreen","fullscreenEnabled","fullscreenElement","fullscreenchange","fullscreenerror","Fullscreen","Object","defineProperties","element","get","supportsFullscreen","document","changeEventName","errorEventName","enabled","fullscreen","body","prefixes","name","i","len","length","prefix","vrDevice","vrDisplay"],"mappings":"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","sourcesContent":["import defined from \"./defined.js\";\n\nvar _supportsFullscreen;\nvar _names = {\n  requestFullscreen: undefined,\n  exitFullscreen: undefined,\n  fullscreenEnabled: undefined,\n  fullscreenElement: undefined,\n  fullscreenchange: undefined,\n  fullscreenerror: undefined,\n};\n\n/**\n * Browser-independent functions for working with the standard fullscreen API.\n *\n * @exports Fullscreen\n * @namespace\n *\n * @see {@link http://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html|W3C Fullscreen Living Specification}\n */\nvar Fullscreen = {};\n\nObject.defineProperties(Fullscreen, {\n  /**\n   * The element that is currently fullscreen, if any.  To simply check if the\n   * browser is in fullscreen mode or not, use {@link Fullscreen#fullscreen}.\n   * @memberof Fullscreen\n   * @type {Object}\n   * @readonly\n   */\n  element: {\n    get: function () {\n      if (!Fullscreen.supportsFullscreen()) {\n        return undefined;\n      }\n\n      return document[_names.fullscreenElement];\n    },\n  },\n\n  /**\n   * The name of the event on the document that is fired when fullscreen is\n   * entered or exited.  This event name is intended for use with addEventListener.\n   * In your event handler, to determine if the browser is in fullscreen mode or not,\n   * use {@link Fullscreen#fullscreen}.\n   * @memberof Fullscreen\n   * @type {String}\n   * @readonly\n   */\n  changeEventName: {\n    get: function () {\n      if (!Fullscreen.supportsFullscreen()) {\n        return undefined;\n      }\n\n      return _names.fullscreenchange;\n    },\n  },\n\n  /**\n   * The name of the event that is fired when a fullscreen error\n   * occurs.  This event name is intended for use with addEventListener.\n   * @memberof Fullscreen\n   * @type {String}\n   * @readonly\n   */\n  errorEventName: {\n    get: function () {\n      if (!Fullscreen.supportsFullscreen()) {\n        return undefined;\n      }\n\n      return _names.fullscreenerror;\n    },\n  },\n\n  /**\n   * Determine whether the browser will allow an element to be made fullscreen, or not.\n   * For example, by default, iframes cannot go fullscreen unless the containing page\n   * adds an \"allowfullscreen\" attribute (or prefixed equivalent).\n   * @memberof Fullscreen\n   * @type {Boolean}\n   * @readonly\n   */\n  enabled: {\n    get: function () {\n      if (!Fullscreen.supportsFullscreen()) {\n        return undefined;\n      }\n\n      return document[_names.fullscreenEnabled];\n    },\n  },\n\n  /**\n   * Determines if the browser is currently in fullscreen mode.\n   * @memberof Fullscreen\n   * @type {Boolean}\n   * @readonly\n   */\n  fullscreen: {\n    get: function () {\n      if (!Fullscreen.supportsFullscreen()) {\n        return undefined;\n      }\n\n      return Fullscreen.element !== null;\n    },\n  },\n});\n\n/**\n * Detects whether the browser supports the standard fullscreen API.\n *\n * @returns {Boolean} <code>true</code> if the browser supports the standard fullscreen API,\n * <code>false</code> otherwise.\n */\nFullscreen.supportsFullscreen = function () {\n  if (defined(_supportsFullscreen)) {\n    return _supportsFullscreen;\n  }\n\n  _supportsFullscreen = false;\n\n  var body = document.body;\n  if (typeof body.requestFullscreen === \"function\") {\n    // go with the unprefixed, standard set of names\n    _names.requestFullscreen = \"requestFullscreen\";\n    _names.exitFullscreen = \"exitFullscreen\";\n    _names.fullscreenEnabled = \"fullscreenEnabled\";\n    _names.fullscreenElement = \"fullscreenElement\";\n    _names.fullscreenchange = \"fullscreenchange\";\n    _names.fullscreenerror = \"fullscreenerror\";\n    _supportsFullscreen = true;\n    return _supportsFullscreen;\n  }\n\n  //check for the correct combination of prefix plus the various names that browsers use\n  var prefixes = [\"webkit\", \"moz\", \"o\", \"ms\", \"khtml\"];\n  var name;\n  for (var i = 0, len = prefixes.length; i < len; ++i) {\n    var prefix = prefixes[i];\n\n    // casing of Fullscreen differs across browsers\n    name = prefix + \"RequestFullscreen\";\n    if (typeof body[name] === \"function\") {\n      _names.requestFullscreen = name;\n      _supportsFullscreen = true;\n    } else {\n      name = prefix + \"RequestFullScreen\";\n      if (typeof body[name] === \"function\") {\n        _names.requestFullscreen = name;\n        _supportsFullscreen = true;\n      }\n    }\n\n    // disagreement about whether it's \"exit\" as per spec, or \"cancel\"\n    name = prefix + \"ExitFullscreen\";\n    if (typeof document[name] === \"function\") {\n      _names.exitFullscreen = name;\n    } else {\n      name = prefix + \"CancelFullScreen\";\n      if (typeof document[name] === \"function\") {\n        _names.exitFullscreen = name;\n      }\n    }\n\n    // casing of Fullscreen differs across browsers\n    name = prefix + \"FullscreenEnabled\";\n    if (document[name] !== undefined) {\n      _names.fullscreenEnabled = name;\n    } else {\n      name = prefix + \"FullScreenEnabled\";\n      if (document[name] !== undefined) {\n        _names.fullscreenEnabled = name;\n      }\n    }\n\n    // casing of Fullscreen differs across browsers\n    name = prefix + \"FullscreenElement\";\n    if (document[name] !== undefined) {\n      _names.fullscreenElement = name;\n    } else {\n      name = prefix + \"FullScreenElement\";\n      if (document[name] !== undefined) {\n        _names.fullscreenElement = name;\n      }\n    }\n\n    // thankfully, event names are all lowercase per spec\n    name = prefix + \"fullscreenchange\";\n    // event names do not have 'on' in the front, but the property on the document does\n    if (document[\"on\" + name] !== undefined) {\n      //except on IE\n      if (prefix === \"ms\") {\n        name = \"MSFullscreenChange\";\n      }\n      _names.fullscreenchange = name;\n    }\n\n    name = prefix + \"fullscreenerror\";\n    if (document[\"on\" + name] !== undefined) {\n      //except on IE\n      if (prefix === \"ms\") {\n        name = \"MSFullscreenError\";\n      }\n      _names.fullscreenerror = name;\n    }\n  }\n\n  return _supportsFullscreen;\n};\n\n/**\n * Asynchronously requests the browser to enter fullscreen mode on the given element.\n * If fullscreen mode is not supported by the browser, does nothing.\n *\n * @param {Object} element The HTML element which will be placed into fullscreen mode.\n * @param {HMDVRDevice} [vrDevice] The VR device.\n *\n * @example\n * // Put the entire page into fullscreen.\n * Cesium.Fullscreen.requestFullscreen(document.body)\n *\n * // Place only the Cesium canvas into fullscreen.\n * Cesium.Fullscreen.requestFullscreen(scene.canvas)\n */\nFullscreen.requestFullscreen = function (element, vrDevice) {\n  if (!Fullscreen.supportsFullscreen()) {\n    return;\n  }\n\n  element[_names.requestFullscreen]({ vrDisplay: vrDevice });\n};\n\n/**\n * Asynchronously exits fullscreen mode.  If the browser is not currently\n * in fullscreen, or if fullscreen mode is not supported by the browser, does nothing.\n */\nFullscreen.exitFullscreen = function () {\n  if (!Fullscreen.supportsFullscreen()) {\n    return;\n  }\n\n  document[_names.exitFullscreen]();\n};\n\n//For unit tests\nFullscreen._names = _names;\nexport default Fullscreen;\n"]},"metadata":{},"sourceType":"module"}