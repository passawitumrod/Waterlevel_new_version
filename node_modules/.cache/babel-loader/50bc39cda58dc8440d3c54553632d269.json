{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport combine from \"./combine.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport Resource from \"./Resource.js\";\n/**\n * Provides geocoding via a {@link https://opencagedata.com/|OpenCage} server.\n * @alias OpenCageGeocoderService\n * @constructor\n *\n * @param {Resource|String} url The endpoint to the OpenCage server.\n * @param {String} apiKey The OpenCage API Key.\n * @param {Object} [params] An object with the following properties (See https://opencagedata.com/api#forward-opt):\n * @param {Number} [params.abbrv] When set to 1 we attempt to abbreviate and shorten the formatted string we return.\n * @param {Number} [options.add_request] When set to 1 the various request parameters are added to the response for ease of debugging.\n * @param {String} [options.bounds] Provides the geocoder with a hint to the region that the query resides in.\n * @param {String} [options.countrycode] Restricts the results to the specified country or countries (as defined by the ISO 3166-1 Alpha 2 standard).\n * @param {String} [options.jsonp] Wraps the returned JSON with a function name.\n * @param {String} [options.language] An IETF format language code.\n * @param {Number} [options.limit] The maximum number of results we should return.\n * @param {Number} [options.min_confidence] An integer from 1-10. Only results with at least this confidence will be returned.\n * @param {Number} [options.no_annotations] When set to 1 results will not contain annotations.\n * @param {Number} [options.no_dedupe] When set to 1 results will not be deduplicated.\n * @param {Number} [options.no_record] When set to 1 the query contents are not logged.\n * @param {Number} [options.pretty] When set to 1 results are 'pretty' printed for easier reading. Useful for debugging.\n * @param {String} [options.proximity] Provides the geocoder with a hint to bias results in favour of those closer to the specified location (For example: 41.40139,2.12870).\n *\n * @example\n * // Configure a Viewer to use the OpenCage Geocoder\n * var viewer = new Cesium.Viewer('cesiumContainer', {\n *   geocoder: new Cesium.OpenCageGeocoderService('https://api.opencagedata.com/geocode/v1/', '<API key>')\n * });\n */\n\nfunction OpenCageGeocoderService(url, apiKey, params) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"url\", url);\n  Check.defined(\"apiKey\", apiKey);\n\n  if (defined(params)) {\n    Check.typeOf.object(\"params\", params);\n  } //>>includeEnd('debug');\n\n\n  url = Resource.createIfNeeded(url);\n  url.appendForwardSlash();\n  url.setQueryParameters({\n    key: apiKey\n  });\n  this._url = url;\n  this._params = defaultValue(params, {});\n}\n\nObject.defineProperties(OpenCageGeocoderService.prototype, {\n  /**\n   * The Resource used to access the OpenCage endpoint.\n   * @type {Resource}\n   * @memberof {OpenCageGeocoderService.prototype}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._url;\n    }\n  },\n\n  /**\n   * Optional params passed to OpenCage in order to customize geocoding\n   * @type {Object}\n   * @memberof {OpenCageGeocoderService.prototype}\n   * @readonly\n   */\n  params: {\n    get: function () {\n      return this._params;\n    }\n  }\n});\n/**\n * @function\n *\n * @param {String} query The query to be sent to the geocoder service\n * @returns {Promise<GeocoderService~Result[]>}\n */\n\nOpenCageGeocoderService.prototype.geocode = function (query) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"query\", query); //>>includeEnd('debug');\n\n  var resource = this._url.getDerivedResource({\n    url: \"json\",\n    queryParameters: combine(this._params, {\n      q: query\n    })\n  });\n\n  return resource.fetchJson().then(function (response) {\n    return response.results.map(function (resultObject) {\n      var destination;\n      var bounds = resultObject.bounds;\n\n      if (defined(bounds)) {\n        destination = Rectangle.fromDegrees(bounds.southwest.lng, bounds.southwest.lat, bounds.northeast.lng, bounds.northeast.lat);\n      } else {\n        var lon = resultObject.geometry.lat;\n        var lat = resultObject.geometry.lng;\n        destination = Cartesian3.fromDegrees(lon, lat);\n      }\n\n      return {\n        displayName: resultObject.formatted,\n        destination: destination\n      };\n    });\n  });\n};\n\nexport default OpenCageGeocoderService;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/OpenCageGeocoderService.js"],"names":["Cartesian3","Check","combine","defaultValue","defined","Rectangle","Resource","OpenCageGeocoderService","url","apiKey","params","typeOf","object","createIfNeeded","appendForwardSlash","setQueryParameters","key","_url","_params","Object","defineProperties","prototype","get","geocode","query","string","resource","getDerivedResource","queryParameters","q","fetchJson","then","response","results","map","resultObject","destination","bounds","fromDegrees","southwest","lng","lat","northeast","lon","geometry","displayName","formatted"],"mappings":"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","sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport combine from \"./combine.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport Resource from \"./Resource.js\";\n\n/**\n * Provides geocoding via a {@link https://opencagedata.com/|OpenCage} server.\n * @alias OpenCageGeocoderService\n * @constructor\n *\n * @param {Resource|String} url The endpoint to the OpenCage server.\n * @param {String} apiKey The OpenCage API Key.\n * @param {Object} [params] An object with the following properties (See https://opencagedata.com/api#forward-opt):\n * @param {Number} [params.abbrv] When set to 1 we attempt to abbreviate and shorten the formatted string we return.\n * @param {Number} [options.add_request] When set to 1 the various request parameters are added to the response for ease of debugging.\n * @param {String} [options.bounds] Provides the geocoder with a hint to the region that the query resides in.\n * @param {String} [options.countrycode] Restricts the results to the specified country or countries (as defined by the ISO 3166-1 Alpha 2 standard).\n * @param {String} [options.jsonp] Wraps the returned JSON with a function name.\n * @param {String} [options.language] An IETF format language code.\n * @param {Number} [options.limit] The maximum number of results we should return.\n * @param {Number} [options.min_confidence] An integer from 1-10. Only results with at least this confidence will be returned.\n * @param {Number} [options.no_annotations] When set to 1 results will not contain annotations.\n * @param {Number} [options.no_dedupe] When set to 1 results will not be deduplicated.\n * @param {Number} [options.no_record] When set to 1 the query contents are not logged.\n * @param {Number} [options.pretty] When set to 1 results are 'pretty' printed for easier reading. Useful for debugging.\n * @param {String} [options.proximity] Provides the geocoder with a hint to bias results in favour of those closer to the specified location (For example: 41.40139,2.12870).\n *\n * @example\n * // Configure a Viewer to use the OpenCage Geocoder\n * var viewer = new Cesium.Viewer('cesiumContainer', {\n *   geocoder: new Cesium.OpenCageGeocoderService('https://api.opencagedata.com/geocode/v1/', '<API key>')\n * });\n */\nfunction OpenCageGeocoderService(url, apiKey, params) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"url\", url);\n  Check.defined(\"apiKey\", apiKey);\n  if (defined(params)) {\n    Check.typeOf.object(\"params\", params);\n  }\n  //>>includeEnd('debug');\n\n  url = Resource.createIfNeeded(url);\n  url.appendForwardSlash();\n  url.setQueryParameters({ key: apiKey });\n  this._url = url;\n  this._params = defaultValue(params, {});\n}\n\nObject.defineProperties(OpenCageGeocoderService.prototype, {\n  /**\n   * The Resource used to access the OpenCage endpoint.\n   * @type {Resource}\n   * @memberof {OpenCageGeocoderService.prototype}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._url;\n    },\n  },\n  /**\n   * Optional params passed to OpenCage in order to customize geocoding\n   * @type {Object}\n   * @memberof {OpenCageGeocoderService.prototype}\n   * @readonly\n   */\n  params: {\n    get: function () {\n      return this._params;\n    },\n  },\n});\n\n/**\n * @function\n *\n * @param {String} query The query to be sent to the geocoder service\n * @returns {Promise<GeocoderService~Result[]>}\n */\nOpenCageGeocoderService.prototype.geocode = function (query) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"query\", query);\n  //>>includeEnd('debug');\n\n  var resource = this._url.getDerivedResource({\n    url: \"json\",\n    queryParameters: combine(this._params, { q: query }),\n  });\n  return resource.fetchJson().then(function (response) {\n    return response.results.map(function (resultObject) {\n      var destination;\n      var bounds = resultObject.bounds;\n\n      if (defined(bounds)) {\n        destination = Rectangle.fromDegrees(\n          bounds.southwest.lng,\n          bounds.southwest.lat,\n          bounds.northeast.lng,\n          bounds.northeast.lat\n        );\n      } else {\n        var lon = resultObject.geometry.lat;\n        var lat = resultObject.geometry.lng;\n        destination = Cartesian3.fromDegrees(lon, lat);\n      }\n\n      return {\n        displayName: resultObject.formatted,\n        destination: destination,\n      };\n    });\n  });\n};\nexport default OpenCageGeocoderService;\n"]},"metadata":{},"sourceType":"module"}