{"ast":null,"code":"import defined from \"./defined.js\";\n/**\n * @private\n */\n\nfunction DoublyLinkedList() {\n  this.head = undefined;\n  this.tail = undefined;\n  this._length = 0;\n}\n\nObject.defineProperties(DoublyLinkedList.prototype, {\n  length: {\n    get: function () {\n      return this._length;\n    }\n  }\n});\n/**\n * @private\n */\n\nfunction DoublyLinkedListNode(item, previous, next) {\n  this.item = item;\n  this.previous = previous;\n  this.next = next;\n}\n/**\n * Adds the item to the end of the list\n * @param {*} [item]\n * @return {DoublyLinkedListNode}\n */\n\n\nDoublyLinkedList.prototype.add = function (item) {\n  var node = new DoublyLinkedListNode(item, this.tail, undefined);\n\n  if (defined(this.tail)) {\n    this.tail.next = node;\n    this.tail = node;\n  } else {\n    this.head = node;\n    this.tail = node;\n  }\n\n  ++this._length;\n  return node;\n};\n\nfunction remove(list, node) {\n  if (defined(node.previous) && defined(node.next)) {\n    node.previous.next = node.next;\n    node.next.previous = node.previous;\n  } else if (defined(node.previous)) {\n    // Remove last node\n    node.previous.next = undefined;\n    list.tail = node.previous;\n  } else if (defined(node.next)) {\n    // Remove first node\n    node.next.previous = undefined;\n    list.head = node.next;\n  } else {\n    // Remove last node in the linked list\n    list.head = undefined;\n    list.tail = undefined;\n  }\n\n  node.next = undefined;\n  node.previous = undefined;\n}\n/**\n * Removes the given node from the list\n * @param {DoublyLinkedListNode} node\n */\n\n\nDoublyLinkedList.prototype.remove = function (node) {\n  if (!defined(node)) {\n    return;\n  }\n\n  remove(this, node);\n  --this._length;\n};\n/**\n * Moves nextNode after node\n * @param {DoublyLinkedListNode} node\n * @param {DoublyLinkedListNode} nextNode\n */\n\n\nDoublyLinkedList.prototype.splice = function (node, nextNode) {\n  if (node === nextNode) {\n    return;\n  } // Remove nextNode, then insert after node\n\n\n  remove(this, nextNode);\n  var oldNodeNext = node.next;\n  node.next = nextNode; // nextNode is the new tail\n\n  if (this.tail === node) {\n    this.tail = nextNode;\n  } else {\n    oldNodeNext.previous = nextNode;\n  }\n\n  nextNode.next = oldNodeNext;\n  nextNode.previous = node;\n};\n\nexport default DoublyLinkedList;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/DoublyLinkedList.js"],"names":["defined","DoublyLinkedList","head","undefined","tail","_length","Object","defineProperties","prototype","length","get","DoublyLinkedListNode","item","previous","next","add","node","remove","list","splice","nextNode","oldNodeNext"],"mappings":"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","sourcesContent":["import defined from \"./defined.js\";\n\n/**\n * @private\n */\nfunction DoublyLinkedList() {\n  this.head = undefined;\n  this.tail = undefined;\n  this._length = 0;\n}\n\nObject.defineProperties(DoublyLinkedList.prototype, {\n  length: {\n    get: function () {\n      return this._length;\n    },\n  },\n});\n\n/**\n * @private\n */\nfunction DoublyLinkedListNode(item, previous, next) {\n  this.item = item;\n  this.previous = previous;\n  this.next = next;\n}\n\n/**\n * Adds the item to the end of the list\n * @param {*} [item]\n * @return {DoublyLinkedListNode}\n */\nDoublyLinkedList.prototype.add = function (item) {\n  var node = new DoublyLinkedListNode(item, this.tail, undefined);\n\n  if (defined(this.tail)) {\n    this.tail.next = node;\n    this.tail = node;\n  } else {\n    this.head = node;\n    this.tail = node;\n  }\n\n  ++this._length;\n\n  return node;\n};\n\nfunction remove(list, node) {\n  if (defined(node.previous) && defined(node.next)) {\n    node.previous.next = node.next;\n    node.next.previous = node.previous;\n  } else if (defined(node.previous)) {\n    // Remove last node\n    node.previous.next = undefined;\n    list.tail = node.previous;\n  } else if (defined(node.next)) {\n    // Remove first node\n    node.next.previous = undefined;\n    list.head = node.next;\n  } else {\n    // Remove last node in the linked list\n    list.head = undefined;\n    list.tail = undefined;\n  }\n\n  node.next = undefined;\n  node.previous = undefined;\n}\n\n/**\n * Removes the given node from the list\n * @param {DoublyLinkedListNode} node\n */\nDoublyLinkedList.prototype.remove = function (node) {\n  if (!defined(node)) {\n    return;\n  }\n\n  remove(this, node);\n\n  --this._length;\n};\n\n/**\n * Moves nextNode after node\n * @param {DoublyLinkedListNode} node\n * @param {DoublyLinkedListNode} nextNode\n */\nDoublyLinkedList.prototype.splice = function (node, nextNode) {\n  if (node === nextNode) {\n    return;\n  }\n\n  // Remove nextNode, then insert after node\n  remove(this, nextNode);\n\n  var oldNodeNext = node.next;\n  node.next = nextNode;\n\n  // nextNode is the new tail\n  if (this.tail === node) {\n    this.tail = nextNode;\n  } else {\n    oldNodeNext.previous = nextNode;\n  }\n\n  nextNode.next = oldNodeNext;\n  nextNode.previous = node;\n};\nexport default DoublyLinkedList;\n"]},"metadata":{},"sourceType":"module"}