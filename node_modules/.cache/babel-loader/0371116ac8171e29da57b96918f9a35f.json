{"ast":null,"code":"import defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport destroyObject from \"../../Core/destroyObject.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport EventHelper from \"../../Core/EventHelper.js\";\nimport Fullscreen from \"../../Core/Fullscreen.js\";\nimport OrthographicFrustum from \"../../Core/OrthographicFrustum.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nimport NoSleep from \"../../ThirdParty/NoSleep.js\";\nimport createCommand from \"../createCommand.js\";\nimport getElement from \"../getElement.js\";\n\nfunction lockScreen(orientation) {\n  var locked = false;\n  var screen = window.screen;\n\n  if (defined(screen)) {\n    if (defined(screen.lockOrientation)) {\n      locked = screen.lockOrientation(orientation);\n    } else if (defined(screen.mozLockOrientation)) {\n      locked = screen.mozLockOrientation(orientation);\n    } else if (defined(screen.msLockOrientation)) {\n      locked = screen.msLockOrientation(orientation);\n    } else if (defined(screen.orientation && screen.orientation.lock)) {\n      locked = screen.orientation.lock(orientation);\n    }\n  }\n\n  return locked;\n}\n\nfunction unlockScreen() {\n  var screen = window.screen;\n\n  if (defined(screen)) {\n    if (defined(screen.unlockOrientation)) {\n      screen.unlockOrientation();\n    } else if (defined(screen.mozUnlockOrientation)) {\n      screen.mozUnlockOrientation();\n    } else if (defined(screen.msUnlockOrientation)) {\n      screen.msUnlockOrientation();\n    } else if (defined(screen.orientation && screen.orientation.unlock)) {\n      screen.orientation.unlock();\n    }\n  }\n}\n\nfunction toggleVR(viewModel, scene, isVRMode, isOrthographic) {\n  if (isOrthographic()) {\n    return;\n  }\n\n  if (isVRMode()) {\n    scene.useWebVR = false;\n\n    if (viewModel._locked) {\n      unlockScreen();\n      viewModel._locked = false;\n    }\n\n    viewModel._noSleep.disable();\n\n    Fullscreen.exitFullscreen();\n    isVRMode(false);\n  } else {\n    if (!Fullscreen.fullscreen) {\n      Fullscreen.requestFullscreen(viewModel._vrElement);\n    }\n\n    viewModel._noSleep.enable();\n\n    if (!viewModel._locked) {\n      viewModel._locked = lockScreen(\"landscape\");\n    }\n\n    scene.useWebVR = true;\n    isVRMode(true);\n  }\n}\n/**\n * The view model for {@link VRButton}.\n * @alias VRButtonViewModel\n * @constructor\n *\n * @param {Scene} scene The scene.\n * @param {Element|String} [vrElement=document.body] The element or id to be placed into VR mode.\n */\n\n\nfunction VRButtonViewModel(scene, vrElement) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  } //>>includeEnd('debug');\n\n\n  var that = this;\n  var isEnabled = knockout.observable(Fullscreen.enabled);\n  var isVRMode = knockout.observable(false);\n  /**\n   * Gets whether or not VR mode is active.\n   *\n   * @type {Boolean}\n   */\n\n  this.isVRMode = undefined;\n  knockout.defineProperty(this, \"isVRMode\", {\n    get: function () {\n      return isVRMode();\n    }\n  });\n  /**\n   * Gets or sets whether or not VR functionality should be enabled.\n   *\n   * @type {Boolean}\n   * @see Fullscreen.enabled\n   */\n\n  this.isVREnabled = undefined;\n  knockout.defineProperty(this, \"isVREnabled\", {\n    get: function () {\n      return isEnabled();\n    },\n    set: function (value) {\n      isEnabled(value && Fullscreen.enabled);\n    }\n  });\n  /**\n   * Gets the tooltip.  This property is observable.\n   *\n   * @type {String}\n   */\n\n  this.tooltip = undefined;\n  knockout.defineProperty(this, \"tooltip\", function () {\n    if (!isEnabled()) {\n      return \"VR mode is unavailable\";\n    }\n\n    return isVRMode() ? \"Exit VR mode\" : \"Enter VR mode\";\n  });\n  var isOrthographic = knockout.observable(false);\n  this._isOrthographic = undefined;\n  knockout.defineProperty(this, \"_isOrthographic\", {\n    get: function () {\n      return isOrthographic();\n    }\n  });\n  this._eventHelper = new EventHelper();\n\n  this._eventHelper.add(scene.preRender, function () {\n    isOrthographic(scene.camera.frustum instanceof OrthographicFrustum);\n  });\n\n  this._locked = false;\n  this._noSleep = new NoSleep();\n  this._command = createCommand(function () {\n    toggleVR(that, scene, isVRMode, isOrthographic);\n  }, knockout.getObservable(this, \"isVREnabled\"));\n  this._vrElement = defaultValue(getElement(vrElement), document.body);\n\n  this._callback = function () {\n    if (!Fullscreen.fullscreen && isVRMode()) {\n      scene.useWebVR = false;\n\n      if (that._locked) {\n        unlockScreen();\n        that._locked = false;\n      }\n\n      that._noSleep.disable();\n\n      isVRMode(false);\n    }\n  };\n\n  document.addEventListener(Fullscreen.changeEventName, this._callback);\n}\n\nObject.defineProperties(VRButtonViewModel.prototype, {\n  /**\n   * Gets or sets the HTML element to place into VR mode when the\n   * corresponding button is pressed.\n   * @memberof VRButtonViewModel.prototype\n   *\n   * @type {Element}\n   */\n  vrElement: {\n    //TODO:@exception {DeveloperError} value must be a valid HTML Element.\n    get: function () {\n      return this._vrElement;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!(value instanceof Element)) {\n        throw new DeveloperError(\"value must be a valid Element.\");\n      } //>>includeEnd('debug');\n\n\n      this._vrElement = value;\n    }\n  },\n\n  /**\n   * Gets the Command to toggle VR mode.\n   * @memberof VRButtonViewModel.prototype\n   *\n   * @type {Command}\n   */\n  command: {\n    get: function () {\n      return this._command;\n    }\n  }\n});\n/**\n * @returns {Boolean} true if the object has been destroyed, false otherwise.\n */\n\nVRButtonViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys the view model.  Should be called to\n * properly clean up the view model when it is no longer needed.\n */\n\n\nVRButtonViewModel.prototype.destroy = function () {\n  this._eventHelper.removeAll();\n\n  document.removeEventListener(Fullscreen.changeEventName, this._callback);\n  destroyObject(this);\n};\n\nexport default VRButtonViewModel;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Widgets/VRButton/VRButtonViewModel.js"],"names":["defaultValue","defined","destroyObject","DeveloperError","EventHelper","Fullscreen","OrthographicFrustum","knockout","NoSleep","createCommand","getElement","lockScreen","orientation","locked","screen","window","lockOrientation","mozLockOrientation","msLockOrientation","lock","unlockScreen","unlockOrientation","mozUnlockOrientation","msUnlockOrientation","unlock","toggleVR","viewModel","scene","isVRMode","isOrthographic","useWebVR","_locked","_noSleep","disable","exitFullscreen","fullscreen","requestFullscreen","_vrElement","enable","VRButtonViewModel","vrElement","that","isEnabled","observable","enabled","undefined","defineProperty","get","isVREnabled","set","value","tooltip","_isOrthographic","_eventHelper","add","preRender","camera","frustum","_command","getObservable","document","body","_callback","addEventListener","changeEventName","Object","defineProperties","prototype","Element","command","isDestroyed","destroy","removeAll","removeEventListener"],"mappings":"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","sourcesContent":["import defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport destroyObject from \"../../Core/destroyObject.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport EventHelper from \"../../Core/EventHelper.js\";\nimport Fullscreen from \"../../Core/Fullscreen.js\";\nimport OrthographicFrustum from \"../../Core/OrthographicFrustum.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nimport NoSleep from \"../../ThirdParty/NoSleep.js\";\nimport createCommand from \"../createCommand.js\";\nimport getElement from \"../getElement.js\";\n\nfunction lockScreen(orientation) {\n  var locked = false;\n  var screen = window.screen;\n  if (defined(screen)) {\n    if (defined(screen.lockOrientation)) {\n      locked = screen.lockOrientation(orientation);\n    } else if (defined(screen.mozLockOrientation)) {\n      locked = screen.mozLockOrientation(orientation);\n    } else if (defined(screen.msLockOrientation)) {\n      locked = screen.msLockOrientation(orientation);\n    } else if (defined(screen.orientation && screen.orientation.lock)) {\n      locked = screen.orientation.lock(orientation);\n    }\n  }\n  return locked;\n}\n\nfunction unlockScreen() {\n  var screen = window.screen;\n  if (defined(screen)) {\n    if (defined(screen.unlockOrientation)) {\n      screen.unlockOrientation();\n    } else if (defined(screen.mozUnlockOrientation)) {\n      screen.mozUnlockOrientation();\n    } else if (defined(screen.msUnlockOrientation)) {\n      screen.msUnlockOrientation();\n    } else if (defined(screen.orientation && screen.orientation.unlock)) {\n      screen.orientation.unlock();\n    }\n  }\n}\n\nfunction toggleVR(viewModel, scene, isVRMode, isOrthographic) {\n  if (isOrthographic()) {\n    return;\n  }\n\n  if (isVRMode()) {\n    scene.useWebVR = false;\n    if (viewModel._locked) {\n      unlockScreen();\n      viewModel._locked = false;\n    }\n    viewModel._noSleep.disable();\n    Fullscreen.exitFullscreen();\n    isVRMode(false);\n  } else {\n    if (!Fullscreen.fullscreen) {\n      Fullscreen.requestFullscreen(viewModel._vrElement);\n    }\n    viewModel._noSleep.enable();\n    if (!viewModel._locked) {\n      viewModel._locked = lockScreen(\"landscape\");\n    }\n    scene.useWebVR = true;\n    isVRMode(true);\n  }\n}\n\n/**\n * The view model for {@link VRButton}.\n * @alias VRButtonViewModel\n * @constructor\n *\n * @param {Scene} scene The scene.\n * @param {Element|String} [vrElement=document.body] The element or id to be placed into VR mode.\n */\nfunction VRButtonViewModel(scene, vrElement) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var that = this;\n\n  var isEnabled = knockout.observable(Fullscreen.enabled);\n  var isVRMode = knockout.observable(false);\n\n  /**\n   * Gets whether or not VR mode is active.\n   *\n   * @type {Boolean}\n   */\n  this.isVRMode = undefined;\n  knockout.defineProperty(this, \"isVRMode\", {\n    get: function () {\n      return isVRMode();\n    },\n  });\n\n  /**\n   * Gets or sets whether or not VR functionality should be enabled.\n   *\n   * @type {Boolean}\n   * @see Fullscreen.enabled\n   */\n  this.isVREnabled = undefined;\n  knockout.defineProperty(this, \"isVREnabled\", {\n    get: function () {\n      return isEnabled();\n    },\n    set: function (value) {\n      isEnabled(value && Fullscreen.enabled);\n    },\n  });\n\n  /**\n   * Gets the tooltip.  This property is observable.\n   *\n   * @type {String}\n   */\n  this.tooltip = undefined;\n  knockout.defineProperty(this, \"tooltip\", function () {\n    if (!isEnabled()) {\n      return \"VR mode is unavailable\";\n    }\n    return isVRMode() ? \"Exit VR mode\" : \"Enter VR mode\";\n  });\n\n  var isOrthographic = knockout.observable(false);\n\n  this._isOrthographic = undefined;\n  knockout.defineProperty(this, \"_isOrthographic\", {\n    get: function () {\n      return isOrthographic();\n    },\n  });\n\n  this._eventHelper = new EventHelper();\n  this._eventHelper.add(scene.preRender, function () {\n    isOrthographic(scene.camera.frustum instanceof OrthographicFrustum);\n  });\n\n  this._locked = false;\n  this._noSleep = new NoSleep();\n\n  this._command = createCommand(function () {\n    toggleVR(that, scene, isVRMode, isOrthographic);\n  }, knockout.getObservable(this, \"isVREnabled\"));\n\n  this._vrElement = defaultValue(getElement(vrElement), document.body);\n\n  this._callback = function () {\n    if (!Fullscreen.fullscreen && isVRMode()) {\n      scene.useWebVR = false;\n      if (that._locked) {\n        unlockScreen();\n        that._locked = false;\n      }\n      that._noSleep.disable();\n      isVRMode(false);\n    }\n  };\n  document.addEventListener(Fullscreen.changeEventName, this._callback);\n}\n\nObject.defineProperties(VRButtonViewModel.prototype, {\n  /**\n   * Gets or sets the HTML element to place into VR mode when the\n   * corresponding button is pressed.\n   * @memberof VRButtonViewModel.prototype\n   *\n   * @type {Element}\n   */\n  vrElement: {\n    //TODO:@exception {DeveloperError} value must be a valid HTML Element.\n    get: function () {\n      return this._vrElement;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!(value instanceof Element)) {\n        throw new DeveloperError(\"value must be a valid Element.\");\n      }\n      //>>includeEnd('debug');\n\n      this._vrElement = value;\n    },\n  },\n\n  /**\n   * Gets the Command to toggle VR mode.\n   * @memberof VRButtonViewModel.prototype\n   *\n   * @type {Command}\n   */\n  command: {\n    get: function () {\n      return this._command;\n    },\n  },\n});\n\n/**\n * @returns {Boolean} true if the object has been destroyed, false otherwise.\n */\nVRButtonViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the view model.  Should be called to\n * properly clean up the view model when it is no longer needed.\n */\nVRButtonViewModel.prototype.destroy = function () {\n  this._eventHelper.removeAll();\n  document.removeEventListener(Fullscreen.changeEventName, this._callback);\n  destroyObject(this);\n};\nexport default VRButtonViewModel;\n"]},"metadata":{},"sourceType":"module"}