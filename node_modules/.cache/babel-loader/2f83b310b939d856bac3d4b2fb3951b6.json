{"ast":null,"code":"import Cartographic from \"../Core/Cartographic.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport createBillboardPointCallback from \"./createBillboardPointCallback.js\";\n/**\n * A point feature of a {@link Cesium3DTileset}.\n * <p>\n * Provides access to a feature's properties stored in the tile's batch table, as well\n * as the ability to show/hide a feature and change its point properties\n * </p>\n * <p>\n * Modifications to a <code>Cesium3DTilePointFeature</code> object have the lifetime of the tile's\n * content.  If the tile's content is unloaded, e.g., due to it going out of view and needing\n * to free space in the cache for visible tiles, listen to the {@link Cesium3DTileset#tileUnload} event to save any\n * modifications. Also listen to the {@link Cesium3DTileset#tileVisible} event to reapply any modifications.\n * </p>\n * <p>\n * Do not construct this directly.  Access it through {@link Cesium3DTileContent#getFeature}\n * or picking using {@link Scene#pick} and {@link Scene#pickPosition}.\n * </p>\n *\n * @alias Cesium3DTilePointFeature\n * @constructor\n *\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n *\n * @example\n * // On mouse over, display all the properties for a feature in the console log.\n * handler.setInputAction(function(movement) {\n *     var feature = scene.pick(movement.endPosition);\n *     if (feature instanceof Cesium.Cesium3DTilePointFeature) {\n *         var propertyNames = feature.getPropertyNames();\n *         var length = propertyNames.length;\n *         for (var i = 0; i < length; ++i) {\n *             var propertyName = propertyNames[i];\n *             console.log(propertyName + ': ' + feature.getProperty(propertyName));\n *         }\n *     }\n * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n */\n\nfunction Cesium3DTilePointFeature(content, batchId, billboard, label, polyline) {\n  this._content = content;\n  this._billboard = billboard;\n  this._label = label;\n  this._polyline = polyline;\n  this._batchId = batchId;\n  this._billboardImage = undefined;\n  this._billboardColor = undefined;\n  this._billboardOutlineColor = undefined;\n  this._billboardOutlineWidth = undefined;\n  this._billboardSize = undefined;\n  this._pointSize = undefined;\n  this._color = undefined;\n  this._pointSize = undefined;\n  this._pointOutlineColor = undefined;\n  this._pointOutlineWidth = undefined;\n  this._heightOffset = undefined;\n  this._pickIds = new Array(3);\n  setBillboardImage(this);\n}\n\nvar scratchCartographic = new Cartographic();\nObject.defineProperties(Cesium3DTilePointFeature.prototype, {\n  /**\n   * Gets or sets if the feature will be shown. This is set for all features\n   * when a style's show is evaluated.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  show: {\n    get: function get() {\n      return this._label.show;\n    },\n    set: function set(value) {\n      this._label.show = value;\n      this._billboard.show = value;\n      this._polyline.show = value;\n    }\n  },\n\n  /**\n   * Gets or sets the color of the point of this feature.\n   * <p>\n   * Only applied when <code>image</code> is <code>undefined</code>.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  color: {\n    get: function get() {\n      return this._color;\n    },\n    set: function set(value) {\n      this._color = Color.clone(value, this._color);\n      setBillboardImage(this);\n    }\n  },\n\n  /**\n   * Gets or sets the point size of this feature.\n   * <p>\n   * Only applied when <code>image</code> is <code>undefined</code>.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Number}\n   */\n  pointSize: {\n    get: function get() {\n      return this._pointSize;\n    },\n    set: function set(value) {\n      this._pointSize = value;\n      setBillboardImage(this);\n    }\n  },\n\n  /**\n   * Gets or sets the point outline color of this feature.\n   * <p>\n   * Only applied when <code>image</code> is <code>undefined</code>.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  pointOutlineColor: {\n    get: function get() {\n      return this._pointOutlineColor;\n    },\n    set: function set(value) {\n      this._pointOutlineColor = Color.clone(value, this._pointOutlineColor);\n      setBillboardImage(this);\n    }\n  },\n\n  /**\n   * Gets or sets the point outline width in pixels of this feature.\n   * <p>\n   * Only applied when <code>image</code> is <code>undefined</code>.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Number}\n   */\n  pointOutlineWidth: {\n    get: function get() {\n      return this._pointOutlineWidth;\n    },\n    set: function set(value) {\n      this._pointOutlineWidth = value;\n      setBillboardImage(this);\n    }\n  },\n\n  /**\n   * Gets or sets the label color of this feature.\n   * <p>\n   * The color will be applied to the label if <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  labelColor: {\n    get: function get() {\n      return this._label.fillColor;\n    },\n    set: function set(value) {\n      this._label.fillColor = value;\n      this._polyline.show = this._label.show && value.alpha > 0.0;\n    }\n  },\n\n  /**\n   * Gets or sets the label outline color of this feature.\n   * <p>\n   * The outline color will be applied to the label if <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  labelOutlineColor: {\n    get: function get() {\n      return this._label.outlineColor;\n    },\n    set: function set(value) {\n      this._label.outlineColor = value;\n    }\n  },\n\n  /**\n   * Gets or sets the outline width in pixels of this feature.\n   * <p>\n   * The outline width will be applied to the point if <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Number}\n   */\n  labelOutlineWidth: {\n    get: function get() {\n      return this._label.outlineWidth;\n    },\n    set: function set(value) {\n      this._label.outlineWidth = value;\n    }\n  },\n\n  /**\n   * Gets or sets the font of this feature.\n   * <p>\n   * Only applied when the <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {String}\n   */\n  font: {\n    get: function get() {\n      return this._label.font;\n    },\n    set: function set(value) {\n      this._label.font = value;\n    }\n  },\n\n  /**\n   * Gets or sets the fill and outline style of this feature.\n   * <p>\n   * Only applied when <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {LabelStyle}\n   */\n  labelStyle: {\n    get: function get() {\n      return this._label.style;\n    },\n    set: function set(value) {\n      this._label.style = value;\n    }\n  },\n\n  /**\n   * Gets or sets the text for this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {String}\n   */\n  labelText: {\n    get: function get() {\n      return this._label.text;\n    },\n    set: function set(value) {\n      if (!defined(value)) {\n        value = \"\";\n      }\n\n      this._label.text = value;\n    }\n  },\n\n  /**\n   * Gets or sets the background color of the text for this feature.\n   * <p>\n   * Only applied when <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  backgroundColor: {\n    get: function get() {\n      return this._label.backgroundColor;\n    },\n    set: function set(value) {\n      this._label.backgroundColor = value;\n    }\n  },\n\n  /**\n   * Gets or sets the background padding of the text for this feature.\n   * <p>\n   * Only applied when <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Cartesian2}\n   */\n  backgroundPadding: {\n    get: function get() {\n      return this._label.backgroundPadding;\n    },\n    set: function set(value) {\n      this._label.backgroundPadding = value;\n    }\n  },\n\n  /**\n   * Gets or sets whether to display the background of the text for this feature.\n   * <p>\n   * Only applied when <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Boolean}\n   */\n  backgroundEnabled: {\n    get: function get() {\n      return this._label.showBackground;\n    },\n    set: function set(value) {\n      this._label.showBackground = value;\n    }\n  },\n\n  /**\n   * Gets or sets the near and far scaling properties for this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {NearFarScalar}\n   */\n  scaleByDistance: {\n    get: function get() {\n      return this._label.scaleByDistance;\n    },\n    set: function set(value) {\n      this._label.scaleByDistance = value;\n      this._billboard.scaleByDistance = value;\n    }\n  },\n\n  /**\n   * Gets or sets the near and far translucency properties for this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {NearFarScalar}\n   */\n  translucencyByDistance: {\n    get: function get() {\n      return this._label.translucencyByDistance;\n    },\n    set: function set(value) {\n      this._label.translucencyByDistance = value;\n      this._billboard.translucencyByDistance = value;\n    }\n  },\n\n  /**\n   * Gets or sets the condition specifying at what distance from the camera that this feature will be displayed.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {DistanceDisplayCondition}\n   */\n  distanceDisplayCondition: {\n    get: function get() {\n      return this._label.distanceDisplayCondition;\n    },\n    set: function set(value) {\n      this._label.distanceDisplayCondition = value;\n      this._polyline.distanceDisplayCondition = value;\n      this._billboard.distanceDisplayCondition = value;\n    }\n  },\n\n  /**\n   * Gets or sets the height offset in meters of this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Number}\n   */\n  heightOffset: {\n    get: function get() {\n      return this._heightOffset;\n    },\n    set: function set(value) {\n      var offset = defaultValue(this._heightOffset, 0.0);\n      var ellipsoid = this._content.tileset.ellipsoid;\n      var cart = ellipsoid.cartesianToCartographic(this._billboard.position, scratchCartographic);\n      cart.height = cart.height - offset + value;\n      var newPosition = ellipsoid.cartographicToCartesian(cart);\n      this._billboard.position = newPosition;\n      this._label.position = this._billboard.position;\n      this._polyline.positions = [this._polyline.positions[0], newPosition];\n      this._heightOffset = value;\n    }\n  },\n\n  /**\n   * Gets or sets whether the anchor line is displayed.\n   * <p>\n   * Only applied when <code>heightOffset</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Boolean}\n   */\n  anchorLineEnabled: {\n    get: function get() {\n      return this._polyline.show;\n    },\n    set: function set(value) {\n      this._polyline.show = value;\n    }\n  },\n\n  /**\n   * Gets or sets the color for the anchor line.\n   * <p>\n   * Only applied when <code>heightOffset</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  anchorLineColor: {\n    get: function get() {\n      return this._polyline.material.uniforms.color;\n    },\n    set: function set(value) {\n      this._polyline.material.uniforms.color = Color.clone(value, this._polyline.material.uniforms.color);\n    }\n  },\n\n  /**\n   * Gets or sets the image of this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {String}\n   */\n  image: {\n    get: function get() {\n      return this._billboardImage;\n    },\n    set: function set(value) {\n      var imageChanged = this._billboardImage !== value;\n      this._billboardImage = value;\n\n      if (imageChanged) {\n        setBillboardImage(this);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the distance where depth testing will be disabled.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Number}\n   */\n  disableDepthTestDistance: {\n    get: function get() {\n      return this._label.disableDepthTestDistance;\n    },\n    set: function set(value) {\n      this._label.disableDepthTestDistance = value;\n      this._billboard.disableDepthTestDistance = value;\n    }\n  },\n\n  /**\n   * Gets or sets the horizontal origin of this point, which determines if the point is\n   * to the left, center, or right of its anchor position.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {HorizontalOrigin}\n   */\n  horizontalOrigin: {\n    get: function get() {\n      return this._billboard.horizontalOrigin;\n    },\n    set: function set(value) {\n      this._billboard.horizontalOrigin = value;\n    }\n  },\n\n  /**\n   * Gets or sets the vertical origin of this point, which determines if the point is\n   * to the bottom, center, or top of its anchor position.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {VerticalOrigin}\n   */\n  verticalOrigin: {\n    get: function get() {\n      return this._billboard.verticalOrigin;\n    },\n    set: function set(value) {\n      this._billboard.verticalOrigin = value;\n    }\n  },\n\n  /**\n   * Gets or sets the horizontal origin of this point's text, which determines if the point's text is\n   * to the left, center, or right of its anchor position.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {HorizontalOrigin}\n   */\n  labelHorizontalOrigin: {\n    get: function get() {\n      return this._label.horizontalOrigin;\n    },\n    set: function set(value) {\n      this._label.horizontalOrigin = value;\n    }\n  },\n\n  /**\n   * Get or sets the vertical origin of this point's text, which determines if the point's text is\n   * to the bottom, center, top, or baseline of it's anchor point.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {VerticalOrigin}\n   */\n  labelVerticalOrigin: {\n    get: function get() {\n      return this._label.verticalOrigin;\n    },\n    set: function set(value) {\n      this._label.verticalOrigin = value;\n    }\n  },\n\n  /**\n   * Gets the content of the tile containing the feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Cesium3DTileContent}\n   *\n   * @readonly\n   * @private\n   */\n  content: {\n    get: function get() {\n      return this._content;\n    }\n  },\n\n  /**\n   * Gets the tileset containing the feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Cesium3DTileset}\n   *\n   * @readonly\n   */\n  tileset: {\n    get: function get() {\n      return this._content.tileset;\n    }\n  },\n\n  /**\n   * All objects returned by {@link Scene#pick} have a <code>primitive</code> property. This returns\n   * the tileset containing the feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Cesium3DTileset}\n   *\n   * @readonly\n   */\n  primitive: {\n    get: function get() {\n      return this._content.tileset;\n    }\n  },\n\n  /**\n   * @private\n   */\n  pickIds: {\n    get: function get() {\n      var ids = this._pickIds;\n      ids[0] = this._billboard.pickId;\n      ids[1] = this._label.pickId;\n      ids[2] = this._polyline.pickId;\n      return ids;\n    }\n  }\n});\nCesium3DTilePointFeature.defaultColor = Color.WHITE;\nCesium3DTilePointFeature.defaultPointOutlineColor = Color.BLACK;\nCesium3DTilePointFeature.defaultPointOutlineWidth = 0.0;\nCesium3DTilePointFeature.defaultPointSize = 8.0;\n\nfunction setBillboardImage(feature) {\n  var b = feature._billboard;\n\n  if (defined(feature._billboardImage) && feature._billboardImage !== b.image) {\n    b.image = feature._billboardImage;\n    return;\n  }\n\n  if (defined(feature._billboardImage)) {\n    return;\n  }\n\n  var newColor = defaultValue(feature._color, Cesium3DTilePointFeature.defaultColor);\n  var newOutlineColor = defaultValue(feature._pointOutlineColor, Cesium3DTilePointFeature.defaultPointOutlineColor);\n  var newOutlineWidth = defaultValue(feature._pointOutlineWidth, Cesium3DTilePointFeature.defaultPointOutlineWidth);\n  var newPointSize = defaultValue(feature._pointSize, Cesium3DTilePointFeature.defaultPointSize);\n  var currentColor = feature._billboardColor;\n  var currentOutlineColor = feature._billboardOutlineColor;\n  var currentOutlineWidth = feature._billboardOutlineWidth;\n  var currentPointSize = feature._billboardSize;\n\n  if (Color.equals(newColor, currentColor) && Color.equals(newOutlineColor, currentOutlineColor) && newOutlineWidth === currentOutlineWidth && newPointSize === currentPointSize) {\n    return;\n  }\n\n  feature._billboardColor = Color.clone(newColor, feature._billboardColor);\n  feature._billboardOutlineColor = Color.clone(newOutlineColor, feature._billboardOutlineColor);\n  feature._billboardOutlineWidth = newOutlineWidth;\n  feature._billboardSize = newPointSize;\n  var centerAlpha = newColor.alpha;\n  var cssColor = newColor.toCssColorString();\n  var cssOutlineColor = newOutlineColor.toCssColorString();\n  var textureId = JSON.stringify([cssColor, newPointSize, cssOutlineColor, newOutlineWidth]);\n  b.setImage(textureId, createBillboardPointCallback(centerAlpha, cssColor, cssOutlineColor, newOutlineWidth, newPointSize));\n}\n/**\n * Returns whether the feature contains this property. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {String} name The case-sensitive name of the property.\n * @returns {Boolean} Whether the feature contains this property.\n */\n\n\nCesium3DTilePointFeature.prototype.hasProperty = function (name) {\n  return this._content.batchTable.hasProperty(this._batchId, name);\n};\n/**\n * Returns an array of property names for the feature. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {String[]} results An array into which to store the results.\n * @returns {String[]} The names of the feature's properties.\n */\n\n\nCesium3DTilePointFeature.prototype.getPropertyNames = function (results) {\n  return this._content.batchTable.getPropertyNames(this._batchId, results);\n};\n/**\n * Returns a copy of the value of the feature's property with the given name. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {String} name The case-sensitive name of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the property does not exist.\n *\n * @example\n * // Display all the properties for a feature in the console log.\n * var propertyNames = feature.getPropertyNames();\n * var length = propertyNames.length;\n * for (var i = 0; i < length; ++i) {\n *     var propertyName = propertyNames[i];\n *     console.log(propertyName + ': ' + feature.getProperty(propertyName));\n * }\n */\n\n\nCesium3DTilePointFeature.prototype.getProperty = function (name) {\n  return this._content.batchTable.getProperty(this._batchId, name);\n};\n/**\n * Sets the value of the feature's property with the given name.\n * <p>\n * If a property with the given name doesn't exist, it is created.\n * </p>\n *\n * @param {String} name The case-sensitive name of the property.\n * @param {*} value The value of the property that will be copied.\n *\n * @exception {DeveloperError} Inherited batch table hierarchy property is read only.\n *\n * @example\n * var height = feature.getProperty('Height'); // e.g., the height of a building\n *\n * @example\n * var name = 'clicked';\n * if (feature.getProperty(name)) {\n *     console.log('already clicked');\n * } else {\n *     feature.setProperty(name, true);\n *     console.log('first click');\n * }\n */\n\n\nCesium3DTilePointFeature.prototype.setProperty = function (name, value) {\n  this._content.batchTable.setProperty(this._batchId, name, value); // PERFORMANCE_IDEA: Probably overkill, but maybe only mark the tile dirty if the\n  // property is in one of the style's expressions or - if it can be done quickly -\n  // if the new property value changed the result of an expression.\n\n\n  this._content.featurePropertiesDirty = true;\n};\n/**\n * Returns whether the feature's class name equals <code>className</code>. Unlike {@link Cesium3DTileFeature#isClass}\n * this function only checks the feature's exact class and not inherited classes.\n * <p>\n * This function returns <code>false</code> if no batch table hierarchy is present.\n * </p>\n *\n * @param {String} className The name to check against.\n * @returns {Boolean} Whether the feature's class name equals <code>className</code>\n *\n * @private\n */\n\n\nCesium3DTilePointFeature.prototype.isExactClass = function (className) {\n  return this._content.batchTable.isExactClass(this._batchId, className);\n};\n/**\n * Returns whether the feature's class or any inherited classes are named <code>className</code>.\n * <p>\n * This function returns <code>false</code> if no batch table hierarchy is present.\n * </p>\n *\n * @param {String} className The name to check against.\n * @returns {Boolean} Whether the feature's class or inherited classes are named <code>className</code>\n *\n * @private\n */\n\n\nCesium3DTilePointFeature.prototype.isClass = function (className) {\n  return this._content.batchTable.isClass(this._batchId, className);\n};\n/**\n * Returns the feature's class name.\n * <p>\n * This function returns <code>undefined</code> if no batch table hierarchy is present.\n * </p>\n *\n * @returns {String} The feature's class name.\n *\n * @private\n */\n\n\nCesium3DTilePointFeature.prototype.getExactClassName = function () {\n  return this._content.batchTable.getExactClassName(this._batchId);\n};\n\nexport default Cesium3DTilePointFeature;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/Cesium3DTilePointFeature.js"],"names":["Cartographic","Color","defaultValue","defined","createBillboardPointCallback","Cesium3DTilePointFeature","content","batchId","billboard","label","polyline","_content","_billboard","_label","_polyline","_batchId","_billboardImage","undefined","_billboardColor","_billboardOutlineColor","_billboardOutlineWidth","_billboardSize","_pointSize","_color","_pointOutlineColor","_pointOutlineWidth","_heightOffset","_pickIds","Array","setBillboardImage","scratchCartographic","Object","defineProperties","prototype","show","get","set","value","color","clone","pointSize","pointOutlineColor","pointOutlineWidth","labelColor","fillColor","alpha","labelOutlineColor","outlineColor","labelOutlineWidth","outlineWidth","font","labelStyle","style","labelText","text","backgroundColor","backgroundPadding","backgroundEnabled","showBackground","scaleByDistance","translucencyByDistance","distanceDisplayCondition","heightOffset","offset","ellipsoid","tileset","cart","cartesianToCartographic","position","height","newPosition","cartographicToCartesian","positions","anchorLineEnabled","anchorLineColor","material","uniforms","image","imageChanged","disableDepthTestDistance","horizontalOrigin","verticalOrigin","labelHorizontalOrigin","labelVerticalOrigin","primitive","pickIds","ids","pickId","defaultColor","WHITE","defaultPointOutlineColor","BLACK","defaultPointOutlineWidth","defaultPointSize","feature","b","newColor","newOutlineColor","newOutlineWidth","newPointSize","currentColor","currentOutlineColor","currentOutlineWidth","currentPointSize","equals","centerAlpha","cssColor","toCssColorString","cssOutlineColor","textureId","JSON","stringify","setImage","hasProperty","name","batchTable","getPropertyNames","results","getProperty","setProperty","featurePropertiesDirty","isExactClass","className","isClass","getExactClassName"],"mappings":"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","sourcesContent":["import Cartographic from \"../Core/Cartographic.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport createBillboardPointCallback from \"./createBillboardPointCallback.js\";\n\n/**\n * A point feature of a {@link Cesium3DTileset}.\n * <p>\n * Provides access to a feature's properties stored in the tile's batch table, as well\n * as the ability to show/hide a feature and change its point properties\n * </p>\n * <p>\n * Modifications to a <code>Cesium3DTilePointFeature</code> object have the lifetime of the tile's\n * content.  If the tile's content is unloaded, e.g., due to it going out of view and needing\n * to free space in the cache for visible tiles, listen to the {@link Cesium3DTileset#tileUnload} event to save any\n * modifications. Also listen to the {@link Cesium3DTileset#tileVisible} event to reapply any modifications.\n * </p>\n * <p>\n * Do not construct this directly.  Access it through {@link Cesium3DTileContent#getFeature}\n * or picking using {@link Scene#pick} and {@link Scene#pickPosition}.\n * </p>\n *\n * @alias Cesium3DTilePointFeature\n * @constructor\n *\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n *\n * @example\n * // On mouse over, display all the properties for a feature in the console log.\n * handler.setInputAction(function(movement) {\n *     var feature = scene.pick(movement.endPosition);\n *     if (feature instanceof Cesium.Cesium3DTilePointFeature) {\n *         var propertyNames = feature.getPropertyNames();\n *         var length = propertyNames.length;\n *         for (var i = 0; i < length; ++i) {\n *             var propertyName = propertyNames[i];\n *             console.log(propertyName + ': ' + feature.getProperty(propertyName));\n *         }\n *     }\n * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n */\nfunction Cesium3DTilePointFeature(\n  content,\n  batchId,\n  billboard,\n  label,\n  polyline\n) {\n  this._content = content;\n  this._billboard = billboard;\n  this._label = label;\n  this._polyline = polyline;\n\n  this._batchId = batchId;\n  this._billboardImage = undefined;\n  this._billboardColor = undefined;\n  this._billboardOutlineColor = undefined;\n  this._billboardOutlineWidth = undefined;\n  this._billboardSize = undefined;\n  this._pointSize = undefined;\n  this._color = undefined;\n  this._pointSize = undefined;\n  this._pointOutlineColor = undefined;\n  this._pointOutlineWidth = undefined;\n  this._heightOffset = undefined;\n\n  this._pickIds = new Array(3);\n\n  setBillboardImage(this);\n}\n\nvar scratchCartographic = new Cartographic();\n\nObject.defineProperties(Cesium3DTilePointFeature.prototype, {\n  /**\n   * Gets or sets if the feature will be shown. This is set for all features\n   * when a style's show is evaluated.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  show: {\n    get: function () {\n      return this._label.show;\n    },\n    set: function (value) {\n      this._label.show = value;\n      this._billboard.show = value;\n      this._polyline.show = value;\n    },\n  },\n\n  /**\n   * Gets or sets the color of the point of this feature.\n   * <p>\n   * Only applied when <code>image</code> is <code>undefined</code>.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  color: {\n    get: function () {\n      return this._color;\n    },\n    set: function (value) {\n      this._color = Color.clone(value, this._color);\n      setBillboardImage(this);\n    },\n  },\n\n  /**\n   * Gets or sets the point size of this feature.\n   * <p>\n   * Only applied when <code>image</code> is <code>undefined</code>.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Number}\n   */\n  pointSize: {\n    get: function () {\n      return this._pointSize;\n    },\n    set: function (value) {\n      this._pointSize = value;\n      setBillboardImage(this);\n    },\n  },\n\n  /**\n   * Gets or sets the point outline color of this feature.\n   * <p>\n   * Only applied when <code>image</code> is <code>undefined</code>.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  pointOutlineColor: {\n    get: function () {\n      return this._pointOutlineColor;\n    },\n    set: function (value) {\n      this._pointOutlineColor = Color.clone(value, this._pointOutlineColor);\n      setBillboardImage(this);\n    },\n  },\n\n  /**\n   * Gets or sets the point outline width in pixels of this feature.\n   * <p>\n   * Only applied when <code>image</code> is <code>undefined</code>.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Number}\n   */\n  pointOutlineWidth: {\n    get: function () {\n      return this._pointOutlineWidth;\n    },\n    set: function (value) {\n      this._pointOutlineWidth = value;\n      setBillboardImage(this);\n    },\n  },\n\n  /**\n   * Gets or sets the label color of this feature.\n   * <p>\n   * The color will be applied to the label if <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  labelColor: {\n    get: function () {\n      return this._label.fillColor;\n    },\n    set: function (value) {\n      this._label.fillColor = value;\n      this._polyline.show = this._label.show && value.alpha > 0.0;\n    },\n  },\n\n  /**\n   * Gets or sets the label outline color of this feature.\n   * <p>\n   * The outline color will be applied to the label if <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  labelOutlineColor: {\n    get: function () {\n      return this._label.outlineColor;\n    },\n    set: function (value) {\n      this._label.outlineColor = value;\n    },\n  },\n\n  /**\n   * Gets or sets the outline width in pixels of this feature.\n   * <p>\n   * The outline width will be applied to the point if <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Number}\n   */\n  labelOutlineWidth: {\n    get: function () {\n      return this._label.outlineWidth;\n    },\n    set: function (value) {\n      this._label.outlineWidth = value;\n    },\n  },\n\n  /**\n   * Gets or sets the font of this feature.\n   * <p>\n   * Only applied when the <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {String}\n   */\n  font: {\n    get: function () {\n      return this._label.font;\n    },\n    set: function (value) {\n      this._label.font = value;\n    },\n  },\n\n  /**\n   * Gets or sets the fill and outline style of this feature.\n   * <p>\n   * Only applied when <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {LabelStyle}\n   */\n  labelStyle: {\n    get: function () {\n      return this._label.style;\n    },\n    set: function (value) {\n      this._label.style = value;\n    },\n  },\n\n  /**\n   * Gets or sets the text for this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {String}\n   */\n  labelText: {\n    get: function () {\n      return this._label.text;\n    },\n    set: function (value) {\n      if (!defined(value)) {\n        value = \"\";\n      }\n      this._label.text = value;\n    },\n  },\n\n  /**\n   * Gets or sets the background color of the text for this feature.\n   * <p>\n   * Only applied when <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  backgroundColor: {\n    get: function () {\n      return this._label.backgroundColor;\n    },\n    set: function (value) {\n      this._label.backgroundColor = value;\n    },\n  },\n\n  /**\n   * Gets or sets the background padding of the text for this feature.\n   * <p>\n   * Only applied when <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Cartesian2}\n   */\n  backgroundPadding: {\n    get: function () {\n      return this._label.backgroundPadding;\n    },\n    set: function (value) {\n      this._label.backgroundPadding = value;\n    },\n  },\n\n  /**\n   * Gets or sets whether to display the background of the text for this feature.\n   * <p>\n   * Only applied when <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Boolean}\n   */\n  backgroundEnabled: {\n    get: function () {\n      return this._label.showBackground;\n    },\n    set: function (value) {\n      this._label.showBackground = value;\n    },\n  },\n\n  /**\n   * Gets or sets the near and far scaling properties for this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {NearFarScalar}\n   */\n  scaleByDistance: {\n    get: function () {\n      return this._label.scaleByDistance;\n    },\n    set: function (value) {\n      this._label.scaleByDistance = value;\n      this._billboard.scaleByDistance = value;\n    },\n  },\n\n  /**\n   * Gets or sets the near and far translucency properties for this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {NearFarScalar}\n   */\n  translucencyByDistance: {\n    get: function () {\n      return this._label.translucencyByDistance;\n    },\n    set: function (value) {\n      this._label.translucencyByDistance = value;\n      this._billboard.translucencyByDistance = value;\n    },\n  },\n\n  /**\n   * Gets or sets the condition specifying at what distance from the camera that this feature will be displayed.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {DistanceDisplayCondition}\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._label.distanceDisplayCondition;\n    },\n    set: function (value) {\n      this._label.distanceDisplayCondition = value;\n      this._polyline.distanceDisplayCondition = value;\n      this._billboard.distanceDisplayCondition = value;\n    },\n  },\n\n  /**\n   * Gets or sets the height offset in meters of this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Number}\n   */\n  heightOffset: {\n    get: function () {\n      return this._heightOffset;\n    },\n    set: function (value) {\n      var offset = defaultValue(this._heightOffset, 0.0);\n\n      var ellipsoid = this._content.tileset.ellipsoid;\n      var cart = ellipsoid.cartesianToCartographic(\n        this._billboard.position,\n        scratchCartographic\n      );\n      cart.height = cart.height - offset + value;\n      var newPosition = ellipsoid.cartographicToCartesian(cart);\n\n      this._billboard.position = newPosition;\n      this._label.position = this._billboard.position;\n      this._polyline.positions = [this._polyline.positions[0], newPosition];\n\n      this._heightOffset = value;\n    },\n  },\n\n  /**\n   * Gets or sets whether the anchor line is displayed.\n   * <p>\n   * Only applied when <code>heightOffset</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Boolean}\n   */\n  anchorLineEnabled: {\n    get: function () {\n      return this._polyline.show;\n    },\n    set: function (value) {\n      this._polyline.show = value;\n    },\n  },\n\n  /**\n   * Gets or sets the color for the anchor line.\n   * <p>\n   * Only applied when <code>heightOffset</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  anchorLineColor: {\n    get: function () {\n      return this._polyline.material.uniforms.color;\n    },\n    set: function (value) {\n      this._polyline.material.uniforms.color = Color.clone(\n        value,\n        this._polyline.material.uniforms.color\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the image of this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {String}\n   */\n  image: {\n    get: function () {\n      return this._billboardImage;\n    },\n    set: function (value) {\n      var imageChanged = this._billboardImage !== value;\n      this._billboardImage = value;\n      if (imageChanged) {\n        setBillboardImage(this);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the distance where depth testing will be disabled.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Number}\n   */\n  disableDepthTestDistance: {\n    get: function () {\n      return this._label.disableDepthTestDistance;\n    },\n    set: function (value) {\n      this._label.disableDepthTestDistance = value;\n      this._billboard.disableDepthTestDistance = value;\n    },\n  },\n\n  /**\n   * Gets or sets the horizontal origin of this point, which determines if the point is\n   * to the left, center, or right of its anchor position.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {HorizontalOrigin}\n   */\n  horizontalOrigin: {\n    get: function () {\n      return this._billboard.horizontalOrigin;\n    },\n    set: function (value) {\n      this._billboard.horizontalOrigin = value;\n    },\n  },\n\n  /**\n   * Gets or sets the vertical origin of this point, which determines if the point is\n   * to the bottom, center, or top of its anchor position.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {VerticalOrigin}\n   */\n  verticalOrigin: {\n    get: function () {\n      return this._billboard.verticalOrigin;\n    },\n    set: function (value) {\n      this._billboard.verticalOrigin = value;\n    },\n  },\n\n  /**\n   * Gets or sets the horizontal origin of this point's text, which determines if the point's text is\n   * to the left, center, or right of its anchor position.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {HorizontalOrigin}\n   */\n  labelHorizontalOrigin: {\n    get: function () {\n      return this._label.horizontalOrigin;\n    },\n    set: function (value) {\n      this._label.horizontalOrigin = value;\n    },\n  },\n\n  /**\n   * Get or sets the vertical origin of this point's text, which determines if the point's text is\n   * to the bottom, center, top, or baseline of it's anchor point.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {VerticalOrigin}\n   */\n  labelVerticalOrigin: {\n    get: function () {\n      return this._label.verticalOrigin;\n    },\n    set: function (value) {\n      this._label.verticalOrigin = value;\n    },\n  },\n\n  /**\n   * Gets the content of the tile containing the feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Cesium3DTileContent}\n   *\n   * @readonly\n   * @private\n   */\n  content: {\n    get: function () {\n      return this._content;\n    },\n  },\n\n  /**\n   * Gets the tileset containing the feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Cesium3DTileset}\n   *\n   * @readonly\n   */\n  tileset: {\n    get: function () {\n      return this._content.tileset;\n    },\n  },\n\n  /**\n   * All objects returned by {@link Scene#pick} have a <code>primitive</code> property. This returns\n   * the tileset containing the feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Cesium3DTileset}\n   *\n   * @readonly\n   */\n  primitive: {\n    get: function () {\n      return this._content.tileset;\n    },\n  },\n\n  /**\n   * @private\n   */\n  pickIds: {\n    get: function () {\n      var ids = this._pickIds;\n      ids[0] = this._billboard.pickId;\n      ids[1] = this._label.pickId;\n      ids[2] = this._polyline.pickId;\n      return ids;\n    },\n  },\n});\n\nCesium3DTilePointFeature.defaultColor = Color.WHITE;\nCesium3DTilePointFeature.defaultPointOutlineColor = Color.BLACK;\nCesium3DTilePointFeature.defaultPointOutlineWidth = 0.0;\nCesium3DTilePointFeature.defaultPointSize = 8.0;\n\nfunction setBillboardImage(feature) {\n  var b = feature._billboard;\n  if (defined(feature._billboardImage) && feature._billboardImage !== b.image) {\n    b.image = feature._billboardImage;\n    return;\n  }\n\n  if (defined(feature._billboardImage)) {\n    return;\n  }\n\n  var newColor = defaultValue(\n    feature._color,\n    Cesium3DTilePointFeature.defaultColor\n  );\n  var newOutlineColor = defaultValue(\n    feature._pointOutlineColor,\n    Cesium3DTilePointFeature.defaultPointOutlineColor\n  );\n  var newOutlineWidth = defaultValue(\n    feature._pointOutlineWidth,\n    Cesium3DTilePointFeature.defaultPointOutlineWidth\n  );\n  var newPointSize = defaultValue(\n    feature._pointSize,\n    Cesium3DTilePointFeature.defaultPointSize\n  );\n\n  var currentColor = feature._billboardColor;\n  var currentOutlineColor = feature._billboardOutlineColor;\n  var currentOutlineWidth = feature._billboardOutlineWidth;\n  var currentPointSize = feature._billboardSize;\n\n  if (\n    Color.equals(newColor, currentColor) &&\n    Color.equals(newOutlineColor, currentOutlineColor) &&\n    newOutlineWidth === currentOutlineWidth &&\n    newPointSize === currentPointSize\n  ) {\n    return;\n  }\n\n  feature._billboardColor = Color.clone(newColor, feature._billboardColor);\n  feature._billboardOutlineColor = Color.clone(\n    newOutlineColor,\n    feature._billboardOutlineColor\n  );\n  feature._billboardOutlineWidth = newOutlineWidth;\n  feature._billboardSize = newPointSize;\n\n  var centerAlpha = newColor.alpha;\n  var cssColor = newColor.toCssColorString();\n  var cssOutlineColor = newOutlineColor.toCssColorString();\n  var textureId = JSON.stringify([\n    cssColor,\n    newPointSize,\n    cssOutlineColor,\n    newOutlineWidth,\n  ]);\n\n  b.setImage(\n    textureId,\n    createBillboardPointCallback(\n      centerAlpha,\n      cssColor,\n      cssOutlineColor,\n      newOutlineWidth,\n      newPointSize\n    )\n  );\n}\n\n/**\n * Returns whether the feature contains this property. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {String} name The case-sensitive name of the property.\n * @returns {Boolean} Whether the feature contains this property.\n */\nCesium3DTilePointFeature.prototype.hasProperty = function (name) {\n  return this._content.batchTable.hasProperty(this._batchId, name);\n};\n\n/**\n * Returns an array of property names for the feature. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {String[]} results An array into which to store the results.\n * @returns {String[]} The names of the feature's properties.\n */\nCesium3DTilePointFeature.prototype.getPropertyNames = function (results) {\n  return this._content.batchTable.getPropertyNames(this._batchId, results);\n};\n\n/**\n * Returns a copy of the value of the feature's property with the given name. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {String} name The case-sensitive name of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the property does not exist.\n *\n * @example\n * // Display all the properties for a feature in the console log.\n * var propertyNames = feature.getPropertyNames();\n * var length = propertyNames.length;\n * for (var i = 0; i < length; ++i) {\n *     var propertyName = propertyNames[i];\n *     console.log(propertyName + ': ' + feature.getProperty(propertyName));\n * }\n */\nCesium3DTilePointFeature.prototype.getProperty = function (name) {\n  return this._content.batchTable.getProperty(this._batchId, name);\n};\n\n/**\n * Sets the value of the feature's property with the given name.\n * <p>\n * If a property with the given name doesn't exist, it is created.\n * </p>\n *\n * @param {String} name The case-sensitive name of the property.\n * @param {*} value The value of the property that will be copied.\n *\n * @exception {DeveloperError} Inherited batch table hierarchy property is read only.\n *\n * @example\n * var height = feature.getProperty('Height'); // e.g., the height of a building\n *\n * @example\n * var name = 'clicked';\n * if (feature.getProperty(name)) {\n *     console.log('already clicked');\n * } else {\n *     feature.setProperty(name, true);\n *     console.log('first click');\n * }\n */\nCesium3DTilePointFeature.prototype.setProperty = function (name, value) {\n  this._content.batchTable.setProperty(this._batchId, name, value);\n\n  // PERFORMANCE_IDEA: Probably overkill, but maybe only mark the tile dirty if the\n  // property is in one of the style's expressions or - if it can be done quickly -\n  // if the new property value changed the result of an expression.\n  this._content.featurePropertiesDirty = true;\n};\n\n/**\n * Returns whether the feature's class name equals <code>className</code>. Unlike {@link Cesium3DTileFeature#isClass}\n * this function only checks the feature's exact class and not inherited classes.\n * <p>\n * This function returns <code>false</code> if no batch table hierarchy is present.\n * </p>\n *\n * @param {String} className The name to check against.\n * @returns {Boolean} Whether the feature's class name equals <code>className</code>\n *\n * @private\n */\nCesium3DTilePointFeature.prototype.isExactClass = function (className) {\n  return this._content.batchTable.isExactClass(this._batchId, className);\n};\n\n/**\n * Returns whether the feature's class or any inherited classes are named <code>className</code>.\n * <p>\n * This function returns <code>false</code> if no batch table hierarchy is present.\n * </p>\n *\n * @param {String} className The name to check against.\n * @returns {Boolean} Whether the feature's class or inherited classes are named <code>className</code>\n *\n * @private\n */\nCesium3DTilePointFeature.prototype.isClass = function (className) {\n  return this._content.batchTable.isClass(this._batchId, className);\n};\n\n/**\n * Returns the feature's class name.\n * <p>\n * This function returns <code>undefined</code> if no batch table hierarchy is present.\n * </p>\n *\n * @returns {String} The feature's class name.\n *\n * @private\n */\nCesium3DTilePointFeature.prototype.getExactClassName = function () {\n  return this._content.batchTable.getExactClassName(this._batchId);\n};\nexport default Cesium3DTilePointFeature;\n"]},"metadata":{},"sourceType":"module"}