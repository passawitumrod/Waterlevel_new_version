{"ast":null,"code":"import ClockRange from \"./ClockRange.js\";\nimport ClockStep from \"./ClockStep.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Event from \"./Event.js\";\nimport getTimestamp from \"./getTimestamp.js\";\nimport JulianDate from \"./JulianDate.js\";\n/**\n * A simple clock for keeping track of simulated time.\n *\n * @alias Clock\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {JulianDate} [options.startTime] The start time of the clock.\n * @param {JulianDate} [options.stopTime] The stop time of the clock.\n * @param {JulianDate} [options.currentTime] The current time.\n * @param {Number} [options.multiplier=1.0] Determines how much time advances when {@link Clock#tick} is called, negative values allow for advancing backwards.\n * @param {ClockStep} [options.clockStep=ClockStep.SYSTEM_CLOCK_MULTIPLIER] Determines if calls to {@link Clock#tick} are frame dependent or system clock dependent.\n * @param {ClockRange} [options.clockRange=ClockRange.UNBOUNDED] Determines how the clock should behave when {@link Clock#startTime} or {@link Clock#stopTime} is reached.\n * @param {Boolean} [options.canAnimate=true] Indicates whether {@link Clock#tick} can advance time.  This could be false if data is being buffered, for example.  The clock will only tick when both {@link Clock#canAnimate} and {@link Clock#shouldAnimate} are true.\n * @param {Boolean} [options.shouldAnimate=false] Indicates whether {@link Clock#tick} should attempt to advance time.  The clock will only tick when both {@link Clock#canAnimate} and {@link Clock#shouldAnimate} are true.\n *\n * @exception {DeveloperError} startTime must come before stopTime.\n *\n *\n * @example\n * // Create a clock that loops on Christmas day 2013 and runs in real-time.\n * var clock = new Cesium.Clock({\n *    startTime : Cesium.JulianDate.fromIso8601(\"2013-12-25\"),\n *    currentTime : Cesium.JulianDate.fromIso8601(\"2013-12-25\"),\n *    stopTime : Cesium.JulianDate.fromIso8601(\"2013-12-26\"),\n *    clockRange : Cesium.ClockRange.LOOP_STOP,\n *    clockStep : Cesium.ClockStep.SYSTEM_CLOCK_MULTIPLIER\n * });\n *\n * @see ClockStep\n * @see ClockRange\n * @see JulianDate\n */\n\nfunction Clock(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var currentTime = options.currentTime;\n  var startTime = options.startTime;\n  var stopTime = options.stopTime;\n\n  if (!defined(currentTime)) {\n    // if not specified, current time is the start time,\n    // or if that is not specified, 1 day before the stop time,\n    // or if that is not specified, then now.\n    if (defined(startTime)) {\n      currentTime = JulianDate.clone(startTime);\n    } else if (defined(stopTime)) {\n      currentTime = JulianDate.addDays(stopTime, -1.0, new JulianDate());\n    } else {\n      currentTime = JulianDate.now();\n    }\n  } else {\n    currentTime = JulianDate.clone(currentTime);\n  }\n\n  if (!defined(startTime)) {\n    // if not specified, start time is the current time\n    // (as determined above)\n    startTime = JulianDate.clone(currentTime);\n  } else {\n    startTime = JulianDate.clone(startTime);\n  }\n\n  if (!defined(stopTime)) {\n    // if not specified, stop time is 1 day after the start time\n    // (as determined above)\n    stopTime = JulianDate.addDays(startTime, 1.0, new JulianDate());\n  } else {\n    stopTime = JulianDate.clone(stopTime);\n  } //>>includeStart('debug', pragmas.debug);\n\n\n  if (JulianDate.greaterThan(startTime, stopTime)) {\n    throw new DeveloperError(\"startTime must come before stopTime.\");\n  } //>>includeEnd('debug');\n\n  /**\n   * The start time of the clock.\n   * @type {JulianDate}\n   */\n\n\n  this.startTime = startTime;\n  /**\n   * The stop time of the clock.\n   * @type {JulianDate}\n   */\n\n  this.stopTime = stopTime;\n  /**\n   * Determines how the clock should behave when\n   * {@link Clock#startTime} or {@link Clock#stopTime}\n   * is reached.\n   * @type {ClockRange}\n   * @default {@link ClockRange.UNBOUNDED}\n   */\n\n  this.clockRange = defaultValue(options.clockRange, ClockRange.UNBOUNDED);\n  /**\n   * Indicates whether {@link Clock#tick} can advance time.  This could be false if data is being buffered,\n   * for example.  The clock will only advance time when both\n   * {@link Clock#canAnimate} and {@link Clock#shouldAnimate} are true.\n   * @type {Boolean}\n   * @default true\n   */\n\n  this.canAnimate = defaultValue(options.canAnimate, true);\n  /**\n   * An {@link Event} that is fired whenever {@link Clock#tick} is called.\n   * @type {Event}\n   */\n\n  this.onTick = new Event();\n  /**\n   * An {@link Event} that is fired whenever {@link Clock#stopTime} is reached.\n   * @type {Event}\n   */\n\n  this.onStop = new Event();\n  this._currentTime = undefined;\n  this._multiplier = undefined;\n  this._clockStep = undefined;\n  this._shouldAnimate = undefined;\n  this._lastSystemTime = getTimestamp(); // set values using the property setters to\n  // make values consistent.\n\n  this.currentTime = currentTime;\n  this.multiplier = defaultValue(options.multiplier, 1.0);\n  this.shouldAnimate = defaultValue(options.shouldAnimate, false);\n  this.clockStep = defaultValue(options.clockStep, ClockStep.SYSTEM_CLOCK_MULTIPLIER);\n}\n\nObject.defineProperties(Clock.prototype, {\n  /**\n   * The current time.\n   * Changing this property will change\n   * {@link Clock#clockStep} from {@link ClockStep.SYSTEM_CLOCK} to\n   * {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}.\n   * @memberof Clock.prototype\n   * @type {JulianDate}\n   */\n  currentTime: {\n    get: function get() {\n      return this._currentTime;\n    },\n    set: function set(value) {\n      if (JulianDate.equals(this._currentTime, value)) {\n        return;\n      }\n\n      if (this._clockStep === ClockStep.SYSTEM_CLOCK) {\n        this._clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n      }\n\n      this._currentTime = value;\n    }\n  },\n\n  /**\n   * Gets or sets how much time advances when {@link Clock#tick} is called. Negative values allow for advancing backwards.\n   * If {@link Clock#clockStep} is set to {@link ClockStep.TICK_DEPENDENT}, this is the number of seconds to advance.\n   * If {@link Clock#clockStep} is set to {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}, this value is multiplied by the\n   * elapsed system time since the last call to {@link Clock#tick}.\n   * Changing this property will change\n   * {@link Clock#clockStep} from {@link ClockStep.SYSTEM_CLOCK} to\n   * {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}.\n   * @memberof Clock.prototype\n   * @type {Number}\n   * @default 1.0\n   */\n  multiplier: {\n    get: function get() {\n      return this._multiplier;\n    },\n    set: function set(value) {\n      if (this._multiplier === value) {\n        return;\n      }\n\n      if (this._clockStep === ClockStep.SYSTEM_CLOCK) {\n        this._clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n      }\n\n      this._multiplier = value;\n    }\n  },\n\n  /**\n   * Determines if calls to {@link Clock#tick} are frame dependent or system clock dependent.\n   * Changing this property to {@link ClockStep.SYSTEM_CLOCK} will set\n   * {@link Clock#multiplier} to 1.0, {@link Clock#shouldAnimate} to true, and\n   * {@link Clock#currentTime} to the current system clock time.\n   * @memberof Clock.prototype\n   * @type ClockStep\n   * @default {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}\n   */\n  clockStep: {\n    get: function get() {\n      return this._clockStep;\n    },\n    set: function set(value) {\n      if (value === ClockStep.SYSTEM_CLOCK) {\n        this._multiplier = 1.0;\n        this._shouldAnimate = true;\n        this._currentTime = JulianDate.now();\n      }\n\n      this._clockStep = value;\n    }\n  },\n\n  /**\n   * Indicates whether {@link Clock#tick} should attempt to advance time.\n   * The clock will only advance time when both\n   * {@link Clock#canAnimate} and {@link Clock#shouldAnimate} are true.\n   * Changing this property will change\n   * {@link Clock#clockStep} from {@link ClockStep.SYSTEM_CLOCK} to\n   * {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}.\n   * @memberof Clock.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  shouldAnimate: {\n    get: function get() {\n      return this._shouldAnimate;\n    },\n    set: function set(value) {\n      if (this._shouldAnimate === value) {\n        return;\n      }\n\n      if (this._clockStep === ClockStep.SYSTEM_CLOCK) {\n        this._clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n      }\n\n      this._shouldAnimate = value;\n    }\n  }\n});\n/**\n * Advances the clock from the current time based on the current configuration options.\n * tick should be called every frame, regardless of whether animation is taking place\n * or not.  To control animation, use the {@link Clock#shouldAnimate} property.\n *\n * @returns {JulianDate} The new value of the {@link Clock#currentTime} property.\n */\n\nClock.prototype.tick = function () {\n  var currentSystemTime = getTimestamp();\n  var currentTime = JulianDate.clone(this._currentTime);\n\n  if (this.canAnimate && this._shouldAnimate) {\n    var clockStep = this._clockStep;\n\n    if (clockStep === ClockStep.SYSTEM_CLOCK) {\n      currentTime = JulianDate.now(currentTime);\n    } else {\n      var multiplier = this._multiplier;\n\n      if (clockStep === ClockStep.TICK_DEPENDENT) {\n        currentTime = JulianDate.addSeconds(currentTime, multiplier, currentTime);\n      } else {\n        var milliseconds = currentSystemTime - this._lastSystemTime;\n        currentTime = JulianDate.addSeconds(currentTime, multiplier * (milliseconds / 1000.0), currentTime);\n      }\n\n      var clockRange = this.clockRange;\n      var startTime = this.startTime;\n      var stopTime = this.stopTime;\n\n      if (clockRange === ClockRange.CLAMPED) {\n        if (JulianDate.lessThan(currentTime, startTime)) {\n          currentTime = JulianDate.clone(startTime, currentTime);\n        } else if (JulianDate.greaterThan(currentTime, stopTime)) {\n          currentTime = JulianDate.clone(stopTime, currentTime);\n          this.onStop.raiseEvent(this);\n        }\n      } else if (clockRange === ClockRange.LOOP_STOP) {\n        if (JulianDate.lessThan(currentTime, startTime)) {\n          currentTime = JulianDate.clone(startTime, currentTime);\n        }\n\n        while (JulianDate.greaterThan(currentTime, stopTime)) {\n          currentTime = JulianDate.addSeconds(startTime, JulianDate.secondsDifference(currentTime, stopTime), currentTime);\n          this.onStop.raiseEvent(this);\n        }\n      }\n    }\n  }\n\n  this._currentTime = currentTime;\n  this._lastSystemTime = currentSystemTime;\n  this.onTick.raiseEvent(this);\n  return currentTime;\n};\n\nexport default Clock;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/Clock.js"],"names":["ClockRange","ClockStep","defaultValue","defined","DeveloperError","Event","getTimestamp","JulianDate","Clock","options","EMPTY_OBJECT","currentTime","startTime","stopTime","clone","addDays","now","greaterThan","clockRange","UNBOUNDED","canAnimate","onTick","onStop","_currentTime","undefined","_multiplier","_clockStep","_shouldAnimate","_lastSystemTime","multiplier","shouldAnimate","clockStep","SYSTEM_CLOCK_MULTIPLIER","Object","defineProperties","prototype","get","set","value","equals","SYSTEM_CLOCK","tick","currentSystemTime","TICK_DEPENDENT","addSeconds","milliseconds","CLAMPED","lessThan","raiseEvent","LOOP_STOP","secondsDifference"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,iBAAvB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,SAASC,KAAT,CAAeC,OAAf,EAAwB;AACtBA,EAAAA,OAAO,GAAGP,YAAY,CAACO,OAAD,EAAUP,YAAY,CAACQ,YAAvB,CAAtB;AAEA,MAAIC,WAAW,GAAGF,OAAO,CAACE,WAA1B;AACA,MAAIC,SAAS,GAAGH,OAAO,CAACG,SAAxB;AACA,MAAIC,QAAQ,GAAGJ,OAAO,CAACI,QAAvB;;AAEA,MAAI,CAACV,OAAO,CAACQ,WAAD,CAAZ,EAA2B;AACzB;AACA;AACA;AACA,QAAIR,OAAO,CAACS,SAAD,CAAX,EAAwB;AACtBD,MAAAA,WAAW,GAAGJ,UAAU,CAACO,KAAX,CAAiBF,SAAjB,CAAd;AACD,KAFD,MAEO,IAAIT,OAAO,CAACU,QAAD,CAAX,EAAuB;AAC5BF,MAAAA,WAAW,GAAGJ,UAAU,CAACQ,OAAX,CAAmBF,QAAnB,EAA6B,CAAC,GAA9B,EAAmC,IAAIN,UAAJ,EAAnC,CAAd;AACD,KAFM,MAEA;AACLI,MAAAA,WAAW,GAAGJ,UAAU,CAACS,GAAX,EAAd;AACD;AACF,GAXD,MAWO;AACLL,IAAAA,WAAW,GAAGJ,UAAU,CAACO,KAAX,CAAiBH,WAAjB,CAAd;AACD;;AAED,MAAI,CAACR,OAAO,CAACS,SAAD,CAAZ,EAAyB;AACvB;AACA;AACAA,IAAAA,SAAS,GAAGL,UAAU,CAACO,KAAX,CAAiBH,WAAjB,CAAZ;AACD,GAJD,MAIO;AACLC,IAAAA,SAAS,GAAGL,UAAU,CAACO,KAAX,CAAiBF,SAAjB,CAAZ;AACD;;AAED,MAAI,CAACT,OAAO,CAACU,QAAD,CAAZ,EAAwB;AACtB;AACA;AACAA,IAAAA,QAAQ,GAAGN,UAAU,CAACQ,OAAX,CAAmBH,SAAnB,EAA8B,GAA9B,EAAmC,IAAIL,UAAJ,EAAnC,CAAX;AACD,GAJD,MAIO;AACLM,IAAAA,QAAQ,GAAGN,UAAU,CAACO,KAAX,CAAiBD,QAAjB,CAAX;AACD,GApCqB,CAsCtB;;;AACA,MAAIN,UAAU,CAACU,WAAX,CAAuBL,SAAvB,EAAkCC,QAAlC,CAAJ,EAAiD;AAC/C,UAAM,IAAIT,cAAJ,CAAmB,sCAAnB,CAAN;AACD,GAzCqB,CA0CtB;;AAEA;;;;;;AAIA,OAAKQ,SAAL,GAAiBA,SAAjB;AAEA;;;;;AAIA,OAAKC,QAAL,GAAgBA,QAAhB;AAEA;;;;;;;;AAOA,OAAKK,UAAL,GAAkBhB,YAAY,CAACO,OAAO,CAACS,UAAT,EAAqBlB,UAAU,CAACmB,SAAhC,CAA9B;AAEA;;;;;;;;AAOA,OAAKC,UAAL,GAAkBlB,YAAY,CAACO,OAAO,CAACW,UAAT,EAAqB,IAArB,CAA9B;AAEA;;;;;AAIA,OAAKC,MAAL,GAAc,IAAIhB,KAAJ,EAAd;AACA;;;;;AAIA,OAAKiB,MAAL,GAAc,IAAIjB,KAAJ,EAAd;AAEA,OAAKkB,YAAL,GAAoBC,SAApB;AACA,OAAKC,WAAL,GAAmBD,SAAnB;AACA,OAAKE,UAAL,GAAkBF,SAAlB;AACA,OAAKG,cAAL,GAAsBH,SAAtB;AACA,OAAKI,eAAL,GAAuBtB,YAAY,EAAnC,CAzFsB,CA2FtB;AACA;;AAEA,OAAKK,WAAL,GAAmBA,WAAnB;AACA,OAAKkB,UAAL,GAAkB3B,YAAY,CAACO,OAAO,CAACoB,UAAT,EAAqB,GAArB,CAA9B;AACA,OAAKC,aAAL,GAAqB5B,YAAY,CAACO,OAAO,CAACqB,aAAT,EAAwB,KAAxB,CAAjC;AACA,OAAKC,SAAL,GAAiB7B,YAAY,CAC3BO,OAAO,CAACsB,SADmB,EAE3B9B,SAAS,CAAC+B,uBAFiB,CAA7B;AAID;;AAEDC,MAAM,CAACC,gBAAP,CAAwB1B,KAAK,CAAC2B,SAA9B,EAAyC;AACvC;;;;;;;;AAQAxB,EAAAA,WAAW,EAAE;AACXyB,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKb,YAAZ;AACD,KAHU;AAIXc,IAAAA,GAAG,EAAE,aAAUC,KAAV,EAAiB;AACpB,UAAI/B,UAAU,CAACgC,MAAX,CAAkB,KAAKhB,YAAvB,EAAqCe,KAArC,CAAJ,EAAiD;AAC/C;AACD;;AAED,UAAI,KAAKZ,UAAL,KAAoBzB,SAAS,CAACuC,YAAlC,EAAgD;AAC9C,aAAKd,UAAL,GAAkBzB,SAAS,CAAC+B,uBAA5B;AACD;;AAED,WAAKT,YAAL,GAAoBe,KAApB;AACD;AAdU,GAT0B;;AA0BvC;;;;;;;;;;;;AAYAT,EAAAA,UAAU,EAAE;AACVO,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKX,WAAZ;AACD,KAHS;AAIVY,IAAAA,GAAG,EAAE,aAAUC,KAAV,EAAiB;AACpB,UAAI,KAAKb,WAAL,KAAqBa,KAAzB,EAAgC;AAC9B;AACD;;AAED,UAAI,KAAKZ,UAAL,KAAoBzB,SAAS,CAACuC,YAAlC,EAAgD;AAC9C,aAAKd,UAAL,GAAkBzB,SAAS,CAAC+B,uBAA5B;AACD;;AAED,WAAKP,WAAL,GAAmBa,KAAnB;AACD;AAdS,GAtC2B;;AAuDvC;;;;;;;;;AASAP,EAAAA,SAAS,EAAE;AACTK,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKV,UAAZ;AACD,KAHQ;AAITW,IAAAA,GAAG,EAAE,aAAUC,KAAV,EAAiB;AACpB,UAAIA,KAAK,KAAKrC,SAAS,CAACuC,YAAxB,EAAsC;AACpC,aAAKf,WAAL,GAAmB,GAAnB;AACA,aAAKE,cAAL,GAAsB,IAAtB;AACA,aAAKJ,YAAL,GAAoBhB,UAAU,CAACS,GAAX,EAApB;AACD;;AAED,WAAKU,UAAL,GAAkBY,KAAlB;AACD;AAZQ,GAhE4B;;AA+EvC;;;;;;;;;;;AAWAR,EAAAA,aAAa,EAAE;AACbM,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKT,cAAZ;AACD,KAHY;AAIbU,IAAAA,GAAG,EAAE,aAAUC,KAAV,EAAiB;AACpB,UAAI,KAAKX,cAAL,KAAwBW,KAA5B,EAAmC;AACjC;AACD;;AAED,UAAI,KAAKZ,UAAL,KAAoBzB,SAAS,CAACuC,YAAlC,EAAgD;AAC9C,aAAKd,UAAL,GAAkBzB,SAAS,CAAC+B,uBAA5B;AACD;;AAED,WAAKL,cAAL,GAAsBW,KAAtB;AACD;AAdY;AA1FwB,CAAzC;AA4GA;;;;;;;;AAOA9B,KAAK,CAAC2B,SAAN,CAAgBM,IAAhB,GAAuB,YAAY;AACjC,MAAIC,iBAAiB,GAAGpC,YAAY,EAApC;AACA,MAAIK,WAAW,GAAGJ,UAAU,CAACO,KAAX,CAAiB,KAAKS,YAAtB,CAAlB;;AAEA,MAAI,KAAKH,UAAL,IAAmB,KAAKO,cAA5B,EAA4C;AAC1C,QAAII,SAAS,GAAG,KAAKL,UAArB;;AACA,QAAIK,SAAS,KAAK9B,SAAS,CAACuC,YAA5B,EAA0C;AACxC7B,MAAAA,WAAW,GAAGJ,UAAU,CAACS,GAAX,CAAeL,WAAf,CAAd;AACD,KAFD,MAEO;AACL,UAAIkB,UAAU,GAAG,KAAKJ,WAAtB;;AAEA,UAAIM,SAAS,KAAK9B,SAAS,CAAC0C,cAA5B,EAA4C;AAC1ChC,QAAAA,WAAW,GAAGJ,UAAU,CAACqC,UAAX,CACZjC,WADY,EAEZkB,UAFY,EAGZlB,WAHY,CAAd;AAKD,OAND,MAMO;AACL,YAAIkC,YAAY,GAAGH,iBAAiB,GAAG,KAAKd,eAA5C;AACAjB,QAAAA,WAAW,GAAGJ,UAAU,CAACqC,UAAX,CACZjC,WADY,EAEZkB,UAAU,IAAIgB,YAAY,GAAG,MAAnB,CAFE,EAGZlC,WAHY,CAAd;AAKD;;AAED,UAAIO,UAAU,GAAG,KAAKA,UAAtB;AACA,UAAIN,SAAS,GAAG,KAAKA,SAArB;AACA,UAAIC,QAAQ,GAAG,KAAKA,QAApB;;AAEA,UAAIK,UAAU,KAAKlB,UAAU,CAAC8C,OAA9B,EAAuC;AACrC,YAAIvC,UAAU,CAACwC,QAAX,CAAoBpC,WAApB,EAAiCC,SAAjC,CAAJ,EAAiD;AAC/CD,UAAAA,WAAW,GAAGJ,UAAU,CAACO,KAAX,CAAiBF,SAAjB,EAA4BD,WAA5B,CAAd;AACD,SAFD,MAEO,IAAIJ,UAAU,CAACU,WAAX,CAAuBN,WAAvB,EAAoCE,QAApC,CAAJ,EAAmD;AACxDF,UAAAA,WAAW,GAAGJ,UAAU,CAACO,KAAX,CAAiBD,QAAjB,EAA2BF,WAA3B,CAAd;AACA,eAAKW,MAAL,CAAY0B,UAAZ,CAAuB,IAAvB;AACD;AACF,OAPD,MAOO,IAAI9B,UAAU,KAAKlB,UAAU,CAACiD,SAA9B,EAAyC;AAC9C,YAAI1C,UAAU,CAACwC,QAAX,CAAoBpC,WAApB,EAAiCC,SAAjC,CAAJ,EAAiD;AAC/CD,UAAAA,WAAW,GAAGJ,UAAU,CAACO,KAAX,CAAiBF,SAAjB,EAA4BD,WAA5B,CAAd;AACD;;AACD,eAAOJ,UAAU,CAACU,WAAX,CAAuBN,WAAvB,EAAoCE,QAApC,CAAP,EAAsD;AACpDF,UAAAA,WAAW,GAAGJ,UAAU,CAACqC,UAAX,CACZhC,SADY,EAEZL,UAAU,CAAC2C,iBAAX,CAA6BvC,WAA7B,EAA0CE,QAA1C,CAFY,EAGZF,WAHY,CAAd;AAKA,eAAKW,MAAL,CAAY0B,UAAZ,CAAuB,IAAvB;AACD;AACF;AACF;AACF;;AAED,OAAKzB,YAAL,GAAoBZ,WAApB;AACA,OAAKiB,eAAL,GAAuBc,iBAAvB;AACA,OAAKrB,MAAL,CAAY2B,UAAZ,CAAuB,IAAvB;AACA,SAAOrC,WAAP;AACD,CAzDD;;AA0DA,eAAeH,KAAf","sourcesContent":["import ClockRange from \"./ClockRange.js\";\nimport ClockStep from \"./ClockStep.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Event from \"./Event.js\";\nimport getTimestamp from \"./getTimestamp.js\";\nimport JulianDate from \"./JulianDate.js\";\n\n/**\n * A simple clock for keeping track of simulated time.\n *\n * @alias Clock\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {JulianDate} [options.startTime] The start time of the clock.\n * @param {JulianDate} [options.stopTime] The stop time of the clock.\n * @param {JulianDate} [options.currentTime] The current time.\n * @param {Number} [options.multiplier=1.0] Determines how much time advances when {@link Clock#tick} is called, negative values allow for advancing backwards.\n * @param {ClockStep} [options.clockStep=ClockStep.SYSTEM_CLOCK_MULTIPLIER] Determines if calls to {@link Clock#tick} are frame dependent or system clock dependent.\n * @param {ClockRange} [options.clockRange=ClockRange.UNBOUNDED] Determines how the clock should behave when {@link Clock#startTime} or {@link Clock#stopTime} is reached.\n * @param {Boolean} [options.canAnimate=true] Indicates whether {@link Clock#tick} can advance time.  This could be false if data is being buffered, for example.  The clock will only tick when both {@link Clock#canAnimate} and {@link Clock#shouldAnimate} are true.\n * @param {Boolean} [options.shouldAnimate=false] Indicates whether {@link Clock#tick} should attempt to advance time.  The clock will only tick when both {@link Clock#canAnimate} and {@link Clock#shouldAnimate} are true.\n *\n * @exception {DeveloperError} startTime must come before stopTime.\n *\n *\n * @example\n * // Create a clock that loops on Christmas day 2013 and runs in real-time.\n * var clock = new Cesium.Clock({\n *    startTime : Cesium.JulianDate.fromIso8601(\"2013-12-25\"),\n *    currentTime : Cesium.JulianDate.fromIso8601(\"2013-12-25\"),\n *    stopTime : Cesium.JulianDate.fromIso8601(\"2013-12-26\"),\n *    clockRange : Cesium.ClockRange.LOOP_STOP,\n *    clockStep : Cesium.ClockStep.SYSTEM_CLOCK_MULTIPLIER\n * });\n *\n * @see ClockStep\n * @see ClockRange\n * @see JulianDate\n */\nfunction Clock(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var currentTime = options.currentTime;\n  var startTime = options.startTime;\n  var stopTime = options.stopTime;\n\n  if (!defined(currentTime)) {\n    // if not specified, current time is the start time,\n    // or if that is not specified, 1 day before the stop time,\n    // or if that is not specified, then now.\n    if (defined(startTime)) {\n      currentTime = JulianDate.clone(startTime);\n    } else if (defined(stopTime)) {\n      currentTime = JulianDate.addDays(stopTime, -1.0, new JulianDate());\n    } else {\n      currentTime = JulianDate.now();\n    }\n  } else {\n    currentTime = JulianDate.clone(currentTime);\n  }\n\n  if (!defined(startTime)) {\n    // if not specified, start time is the current time\n    // (as determined above)\n    startTime = JulianDate.clone(currentTime);\n  } else {\n    startTime = JulianDate.clone(startTime);\n  }\n\n  if (!defined(stopTime)) {\n    // if not specified, stop time is 1 day after the start time\n    // (as determined above)\n    stopTime = JulianDate.addDays(startTime, 1.0, new JulianDate());\n  } else {\n    stopTime = JulianDate.clone(stopTime);\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (JulianDate.greaterThan(startTime, stopTime)) {\n    throw new DeveloperError(\"startTime must come before stopTime.\");\n  }\n  //>>includeEnd('debug');\n\n  /**\n   * The start time of the clock.\n   * @type {JulianDate}\n   */\n  this.startTime = startTime;\n\n  /**\n   * The stop time of the clock.\n   * @type {JulianDate}\n   */\n  this.stopTime = stopTime;\n\n  /**\n   * Determines how the clock should behave when\n   * {@link Clock#startTime} or {@link Clock#stopTime}\n   * is reached.\n   * @type {ClockRange}\n   * @default {@link ClockRange.UNBOUNDED}\n   */\n  this.clockRange = defaultValue(options.clockRange, ClockRange.UNBOUNDED);\n\n  /**\n   * Indicates whether {@link Clock#tick} can advance time.  This could be false if data is being buffered,\n   * for example.  The clock will only advance time when both\n   * {@link Clock#canAnimate} and {@link Clock#shouldAnimate} are true.\n   * @type {Boolean}\n   * @default true\n   */\n  this.canAnimate = defaultValue(options.canAnimate, true);\n\n  /**\n   * An {@link Event} that is fired whenever {@link Clock#tick} is called.\n   * @type {Event}\n   */\n  this.onTick = new Event();\n  /**\n   * An {@link Event} that is fired whenever {@link Clock#stopTime} is reached.\n   * @type {Event}\n   */\n  this.onStop = new Event();\n\n  this._currentTime = undefined;\n  this._multiplier = undefined;\n  this._clockStep = undefined;\n  this._shouldAnimate = undefined;\n  this._lastSystemTime = getTimestamp();\n\n  // set values using the property setters to\n  // make values consistent.\n\n  this.currentTime = currentTime;\n  this.multiplier = defaultValue(options.multiplier, 1.0);\n  this.shouldAnimate = defaultValue(options.shouldAnimate, false);\n  this.clockStep = defaultValue(\n    options.clockStep,\n    ClockStep.SYSTEM_CLOCK_MULTIPLIER\n  );\n}\n\nObject.defineProperties(Clock.prototype, {\n  /**\n   * The current time.\n   * Changing this property will change\n   * {@link Clock#clockStep} from {@link ClockStep.SYSTEM_CLOCK} to\n   * {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}.\n   * @memberof Clock.prototype\n   * @type {JulianDate}\n   */\n  currentTime: {\n    get: function () {\n      return this._currentTime;\n    },\n    set: function (value) {\n      if (JulianDate.equals(this._currentTime, value)) {\n        return;\n      }\n\n      if (this._clockStep === ClockStep.SYSTEM_CLOCK) {\n        this._clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n      }\n\n      this._currentTime = value;\n    },\n  },\n\n  /**\n   * Gets or sets how much time advances when {@link Clock#tick} is called. Negative values allow for advancing backwards.\n   * If {@link Clock#clockStep} is set to {@link ClockStep.TICK_DEPENDENT}, this is the number of seconds to advance.\n   * If {@link Clock#clockStep} is set to {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}, this value is multiplied by the\n   * elapsed system time since the last call to {@link Clock#tick}.\n   * Changing this property will change\n   * {@link Clock#clockStep} from {@link ClockStep.SYSTEM_CLOCK} to\n   * {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}.\n   * @memberof Clock.prototype\n   * @type {Number}\n   * @default 1.0\n   */\n  multiplier: {\n    get: function () {\n      return this._multiplier;\n    },\n    set: function (value) {\n      if (this._multiplier === value) {\n        return;\n      }\n\n      if (this._clockStep === ClockStep.SYSTEM_CLOCK) {\n        this._clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n      }\n\n      this._multiplier = value;\n    },\n  },\n\n  /**\n   * Determines if calls to {@link Clock#tick} are frame dependent or system clock dependent.\n   * Changing this property to {@link ClockStep.SYSTEM_CLOCK} will set\n   * {@link Clock#multiplier} to 1.0, {@link Clock#shouldAnimate} to true, and\n   * {@link Clock#currentTime} to the current system clock time.\n   * @memberof Clock.prototype\n   * @type ClockStep\n   * @default {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}\n   */\n  clockStep: {\n    get: function () {\n      return this._clockStep;\n    },\n    set: function (value) {\n      if (value === ClockStep.SYSTEM_CLOCK) {\n        this._multiplier = 1.0;\n        this._shouldAnimate = true;\n        this._currentTime = JulianDate.now();\n      }\n\n      this._clockStep = value;\n    },\n  },\n\n  /**\n   * Indicates whether {@link Clock#tick} should attempt to advance time.\n   * The clock will only advance time when both\n   * {@link Clock#canAnimate} and {@link Clock#shouldAnimate} are true.\n   * Changing this property will change\n   * {@link Clock#clockStep} from {@link ClockStep.SYSTEM_CLOCK} to\n   * {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}.\n   * @memberof Clock.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  shouldAnimate: {\n    get: function () {\n      return this._shouldAnimate;\n    },\n    set: function (value) {\n      if (this._shouldAnimate === value) {\n        return;\n      }\n\n      if (this._clockStep === ClockStep.SYSTEM_CLOCK) {\n        this._clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n      }\n\n      this._shouldAnimate = value;\n    },\n  },\n});\n\n/**\n * Advances the clock from the current time based on the current configuration options.\n * tick should be called every frame, regardless of whether animation is taking place\n * or not.  To control animation, use the {@link Clock#shouldAnimate} property.\n *\n * @returns {JulianDate} The new value of the {@link Clock#currentTime} property.\n */\nClock.prototype.tick = function () {\n  var currentSystemTime = getTimestamp();\n  var currentTime = JulianDate.clone(this._currentTime);\n\n  if (this.canAnimate && this._shouldAnimate) {\n    var clockStep = this._clockStep;\n    if (clockStep === ClockStep.SYSTEM_CLOCK) {\n      currentTime = JulianDate.now(currentTime);\n    } else {\n      var multiplier = this._multiplier;\n\n      if (clockStep === ClockStep.TICK_DEPENDENT) {\n        currentTime = JulianDate.addSeconds(\n          currentTime,\n          multiplier,\n          currentTime\n        );\n      } else {\n        var milliseconds = currentSystemTime - this._lastSystemTime;\n        currentTime = JulianDate.addSeconds(\n          currentTime,\n          multiplier * (milliseconds / 1000.0),\n          currentTime\n        );\n      }\n\n      var clockRange = this.clockRange;\n      var startTime = this.startTime;\n      var stopTime = this.stopTime;\n\n      if (clockRange === ClockRange.CLAMPED) {\n        if (JulianDate.lessThan(currentTime, startTime)) {\n          currentTime = JulianDate.clone(startTime, currentTime);\n        } else if (JulianDate.greaterThan(currentTime, stopTime)) {\n          currentTime = JulianDate.clone(stopTime, currentTime);\n          this.onStop.raiseEvent(this);\n        }\n      } else if (clockRange === ClockRange.LOOP_STOP) {\n        if (JulianDate.lessThan(currentTime, startTime)) {\n          currentTime = JulianDate.clone(startTime, currentTime);\n        }\n        while (JulianDate.greaterThan(currentTime, stopTime)) {\n          currentTime = JulianDate.addSeconds(\n            startTime,\n            JulianDate.secondsDifference(currentTime, stopTime),\n            currentTime\n          );\n          this.onStop.raiseEvent(this);\n        }\n      }\n    }\n  }\n\n  this._currentTime = currentTime;\n  this._lastSystemTime = currentSystemTime;\n  this.onTick.raiseEvent(this);\n  return currentTime;\n};\nexport default Clock;\n"]},"metadata":{},"sourceType":"module"}