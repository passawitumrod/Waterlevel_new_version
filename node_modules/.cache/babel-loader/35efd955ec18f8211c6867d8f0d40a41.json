{"ast":null,"code":"import RBush from \"../ThirdParty/rbush.js\";\nimport Check from \"./Check.js\";\n/**\n * Wrapper around rbush for use with Rectangle types.\n * @private\n */\n\nfunction RectangleCollisionChecker() {\n  this._tree = new RBush();\n}\n\nfunction RectangleWithId() {\n  this.minX = 0.0;\n  this.minY = 0.0;\n  this.maxX = 0.0;\n  this.maxY = 0.0;\n  this.id = \"\";\n}\n\nRectangleWithId.fromRectangleAndId = function (id, rectangle, result) {\n  result.minX = rectangle.west;\n  result.minY = rectangle.south;\n  result.maxX = rectangle.east;\n  result.maxY = rectangle.north;\n  result.id = id;\n  return result;\n};\n/**\n * Insert a rectangle into the collision checker.\n *\n * @param {String} id Unique string ID for the rectangle being inserted.\n * @param {Rectangle} rectangle A Rectangle\n * @private\n */\n\n\nRectangleCollisionChecker.prototype.insert = function (id, rectangle) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"id\", id);\n  Check.typeOf.object(\"rectangle\", rectangle); //>>includeEnd('debug');\n\n  var withId = RectangleWithId.fromRectangleAndId(id, rectangle, new RectangleWithId());\n\n  this._tree.insert(withId);\n};\n\nfunction idCompare(a, b) {\n  return a.id === b.id;\n}\n\nvar removalScratch = new RectangleWithId();\n/**\n * Remove a rectangle from the collision checker.\n *\n * @param {String} id Unique string ID for the rectangle being removed.\n * @param {Rectangle} rectangle A Rectangle\n * @private\n */\n\nRectangleCollisionChecker.prototype.remove = function (id, rectangle) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"id\", id);\n  Check.typeOf.object(\"rectangle\", rectangle); //>>includeEnd('debug');\n\n  var withId = RectangleWithId.fromRectangleAndId(id, rectangle, removalScratch);\n\n  this._tree.remove(withId, idCompare);\n};\n\nvar collisionScratch = new RectangleWithId();\n/**\n * Checks if a given rectangle collides with any of the rectangles in the collection.\n *\n * @param {Rectangle} rectangle A Rectangle that should be checked against the rectangles in the collision checker.\n * @returns {Boolean} Whether the rectangle collides with any of the rectangles in the collision checker.\n */\n\nRectangleCollisionChecker.prototype.collides = function (rectangle) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"rectangle\", rectangle); //>>includeEnd('debug');\n\n  var withId = RectangleWithId.fromRectangleAndId(\"\", rectangle, collisionScratch);\n  return this._tree.collides(withId);\n};\n\nexport default RectangleCollisionChecker;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/RectangleCollisionChecker.js"],"names":["RBush","Check","RectangleCollisionChecker","_tree","RectangleWithId","minX","minY","maxX","maxY","id","fromRectangleAndId","rectangle","result","west","south","east","north","prototype","insert","typeOf","string","object","withId","idCompare","a","b","removalScratch","remove","collisionScratch","collides"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,wBAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AAEA;;;;;AAIA,SAASC,yBAAT,GAAqC;AACnC,OAAKC,KAAL,GAAa,IAAIH,KAAJ,EAAb;AACD;;AAED,SAASI,eAAT,GAA2B;AACzB,OAAKC,IAAL,GAAY,GAAZ;AACA,OAAKC,IAAL,GAAY,GAAZ;AACA,OAAKC,IAAL,GAAY,GAAZ;AACA,OAAKC,IAAL,GAAY,GAAZ;AACA,OAAKC,EAAL,GAAU,EAAV;AACD;;AAEDL,eAAe,CAACM,kBAAhB,GAAqC,UAAUD,EAAV,EAAcE,SAAd,EAAyBC,MAAzB,EAAiC;AACpEA,EAAAA,MAAM,CAACP,IAAP,GAAcM,SAAS,CAACE,IAAxB;AACAD,EAAAA,MAAM,CAACN,IAAP,GAAcK,SAAS,CAACG,KAAxB;AACAF,EAAAA,MAAM,CAACL,IAAP,GAAcI,SAAS,CAACI,IAAxB;AACAH,EAAAA,MAAM,CAACJ,IAAP,GAAcG,SAAS,CAACK,KAAxB;AACAJ,EAAAA,MAAM,CAACH,EAAP,GAAYA,EAAZ;AACA,SAAOG,MAAP;AACD,CAPD;AASA;;;;;;;;;AAOAV,yBAAyB,CAACe,SAA1B,CAAoCC,MAApC,GAA6C,UAAUT,EAAV,EAAcE,SAAd,EAAyB;AACpE;AACAV,EAAAA,KAAK,CAACkB,MAAN,CAAaC,MAAb,CAAoB,IAApB,EAA0BX,EAA1B;AACAR,EAAAA,KAAK,CAACkB,MAAN,CAAaE,MAAb,CAAoB,WAApB,EAAiCV,SAAjC,EAHoE,CAIpE;;AAEA,MAAIW,MAAM,GAAGlB,eAAe,CAACM,kBAAhB,CACXD,EADW,EAEXE,SAFW,EAGX,IAAIP,eAAJ,EAHW,CAAb;;AAKA,OAAKD,KAAL,CAAWe,MAAX,CAAkBI,MAAlB;AACD,CAZD;;AAcA,SAASC,SAAT,CAAmBC,CAAnB,EAAsBC,CAAtB,EAAyB;AACvB,SAAOD,CAAC,CAACf,EAAF,KAASgB,CAAC,CAAChB,EAAlB;AACD;;AAED,IAAIiB,cAAc,GAAG,IAAItB,eAAJ,EAArB;AACA;;;;;;;;AAOAF,yBAAyB,CAACe,SAA1B,CAAoCU,MAApC,GAA6C,UAAUlB,EAAV,EAAcE,SAAd,EAAyB;AACpE;AACAV,EAAAA,KAAK,CAACkB,MAAN,CAAaC,MAAb,CAAoB,IAApB,EAA0BX,EAA1B;AACAR,EAAAA,KAAK,CAACkB,MAAN,CAAaE,MAAb,CAAoB,WAApB,EAAiCV,SAAjC,EAHoE,CAIpE;;AAEA,MAAIW,MAAM,GAAGlB,eAAe,CAACM,kBAAhB,CACXD,EADW,EAEXE,SAFW,EAGXe,cAHW,CAAb;;AAKA,OAAKvB,KAAL,CAAWwB,MAAX,CAAkBL,MAAlB,EAA0BC,SAA1B;AACD,CAZD;;AAcA,IAAIK,gBAAgB,GAAG,IAAIxB,eAAJ,EAAvB;AACA;;;;;;;AAMAF,yBAAyB,CAACe,SAA1B,CAAoCY,QAApC,GAA+C,UAAUlB,SAAV,EAAqB;AAClE;AACAV,EAAAA,KAAK,CAACkB,MAAN,CAAaE,MAAb,CAAoB,WAApB,EAAiCV,SAAjC,EAFkE,CAGlE;;AAEA,MAAIW,MAAM,GAAGlB,eAAe,CAACM,kBAAhB,CACX,EADW,EAEXC,SAFW,EAGXiB,gBAHW,CAAb;AAKA,SAAO,KAAKzB,KAAL,CAAW0B,QAAX,CAAoBP,MAApB,CAAP;AACD,CAXD;;AAYA,eAAepB,yBAAf","sourcesContent":["import RBush from \"../ThirdParty/rbush.js\";\nimport Check from \"./Check.js\";\n\n/**\n * Wrapper around rbush for use with Rectangle types.\n * @private\n */\nfunction RectangleCollisionChecker() {\n  this._tree = new RBush();\n}\n\nfunction RectangleWithId() {\n  this.minX = 0.0;\n  this.minY = 0.0;\n  this.maxX = 0.0;\n  this.maxY = 0.0;\n  this.id = \"\";\n}\n\nRectangleWithId.fromRectangleAndId = function (id, rectangle, result) {\n  result.minX = rectangle.west;\n  result.minY = rectangle.south;\n  result.maxX = rectangle.east;\n  result.maxY = rectangle.north;\n  result.id = id;\n  return result;\n};\n\n/**\n * Insert a rectangle into the collision checker.\n *\n * @param {String} id Unique string ID for the rectangle being inserted.\n * @param {Rectangle} rectangle A Rectangle\n * @private\n */\nRectangleCollisionChecker.prototype.insert = function (id, rectangle) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"id\", id);\n  Check.typeOf.object(\"rectangle\", rectangle);\n  //>>includeEnd('debug');\n\n  var withId = RectangleWithId.fromRectangleAndId(\n    id,\n    rectangle,\n    new RectangleWithId()\n  );\n  this._tree.insert(withId);\n};\n\nfunction idCompare(a, b) {\n  return a.id === b.id;\n}\n\nvar removalScratch = new RectangleWithId();\n/**\n * Remove a rectangle from the collision checker.\n *\n * @param {String} id Unique string ID for the rectangle being removed.\n * @param {Rectangle} rectangle A Rectangle\n * @private\n */\nRectangleCollisionChecker.prototype.remove = function (id, rectangle) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"id\", id);\n  Check.typeOf.object(\"rectangle\", rectangle);\n  //>>includeEnd('debug');\n\n  var withId = RectangleWithId.fromRectangleAndId(\n    id,\n    rectangle,\n    removalScratch\n  );\n  this._tree.remove(withId, idCompare);\n};\n\nvar collisionScratch = new RectangleWithId();\n/**\n * Checks if a given rectangle collides with any of the rectangles in the collection.\n *\n * @param {Rectangle} rectangle A Rectangle that should be checked against the rectangles in the collision checker.\n * @returns {Boolean} Whether the rectangle collides with any of the rectangles in the collision checker.\n */\nRectangleCollisionChecker.prototype.collides = function (rectangle) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"rectangle\", rectangle);\n  //>>includeEnd('debug');\n\n  var withId = RectangleWithId.fromRectangleAndId(\n    \"\",\n    rectangle,\n    collisionScratch\n  );\n  return this._tree.collides(withId);\n};\nexport default RectangleCollisionChecker;\n"]},"metadata":{},"sourceType":"module"}