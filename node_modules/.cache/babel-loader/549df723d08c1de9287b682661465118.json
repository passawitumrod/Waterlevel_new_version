{"ast":null,"code":"import when from \"../ThirdParty/when.js\";\nimport Check from \"./Check.js\";\n/**\n * Initiates a terrain height query for an array of {@link Cartographic} positions by\n * requesting tiles from a terrain provider, sampling, and interpolating.  The interpolation\n * matches the triangles used to render the terrain at the specified level.  The query\n * happens asynchronously, so this function returns a promise that is resolved when\n * the query completes.  Each point height is modified in place.  If a height can not be\n * determined because no terrain data is available for the specified level at that location,\n * or another error occurs, the height is set to undefined.  As is typical of the\n * {@link Cartographic} type, the supplied height is a height above the reference ellipsoid\n * (such as {@link Ellipsoid.WGS84}) rather than an altitude above mean sea level.  In other\n * words, it will not necessarily be 0.0 if sampled in the ocean. This function needs the\n * terrain level of detail as input, if you need to get the altitude of the terrain as precisely\n * as possible (i.e. with maximum level of detail) use {@link sampleTerrainMostDetailed}.\n *\n * @exports sampleTerrain\n *\n * @param {TerrainProvider} terrainProvider The terrain provider from which to query heights.\n * @param {Number} level The terrain level-of-detail from which to query terrain heights.\n * @param {Cartographic[]} positions The positions to update with terrain heights.\n * @returns {Promise.<Cartographic[]>} A promise that resolves to the provided list of positions when terrain the query has completed.\n *\n * @see sampleTerrainMostDetailed\n *\n * @example\n * // Query the terrain height of two Cartographic positions\n * var terrainProvider = Cesium.createWorldTerrain();\n * var positions = [\n *     Cesium.Cartographic.fromDegrees(86.925145, 27.988257),\n *     Cesium.Cartographic.fromDegrees(87.0, 28.0)\n * ];\n * var promise = Cesium.sampleTerrain(terrainProvider, 11, positions);\n * Cesium.when(promise, function(updatedPositions) {\n *     // positions[0].height and positions[1].height have been updated.\n *     // updatedPositions is just a reference to positions.\n * });\n */\n\nfunction sampleTerrain(terrainProvider, level, positions) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"terrainProvider\", terrainProvider);\n  Check.typeOf.number(\"level\", level);\n  Check.defined(\"positions\", positions); //>>includeEnd('debug');\n\n  return terrainProvider.readyPromise.then(function () {\n    return doSampling(terrainProvider, level, positions);\n  });\n}\n\nfunction doSampling(terrainProvider, level, positions) {\n  var tilingScheme = terrainProvider.tilingScheme;\n  var i; // Sort points into a set of tiles\n\n  var tileRequests = []; // Result will be an Array as it's easier to work with\n\n  var tileRequestSet = {}; // A unique set\n\n  for (i = 0; i < positions.length; ++i) {\n    var xy = tilingScheme.positionToTileXY(positions[i], level);\n    var key = xy.toString();\n\n    if (!tileRequestSet.hasOwnProperty(key)) {\n      // When tile is requested for the first time\n      var value = {\n        x: xy.x,\n        y: xy.y,\n        level: level,\n        tilingScheme: tilingScheme,\n        terrainProvider: terrainProvider,\n        positions: []\n      };\n      tileRequestSet[key] = value;\n      tileRequests.push(value);\n    } // Now append to array of points for the tile\n\n\n    tileRequestSet[key].positions.push(positions[i]);\n  } // Send request for each required tile\n\n\n  var tilePromises = [];\n\n  for (i = 0; i < tileRequests.length; ++i) {\n    var tileRequest = tileRequests[i];\n    var requestPromise = tileRequest.terrainProvider.requestTileGeometry(tileRequest.x, tileRequest.y, tileRequest.level);\n    var tilePromise = requestPromise.then(createInterpolateFunction(tileRequest)).otherwise(createMarkFailedFunction(tileRequest));\n    tilePromises.push(tilePromise);\n  }\n\n  return when.all(tilePromises, function () {\n    return positions;\n  });\n}\n\nfunction createInterpolateFunction(tileRequest) {\n  var tilePositions = tileRequest.positions;\n  var rectangle = tileRequest.tilingScheme.tileXYToRectangle(tileRequest.x, tileRequest.y, tileRequest.level);\n  return function (terrainData) {\n    for (var i = 0; i < tilePositions.length; ++i) {\n      var position = tilePositions[i];\n      position.height = terrainData.interpolateHeight(rectangle, position.longitude, position.latitude);\n    }\n  };\n}\n\nfunction createMarkFailedFunction(tileRequest) {\n  var tilePositions = tileRequest.positions;\n  return function () {\n    for (var i = 0; i < tilePositions.length; ++i) {\n      var position = tilePositions[i];\n      position.height = undefined;\n    }\n  };\n}\n\nexport default sampleTerrain;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/sampleTerrain.js"],"names":["when","Check","sampleTerrain","terrainProvider","level","positions","typeOf","object","number","defined","readyPromise","then","doSampling","tilingScheme","i","tileRequests","tileRequestSet","length","xy","positionToTileXY","key","toString","hasOwnProperty","value","x","y","push","tilePromises","tileRequest","requestPromise","requestTileGeometry","tilePromise","createInterpolateFunction","otherwise","createMarkFailedFunction","all","tilePositions","rectangle","tileXYToRectangle","terrainData","position","height","interpolateHeight","longitude","latitude","undefined"],"mappings":"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","sourcesContent":["import when from \"../ThirdParty/when.js\";\nimport Check from \"./Check.js\";\n\n/**\n * Initiates a terrain height query for an array of {@link Cartographic} positions by\n * requesting tiles from a terrain provider, sampling, and interpolating.  The interpolation\n * matches the triangles used to render the terrain at the specified level.  The query\n * happens asynchronously, so this function returns a promise that is resolved when\n * the query completes.  Each point height is modified in place.  If a height can not be\n * determined because no terrain data is available for the specified level at that location,\n * or another error occurs, the height is set to undefined.  As is typical of the\n * {@link Cartographic} type, the supplied height is a height above the reference ellipsoid\n * (such as {@link Ellipsoid.WGS84}) rather than an altitude above mean sea level.  In other\n * words, it will not necessarily be 0.0 if sampled in the ocean. This function needs the\n * terrain level of detail as input, if you need to get the altitude of the terrain as precisely\n * as possible (i.e. with maximum level of detail) use {@link sampleTerrainMostDetailed}.\n *\n * @exports sampleTerrain\n *\n * @param {TerrainProvider} terrainProvider The terrain provider from which to query heights.\n * @param {Number} level The terrain level-of-detail from which to query terrain heights.\n * @param {Cartographic[]} positions The positions to update with terrain heights.\n * @returns {Promise.<Cartographic[]>} A promise that resolves to the provided list of positions when terrain the query has completed.\n *\n * @see sampleTerrainMostDetailed\n *\n * @example\n * // Query the terrain height of two Cartographic positions\n * var terrainProvider = Cesium.createWorldTerrain();\n * var positions = [\n *     Cesium.Cartographic.fromDegrees(86.925145, 27.988257),\n *     Cesium.Cartographic.fromDegrees(87.0, 28.0)\n * ];\n * var promise = Cesium.sampleTerrain(terrainProvider, 11, positions);\n * Cesium.when(promise, function(updatedPositions) {\n *     // positions[0].height and positions[1].height have been updated.\n *     // updatedPositions is just a reference to positions.\n * });\n */\nfunction sampleTerrain(terrainProvider, level, positions) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"terrainProvider\", terrainProvider);\n  Check.typeOf.number(\"level\", level);\n  Check.defined(\"positions\", positions);\n  //>>includeEnd('debug');\n\n  return terrainProvider.readyPromise.then(function () {\n    return doSampling(terrainProvider, level, positions);\n  });\n}\n\nfunction doSampling(terrainProvider, level, positions) {\n  var tilingScheme = terrainProvider.tilingScheme;\n\n  var i;\n\n  // Sort points into a set of tiles\n  var tileRequests = []; // Result will be an Array as it's easier to work with\n  var tileRequestSet = {}; // A unique set\n  for (i = 0; i < positions.length; ++i) {\n    var xy = tilingScheme.positionToTileXY(positions[i], level);\n    var key = xy.toString();\n\n    if (!tileRequestSet.hasOwnProperty(key)) {\n      // When tile is requested for the first time\n      var value = {\n        x: xy.x,\n        y: xy.y,\n        level: level,\n        tilingScheme: tilingScheme,\n        terrainProvider: terrainProvider,\n        positions: [],\n      };\n      tileRequestSet[key] = value;\n      tileRequests.push(value);\n    }\n\n    // Now append to array of points for the tile\n    tileRequestSet[key].positions.push(positions[i]);\n  }\n\n  // Send request for each required tile\n  var tilePromises = [];\n  for (i = 0; i < tileRequests.length; ++i) {\n    var tileRequest = tileRequests[i];\n    var requestPromise = tileRequest.terrainProvider.requestTileGeometry(\n      tileRequest.x,\n      tileRequest.y,\n      tileRequest.level\n    );\n    var tilePromise = requestPromise\n      .then(createInterpolateFunction(tileRequest))\n      .otherwise(createMarkFailedFunction(tileRequest));\n    tilePromises.push(tilePromise);\n  }\n\n  return when.all(tilePromises, function () {\n    return positions;\n  });\n}\n\nfunction createInterpolateFunction(tileRequest) {\n  var tilePositions = tileRequest.positions;\n  var rectangle = tileRequest.tilingScheme.tileXYToRectangle(\n    tileRequest.x,\n    tileRequest.y,\n    tileRequest.level\n  );\n  return function (terrainData) {\n    for (var i = 0; i < tilePositions.length; ++i) {\n      var position = tilePositions[i];\n      position.height = terrainData.interpolateHeight(\n        rectangle,\n        position.longitude,\n        position.latitude\n      );\n    }\n  };\n}\n\nfunction createMarkFailedFunction(tileRequest) {\n  var tilePositions = tileRequest.positions;\n  return function () {\n    for (var i = 0; i < tilePositions.length; ++i) {\n      var position = tilePositions[i];\n      position.height = undefined;\n    }\n  };\n}\nexport default sampleTerrain;\n"]},"metadata":{},"sourceType":"module"}