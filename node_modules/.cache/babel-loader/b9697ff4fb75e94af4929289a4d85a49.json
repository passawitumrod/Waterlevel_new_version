{"ast":null,"code":"import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport PrimitiveType from \"../Core/PrimitiveType.js\";\nimport ViewportQuadVS from \"../Shaders/ViewportQuadVS.js\";\nimport ClearCommand from \"./ClearCommand.js\";\nimport DrawCommand from \"./DrawCommand.js\";\nimport Framebuffer from \"./Framebuffer.js\";\nimport RenderState from \"./RenderState.js\";\nimport ShaderProgram from \"./ShaderProgram.js\";\n/**\n * @private\n */\n\nfunction ComputeEngine(context) {\n  this._context = context;\n}\n\nvar renderStateScratch;\nvar drawCommandScratch = new DrawCommand({\n  primitiveType: PrimitiveType.TRIANGLES\n});\nvar clearCommandScratch = new ClearCommand({\n  color: new Color(0.0, 0.0, 0.0, 0.0)\n});\n\nfunction createFramebuffer(context, outputTexture) {\n  return new Framebuffer({\n    context: context,\n    colorTextures: [outputTexture],\n    destroyAttachments: false\n  });\n}\n\nfunction createViewportQuadShader(context, fragmentShaderSource) {\n  return ShaderProgram.fromCache({\n    context: context,\n    vertexShaderSource: ViewportQuadVS,\n    fragmentShaderSource: fragmentShaderSource,\n    attributeLocations: {\n      position: 0,\n      textureCoordinates: 1\n    }\n  });\n}\n\nfunction createRenderState(width, height) {\n  if (!defined(renderStateScratch) || renderStateScratch.viewport.width !== width || renderStateScratch.viewport.height !== height) {\n    renderStateScratch = RenderState.fromCache({\n      viewport: new BoundingRectangle(0, 0, width, height)\n    });\n  }\n\n  return renderStateScratch;\n}\n\nComputeEngine.prototype.execute = function (computeCommand) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"computeCommand\", computeCommand); //>>includeEnd('debug');\n  // This may modify the command's resources, so do error checking afterwards\n\n  if (defined(computeCommand.preExecute)) {\n    computeCommand.preExecute(computeCommand);\n  } //>>includeStart('debug', pragmas.debug);\n\n\n  if (!defined(computeCommand.fragmentShaderSource) && !defined(computeCommand.shaderProgram)) {\n    throw new DeveloperError(\"computeCommand.fragmentShaderSource or computeCommand.shaderProgram is required.\");\n  }\n\n  Check.defined(\"computeCommand.outputTexture\", computeCommand.outputTexture); //>>includeEnd('debug');\n\n  var outputTexture = computeCommand.outputTexture;\n  var width = outputTexture.width;\n  var height = outputTexture.height;\n  var context = this._context;\n  var vertexArray = defined(computeCommand.vertexArray) ? computeCommand.vertexArray : context.getViewportQuadVertexArray();\n  var shaderProgram = defined(computeCommand.shaderProgram) ? computeCommand.shaderProgram : createViewportQuadShader(context, computeCommand.fragmentShaderSource);\n  var framebuffer = createFramebuffer(context, outputTexture);\n  var renderState = createRenderState(width, height);\n  var uniformMap = computeCommand.uniformMap;\n  var clearCommand = clearCommandScratch;\n  clearCommand.framebuffer = framebuffer;\n  clearCommand.renderState = renderState;\n  clearCommand.execute(context);\n  var drawCommand = drawCommandScratch;\n  drawCommand.vertexArray = vertexArray;\n  drawCommand.renderState = renderState;\n  drawCommand.shaderProgram = shaderProgram;\n  drawCommand.uniformMap = uniformMap;\n  drawCommand.framebuffer = framebuffer;\n  drawCommand.execute(context);\n  framebuffer.destroy();\n\n  if (!computeCommand.persists) {\n    shaderProgram.destroy();\n\n    if (defined(computeCommand.vertexArray)) {\n      vertexArray.destroy();\n    }\n  }\n\n  if (defined(computeCommand.postExecute)) {\n    computeCommand.postExecute(outputTexture);\n  }\n};\n\nComputeEngine.prototype.isDestroyed = function () {\n  return false;\n};\n\nComputeEngine.prototype.destroy = function () {\n  return destroyObject(this);\n};\n\nexport default ComputeEngine;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Renderer/ComputeEngine.js"],"names":["BoundingRectangle","Check","Color","defined","destroyObject","DeveloperError","PrimitiveType","ViewportQuadVS","ClearCommand","DrawCommand","Framebuffer","RenderState","ShaderProgram","ComputeEngine","context","_context","renderStateScratch","drawCommandScratch","primitiveType","TRIANGLES","clearCommandScratch","color","createFramebuffer","outputTexture","colorTextures","destroyAttachments","createViewportQuadShader","fragmentShaderSource","fromCache","vertexShaderSource","attributeLocations","position","textureCoordinates","createRenderState","width","height","viewport","prototype","execute","computeCommand","preExecute","shaderProgram","vertexArray","getViewportQuadVertexArray","framebuffer","renderState","uniformMap","clearCommand","drawCommand","destroy","persists","postExecute","isDestroyed"],"mappings":"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","sourcesContent":["import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport PrimitiveType from \"../Core/PrimitiveType.js\";\nimport ViewportQuadVS from \"../Shaders/ViewportQuadVS.js\";\nimport ClearCommand from \"./ClearCommand.js\";\nimport DrawCommand from \"./DrawCommand.js\";\nimport Framebuffer from \"./Framebuffer.js\";\nimport RenderState from \"./RenderState.js\";\nimport ShaderProgram from \"./ShaderProgram.js\";\n\n/**\n * @private\n */\nfunction ComputeEngine(context) {\n  this._context = context;\n}\n\nvar renderStateScratch;\nvar drawCommandScratch = new DrawCommand({\n  primitiveType: PrimitiveType.TRIANGLES,\n});\nvar clearCommandScratch = new ClearCommand({\n  color: new Color(0.0, 0.0, 0.0, 0.0),\n});\n\nfunction createFramebuffer(context, outputTexture) {\n  return new Framebuffer({\n    context: context,\n    colorTextures: [outputTexture],\n    destroyAttachments: false,\n  });\n}\n\nfunction createViewportQuadShader(context, fragmentShaderSource) {\n  return ShaderProgram.fromCache({\n    context: context,\n    vertexShaderSource: ViewportQuadVS,\n    fragmentShaderSource: fragmentShaderSource,\n    attributeLocations: {\n      position: 0,\n      textureCoordinates: 1,\n    },\n  });\n}\n\nfunction createRenderState(width, height) {\n  if (\n    !defined(renderStateScratch) ||\n    renderStateScratch.viewport.width !== width ||\n    renderStateScratch.viewport.height !== height\n  ) {\n    renderStateScratch = RenderState.fromCache({\n      viewport: new BoundingRectangle(0, 0, width, height),\n    });\n  }\n  return renderStateScratch;\n}\n\nComputeEngine.prototype.execute = function (computeCommand) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"computeCommand\", computeCommand);\n  //>>includeEnd('debug');\n\n  // This may modify the command's resources, so do error checking afterwards\n  if (defined(computeCommand.preExecute)) {\n    computeCommand.preExecute(computeCommand);\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    !defined(computeCommand.fragmentShaderSource) &&\n    !defined(computeCommand.shaderProgram)\n  ) {\n    throw new DeveloperError(\n      \"computeCommand.fragmentShaderSource or computeCommand.shaderProgram is required.\"\n    );\n  }\n\n  Check.defined(\"computeCommand.outputTexture\", computeCommand.outputTexture);\n  //>>includeEnd('debug');\n\n  var outputTexture = computeCommand.outputTexture;\n  var width = outputTexture.width;\n  var height = outputTexture.height;\n\n  var context = this._context;\n  var vertexArray = defined(computeCommand.vertexArray)\n    ? computeCommand.vertexArray\n    : context.getViewportQuadVertexArray();\n  var shaderProgram = defined(computeCommand.shaderProgram)\n    ? computeCommand.shaderProgram\n    : createViewportQuadShader(context, computeCommand.fragmentShaderSource);\n  var framebuffer = createFramebuffer(context, outputTexture);\n  var renderState = createRenderState(width, height);\n  var uniformMap = computeCommand.uniformMap;\n\n  var clearCommand = clearCommandScratch;\n  clearCommand.framebuffer = framebuffer;\n  clearCommand.renderState = renderState;\n  clearCommand.execute(context);\n\n  var drawCommand = drawCommandScratch;\n  drawCommand.vertexArray = vertexArray;\n  drawCommand.renderState = renderState;\n  drawCommand.shaderProgram = shaderProgram;\n  drawCommand.uniformMap = uniformMap;\n  drawCommand.framebuffer = framebuffer;\n  drawCommand.execute(context);\n\n  framebuffer.destroy();\n\n  if (!computeCommand.persists) {\n    shaderProgram.destroy();\n    if (defined(computeCommand.vertexArray)) {\n      vertexArray.destroy();\n    }\n  }\n\n  if (defined(computeCommand.postExecute)) {\n    computeCommand.postExecute(outputTexture);\n  }\n};\n\nComputeEngine.prototype.isDestroyed = function () {\n  return false;\n};\n\nComputeEngine.prototype.destroy = function () {\n  return destroyObject(this);\n};\nexport default ComputeEngine;\n"]},"metadata":{},"sourceType":"module"}