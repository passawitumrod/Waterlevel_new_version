{"ast":null,"code":"import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingRectangle from \"./BoundingRectangle.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CornerType from \"./CornerType.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PolylineVolumeGeometryLibrary from \"./PolylineVolumeGeometryLibrary.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport WindingOrder from \"./WindingOrder.js\";\n\nfunction computeAttributes(positions, shape) {\n  var attributes = new GeometryAttributes();\n  attributes.position = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: positions\n  });\n  var shapeLength = shape.length;\n  var vertexCount = attributes.position.values.length / 3;\n  var positionLength = positions.length / 3;\n  var shapeCount = positionLength / shapeLength;\n  var indices = IndexDatatype.createTypedArray(vertexCount, 2 * shapeLength * (shapeCount + 1));\n  var i, j;\n  var index = 0;\n  i = 0;\n  var offset = i * shapeLength;\n\n  for (j = 0; j < shapeLength - 1; j++) {\n    indices[index++] = j + offset;\n    indices[index++] = j + offset + 1;\n  }\n\n  indices[index++] = shapeLength - 1 + offset;\n  indices[index++] = offset;\n  i = shapeCount - 1;\n  offset = i * shapeLength;\n\n  for (j = 0; j < shapeLength - 1; j++) {\n    indices[index++] = j + offset;\n    indices[index++] = j + offset + 1;\n  }\n\n  indices[index++] = shapeLength - 1 + offset;\n  indices[index++] = offset;\n\n  for (i = 0; i < shapeCount - 1; i++) {\n    var firstOffset = shapeLength * i;\n    var secondOffset = firstOffset + shapeLength;\n\n    for (j = 0; j < shapeLength; j++) {\n      indices[index++] = j + firstOffset;\n      indices[index++] = j + secondOffset;\n    }\n  }\n\n  var geometry = new Geometry({\n    attributes: attributes,\n    indices: IndexDatatype.createTypedArray(vertexCount, indices),\n    boundingSphere: BoundingSphere.fromVertices(positions),\n    primitiveType: PrimitiveType.LINES\n  });\n  return geometry;\n}\n/**\n * A description of a polyline with a volume (a 2D shape extruded along a polyline).\n *\n * @alias PolylineVolumeOutlineGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.polylinePositions An array of positions that define the center of the polyline volume.\n * @param {Cartesian2[]} options.shapePositions An array of positions that define the shape to be extruded along the polyline\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n *\n * @see PolylineVolumeOutlineGeometry#createGeometry\n *\n * @example\n * function computeCircle(radius) {\n *   var positions = [];\n *   for (var i = 0; i < 360; i++) {\n *     var radians = Cesium.Math.toRadians(i);\n *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\n *   }\n *   return positions;\n * }\n *\n * var volumeOutline = new Cesium.PolylineVolumeOutlineGeometry({\n *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0\n *   ]),\n *   shapePositions : computeCircle(100000.0)\n * });\n */\n\n\nfunction PolylineVolumeOutlineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var positions = options.polylinePositions;\n  var shape = options.shapePositions; //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(positions)) {\n    throw new DeveloperError(\"options.polylinePositions is required.\");\n  }\n\n  if (!defined(shape)) {\n    throw new DeveloperError(\"options.shapePositions is required.\");\n  } //>>includeEnd('debug');\n\n\n  this._positions = positions;\n  this._shape = shape;\n  this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\n  this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n  this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n  this._workerName = \"createPolylineVolumeOutlineGeometry\";\n  var numComponents = 1 + positions.length * Cartesian3.packedLength;\n  numComponents += 1 + shape.length * Cartesian2.packedLength;\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n\n  this.packedLength = numComponents + Ellipsoid.packedLength + 2;\n}\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PolylineVolumeOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\n\n\nPolylineVolumeOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  } //>>includeEnd('debug');\n\n\n  startingIndex = defaultValue(startingIndex, 0);\n  var i;\n  var positions = value._positions;\n  var length = positions.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    Cartesian3.pack(positions[i], array, startingIndex);\n  }\n\n  var shape = value._shape;\n  length = shape.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n    Cartesian2.pack(shape[i], array, startingIndex);\n  }\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n  array[startingIndex++] = value._cornerType;\n  array[startingIndex] = value._granularity;\n  return array;\n};\n\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nvar scratchOptions = {\n  polylinePositions: undefined,\n  shapePositions: undefined,\n  ellipsoid: scratchEllipsoid,\n  height: undefined,\n  cornerType: undefined,\n  granularity: undefined\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PolylineVolumeOutlineGeometry} [result] The object into which to store the result.\n * @returns {PolylineVolumeOutlineGeometry} The modified result parameter or a new PolylineVolumeOutlineGeometry instance if one was not provided.\n */\n\nPolylineVolumeOutlineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  } //>>includeEnd('debug');\n\n\n  startingIndex = defaultValue(startingIndex, 0);\n  var i;\n  var length = array[startingIndex++];\n  var positions = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n\n  length = array[startingIndex++];\n  var shape = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n    shape[i] = Cartesian2.unpack(array, startingIndex);\n  }\n\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n  var cornerType = array[startingIndex++];\n  var granularity = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.polylinePositions = positions;\n    scratchOptions.shapePositions = shape;\n    scratchOptions.cornerType = cornerType;\n    scratchOptions.granularity = granularity;\n    return new PolylineVolumeOutlineGeometry(scratchOptions);\n  }\n\n  result._positions = positions;\n  result._shape = shape;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._cornerType = cornerType;\n  result._granularity = granularity;\n  return result;\n};\n\nvar brScratch = new BoundingRectangle();\n/**\n * Computes the geometric representation of the outline of a polyline with a volume, including its vertices, indices, and a bounding sphere.\n *\n * @param {PolylineVolumeOutlineGeometry} polylineVolumeOutlineGeometry A description of the polyline volume outline.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\n\nPolylineVolumeOutlineGeometry.createGeometry = function (polylineVolumeOutlineGeometry) {\n  var positions = polylineVolumeOutlineGeometry._positions;\n  var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\n  var shape2D = polylineVolumeOutlineGeometry._shape;\n  shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\n\n  if (cleanPositions.length < 2 || shape2D.length < 3) {\n    return undefined;\n  }\n\n  if (PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE) {\n    shape2D.reverse();\n  }\n\n  var boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\n  var computedPositions = PolylineVolumeGeometryLibrary.computePositions(cleanPositions, shape2D, boundingRectangle, polylineVolumeOutlineGeometry, false);\n  return computeAttributes(computedPositions, shape2D);\n};\n\nexport default PolylineVolumeOutlineGeometry;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/PolylineVolumeOutlineGeometry.js"],"names":["arrayRemoveDuplicates","BoundingRectangle","BoundingSphere","Cartesian2","Cartesian3","ComponentDatatype","CornerType","defaultValue","defined","DeveloperError","Ellipsoid","Geometry","GeometryAttribute","GeometryAttributes","IndexDatatype","CesiumMath","PolygonPipeline","PolylineVolumeGeometryLibrary","PrimitiveType","WindingOrder","computeAttributes","positions","shape","attributes","position","componentDatatype","DOUBLE","componentsPerAttribute","values","shapeLength","length","vertexCount","positionLength","shapeCount","indices","createTypedArray","i","j","index","offset","firstOffset","secondOffset","geometry","boundingSphere","fromVertices","primitiveType","LINES","PolylineVolumeOutlineGeometry","options","EMPTY_OBJECT","polylinePositions","shapePositions","_positions","_shape","_ellipsoid","clone","ellipsoid","WGS84","_cornerType","cornerType","ROUNDED","_granularity","granularity","RADIANS_PER_DEGREE","_workerName","numComponents","packedLength","pack","value","array","startingIndex","scratchEllipsoid","UNIT_SPHERE","scratchOptions","undefined","height","unpack","result","Array","brScratch","createGeometry","polylineVolumeOutlineGeometry","cleanPositions","equalsEpsilon","shape2D","removeDuplicatesFromShape","computeWindingOrder2D","CLOCKWISE","reverse","boundingRectangle","fromPoints","computedPositions","computePositions"],"mappings":"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","sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingRectangle from \"./BoundingRectangle.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CornerType from \"./CornerType.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PolylineVolumeGeometryLibrary from \"./PolylineVolumeGeometryLibrary.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport WindingOrder from \"./WindingOrder.js\";\n\nfunction computeAttributes(positions, shape) {\n  var attributes = new GeometryAttributes();\n  attributes.position = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: positions,\n  });\n\n  var shapeLength = shape.length;\n  var vertexCount = attributes.position.values.length / 3;\n  var positionLength = positions.length / 3;\n  var shapeCount = positionLength / shapeLength;\n  var indices = IndexDatatype.createTypedArray(\n    vertexCount,\n    2 * shapeLength * (shapeCount + 1)\n  );\n  var i, j;\n  var index = 0;\n  i = 0;\n  var offset = i * shapeLength;\n  for (j = 0; j < shapeLength - 1; j++) {\n    indices[index++] = j + offset;\n    indices[index++] = j + offset + 1;\n  }\n  indices[index++] = shapeLength - 1 + offset;\n  indices[index++] = offset;\n\n  i = shapeCount - 1;\n  offset = i * shapeLength;\n  for (j = 0; j < shapeLength - 1; j++) {\n    indices[index++] = j + offset;\n    indices[index++] = j + offset + 1;\n  }\n  indices[index++] = shapeLength - 1 + offset;\n  indices[index++] = offset;\n\n  for (i = 0; i < shapeCount - 1; i++) {\n    var firstOffset = shapeLength * i;\n    var secondOffset = firstOffset + shapeLength;\n    for (j = 0; j < shapeLength; j++) {\n      indices[index++] = j + firstOffset;\n      indices[index++] = j + secondOffset;\n    }\n  }\n\n  var geometry = new Geometry({\n    attributes: attributes,\n    indices: IndexDatatype.createTypedArray(vertexCount, indices),\n    boundingSphere: BoundingSphere.fromVertices(positions),\n    primitiveType: PrimitiveType.LINES,\n  });\n\n  return geometry;\n}\n\n/**\n * A description of a polyline with a volume (a 2D shape extruded along a polyline).\n *\n * @alias PolylineVolumeOutlineGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.polylinePositions An array of positions that define the center of the polyline volume.\n * @param {Cartesian2[]} options.shapePositions An array of positions that define the shape to be extruded along the polyline\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n *\n * @see PolylineVolumeOutlineGeometry#createGeometry\n *\n * @example\n * function computeCircle(radius) {\n *   var positions = [];\n *   for (var i = 0; i < 360; i++) {\n *     var radians = Cesium.Math.toRadians(i);\n *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\n *   }\n *   return positions;\n * }\n *\n * var volumeOutline = new Cesium.PolylineVolumeOutlineGeometry({\n *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0\n *   ]),\n *   shapePositions : computeCircle(100000.0)\n * });\n */\nfunction PolylineVolumeOutlineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var positions = options.polylinePositions;\n  var shape = options.shapePositions;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(positions)) {\n    throw new DeveloperError(\"options.polylinePositions is required.\");\n  }\n  if (!defined(shape)) {\n    throw new DeveloperError(\"options.shapePositions is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._positions = positions;\n  this._shape = shape;\n  this._ellipsoid = Ellipsoid.clone(\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\n  );\n  this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n  this._granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  this._workerName = \"createPolylineVolumeOutlineGeometry\";\n\n  var numComponents = 1 + positions.length * Cartesian3.packedLength;\n  numComponents += 1 + shape.length * Cartesian2.packedLength;\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength = numComponents + Ellipsoid.packedLength + 2;\n}\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PolylineVolumeOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nPolylineVolumeOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var i;\n\n  var positions = value._positions;\n  var length = positions.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    Cartesian3.pack(positions[i], array, startingIndex);\n  }\n\n  var shape = value._shape;\n  length = shape.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n    Cartesian2.pack(shape[i], array, startingIndex);\n  }\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  array[startingIndex++] = value._cornerType;\n  array[startingIndex] = value._granularity;\n\n  return array;\n};\n\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nvar scratchOptions = {\n  polylinePositions: undefined,\n  shapePositions: undefined,\n  ellipsoid: scratchEllipsoid,\n  height: undefined,\n  cornerType: undefined,\n  granularity: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PolylineVolumeOutlineGeometry} [result] The object into which to store the result.\n * @returns {PolylineVolumeOutlineGeometry} The modified result parameter or a new PolylineVolumeOutlineGeometry instance if one was not provided.\n */\nPolylineVolumeOutlineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var i;\n\n  var length = array[startingIndex++];\n  var positions = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n\n  length = array[startingIndex++];\n  var shape = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n    shape[i] = Cartesian2.unpack(array, startingIndex);\n  }\n\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  var cornerType = array[startingIndex++];\n  var granularity = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.polylinePositions = positions;\n    scratchOptions.shapePositions = shape;\n    scratchOptions.cornerType = cornerType;\n    scratchOptions.granularity = granularity;\n    return new PolylineVolumeOutlineGeometry(scratchOptions);\n  }\n\n  result._positions = positions;\n  result._shape = shape;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._cornerType = cornerType;\n  result._granularity = granularity;\n\n  return result;\n};\n\nvar brScratch = new BoundingRectangle();\n\n/**\n * Computes the geometric representation of the outline of a polyline with a volume, including its vertices, indices, and a bounding sphere.\n *\n * @param {PolylineVolumeOutlineGeometry} polylineVolumeOutlineGeometry A description of the polyline volume outline.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPolylineVolumeOutlineGeometry.createGeometry = function (\n  polylineVolumeOutlineGeometry\n) {\n  var positions = polylineVolumeOutlineGeometry._positions;\n  var cleanPositions = arrayRemoveDuplicates(\n    positions,\n    Cartesian3.equalsEpsilon\n  );\n  var shape2D = polylineVolumeOutlineGeometry._shape;\n  shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\n\n  if (cleanPositions.length < 2 || shape2D.length < 3) {\n    return undefined;\n  }\n\n  if (\n    PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE\n  ) {\n    shape2D.reverse();\n  }\n  var boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\n\n  var computedPositions = PolylineVolumeGeometryLibrary.computePositions(\n    cleanPositions,\n    shape2D,\n    boundingRectangle,\n    polylineVolumeOutlineGeometry,\n    false\n  );\n  return computeAttributes(computedPositions, shape2D);\n};\nexport default PolylineVolumeOutlineGeometry;\n"]},"metadata":{},"sourceType":"module"}