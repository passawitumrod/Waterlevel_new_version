{"ast":null,"code":"import arrayFill from \"./arrayFill.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\nvar diffScratch = new Cartesian3();\n/**\n * Describes a cube centered at the origin.\n *\n * @alias BoxGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.minimum The minimum x, y, and z coordinates of the box.\n * @param {Cartesian3} options.maximum The maximum x, y, and z coordinates of the box.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @see BoxGeometry.fromDimensions\n * @see BoxGeometry.createGeometry\n * @see Packable\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Box.html|Cesium Sandcastle Box Demo}\n *\n * @example\n * var box = new Cesium.BoxGeometry({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n *   maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0),\n *   minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0)\n * });\n * var geometry = Cesium.BoxGeometry.createGeometry(box);\n */\n\nfunction BoxGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var min = options.minimum;\n  var max = options.maximum; //>>includeStart('debug', pragmas.debug);\n\n  Check.typeOf.object(\"min\", min);\n  Check.typeOf.object(\"max\", max);\n\n  if (defined(options.offsetAttribute) && options.offsetAttribute === GeometryOffsetAttribute.TOP) {\n    throw new DeveloperError(\"GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry.\");\n  } //>>includeEnd('debug');\n\n\n  var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n  this._minimum = Cartesian3.clone(min);\n  this._maximum = Cartesian3.clone(max);\n  this._vertexFormat = vertexFormat;\n  this._offsetAttribute = options.offsetAttribute;\n  this._workerName = \"createBoxGeometry\";\n}\n/**\n * Creates a cube centered at the origin given its dimensions.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.dimensions The width, depth, and height of the box stored in the x, y, and z coordinates of the <code>Cartesian3</code>, respectively.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @returns {BoxGeometry}\n *\n * @exception {DeveloperError} All dimensions components must be greater than or equal to zero.\n *\n *\n * @example\n * var box = Cesium.BoxGeometry.fromDimensions({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n *   dimensions : new Cesium.Cartesian3(500000.0, 500000.0, 500000.0)\n * });\n * var geometry = Cesium.BoxGeometry.createGeometry(box);\n *\n * @see BoxGeometry.createGeometry\n */\n\n\nBoxGeometry.fromDimensions = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var dimensions = options.dimensions; //>>includeStart('debug', pragmas.debug);\n\n  Check.typeOf.object(\"dimensions\", dimensions);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.x\", dimensions.x, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.y\", dimensions.y, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.z\", dimensions.z, 0); //>>includeEnd('debug');\n\n  var corner = Cartesian3.multiplyByScalar(dimensions, 0.5, new Cartesian3());\n  return new BoxGeometry({\n    minimum: Cartesian3.negate(corner, new Cartesian3()),\n    maximum: corner,\n    vertexFormat: options.vertexFormat,\n    offsetAttribute: options.offsetAttribute\n  });\n};\n/**\n * Creates a cube from the dimensions of an AxisAlignedBoundingBox.\n *\n * @param {AxisAlignedBoundingBox} boundingBox A description of the AxisAlignedBoundingBox.\n * @returns {BoxGeometry}\n *\n *\n *\n * @example\n * var aabb = Cesium.AxisAlignedBoundingBox.fromPoints(Cesium.Cartesian3.fromDegreesArray([\n *      -72.0, 40.0,\n *      -70.0, 35.0,\n *      -75.0, 30.0,\n *      -70.0, 30.0,\n *      -68.0, 40.0\n * ]));\n * var box = Cesium.BoxGeometry.fromAxisAlignedBoundingBox(aabb);\n *\n * @see BoxGeometry.createGeometry\n */\n\n\nBoxGeometry.fromAxisAlignedBoundingBox = function (boundingBox) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"boundingBox\", boundingBox); //>>includeEnd('debug');\n\n  return new BoxGeometry({\n    minimum: boundingBox.minimum,\n    maximum: boundingBox.maximum\n  });\n};\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\n\n\nBoxGeometry.packedLength = 2 * Cartesian3.packedLength + VertexFormat.packedLength + 1;\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {BoxGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\n\nBoxGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array); //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  Cartesian3.pack(value._minimum, array, startingIndex);\n  Cartesian3.pack(value._maximum, array, startingIndex + Cartesian3.packedLength);\n  VertexFormat.pack(value._vertexFormat, array, startingIndex + 2 * Cartesian3.packedLength);\n  array[startingIndex + 2 * Cartesian3.packedLength + VertexFormat.packedLength] = defaultValue(value._offsetAttribute, -1);\n  return array;\n};\n\nvar scratchMin = new Cartesian3();\nvar scratchMax = new Cartesian3();\nvar scratchVertexFormat = new VertexFormat();\nvar scratchOptions = {\n  minimum: scratchMin,\n  maximum: scratchMax,\n  vertexFormat: scratchVertexFormat,\n  offsetAttribute: undefined\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {BoxGeometry} [result] The object into which to store the result.\n * @returns {BoxGeometry} The modified result parameter or a new BoxGeometry instance if one was not provided.\n */\n\nBoxGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array); //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  var min = Cartesian3.unpack(array, startingIndex, scratchMin);\n  var max = Cartesian3.unpack(array, startingIndex + Cartesian3.packedLength, scratchMax);\n  var vertexFormat = VertexFormat.unpack(array, startingIndex + 2 * Cartesian3.packedLength, scratchVertexFormat);\n  var offsetAttribute = array[startingIndex + 2 * Cartesian3.packedLength + VertexFormat.packedLength];\n\n  if (!defined(result)) {\n    scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n    return new BoxGeometry(scratchOptions);\n  }\n\n  result._minimum = Cartesian3.clone(min, result._minimum);\n  result._maximum = Cartesian3.clone(max, result._maximum);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n  return result;\n};\n/**\n * Computes the geometric representation of a box, including its vertices, indices, and a bounding sphere.\n *\n * @param {BoxGeometry} boxGeometry A description of the box.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\n\n\nBoxGeometry.createGeometry = function (boxGeometry) {\n  var min = boxGeometry._minimum;\n  var max = boxGeometry._maximum;\n  var vertexFormat = boxGeometry._vertexFormat;\n\n  if (Cartesian3.equals(min, max)) {\n    return;\n  }\n\n  var attributes = new GeometryAttributes();\n  var indices;\n  var positions;\n\n  if (vertexFormat.position && (vertexFormat.st || vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent)) {\n    if (vertexFormat.position) {\n      // 8 corner points.  Duplicated 3 times each for each incident edge/face.\n      positions = new Float64Array(6 * 4 * 3); // +z face\n\n      positions[0] = min.x;\n      positions[1] = min.y;\n      positions[2] = max.z;\n      positions[3] = max.x;\n      positions[4] = min.y;\n      positions[5] = max.z;\n      positions[6] = max.x;\n      positions[7] = max.y;\n      positions[8] = max.z;\n      positions[9] = min.x;\n      positions[10] = max.y;\n      positions[11] = max.z; // -z face\n\n      positions[12] = min.x;\n      positions[13] = min.y;\n      positions[14] = min.z;\n      positions[15] = max.x;\n      positions[16] = min.y;\n      positions[17] = min.z;\n      positions[18] = max.x;\n      positions[19] = max.y;\n      positions[20] = min.z;\n      positions[21] = min.x;\n      positions[22] = max.y;\n      positions[23] = min.z; // +x face\n\n      positions[24] = max.x;\n      positions[25] = min.y;\n      positions[26] = min.z;\n      positions[27] = max.x;\n      positions[28] = max.y;\n      positions[29] = min.z;\n      positions[30] = max.x;\n      positions[31] = max.y;\n      positions[32] = max.z;\n      positions[33] = max.x;\n      positions[34] = min.y;\n      positions[35] = max.z; // -x face\n\n      positions[36] = min.x;\n      positions[37] = min.y;\n      positions[38] = min.z;\n      positions[39] = min.x;\n      positions[40] = max.y;\n      positions[41] = min.z;\n      positions[42] = min.x;\n      positions[43] = max.y;\n      positions[44] = max.z;\n      positions[45] = min.x;\n      positions[46] = min.y;\n      positions[47] = max.z; // +y face\n\n      positions[48] = min.x;\n      positions[49] = max.y;\n      positions[50] = min.z;\n      positions[51] = max.x;\n      positions[52] = max.y;\n      positions[53] = min.z;\n      positions[54] = max.x;\n      positions[55] = max.y;\n      positions[56] = max.z;\n      positions[57] = min.x;\n      positions[58] = max.y;\n      positions[59] = max.z; // -y face\n\n      positions[60] = min.x;\n      positions[61] = min.y;\n      positions[62] = min.z;\n      positions[63] = max.x;\n      positions[64] = min.y;\n      positions[65] = min.z;\n      positions[66] = max.x;\n      positions[67] = min.y;\n      positions[68] = max.z;\n      positions[69] = min.x;\n      positions[70] = min.y;\n      positions[71] = max.z;\n      attributes.position = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.DOUBLE,\n        componentsPerAttribute: 3,\n        values: positions\n      });\n    }\n\n    if (vertexFormat.normal) {\n      var normals = new Float32Array(6 * 4 * 3); // +z face\n\n      normals[0] = 0.0;\n      normals[1] = 0.0;\n      normals[2] = 1.0;\n      normals[3] = 0.0;\n      normals[4] = 0.0;\n      normals[5] = 1.0;\n      normals[6] = 0.0;\n      normals[7] = 0.0;\n      normals[8] = 1.0;\n      normals[9] = 0.0;\n      normals[10] = 0.0;\n      normals[11] = 1.0; // -z face\n\n      normals[12] = 0.0;\n      normals[13] = 0.0;\n      normals[14] = -1.0;\n      normals[15] = 0.0;\n      normals[16] = 0.0;\n      normals[17] = -1.0;\n      normals[18] = 0.0;\n      normals[19] = 0.0;\n      normals[20] = -1.0;\n      normals[21] = 0.0;\n      normals[22] = 0.0;\n      normals[23] = -1.0; // +x face\n\n      normals[24] = 1.0;\n      normals[25] = 0.0;\n      normals[26] = 0.0;\n      normals[27] = 1.0;\n      normals[28] = 0.0;\n      normals[29] = 0.0;\n      normals[30] = 1.0;\n      normals[31] = 0.0;\n      normals[32] = 0.0;\n      normals[33] = 1.0;\n      normals[34] = 0.0;\n      normals[35] = 0.0; // -x face\n\n      normals[36] = -1.0;\n      normals[37] = 0.0;\n      normals[38] = 0.0;\n      normals[39] = -1.0;\n      normals[40] = 0.0;\n      normals[41] = 0.0;\n      normals[42] = -1.0;\n      normals[43] = 0.0;\n      normals[44] = 0.0;\n      normals[45] = -1.0;\n      normals[46] = 0.0;\n      normals[47] = 0.0; // +y face\n\n      normals[48] = 0.0;\n      normals[49] = 1.0;\n      normals[50] = 0.0;\n      normals[51] = 0.0;\n      normals[52] = 1.0;\n      normals[53] = 0.0;\n      normals[54] = 0.0;\n      normals[55] = 1.0;\n      normals[56] = 0.0;\n      normals[57] = 0.0;\n      normals[58] = 1.0;\n      normals[59] = 0.0; // -y face\n\n      normals[60] = 0.0;\n      normals[61] = -1.0;\n      normals[62] = 0.0;\n      normals[63] = 0.0;\n      normals[64] = -1.0;\n      normals[65] = 0.0;\n      normals[66] = 0.0;\n      normals[67] = -1.0;\n      normals[68] = 0.0;\n      normals[69] = 0.0;\n      normals[70] = -1.0;\n      normals[71] = 0.0;\n      attributes.normal = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: normals\n      });\n    }\n\n    if (vertexFormat.st) {\n      var texCoords = new Float32Array(6 * 4 * 2); // +z face\n\n      texCoords[0] = 0.0;\n      texCoords[1] = 0.0;\n      texCoords[2] = 1.0;\n      texCoords[3] = 0.0;\n      texCoords[4] = 1.0;\n      texCoords[5] = 1.0;\n      texCoords[6] = 0.0;\n      texCoords[7] = 1.0; // -z face\n\n      texCoords[8] = 1.0;\n      texCoords[9] = 0.0;\n      texCoords[10] = 0.0;\n      texCoords[11] = 0.0;\n      texCoords[12] = 0.0;\n      texCoords[13] = 1.0;\n      texCoords[14] = 1.0;\n      texCoords[15] = 1.0; //+x face\n\n      texCoords[16] = 0.0;\n      texCoords[17] = 0.0;\n      texCoords[18] = 1.0;\n      texCoords[19] = 0.0;\n      texCoords[20] = 1.0;\n      texCoords[21] = 1.0;\n      texCoords[22] = 0.0;\n      texCoords[23] = 1.0; // -x face\n\n      texCoords[24] = 1.0;\n      texCoords[25] = 0.0;\n      texCoords[26] = 0.0;\n      texCoords[27] = 0.0;\n      texCoords[28] = 0.0;\n      texCoords[29] = 1.0;\n      texCoords[30] = 1.0;\n      texCoords[31] = 1.0; // +y face\n\n      texCoords[32] = 1.0;\n      texCoords[33] = 0.0;\n      texCoords[34] = 0.0;\n      texCoords[35] = 0.0;\n      texCoords[36] = 0.0;\n      texCoords[37] = 1.0;\n      texCoords[38] = 1.0;\n      texCoords[39] = 1.0; // -y face\n\n      texCoords[40] = 0.0;\n      texCoords[41] = 0.0;\n      texCoords[42] = 1.0;\n      texCoords[43] = 0.0;\n      texCoords[44] = 1.0;\n      texCoords[45] = 1.0;\n      texCoords[46] = 0.0;\n      texCoords[47] = 1.0;\n      attributes.st = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 2,\n        values: texCoords\n      });\n    }\n\n    if (vertexFormat.tangent) {\n      var tangents = new Float32Array(6 * 4 * 3); // +z face\n\n      tangents[0] = 1.0;\n      tangents[1] = 0.0;\n      tangents[2] = 0.0;\n      tangents[3] = 1.0;\n      tangents[4] = 0.0;\n      tangents[5] = 0.0;\n      tangents[6] = 1.0;\n      tangents[7] = 0.0;\n      tangents[8] = 0.0;\n      tangents[9] = 1.0;\n      tangents[10] = 0.0;\n      tangents[11] = 0.0; // -z face\n\n      tangents[12] = -1.0;\n      tangents[13] = 0.0;\n      tangents[14] = 0.0;\n      tangents[15] = -1.0;\n      tangents[16] = 0.0;\n      tangents[17] = 0.0;\n      tangents[18] = -1.0;\n      tangents[19] = 0.0;\n      tangents[20] = 0.0;\n      tangents[21] = -1.0;\n      tangents[22] = 0.0;\n      tangents[23] = 0.0; // +x face\n\n      tangents[24] = 0.0;\n      tangents[25] = 1.0;\n      tangents[26] = 0.0;\n      tangents[27] = 0.0;\n      tangents[28] = 1.0;\n      tangents[29] = 0.0;\n      tangents[30] = 0.0;\n      tangents[31] = 1.0;\n      tangents[32] = 0.0;\n      tangents[33] = 0.0;\n      tangents[34] = 1.0;\n      tangents[35] = 0.0; // -x face\n\n      tangents[36] = 0.0;\n      tangents[37] = -1.0;\n      tangents[38] = 0.0;\n      tangents[39] = 0.0;\n      tangents[40] = -1.0;\n      tangents[41] = 0.0;\n      tangents[42] = 0.0;\n      tangents[43] = -1.0;\n      tangents[44] = 0.0;\n      tangents[45] = 0.0;\n      tangents[46] = -1.0;\n      tangents[47] = 0.0; // +y face\n\n      tangents[48] = -1.0;\n      tangents[49] = 0.0;\n      tangents[50] = 0.0;\n      tangents[51] = -1.0;\n      tangents[52] = 0.0;\n      tangents[53] = 0.0;\n      tangents[54] = -1.0;\n      tangents[55] = 0.0;\n      tangents[56] = 0.0;\n      tangents[57] = -1.0;\n      tangents[58] = 0.0;\n      tangents[59] = 0.0; // -y face\n\n      tangents[60] = 1.0;\n      tangents[61] = 0.0;\n      tangents[62] = 0.0;\n      tangents[63] = 1.0;\n      tangents[64] = 0.0;\n      tangents[65] = 0.0;\n      tangents[66] = 1.0;\n      tangents[67] = 0.0;\n      tangents[68] = 0.0;\n      tangents[69] = 1.0;\n      tangents[70] = 0.0;\n      tangents[71] = 0.0;\n      attributes.tangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: tangents\n      });\n    }\n\n    if (vertexFormat.bitangent) {\n      var bitangents = new Float32Array(6 * 4 * 3); // +z face\n\n      bitangents[0] = 0.0;\n      bitangents[1] = 1.0;\n      bitangents[2] = 0.0;\n      bitangents[3] = 0.0;\n      bitangents[4] = 1.0;\n      bitangents[5] = 0.0;\n      bitangents[6] = 0.0;\n      bitangents[7] = 1.0;\n      bitangents[8] = 0.0;\n      bitangents[9] = 0.0;\n      bitangents[10] = 1.0;\n      bitangents[11] = 0.0; // -z face\n\n      bitangents[12] = 0.0;\n      bitangents[13] = 1.0;\n      bitangents[14] = 0.0;\n      bitangents[15] = 0.0;\n      bitangents[16] = 1.0;\n      bitangents[17] = 0.0;\n      bitangents[18] = 0.0;\n      bitangents[19] = 1.0;\n      bitangents[20] = 0.0;\n      bitangents[21] = 0.0;\n      bitangents[22] = 1.0;\n      bitangents[23] = 0.0; // +x face\n\n      bitangents[24] = 0.0;\n      bitangents[25] = 0.0;\n      bitangents[26] = 1.0;\n      bitangents[27] = 0.0;\n      bitangents[28] = 0.0;\n      bitangents[29] = 1.0;\n      bitangents[30] = 0.0;\n      bitangents[31] = 0.0;\n      bitangents[32] = 1.0;\n      bitangents[33] = 0.0;\n      bitangents[34] = 0.0;\n      bitangents[35] = 1.0; // -x face\n\n      bitangents[36] = 0.0;\n      bitangents[37] = 0.0;\n      bitangents[38] = 1.0;\n      bitangents[39] = 0.0;\n      bitangents[40] = 0.0;\n      bitangents[41] = 1.0;\n      bitangents[42] = 0.0;\n      bitangents[43] = 0.0;\n      bitangents[44] = 1.0;\n      bitangents[45] = 0.0;\n      bitangents[46] = 0.0;\n      bitangents[47] = 1.0; // +y face\n\n      bitangents[48] = 0.0;\n      bitangents[49] = 0.0;\n      bitangents[50] = 1.0;\n      bitangents[51] = 0.0;\n      bitangents[52] = 0.0;\n      bitangents[53] = 1.0;\n      bitangents[54] = 0.0;\n      bitangents[55] = 0.0;\n      bitangents[56] = 1.0;\n      bitangents[57] = 0.0;\n      bitangents[58] = 0.0;\n      bitangents[59] = 1.0; // -y face\n\n      bitangents[60] = 0.0;\n      bitangents[61] = 0.0;\n      bitangents[62] = 1.0;\n      bitangents[63] = 0.0;\n      bitangents[64] = 0.0;\n      bitangents[65] = 1.0;\n      bitangents[66] = 0.0;\n      bitangents[67] = 0.0;\n      bitangents[68] = 1.0;\n      bitangents[69] = 0.0;\n      bitangents[70] = 0.0;\n      bitangents[71] = 1.0;\n      attributes.bitangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: bitangents\n      });\n    } // 12 triangles:  6 faces, 2 triangles each.\n\n\n    indices = new Uint16Array(6 * 2 * 3); // +z face\n\n    indices[0] = 0;\n    indices[1] = 1;\n    indices[2] = 2;\n    indices[3] = 0;\n    indices[4] = 2;\n    indices[5] = 3; // -z face\n\n    indices[6] = 4 + 2;\n    indices[7] = 4 + 1;\n    indices[8] = 4 + 0;\n    indices[9] = 4 + 3;\n    indices[10] = 4 + 2;\n    indices[11] = 4 + 0; // +x face\n\n    indices[12] = 8 + 0;\n    indices[13] = 8 + 1;\n    indices[14] = 8 + 2;\n    indices[15] = 8 + 0;\n    indices[16] = 8 + 2;\n    indices[17] = 8 + 3; // -x face\n\n    indices[18] = 12 + 2;\n    indices[19] = 12 + 1;\n    indices[20] = 12 + 0;\n    indices[21] = 12 + 3;\n    indices[22] = 12 + 2;\n    indices[23] = 12 + 0; // +y face\n\n    indices[24] = 16 + 2;\n    indices[25] = 16 + 1;\n    indices[26] = 16 + 0;\n    indices[27] = 16 + 3;\n    indices[28] = 16 + 2;\n    indices[29] = 16 + 0; // -y face\n\n    indices[30] = 20 + 0;\n    indices[31] = 20 + 1;\n    indices[32] = 20 + 2;\n    indices[33] = 20 + 0;\n    indices[34] = 20 + 2;\n    indices[35] = 20 + 3;\n  } else {\n    // Positions only - no need to duplicate corner points\n    positions = new Float64Array(8 * 3);\n    positions[0] = min.x;\n    positions[1] = min.y;\n    positions[2] = min.z;\n    positions[3] = max.x;\n    positions[4] = min.y;\n    positions[5] = min.z;\n    positions[6] = max.x;\n    positions[7] = max.y;\n    positions[8] = min.z;\n    positions[9] = min.x;\n    positions[10] = max.y;\n    positions[11] = min.z;\n    positions[12] = min.x;\n    positions[13] = min.y;\n    positions[14] = max.z;\n    positions[15] = max.x;\n    positions[16] = min.y;\n    positions[17] = max.z;\n    positions[18] = max.x;\n    positions[19] = max.y;\n    positions[20] = max.z;\n    positions[21] = min.x;\n    positions[22] = max.y;\n    positions[23] = max.z;\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions\n    }); // 12 triangles:  6 faces, 2 triangles each.\n\n    indices = new Uint16Array(6 * 2 * 3); // plane z = corner.Z\n\n    indices[0] = 4;\n    indices[1] = 5;\n    indices[2] = 6;\n    indices[3] = 4;\n    indices[4] = 6;\n    indices[5] = 7; // plane z = -corner.Z\n\n    indices[6] = 1;\n    indices[7] = 0;\n    indices[8] = 3;\n    indices[9] = 1;\n    indices[10] = 3;\n    indices[11] = 2; // plane x = corner.X\n\n    indices[12] = 1;\n    indices[13] = 6;\n    indices[14] = 5;\n    indices[15] = 1;\n    indices[16] = 2;\n    indices[17] = 6; // plane y = corner.Y\n\n    indices[18] = 2;\n    indices[19] = 3;\n    indices[20] = 7;\n    indices[21] = 2;\n    indices[22] = 7;\n    indices[23] = 6; // plane x = -corner.X\n\n    indices[24] = 3;\n    indices[25] = 0;\n    indices[26] = 4;\n    indices[27] = 3;\n    indices[28] = 4;\n    indices[29] = 7; // plane y = -corner.Y\n\n    indices[30] = 0;\n    indices[31] = 1;\n    indices[32] = 5;\n    indices[33] = 0;\n    indices[34] = 5;\n    indices[35] = 4;\n  }\n\n  var diff = Cartesian3.subtract(max, min, diffScratch);\n  var radius = Cartesian3.magnitude(diff) * 0.5;\n\n  if (defined(boxGeometry._offsetAttribute)) {\n    var length = positions.length;\n    var applyOffset = new Uint8Array(length / 3);\n    var offsetValue = boxGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n    arrayFill(applyOffset, offsetValue);\n    attributes.applyOffset = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: applyOffset\n    });\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: new BoundingSphere(Cartesian3.ZERO, radius),\n    offsetAttribute: boxGeometry._offsetAttribute\n  });\n};\n\nvar unitBoxGeometry;\n/**\n * Returns the geometric representation of a unit box, including its vertices, indices, and a bounding sphere.\n * @returns {Geometry} The computed vertices and indices.\n *\n * @private\n */\n\nBoxGeometry.getUnitBox = function () {\n  if (!defined(unitBoxGeometry)) {\n    unitBoxGeometry = BoxGeometry.createGeometry(BoxGeometry.fromDimensions({\n      dimensions: new Cartesian3(1.0, 1.0, 1.0),\n      vertexFormat: VertexFormat.POSITION_ONLY\n    }));\n  }\n\n  return unitBoxGeometry;\n};\n\nexport default BoxGeometry;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/BoxGeometry.js"],"names":["arrayFill","BoundingSphere","Cartesian3","Check","ComponentDatatype","defaultValue","defined","DeveloperError","Geometry","GeometryAttribute","GeometryAttributes","GeometryOffsetAttribute","PrimitiveType","VertexFormat","diffScratch","BoxGeometry","options","EMPTY_OBJECT","min","minimum","max","maximum","typeOf","object","offsetAttribute","TOP","vertexFormat","DEFAULT","_minimum","clone","_maximum","_vertexFormat","_offsetAttribute","_workerName","fromDimensions","dimensions","number","greaterThanOrEquals","x","y","z","corner","multiplyByScalar","negate","fromAxisAlignedBoundingBox","boundingBox","packedLength","pack","value","array","startingIndex","scratchMin","scratchMax","scratchVertexFormat","scratchOptions","undefined","unpack","result","createGeometry","boxGeometry","equals","attributes","indices","positions","position","st","normal","tangent","bitangent","Float64Array","componentDatatype","DOUBLE","componentsPerAttribute","values","normals","Float32Array","FLOAT","texCoords","tangents","bitangents","Uint16Array","diff","subtract","radius","magnitude","length","applyOffset","Uint8Array","offsetValue","NONE","UNSIGNED_BYTE","primitiveType","TRIANGLES","boundingSphere","ZERO","unitBoxGeometry","getUnitBox","POSITION_ONLY"],"mappings":"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","sourcesContent":["import arrayFill from \"./arrayFill.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\nvar diffScratch = new Cartesian3();\n\n/**\n * Describes a cube centered at the origin.\n *\n * @alias BoxGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.minimum The minimum x, y, and z coordinates of the box.\n * @param {Cartesian3} options.maximum The maximum x, y, and z coordinates of the box.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @see BoxGeometry.fromDimensions\n * @see BoxGeometry.createGeometry\n * @see Packable\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Box.html|Cesium Sandcastle Box Demo}\n *\n * @example\n * var box = new Cesium.BoxGeometry({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n *   maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0),\n *   minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0)\n * });\n * var geometry = Cesium.BoxGeometry.createGeometry(box);\n */\nfunction BoxGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var min = options.minimum;\n  var max = options.maximum;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"min\", min);\n  Check.typeOf.object(\"max\", max);\n  if (\n    defined(options.offsetAttribute) &&\n    options.offsetAttribute === GeometryOffsetAttribute.TOP\n  ) {\n    throw new DeveloperError(\n      \"GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n\n  this._minimum = Cartesian3.clone(min);\n  this._maximum = Cartesian3.clone(max);\n  this._vertexFormat = vertexFormat;\n  this._offsetAttribute = options.offsetAttribute;\n  this._workerName = \"createBoxGeometry\";\n}\n\n/**\n * Creates a cube centered at the origin given its dimensions.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.dimensions The width, depth, and height of the box stored in the x, y, and z coordinates of the <code>Cartesian3</code>, respectively.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @returns {BoxGeometry}\n *\n * @exception {DeveloperError} All dimensions components must be greater than or equal to zero.\n *\n *\n * @example\n * var box = Cesium.BoxGeometry.fromDimensions({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n *   dimensions : new Cesium.Cartesian3(500000.0, 500000.0, 500000.0)\n * });\n * var geometry = Cesium.BoxGeometry.createGeometry(box);\n *\n * @see BoxGeometry.createGeometry\n */\nBoxGeometry.fromDimensions = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var dimensions = options.dimensions;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"dimensions\", dimensions);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.x\", dimensions.x, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.y\", dimensions.y, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.z\", dimensions.z, 0);\n  //>>includeEnd('debug');\n\n  var corner = Cartesian3.multiplyByScalar(dimensions, 0.5, new Cartesian3());\n\n  return new BoxGeometry({\n    minimum: Cartesian3.negate(corner, new Cartesian3()),\n    maximum: corner,\n    vertexFormat: options.vertexFormat,\n    offsetAttribute: options.offsetAttribute,\n  });\n};\n\n/**\n * Creates a cube from the dimensions of an AxisAlignedBoundingBox.\n *\n * @param {AxisAlignedBoundingBox} boundingBox A description of the AxisAlignedBoundingBox.\n * @returns {BoxGeometry}\n *\n *\n *\n * @example\n * var aabb = Cesium.AxisAlignedBoundingBox.fromPoints(Cesium.Cartesian3.fromDegreesArray([\n *      -72.0, 40.0,\n *      -70.0, 35.0,\n *      -75.0, 30.0,\n *      -70.0, 30.0,\n *      -68.0, 40.0\n * ]));\n * var box = Cesium.BoxGeometry.fromAxisAlignedBoundingBox(aabb);\n *\n * @see BoxGeometry.createGeometry\n */\nBoxGeometry.fromAxisAlignedBoundingBox = function (boundingBox) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"boundingBox\", boundingBox);\n  //>>includeEnd('debug');\n\n  return new BoxGeometry({\n    minimum: boundingBox.minimum,\n    maximum: boundingBox.maximum,\n  });\n};\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nBoxGeometry.packedLength =\n  2 * Cartesian3.packedLength + VertexFormat.packedLength + 1;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {BoxGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nBoxGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  Cartesian3.pack(value._minimum, array, startingIndex);\n  Cartesian3.pack(\n    value._maximum,\n    array,\n    startingIndex + Cartesian3.packedLength\n  );\n  VertexFormat.pack(\n    value._vertexFormat,\n    array,\n    startingIndex + 2 * Cartesian3.packedLength\n  );\n  array[\n    startingIndex + 2 * Cartesian3.packedLength + VertexFormat.packedLength\n  ] = defaultValue(value._offsetAttribute, -1);\n\n  return array;\n};\n\nvar scratchMin = new Cartesian3();\nvar scratchMax = new Cartesian3();\nvar scratchVertexFormat = new VertexFormat();\nvar scratchOptions = {\n  minimum: scratchMin,\n  maximum: scratchMax,\n  vertexFormat: scratchVertexFormat,\n  offsetAttribute: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {BoxGeometry} [result] The object into which to store the result.\n * @returns {BoxGeometry} The modified result parameter or a new BoxGeometry instance if one was not provided.\n */\nBoxGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var min = Cartesian3.unpack(array, startingIndex, scratchMin);\n  var max = Cartesian3.unpack(\n    array,\n    startingIndex + Cartesian3.packedLength,\n    scratchMax\n  );\n  var vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex + 2 * Cartesian3.packedLength,\n    scratchVertexFormat\n  );\n  var offsetAttribute =\n    array[\n      startingIndex + 2 * Cartesian3.packedLength + VertexFormat.packedLength\n    ];\n\n  if (!defined(result)) {\n    scratchOptions.offsetAttribute =\n      offsetAttribute === -1 ? undefined : offsetAttribute;\n    return new BoxGeometry(scratchOptions);\n  }\n\n  result._minimum = Cartesian3.clone(min, result._minimum);\n  result._maximum = Cartesian3.clone(max, result._maximum);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._offsetAttribute =\n    offsetAttribute === -1 ? undefined : offsetAttribute;\n\n  return result;\n};\n\n/**\n * Computes the geometric representation of a box, including its vertices, indices, and a bounding sphere.\n *\n * @param {BoxGeometry} boxGeometry A description of the box.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nBoxGeometry.createGeometry = function (boxGeometry) {\n  var min = boxGeometry._minimum;\n  var max = boxGeometry._maximum;\n  var vertexFormat = boxGeometry._vertexFormat;\n\n  if (Cartesian3.equals(min, max)) {\n    return;\n  }\n\n  var attributes = new GeometryAttributes();\n  var indices;\n  var positions;\n\n  if (\n    vertexFormat.position &&\n    (vertexFormat.st ||\n      vertexFormat.normal ||\n      vertexFormat.tangent ||\n      vertexFormat.bitangent)\n  ) {\n    if (vertexFormat.position) {\n      // 8 corner points.  Duplicated 3 times each for each incident edge/face.\n      positions = new Float64Array(6 * 4 * 3);\n\n      // +z face\n      positions[0] = min.x;\n      positions[1] = min.y;\n      positions[2] = max.z;\n      positions[3] = max.x;\n      positions[4] = min.y;\n      positions[5] = max.z;\n      positions[6] = max.x;\n      positions[7] = max.y;\n      positions[8] = max.z;\n      positions[9] = min.x;\n      positions[10] = max.y;\n      positions[11] = max.z;\n\n      // -z face\n      positions[12] = min.x;\n      positions[13] = min.y;\n      positions[14] = min.z;\n      positions[15] = max.x;\n      positions[16] = min.y;\n      positions[17] = min.z;\n      positions[18] = max.x;\n      positions[19] = max.y;\n      positions[20] = min.z;\n      positions[21] = min.x;\n      positions[22] = max.y;\n      positions[23] = min.z;\n\n      // +x face\n      positions[24] = max.x;\n      positions[25] = min.y;\n      positions[26] = min.z;\n      positions[27] = max.x;\n      positions[28] = max.y;\n      positions[29] = min.z;\n      positions[30] = max.x;\n      positions[31] = max.y;\n      positions[32] = max.z;\n      positions[33] = max.x;\n      positions[34] = min.y;\n      positions[35] = max.z;\n\n      // -x face\n      positions[36] = min.x;\n      positions[37] = min.y;\n      positions[38] = min.z;\n      positions[39] = min.x;\n      positions[40] = max.y;\n      positions[41] = min.z;\n      positions[42] = min.x;\n      positions[43] = max.y;\n      positions[44] = max.z;\n      positions[45] = min.x;\n      positions[46] = min.y;\n      positions[47] = max.z;\n\n      // +y face\n      positions[48] = min.x;\n      positions[49] = max.y;\n      positions[50] = min.z;\n      positions[51] = max.x;\n      positions[52] = max.y;\n      positions[53] = min.z;\n      positions[54] = max.x;\n      positions[55] = max.y;\n      positions[56] = max.z;\n      positions[57] = min.x;\n      positions[58] = max.y;\n      positions[59] = max.z;\n\n      // -y face\n      positions[60] = min.x;\n      positions[61] = min.y;\n      positions[62] = min.z;\n      positions[63] = max.x;\n      positions[64] = min.y;\n      positions[65] = min.z;\n      positions[66] = max.x;\n      positions[67] = min.y;\n      positions[68] = max.z;\n      positions[69] = min.x;\n      positions[70] = min.y;\n      positions[71] = max.z;\n\n      attributes.position = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.DOUBLE,\n        componentsPerAttribute: 3,\n        values: positions,\n      });\n    }\n\n    if (vertexFormat.normal) {\n      var normals = new Float32Array(6 * 4 * 3);\n\n      // +z face\n      normals[0] = 0.0;\n      normals[1] = 0.0;\n      normals[2] = 1.0;\n      normals[3] = 0.0;\n      normals[4] = 0.0;\n      normals[5] = 1.0;\n      normals[6] = 0.0;\n      normals[7] = 0.0;\n      normals[8] = 1.0;\n      normals[9] = 0.0;\n      normals[10] = 0.0;\n      normals[11] = 1.0;\n\n      // -z face\n      normals[12] = 0.0;\n      normals[13] = 0.0;\n      normals[14] = -1.0;\n      normals[15] = 0.0;\n      normals[16] = 0.0;\n      normals[17] = -1.0;\n      normals[18] = 0.0;\n      normals[19] = 0.0;\n      normals[20] = -1.0;\n      normals[21] = 0.0;\n      normals[22] = 0.0;\n      normals[23] = -1.0;\n\n      // +x face\n      normals[24] = 1.0;\n      normals[25] = 0.0;\n      normals[26] = 0.0;\n      normals[27] = 1.0;\n      normals[28] = 0.0;\n      normals[29] = 0.0;\n      normals[30] = 1.0;\n      normals[31] = 0.0;\n      normals[32] = 0.0;\n      normals[33] = 1.0;\n      normals[34] = 0.0;\n      normals[35] = 0.0;\n\n      // -x face\n      normals[36] = -1.0;\n      normals[37] = 0.0;\n      normals[38] = 0.0;\n      normals[39] = -1.0;\n      normals[40] = 0.0;\n      normals[41] = 0.0;\n      normals[42] = -1.0;\n      normals[43] = 0.0;\n      normals[44] = 0.0;\n      normals[45] = -1.0;\n      normals[46] = 0.0;\n      normals[47] = 0.0;\n\n      // +y face\n      normals[48] = 0.0;\n      normals[49] = 1.0;\n      normals[50] = 0.0;\n      normals[51] = 0.0;\n      normals[52] = 1.0;\n      normals[53] = 0.0;\n      normals[54] = 0.0;\n      normals[55] = 1.0;\n      normals[56] = 0.0;\n      normals[57] = 0.0;\n      normals[58] = 1.0;\n      normals[59] = 0.0;\n\n      // -y face\n      normals[60] = 0.0;\n      normals[61] = -1.0;\n      normals[62] = 0.0;\n      normals[63] = 0.0;\n      normals[64] = -1.0;\n      normals[65] = 0.0;\n      normals[66] = 0.0;\n      normals[67] = -1.0;\n      normals[68] = 0.0;\n      normals[69] = 0.0;\n      normals[70] = -1.0;\n      normals[71] = 0.0;\n\n      attributes.normal = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: normals,\n      });\n    }\n\n    if (vertexFormat.st) {\n      var texCoords = new Float32Array(6 * 4 * 2);\n\n      // +z face\n      texCoords[0] = 0.0;\n      texCoords[1] = 0.0;\n      texCoords[2] = 1.0;\n      texCoords[3] = 0.0;\n      texCoords[4] = 1.0;\n      texCoords[5] = 1.0;\n      texCoords[6] = 0.0;\n      texCoords[7] = 1.0;\n\n      // -z face\n      texCoords[8] = 1.0;\n      texCoords[9] = 0.0;\n      texCoords[10] = 0.0;\n      texCoords[11] = 0.0;\n      texCoords[12] = 0.0;\n      texCoords[13] = 1.0;\n      texCoords[14] = 1.0;\n      texCoords[15] = 1.0;\n\n      //+x face\n      texCoords[16] = 0.0;\n      texCoords[17] = 0.0;\n      texCoords[18] = 1.0;\n      texCoords[19] = 0.0;\n      texCoords[20] = 1.0;\n      texCoords[21] = 1.0;\n      texCoords[22] = 0.0;\n      texCoords[23] = 1.0;\n\n      // -x face\n      texCoords[24] = 1.0;\n      texCoords[25] = 0.0;\n      texCoords[26] = 0.0;\n      texCoords[27] = 0.0;\n      texCoords[28] = 0.0;\n      texCoords[29] = 1.0;\n      texCoords[30] = 1.0;\n      texCoords[31] = 1.0;\n\n      // +y face\n      texCoords[32] = 1.0;\n      texCoords[33] = 0.0;\n      texCoords[34] = 0.0;\n      texCoords[35] = 0.0;\n      texCoords[36] = 0.0;\n      texCoords[37] = 1.0;\n      texCoords[38] = 1.0;\n      texCoords[39] = 1.0;\n\n      // -y face\n      texCoords[40] = 0.0;\n      texCoords[41] = 0.0;\n      texCoords[42] = 1.0;\n      texCoords[43] = 0.0;\n      texCoords[44] = 1.0;\n      texCoords[45] = 1.0;\n      texCoords[46] = 0.0;\n      texCoords[47] = 1.0;\n\n      attributes.st = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 2,\n        values: texCoords,\n      });\n    }\n\n    if (vertexFormat.tangent) {\n      var tangents = new Float32Array(6 * 4 * 3);\n\n      // +z face\n      tangents[0] = 1.0;\n      tangents[1] = 0.0;\n      tangents[2] = 0.0;\n      tangents[3] = 1.0;\n      tangents[4] = 0.0;\n      tangents[5] = 0.0;\n      tangents[6] = 1.0;\n      tangents[7] = 0.0;\n      tangents[8] = 0.0;\n      tangents[9] = 1.0;\n      tangents[10] = 0.0;\n      tangents[11] = 0.0;\n\n      // -z face\n      tangents[12] = -1.0;\n      tangents[13] = 0.0;\n      tangents[14] = 0.0;\n      tangents[15] = -1.0;\n      tangents[16] = 0.0;\n      tangents[17] = 0.0;\n      tangents[18] = -1.0;\n      tangents[19] = 0.0;\n      tangents[20] = 0.0;\n      tangents[21] = -1.0;\n      tangents[22] = 0.0;\n      tangents[23] = 0.0;\n\n      // +x face\n      tangents[24] = 0.0;\n      tangents[25] = 1.0;\n      tangents[26] = 0.0;\n      tangents[27] = 0.0;\n      tangents[28] = 1.0;\n      tangents[29] = 0.0;\n      tangents[30] = 0.0;\n      tangents[31] = 1.0;\n      tangents[32] = 0.0;\n      tangents[33] = 0.0;\n      tangents[34] = 1.0;\n      tangents[35] = 0.0;\n\n      // -x face\n      tangents[36] = 0.0;\n      tangents[37] = -1.0;\n      tangents[38] = 0.0;\n      tangents[39] = 0.0;\n      tangents[40] = -1.0;\n      tangents[41] = 0.0;\n      tangents[42] = 0.0;\n      tangents[43] = -1.0;\n      tangents[44] = 0.0;\n      tangents[45] = 0.0;\n      tangents[46] = -1.0;\n      tangents[47] = 0.0;\n\n      // +y face\n      tangents[48] = -1.0;\n      tangents[49] = 0.0;\n      tangents[50] = 0.0;\n      tangents[51] = -1.0;\n      tangents[52] = 0.0;\n      tangents[53] = 0.0;\n      tangents[54] = -1.0;\n      tangents[55] = 0.0;\n      tangents[56] = 0.0;\n      tangents[57] = -1.0;\n      tangents[58] = 0.0;\n      tangents[59] = 0.0;\n\n      // -y face\n      tangents[60] = 1.0;\n      tangents[61] = 0.0;\n      tangents[62] = 0.0;\n      tangents[63] = 1.0;\n      tangents[64] = 0.0;\n      tangents[65] = 0.0;\n      tangents[66] = 1.0;\n      tangents[67] = 0.0;\n      tangents[68] = 0.0;\n      tangents[69] = 1.0;\n      tangents[70] = 0.0;\n      tangents[71] = 0.0;\n\n      attributes.tangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: tangents,\n      });\n    }\n\n    if (vertexFormat.bitangent) {\n      var bitangents = new Float32Array(6 * 4 * 3);\n\n      // +z face\n      bitangents[0] = 0.0;\n      bitangents[1] = 1.0;\n      bitangents[2] = 0.0;\n      bitangents[3] = 0.0;\n      bitangents[4] = 1.0;\n      bitangents[5] = 0.0;\n      bitangents[6] = 0.0;\n      bitangents[7] = 1.0;\n      bitangents[8] = 0.0;\n      bitangents[9] = 0.0;\n      bitangents[10] = 1.0;\n      bitangents[11] = 0.0;\n\n      // -z face\n      bitangents[12] = 0.0;\n      bitangents[13] = 1.0;\n      bitangents[14] = 0.0;\n      bitangents[15] = 0.0;\n      bitangents[16] = 1.0;\n      bitangents[17] = 0.0;\n      bitangents[18] = 0.0;\n      bitangents[19] = 1.0;\n      bitangents[20] = 0.0;\n      bitangents[21] = 0.0;\n      bitangents[22] = 1.0;\n      bitangents[23] = 0.0;\n\n      // +x face\n      bitangents[24] = 0.0;\n      bitangents[25] = 0.0;\n      bitangents[26] = 1.0;\n      bitangents[27] = 0.0;\n      bitangents[28] = 0.0;\n      bitangents[29] = 1.0;\n      bitangents[30] = 0.0;\n      bitangents[31] = 0.0;\n      bitangents[32] = 1.0;\n      bitangents[33] = 0.0;\n      bitangents[34] = 0.0;\n      bitangents[35] = 1.0;\n\n      // -x face\n      bitangents[36] = 0.0;\n      bitangents[37] = 0.0;\n      bitangents[38] = 1.0;\n      bitangents[39] = 0.0;\n      bitangents[40] = 0.0;\n      bitangents[41] = 1.0;\n      bitangents[42] = 0.0;\n      bitangents[43] = 0.0;\n      bitangents[44] = 1.0;\n      bitangents[45] = 0.0;\n      bitangents[46] = 0.0;\n      bitangents[47] = 1.0;\n\n      // +y face\n      bitangents[48] = 0.0;\n      bitangents[49] = 0.0;\n      bitangents[50] = 1.0;\n      bitangents[51] = 0.0;\n      bitangents[52] = 0.0;\n      bitangents[53] = 1.0;\n      bitangents[54] = 0.0;\n      bitangents[55] = 0.0;\n      bitangents[56] = 1.0;\n      bitangents[57] = 0.0;\n      bitangents[58] = 0.0;\n      bitangents[59] = 1.0;\n\n      // -y face\n      bitangents[60] = 0.0;\n      bitangents[61] = 0.0;\n      bitangents[62] = 1.0;\n      bitangents[63] = 0.0;\n      bitangents[64] = 0.0;\n      bitangents[65] = 1.0;\n      bitangents[66] = 0.0;\n      bitangents[67] = 0.0;\n      bitangents[68] = 1.0;\n      bitangents[69] = 0.0;\n      bitangents[70] = 0.0;\n      bitangents[71] = 1.0;\n\n      attributes.bitangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: bitangents,\n      });\n    }\n\n    // 12 triangles:  6 faces, 2 triangles each.\n    indices = new Uint16Array(6 * 2 * 3);\n\n    // +z face\n    indices[0] = 0;\n    indices[1] = 1;\n    indices[2] = 2;\n    indices[3] = 0;\n    indices[4] = 2;\n    indices[5] = 3;\n\n    // -z face\n    indices[6] = 4 + 2;\n    indices[7] = 4 + 1;\n    indices[8] = 4 + 0;\n    indices[9] = 4 + 3;\n    indices[10] = 4 + 2;\n    indices[11] = 4 + 0;\n\n    // +x face\n    indices[12] = 8 + 0;\n    indices[13] = 8 + 1;\n    indices[14] = 8 + 2;\n    indices[15] = 8 + 0;\n    indices[16] = 8 + 2;\n    indices[17] = 8 + 3;\n\n    // -x face\n    indices[18] = 12 + 2;\n    indices[19] = 12 + 1;\n    indices[20] = 12 + 0;\n    indices[21] = 12 + 3;\n    indices[22] = 12 + 2;\n    indices[23] = 12 + 0;\n\n    // +y face\n    indices[24] = 16 + 2;\n    indices[25] = 16 + 1;\n    indices[26] = 16 + 0;\n    indices[27] = 16 + 3;\n    indices[28] = 16 + 2;\n    indices[29] = 16 + 0;\n\n    // -y face\n    indices[30] = 20 + 0;\n    indices[31] = 20 + 1;\n    indices[32] = 20 + 2;\n    indices[33] = 20 + 0;\n    indices[34] = 20 + 2;\n    indices[35] = 20 + 3;\n  } else {\n    // Positions only - no need to duplicate corner points\n    positions = new Float64Array(8 * 3);\n\n    positions[0] = min.x;\n    positions[1] = min.y;\n    positions[2] = min.z;\n    positions[3] = max.x;\n    positions[4] = min.y;\n    positions[5] = min.z;\n    positions[6] = max.x;\n    positions[7] = max.y;\n    positions[8] = min.z;\n    positions[9] = min.x;\n    positions[10] = max.y;\n    positions[11] = min.z;\n    positions[12] = min.x;\n    positions[13] = min.y;\n    positions[14] = max.z;\n    positions[15] = max.x;\n    positions[16] = min.y;\n    positions[17] = max.z;\n    positions[18] = max.x;\n    positions[19] = max.y;\n    positions[20] = max.z;\n    positions[21] = min.x;\n    positions[22] = max.y;\n    positions[23] = max.z;\n\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions,\n    });\n\n    // 12 triangles:  6 faces, 2 triangles each.\n    indices = new Uint16Array(6 * 2 * 3);\n\n    // plane z = corner.Z\n    indices[0] = 4;\n    indices[1] = 5;\n    indices[2] = 6;\n    indices[3] = 4;\n    indices[4] = 6;\n    indices[5] = 7;\n\n    // plane z = -corner.Z\n    indices[6] = 1;\n    indices[7] = 0;\n    indices[8] = 3;\n    indices[9] = 1;\n    indices[10] = 3;\n    indices[11] = 2;\n\n    // plane x = corner.X\n    indices[12] = 1;\n    indices[13] = 6;\n    indices[14] = 5;\n    indices[15] = 1;\n    indices[16] = 2;\n    indices[17] = 6;\n\n    // plane y = corner.Y\n    indices[18] = 2;\n    indices[19] = 3;\n    indices[20] = 7;\n    indices[21] = 2;\n    indices[22] = 7;\n    indices[23] = 6;\n\n    // plane x = -corner.X\n    indices[24] = 3;\n    indices[25] = 0;\n    indices[26] = 4;\n    indices[27] = 3;\n    indices[28] = 4;\n    indices[29] = 7;\n\n    // plane y = -corner.Y\n    indices[30] = 0;\n    indices[31] = 1;\n    indices[32] = 5;\n    indices[33] = 0;\n    indices[34] = 5;\n    indices[35] = 4;\n  }\n\n  var diff = Cartesian3.subtract(max, min, diffScratch);\n  var radius = Cartesian3.magnitude(diff) * 0.5;\n\n  if (defined(boxGeometry._offsetAttribute)) {\n    var length = positions.length;\n    var applyOffset = new Uint8Array(length / 3);\n    var offsetValue =\n      boxGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n    arrayFill(applyOffset, offsetValue);\n    attributes.applyOffset = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: applyOffset,\n    });\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: new BoundingSphere(Cartesian3.ZERO, radius),\n    offsetAttribute: boxGeometry._offsetAttribute,\n  });\n};\n\nvar unitBoxGeometry;\n\n/**\n * Returns the geometric representation of a unit box, including its vertices, indices, and a bounding sphere.\n * @returns {Geometry} The computed vertices and indices.\n *\n * @private\n */\nBoxGeometry.getUnitBox = function () {\n  if (!defined(unitBoxGeometry)) {\n    unitBoxGeometry = BoxGeometry.createGeometry(\n      BoxGeometry.fromDimensions({\n        dimensions: new Cartesian3(1.0, 1.0, 1.0),\n        vertexFormat: VertexFormat.POSITION_ONLY,\n      })\n    );\n  }\n  return unitBoxGeometry;\n};\nexport default BoxGeometry;\n"]},"metadata":{},"sourceType":"module"}