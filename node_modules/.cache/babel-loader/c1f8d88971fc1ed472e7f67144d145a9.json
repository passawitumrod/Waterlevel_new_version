{"ast":null,"code":"import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\n/**\n * A rotation expressed as a heading, pitch, and roll. Heading is the rotation about the\n * negative z axis. Pitch is the rotation about the negative y axis. Roll is the rotation about\n * the positive x axis.\n * @alias HeadingPitchRoll\n * @constructor\n *\n * @param {Number} [heading=0.0] The heading component in radians.\n * @param {Number} [pitch=0.0] The pitch component in radians.\n * @param {Number} [roll=0.0] The roll component in radians.\n */\n\nfunction HeadingPitchRoll(heading, pitch, roll) {\n  this.heading = defaultValue(heading, 0.0);\n  this.pitch = defaultValue(pitch, 0.0);\n  this.roll = defaultValue(roll, 0.0);\n}\n/**\n * Computes the heading, pitch and roll from a quaternion (see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles )\n *\n * @param {Quaternion} quaternion The quaternion from which to retrieve heading, pitch, and roll, all expressed in radians.\n * @param {HeadingPitchRoll} [result] The object in which to store the result. If not provided, a new instance is created and returned.\n * @returns {HeadingPitchRoll} The modified result parameter or a new HeadingPitchRoll instance if one was not provided.\n */\n\n\nHeadingPitchRoll.fromQuaternion = function (quaternion, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(quaternion)) {\n    throw new DeveloperError(\"quaternion is required\");\n  } //>>includeEnd('debug');\n\n\n  if (!defined(result)) {\n    result = new HeadingPitchRoll();\n  }\n\n  var test = 2 * (quaternion.w * quaternion.y - quaternion.z * quaternion.x);\n  var denominatorRoll = 1 - 2 * (quaternion.x * quaternion.x + quaternion.y * quaternion.y);\n  var numeratorRoll = 2 * (quaternion.w * quaternion.x + quaternion.y * quaternion.z);\n  var denominatorHeading = 1 - 2 * (quaternion.y * quaternion.y + quaternion.z * quaternion.z);\n  var numeratorHeading = 2 * (quaternion.w * quaternion.z + quaternion.x * quaternion.y);\n  result.heading = -Math.atan2(numeratorHeading, denominatorHeading);\n  result.roll = Math.atan2(numeratorRoll, denominatorRoll);\n  result.pitch = -CesiumMath.asinClamped(test);\n  return result;\n};\n/**\n * Returns a new HeadingPitchRoll instance from angles given in degrees.\n *\n * @param {Number} heading the heading in degrees\n * @param {Number} pitch the pitch in degrees\n * @param {Number} roll the heading in degrees\n * @param {HeadingPitchRoll} [result] The object in which to store the result. If not provided, a new instance is created and returned.\n * @returns {HeadingPitchRoll} A new HeadingPitchRoll instance\n */\n\n\nHeadingPitchRoll.fromDegrees = function (heading, pitch, roll, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(heading)) {\n    throw new DeveloperError(\"heading is required\");\n  }\n\n  if (!defined(pitch)) {\n    throw new DeveloperError(\"pitch is required\");\n  }\n\n  if (!defined(roll)) {\n    throw new DeveloperError(\"roll is required\");\n  } //>>includeEnd('debug');\n\n\n  if (!defined(result)) {\n    result = new HeadingPitchRoll();\n  }\n\n  result.heading = heading * CesiumMath.RADIANS_PER_DEGREE;\n  result.pitch = pitch * CesiumMath.RADIANS_PER_DEGREE;\n  result.roll = roll * CesiumMath.RADIANS_PER_DEGREE;\n  return result;\n};\n/**\n * Duplicates a HeadingPitchRoll instance.\n *\n * @param {HeadingPitchRoll} headingPitchRoll The HeadingPitchRoll to duplicate.\n * @param {HeadingPitchRoll} [result] The object onto which to store the result.\n * @returns {HeadingPitchRoll} The modified result parameter or a new HeadingPitchRoll instance if one was not provided. (Returns undefined if headingPitchRoll is undefined)\n */\n\n\nHeadingPitchRoll.clone = function (headingPitchRoll, result) {\n  if (!defined(headingPitchRoll)) {\n    return undefined;\n  }\n\n  if (!defined(result)) {\n    return new HeadingPitchRoll(headingPitchRoll.heading, headingPitchRoll.pitch, headingPitchRoll.roll);\n  }\n\n  result.heading = headingPitchRoll.heading;\n  result.pitch = headingPitchRoll.pitch;\n  result.roll = headingPitchRoll.roll;\n  return result;\n};\n/**\n * Compares the provided HeadingPitchRolls componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {HeadingPitchRoll} [left] The first HeadingPitchRoll.\n * @param {HeadingPitchRoll} [right] The second HeadingPitchRoll.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nHeadingPitchRoll.equals = function (left, right) {\n  return left === right || defined(left) && defined(right) && left.heading === right.heading && left.pitch === right.pitch && left.roll === right.roll;\n};\n/**\n * Compares the provided HeadingPitchRolls componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {HeadingPitchRoll} [left] The first HeadingPitchRoll.\n * @param {HeadingPitchRoll} [right] The second HeadingPitchRoll.\n * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\n */\n\n\nHeadingPitchRoll.equalsEpsilon = function (left, right, relativeEpsilon, absoluteEpsilon) {\n  return left === right || defined(left) && defined(right) && CesiumMath.equalsEpsilon(left.heading, right.heading, relativeEpsilon, absoluteEpsilon) && CesiumMath.equalsEpsilon(left.pitch, right.pitch, relativeEpsilon, absoluteEpsilon) && CesiumMath.equalsEpsilon(left.roll, right.roll, relativeEpsilon, absoluteEpsilon);\n};\n/**\n * Duplicates this HeadingPitchRoll instance.\n *\n * @param {HeadingPitchRoll} [result] The object onto which to store the result.\n * @returns {HeadingPitchRoll} The modified result parameter or a new HeadingPitchRoll instance if one was not provided.\n */\n\n\nHeadingPitchRoll.prototype.clone = function (result) {\n  return HeadingPitchRoll.clone(this, result);\n};\n/**\n * Compares this HeadingPitchRoll against the provided HeadingPitchRoll componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {HeadingPitchRoll} [right] The right hand side HeadingPitchRoll.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\n\n\nHeadingPitchRoll.prototype.equals = function (right) {\n  return HeadingPitchRoll.equals(this, right);\n};\n/**\n * Compares this HeadingPitchRoll against the provided HeadingPitchRoll componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {HeadingPitchRoll} [right] The right hand side HeadingPitchRoll.\n * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\n */\n\n\nHeadingPitchRoll.prototype.equalsEpsilon = function (right, relativeEpsilon, absoluteEpsilon) {\n  return HeadingPitchRoll.equalsEpsilon(this, right, relativeEpsilon, absoluteEpsilon);\n};\n/**\n * Creates a string representing this HeadingPitchRoll in the format '(heading, pitch, roll)' in radians.\n *\n * @returns {String} A string representing the provided HeadingPitchRoll in the format '(heading, pitch, roll)'.\n */\n\n\nHeadingPitchRoll.prototype.toString = function () {\n  return \"(\" + this.heading + \", \" + this.pitch + \", \" + this.roll + \")\";\n};\n\nexport default HeadingPitchRoll;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/HeadingPitchRoll.js"],"names":["defaultValue","defined","DeveloperError","CesiumMath","HeadingPitchRoll","heading","pitch","roll","fromQuaternion","quaternion","result","test","w","y","z","x","denominatorRoll","numeratorRoll","denominatorHeading","numeratorHeading","Math","atan2","asinClamped","fromDegrees","RADIANS_PER_DEGREE","clone","headingPitchRoll","undefined","equals","left","right","equalsEpsilon","relativeEpsilon","absoluteEpsilon","prototype","toString"],"mappings":"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","sourcesContent":["import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\n\n/**\n * A rotation expressed as a heading, pitch, and roll. Heading is the rotation about the\n * negative z axis. Pitch is the rotation about the negative y axis. Roll is the rotation about\n * the positive x axis.\n * @alias HeadingPitchRoll\n * @constructor\n *\n * @param {Number} [heading=0.0] The heading component in radians.\n * @param {Number} [pitch=0.0] The pitch component in radians.\n * @param {Number} [roll=0.0] The roll component in radians.\n */\nfunction HeadingPitchRoll(heading, pitch, roll) {\n  this.heading = defaultValue(heading, 0.0);\n  this.pitch = defaultValue(pitch, 0.0);\n  this.roll = defaultValue(roll, 0.0);\n}\n\n/**\n * Computes the heading, pitch and roll from a quaternion (see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles )\n *\n * @param {Quaternion} quaternion The quaternion from which to retrieve heading, pitch, and roll, all expressed in radians.\n * @param {HeadingPitchRoll} [result] The object in which to store the result. If not provided, a new instance is created and returned.\n * @returns {HeadingPitchRoll} The modified result parameter or a new HeadingPitchRoll instance if one was not provided.\n */\nHeadingPitchRoll.fromQuaternion = function (quaternion, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(quaternion)) {\n    throw new DeveloperError(\"quaternion is required\");\n  }\n  //>>includeEnd('debug');\n  if (!defined(result)) {\n    result = new HeadingPitchRoll();\n  }\n  var test = 2 * (quaternion.w * quaternion.y - quaternion.z * quaternion.x);\n  var denominatorRoll =\n    1 - 2 * (quaternion.x * quaternion.x + quaternion.y * quaternion.y);\n  var numeratorRoll =\n    2 * (quaternion.w * quaternion.x + quaternion.y * quaternion.z);\n  var denominatorHeading =\n    1 - 2 * (quaternion.y * quaternion.y + quaternion.z * quaternion.z);\n  var numeratorHeading =\n    2 * (quaternion.w * quaternion.z + quaternion.x * quaternion.y);\n  result.heading = -Math.atan2(numeratorHeading, denominatorHeading);\n  result.roll = Math.atan2(numeratorRoll, denominatorRoll);\n  result.pitch = -CesiumMath.asinClamped(test);\n  return result;\n};\n\n/**\n * Returns a new HeadingPitchRoll instance from angles given in degrees.\n *\n * @param {Number} heading the heading in degrees\n * @param {Number} pitch the pitch in degrees\n * @param {Number} roll the heading in degrees\n * @param {HeadingPitchRoll} [result] The object in which to store the result. If not provided, a new instance is created and returned.\n * @returns {HeadingPitchRoll} A new HeadingPitchRoll instance\n */\nHeadingPitchRoll.fromDegrees = function (heading, pitch, roll, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(heading)) {\n    throw new DeveloperError(\"heading is required\");\n  }\n  if (!defined(pitch)) {\n    throw new DeveloperError(\"pitch is required\");\n  }\n  if (!defined(roll)) {\n    throw new DeveloperError(\"roll is required\");\n  }\n  //>>includeEnd('debug');\n  if (!defined(result)) {\n    result = new HeadingPitchRoll();\n  }\n  result.heading = heading * CesiumMath.RADIANS_PER_DEGREE;\n  result.pitch = pitch * CesiumMath.RADIANS_PER_DEGREE;\n  result.roll = roll * CesiumMath.RADIANS_PER_DEGREE;\n  return result;\n};\n\n/**\n * Duplicates a HeadingPitchRoll instance.\n *\n * @param {HeadingPitchRoll} headingPitchRoll The HeadingPitchRoll to duplicate.\n * @param {HeadingPitchRoll} [result] The object onto which to store the result.\n * @returns {HeadingPitchRoll} The modified result parameter or a new HeadingPitchRoll instance if one was not provided. (Returns undefined if headingPitchRoll is undefined)\n */\nHeadingPitchRoll.clone = function (headingPitchRoll, result) {\n  if (!defined(headingPitchRoll)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    return new HeadingPitchRoll(\n      headingPitchRoll.heading,\n      headingPitchRoll.pitch,\n      headingPitchRoll.roll\n    );\n  }\n  result.heading = headingPitchRoll.heading;\n  result.pitch = headingPitchRoll.pitch;\n  result.roll = headingPitchRoll.roll;\n  return result;\n};\n\n/**\n * Compares the provided HeadingPitchRolls componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {HeadingPitchRoll} [left] The first HeadingPitchRoll.\n * @param {HeadingPitchRoll} [right] The second HeadingPitchRoll.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nHeadingPitchRoll.equals = function (left, right) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      left.heading === right.heading &&\n      left.pitch === right.pitch &&\n      left.roll === right.roll)\n  );\n};\n\n/**\n * Compares the provided HeadingPitchRolls componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {HeadingPitchRoll} [left] The first HeadingPitchRoll.\n * @param {HeadingPitchRoll} [right] The second HeadingPitchRoll.\n * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\n */\nHeadingPitchRoll.equalsEpsilon = function (\n  left,\n  right,\n  relativeEpsilon,\n  absoluteEpsilon\n) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      CesiumMath.equalsEpsilon(\n        left.heading,\n        right.heading,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      CesiumMath.equalsEpsilon(\n        left.pitch,\n        right.pitch,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      CesiumMath.equalsEpsilon(\n        left.roll,\n        right.roll,\n        relativeEpsilon,\n        absoluteEpsilon\n      ))\n  );\n};\n\n/**\n * Duplicates this HeadingPitchRoll instance.\n *\n * @param {HeadingPitchRoll} [result] The object onto which to store the result.\n * @returns {HeadingPitchRoll} The modified result parameter or a new HeadingPitchRoll instance if one was not provided.\n */\nHeadingPitchRoll.prototype.clone = function (result) {\n  return HeadingPitchRoll.clone(this, result);\n};\n\n/**\n * Compares this HeadingPitchRoll against the provided HeadingPitchRoll componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {HeadingPitchRoll} [right] The right hand side HeadingPitchRoll.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nHeadingPitchRoll.prototype.equals = function (right) {\n  return HeadingPitchRoll.equals(this, right);\n};\n\n/**\n * Compares this HeadingPitchRoll against the provided HeadingPitchRoll componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {HeadingPitchRoll} [right] The right hand side HeadingPitchRoll.\n * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\n */\nHeadingPitchRoll.prototype.equalsEpsilon = function (\n  right,\n  relativeEpsilon,\n  absoluteEpsilon\n) {\n  return HeadingPitchRoll.equalsEpsilon(\n    this,\n    right,\n    relativeEpsilon,\n    absoluteEpsilon\n  );\n};\n\n/**\n * Creates a string representing this HeadingPitchRoll in the format '(heading, pitch, roll)' in radians.\n *\n * @returns {String} A string representing the provided HeadingPitchRoll in the format '(heading, pitch, roll)'.\n */\nHeadingPitchRoll.prototype.toString = function () {\n  return \"(\" + this.heading + \", \" + this.pitch + \", \" + this.roll + \")\";\n};\nexport default HeadingPitchRoll;\n"]},"metadata":{},"sourceType":"module"}