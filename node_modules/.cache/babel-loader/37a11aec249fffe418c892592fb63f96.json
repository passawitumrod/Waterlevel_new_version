{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport when from \"../ThirdParty/when.js\";\n/**\n * A collection of {@link DataSource} instances.\n * @alias DataSourceCollection\n * @constructor\n */\n\nfunction DataSourceCollection() {\n  this._dataSources = [];\n  this._dataSourceAdded = new Event();\n  this._dataSourceRemoved = new Event();\n  this._dataSourceMoved = new Event();\n}\n\nObject.defineProperties(DataSourceCollection.prototype, {\n  /**\n   * Gets the number of data sources in this collection.\n   * @memberof DataSourceCollection.prototype\n   * @type {Number}\n   * @readonly\n   */\n  length: {\n    get: function get() {\n      return this._dataSources.length;\n    }\n  },\n\n  /**\n   * An event that is raised when a data source is added to the collection.\n   * Event handlers are passed the data source that was added.\n   * @memberof DataSourceCollection.prototype\n   * @type {Event}\n   * @readonly\n   */\n  dataSourceAdded: {\n    get: function get() {\n      return this._dataSourceAdded;\n    }\n  },\n\n  /**\n   * An event that is raised when a data source is removed from the collection.\n   * Event handlers are passed the data source that was removed.\n   * @memberof DataSourceCollection.prototype\n   * @type {Event}\n   * @readonly\n   */\n  dataSourceRemoved: {\n    get: function get() {\n      return this._dataSourceRemoved;\n    }\n  },\n\n  /**\n   * An event that is raised when a data source changes position in the collection.  Event handlers are passed the data source\n   * that was moved, its new index after the move, and its old index prior to the move.\n   * @memberof DataSourceCollection.prototype\n   * @type {Event}\n   * @readonly\n   */\n  dataSourceMoved: {\n    get: function get() {\n      return this._dataSourceMoved;\n    }\n  }\n});\n/**\n * Adds a data source to the collection.\n *\n * @param {DataSource|Promise.<DataSource>} dataSource A data source or a promise to a data source to add to the collection.\n *                                        When passing a promise, the data source will not actually be added\n *                                        to the collection until the promise resolves successfully.\n * @returns {Promise.<DataSource>} A Promise that resolves once the data source has been added to the collection.\n */\n\nDataSourceCollection.prototype.add = function (dataSource) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(dataSource)) {\n    throw new DeveloperError(\"dataSource is required.\");\n  } //>>includeEnd('debug');\n\n\n  var that = this;\n  var dataSources = this._dataSources;\n  return when(dataSource, function (value) {\n    //Only add the data source if removeAll has not been called\n    //Since it was added.\n    if (dataSources === that._dataSources) {\n      that._dataSources.push(value);\n\n      that._dataSourceAdded.raiseEvent(that, value);\n    }\n\n    return value;\n  });\n};\n/**\n * Removes a data source from this collection, if present.\n *\n * @param {DataSource} dataSource The data source to remove.\n * @param {Boolean} [destroy=false] Whether to destroy the data source in addition to removing it.\n * @returns {Boolean} true if the data source was in the collection and was removed,\n *                    false if the data source was not in the collection.\n */\n\n\nDataSourceCollection.prototype.remove = function (dataSource, destroy) {\n  destroy = defaultValue(destroy, false);\n\n  var index = this._dataSources.indexOf(dataSource);\n\n  if (index !== -1) {\n    this._dataSources.splice(index, 1);\n\n    this._dataSourceRemoved.raiseEvent(this, dataSource);\n\n    if (destroy && typeof dataSource.destroy === \"function\") {\n      dataSource.destroy();\n    }\n\n    return true;\n  }\n\n  return false;\n};\n/**\n * Removes all data sources from this collection.\n *\n * @param {Boolean} [destroy=false] whether to destroy the data sources in addition to removing them.\n */\n\n\nDataSourceCollection.prototype.removeAll = function (destroy) {\n  destroy = defaultValue(destroy, false);\n  var dataSources = this._dataSources;\n\n  for (var i = 0, len = dataSources.length; i < len; ++i) {\n    var dataSource = dataSources[i];\n\n    this._dataSourceRemoved.raiseEvent(this, dataSource);\n\n    if (destroy && typeof dataSource.destroy === \"function\") {\n      dataSource.destroy();\n    }\n  }\n\n  this._dataSources = [];\n};\n/**\n * Checks to see if the collection contains a given data source.\n *\n * @param {DataSource} dataSource The data source to check for.\n * @returns {Boolean} true if the collection contains the data source, false otherwise.\n */\n\n\nDataSourceCollection.prototype.contains = function (dataSource) {\n  return this.indexOf(dataSource) !== -1;\n};\n/**\n * Determines the index of a given data source in the collection.\n *\n * @param {DataSource} dataSource The data source to find the index of.\n * @returns {Number} The index of the data source in the collection, or -1 if the data source does not exist in the collection.\n */\n\n\nDataSourceCollection.prototype.indexOf = function (dataSource) {\n  return this._dataSources.indexOf(dataSource);\n};\n/**\n * Gets a data source by index from the collection.\n *\n * @param {Number} index the index to retrieve.\n * @returns {DataSource} The data source at the specified index.\n */\n\n\nDataSourceCollection.prototype.get = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(index)) {\n    throw new DeveloperError(\"index is required.\");\n  } //>>includeEnd('debug');\n\n\n  return this._dataSources[index];\n};\n/**\n * Gets a data source by name from the collection.\n *\n * @param {String} name The name to retrieve.\n * @returns {DataSource[]} A list of all data sources matching the provided name.\n */\n\n\nDataSourceCollection.prototype.getByName = function (name) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(name)) {\n    throw new DeveloperError(\"name is required.\");\n  } //>>includeEnd('debug');\n\n\n  return this._dataSources.filter(function (dataSource) {\n    return dataSource.name === name;\n  });\n};\n\nfunction getIndex(dataSources, dataSource) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(dataSource)) {\n    throw new DeveloperError(\"dataSource is required.\");\n  } //>>includeEnd('debug');\n\n\n  var index = dataSources.indexOf(dataSource); //>>includeStart('debug', pragmas.debug);\n\n  if (index === -1) {\n    throw new DeveloperError(\"dataSource is not in this collection.\");\n  } //>>includeEnd('debug');\n\n\n  return index;\n}\n\nfunction swapDataSources(collection, i, j) {\n  var arr = collection._dataSources;\n  var length = arr.length - 1;\n  i = CesiumMath.clamp(i, 0, length);\n  j = CesiumMath.clamp(j, 0, length);\n\n  if (i === j) {\n    return;\n  }\n\n  var temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n  collection.dataSourceMoved.raiseEvent(temp, j, i);\n}\n/**\n * Raises a data source up one position in the collection.\n *\n * @param {DataSource} dataSource The data source to move.\n *\n * @exception {DeveloperError} dataSource is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\n\n\nDataSourceCollection.prototype.raise = function (dataSource) {\n  var index = getIndex(this._dataSources, dataSource);\n  swapDataSources(this, index, index + 1);\n};\n/**\n * Lowers a data source down one position in the collection.\n *\n * @param {DataSource} dataSource The data source to move.\n *\n * @exception {DeveloperError} dataSource is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\n\n\nDataSourceCollection.prototype.lower = function (dataSource) {\n  var index = getIndex(this._dataSources, dataSource);\n  swapDataSources(this, index, index - 1);\n};\n/**\n * Raises a data source to the top of the collection.\n *\n * @param {DataSource} dataSource The data source to move.\n *\n * @exception {DeveloperError} dataSource is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\n\n\nDataSourceCollection.prototype.raiseToTop = function (dataSource) {\n  var index = getIndex(this._dataSources, dataSource);\n\n  if (index === this._dataSources.length - 1) {\n    return;\n  }\n\n  this._dataSources.splice(index, 1);\n\n  this._dataSources.push(dataSource);\n\n  this.dataSourceMoved.raiseEvent(dataSource, this._dataSources.length - 1, index);\n};\n/**\n * Lowers a data source to the bottom of the collection.\n *\n * @param {DataSource} dataSource The data source to move.\n *\n * @exception {DeveloperError} dataSource is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\n\n\nDataSourceCollection.prototype.lowerToBottom = function (dataSource) {\n  var index = getIndex(this._dataSources, dataSource);\n\n  if (index === 0) {\n    return;\n  }\n\n  this._dataSources.splice(index, 1);\n\n  this._dataSources.splice(0, 0, dataSource);\n\n  this.dataSourceMoved.raiseEvent(dataSource, 0, index);\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} true if this object was destroyed; otherwise, false.\n *\n * @see DataSourceCollection#destroy\n */\n\n\nDataSourceCollection.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys the resources held by all data sources in this collection.  Explicitly destroying this\n * object allows for deterministic release of WebGL resources, instead of relying on the garbage\n * collector. Once this object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * dataSourceCollection = dataSourceCollection && dataSourceCollection.destroy();\n *\n * @see DataSourceCollection#isDestroyed\n */\n\n\nDataSourceCollection.prototype.destroy = function () {\n  this.removeAll(true);\n  return destroyObject(this);\n};\n\nexport default DataSourceCollection;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/DataSourceCollection.js"],"names":["defaultValue","defined","destroyObject","DeveloperError","Event","CesiumMath","when","DataSourceCollection","_dataSources","_dataSourceAdded","_dataSourceRemoved","_dataSourceMoved","Object","defineProperties","prototype","length","get","dataSourceAdded","dataSourceRemoved","dataSourceMoved","add","dataSource","that","dataSources","value","push","raiseEvent","remove","destroy","index","indexOf","splice","removeAll","i","len","contains","getByName","name","filter","getIndex","swapDataSources","collection","j","arr","clamp","temp","raise","lower","raiseToTop","lowerToBottom","isDestroyed"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport when from \"../ThirdParty/when.js\";\n\n/**\n * A collection of {@link DataSource} instances.\n * @alias DataSourceCollection\n * @constructor\n */\nfunction DataSourceCollection() {\n  this._dataSources = [];\n  this._dataSourceAdded = new Event();\n  this._dataSourceRemoved = new Event();\n  this._dataSourceMoved = new Event();\n}\n\nObject.defineProperties(DataSourceCollection.prototype, {\n  /**\n   * Gets the number of data sources in this collection.\n   * @memberof DataSourceCollection.prototype\n   * @type {Number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      return this._dataSources.length;\n    },\n  },\n\n  /**\n   * An event that is raised when a data source is added to the collection.\n   * Event handlers are passed the data source that was added.\n   * @memberof DataSourceCollection.prototype\n   * @type {Event}\n   * @readonly\n   */\n  dataSourceAdded: {\n    get: function () {\n      return this._dataSourceAdded;\n    },\n  },\n\n  /**\n   * An event that is raised when a data source is removed from the collection.\n   * Event handlers are passed the data source that was removed.\n   * @memberof DataSourceCollection.prototype\n   * @type {Event}\n   * @readonly\n   */\n  dataSourceRemoved: {\n    get: function () {\n      return this._dataSourceRemoved;\n    },\n  },\n\n  /**\n   * An event that is raised when a data source changes position in the collection.  Event handlers are passed the data source\n   * that was moved, its new index after the move, and its old index prior to the move.\n   * @memberof DataSourceCollection.prototype\n   * @type {Event}\n   * @readonly\n   */\n  dataSourceMoved: {\n    get: function () {\n      return this._dataSourceMoved;\n    },\n  },\n});\n\n/**\n * Adds a data source to the collection.\n *\n * @param {DataSource|Promise.<DataSource>} dataSource A data source or a promise to a data source to add to the collection.\n *                                        When passing a promise, the data source will not actually be added\n *                                        to the collection until the promise resolves successfully.\n * @returns {Promise.<DataSource>} A Promise that resolves once the data source has been added to the collection.\n */\nDataSourceCollection.prototype.add = function (dataSource) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(dataSource)) {\n    throw new DeveloperError(\"dataSource is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var that = this;\n  var dataSources = this._dataSources;\n  return when(dataSource, function (value) {\n    //Only add the data source if removeAll has not been called\n    //Since it was added.\n    if (dataSources === that._dataSources) {\n      that._dataSources.push(value);\n      that._dataSourceAdded.raiseEvent(that, value);\n    }\n    return value;\n  });\n};\n\n/**\n * Removes a data source from this collection, if present.\n *\n * @param {DataSource} dataSource The data source to remove.\n * @param {Boolean} [destroy=false] Whether to destroy the data source in addition to removing it.\n * @returns {Boolean} true if the data source was in the collection and was removed,\n *                    false if the data source was not in the collection.\n */\nDataSourceCollection.prototype.remove = function (dataSource, destroy) {\n  destroy = defaultValue(destroy, false);\n\n  var index = this._dataSources.indexOf(dataSource);\n  if (index !== -1) {\n    this._dataSources.splice(index, 1);\n    this._dataSourceRemoved.raiseEvent(this, dataSource);\n\n    if (destroy && typeof dataSource.destroy === \"function\") {\n      dataSource.destroy();\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Removes all data sources from this collection.\n *\n * @param {Boolean} [destroy=false] whether to destroy the data sources in addition to removing them.\n */\nDataSourceCollection.prototype.removeAll = function (destroy) {\n  destroy = defaultValue(destroy, false);\n\n  var dataSources = this._dataSources;\n  for (var i = 0, len = dataSources.length; i < len; ++i) {\n    var dataSource = dataSources[i];\n    this._dataSourceRemoved.raiseEvent(this, dataSource);\n\n    if (destroy && typeof dataSource.destroy === \"function\") {\n      dataSource.destroy();\n    }\n  }\n  this._dataSources = [];\n};\n\n/**\n * Checks to see if the collection contains a given data source.\n *\n * @param {DataSource} dataSource The data source to check for.\n * @returns {Boolean} true if the collection contains the data source, false otherwise.\n */\nDataSourceCollection.prototype.contains = function (dataSource) {\n  return this.indexOf(dataSource) !== -1;\n};\n\n/**\n * Determines the index of a given data source in the collection.\n *\n * @param {DataSource} dataSource The data source to find the index of.\n * @returns {Number} The index of the data source in the collection, or -1 if the data source does not exist in the collection.\n */\nDataSourceCollection.prototype.indexOf = function (dataSource) {\n  return this._dataSources.indexOf(dataSource);\n};\n\n/**\n * Gets a data source by index from the collection.\n *\n * @param {Number} index the index to retrieve.\n * @returns {DataSource} The data source at the specified index.\n */\nDataSourceCollection.prototype.get = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(index)) {\n    throw new DeveloperError(\"index is required.\");\n  }\n  //>>includeEnd('debug');\n\n  return this._dataSources[index];\n};\n\n/**\n * Gets a data source by name from the collection.\n *\n * @param {String} name The name to retrieve.\n * @returns {DataSource[]} A list of all data sources matching the provided name.\n */\nDataSourceCollection.prototype.getByName = function (name) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(name)) {\n    throw new DeveloperError(\"name is required.\");\n  }\n  //>>includeEnd('debug');\n\n  return this._dataSources.filter(function (dataSource) {\n    return dataSource.name === name;\n  });\n};\n\nfunction getIndex(dataSources, dataSource) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(dataSource)) {\n    throw new DeveloperError(\"dataSource is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var index = dataSources.indexOf(dataSource);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (index === -1) {\n    throw new DeveloperError(\"dataSource is not in this collection.\");\n  }\n  //>>includeEnd('debug');\n\n  return index;\n}\n\nfunction swapDataSources(collection, i, j) {\n  var arr = collection._dataSources;\n  var length = arr.length - 1;\n  i = CesiumMath.clamp(i, 0, length);\n  j = CesiumMath.clamp(j, 0, length);\n\n  if (i === j) {\n    return;\n  }\n\n  var temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n\n  collection.dataSourceMoved.raiseEvent(temp, j, i);\n}\n\n/**\n * Raises a data source up one position in the collection.\n *\n * @param {DataSource} dataSource The data source to move.\n *\n * @exception {DeveloperError} dataSource is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nDataSourceCollection.prototype.raise = function (dataSource) {\n  var index = getIndex(this._dataSources, dataSource);\n  swapDataSources(this, index, index + 1);\n};\n\n/**\n * Lowers a data source down one position in the collection.\n *\n * @param {DataSource} dataSource The data source to move.\n *\n * @exception {DeveloperError} dataSource is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nDataSourceCollection.prototype.lower = function (dataSource) {\n  var index = getIndex(this._dataSources, dataSource);\n  swapDataSources(this, index, index - 1);\n};\n\n/**\n * Raises a data source to the top of the collection.\n *\n * @param {DataSource} dataSource The data source to move.\n *\n * @exception {DeveloperError} dataSource is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nDataSourceCollection.prototype.raiseToTop = function (dataSource) {\n  var index = getIndex(this._dataSources, dataSource);\n  if (index === this._dataSources.length - 1) {\n    return;\n  }\n  this._dataSources.splice(index, 1);\n  this._dataSources.push(dataSource);\n\n  this.dataSourceMoved.raiseEvent(\n    dataSource,\n    this._dataSources.length - 1,\n    index\n  );\n};\n\n/**\n * Lowers a data source to the bottom of the collection.\n *\n * @param {DataSource} dataSource The data source to move.\n *\n * @exception {DeveloperError} dataSource is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nDataSourceCollection.prototype.lowerToBottom = function (dataSource) {\n  var index = getIndex(this._dataSources, dataSource);\n  if (index === 0) {\n    return;\n  }\n  this._dataSources.splice(index, 1);\n  this._dataSources.splice(0, 0, dataSource);\n\n  this.dataSourceMoved.raiseEvent(dataSource, 0, index);\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} true if this object was destroyed; otherwise, false.\n *\n * @see DataSourceCollection#destroy\n */\nDataSourceCollection.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the resources held by all data sources in this collection.  Explicitly destroying this\n * object allows for deterministic release of WebGL resources, instead of relying on the garbage\n * collector. Once this object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * dataSourceCollection = dataSourceCollection && dataSourceCollection.destroy();\n *\n * @see DataSourceCollection#isDestroyed\n */\nDataSourceCollection.prototype.destroy = function () {\n  this.removeAll(true);\n  return destroyObject(this);\n};\nexport default DataSourceCollection;\n"]},"metadata":{},"sourceType":"module"}