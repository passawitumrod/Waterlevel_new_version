{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport CesiumMath from \"../Core/Math.js\";\nvar defaultAngle = CesiumMath.toRadians(30.0);\n/**\n * A ParticleEmitter that emits particles within a cone.\n * Particles will be positioned at the tip of the cone and have initial velocities going towards the base.\n *\n * @alias ConeEmitter\n * @constructor\n *\n * @param {Number} [angle=Cesium.Math.toRadians(30.0)] The angle of the cone in radians.\n */\n\nfunction ConeEmitter(angle) {\n  this._angle = defaultValue(angle, defaultAngle);\n}\n\nObject.defineProperties(ConeEmitter.prototype, {\n  /**\n   * The angle of the cone in radians.\n   * @memberof CircleEmitter.prototype\n   * @type {Number}\n   * @default Cesium.Math.toRadians(30.0)\n   */\n  angle: {\n    get: function () {\n      return this._angle;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number(\"value\", value); //>>includeEnd('debug');\n\n      this._angle = value;\n    }\n  }\n});\n/**\n * Initializes the given {Particle} by setting it's position and velocity.\n *\n * @private\n * @param {Particle} particle The particle to initialize\n */\n\nConeEmitter.prototype.emit = function (particle) {\n  var radius = Math.tan(this._angle); // Compute a random point on the cone's base\n\n  var theta = CesiumMath.randomBetween(0.0, CesiumMath.TWO_PI);\n  var rad = CesiumMath.randomBetween(0.0, radius);\n  var x = rad * Math.cos(theta);\n  var y = rad * Math.sin(theta);\n  var z = 1.0;\n  particle.velocity = Cartesian3.fromElements(x, y, z, particle.velocity);\n  Cartesian3.normalize(particle.velocity, particle.velocity);\n  particle.position = Cartesian3.clone(Cartesian3.ZERO, particle.position);\n};\n\nexport default ConeEmitter;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/ConeEmitter.js"],"names":["Cartesian3","Check","defaultValue","CesiumMath","defaultAngle","toRadians","ConeEmitter","angle","_angle","Object","defineProperties","prototype","get","set","value","typeOf","number","emit","particle","radius","Math","tan","theta","randomBetween","TWO_PI","rad","x","cos","y","sin","z","velocity","fromElements","normalize","position","clone","ZERO"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,uBAAvB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AAEA,IAAIC,YAAY,GAAGD,UAAU,CAACE,SAAX,CAAqB,IAArB,CAAnB;AAEA;;;;;;;;;;AASA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,OAAKC,MAAL,GAAcN,YAAY,CAACK,KAAD,EAAQH,YAAR,CAA1B;AACD;;AAEDK,MAAM,CAACC,gBAAP,CAAwBJ,WAAW,CAACK,SAApC,EAA+C;AAC7C;;;;;;AAMAJ,EAAAA,KAAK,EAAE;AACLK,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKJ,MAAZ;AACD,KAHI;AAILK,IAAAA,GAAG,EAAE,UAAUC,KAAV,EAAiB;AACpB;AACAb,MAAAA,KAAK,CAACc,MAAN,CAAaC,MAAb,CAAoB,OAApB,EAA6BF,KAA7B,EAFoB,CAGpB;;AACA,WAAKN,MAAL,GAAcM,KAAd;AACD;AATI;AAPsC,CAA/C;AAoBA;;;;;;;AAMAR,WAAW,CAACK,SAAZ,CAAsBM,IAAtB,GAA6B,UAAUC,QAAV,EAAoB;AAC/C,MAAIC,MAAM,GAAGC,IAAI,CAACC,GAAL,CAAS,KAAKb,MAAd,CAAb,CAD+C,CAG/C;;AACA,MAAIc,KAAK,GAAGnB,UAAU,CAACoB,aAAX,CAAyB,GAAzB,EAA8BpB,UAAU,CAACqB,MAAzC,CAAZ;AACA,MAAIC,GAAG,GAAGtB,UAAU,CAACoB,aAAX,CAAyB,GAAzB,EAA8BJ,MAA9B,CAAV;AAEA,MAAIO,CAAC,GAAGD,GAAG,GAAGL,IAAI,CAACO,GAAL,CAASL,KAAT,CAAd;AACA,MAAIM,CAAC,GAAGH,GAAG,GAAGL,IAAI,CAACS,GAAL,CAASP,KAAT,CAAd;AACA,MAAIQ,CAAC,GAAG,GAAR;AAEAZ,EAAAA,QAAQ,CAACa,QAAT,GAAoB/B,UAAU,CAACgC,YAAX,CAAwBN,CAAxB,EAA2BE,CAA3B,EAA8BE,CAA9B,EAAiCZ,QAAQ,CAACa,QAA1C,CAApB;AACA/B,EAAAA,UAAU,CAACiC,SAAX,CAAqBf,QAAQ,CAACa,QAA9B,EAAwCb,QAAQ,CAACa,QAAjD;AACAb,EAAAA,QAAQ,CAACgB,QAAT,GAAoBlC,UAAU,CAACmC,KAAX,CAAiBnC,UAAU,CAACoC,IAA5B,EAAkClB,QAAQ,CAACgB,QAA3C,CAApB;AACD,CAdD;;AAeA,eAAe5B,WAAf","sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport CesiumMath from \"../Core/Math.js\";\n\nvar defaultAngle = CesiumMath.toRadians(30.0);\n\n/**\n * A ParticleEmitter that emits particles within a cone.\n * Particles will be positioned at the tip of the cone and have initial velocities going towards the base.\n *\n * @alias ConeEmitter\n * @constructor\n *\n * @param {Number} [angle=Cesium.Math.toRadians(30.0)] The angle of the cone in radians.\n */\nfunction ConeEmitter(angle) {\n  this._angle = defaultValue(angle, defaultAngle);\n}\n\nObject.defineProperties(ConeEmitter.prototype, {\n  /**\n   * The angle of the cone in radians.\n   * @memberof CircleEmitter.prototype\n   * @type {Number}\n   * @default Cesium.Math.toRadians(30.0)\n   */\n  angle: {\n    get: function () {\n      return this._angle;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n      this._angle = value;\n    },\n  },\n});\n\n/**\n * Initializes the given {Particle} by setting it's position and velocity.\n *\n * @private\n * @param {Particle} particle The particle to initialize\n */\nConeEmitter.prototype.emit = function (particle) {\n  var radius = Math.tan(this._angle);\n\n  // Compute a random point on the cone's base\n  var theta = CesiumMath.randomBetween(0.0, CesiumMath.TWO_PI);\n  var rad = CesiumMath.randomBetween(0.0, radius);\n\n  var x = rad * Math.cos(theta);\n  var y = rad * Math.sin(theta);\n  var z = 1.0;\n\n  particle.velocity = Cartesian3.fromElements(x, y, z, particle.velocity);\n  Cartesian3.normalize(particle.velocity, particle.velocity);\n  particle.position = Cartesian3.clone(Cartesian3.ZERO, particle.position);\n};\nexport default ConeEmitter;\n"]},"metadata":{},"sourceType":"module"}