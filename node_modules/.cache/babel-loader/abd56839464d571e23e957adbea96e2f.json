{"ast":null,"code":"import Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport MapboxApi from \"../Core/MapboxApi.js\";\nimport Resource from \"../Core/Resource.js\";\nimport UrlTemplateImageryProvider from \"./UrlTemplateImageryProvider.js\";\nvar trailingSlashRegex = /\\/$/;\nvar defaultCredit = new Credit('&copy; <a href=\"https://www.mapbox.com/about/maps/\">Mapbox</a> &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> <strong><a href=\"https://www.mapbox.com/map-feedback/\">Improve this map</a></strong>');\n/**\n * Provides tiled imagery hosted by Mapbox.\n *\n * @alias MapboxStyleImageryProvider\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Resource|String} [options.url='https://api.mapbox.com/styles/v1/'] The Mapbox server url.\n * @param {String} [options.username='mapbox'] The username of the map account.\n * @param {String} options.styleId The Mapbox Style ID.\n * @param {String} [options.accessToken] The public access token for the imagery.\n * @param {Number} [options.tilesize=512] The size of the image tiles.\n * @param {Boolean} [options.scaleFactor] Determines if tiles are rendered at a @2x scale factor.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n * @param {Number} [options.minimumLevel=0] The minimum level-of-detail supported by the imagery provider.  Take care when specifying\n *                 this that the number of tiles at the minimum level is small, such as four or less.  A larger number is likely\n *                 to result in rendering problems.\n * @param {Number} [options.maximumLevel] The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n * @param {Rectangle} [options.rectangle=Rectangle.MAX_VALUE] The rectangle, in radians, covered by the image.\n * @param {Credit|String} [options.credit] A credit for the data source, which is displayed on the canvas.\n *\n *\n * @example\n * // Mapbox style provider\n * var mapbox = new Cesium.MapboxStyleImageryProvider({\n *     styleId: 'streets-v11',\n *     accessToken: 'thisIsMyAccessToken'\n * });\n *\n * @see {@link https://docs.mapbox.com/api/maps/#styles}\n * @see {@link https://docs.mapbox.com/api/#access-tokens-and-token-scopes}\n */\n\nfunction MapboxStyleImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var styleId = options.styleId; //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(styleId)) {\n    throw new DeveloperError(\"options.styleId is required.\");\n  } //>>includeEnd('debug');\n\n\n  var resource = Resource.createIfNeeded(defaultValue(options.url, \"https://api.mapbox.com/styles/v1/\"));\n  var accessToken = MapboxApi.getAccessToken(options.accessToken);\n  this._styleId = styleId;\n  this._accessToken = accessToken;\n  this._accessTokenErrorCredit = Credit.clone(MapboxApi.getErrorCredit(options.accessToken));\n  var tilesize = defaultValue(options.tilesize, 512);\n  this._tilesize = tilesize;\n  var username = defaultValue(options.username, \"mapbox\");\n  this._username = username;\n  var scaleFactor = defined(options.scaleFactor) ? \"@2x\" : \"\";\n  var templateUrl = resource.getUrlComponent();\n\n  if (!trailingSlashRegex.test(templateUrl)) {\n    templateUrl += \"/\";\n  }\n\n  templateUrl += this._username + \"/\" + styleId + \"/tiles/\" + this._tilesize + \"/{z}/{x}/{y}\" + scaleFactor;\n  resource.url = templateUrl;\n  resource.setQueryParameters({\n    access_token: accessToken\n  });\n  var credit;\n\n  if (defined(options.credit)) {\n    credit = options.credit;\n\n    if (typeof credit === \"string\") {\n      credit = new Credit(credit);\n    }\n  } else {\n    credit = defaultCredit;\n  }\n\n  this._resource = resource;\n  this._imageryProvider = new UrlTemplateImageryProvider({\n    url: resource,\n    credit: credit,\n    ellipsoid: options.ellipsoid,\n    minimumLevel: options.minimumLevel,\n    maximumLevel: options.maximumLevel,\n    rectangle: options.rectangle\n  });\n}\n\nObject.defineProperties(MapboxStyleImageryProvider.prototype, {\n  /**\n   * Gets the URL of the Mapbox server.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._imageryProvider.url;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._imageryProvider.ready;\n    }\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._imageryProvider.readyPromise;\n    }\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by the instance.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._imageryProvider.rectangle;\n    }\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._imageryProvider.tileWidth;\n    }\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._imageryProvider.tileHeight;\n    }\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._imageryProvider.maximumLevel;\n    }\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true. Generally,\n   * a minimum level should only be used when the rectangle of the imagery is small\n   * enough that the number of tiles at the minimum level is small.  An imagery\n   * provider with more than a few tiles at the minimum level will lead to\n   * rendering problems.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return this._imageryProvider.minimumLevel;\n    }\n  },\n\n  /**\n   * Gets the tiling scheme used by the provider.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._imageryProvider.tilingScheme;\n    }\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._imageryProvider.tileDiscardPolicy;\n    }\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error..  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._imageryProvider.errorEvent;\n    }\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery. This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._imageryProvider.credit;\n    }\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._imageryProvider.proxy;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return this._imageryProvider.hasAlphaChannel;\n    }\n  }\n});\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\n\nMapboxStyleImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  if (defined(this._accessTokenErrorCredit)) {\n    return [this._accessTokenErrorCredit];\n  }\n};\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<Image|Canvas>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\n\n\nMapboxStyleImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  return this._imageryProvider.requestImage(x, y, level, request);\n};\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.  This function should not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n * This function is optional, so it may not exist on all ImageryProviders.\n *\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n *\n * @exception {DeveloperError} <code>pickFeatures</code> must not be called before the imagery provider is ready.\n */\n\n\nMapboxStyleImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  return this._imageryProvider.pickFeatures(x, y, level, longitude, latitude);\n}; // Exposed for tests\n\n\nMapboxStyleImageryProvider._defaultCredit = defaultCredit;\nexport default MapboxStyleImageryProvider;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/MapboxStyleImageryProvider.js"],"names":["Credit","defaultValue","defined","DeveloperError","MapboxApi","Resource","UrlTemplateImageryProvider","trailingSlashRegex","defaultCredit","MapboxStyleImageryProvider","options","EMPTY_OBJECT","styleId","resource","createIfNeeded","url","accessToken","getAccessToken","_styleId","_accessToken","_accessTokenErrorCredit","clone","getErrorCredit","tilesize","_tilesize","username","_username","scaleFactor","templateUrl","getUrlComponent","test","setQueryParameters","access_token","credit","_resource","_imageryProvider","ellipsoid","minimumLevel","maximumLevel","rectangle","Object","defineProperties","prototype","get","ready","readyPromise","tileWidth","tileHeight","tilingScheme","tileDiscardPolicy","errorEvent","proxy","hasAlphaChannel","getTileCredits","x","y","level","requestImage","request","pickFeatures","longitude","latitude","_defaultCredit"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,0BAAP,MAAuC,iCAAvC;AAEA,IAAIC,kBAAkB,GAAG,KAAzB;AACA,IAAIC,aAAa,GAAG,IAAIR,MAAJ,CAClB,+NADkB,CAApB;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,SAASS,0BAAT,CAAoCC,OAApC,EAA6C;AAC3CA,EAAAA,OAAO,GAAGT,YAAY,CAACS,OAAD,EAAUT,YAAY,CAACU,YAAvB,CAAtB;AACA,MAAIC,OAAO,GAAGF,OAAO,CAACE,OAAtB,CAF2C,CAG3C;;AACA,MAAI,CAACV,OAAO,CAACU,OAAD,CAAZ,EAAuB;AACrB,UAAM,IAAIT,cAAJ,CAAmB,8BAAnB,CAAN;AACD,GAN0C,CAO3C;;;AAEA,MAAIU,QAAQ,GAAGR,QAAQ,CAACS,cAAT,CACbb,YAAY,CAACS,OAAO,CAACK,GAAT,EAAc,mCAAd,CADC,CAAf;AAIA,MAAIC,WAAW,GAAGZ,SAAS,CAACa,cAAV,CAAyBP,OAAO,CAACM,WAAjC,CAAlB;AACA,OAAKE,QAAL,GAAgBN,OAAhB;AACA,OAAKO,YAAL,GAAoBH,WAApB;AAEA,OAAKI,uBAAL,GAA+BpB,MAAM,CAACqB,KAAP,CAC7BjB,SAAS,CAACkB,cAAV,CAAyBZ,OAAO,CAACM,WAAjC,CAD6B,CAA/B;AAIA,MAAIO,QAAQ,GAAGtB,YAAY,CAACS,OAAO,CAACa,QAAT,EAAmB,GAAnB,CAA3B;AACA,OAAKC,SAAL,GAAiBD,QAAjB;AAEA,MAAIE,QAAQ,GAAGxB,YAAY,CAACS,OAAO,CAACe,QAAT,EAAmB,QAAnB,CAA3B;AACA,OAAKC,SAAL,GAAiBD,QAAjB;AAEA,MAAIE,WAAW,GAAGzB,OAAO,CAACQ,OAAO,CAACiB,WAAT,CAAP,GAA+B,KAA/B,GAAuC,EAAzD;AAEA,MAAIC,WAAW,GAAGf,QAAQ,CAACgB,eAAT,EAAlB;;AACA,MAAI,CAACtB,kBAAkB,CAACuB,IAAnB,CAAwBF,WAAxB,CAAL,EAA2C;AACzCA,IAAAA,WAAW,IAAI,GAAf;AACD;;AACDA,EAAAA,WAAW,IACT,KAAKF,SAAL,GACA,GADA,GAEAd,OAFA,GAGA,SAHA,GAIA,KAAKY,SAJL,GAKA,cALA,GAMAG,WAPF;AAQAd,EAAAA,QAAQ,CAACE,GAAT,GAAea,WAAf;AAEAf,EAAAA,QAAQ,CAACkB,kBAAT,CAA4B;AAC1BC,IAAAA,YAAY,EAAEhB;AADY,GAA5B;AAIA,MAAIiB,MAAJ;;AACA,MAAI/B,OAAO,CAACQ,OAAO,CAACuB,MAAT,CAAX,EAA6B;AAC3BA,IAAAA,MAAM,GAAGvB,OAAO,CAACuB,MAAjB;;AACA,QAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9BA,MAAAA,MAAM,GAAG,IAAIjC,MAAJ,CAAWiC,MAAX,CAAT;AACD;AACF,GALD,MAKO;AACLA,IAAAA,MAAM,GAAGzB,aAAT;AACD;;AAED,OAAK0B,SAAL,GAAiBrB,QAAjB;AACA,OAAKsB,gBAAL,GAAwB,IAAI7B,0BAAJ,CAA+B;AACrDS,IAAAA,GAAG,EAAEF,QADgD;AAErDoB,IAAAA,MAAM,EAAEA,MAF6C;AAGrDG,IAAAA,SAAS,EAAE1B,OAAO,CAAC0B,SAHkC;AAIrDC,IAAAA,YAAY,EAAE3B,OAAO,CAAC2B,YAJ+B;AAKrDC,IAAAA,YAAY,EAAE5B,OAAO,CAAC4B,YAL+B;AAMrDC,IAAAA,SAAS,EAAE7B,OAAO,CAAC6B;AANkC,GAA/B,CAAxB;AAQD;;AAEDC,MAAM,CAACC,gBAAP,CAAwBhC,0BAA0B,CAACiC,SAAnD,EAA8D;AAC5D;;;;;;AAMA3B,EAAAA,GAAG,EAAE;AACH4B,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKR,gBAAL,CAAsBpB,GAA7B;AACD;AAHE,GAPuD;;AAa5D;;;;;;AAMA6B,EAAAA,KAAK,EAAE;AACLD,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKR,gBAAL,CAAsBS,KAA7B;AACD;AAHI,GAnBqD;;AAyB5D;;;;;;AAMAC,EAAAA,YAAY,EAAE;AACZF,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKR,gBAAL,CAAsBU,YAA7B;AACD;AAHW,GA/B8C;;AAqC5D;;;;;;;AAOAN,EAAAA,SAAS,EAAE;AACTI,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKR,gBAAL,CAAsBI,SAA7B;AACD;AAHQ,GA5CiD;;AAkD5D;;;;;;;AAOAO,EAAAA,SAAS,EAAE;AACTH,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKR,gBAAL,CAAsBW,SAA7B;AACD;AAHQ,GAzDiD;;AA+D5D;;;;;;;AAOAC,EAAAA,UAAU,EAAE;AACVJ,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKR,gBAAL,CAAsBY,UAA7B;AACD;AAHS,GAtEgD;;AA4E5D;;;;;;;AAOAT,EAAAA,YAAY,EAAE;AACZK,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKR,gBAAL,CAAsBG,YAA7B;AACD;AAHW,GAnF8C;;AAyF5D;;;;;;;;;;;AAWAD,EAAAA,YAAY,EAAE;AACZM,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKR,gBAAL,CAAsBE,YAA7B;AACD;AAHW,GApG8C;;AA0G5D;;;;;;;AAOAW,EAAAA,YAAY,EAAE;AACZL,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKR,gBAAL,CAAsBa,YAA7B;AACD;AAHW,GAjH8C;;AAuH5D;;;;;;;;;AASAC,EAAAA,iBAAiB,EAAE;AACjBN,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKR,gBAAL,CAAsBc,iBAA7B;AACD;AAHgB,GAhIyC;;AAsI5D;;;;;;;;AAQAC,EAAAA,UAAU,EAAE;AACVP,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKR,gBAAL,CAAsBe,UAA7B;AACD;AAHS,GA9IgD;;AAoJ5D;;;;;;;;AAQAjB,EAAAA,MAAM,EAAE;AACNU,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKR,gBAAL,CAAsBF,MAA7B;AACD;AAHK,GA5JoD;;AAkK5D;;;;;;AAMAkB,EAAAA,KAAK,EAAE;AACLR,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKR,gBAAL,CAAsBgB,KAA7B;AACD;AAHI,GAxKqD;;AA8K5D;;;;;;;;;;AAUAC,EAAAA,eAAe,EAAE;AACfT,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKR,gBAAL,CAAsBiB,eAA7B;AACD;AAHc;AAxL2C,CAA9D;AA+LA;;;;;;;;;;;AAUA3C,0BAA0B,CAACiC,SAA3B,CAAqCW,cAArC,GAAsD,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,KAAhB,EAAuB;AAC3E,MAAItD,OAAO,CAAC,KAAKkB,uBAAN,CAAX,EAA2C;AACzC,WAAO,CAAC,KAAKA,uBAAN,CAAP;AACD;AACF,CAJD;AAMA;;;;;;;;;;;;;;;;;AAeAX,0BAA0B,CAACiC,SAA3B,CAAqCe,YAArC,GAAoD,UAClDH,CADkD,EAElDC,CAFkD,EAGlDC,KAHkD,EAIlDE,OAJkD,EAKlD;AACA,SAAO,KAAKvB,gBAAL,CAAsBsB,YAAtB,CAAmCH,CAAnC,EAAsCC,CAAtC,EAAyCC,KAAzC,EAAgDE,OAAhD,CAAP;AACD,CAPD;AASA;;;;;;;;;;;;;;;;;;;;AAkBAjD,0BAA0B,CAACiC,SAA3B,CAAqCiB,YAArC,GAAoD,UAClDL,CADkD,EAElDC,CAFkD,EAGlDC,KAHkD,EAIlDI,SAJkD,EAKlDC,QALkD,EAMlD;AACA,SAAO,KAAK1B,gBAAL,CAAsBwB,YAAtB,CAAmCL,CAAnC,EAAsCC,CAAtC,EAAyCC,KAAzC,EAAgDI,SAAhD,EAA2DC,QAA3D,CAAP;AACD,CARD,C,CAUA;;;AACApD,0BAA0B,CAACqD,cAA3B,GAA4CtD,aAA5C;AACA,eAAeC,0BAAf","sourcesContent":["import Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport MapboxApi from \"../Core/MapboxApi.js\";\nimport Resource from \"../Core/Resource.js\";\nimport UrlTemplateImageryProvider from \"./UrlTemplateImageryProvider.js\";\n\nvar trailingSlashRegex = /\\/$/;\nvar defaultCredit = new Credit(\n  '&copy; <a href=\"https://www.mapbox.com/about/maps/\">Mapbox</a> &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> <strong><a href=\"https://www.mapbox.com/map-feedback/\">Improve this map</a></strong>'\n);\n\n/**\n * Provides tiled imagery hosted by Mapbox.\n *\n * @alias MapboxStyleImageryProvider\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Resource|String} [options.url='https://api.mapbox.com/styles/v1/'] The Mapbox server url.\n * @param {String} [options.username='mapbox'] The username of the map account.\n * @param {String} options.styleId The Mapbox Style ID.\n * @param {String} [options.accessToken] The public access token for the imagery.\n * @param {Number} [options.tilesize=512] The size of the image tiles.\n * @param {Boolean} [options.scaleFactor] Determines if tiles are rendered at a @2x scale factor.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n * @param {Number} [options.minimumLevel=0] The minimum level-of-detail supported by the imagery provider.  Take care when specifying\n *                 this that the number of tiles at the minimum level is small, such as four or less.  A larger number is likely\n *                 to result in rendering problems.\n * @param {Number} [options.maximumLevel] The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n * @param {Rectangle} [options.rectangle=Rectangle.MAX_VALUE] The rectangle, in radians, covered by the image.\n * @param {Credit|String} [options.credit] A credit for the data source, which is displayed on the canvas.\n *\n *\n * @example\n * // Mapbox style provider\n * var mapbox = new Cesium.MapboxStyleImageryProvider({\n *     styleId: 'streets-v11',\n *     accessToken: 'thisIsMyAccessToken'\n * });\n *\n * @see {@link https://docs.mapbox.com/api/maps/#styles}\n * @see {@link https://docs.mapbox.com/api/#access-tokens-and-token-scopes}\n */\nfunction MapboxStyleImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var styleId = options.styleId;\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(styleId)) {\n    throw new DeveloperError(\"options.styleId is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var resource = Resource.createIfNeeded(\n    defaultValue(options.url, \"https://api.mapbox.com/styles/v1/\")\n  );\n\n  var accessToken = MapboxApi.getAccessToken(options.accessToken);\n  this._styleId = styleId;\n  this._accessToken = accessToken;\n\n  this._accessTokenErrorCredit = Credit.clone(\n    MapboxApi.getErrorCredit(options.accessToken)\n  );\n\n  var tilesize = defaultValue(options.tilesize, 512);\n  this._tilesize = tilesize;\n\n  var username = defaultValue(options.username, \"mapbox\");\n  this._username = username;\n\n  var scaleFactor = defined(options.scaleFactor) ? \"@2x\" : \"\";\n\n  var templateUrl = resource.getUrlComponent();\n  if (!trailingSlashRegex.test(templateUrl)) {\n    templateUrl += \"/\";\n  }\n  templateUrl +=\n    this._username +\n    \"/\" +\n    styleId +\n    \"/tiles/\" +\n    this._tilesize +\n    \"/{z}/{x}/{y}\" +\n    scaleFactor;\n  resource.url = templateUrl;\n\n  resource.setQueryParameters({\n    access_token: accessToken,\n  });\n\n  var credit;\n  if (defined(options.credit)) {\n    credit = options.credit;\n    if (typeof credit === \"string\") {\n      credit = new Credit(credit);\n    }\n  } else {\n    credit = defaultCredit;\n  }\n\n  this._resource = resource;\n  this._imageryProvider = new UrlTemplateImageryProvider({\n    url: resource,\n    credit: credit,\n    ellipsoid: options.ellipsoid,\n    minimumLevel: options.minimumLevel,\n    maximumLevel: options.maximumLevel,\n    rectangle: options.rectangle,\n  });\n}\n\nObject.defineProperties(MapboxStyleImageryProvider.prototype, {\n  /**\n   * Gets the URL of the Mapbox server.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._imageryProvider.url;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._imageryProvider.ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._imageryProvider.readyPromise;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by the instance.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._imageryProvider.rectangle;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._imageryProvider.tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._imageryProvider.tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._imageryProvider.maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true. Generally,\n   * a minimum level should only be used when the rectangle of the imagery is small\n   * enough that the number of tiles at the minimum level is small.  An imagery\n   * provider with more than a few tiles at the minimum level will lead to\n   * rendering problems.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return this._imageryProvider.minimumLevel;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by the provider.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._imageryProvider.tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._imageryProvider.tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error..  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._imageryProvider.errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery. This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._imageryProvider.credit;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._imageryProvider.proxy;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return this._imageryProvider.hasAlphaChannel;\n    },\n  },\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\nMapboxStyleImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  if (defined(this._accessTokenErrorCredit)) {\n    return [this._accessTokenErrorCredit];\n  }\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<Image|Canvas>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\nMapboxStyleImageryProvider.prototype.requestImage = function (\n  x,\n  y,\n  level,\n  request\n) {\n  return this._imageryProvider.requestImage(x, y, level, request);\n};\n\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.  This function should not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n * This function is optional, so it may not exist on all ImageryProviders.\n *\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n *\n * @exception {DeveloperError} <code>pickFeatures</code> must not be called before the imagery provider is ready.\n */\nMapboxStyleImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude\n) {\n  return this._imageryProvider.pickFeatures(x, y, level, longitude, latitude);\n};\n\n// Exposed for tests\nMapboxStyleImageryProvider._defaultCredit = defaultCredit;\nexport default MapboxStyleImageryProvider;\n"]},"metadata":{},"sourceType":"module"}