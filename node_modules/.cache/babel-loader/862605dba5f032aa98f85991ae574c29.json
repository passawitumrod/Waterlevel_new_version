{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n/**\n * Describes a polyline volume defined as a line strip and corresponding two dimensional shape which is extruded along it.\n * The resulting volume conforms to the curvature of the globe.\n *\n * @alias PolylineVolumeGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the volume.\n * @param {Property} [options.positions] A Property specifying the array of {@link Cartesian3} positions which define the line strip.\n * @param {Property} [options.shape] A Property specifying the array of {@link Cartesian2} positions which define the shape to be extruded.\n * @param {Property} [options.cornerType=CornerType.ROUNDED] A {@link CornerType} Property specifying the style of the corners.\n * @param {Property} [options.granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the angular distance between each latitude and longitude point.\n * @param {Property} [options.fill=true] A boolean Property specifying whether the volume is filled with the provided material.\n * @param {MaterialProperty} [options.material=Color.WHITE] A Property specifying the material used to fill the volume.\n * @param {Property} [options.outline=false] A boolean Property specifying whether the volume is outlined.\n * @param {Property} [options.outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @param {Property} [options.outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @param {Property} [options.shadows=ShadowMode.DISABLED] An enum Property specifying whether the volume casts or receives shadows from light sources.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this volume will be displayed.\n *\n * @see Entity\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline%20Volume.html|Cesium Sandcastle Polyline Volume Demo}\n */\n\nfunction PolylineVolumeGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._positions = undefined;\n  this._positionsSubscription = undefined;\n  this._shape = undefined;\n  this._shapeSubscription = undefined;\n  this._cornerType = undefined;\n  this._cornerTypeSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubsription = undefined;\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(PolylineVolumeGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof PolylineVolumeGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the volume.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the array of {@link Cartesian3} positions which define the line strip.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   */\n  positions: createPropertyDescriptor(\"positions\"),\n\n  /**\n   * Gets or sets the Property specifying the array of {@link Cartesian2} positions which define the shape to be extruded.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   */\n  shape: createPropertyDescriptor(\"shape\"),\n\n  /**\n   * Gets or sets the {@link CornerType} Property specifying the style of the corners.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   * @default CornerType.ROUNDED\n   */\n  cornerType: createPropertyDescriptor(\"cornerType\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the angular distance between points on the volume.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   * @default {CesiumMath.RADIANS_PER_DEGREE}\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the volume is filled with the provided material.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the volume.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the volume is outlined.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the volume\n   * casts or receives shadows from light sources.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this volume will be displayed.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\"distanceDisplayCondition\")\n});\n/**\n * Duplicates this instance.\n *\n * @param {PolylineVolumeGraphics} [result] The object onto which to store the result.\n * @returns {PolylineVolumeGraphics} The modified result parameter or a new instance if one was not provided.\n */\n\nPolylineVolumeGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new PolylineVolumeGraphics(this);\n  }\n\n  result.show = this.show;\n  result.positions = this.positions;\n  result.shape = this.shape;\n  result.cornerType = this.cornerType;\n  result.granularity = this.granularity;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  return result;\n};\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {PolylineVolumeGraphics} source The object to be merged into this object.\n */\n\n\nPolylineVolumeGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  } //>>includeEnd('debug');\n\n\n  this.show = defaultValue(this.show, source.show);\n  this.positions = defaultValue(this.positions, source.positions);\n  this.shape = defaultValue(this.shape, source.shape);\n  this.cornerType = defaultValue(this.cornerType, source.cornerType);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(this.distanceDisplayCondition, source.distanceDisplayCondition);\n};\n\nexport default PolylineVolumeGraphics;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/PolylineVolumeGraphics.js"],"names":["defaultValue","defined","DeveloperError","Event","createMaterialPropertyDescriptor","createPropertyDescriptor","PolylineVolumeGraphics","options","_definitionChanged","_show","undefined","_showSubscription","_positions","_positionsSubscription","_shape","_shapeSubscription","_cornerType","_cornerTypeSubscription","_granularity","_granularitySubscription","_fill","_fillSubscription","_material","_materialSubscription","_outline","_outlineSubscription","_outlineColor","_outlineColorSubscription","_outlineWidth","_outlineWidthSubscription","_shadows","_shadowsSubscription","_distanceDisplayCondition","_distanceDisplayConditionSubsription","merge","EMPTY_OBJECT","Object","defineProperties","prototype","definitionChanged","get","show","positions","shape","cornerType","granularity","fill","material","outline","outlineColor","outlineWidth","shadows","distanceDisplayCondition","clone","result","source"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * Describes a polyline volume defined as a line strip and corresponding two dimensional shape which is extruded along it.\n * The resulting volume conforms to the curvature of the globe.\n *\n * @alias PolylineVolumeGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the volume.\n * @param {Property} [options.positions] A Property specifying the array of {@link Cartesian3} positions which define the line strip.\n * @param {Property} [options.shape] A Property specifying the array of {@link Cartesian2} positions which define the shape to be extruded.\n * @param {Property} [options.cornerType=CornerType.ROUNDED] A {@link CornerType} Property specifying the style of the corners.\n * @param {Property} [options.granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the angular distance between each latitude and longitude point.\n * @param {Property} [options.fill=true] A boolean Property specifying whether the volume is filled with the provided material.\n * @param {MaterialProperty} [options.material=Color.WHITE] A Property specifying the material used to fill the volume.\n * @param {Property} [options.outline=false] A boolean Property specifying whether the volume is outlined.\n * @param {Property} [options.outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @param {Property} [options.outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @param {Property} [options.shadows=ShadowMode.DISABLED] An enum Property specifying whether the volume casts or receives shadows from light sources.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this volume will be displayed.\n *\n * @see Entity\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline%20Volume.html|Cesium Sandcastle Polyline Volume Demo}\n */\nfunction PolylineVolumeGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._positions = undefined;\n  this._positionsSubscription = undefined;\n  this._shape = undefined;\n  this._shapeSubscription = undefined;\n  this._cornerType = undefined;\n  this._cornerTypeSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubsription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(PolylineVolumeGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof PolylineVolumeGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the volume.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the array of {@link Cartesian3} positions which define the line strip.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   */\n  positions: createPropertyDescriptor(\"positions\"),\n\n  /**\n   * Gets or sets the Property specifying the array of {@link Cartesian2} positions which define the shape to be extruded.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   */\n  shape: createPropertyDescriptor(\"shape\"),\n\n  /**\n   * Gets or sets the {@link CornerType} Property specifying the style of the corners.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   * @default CornerType.ROUNDED\n   */\n  cornerType: createPropertyDescriptor(\"cornerType\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the angular distance between points on the volume.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   * @default {CesiumMath.RADIANS_PER_DEGREE}\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the volume is filled with the provided material.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the volume.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the volume is outlined.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the volume\n   * casts or receives shadows from light sources.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this volume will be displayed.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {PolylineVolumeGraphics} [result] The object onto which to store the result.\n * @returns {PolylineVolumeGraphics} The modified result parameter or a new instance if one was not provided.\n */\nPolylineVolumeGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new PolylineVolumeGraphics(this);\n  }\n  result.show = this.show;\n  result.positions = this.positions;\n  result.shape = this.shape;\n  result.cornerType = this.cornerType;\n  result.granularity = this.granularity;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {PolylineVolumeGraphics} source The object to be merged into this object.\n */\nPolylineVolumeGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.positions = defaultValue(this.positions, source.positions);\n  this.shape = defaultValue(this.shape, source.shape);\n  this.cornerType = defaultValue(this.cornerType, source.cornerType);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n};\nexport default PolylineVolumeGraphics;\n"]},"metadata":{},"sourceType":"module"}