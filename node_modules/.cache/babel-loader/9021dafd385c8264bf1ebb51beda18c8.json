{"ast":null,"code":"/**\n * @license\n *\n * Grauw URI utilities\n *\n * See: http://hg.grauw.nl/grauw-lib/file/tip/src/uri.js\n *\n * @author Laurens Holst (http://www.grauw.nl/)\n *\n *   Copyright 2012 Laurens Holst\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n *\n */\n\n/**\n * Constructs a URI object.\n * @constructor\n * @class Implementation of URI parsing and base URI resolving algorithm in RFC 3986.\n * @param {string|URI} uri A string or URI object to create the object from.\n */\nfunction URI(uri) {\n  if (uri instanceof URI) {\n    // copy constructor\n    this.scheme = uri.scheme;\n    this.authority = uri.authority;\n    this.path = uri.path;\n    this.query = uri.query;\n    this.fragment = uri.fragment;\n  } else if (uri) {\n    // uri is URI string or cast to string\n    var c = parseRegex.exec(uri);\n    this.scheme = c[1];\n    this.authority = c[2];\n    this.path = c[3];\n    this.query = c[4];\n    this.fragment = c[5];\n  }\n} // Initial values on the prototype\n\n\nURI.prototype.scheme = null;\nURI.prototype.authority = null;\nURI.prototype.path = '';\nURI.prototype.query = null;\nURI.prototype.fragment = null; // Regular expression from RFC 3986 appendix B\n\nvar parseRegex = new RegExp('^(?:([^:/?#]+):)?(?://([^/?#]*))?([^?#]*)(?:\\\\?([^#]*))?(?:#(.*))?$');\n/**\n * Returns the scheme part of the URI.\n * In \"http://example.com:80/a/b?x#y\" this is \"http\".\n */\n\nURI.prototype.getScheme = function () {\n  return this.scheme;\n};\n/**\n * Returns the authority part of the URI.\n * In \"http://example.com:80/a/b?x#y\" this is \"example.com:80\".\n */\n\n\nURI.prototype.getAuthority = function () {\n  return this.authority;\n};\n/**\n * Returns the path part of the URI.\n * In \"http://example.com:80/a/b?x#y\" this is \"/a/b\".\n * In \"mailto:mike@example.com\" this is \"mike@example.com\".\n */\n\n\nURI.prototype.getPath = function () {\n  return this.path;\n};\n/**\n * Returns the query part of the URI.\n * In \"http://example.com:80/a/b?x#y\" this is \"x\".\n */\n\n\nURI.prototype.getQuery = function () {\n  return this.query;\n};\n/**\n * Returns the fragment part of the URI.\n * In \"http://example.com:80/a/b?x#y\" this is \"y\".\n */\n\n\nURI.prototype.getFragment = function () {\n  return this.fragment;\n};\n/**\n * Tests whether the URI is an absolute URI.\n * See RFC 3986 section 4.3.\n */\n\n\nURI.prototype.isAbsolute = function () {\n  return !!this.scheme && !this.fragment;\n}; ///**\n//* Extensive validation of the URI against the ABNF in RFC 3986\n//*/\n//URI.prototype.validate\n\n/**\n * Tests whether the URI is a same-document reference.\n * See RFC 3986 section 4.4.\n *\n * To perform more thorough comparison, you can normalise the URI objects.\n */\n\n\nURI.prototype.isSameDocumentAs = function (uri) {\n  return uri.scheme == this.scheme && uri.authority == this.authority && uri.path == this.path && uri.query == this.query;\n};\n/**\n * Simple String Comparison of two URIs.\n * See RFC 3986 section 6.2.1.\n *\n * To perform more thorough comparison, you can normalise the URI objects.\n */\n\n\nURI.prototype.equals = function (uri) {\n  return this.isSameDocumentAs(uri) && uri.fragment == this.fragment;\n};\n/**\n * Normalizes the URI using syntax-based normalization.\n * This includes case normalization, percent-encoding normalization and path segment normalization.\n * XXX: Percent-encoding normalization does not escape characters that need to be escaped.\n *      (Although that would not be a valid URI in the first place. See validate().)\n * See RFC 3986 section 6.2.2.\n */\n\n\nURI.prototype.normalize = function () {\n  this.removeDotSegments();\n  if (this.scheme) this.scheme = this.scheme.toLowerCase();\n  if (this.authority) this.authority = this.authority.replace(authorityRegex, replaceAuthority).replace(caseRegex, replaceCase);\n  if (this.path) this.path = this.path.replace(caseRegex, replaceCase);\n  if (this.query) this.query = this.query.replace(caseRegex, replaceCase);\n  if (this.fragment) this.fragment = this.fragment.replace(caseRegex, replaceCase);\n};\n\nvar caseRegex = /%[0-9a-z]{2}/gi;\nvar percentRegex = /[a-zA-Z0-9\\-\\._~]/;\nvar authorityRegex = /(.*@)?([^@:]*)(:.*)?/;\n\nfunction replaceCase(str) {\n  var dec = unescape(str);\n  return percentRegex.test(dec) ? dec : str.toUpperCase();\n}\n\nfunction replaceAuthority(str, p1, p2, p3) {\n  return (p1 || '') + p2.toLowerCase() + (p3 || '');\n}\n/**\n * Resolve a relative URI (this) against a base URI.\n * The base URI must be an absolute URI.\n * See RFC 3986 section 5.2\n */\n\n\nURI.prototype.resolve = function (baseURI) {\n  var uri = new URI();\n\n  if (this.scheme) {\n    uri.scheme = this.scheme;\n    uri.authority = this.authority;\n    uri.path = this.path;\n    uri.query = this.query;\n  } else {\n    uri.scheme = baseURI.scheme;\n\n    if (this.authority) {\n      uri.authority = this.authority;\n      uri.path = this.path;\n      uri.query = this.query;\n    } else {\n      uri.authority = baseURI.authority;\n\n      if (this.path == '') {\n        uri.path = baseURI.path;\n        uri.query = this.query || baseURI.query;\n      } else {\n        if (this.path.charAt(0) == '/') {\n          uri.path = this.path;\n          uri.removeDotSegments();\n        } else {\n          if (baseURI.authority && baseURI.path == '') {\n            uri.path = '/' + this.path;\n          } else {\n            uri.path = baseURI.path.substring(0, baseURI.path.lastIndexOf('/') + 1) + this.path;\n          }\n\n          uri.removeDotSegments();\n        }\n\n        uri.query = this.query;\n      }\n    }\n  }\n\n  uri.fragment = this.fragment;\n  return uri;\n};\n/**\n * Remove dot segments from path.\n * See RFC 3986 section 5.2.4\n * @private\n */\n\n\nURI.prototype.removeDotSegments = function () {\n  var input = this.path.split('/'),\n      output = [],\n      segment,\n      absPath = input[0] == '';\n  if (absPath) input.shift();\n  var sFirst = input[0] == '' ? input.shift() : null;\n\n  while (input.length) {\n    segment = input.shift();\n\n    if (segment == '..') {\n      output.pop();\n    } else if (segment != '.') {\n      output.push(segment);\n    }\n  }\n\n  if (segment == '.' || segment == '..') output.push('');\n  if (absPath) output.unshift('');\n  this.path = output.join('/');\n}; // We don't like this function because it builds up a cache that is never cleared.\n//\t/**\n//\t * Resolves a relative URI against an absolute base URI.\n//\t * Convenience method.\n//\t * @param {String} uri the relative URI to resolve\n//\t * @param {String} baseURI the base URI (must be absolute) to resolve against\n//\t */\n//\tURI.resolve = function(sURI, sBaseURI) {\n//\t\tvar uri = cache[sURI] || (cache[sURI] = new URI(sURI));\n//\t\tvar baseURI = cache[sBaseURI] || (cache[sBaseURI] = new URI(sBaseURI));\n//\t\treturn uri.resolve(baseURI).toString();\n//\t};\n//\tvar cache = {};\n\n/**\n * Serialises the URI to a string.\n */\n\n\nURI.prototype.toString = function () {\n  var result = '';\n  if (this.scheme) result += this.scheme + ':';\n  if (this.authority) result += '//' + this.authority;\n  result += this.path;\n  if (this.query) result += '?' + this.query;\n  if (this.fragment) result += '#' + this.fragment;\n  return result;\n};\n\nexport default URI;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/ThirdParty/Uri.js"],"names":["URI","uri","scheme","authority","path","query","fragment","c","parseRegex","exec","prototype","RegExp","getScheme","getAuthority","getPath","getQuery","getFragment","isAbsolute","isSameDocumentAs","equals","normalize","removeDotSegments","toLowerCase","replace","authorityRegex","replaceAuthority","caseRegex","replaceCase","percentRegex","str","dec","unescape","test","toUpperCase","p1","p2","p3","resolve","baseURI","charAt","substring","lastIndexOf","input","split","output","segment","absPath","shift","sFirst","length","pop","push","unshift","join","toString","result"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBC;;;;;;AAMA,SAASA,GAAT,CAAaC,GAAb,EAAkB;AACjB,MAAIA,GAAG,YAAYD,GAAnB,EAAwB;AAAG;AAC1B,SAAKE,MAAL,GAAcD,GAAG,CAACC,MAAlB;AACA,SAAKC,SAAL,GAAiBF,GAAG,CAACE,SAArB;AACA,SAAKC,IAAL,GAAYH,GAAG,CAACG,IAAhB;AACA,SAAKC,KAAL,GAAaJ,GAAG,CAACI,KAAjB;AACA,SAAKC,QAAL,GAAgBL,GAAG,CAACK,QAApB;AACA,GAND,MAMO,IAAIL,GAAJ,EAAS;AAAG;AAClB,QAAIM,CAAC,GAAGC,UAAU,CAACC,IAAX,CAAgBR,GAAhB,CAAR;AACA,SAAKC,MAAL,GAAcK,CAAC,CAAC,CAAD,CAAf;AACA,SAAKJ,SAAL,GAAiBI,CAAC,CAAC,CAAD,CAAlB;AACA,SAAKH,IAAL,GAAYG,CAAC,CAAC,CAAD,CAAb;AACA,SAAKF,KAAL,GAAaE,CAAC,CAAC,CAAD,CAAd;AACA,SAAKD,QAAL,GAAgBC,CAAC,CAAC,CAAD,CAAjB;AACA;AACD,C,CACD;;;AACAP,GAAG,CAACU,SAAJ,CAAcR,MAAd,GAA0B,IAA1B;AACAF,GAAG,CAACU,SAAJ,CAAcP,SAAd,GAA0B,IAA1B;AACAH,GAAG,CAACU,SAAJ,CAAcN,IAAd,GAA0B,EAA1B;AACAJ,GAAG,CAACU,SAAJ,CAAcL,KAAd,GAA0B,IAA1B;AACAL,GAAG,CAACU,SAAJ,CAAcJ,QAAd,GAA0B,IAA1B,C,CAEA;;AACA,IAAIE,UAAU,GAAG,IAAIG,MAAJ,CAAW,qEAAX,CAAjB;AAEA;;;;;AAIAX,GAAG,CAACU,SAAJ,CAAcE,SAAd,GAA0B,YAAW;AACpC,SAAO,KAAKV,MAAZ;AACA,CAFD;AAIA;;;;;;AAIAF,GAAG,CAACU,SAAJ,CAAcG,YAAd,GAA6B,YAAW;AACvC,SAAO,KAAKV,SAAZ;AACA,CAFD;AAIA;;;;;;;AAKAH,GAAG,CAACU,SAAJ,CAAcI,OAAd,GAAwB,YAAW;AAClC,SAAO,KAAKV,IAAZ;AACA,CAFD;AAIA;;;;;;AAIAJ,GAAG,CAACU,SAAJ,CAAcK,QAAd,GAAyB,YAAW;AACnC,SAAO,KAAKV,KAAZ;AACA,CAFD;AAIA;;;;;;AAIAL,GAAG,CAACU,SAAJ,CAAcM,WAAd,GAA4B,YAAW;AACtC,SAAO,KAAKV,QAAZ;AACA,CAFD;AAIA;;;;;;AAIAN,GAAG,CAACU,SAAJ,CAAcO,UAAd,GAA2B,YAAW;AACrC,SAAO,CAAC,CAAC,KAAKf,MAAP,IAAiB,CAAC,KAAKI,QAA9B;AACA,CAFD,C,CAIA;AACA;AACA;AACA;;AAEA;;;;;;;;AAMAN,GAAG,CAACU,SAAJ,CAAcQ,gBAAd,GAAiC,UAASjB,GAAT,EAAc;AAC9C,SAAOA,GAAG,CAACC,MAAJ,IAAc,KAAKA,MAAnB,IACHD,GAAG,CAACE,SAAJ,IAAiB,KAAKA,SADnB,IAEEF,GAAG,CAACG,IAAJ,IAAY,KAAKA,IAFnB,IAGCH,GAAG,CAACI,KAAJ,IAAa,KAAKA,KAH1B;AAIA,CALD;AAOA;;;;;;;;AAMAL,GAAG,CAACU,SAAJ,CAAcS,MAAd,GAAuB,UAASlB,GAAT,EAAc;AACpC,SAAO,KAAKiB,gBAAL,CAAsBjB,GAAtB,KAA8BA,GAAG,CAACK,QAAJ,IAAgB,KAAKA,QAA1D;AACA,CAFD;AAIA;;;;;;;;;AAOAN,GAAG,CAACU,SAAJ,CAAcU,SAAd,GAA0B,YAAW;AACpC,OAAKC,iBAAL;AACA,MAAI,KAAKnB,MAAT,EACC,KAAKA,MAAL,GAAc,KAAKA,MAAL,CAAYoB,WAAZ,EAAd;AACD,MAAI,KAAKnB,SAAT,EACC,KAAKA,SAAL,GAAiB,KAAKA,SAAL,CAAeoB,OAAf,CAAuBC,cAAvB,EAAuCC,gBAAvC,EACXF,OADW,CACHG,SADG,EACQC,WADR,CAAjB;AAED,MAAI,KAAKvB,IAAT,EACC,KAAKA,IAAL,GAAY,KAAKA,IAAL,CAAUmB,OAAV,CAAkBG,SAAlB,EAA6BC,WAA7B,CAAZ;AACD,MAAI,KAAKtB,KAAT,EACC,KAAKA,KAAL,GAAa,KAAKA,KAAL,CAAWkB,OAAX,CAAmBG,SAAnB,EAA8BC,WAA9B,CAAb;AACD,MAAI,KAAKrB,QAAT,EACC,KAAKA,QAAL,GAAgB,KAAKA,QAAL,CAAciB,OAAd,CAAsBG,SAAtB,EAAiCC,WAAjC,CAAhB;AACD,CAbD;;AAeA,IAAID,SAAS,GAAG,gBAAhB;AACA,IAAIE,YAAY,GAAG,mBAAnB;AACA,IAAIJ,cAAc,GAAG,sBAArB;;AAEA,SAASG,WAAT,CAAqBE,GAArB,EAA0B;AACzB,MAAIC,GAAG,GAAGC,QAAQ,CAACF,GAAD,CAAlB;AACA,SAAOD,YAAY,CAACI,IAAb,CAAkBF,GAAlB,IAAyBA,GAAzB,GAA+BD,GAAG,CAACI,WAAJ,EAAtC;AACA;;AAED,SAASR,gBAAT,CAA0BI,GAA1B,EAA+BK,EAA/B,EAAmCC,EAAnC,EAAuCC,EAAvC,EAA2C;AAC1C,SAAO,CAACF,EAAE,IAAI,EAAP,IAAaC,EAAE,CAACb,WAAH,EAAb,IAAiCc,EAAE,IAAI,EAAvC,CAAP;AACA;AAED;;;;;;;AAKApC,GAAG,CAACU,SAAJ,CAAc2B,OAAd,GAAwB,UAASC,OAAT,EAAkB;AACzC,MAAIrC,GAAG,GAAG,IAAID,GAAJ,EAAV;;AACA,MAAI,KAAKE,MAAT,EAAiB;AAChBD,IAAAA,GAAG,CAACC,MAAJ,GAAa,KAAKA,MAAlB;AACAD,IAAAA,GAAG,CAACE,SAAJ,GAAgB,KAAKA,SAArB;AACAF,IAAAA,GAAG,CAACG,IAAJ,GAAW,KAAKA,IAAhB;AACAH,IAAAA,GAAG,CAACI,KAAJ,GAAY,KAAKA,KAAjB;AACA,GALD,MAKO;AACNJ,IAAAA,GAAG,CAACC,MAAJ,GAAaoC,OAAO,CAACpC,MAArB;;AACA,QAAI,KAAKC,SAAT,EAAoB;AACnBF,MAAAA,GAAG,CAACE,SAAJ,GAAgB,KAAKA,SAArB;AACAF,MAAAA,GAAG,CAACG,IAAJ,GAAW,KAAKA,IAAhB;AACAH,MAAAA,GAAG,CAACI,KAAJ,GAAY,KAAKA,KAAjB;AACA,KAJD,MAIO;AACNJ,MAAAA,GAAG,CAACE,SAAJ,GAAgBmC,OAAO,CAACnC,SAAxB;;AACA,UAAI,KAAKC,IAAL,IAAa,EAAjB,EAAqB;AACpBH,QAAAA,GAAG,CAACG,IAAJ,GAAWkC,OAAO,CAAClC,IAAnB;AACAH,QAAAA,GAAG,CAACI,KAAJ,GAAY,KAAKA,KAAL,IAAciC,OAAO,CAACjC,KAAlC;AACA,OAHD,MAGO;AACN,YAAI,KAAKD,IAAL,CAAUmC,MAAV,CAAiB,CAAjB,KAAuB,GAA3B,EAAgC;AAC/BtC,UAAAA,GAAG,CAACG,IAAJ,GAAW,KAAKA,IAAhB;AACAH,UAAAA,GAAG,CAACoB,iBAAJ;AACA,SAHD,MAGO;AACN,cAAIiB,OAAO,CAACnC,SAAR,IAAqBmC,OAAO,CAAClC,IAAR,IAAgB,EAAzC,EAA6C;AAC5CH,YAAAA,GAAG,CAACG,IAAJ,GAAW,MAAM,KAAKA,IAAtB;AACA,WAFD,MAEO;AACNH,YAAAA,GAAG,CAACG,IAAJ,GAAWkC,OAAO,CAAClC,IAAR,CAAaoC,SAAb,CAAuB,CAAvB,EAA0BF,OAAO,CAAClC,IAAR,CAAaqC,WAAb,CAAyB,GAAzB,IAAgC,CAA1D,IAA+D,KAAKrC,IAA/E;AACA;;AACDH,UAAAA,GAAG,CAACoB,iBAAJ;AACA;;AACDpB,QAAAA,GAAG,CAACI,KAAJ,GAAY,KAAKA,KAAjB;AACA;AACD;AACD;;AACDJ,EAAAA,GAAG,CAACK,QAAJ,GAAe,KAAKA,QAApB;AACA,SAAOL,GAAP;AACA,CApCD;AAsCA;;;;;;;AAKAD,GAAG,CAACU,SAAJ,CAAcW,iBAAd,GAAkC,YAAW;AAC5C,MAAIqB,KAAK,GAAG,KAAKtC,IAAL,CAAUuC,KAAV,CAAgB,GAAhB,CAAZ;AAAA,MACCC,MAAM,GAAG,EADV;AAAA,MAECC,OAFD;AAAA,MAGCC,OAAO,GAAGJ,KAAK,CAAC,CAAD,CAAL,IAAY,EAHvB;AAIA,MAAII,OAAJ,EACCJ,KAAK,CAACK,KAAN;AACD,MAAIC,MAAM,GAAGN,KAAK,CAAC,CAAD,CAAL,IAAY,EAAZ,GAAiBA,KAAK,CAACK,KAAN,EAAjB,GAAiC,IAA9C;;AACA,SAAOL,KAAK,CAACO,MAAb,EAAqB;AACpBJ,IAAAA,OAAO,GAAGH,KAAK,CAACK,KAAN,EAAV;;AACA,QAAIF,OAAO,IAAI,IAAf,EAAqB;AACpBD,MAAAA,MAAM,CAACM,GAAP;AACA,KAFD,MAEO,IAAIL,OAAO,IAAI,GAAf,EAAoB;AAC1BD,MAAAA,MAAM,CAACO,IAAP,CAAYN,OAAZ;AACA;AACD;;AACD,MAAIA,OAAO,IAAI,GAAX,IAAkBA,OAAO,IAAI,IAAjC,EACCD,MAAM,CAACO,IAAP,CAAY,EAAZ;AACD,MAAIL,OAAJ,EACCF,MAAM,CAACQ,OAAP,CAAe,EAAf;AACD,OAAKhD,IAAL,GAAYwC,MAAM,CAACS,IAAP,CAAY,GAAZ,CAAZ;AACA,CArBD,C,CAuBA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEC;;;;;AAGArD,GAAG,CAACU,SAAJ,CAAc4C,QAAd,GAAyB,YAAW;AACnC,MAAIC,MAAM,GAAG,EAAb;AACA,MAAI,KAAKrD,MAAT,EACCqD,MAAM,IAAI,KAAKrD,MAAL,GAAc,GAAxB;AACD,MAAI,KAAKC,SAAT,EACCoD,MAAM,IAAI,OAAO,KAAKpD,SAAtB;AACDoD,EAAAA,MAAM,IAAI,KAAKnD,IAAf;AACA,MAAI,KAAKC,KAAT,EACCkD,MAAM,IAAI,MAAM,KAAKlD,KAArB;AACD,MAAI,KAAKC,QAAT,EACCiD,MAAM,IAAI,MAAM,KAAKjD,QAArB;AACD,SAAOiD,MAAP;AACA,CAZD;;AAcD,eAAevD,GAAf","sourcesContent":["/**\n * @license\n *\n * Grauw URI utilities\n *\n * See: http://hg.grauw.nl/grauw-lib/file/tip/src/uri.js\n *\n * @author Laurens Holst (http://www.grauw.nl/)\n *\n *   Copyright 2012 Laurens Holst\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n *\n */\n\n\t/**\n\t * Constructs a URI object.\n\t * @constructor\n\t * @class Implementation of URI parsing and base URI resolving algorithm in RFC 3986.\n\t * @param {string|URI} uri A string or URI object to create the object from.\n\t */\n\tfunction URI(uri) {\n\t\tif (uri instanceof URI) {  // copy constructor\n\t\t\tthis.scheme = uri.scheme;\n\t\t\tthis.authority = uri.authority;\n\t\t\tthis.path = uri.path;\n\t\t\tthis.query = uri.query;\n\t\t\tthis.fragment = uri.fragment;\n\t\t} else if (uri) {  // uri is URI string or cast to string\n\t\t\tvar c = parseRegex.exec(uri);\n\t\t\tthis.scheme = c[1];\n\t\t\tthis.authority = c[2];\n\t\t\tthis.path = c[3];\n\t\t\tthis.query = c[4];\n\t\t\tthis.fragment = c[5];\n\t\t}\n\t}\n\t// Initial values on the prototype\n\tURI.prototype.scheme    = null;\n\tURI.prototype.authority = null;\n\tURI.prototype.path      = '';\n\tURI.prototype.query     = null;\n\tURI.prototype.fragment  = null;\n\n\t// Regular expression from RFC 3986 appendix B\n\tvar parseRegex = new RegExp('^(?:([^:/?#]+):)?(?://([^/?#]*))?([^?#]*)(?:\\\\?([^#]*))?(?:#(.*))?$');\n\n\t/**\n\t * Returns the scheme part of the URI.\n\t * In \"http://example.com:80/a/b?x#y\" this is \"http\".\n\t */\n\tURI.prototype.getScheme = function() {\n\t\treturn this.scheme;\n\t};\n\n\t/**\n\t * Returns the authority part of the URI.\n\t * In \"http://example.com:80/a/b?x#y\" this is \"example.com:80\".\n\t */\n\tURI.prototype.getAuthority = function() {\n\t\treturn this.authority;\n\t};\n\n\t/**\n\t * Returns the path part of the URI.\n\t * In \"http://example.com:80/a/b?x#y\" this is \"/a/b\".\n\t * In \"mailto:mike@example.com\" this is \"mike@example.com\".\n\t */\n\tURI.prototype.getPath = function() {\n\t\treturn this.path;\n\t};\n\n\t/**\n\t * Returns the query part of the URI.\n\t * In \"http://example.com:80/a/b?x#y\" this is \"x\".\n\t */\n\tURI.prototype.getQuery = function() {\n\t\treturn this.query;\n\t};\n\n\t/**\n\t * Returns the fragment part of the URI.\n\t * In \"http://example.com:80/a/b?x#y\" this is \"y\".\n\t */\n\tURI.prototype.getFragment = function() {\n\t\treturn this.fragment;\n\t};\n\n\t/**\n\t * Tests whether the URI is an absolute URI.\n\t * See RFC 3986 section 4.3.\n\t */\n\tURI.prototype.isAbsolute = function() {\n\t\treturn !!this.scheme && !this.fragment;\n\t};\n\n\t///**\n\t//* Extensive validation of the URI against the ABNF in RFC 3986\n\t//*/\n\t//URI.prototype.validate\n\n\t/**\n\t * Tests whether the URI is a same-document reference.\n\t * See RFC 3986 section 4.4.\n\t *\n\t * To perform more thorough comparison, you can normalise the URI objects.\n\t */\n\tURI.prototype.isSameDocumentAs = function(uri) {\n\t\treturn uri.scheme == this.scheme &&\n\t\t    uri.authority == this.authority &&\n\t\t         uri.path == this.path &&\n\t\t        uri.query == this.query;\n\t};\n\n\t/**\n\t * Simple String Comparison of two URIs.\n\t * See RFC 3986 section 6.2.1.\n\t *\n\t * To perform more thorough comparison, you can normalise the URI objects.\n\t */\n\tURI.prototype.equals = function(uri) {\n\t\treturn this.isSameDocumentAs(uri) && uri.fragment == this.fragment;\n\t};\n\n\t/**\n\t * Normalizes the URI using syntax-based normalization.\n\t * This includes case normalization, percent-encoding normalization and path segment normalization.\n\t * XXX: Percent-encoding normalization does not escape characters that need to be escaped.\n\t *      (Although that would not be a valid URI in the first place. See validate().)\n\t * See RFC 3986 section 6.2.2.\n\t */\n\tURI.prototype.normalize = function() {\n\t\tthis.removeDotSegments();\n\t\tif (this.scheme)\n\t\t\tthis.scheme = this.scheme.toLowerCase();\n\t\tif (this.authority)\n\t\t\tthis.authority = this.authority.replace(authorityRegex, replaceAuthority).\n\t\t\t\t\t\t\t\t\treplace(caseRegex, replaceCase);\n\t\tif (this.path)\n\t\t\tthis.path = this.path.replace(caseRegex, replaceCase);\n\t\tif (this.query)\n\t\t\tthis.query = this.query.replace(caseRegex, replaceCase);\n\t\tif (this.fragment)\n\t\t\tthis.fragment = this.fragment.replace(caseRegex, replaceCase);\n\t};\n\n\tvar caseRegex = /%[0-9a-z]{2}/gi;\n\tvar percentRegex = /[a-zA-Z0-9\\-\\._~]/;\n\tvar authorityRegex = /(.*@)?([^@:]*)(:.*)?/;\n\n\tfunction replaceCase(str) {\n\t\tvar dec = unescape(str);\n\t\treturn percentRegex.test(dec) ? dec : str.toUpperCase();\n\t}\n\n\tfunction replaceAuthority(str, p1, p2, p3) {\n\t\treturn (p1 || '') + p2.toLowerCase() + (p3 || '');\n\t}\n\n\t/**\n\t * Resolve a relative URI (this) against a base URI.\n\t * The base URI must be an absolute URI.\n\t * See RFC 3986 section 5.2\n\t */\n\tURI.prototype.resolve = function(baseURI) {\n\t\tvar uri = new URI();\n\t\tif (this.scheme) {\n\t\t\turi.scheme = this.scheme;\n\t\t\turi.authority = this.authority;\n\t\t\turi.path = this.path;\n\t\t\turi.query = this.query;\n\t\t} else {\n\t\t\turi.scheme = baseURI.scheme;\n\t\t\tif (this.authority) {\n\t\t\t\turi.authority = this.authority;\n\t\t\t\turi.path = this.path;\n\t\t\t\turi.query = this.query;\n\t\t\t} else {\n\t\t\t\turi.authority = baseURI.authority;\n\t\t\t\tif (this.path == '') {\n\t\t\t\t\turi.path = baseURI.path;\n\t\t\t\t\turi.query = this.query || baseURI.query;\n\t\t\t\t} else {\n\t\t\t\t\tif (this.path.charAt(0) == '/') {\n\t\t\t\t\t\turi.path = this.path;\n\t\t\t\t\t\turi.removeDotSegments();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (baseURI.authority && baseURI.path == '') {\n\t\t\t\t\t\t\turi.path = '/' + this.path;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\turi.path = baseURI.path.substring(0, baseURI.path.lastIndexOf('/') + 1) + this.path;\n\t\t\t\t\t\t}\n\t\t\t\t\t\turi.removeDotSegments();\n\t\t\t\t\t}\n\t\t\t\t\turi.query = this.query;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\turi.fragment = this.fragment;\n\t\treturn uri;\n\t};\n\n\t/**\n\t * Remove dot segments from path.\n\t * See RFC 3986 section 5.2.4\n\t * @private\n\t */\n\tURI.prototype.removeDotSegments = function() {\n\t\tvar input = this.path.split('/'),\n\t\t\toutput = [],\n\t\t\tsegment,\n\t\t\tabsPath = input[0] == '';\n\t\tif (absPath)\n\t\t\tinput.shift();\n\t\tvar sFirst = input[0] == '' ? input.shift() : null;\n\t\twhile (input.length) {\n\t\t\tsegment = input.shift();\n\t\t\tif (segment == '..') {\n\t\t\t\toutput.pop();\n\t\t\t} else if (segment != '.') {\n\t\t\t\toutput.push(segment);\n\t\t\t}\n\t\t}\n\t\tif (segment == '.' || segment == '..')\n\t\t\toutput.push('');\n\t\tif (absPath)\n\t\t\toutput.unshift('');\n\t\tthis.path = output.join('/');\n\t};\n\n\t// We don't like this function because it builds up a cache that is never cleared.\n//\t/**\n//\t * Resolves a relative URI against an absolute base URI.\n//\t * Convenience method.\n//\t * @param {String} uri the relative URI to resolve\n//\t * @param {String} baseURI the base URI (must be absolute) to resolve against\n//\t */\n//\tURI.resolve = function(sURI, sBaseURI) {\n//\t\tvar uri = cache[sURI] || (cache[sURI] = new URI(sURI));\n//\t\tvar baseURI = cache[sBaseURI] || (cache[sBaseURI] = new URI(sBaseURI));\n//\t\treturn uri.resolve(baseURI).toString();\n//\t};\n\n//\tvar cache = {};\n\n\t/**\n\t * Serialises the URI to a string.\n\t */\n\tURI.prototype.toString = function() {\n\t\tvar result = '';\n\t\tif (this.scheme)\n\t\t\tresult += this.scheme + ':';\n\t\tif (this.authority)\n\t\t\tresult += '//' + this.authority;\n\t\tresult += this.path;\n\t\tif (this.query)\n\t\t\tresult += '?' + this.query;\n\t\tif (this.fragment)\n\t\t\tresult += '#' + this.fragment;\n\t\treturn result;\n\t};\n\nexport default URI;\n"]},"metadata":{},"sourceType":"module"}