{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport knockout from \"../ThirdParty/knockout.js\";\n/**\n * A view model which exposes the properties of a toggle button.\n * @alias ToggleButtonViewModel\n * @constructor\n *\n * @param {Command} command The command which will be executed when the button is toggled.\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.toggled=false] A boolean indicating whether the button should be initially toggled.\n * @param {String} [options.tooltip=''] A string containing the button's tooltip.\n */\n\nfunction ToggleButtonViewModel(command, options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(command)) {\n    throw new DeveloperError(\"command is required.\");\n  } //>>includeEnd('debug');\n\n\n  this._command = command;\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  /**\n   * Gets or sets whether the button is currently toggled.  This property is observable.\n   * @type {Boolean}\n   * @default false\n   */\n\n  this.toggled = defaultValue(options.toggled, false);\n  /**\n   * Gets or sets the button's tooltip.  This property is observable.\n   * @type {String}\n   * @default ''\n   */\n\n  this.tooltip = defaultValue(options.tooltip, \"\");\n  knockout.track(this, [\"toggled\", \"tooltip\"]);\n}\n\nObject.defineProperties(ToggleButtonViewModel.prototype, {\n  /**\n   * Gets the command which will be executed when the button is toggled.\n   * @memberof ToggleButtonViewModel.prototype\n   * @type {Command}\n   */\n  command: {\n    get: function () {\n      return this._command;\n    }\n  }\n});\nexport default ToggleButtonViewModel;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Widgets/ToggleButtonViewModel.js"],"names":["defaultValue","defined","DeveloperError","knockout","ToggleButtonViewModel","command","options","_command","EMPTY_OBJECT","toggled","tooltip","track","Object","defineProperties","prototype","get"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,yBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,QAAP,MAAqB,2BAArB;AAEA;;;;;;;;;;;AAUA,SAASC,qBAAT,CAA+BC,OAA/B,EAAwCC,OAAxC,EAAiD;AAC/C;AACA,MAAI,CAACL,OAAO,CAACI,OAAD,CAAZ,EAAuB;AACrB,UAAM,IAAIH,cAAJ,CAAmB,sBAAnB,CAAN;AACD,GAJ8C,CAK/C;;;AAEA,OAAKK,QAAL,GAAgBF,OAAhB;AAEAC,EAAAA,OAAO,GAAGN,YAAY,CAACM,OAAD,EAAUN,YAAY,CAACQ,YAAvB,CAAtB;AAEA;;;;;;AAKA,OAAKC,OAAL,GAAeT,YAAY,CAACM,OAAO,CAACG,OAAT,EAAkB,KAAlB,CAA3B;AAEA;;;;;;AAKA,OAAKC,OAAL,GAAeV,YAAY,CAACM,OAAO,CAACI,OAAT,EAAkB,EAAlB,CAA3B;AAEAP,EAAAA,QAAQ,CAACQ,KAAT,CAAe,IAAf,EAAqB,CAAC,SAAD,EAAY,SAAZ,CAArB;AACD;;AAEDC,MAAM,CAACC,gBAAP,CAAwBT,qBAAqB,CAACU,SAA9C,EAAyD;AACvD;;;;;AAKAT,EAAAA,OAAO,EAAE;AACPU,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKR,QAAZ;AACD;AAHM;AAN8C,CAAzD;AAYA,eAAeH,qBAAf","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport knockout from \"../ThirdParty/knockout.js\";\n\n/**\n * A view model which exposes the properties of a toggle button.\n * @alias ToggleButtonViewModel\n * @constructor\n *\n * @param {Command} command The command which will be executed when the button is toggled.\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.toggled=false] A boolean indicating whether the button should be initially toggled.\n * @param {String} [options.tooltip=''] A string containing the button's tooltip.\n */\nfunction ToggleButtonViewModel(command, options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(command)) {\n    throw new DeveloperError(\"command is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._command = command;\n\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  /**\n   * Gets or sets whether the button is currently toggled.  This property is observable.\n   * @type {Boolean}\n   * @default false\n   */\n  this.toggled = defaultValue(options.toggled, false);\n\n  /**\n   * Gets or sets the button's tooltip.  This property is observable.\n   * @type {String}\n   * @default ''\n   */\n  this.tooltip = defaultValue(options.tooltip, \"\");\n\n  knockout.track(this, [\"toggled\", \"tooltip\"]);\n}\n\nObject.defineProperties(ToggleButtonViewModel.prototype, {\n  /**\n   * Gets the command which will be executed when the button is toggled.\n   * @memberof ToggleButtonViewModel.prototype\n   * @type {Command}\n   */\n  command: {\n    get: function () {\n      return this._command;\n    },\n  },\n});\nexport default ToggleButtonViewModel;\n"]},"metadata":{},"sourceType":"module"}