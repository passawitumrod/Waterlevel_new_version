{"ast":null,"code":"import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingRectangle from \"./BoundingRectangle.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CornerType from \"./CornerType.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport oneTimeWarning from \"./oneTimeWarning.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PolylineVolumeGeometryLibrary from \"./PolylineVolumeGeometryLibrary.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\nimport WindingOrder from \"./WindingOrder.js\";\n\nfunction computeAttributes(combinedPositions, shape, boundingRectangle, vertexFormat) {\n  var attributes = new GeometryAttributes();\n\n  if (vertexFormat.position) {\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: combinedPositions\n    });\n  }\n\n  var shapeLength = shape.length;\n  var vertexCount = combinedPositions.length / 3;\n  var length = (vertexCount - shapeLength * 2) / (shapeLength * 2);\n  var firstEndIndices = PolygonPipeline.triangulate(shape);\n  var indicesCount = (length - 1) * shapeLength * 6 + firstEndIndices.length * 2;\n  var indices = IndexDatatype.createTypedArray(vertexCount, indicesCount);\n  var i, j;\n  var ll, ul, ur, lr;\n  var offset = shapeLength * 2;\n  var index = 0;\n\n  for (i = 0; i < length - 1; i++) {\n    for (j = 0; j < shapeLength - 1; j++) {\n      ll = j * 2 + i * shapeLength * 2;\n      lr = ll + offset;\n      ul = ll + 1;\n      ur = ul + offset;\n      indices[index++] = ul;\n      indices[index++] = ll;\n      indices[index++] = ur;\n      indices[index++] = ur;\n      indices[index++] = ll;\n      indices[index++] = lr;\n    }\n\n    ll = shapeLength * 2 - 2 + i * shapeLength * 2;\n    ul = ll + 1;\n    ur = ul + offset;\n    lr = ll + offset;\n    indices[index++] = ul;\n    indices[index++] = ll;\n    indices[index++] = ur;\n    indices[index++] = ur;\n    indices[index++] = ll;\n    indices[index++] = lr;\n  }\n\n  if (vertexFormat.st || vertexFormat.tangent || vertexFormat.bitangent) {\n    // st required for tangent/bitangent calculation\n    var st = new Float32Array(vertexCount * 2);\n    var lengthSt = 1 / (length - 1);\n    var heightSt = 1 / boundingRectangle.height;\n    var heightOffset = boundingRectangle.height / 2;\n    var s, t;\n    var stindex = 0;\n\n    for (i = 0; i < length; i++) {\n      s = i * lengthSt;\n      t = heightSt * (shape[0].y + heightOffset);\n      st[stindex++] = s;\n      st[stindex++] = t;\n\n      for (j = 1; j < shapeLength; j++) {\n        t = heightSt * (shape[j].y + heightOffset);\n        st[stindex++] = s;\n        st[stindex++] = t;\n        st[stindex++] = s;\n        st[stindex++] = t;\n      }\n\n      t = heightSt * (shape[0].y + heightOffset);\n      st[stindex++] = s;\n      st[stindex++] = t;\n    }\n\n    for (j = 0; j < shapeLength; j++) {\n      s = 0;\n      t = heightSt * (shape[j].y + heightOffset);\n      st[stindex++] = s;\n      st[stindex++] = t;\n    }\n\n    for (j = 0; j < shapeLength; j++) {\n      s = (length - 1) * lengthSt;\n      t = heightSt * (shape[j].y + heightOffset);\n      st[stindex++] = s;\n      st[stindex++] = t;\n    }\n\n    attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: new Float32Array(st)\n    });\n  }\n\n  var endOffset = vertexCount - shapeLength * 2;\n\n  for (i = 0; i < firstEndIndices.length; i += 3) {\n    var v0 = firstEndIndices[i] + endOffset;\n    var v1 = firstEndIndices[i + 1] + endOffset;\n    var v2 = firstEndIndices[i + 2] + endOffset;\n    indices[index++] = v0;\n    indices[index++] = v1;\n    indices[index++] = v2;\n    indices[index++] = v2 + shapeLength;\n    indices[index++] = v1 + shapeLength;\n    indices[index++] = v0 + shapeLength;\n  }\n\n  var geometry = new Geometry({\n    attributes: attributes,\n    indices: indices,\n    boundingSphere: BoundingSphere.fromVertices(combinedPositions),\n    primitiveType: PrimitiveType.TRIANGLES\n  });\n\n  if (vertexFormat.normal) {\n    geometry = GeometryPipeline.computeNormal(geometry);\n  }\n\n  if (vertexFormat.tangent || vertexFormat.bitangent) {\n    try {\n      geometry = GeometryPipeline.computeTangentAndBitangent(geometry);\n    } catch (e) {\n      oneTimeWarning(\"polyline-volume-tangent-bitangent\", \"Unable to compute tangents and bitangents for polyline volume geometry\"); //TODO https://github.com/CesiumGS/cesium/issues/3609\n    }\n\n    if (!vertexFormat.tangent) {\n      geometry.attributes.tangent = undefined;\n    }\n\n    if (!vertexFormat.bitangent) {\n      geometry.attributes.bitangent = undefined;\n    }\n\n    if (!vertexFormat.st) {\n      geometry.attributes.st = undefined;\n    }\n  }\n\n  return geometry;\n}\n/**\n * A description of a polyline with a volume (a 2D shape extruded along a polyline).\n *\n * @alias PolylineVolumeGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.polylinePositions An array of {@link Cartesain3} positions that define the center of the polyline volume.\n * @param {Cartesian2[]} options.shapePositions An array of {@link Cartesian2} positions that define the shape to be extruded along the polyline\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n *\n * @see PolylineVolumeGeometry#createGeometry\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline%20Volume.html|Cesium Sandcastle Polyline Volume Demo}\n *\n * @example\n * function computeCircle(radius) {\n *   var positions = [];\n *   for (var i = 0; i < 360; i++) {\n *     var radians = Cesium.Math.toRadians(i);\n *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\n *   }\n *   return positions;\n * }\n *\n * var volume = new Cesium.PolylineVolumeGeometry({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0\n *   ]),\n *   shapePositions : computeCircle(100000.0)\n * });\n */\n\n\nfunction PolylineVolumeGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var positions = options.polylinePositions;\n  var shape = options.shapePositions; //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(positions)) {\n    throw new DeveloperError(\"options.polylinePositions is required.\");\n  }\n\n  if (!defined(shape)) {\n    throw new DeveloperError(\"options.shapePositions is required.\");\n  } //>>includeEnd('debug');\n\n\n  this._positions = positions;\n  this._shape = shape;\n  this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\n  this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n  this._vertexFormat = VertexFormat.clone(defaultValue(options.vertexFormat, VertexFormat.DEFAULT));\n  this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n  this._workerName = \"createPolylineVolumeGeometry\";\n  var numComponents = 1 + positions.length * Cartesian3.packedLength;\n  numComponents += 1 + shape.length * Cartesian2.packedLength;\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n\n  this.packedLength = numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 2;\n}\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PolylineVolumeGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\n\n\nPolylineVolumeGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  } //>>includeEnd('debug');\n\n\n  startingIndex = defaultValue(startingIndex, 0);\n  var i;\n  var positions = value._positions;\n  var length = positions.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    Cartesian3.pack(positions[i], array, startingIndex);\n  }\n\n  var shape = value._shape;\n  length = shape.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n    Cartesian2.pack(shape[i], array, startingIndex);\n  }\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n  array[startingIndex++] = value._cornerType;\n  array[startingIndex] = value._granularity;\n  return array;\n};\n\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nvar scratchVertexFormat = new VertexFormat();\nvar scratchOptions = {\n  polylinePositions: undefined,\n  shapePositions: undefined,\n  ellipsoid: scratchEllipsoid,\n  vertexFormat: scratchVertexFormat,\n  cornerType: undefined,\n  granularity: undefined\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PolylineVolumeGeometry} [result] The object into which to store the result.\n * @returns {PolylineVolumeGeometry} The modified result parameter or a new PolylineVolumeGeometry instance if one was not provided.\n */\n\nPolylineVolumeGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  } //>>includeEnd('debug');\n\n\n  startingIndex = defaultValue(startingIndex, 0);\n  var i;\n  var length = array[startingIndex++];\n  var positions = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n\n  length = array[startingIndex++];\n  var shape = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n    shape[i] = Cartesian2.unpack(array, startingIndex);\n  }\n\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n  var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n  startingIndex += VertexFormat.packedLength;\n  var cornerType = array[startingIndex++];\n  var granularity = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.polylinePositions = positions;\n    scratchOptions.shapePositions = shape;\n    scratchOptions.cornerType = cornerType;\n    scratchOptions.granularity = granularity;\n    return new PolylineVolumeGeometry(scratchOptions);\n  }\n\n  result._positions = positions;\n  result._shape = shape;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._cornerType = cornerType;\n  result._granularity = granularity;\n  return result;\n};\n\nvar brScratch = new BoundingRectangle();\n/**\n * Computes the geometric representation of a polyline with a volume, including its vertices, indices, and a bounding sphere.\n *\n * @param {PolylineVolumeGeometry} polylineVolumeGeometry A description of the polyline volume.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\n\nPolylineVolumeGeometry.createGeometry = function (polylineVolumeGeometry) {\n  var positions = polylineVolumeGeometry._positions;\n  var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\n  var shape2D = polylineVolumeGeometry._shape;\n  shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\n\n  if (cleanPositions.length < 2 || shape2D.length < 3) {\n    return undefined;\n  }\n\n  if (PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE) {\n    shape2D.reverse();\n  }\n\n  var boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\n  var computedPositions = PolylineVolumeGeometryLibrary.computePositions(cleanPositions, shape2D, boundingRectangle, polylineVolumeGeometry, true);\n  return computeAttributes(computedPositions, shape2D, boundingRectangle, polylineVolumeGeometry._vertexFormat);\n};\n\nexport default PolylineVolumeGeometry;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/PolylineVolumeGeometry.js"],"names":["arrayRemoveDuplicates","BoundingRectangle","BoundingSphere","Cartesian2","Cartesian3","ComponentDatatype","CornerType","defaultValue","defined","DeveloperError","Ellipsoid","Geometry","GeometryAttribute","GeometryAttributes","GeometryPipeline","IndexDatatype","CesiumMath","oneTimeWarning","PolygonPipeline","PolylineVolumeGeometryLibrary","PrimitiveType","VertexFormat","WindingOrder","computeAttributes","combinedPositions","shape","boundingRectangle","vertexFormat","attributes","position","componentDatatype","DOUBLE","componentsPerAttribute","values","shapeLength","length","vertexCount","firstEndIndices","triangulate","indicesCount","indices","createTypedArray","i","j","ll","ul","ur","lr","offset","index","st","tangent","bitangent","Float32Array","lengthSt","heightSt","height","heightOffset","s","t","stindex","y","FLOAT","endOffset","v0","v1","v2","geometry","boundingSphere","fromVertices","primitiveType","TRIANGLES","normal","computeNormal","computeTangentAndBitangent","e","undefined","PolylineVolumeGeometry","options","EMPTY_OBJECT","positions","polylinePositions","shapePositions","_positions","_shape","_ellipsoid","clone","ellipsoid","WGS84","_cornerType","cornerType","ROUNDED","_vertexFormat","DEFAULT","_granularity","granularity","RADIANS_PER_DEGREE","_workerName","numComponents","packedLength","pack","value","array","startingIndex","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","scratchOptions","unpack","result","Array","brScratch","createGeometry","polylineVolumeGeometry","cleanPositions","equalsEpsilon","shape2D","removeDuplicatesFromShape","computeWindingOrder2D","CLOCKWISE","reverse","fromPoints","computedPositions","computePositions"],"mappings":"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","sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingRectangle from \"./BoundingRectangle.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CornerType from \"./CornerType.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport oneTimeWarning from \"./oneTimeWarning.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PolylineVolumeGeometryLibrary from \"./PolylineVolumeGeometryLibrary.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\nimport WindingOrder from \"./WindingOrder.js\";\n\nfunction computeAttributes(\n  combinedPositions,\n  shape,\n  boundingRectangle,\n  vertexFormat\n) {\n  var attributes = new GeometryAttributes();\n  if (vertexFormat.position) {\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: combinedPositions,\n    });\n  }\n  var shapeLength = shape.length;\n  var vertexCount = combinedPositions.length / 3;\n  var length = (vertexCount - shapeLength * 2) / (shapeLength * 2);\n  var firstEndIndices = PolygonPipeline.triangulate(shape);\n\n  var indicesCount =\n    (length - 1) * shapeLength * 6 + firstEndIndices.length * 2;\n  var indices = IndexDatatype.createTypedArray(vertexCount, indicesCount);\n  var i, j;\n  var ll, ul, ur, lr;\n  var offset = shapeLength * 2;\n  var index = 0;\n  for (i = 0; i < length - 1; i++) {\n    for (j = 0; j < shapeLength - 1; j++) {\n      ll = j * 2 + i * shapeLength * 2;\n      lr = ll + offset;\n      ul = ll + 1;\n      ur = ul + offset;\n\n      indices[index++] = ul;\n      indices[index++] = ll;\n      indices[index++] = ur;\n      indices[index++] = ur;\n      indices[index++] = ll;\n      indices[index++] = lr;\n    }\n    ll = shapeLength * 2 - 2 + i * shapeLength * 2;\n    ul = ll + 1;\n    ur = ul + offset;\n    lr = ll + offset;\n\n    indices[index++] = ul;\n    indices[index++] = ll;\n    indices[index++] = ur;\n    indices[index++] = ur;\n    indices[index++] = ll;\n    indices[index++] = lr;\n  }\n\n  if (vertexFormat.st || vertexFormat.tangent || vertexFormat.bitangent) {\n    // st required for tangent/bitangent calculation\n    var st = new Float32Array(vertexCount * 2);\n    var lengthSt = 1 / (length - 1);\n    var heightSt = 1 / boundingRectangle.height;\n    var heightOffset = boundingRectangle.height / 2;\n    var s, t;\n    var stindex = 0;\n    for (i = 0; i < length; i++) {\n      s = i * lengthSt;\n      t = heightSt * (shape[0].y + heightOffset);\n      st[stindex++] = s;\n      st[stindex++] = t;\n      for (j = 1; j < shapeLength; j++) {\n        t = heightSt * (shape[j].y + heightOffset);\n        st[stindex++] = s;\n        st[stindex++] = t;\n        st[stindex++] = s;\n        st[stindex++] = t;\n      }\n      t = heightSt * (shape[0].y + heightOffset);\n      st[stindex++] = s;\n      st[stindex++] = t;\n    }\n    for (j = 0; j < shapeLength; j++) {\n      s = 0;\n      t = heightSt * (shape[j].y + heightOffset);\n      st[stindex++] = s;\n      st[stindex++] = t;\n    }\n    for (j = 0; j < shapeLength; j++) {\n      s = (length - 1) * lengthSt;\n      t = heightSt * (shape[j].y + heightOffset);\n      st[stindex++] = s;\n      st[stindex++] = t;\n    }\n\n    attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: new Float32Array(st),\n    });\n  }\n\n  var endOffset = vertexCount - shapeLength * 2;\n  for (i = 0; i < firstEndIndices.length; i += 3) {\n    var v0 = firstEndIndices[i] + endOffset;\n    var v1 = firstEndIndices[i + 1] + endOffset;\n    var v2 = firstEndIndices[i + 2] + endOffset;\n\n    indices[index++] = v0;\n    indices[index++] = v1;\n    indices[index++] = v2;\n    indices[index++] = v2 + shapeLength;\n    indices[index++] = v1 + shapeLength;\n    indices[index++] = v0 + shapeLength;\n  }\n\n  var geometry = new Geometry({\n    attributes: attributes,\n    indices: indices,\n    boundingSphere: BoundingSphere.fromVertices(combinedPositions),\n    primitiveType: PrimitiveType.TRIANGLES,\n  });\n\n  if (vertexFormat.normal) {\n    geometry = GeometryPipeline.computeNormal(geometry);\n  }\n\n  if (vertexFormat.tangent || vertexFormat.bitangent) {\n    try {\n      geometry = GeometryPipeline.computeTangentAndBitangent(geometry);\n    } catch (e) {\n      oneTimeWarning(\n        \"polyline-volume-tangent-bitangent\",\n        \"Unable to compute tangents and bitangents for polyline volume geometry\"\n      );\n      //TODO https://github.com/CesiumGS/cesium/issues/3609\n    }\n\n    if (!vertexFormat.tangent) {\n      geometry.attributes.tangent = undefined;\n    }\n    if (!vertexFormat.bitangent) {\n      geometry.attributes.bitangent = undefined;\n    }\n    if (!vertexFormat.st) {\n      geometry.attributes.st = undefined;\n    }\n  }\n\n  return geometry;\n}\n\n/**\n * A description of a polyline with a volume (a 2D shape extruded along a polyline).\n *\n * @alias PolylineVolumeGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.polylinePositions An array of {@link Cartesain3} positions that define the center of the polyline volume.\n * @param {Cartesian2[]} options.shapePositions An array of {@link Cartesian2} positions that define the shape to be extruded along the polyline\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n *\n * @see PolylineVolumeGeometry#createGeometry\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline%20Volume.html|Cesium Sandcastle Polyline Volume Demo}\n *\n * @example\n * function computeCircle(radius) {\n *   var positions = [];\n *   for (var i = 0; i < 360; i++) {\n *     var radians = Cesium.Math.toRadians(i);\n *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\n *   }\n *   return positions;\n * }\n *\n * var volume = new Cesium.PolylineVolumeGeometry({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0\n *   ]),\n *   shapePositions : computeCircle(100000.0)\n * });\n */\nfunction PolylineVolumeGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var positions = options.polylinePositions;\n  var shape = options.shapePositions;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(positions)) {\n    throw new DeveloperError(\"options.polylinePositions is required.\");\n  }\n  if (!defined(shape)) {\n    throw new DeveloperError(\"options.shapePositions is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._positions = positions;\n  this._shape = shape;\n  this._ellipsoid = Ellipsoid.clone(\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\n  );\n  this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n  this._vertexFormat = VertexFormat.clone(\n    defaultValue(options.vertexFormat, VertexFormat.DEFAULT)\n  );\n  this._granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  this._workerName = \"createPolylineVolumeGeometry\";\n\n  var numComponents = 1 + positions.length * Cartesian3.packedLength;\n  numComponents += 1 + shape.length * Cartesian2.packedLength;\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 2;\n}\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PolylineVolumeGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nPolylineVolumeGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var i;\n\n  var positions = value._positions;\n  var length = positions.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    Cartesian3.pack(positions[i], array, startingIndex);\n  }\n\n  var shape = value._shape;\n  length = shape.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n    Cartesian2.pack(shape[i], array, startingIndex);\n  }\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n\n  array[startingIndex++] = value._cornerType;\n  array[startingIndex] = value._granularity;\n\n  return array;\n};\n\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nvar scratchVertexFormat = new VertexFormat();\nvar scratchOptions = {\n  polylinePositions: undefined,\n  shapePositions: undefined,\n  ellipsoid: scratchEllipsoid,\n  vertexFormat: scratchVertexFormat,\n  cornerType: undefined,\n  granularity: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PolylineVolumeGeometry} [result] The object into which to store the result.\n * @returns {PolylineVolumeGeometry} The modified result parameter or a new PolylineVolumeGeometry instance if one was not provided.\n */\nPolylineVolumeGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var i;\n\n  var length = array[startingIndex++];\n  var positions = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n\n  length = array[startingIndex++];\n  var shape = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n    shape[i] = Cartesian2.unpack(array, startingIndex);\n  }\n\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  var vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n  startingIndex += VertexFormat.packedLength;\n\n  var cornerType = array[startingIndex++];\n  var granularity = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.polylinePositions = positions;\n    scratchOptions.shapePositions = shape;\n    scratchOptions.cornerType = cornerType;\n    scratchOptions.granularity = granularity;\n    return new PolylineVolumeGeometry(scratchOptions);\n  }\n\n  result._positions = positions;\n  result._shape = shape;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._cornerType = cornerType;\n  result._granularity = granularity;\n\n  return result;\n};\n\nvar brScratch = new BoundingRectangle();\n\n/**\n * Computes the geometric representation of a polyline with a volume, including its vertices, indices, and a bounding sphere.\n *\n * @param {PolylineVolumeGeometry} polylineVolumeGeometry A description of the polyline volume.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPolylineVolumeGeometry.createGeometry = function (polylineVolumeGeometry) {\n  var positions = polylineVolumeGeometry._positions;\n  var cleanPositions = arrayRemoveDuplicates(\n    positions,\n    Cartesian3.equalsEpsilon\n  );\n  var shape2D = polylineVolumeGeometry._shape;\n  shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\n\n  if (cleanPositions.length < 2 || shape2D.length < 3) {\n    return undefined;\n  }\n\n  if (\n    PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE\n  ) {\n    shape2D.reverse();\n  }\n  var boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\n\n  var computedPositions = PolylineVolumeGeometryLibrary.computePositions(\n    cleanPositions,\n    shape2D,\n    boundingRectangle,\n    polylineVolumeGeometry,\n    true\n  );\n  return computeAttributes(\n    computedPositions,\n    shape2D,\n    boundingRectangle,\n    polylineVolumeGeometry._vertexFormat\n  );\n};\nexport default PolylineVolumeGeometry;\n"]},"metadata":{},"sourceType":"module"}