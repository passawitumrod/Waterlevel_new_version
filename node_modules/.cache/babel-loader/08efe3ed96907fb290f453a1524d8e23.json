{"ast":null,"code":"import defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\n/**\n * @private\n */\n\nfunction TextureCache() {\n  this._textures = {};\n  this._numberOfTextures = 0;\n  this._texturesToRelease = {};\n}\n\nObject.defineProperties(TextureCache.prototype, {\n  numberOfTextures: {\n    get: function () {\n      return this._numberOfTextures;\n    }\n  }\n});\n\nTextureCache.prototype.getTexture = function (keyword) {\n  var cachedTexture = this._textures[keyword];\n\n  if (!defined(cachedTexture)) {\n    return undefined;\n  } // No longer want to release this if it was previously released.\n\n\n  delete this._texturesToRelease[keyword];\n  ++cachedTexture.count;\n  return cachedTexture.texture;\n};\n\nTextureCache.prototype.addTexture = function (keyword, texture) {\n  var cachedTexture = {\n    texture: texture,\n    count: 1\n  };\n  texture.finalDestroy = texture.destroy;\n  var that = this;\n\n  texture.destroy = function () {\n    if (--cachedTexture.count === 0) {\n      that._texturesToRelease[keyword] = cachedTexture;\n    }\n  };\n\n  this._textures[keyword] = cachedTexture;\n  ++this._numberOfTextures;\n};\n\nTextureCache.prototype.destroyReleasedTextures = function () {\n  var texturesToRelease = this._texturesToRelease;\n\n  for (var keyword in texturesToRelease) {\n    if (texturesToRelease.hasOwnProperty(keyword)) {\n      var cachedTexture = texturesToRelease[keyword];\n      delete this._textures[keyword];\n      cachedTexture.texture.finalDestroy();\n      --this._numberOfTextures;\n    }\n  }\n\n  this._texturesToRelease = {};\n};\n\nTextureCache.prototype.isDestroyed = function () {\n  return false;\n};\n\nTextureCache.prototype.destroy = function () {\n  var textures = this._textures;\n\n  for (var keyword in textures) {\n    if (textures.hasOwnProperty(keyword)) {\n      textures[keyword].texture.finalDestroy();\n    }\n  }\n\n  return destroyObject(this);\n};\n\nexport default TextureCache;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Renderer/TextureCache.js"],"names":["defined","destroyObject","TextureCache","_textures","_numberOfTextures","_texturesToRelease","Object","defineProperties","prototype","numberOfTextures","get","getTexture","keyword","cachedTexture","undefined","count","texture","addTexture","finalDestroy","destroy","that","destroyReleasedTextures","texturesToRelease","hasOwnProperty","isDestroyed","textures"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AAEA;;;;AAGA,SAASC,YAAT,GAAwB;AACtB,OAAKC,SAAL,GAAiB,EAAjB;AACA,OAAKC,iBAAL,GAAyB,CAAzB;AACA,OAAKC,kBAAL,GAA0B,EAA1B;AACD;;AAEDC,MAAM,CAACC,gBAAP,CAAwBL,YAAY,CAACM,SAArC,EAAgD;AAC9CC,EAAAA,gBAAgB,EAAE;AAChBC,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKN,iBAAZ;AACD;AAHe;AAD4B,CAAhD;;AAQAF,YAAY,CAACM,SAAb,CAAuBG,UAAvB,GAAoC,UAAUC,OAAV,EAAmB;AACrD,MAAIC,aAAa,GAAG,KAAKV,SAAL,CAAeS,OAAf,CAApB;;AACA,MAAI,CAACZ,OAAO,CAACa,aAAD,CAAZ,EAA6B;AAC3B,WAAOC,SAAP;AACD,GAJoD,CAMrD;;;AACA,SAAO,KAAKT,kBAAL,CAAwBO,OAAxB,CAAP;AAEA,IAAEC,aAAa,CAACE,KAAhB;AACA,SAAOF,aAAa,CAACG,OAArB;AACD,CAXD;;AAaAd,YAAY,CAACM,SAAb,CAAuBS,UAAvB,GAAoC,UAAUL,OAAV,EAAmBI,OAAnB,EAA4B;AAC9D,MAAIH,aAAa,GAAG;AAClBG,IAAAA,OAAO,EAAEA,OADS;AAElBD,IAAAA,KAAK,EAAE;AAFW,GAApB;AAKAC,EAAAA,OAAO,CAACE,YAAR,GAAuBF,OAAO,CAACG,OAA/B;AAEA,MAAIC,IAAI,GAAG,IAAX;;AACAJ,EAAAA,OAAO,CAACG,OAAR,GAAkB,YAAY;AAC5B,QAAI,EAAEN,aAAa,CAACE,KAAhB,KAA0B,CAA9B,EAAiC;AAC/BK,MAAAA,IAAI,CAACf,kBAAL,CAAwBO,OAAxB,IAAmCC,aAAnC;AACD;AACF,GAJD;;AAMA,OAAKV,SAAL,CAAeS,OAAf,IAA0BC,aAA1B;AACA,IAAE,KAAKT,iBAAP;AACD,CAjBD;;AAmBAF,YAAY,CAACM,SAAb,CAAuBa,uBAAvB,GAAiD,YAAY;AAC3D,MAAIC,iBAAiB,GAAG,KAAKjB,kBAA7B;;AAEA,OAAK,IAAIO,OAAT,IAAoBU,iBAApB,EAAuC;AACrC,QAAIA,iBAAiB,CAACC,cAAlB,CAAiCX,OAAjC,CAAJ,EAA+C;AAC7C,UAAIC,aAAa,GAAGS,iBAAiB,CAACV,OAAD,CAArC;AACA,aAAO,KAAKT,SAAL,CAAeS,OAAf,CAAP;AACAC,MAAAA,aAAa,CAACG,OAAd,CAAsBE,YAAtB;AACA,QAAE,KAAKd,iBAAP;AACD;AACF;;AAED,OAAKC,kBAAL,GAA0B,EAA1B;AACD,CAbD;;AAeAH,YAAY,CAACM,SAAb,CAAuBgB,WAAvB,GAAqC,YAAY;AAC/C,SAAO,KAAP;AACD,CAFD;;AAIAtB,YAAY,CAACM,SAAb,CAAuBW,OAAvB,GAAiC,YAAY;AAC3C,MAAIM,QAAQ,GAAG,KAAKtB,SAApB;;AACA,OAAK,IAAIS,OAAT,IAAoBa,QAApB,EAA8B;AAC5B,QAAIA,QAAQ,CAACF,cAAT,CAAwBX,OAAxB,CAAJ,EAAsC;AACpCa,MAAAA,QAAQ,CAACb,OAAD,CAAR,CAAkBI,OAAlB,CAA0BE,YAA1B;AACD;AACF;;AACD,SAAOjB,aAAa,CAAC,IAAD,CAApB;AACD,CARD;;AASA,eAAeC,YAAf","sourcesContent":["import defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\n\n/**\n * @private\n */\nfunction TextureCache() {\n  this._textures = {};\n  this._numberOfTextures = 0;\n  this._texturesToRelease = {};\n}\n\nObject.defineProperties(TextureCache.prototype, {\n  numberOfTextures: {\n    get: function () {\n      return this._numberOfTextures;\n    },\n  },\n});\n\nTextureCache.prototype.getTexture = function (keyword) {\n  var cachedTexture = this._textures[keyword];\n  if (!defined(cachedTexture)) {\n    return undefined;\n  }\n\n  // No longer want to release this if it was previously released.\n  delete this._texturesToRelease[keyword];\n\n  ++cachedTexture.count;\n  return cachedTexture.texture;\n};\n\nTextureCache.prototype.addTexture = function (keyword, texture) {\n  var cachedTexture = {\n    texture: texture,\n    count: 1,\n  };\n\n  texture.finalDestroy = texture.destroy;\n\n  var that = this;\n  texture.destroy = function () {\n    if (--cachedTexture.count === 0) {\n      that._texturesToRelease[keyword] = cachedTexture;\n    }\n  };\n\n  this._textures[keyword] = cachedTexture;\n  ++this._numberOfTextures;\n};\n\nTextureCache.prototype.destroyReleasedTextures = function () {\n  var texturesToRelease = this._texturesToRelease;\n\n  for (var keyword in texturesToRelease) {\n    if (texturesToRelease.hasOwnProperty(keyword)) {\n      var cachedTexture = texturesToRelease[keyword];\n      delete this._textures[keyword];\n      cachedTexture.texture.finalDestroy();\n      --this._numberOfTextures;\n    }\n  }\n\n  this._texturesToRelease = {};\n};\n\nTextureCache.prototype.isDestroyed = function () {\n  return false;\n};\n\nTextureCache.prototype.destroy = function () {\n  var textures = this._textures;\n  for (var keyword in textures) {\n    if (textures.hasOwnProperty(keyword)) {\n      textures[keyword].texture.finalDestroy();\n    }\n  }\n  return destroyObject(this);\n};\nexport default TextureCache;\n"]},"metadata":{},"sourceType":"module"}