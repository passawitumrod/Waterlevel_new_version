{"ast":null,"code":"import Credit from \"../Core/Credit.js\";\nimport decodeGoogleEarthEnterpriseData from \"../Core/decodeGoogleEarthEnterpriseData.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport GoogleEarthEnterpriseMetadata from \"../Core/GoogleEarthEnterpriseMetadata.js\";\nimport loadImageFromTypedArray from \"../Core/loadImageFromTypedArray.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Request from \"../Core/Request.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TileProviderError from \"../Core/TileProviderError.js\";\nimport protobuf from \"../ThirdParty/protobuf-minimal.js\";\nimport when from \"../ThirdParty/when.js\";\n\nfunction GoogleEarthEnterpriseDiscardPolicy() {\n  this._image = new Image();\n}\n/**\n * Determines if the discard policy is ready to process images.\n * @returns {Boolean} True if the discard policy is ready to process images; otherwise, false.\n */\n\n\nGoogleEarthEnterpriseDiscardPolicy.prototype.isReady = function () {\n  return true;\n};\n/**\n * Given a tile image, decide whether to discard that image.\n *\n * @param {Image} image An image to test.\n * @returns {Boolean} True if the image should be discarded; otherwise, false.\n */\n\n\nGoogleEarthEnterpriseDiscardPolicy.prototype.shouldDiscardImage = function (image) {\n  return image === this._image;\n};\n/**\n * Provides tiled imagery using the Google Earth Enterprise REST API.\n *\n * Notes: This provider is for use with the 3D Earth API of Google Earth Enterprise,\n *        {@link GoogleEarthEnterpriseMapsProvider} should be used with 2D Maps API.\n *\n * @alias GoogleEarthEnterpriseImageryProvider\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource|String} options.url The url of the Google Earth Enterprise server hosting the imagery.\n * @param {GoogleEarthEnterpriseMetadata} options.metadata A metadata object that can be used to share metadata requests with a GoogleEarthEnterpriseTerrainProvider.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n * @param {TileDiscardPolicy} [options.tileDiscardPolicy] The policy that determines if a tile\n *        is invalid and should be discarded. If this value is not specified, a default\n *        is to discard tiles that fail to download.\n * @param {Credit|String} [options.credit] A credit for the data source, which is displayed on the canvas.\n *\n * @see GoogleEarthEnterpriseTerrainProvider\n * @see ArcGisMapServerImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n *\n * @example\n * var geeMetadata = new GoogleEarthEnterpriseMetadata('http://www.earthenterprise.org/3d');\n * var gee = new Cesium.GoogleEarthEnterpriseImageryProvider({\n *     metadata : geeMetadata\n * });\n *\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\n\n\nfunction GoogleEarthEnterpriseImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT); //>>includeStart('debug', pragmas.debug);\n\n  if (!(defined(options.url) || defined(options.metadata))) {\n    throw new DeveloperError(\"options.url or options.metadata is required.\");\n  } //>>includeEnd('debug');\n\n\n  var metadata;\n\n  if (defined(options.metadata)) {\n    metadata = options.metadata;\n  } else {\n    var resource = Resource.createIfNeeded(options.url);\n    metadata = new GoogleEarthEnterpriseMetadata(resource);\n  }\n\n  this._metadata = metadata;\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n  this._tilingScheme = new GeographicTilingScheme({\n    numberOfLevelZeroTilesX: 2,\n    numberOfLevelZeroTilesY: 2,\n    rectangle: new Rectangle(-CesiumMath.PI, -CesiumMath.PI, CesiumMath.PI, CesiumMath.PI),\n    ellipsoid: options.ellipsoid\n  });\n  var credit = options.credit;\n\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n\n  this._credit = credit;\n  this._tileWidth = 256;\n  this._tileHeight = 256;\n  this._maximumLevel = 23; // Install the default tile discard policy if none has been supplied.\n\n  if (!defined(this._tileDiscardPolicy)) {\n    this._tileDiscardPolicy = new GoogleEarthEnterpriseDiscardPolicy();\n  }\n\n  this._errorEvent = new Event();\n  this._ready = false;\n  var that = this;\n  var metadataError;\n  this._readyPromise = metadata.readyPromise.then(function (result) {\n    if (!metadata.imageryPresent) {\n      var e = new RuntimeError(\"The server \" + metadata.url + \" doesn't have imagery\");\n      metadataError = TileProviderError.handleError(metadataError, that, that._errorEvent, e.message, undefined, undefined, undefined, e);\n      return when.reject(e);\n    }\n\n    TileProviderError.handleSuccess(metadataError);\n    that._ready = result;\n    return result;\n  }).otherwise(function (e) {\n    metadataError = TileProviderError.handleError(metadataError, that, that._errorEvent, e.message, undefined, undefined, undefined, e);\n    return when.reject(e);\n  });\n}\n\nObject.defineProperties(GoogleEarthEnterpriseImageryProvider.prototype, {\n  /**\n   * Gets the name of the Google Earth Enterprise server url hosting the imagery.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._metadata.url;\n    }\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._metadata.proxy;\n    }\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"tileWidth must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tileWidth;\n    }\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"tileHeight must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tileHeight;\n    }\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"maximumLevel must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._maximumLevel;\n    }\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"minimumLevel must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return 0;\n    }\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"tilingScheme must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tilingScheme;\n    }\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"rectangle must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tilingScheme.rectangle;\n    }\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"tileDiscardPolicy must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tileDiscardPolicy;\n    }\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    }\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    }\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  Setting this property to false reduces memory usage\n   * and texture upload time.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return false;\n    }\n  }\n});\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\n\nGoogleEarthEnterpriseImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this._ready) {\n    throw new DeveloperError(\"getTileCredits must not be called before the imagery provider is ready.\");\n  } //>>includeEnd('debug');\n\n\n  var metadata = this._metadata;\n  var info = metadata.getTileInformation(x, y, level);\n\n  if (defined(info)) {\n    var credit = metadata.providers[info.imageryProvider];\n\n    if (defined(credit)) {\n      return [credit];\n    }\n  }\n\n  return undefined;\n};\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<Image|Canvas>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\n\n\nGoogleEarthEnterpriseImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this._ready) {\n    throw new DeveloperError(\"requestImage must not be called before the imagery provider is ready.\");\n  } //>>includeEnd('debug');\n\n\n  var invalidImage = this._tileDiscardPolicy._image; // Empty image or undefined depending on discard policy\n\n  var metadata = this._metadata;\n  var quadKey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  var info = metadata.getTileInformation(x, y, level);\n\n  if (!defined(info)) {\n    if (metadata.isValid(quadKey)) {\n      var metadataRequest = new Request({\n        throttle: request.throttle,\n        throttleByServer: request.throttleByServer,\n        type: request.type,\n        priorityFunction: request.priorityFunction\n      });\n      metadata.populateSubtree(x, y, level, metadataRequest);\n      return undefined; // No metadata so return undefined so we can be loaded later\n    }\n\n    return invalidImage; // Image doesn't exist\n  }\n\n  if (!info.hasImagery()) {\n    // Already have info and there isn't any imagery here\n    return invalidImage;\n  }\n\n  var promise = buildImageResource(this, info, x, y, level, request).fetchArrayBuffer();\n\n  if (!defined(promise)) {\n    return undefined; // Throttled\n  }\n\n  return promise.then(function (image) {\n    decodeGoogleEarthEnterpriseData(metadata.key, image);\n    var a = new Uint8Array(image);\n    var type;\n    var protoImagery = metadata.protoImagery;\n\n    if (!defined(protoImagery) || !protoImagery) {\n      type = getImageType(a);\n    }\n\n    if (!defined(type) && (!defined(protoImagery) || protoImagery)) {\n      var message = decodeEarthImageryPacket(a);\n      type = message.imageType;\n      a = message.imageData;\n    }\n\n    if (!defined(type) || !defined(a)) {\n      return invalidImage;\n    }\n\n    return loadImageFromTypedArray({\n      uint8Array: a,\n      format: type,\n      flipY: true\n    });\n  });\n};\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n */\n\n\nGoogleEarthEnterpriseImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  return undefined;\n}; //\n// Functions to handle imagery packets\n//\n\n\nfunction buildImageResource(imageryProvider, info, x, y, level, request) {\n  var quadKey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  var version = info.imageryVersion;\n  version = defined(version) && version > 0 ? version : 1;\n  return imageryProvider._metadata.resource.getDerivedResource({\n    url: \"flatfile?f1-0\" + quadKey + \"-i.\" + version.toString(),\n    request: request\n  });\n} // Detects if a Uint8Array is a JPEG or PNG\n\n\nfunction getImageType(image) {\n  var jpeg = \"JFIF\";\n\n  if (image[6] === jpeg.charCodeAt(0) && image[7] === jpeg.charCodeAt(1) && image[8] === jpeg.charCodeAt(2) && image[9] === jpeg.charCodeAt(3)) {\n    return \"image/jpeg\";\n  }\n\n  var png = \"PNG\";\n\n  if (image[1] === png.charCodeAt(0) && image[2] === png.charCodeAt(1) && image[3] === png.charCodeAt(2)) {\n    return \"image/png\";\n  }\n\n  return undefined;\n} // Decodes an Imagery protobuf into the message\n// Partially generated with the help of protobuf.js static generator\n\n\nfunction decodeEarthImageryPacket(data) {\n  var reader = protobuf.Reader.create(data);\n  var end = reader.len;\n  var message = {};\n\n  while (reader.pos < end) {\n    var tag = reader.uint32();\n\n    switch (tag >>> 3) {\n      case 1:\n        message.imageType = reader.uint32();\n        break;\n\n      case 2:\n        message.imageData = reader.bytes();\n        break;\n\n      case 3:\n        message.alphaType = reader.uint32();\n        break;\n\n      case 4:\n        message.imageAlpha = reader.bytes();\n        break;\n\n      case 5:\n        var copyrightIds = message.copyrightIds;\n\n        if (!defined(copyrightIds)) {\n          copyrightIds = message.copyrightIds = [];\n        }\n\n        if ((tag & 7) === 2) {\n          var end2 = reader.uint32() + reader.pos;\n\n          while (reader.pos < end2) {\n            copyrightIds.push(reader.uint32());\n          }\n        } else {\n          copyrightIds.push(reader.uint32());\n        }\n\n        break;\n\n      default:\n        reader.skipType(tag & 7);\n        break;\n    }\n  }\n\n  var imageType = message.imageType;\n\n  if (defined(imageType)) {\n    switch (imageType) {\n      case 0:\n        message.imageType = \"image/jpeg\";\n        break;\n\n      case 4:\n        message.imageType = \"image/png\";\n        break;\n\n      default:\n        throw new RuntimeError(\"GoogleEarthEnterpriseImageryProvider: Unsupported image type.\");\n    }\n  }\n\n  var alphaType = message.alphaType;\n\n  if (defined(alphaType) && alphaType !== 0) {\n    console.log(\"GoogleEarthEnterpriseImageryProvider: External alpha not supported.\");\n    delete message.alphaType;\n    delete message.imageAlpha;\n  }\n\n  return message;\n}\n\nexport default GoogleEarthEnterpriseImageryProvider;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/GoogleEarthEnterpriseImageryProvider.js"],"names":["Credit","decodeGoogleEarthEnterpriseData","defaultValue","defined","DeveloperError","Event","GeographicTilingScheme","GoogleEarthEnterpriseMetadata","loadImageFromTypedArray","CesiumMath","Rectangle","Request","Resource","RuntimeError","TileProviderError","protobuf","when","GoogleEarthEnterpriseDiscardPolicy","_image","Image","prototype","isReady","shouldDiscardImage","image","GoogleEarthEnterpriseImageryProvider","options","EMPTY_OBJECT","url","metadata","resource","createIfNeeded","_metadata","_tileDiscardPolicy","tileDiscardPolicy","_tilingScheme","numberOfLevelZeroTilesX","numberOfLevelZeroTilesY","rectangle","PI","ellipsoid","credit","_credit","_tileWidth","_tileHeight","_maximumLevel","_errorEvent","_ready","that","metadataError","_readyPromise","readyPromise","then","result","imageryPresent","e","handleError","message","undefined","reject","handleSuccess","otherwise","Object","defineProperties","get","proxy","tileWidth","tileHeight","maximumLevel","minimumLevel","tilingScheme","errorEvent","ready","hasAlphaChannel","getTileCredits","x","y","level","info","getTileInformation","providers","imageryProvider","requestImage","request","invalidImage","quadKey","tileXYToQuadKey","isValid","metadataRequest","throttle","throttleByServer","type","priorityFunction","populateSubtree","hasImagery","promise","buildImageResource","fetchArrayBuffer","key","a","Uint8Array","protoImagery","getImageType","decodeEarthImageryPacket","imageType","imageData","uint8Array","format","flipY","pickFeatures","longitude","latitude","version","imageryVersion","getDerivedResource","toString","jpeg","charCodeAt","png","data","reader","Reader","create","end","len","pos","tag","uint32","bytes","alphaType","imageAlpha","copyrightIds","end2","push","skipType","console","log"],"mappings":"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","sourcesContent":["import Credit from \"../Core/Credit.js\";\nimport decodeGoogleEarthEnterpriseData from \"../Core/decodeGoogleEarthEnterpriseData.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport GoogleEarthEnterpriseMetadata from \"../Core/GoogleEarthEnterpriseMetadata.js\";\nimport loadImageFromTypedArray from \"../Core/loadImageFromTypedArray.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Request from \"../Core/Request.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TileProviderError from \"../Core/TileProviderError.js\";\nimport protobuf from \"../ThirdParty/protobuf-minimal.js\";\nimport when from \"../ThirdParty/when.js\";\n\nfunction GoogleEarthEnterpriseDiscardPolicy() {\n  this._image = new Image();\n}\n\n/**\n * Determines if the discard policy is ready to process images.\n * @returns {Boolean} True if the discard policy is ready to process images; otherwise, false.\n */\nGoogleEarthEnterpriseDiscardPolicy.prototype.isReady = function () {\n  return true;\n};\n\n/**\n * Given a tile image, decide whether to discard that image.\n *\n * @param {Image} image An image to test.\n * @returns {Boolean} True if the image should be discarded; otherwise, false.\n */\nGoogleEarthEnterpriseDiscardPolicy.prototype.shouldDiscardImage = function (\n  image\n) {\n  return image === this._image;\n};\n\n/**\n * Provides tiled imagery using the Google Earth Enterprise REST API.\n *\n * Notes: This provider is for use with the 3D Earth API of Google Earth Enterprise,\n *        {@link GoogleEarthEnterpriseMapsProvider} should be used with 2D Maps API.\n *\n * @alias GoogleEarthEnterpriseImageryProvider\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource|String} options.url The url of the Google Earth Enterprise server hosting the imagery.\n * @param {GoogleEarthEnterpriseMetadata} options.metadata A metadata object that can be used to share metadata requests with a GoogleEarthEnterpriseTerrainProvider.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n * @param {TileDiscardPolicy} [options.tileDiscardPolicy] The policy that determines if a tile\n *        is invalid and should be discarded. If this value is not specified, a default\n *        is to discard tiles that fail to download.\n * @param {Credit|String} [options.credit] A credit for the data source, which is displayed on the canvas.\n *\n * @see GoogleEarthEnterpriseTerrainProvider\n * @see ArcGisMapServerImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n *\n * @example\n * var geeMetadata = new GoogleEarthEnterpriseMetadata('http://www.earthenterprise.org/3d');\n * var gee = new Cesium.GoogleEarthEnterpriseImageryProvider({\n *     metadata : geeMetadata\n * });\n *\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\nfunction GoogleEarthEnterpriseImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!(defined(options.url) || defined(options.metadata))) {\n    throw new DeveloperError(\"options.url or options.metadata is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var metadata;\n  if (defined(options.metadata)) {\n    metadata = options.metadata;\n  } else {\n    var resource = Resource.createIfNeeded(options.url);\n    metadata = new GoogleEarthEnterpriseMetadata(resource);\n  }\n  this._metadata = metadata;\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n\n  this._tilingScheme = new GeographicTilingScheme({\n    numberOfLevelZeroTilesX: 2,\n    numberOfLevelZeroTilesY: 2,\n    rectangle: new Rectangle(\n      -CesiumMath.PI,\n      -CesiumMath.PI,\n      CesiumMath.PI,\n      CesiumMath.PI\n    ),\n    ellipsoid: options.ellipsoid,\n  });\n\n  var credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n  this._credit = credit;\n\n  this._tileWidth = 256;\n  this._tileHeight = 256;\n  this._maximumLevel = 23;\n\n  // Install the default tile discard policy if none has been supplied.\n  if (!defined(this._tileDiscardPolicy)) {\n    this._tileDiscardPolicy = new GoogleEarthEnterpriseDiscardPolicy();\n  }\n\n  this._errorEvent = new Event();\n\n  this._ready = false;\n  var that = this;\n  var metadataError;\n  this._readyPromise = metadata.readyPromise\n    .then(function (result) {\n      if (!metadata.imageryPresent) {\n        var e = new RuntimeError(\n          \"The server \" + metadata.url + \" doesn't have imagery\"\n        );\n        metadataError = TileProviderError.handleError(\n          metadataError,\n          that,\n          that._errorEvent,\n          e.message,\n          undefined,\n          undefined,\n          undefined,\n          e\n        );\n        return when.reject(e);\n      }\n\n      TileProviderError.handleSuccess(metadataError);\n      that._ready = result;\n      return result;\n    })\n    .otherwise(function (e) {\n      metadataError = TileProviderError.handleError(\n        metadataError,\n        that,\n        that._errorEvent,\n        e.message,\n        undefined,\n        undefined,\n        undefined,\n        e\n      );\n      return when.reject(e);\n    });\n}\n\nObject.defineProperties(GoogleEarthEnterpriseImageryProvider.prototype, {\n  /**\n   * Gets the name of the Google Earth Enterprise server url hosting the imagery.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._metadata.url;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._metadata.proxy;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tileWidth must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tileHeight must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"maximumLevel must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"minimumLevel must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return 0;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tilingScheme must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"rectangle must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tilingScheme.rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tileDiscardPolicy must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  Setting this property to false reduces memory usage\n   * and texture upload time.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return false;\n    },\n  },\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\nGoogleEarthEnterpriseImageryProvider.prototype.getTileCredits = function (\n  x,\n  y,\n  level\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this._ready) {\n    throw new DeveloperError(\n      \"getTileCredits must not be called before the imagery provider is ready.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var metadata = this._metadata;\n  var info = metadata.getTileInformation(x, y, level);\n  if (defined(info)) {\n    var credit = metadata.providers[info.imageryProvider];\n    if (defined(credit)) {\n      return [credit];\n    }\n  }\n\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<Image|Canvas>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\nGoogleEarthEnterpriseImageryProvider.prototype.requestImage = function (\n  x,\n  y,\n  level,\n  request\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this._ready) {\n    throw new DeveloperError(\n      \"requestImage must not be called before the imagery provider is ready.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var invalidImage = this._tileDiscardPolicy._image; // Empty image or undefined depending on discard policy\n  var metadata = this._metadata;\n  var quadKey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  var info = metadata.getTileInformation(x, y, level);\n  if (!defined(info)) {\n    if (metadata.isValid(quadKey)) {\n      var metadataRequest = new Request({\n        throttle: request.throttle,\n        throttleByServer: request.throttleByServer,\n        type: request.type,\n        priorityFunction: request.priorityFunction,\n      });\n      metadata.populateSubtree(x, y, level, metadataRequest);\n      return undefined; // No metadata so return undefined so we can be loaded later\n    }\n    return invalidImage; // Image doesn't exist\n  }\n\n  if (!info.hasImagery()) {\n    // Already have info and there isn't any imagery here\n    return invalidImage;\n  }\n  var promise = buildImageResource(\n    this,\n    info,\n    x,\n    y,\n    level,\n    request\n  ).fetchArrayBuffer();\n  if (!defined(promise)) {\n    return undefined; // Throttled\n  }\n\n  return promise.then(function (image) {\n    decodeGoogleEarthEnterpriseData(metadata.key, image);\n    var a = new Uint8Array(image);\n    var type;\n\n    var protoImagery = metadata.protoImagery;\n    if (!defined(protoImagery) || !protoImagery) {\n      type = getImageType(a);\n    }\n\n    if (!defined(type) && (!defined(protoImagery) || protoImagery)) {\n      var message = decodeEarthImageryPacket(a);\n      type = message.imageType;\n      a = message.imageData;\n    }\n\n    if (!defined(type) || !defined(a)) {\n      return invalidImage;\n    }\n\n    return loadImageFromTypedArray({\n      uint8Array: a,\n      format: type,\n      flipY: true,\n    });\n  });\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n */\nGoogleEarthEnterpriseImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude\n) {\n  return undefined;\n};\n\n//\n// Functions to handle imagery packets\n//\nfunction buildImageResource(imageryProvider, info, x, y, level, request) {\n  var quadKey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  var version = info.imageryVersion;\n  version = defined(version) && version > 0 ? version : 1;\n\n  return imageryProvider._metadata.resource.getDerivedResource({\n    url: \"flatfile?f1-0\" + quadKey + \"-i.\" + version.toString(),\n    request: request,\n  });\n}\n\n// Detects if a Uint8Array is a JPEG or PNG\nfunction getImageType(image) {\n  var jpeg = \"JFIF\";\n  if (\n    image[6] === jpeg.charCodeAt(0) &&\n    image[7] === jpeg.charCodeAt(1) &&\n    image[8] === jpeg.charCodeAt(2) &&\n    image[9] === jpeg.charCodeAt(3)\n  ) {\n    return \"image/jpeg\";\n  }\n\n  var png = \"PNG\";\n  if (\n    image[1] === png.charCodeAt(0) &&\n    image[2] === png.charCodeAt(1) &&\n    image[3] === png.charCodeAt(2)\n  ) {\n    return \"image/png\";\n  }\n\n  return undefined;\n}\n\n// Decodes an Imagery protobuf into the message\n// Partially generated with the help of protobuf.js static generator\nfunction decodeEarthImageryPacket(data) {\n  var reader = protobuf.Reader.create(data);\n  var end = reader.len;\n  var message = {};\n  while (reader.pos < end) {\n    var tag = reader.uint32();\n    switch (tag >>> 3) {\n      case 1:\n        message.imageType = reader.uint32();\n        break;\n      case 2:\n        message.imageData = reader.bytes();\n        break;\n      case 3:\n        message.alphaType = reader.uint32();\n        break;\n      case 4:\n        message.imageAlpha = reader.bytes();\n        break;\n      case 5:\n        var copyrightIds = message.copyrightIds;\n        if (!defined(copyrightIds)) {\n          copyrightIds = message.copyrightIds = [];\n        }\n        if ((tag & 7) === 2) {\n          var end2 = reader.uint32() + reader.pos;\n          while (reader.pos < end2) {\n            copyrightIds.push(reader.uint32());\n          }\n        } else {\n          copyrightIds.push(reader.uint32());\n        }\n        break;\n      default:\n        reader.skipType(tag & 7);\n        break;\n    }\n  }\n\n  var imageType = message.imageType;\n  if (defined(imageType)) {\n    switch (imageType) {\n      case 0:\n        message.imageType = \"image/jpeg\";\n        break;\n      case 4:\n        message.imageType = \"image/png\";\n        break;\n      default:\n        throw new RuntimeError(\n          \"GoogleEarthEnterpriseImageryProvider: Unsupported image type.\"\n        );\n    }\n  }\n\n  var alphaType = message.alphaType;\n  if (defined(alphaType) && alphaType !== 0) {\n    console.log(\n      \"GoogleEarthEnterpriseImageryProvider: External alpha not supported.\"\n    );\n    delete message.alphaType;\n    delete message.imageAlpha;\n  }\n\n  return message;\n}\nexport default GoogleEarthEnterpriseImageryProvider;\n"]},"metadata":{},"sourceType":"module"}