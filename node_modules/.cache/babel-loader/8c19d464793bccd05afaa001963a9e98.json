{"ast":null,"code":"import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n/**\n * Determines visibility based on the distance to the camera.\n *\n * @alias DistanceDisplayCondition\n * @constructor\n *\n * @param {Number} [near=0.0] The smallest distance in the interval where the object is visible.\n * @param {Number} [far=Number.MAX_VALUE] The largest distance in the interval where the object is visible.\n *\n * @example\n * // Make a billboard that is only visible when the distance to the camera is between 10 and 20 meters.\n * billboard.distanceDisplayCondition = new Cesium.DistanceDisplayCondition(10.0, 20.0);\n */\n\nfunction DistanceDisplayCondition(near, far) {\n  near = defaultValue(near, 0.0);\n  this._near = near;\n  far = defaultValue(far, Number.MAX_VALUE);\n  this._far = far;\n}\n\nObject.defineProperties(DistanceDisplayCondition.prototype, {\n  /**\n   * The smallest distance in the interval where the object is visible.\n   * @memberof DistanceDisplayCondition.prototype\n   * @type {Number}\n   * @default 0.0\n   */\n  near: {\n    get: function () {\n      return this._near;\n    },\n    set: function (value) {\n      this._near = value;\n    }\n  },\n\n  /**\n   * The largest distance in the interval where the object is visible.\n   * @memberof DistanceDisplayCondition.prototype\n   * @type {Number}\n   * @default Number.MAX_VALUE\n   */\n  far: {\n    get: function () {\n      return this._far;\n    },\n    set: function (value) {\n      this._far = value;\n    }\n  }\n});\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\n\nDistanceDisplayCondition.packedLength = 2;\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {DistanceDisplayCondition} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\n\nDistanceDisplayCondition.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  } //>>includeEnd('debug');\n\n\n  startingIndex = defaultValue(startingIndex, 0);\n  array[startingIndex++] = value.near;\n  array[startingIndex] = value.far;\n  return array;\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {DistanceDisplayCondition} [result] The object into which to store the result.\n * @returns {DistanceDisplayCondition} The modified result parameter or a new DistanceDisplayCondition instance if one was not provided.\n */\n\n\nDistanceDisplayCondition.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  } //>>includeEnd('debug');\n\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  if (!defined(result)) {\n    result = new DistanceDisplayCondition();\n  }\n\n  result.near = array[startingIndex++];\n  result.far = array[startingIndex];\n  return result;\n};\n/**\n * Determines if two distance display conditions are equal.\n *\n * @param {DistanceDisplayCondition} left A distance display condition.\n * @param {DistanceDisplayCondition} right Another distance display condition.\n * @return {Boolean} Whether the two distance display conditions are equal.\n */\n\n\nDistanceDisplayCondition.equals = function (left, right) {\n  return left === right || defined(left) && defined(right) && left.near === right.near && left.far === right.far;\n};\n/**\n * Duplicates a distance display condition instance.\n *\n * @param {DistanceDisplayCondition} [value] The distance display condition to duplicate.\n * @param {DistanceDisplayCondition} [result] The result onto which to store the result.\n * @return {DistanceDisplayCondition} The duplicated instance.\n */\n\n\nDistanceDisplayCondition.clone = function (value, result) {\n  if (!defined(value)) {\n    return undefined;\n  }\n\n  if (!defined(result)) {\n    result = new DistanceDisplayCondition();\n  }\n\n  result.near = value.near;\n  result.far = value.far;\n  return result;\n};\n/**\n * Duplicates this instance.\n *\n * @param {DistanceDisplayCondition} [result] The result onto which to store the result.\n * @return {DistanceDisplayCondition} The duplicated instance.\n */\n\n\nDistanceDisplayCondition.prototype.clone = function (result) {\n  return DistanceDisplayCondition.clone(this, result);\n};\n/**\n * Determines if this distance display condition is equal to another.\n *\n * @param {DistanceDisplayCondition} other Another distance display condition.\n * @return {Boolean} Whether this distance display condition is equal to the other.\n */\n\n\nDistanceDisplayCondition.prototype.equals = function (other) {\n  return DistanceDisplayCondition.equals(this, other);\n};\n\nexport default DistanceDisplayCondition;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/DistanceDisplayCondition.js"],"names":["defaultValue","defined","DeveloperError","DistanceDisplayCondition","near","far","_near","Number","MAX_VALUE","_far","Object","defineProperties","prototype","get","set","value","packedLength","pack","array","startingIndex","unpack","result","equals","left","right","clone","undefined","other"],"mappings":"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","sourcesContent":["import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Determines visibility based on the distance to the camera.\n *\n * @alias DistanceDisplayCondition\n * @constructor\n *\n * @param {Number} [near=0.0] The smallest distance in the interval where the object is visible.\n * @param {Number} [far=Number.MAX_VALUE] The largest distance in the interval where the object is visible.\n *\n * @example\n * // Make a billboard that is only visible when the distance to the camera is between 10 and 20 meters.\n * billboard.distanceDisplayCondition = new Cesium.DistanceDisplayCondition(10.0, 20.0);\n */\nfunction DistanceDisplayCondition(near, far) {\n  near = defaultValue(near, 0.0);\n  this._near = near;\n\n  far = defaultValue(far, Number.MAX_VALUE);\n  this._far = far;\n}\n\nObject.defineProperties(DistanceDisplayCondition.prototype, {\n  /**\n   * The smallest distance in the interval where the object is visible.\n   * @memberof DistanceDisplayCondition.prototype\n   * @type {Number}\n   * @default 0.0\n   */\n  near: {\n    get: function () {\n      return this._near;\n    },\n    set: function (value) {\n      this._near = value;\n    },\n  },\n  /**\n   * The largest distance in the interval where the object is visible.\n   * @memberof DistanceDisplayCondition.prototype\n   * @type {Number}\n   * @default Number.MAX_VALUE\n   */\n  far: {\n    get: function () {\n      return this._far;\n    },\n    set: function (value) {\n      this._far = value;\n    },\n  },\n});\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nDistanceDisplayCondition.packedLength = 2;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {DistanceDisplayCondition} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nDistanceDisplayCondition.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  array[startingIndex++] = value.near;\n  array[startingIndex] = value.far;\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {DistanceDisplayCondition} [result] The object into which to store the result.\n * @returns {DistanceDisplayCondition} The modified result parameter or a new DistanceDisplayCondition instance if one was not provided.\n */\nDistanceDisplayCondition.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  if (!defined(result)) {\n    result = new DistanceDisplayCondition();\n  }\n  result.near = array[startingIndex++];\n  result.far = array[startingIndex];\n  return result;\n};\n\n/**\n * Determines if two distance display conditions are equal.\n *\n * @param {DistanceDisplayCondition} left A distance display condition.\n * @param {DistanceDisplayCondition} right Another distance display condition.\n * @return {Boolean} Whether the two distance display conditions are equal.\n */\nDistanceDisplayCondition.equals = function (left, right) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      left.near === right.near &&\n      left.far === right.far)\n  );\n};\n\n/**\n * Duplicates a distance display condition instance.\n *\n * @param {DistanceDisplayCondition} [value] The distance display condition to duplicate.\n * @param {DistanceDisplayCondition} [result] The result onto which to store the result.\n * @return {DistanceDisplayCondition} The duplicated instance.\n */\nDistanceDisplayCondition.clone = function (value, result) {\n  if (!defined(value)) {\n    return undefined;\n  }\n\n  if (!defined(result)) {\n    result = new DistanceDisplayCondition();\n  }\n\n  result.near = value.near;\n  result.far = value.far;\n  return result;\n};\n\n/**\n * Duplicates this instance.\n *\n * @param {DistanceDisplayCondition} [result] The result onto which to store the result.\n * @return {DistanceDisplayCondition} The duplicated instance.\n */\nDistanceDisplayCondition.prototype.clone = function (result) {\n  return DistanceDisplayCondition.clone(this, result);\n};\n\n/**\n * Determines if this distance display condition is equal to another.\n *\n * @param {DistanceDisplayCondition} other Another distance display condition.\n * @return {Boolean} Whether this distance display condition is equal to the other.\n */\nDistanceDisplayCondition.prototype.equals = function (other) {\n  return DistanceDisplayCondition.equals(this, other);\n};\nexport default DistanceDisplayCondition;\n"]},"metadata":{},"sourceType":"module"}