{"ast":null,"code":"import Clock from \"../Core/Clock.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport knockout from \"../ThirdParty/knockout.js\";\n/**\n * A view model which exposes a {@link Clock} for user interfaces.\n * @alias ClockViewModel\n * @constructor\n *\n * @param {Clock} [clock] The clock object wrapped by this view model, if undefined a new instance will be created.\n *\n * @see Clock\n */\n\nfunction ClockViewModel(clock) {\n  if (!defined(clock)) {\n    clock = new Clock();\n  }\n\n  this._clock = clock;\n  this._eventHelper = new EventHelper();\n\n  this._eventHelper.add(clock.onTick, this.synchronize, this);\n  /**\n   * Gets the current system time.\n   * This property is observable.\n   * @type {JulianDate}\n   */\n\n\n  this.systemTime = knockout.observable(JulianDate.now());\n  this.systemTime.equalityComparer = JulianDate.equals;\n  /**\n   * Gets or sets the start time of the clock.\n   * See {@link Clock#startTime}.\n   * This property is observable.\n   * @type {JulianDate}\n   */\n\n  this.startTime = knockout.observable(clock.startTime);\n  this.startTime.equalityComparer = JulianDate.equals;\n  this.startTime.subscribe(function (value) {\n    clock.startTime = value;\n    this.synchronize();\n  }, this);\n  /**\n   * Gets or sets the stop time of the clock.\n   * See {@link Clock#stopTime}.\n   * This property is observable.\n   * @type {JulianDate}\n   */\n\n  this.stopTime = knockout.observable(clock.stopTime);\n  this.stopTime.equalityComparer = JulianDate.equals;\n  this.stopTime.subscribe(function (value) {\n    clock.stopTime = value;\n    this.synchronize();\n  }, this);\n  /**\n   * Gets or sets the current time.\n   * See {@link Clock#currentTime}.\n   * This property is observable.\n   * @type {JulianDate}\n   */\n\n  this.currentTime = knockout.observable(clock.currentTime);\n  this.currentTime.equalityComparer = JulianDate.equals;\n  this.currentTime.subscribe(function (value) {\n    clock.currentTime = value;\n    this.synchronize();\n  }, this);\n  /**\n   * Gets or sets the clock multiplier.\n   * See {@link Clock#multiplier}.\n   * This property is observable.\n   * @type {Number}\n   */\n\n  this.multiplier = knockout.observable(clock.multiplier);\n  this.multiplier.subscribe(function (value) {\n    clock.multiplier = value;\n    this.synchronize();\n  }, this);\n  /**\n   * Gets or sets the clock step setting.\n   * See {@link Clock#clockStep}.\n   * This property is observable.\n   * @type {ClockStep}\n   */\n\n  this.clockStep = knockout.observable(clock.clockStep);\n  this.clockStep.subscribe(function (value) {\n    clock.clockStep = value;\n    this.synchronize();\n  }, this);\n  /**\n   * Gets or sets the clock range setting.\n   * See {@link Clock#clockRange}.\n   * This property is observable.\n   * @type {ClockRange}\n   */\n\n  this.clockRange = knockout.observable(clock.clockRange);\n  this.clockRange.subscribe(function (value) {\n    clock.clockRange = value;\n    this.synchronize();\n  }, this);\n  /**\n   * Gets or sets whether the clock can animate.\n   * See {@link Clock#canAnimate}.\n   * This property is observable.\n   * @type {Boolean}\n   */\n\n  this.canAnimate = knockout.observable(clock.canAnimate);\n  this.canAnimate.subscribe(function (value) {\n    clock.canAnimate = value;\n    this.synchronize();\n  }, this);\n  /**\n   * Gets or sets whether the clock should animate.\n   * See {@link Clock#shouldAnimate}.\n   * This property is observable.\n   * @type {Boolean}\n   */\n\n  this.shouldAnimate = knockout.observable(clock.shouldAnimate);\n  this.shouldAnimate.subscribe(function (value) {\n    clock.shouldAnimate = value;\n    this.synchronize();\n  }, this);\n  knockout.track(this, [\"systemTime\", \"startTime\", \"stopTime\", \"currentTime\", \"multiplier\", \"clockStep\", \"clockRange\", \"canAnimate\", \"shouldAnimate\"]);\n}\n\nObject.defineProperties(ClockViewModel.prototype, {\n  /**\n   * Gets the underlying Clock.\n   * @memberof ClockViewModel.prototype\n   * @type {Clock}\n   */\n  clock: {\n    get: function get() {\n      return this._clock;\n    }\n  }\n});\n/**\n * Updates the view model with the contents of the underlying clock.\n * Can be called to force an update of the viewModel if the underlying\n * clock has changed and <code>Clock.tick</code> has not yet been called.\n */\n\nClockViewModel.prototype.synchronize = function () {\n  var clock = this._clock;\n  this.systemTime = JulianDate.now();\n  this.startTime = clock.startTime;\n  this.stopTime = clock.stopTime;\n  this.currentTime = clock.currentTime;\n  this.multiplier = clock.multiplier;\n  this.clockStep = clock.clockStep;\n  this.clockRange = clock.clockRange;\n  this.canAnimate = clock.canAnimate;\n  this.shouldAnimate = clock.shouldAnimate;\n};\n/**\n * @returns {Boolean} true if the object has been destroyed, false otherwise.\n */\n\n\nClockViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys the view model.  Should be called to\n * properly clean up the view model when it is no longer needed.\n */\n\n\nClockViewModel.prototype.destroy = function () {\n  this._eventHelper.removeAll();\n\n  destroyObject(this);\n};\n\nexport default ClockViewModel;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Widgets/ClockViewModel.js"],"names":["Clock","defined","destroyObject","EventHelper","JulianDate","knockout","ClockViewModel","clock","_clock","_eventHelper","add","onTick","synchronize","systemTime","observable","now","equalityComparer","equals","startTime","subscribe","value","stopTime","currentTime","multiplier","clockStep","clockRange","canAnimate","shouldAnimate","track","Object","defineProperties","prototype","get","isDestroyed","destroy","removeAll"],"mappings":"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","sourcesContent":["import Clock from \"../Core/Clock.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport knockout from \"../ThirdParty/knockout.js\";\n\n/**\n * A view model which exposes a {@link Clock} for user interfaces.\n * @alias ClockViewModel\n * @constructor\n *\n * @param {Clock} [clock] The clock object wrapped by this view model, if undefined a new instance will be created.\n *\n * @see Clock\n */\nfunction ClockViewModel(clock) {\n  if (!defined(clock)) {\n    clock = new Clock();\n  }\n  this._clock = clock;\n\n  this._eventHelper = new EventHelper();\n  this._eventHelper.add(clock.onTick, this.synchronize, this);\n\n  /**\n   * Gets the current system time.\n   * This property is observable.\n   * @type {JulianDate}\n   */\n  this.systemTime = knockout.observable(JulianDate.now());\n  this.systemTime.equalityComparer = JulianDate.equals;\n\n  /**\n   * Gets or sets the start time of the clock.\n   * See {@link Clock#startTime}.\n   * This property is observable.\n   * @type {JulianDate}\n   */\n  this.startTime = knockout.observable(clock.startTime);\n  this.startTime.equalityComparer = JulianDate.equals;\n  this.startTime.subscribe(function (value) {\n    clock.startTime = value;\n    this.synchronize();\n  }, this);\n\n  /**\n   * Gets or sets the stop time of the clock.\n   * See {@link Clock#stopTime}.\n   * This property is observable.\n   * @type {JulianDate}\n   */\n  this.stopTime = knockout.observable(clock.stopTime);\n  this.stopTime.equalityComparer = JulianDate.equals;\n  this.stopTime.subscribe(function (value) {\n    clock.stopTime = value;\n    this.synchronize();\n  }, this);\n\n  /**\n   * Gets or sets the current time.\n   * See {@link Clock#currentTime}.\n   * This property is observable.\n   * @type {JulianDate}\n   */\n  this.currentTime = knockout.observable(clock.currentTime);\n  this.currentTime.equalityComparer = JulianDate.equals;\n  this.currentTime.subscribe(function (value) {\n    clock.currentTime = value;\n    this.synchronize();\n  }, this);\n\n  /**\n   * Gets or sets the clock multiplier.\n   * See {@link Clock#multiplier}.\n   * This property is observable.\n   * @type {Number}\n   */\n  this.multiplier = knockout.observable(clock.multiplier);\n  this.multiplier.subscribe(function (value) {\n    clock.multiplier = value;\n    this.synchronize();\n  }, this);\n\n  /**\n   * Gets or sets the clock step setting.\n   * See {@link Clock#clockStep}.\n   * This property is observable.\n   * @type {ClockStep}\n   */\n  this.clockStep = knockout.observable(clock.clockStep);\n  this.clockStep.subscribe(function (value) {\n    clock.clockStep = value;\n    this.synchronize();\n  }, this);\n\n  /**\n   * Gets or sets the clock range setting.\n   * See {@link Clock#clockRange}.\n   * This property is observable.\n   * @type {ClockRange}\n   */\n  this.clockRange = knockout.observable(clock.clockRange);\n  this.clockRange.subscribe(function (value) {\n    clock.clockRange = value;\n    this.synchronize();\n  }, this);\n\n  /**\n   * Gets or sets whether the clock can animate.\n   * See {@link Clock#canAnimate}.\n   * This property is observable.\n   * @type {Boolean}\n   */\n  this.canAnimate = knockout.observable(clock.canAnimate);\n  this.canAnimate.subscribe(function (value) {\n    clock.canAnimate = value;\n    this.synchronize();\n  }, this);\n\n  /**\n   * Gets or sets whether the clock should animate.\n   * See {@link Clock#shouldAnimate}.\n   * This property is observable.\n   * @type {Boolean}\n   */\n  this.shouldAnimate = knockout.observable(clock.shouldAnimate);\n  this.shouldAnimate.subscribe(function (value) {\n    clock.shouldAnimate = value;\n    this.synchronize();\n  }, this);\n\n  knockout.track(this, [\n    \"systemTime\",\n    \"startTime\",\n    \"stopTime\",\n    \"currentTime\",\n    \"multiplier\",\n    \"clockStep\",\n    \"clockRange\",\n    \"canAnimate\",\n    \"shouldAnimate\",\n  ]);\n}\n\nObject.defineProperties(ClockViewModel.prototype, {\n  /**\n   * Gets the underlying Clock.\n   * @memberof ClockViewModel.prototype\n   * @type {Clock}\n   */\n  clock: {\n    get: function () {\n      return this._clock;\n    },\n  },\n});\n\n/**\n * Updates the view model with the contents of the underlying clock.\n * Can be called to force an update of the viewModel if the underlying\n * clock has changed and <code>Clock.tick</code> has not yet been called.\n */\nClockViewModel.prototype.synchronize = function () {\n  var clock = this._clock;\n\n  this.systemTime = JulianDate.now();\n  this.startTime = clock.startTime;\n  this.stopTime = clock.stopTime;\n  this.currentTime = clock.currentTime;\n  this.multiplier = clock.multiplier;\n  this.clockStep = clock.clockStep;\n  this.clockRange = clock.clockRange;\n  this.canAnimate = clock.canAnimate;\n  this.shouldAnimate = clock.shouldAnimate;\n};\n\n/**\n * @returns {Boolean} true if the object has been destroyed, false otherwise.\n */\nClockViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the view model.  Should be called to\n * properly clean up the view model when it is no longer needed.\n */\nClockViewModel.prototype.destroy = function () {\n  this._eventHelper.removeAll();\n\n  destroyObject(this);\n};\nexport default ClockViewModel;\n"]},"metadata":{},"sourceType":"module"}