{"ast":null,"code":"import Cartographic from \"../Core/Cartographic.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport ImageryLayerFeatureInfo from \"./ImageryLayerFeatureInfo.js\";\n/**\n * Describes the format in which to request GetFeatureInfo from a Web Map Service (WMS) server.\n *\n * @alias GetFeatureInfoFormat\n * @constructor\n *\n * @param {String} type The type of response to expect from a GetFeatureInfo request.  Valid\n *        values are 'json', 'xml', 'html', or 'text'.\n * @param {String} [format] The info format to request from the WMS server.  This is usually a\n *        MIME type such as 'application/json' or text/xml'.  If this parameter is not specified, the provider will request 'json'\n *        using 'application/json', 'xml' using 'text/xml', 'html' using 'text/html', and 'text' using 'text/plain'.\n * @param {Function} [callback] A function to invoke with the GetFeatureInfo response from the WMS server\n *        in order to produce an array of picked {@link ImageryLayerFeatureInfo} instances.  If this parameter is not specified,\n *        a default function for the type of response is used.\n */\n\nfunction GetFeatureInfoFormat(type, format, callback) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(type)) {\n    throw new DeveloperError(\"type is required.\");\n  } //>>includeEnd('debug');\n\n\n  this.type = type;\n\n  if (!defined(format)) {\n    if (type === \"json\") {\n      format = \"application/json\";\n    } else if (type === \"xml\") {\n      format = \"text/xml\";\n    } else if (type === \"html\") {\n      format = \"text/html\";\n    } else if (type === \"text\") {\n      format = \"text/plain\";\n    } //>>includeStart('debug', pragmas.debug);\n    else {\n        throw new DeveloperError('format is required when type is not \"json\", \"xml\", \"html\", or \"text\".');\n      } //>>includeEnd('debug');\n\n  }\n\n  this.format = format;\n\n  if (!defined(callback)) {\n    if (type === \"json\") {\n      callback = geoJsonToFeatureInfo;\n    } else if (type === \"xml\") {\n      callback = xmlToFeatureInfo;\n    } else if (type === \"html\") {\n      callback = textToFeatureInfo;\n    } else if (type === \"text\") {\n      callback = textToFeatureInfo;\n    } //>>includeStart('debug', pragmas.debug);\n    else {\n        throw new DeveloperError('callback is required when type is not \"json\", \"xml\", \"html\", or \"text\".');\n      } //>>includeEnd('debug');\n\n  }\n\n  this.callback = callback;\n}\n\nfunction geoJsonToFeatureInfo(json) {\n  var result = [];\n  var features = json.features;\n\n  for (var i = 0; i < features.length; ++i) {\n    var feature = features[i];\n    var featureInfo = new ImageryLayerFeatureInfo();\n    featureInfo.data = feature;\n    featureInfo.properties = feature.properties;\n    featureInfo.configureNameFromProperties(feature.properties);\n    featureInfo.configureDescriptionFromProperties(feature.properties); // If this is a point feature, use the coordinates of the point.\n\n    if (defined(feature.geometry) && feature.geometry.type === \"Point\") {\n      var longitude = feature.geometry.coordinates[0];\n      var latitude = feature.geometry.coordinates[1];\n      featureInfo.position = Cartographic.fromDegrees(longitude, latitude);\n    }\n\n    result.push(featureInfo);\n  }\n\n  return result;\n}\n\nvar mapInfoMxpNamespace = \"http://www.mapinfo.com/mxp\";\nvar esriWmsNamespace = \"http://www.esri.com/wms\";\nvar wfsNamespace = \"http://www.opengis.net/wfs\";\nvar gmlNamespace = \"http://www.opengis.net/gml\";\n\nfunction xmlToFeatureInfo(xml) {\n  var documentElement = xml.documentElement;\n\n  if (documentElement.localName === \"MultiFeatureCollection\" && documentElement.namespaceURI === mapInfoMxpNamespace) {\n    // This looks like a MapInfo MXP response\n    return mapInfoXmlToFeatureInfo(xml);\n  } else if (documentElement.localName === \"FeatureInfoResponse\" && documentElement.namespaceURI === esriWmsNamespace) {\n    // This looks like an Esri WMS response\n    return esriXmlToFeatureInfo(xml);\n  } else if (documentElement.localName === \"FeatureCollection\" && documentElement.namespaceURI === wfsNamespace) {\n    // This looks like a WFS/GML response.\n    return gmlToFeatureInfo(xml);\n  } else if (documentElement.localName === \"ServiceExceptionReport\") {\n    // This looks like a WMS server error, so no features picked.\n    throw new RuntimeError(new XMLSerializer().serializeToString(documentElement));\n  } else if (documentElement.localName === \"msGMLOutput\") {\n    return msGmlToFeatureInfo(xml);\n  } else {\n    // Unknown response type, so just dump the XML itself into the description.\n    return unknownXmlToFeatureInfo(xml);\n  }\n}\n\nfunction mapInfoXmlToFeatureInfo(xml) {\n  var result = [];\n  var multiFeatureCollection = xml.documentElement;\n  var features = multiFeatureCollection.getElementsByTagNameNS(mapInfoMxpNamespace, \"Feature\");\n\n  for (var featureIndex = 0; featureIndex < features.length; ++featureIndex) {\n    var feature = features[featureIndex];\n    var properties = {};\n    var propertyElements = feature.getElementsByTagNameNS(mapInfoMxpNamespace, \"Val\");\n\n    for (var propertyIndex = 0; propertyIndex < propertyElements.length; ++propertyIndex) {\n      var propertyElement = propertyElements[propertyIndex];\n\n      if (propertyElement.hasAttribute(\"ref\")) {\n        var name = propertyElement.getAttribute(\"ref\");\n        var value = propertyElement.textContent.trim();\n        properties[name] = value;\n      }\n    }\n\n    var featureInfo = new ImageryLayerFeatureInfo();\n    featureInfo.data = feature;\n    featureInfo.properties = properties;\n    featureInfo.configureNameFromProperties(properties);\n    featureInfo.configureDescriptionFromProperties(properties);\n    result.push(featureInfo);\n  }\n\n  return result;\n}\n\nfunction esriXmlToFeatureInfo(xml) {\n  var featureInfoResponse = xml.documentElement;\n  var result = [];\n  var properties;\n  var features = featureInfoResponse.getElementsByTagNameNS(\"*\", \"FIELDS\");\n\n  if (features.length > 0) {\n    // Standard esri format\n    for (var featureIndex = 0; featureIndex < features.length; ++featureIndex) {\n      var feature = features[featureIndex];\n      properties = {};\n      var propertyAttributes = feature.attributes;\n\n      for (var attributeIndex = 0; attributeIndex < propertyAttributes.length; ++attributeIndex) {\n        var attribute = propertyAttributes[attributeIndex];\n        properties[attribute.name] = attribute.value;\n      }\n\n      result.push(imageryLayerFeatureInfoFromDataAndProperties(feature, properties));\n    }\n  } else {\n    // Thredds format -- looks like esri, but instead of containing FIELDS, contains FeatureInfo element\n    var featureInfoElements = featureInfoResponse.getElementsByTagNameNS(\"*\", \"FeatureInfo\");\n\n    for (var featureInfoElementIndex = 0; featureInfoElementIndex < featureInfoElements.length; ++featureInfoElementIndex) {\n      var featureInfoElement = featureInfoElements[featureInfoElementIndex];\n      properties = {}; // node.children is not supported in IE9-11, so use childNodes and check that child.nodeType is an element\n\n      var featureInfoChildren = featureInfoElement.childNodes;\n\n      for (var childIndex = 0; childIndex < featureInfoChildren.length; ++childIndex) {\n        var child = featureInfoChildren[childIndex];\n\n        if (child.nodeType === Node.ELEMENT_NODE) {\n          properties[child.localName] = child.textContent;\n        }\n      }\n\n      result.push(imageryLayerFeatureInfoFromDataAndProperties(featureInfoElement, properties));\n    }\n  }\n\n  return result;\n}\n\nfunction gmlToFeatureInfo(xml) {\n  var result = [];\n  var featureCollection = xml.documentElement;\n  var featureMembers = featureCollection.getElementsByTagNameNS(gmlNamespace, \"featureMember\");\n\n  for (var featureIndex = 0; featureIndex < featureMembers.length; ++featureIndex) {\n    var featureMember = featureMembers[featureIndex];\n    var properties = {};\n    getGmlPropertiesRecursively(featureMember, properties);\n    result.push(imageryLayerFeatureInfoFromDataAndProperties(featureMember, properties));\n  }\n\n  return result;\n} // msGmlToFeatureInfo is similar to gmlToFeatureInfo, but assumes different XML structure\n// eg. <msGMLOutput> <ABC_layer> <ABC_feature> <foo>bar</foo> ... </ABC_feature> </ABC_layer> </msGMLOutput>\n\n\nfunction msGmlToFeatureInfo(xml) {\n  var result = []; // Find the first child. Except for IE, this would work:\n  // var layer = xml.documentElement.children[0];\n\n  var layer;\n  var children = xml.documentElement.childNodes;\n\n  for (var i = 0; i < children.length; i++) {\n    if (children[i].nodeType === Node.ELEMENT_NODE) {\n      layer = children[i];\n      break;\n    }\n  }\n\n  if (!defined(layer)) {\n    throw new RuntimeError(\"Unable to find first child of the feature info xml document\");\n  }\n\n  var featureMembers = layer.childNodes;\n\n  for (var featureIndex = 0; featureIndex < featureMembers.length; ++featureIndex) {\n    var featureMember = featureMembers[featureIndex];\n\n    if (featureMember.nodeType === Node.ELEMENT_NODE) {\n      var properties = {};\n      getGmlPropertiesRecursively(featureMember, properties);\n      result.push(imageryLayerFeatureInfoFromDataAndProperties(featureMember, properties));\n    }\n  }\n\n  return result;\n}\n\nfunction getGmlPropertiesRecursively(gmlNode, properties) {\n  var isSingleValue = true;\n\n  for (var i = 0; i < gmlNode.childNodes.length; ++i) {\n    var child = gmlNode.childNodes[i];\n\n    if (child.nodeType === Node.ELEMENT_NODE) {\n      isSingleValue = false;\n    }\n\n    if (child.localName === \"Point\" || child.localName === \"LineString\" || child.localName === \"Polygon\" || child.localName === \"boundedBy\") {\n      continue;\n    }\n\n    if (child.hasChildNodes() && getGmlPropertiesRecursively(child, properties)) {\n      properties[child.localName] = child.textContent;\n    }\n  }\n\n  return isSingleValue;\n}\n\nfunction imageryLayerFeatureInfoFromDataAndProperties(data, properties) {\n  var featureInfo = new ImageryLayerFeatureInfo();\n  featureInfo.data = data;\n  featureInfo.properties = properties;\n  featureInfo.configureNameFromProperties(properties);\n  featureInfo.configureDescriptionFromProperties(properties);\n  return featureInfo;\n}\n\nfunction unknownXmlToFeatureInfo(xml) {\n  var xmlText = new XMLSerializer().serializeToString(xml);\n  var element = document.createElement(\"div\");\n  var pre = document.createElement(\"pre\");\n  pre.textContent = xmlText;\n  element.appendChild(pre);\n  var featureInfo = new ImageryLayerFeatureInfo();\n  featureInfo.data = xml;\n  featureInfo.description = element.innerHTML;\n  return [featureInfo];\n}\n\nvar emptyBodyRegex = /<body>\\s*<\\/body>/im;\nvar wmsServiceExceptionReportRegex = /<ServiceExceptionReport([\\s\\S]*)<\\/ServiceExceptionReport>/im;\nvar titleRegex = /<title>([\\s\\S]*)<\\/title>/im;\n\nfunction textToFeatureInfo(text) {\n  // If the text is HTML and it has an empty body tag, assume it means no features were found.\n  if (emptyBodyRegex.test(text)) {\n    return undefined;\n  } // If this is a WMS exception report, treat it as \"no features found\" rather than showing\n  // bogus feature info.\n\n\n  if (wmsServiceExceptionReportRegex.test(text)) {\n    return undefined;\n  } // If the text has a <title> element, use it as the name.\n\n\n  var name;\n  var title = titleRegex.exec(text);\n\n  if (title && title.length > 1) {\n    name = title[1];\n  }\n\n  var featureInfo = new ImageryLayerFeatureInfo();\n  featureInfo.name = name;\n  featureInfo.description = text;\n  featureInfo.data = text;\n  return [featureInfo];\n}\n\nexport default GetFeatureInfoFormat;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/GetFeatureInfoFormat.js"],"names":["Cartographic","defined","DeveloperError","RuntimeError","ImageryLayerFeatureInfo","GetFeatureInfoFormat","type","format","callback","geoJsonToFeatureInfo","xmlToFeatureInfo","textToFeatureInfo","json","result","features","i","length","feature","featureInfo","data","properties","configureNameFromProperties","configureDescriptionFromProperties","geometry","longitude","coordinates","latitude","position","fromDegrees","push","mapInfoMxpNamespace","esriWmsNamespace","wfsNamespace","gmlNamespace","xml","documentElement","localName","namespaceURI","mapInfoXmlToFeatureInfo","esriXmlToFeatureInfo","gmlToFeatureInfo","XMLSerializer","serializeToString","msGmlToFeatureInfo","unknownXmlToFeatureInfo","multiFeatureCollection","getElementsByTagNameNS","featureIndex","propertyElements","propertyIndex","propertyElement","hasAttribute","name","getAttribute","value","textContent","trim","featureInfoResponse","propertyAttributes","attributes","attributeIndex","attribute","imageryLayerFeatureInfoFromDataAndProperties","featureInfoElements","featureInfoElementIndex","featureInfoElement","featureInfoChildren","childNodes","childIndex","child","nodeType","Node","ELEMENT_NODE","featureCollection","featureMembers","featureMember","getGmlPropertiesRecursively","layer","children","gmlNode","isSingleValue","hasChildNodes","xmlText","element","document","createElement","pre","appendChild","description","innerHTML","emptyBodyRegex","wmsServiceExceptionReportRegex","titleRegex","text","test","undefined","title","exec"],"mappings":"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","sourcesContent":["import Cartographic from \"../Core/Cartographic.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport ImageryLayerFeatureInfo from \"./ImageryLayerFeatureInfo.js\";\n\n/**\n * Describes the format in which to request GetFeatureInfo from a Web Map Service (WMS) server.\n *\n * @alias GetFeatureInfoFormat\n * @constructor\n *\n * @param {String} type The type of response to expect from a GetFeatureInfo request.  Valid\n *        values are 'json', 'xml', 'html', or 'text'.\n * @param {String} [format] The info format to request from the WMS server.  This is usually a\n *        MIME type such as 'application/json' or text/xml'.  If this parameter is not specified, the provider will request 'json'\n *        using 'application/json', 'xml' using 'text/xml', 'html' using 'text/html', and 'text' using 'text/plain'.\n * @param {Function} [callback] A function to invoke with the GetFeatureInfo response from the WMS server\n *        in order to produce an array of picked {@link ImageryLayerFeatureInfo} instances.  If this parameter is not specified,\n *        a default function for the type of response is used.\n */\nfunction GetFeatureInfoFormat(type, format, callback) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(type)) {\n    throw new DeveloperError(\"type is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.type = type;\n\n  if (!defined(format)) {\n    if (type === \"json\") {\n      format = \"application/json\";\n    } else if (type === \"xml\") {\n      format = \"text/xml\";\n    } else if (type === \"html\") {\n      format = \"text/html\";\n    } else if (type === \"text\") {\n      format = \"text/plain\";\n    }\n    //>>includeStart('debug', pragmas.debug);\n    else {\n      throw new DeveloperError(\n        'format is required when type is not \"json\", \"xml\", \"html\", or \"text\".'\n      );\n    }\n    //>>includeEnd('debug');\n  }\n\n  this.format = format;\n\n  if (!defined(callback)) {\n    if (type === \"json\") {\n      callback = geoJsonToFeatureInfo;\n    } else if (type === \"xml\") {\n      callback = xmlToFeatureInfo;\n    } else if (type === \"html\") {\n      callback = textToFeatureInfo;\n    } else if (type === \"text\") {\n      callback = textToFeatureInfo;\n    }\n    //>>includeStart('debug', pragmas.debug);\n    else {\n      throw new DeveloperError(\n        'callback is required when type is not \"json\", \"xml\", \"html\", or \"text\".'\n      );\n    }\n    //>>includeEnd('debug');\n  }\n\n  this.callback = callback;\n}\n\nfunction geoJsonToFeatureInfo(json) {\n  var result = [];\n\n  var features = json.features;\n  for (var i = 0; i < features.length; ++i) {\n    var feature = features[i];\n\n    var featureInfo = new ImageryLayerFeatureInfo();\n    featureInfo.data = feature;\n    featureInfo.properties = feature.properties;\n    featureInfo.configureNameFromProperties(feature.properties);\n    featureInfo.configureDescriptionFromProperties(feature.properties);\n\n    // If this is a point feature, use the coordinates of the point.\n    if (defined(feature.geometry) && feature.geometry.type === \"Point\") {\n      var longitude = feature.geometry.coordinates[0];\n      var latitude = feature.geometry.coordinates[1];\n      featureInfo.position = Cartographic.fromDegrees(longitude, latitude);\n    }\n\n    result.push(featureInfo);\n  }\n\n  return result;\n}\n\nvar mapInfoMxpNamespace = \"http://www.mapinfo.com/mxp\";\nvar esriWmsNamespace = \"http://www.esri.com/wms\";\nvar wfsNamespace = \"http://www.opengis.net/wfs\";\nvar gmlNamespace = \"http://www.opengis.net/gml\";\n\nfunction xmlToFeatureInfo(xml) {\n  var documentElement = xml.documentElement;\n  if (\n    documentElement.localName === \"MultiFeatureCollection\" &&\n    documentElement.namespaceURI === mapInfoMxpNamespace\n  ) {\n    // This looks like a MapInfo MXP response\n    return mapInfoXmlToFeatureInfo(xml);\n  } else if (\n    documentElement.localName === \"FeatureInfoResponse\" &&\n    documentElement.namespaceURI === esriWmsNamespace\n  ) {\n    // This looks like an Esri WMS response\n    return esriXmlToFeatureInfo(xml);\n  } else if (\n    documentElement.localName === \"FeatureCollection\" &&\n    documentElement.namespaceURI === wfsNamespace\n  ) {\n    // This looks like a WFS/GML response.\n    return gmlToFeatureInfo(xml);\n  } else if (documentElement.localName === \"ServiceExceptionReport\") {\n    // This looks like a WMS server error, so no features picked.\n    throw new RuntimeError(\n      new XMLSerializer().serializeToString(documentElement)\n    );\n  } else if (documentElement.localName === \"msGMLOutput\") {\n    return msGmlToFeatureInfo(xml);\n  } else {\n    // Unknown response type, so just dump the XML itself into the description.\n    return unknownXmlToFeatureInfo(xml);\n  }\n}\n\nfunction mapInfoXmlToFeatureInfo(xml) {\n  var result = [];\n\n  var multiFeatureCollection = xml.documentElement;\n\n  var features = multiFeatureCollection.getElementsByTagNameNS(\n    mapInfoMxpNamespace,\n    \"Feature\"\n  );\n  for (var featureIndex = 0; featureIndex < features.length; ++featureIndex) {\n    var feature = features[featureIndex];\n\n    var properties = {};\n\n    var propertyElements = feature.getElementsByTagNameNS(\n      mapInfoMxpNamespace,\n      \"Val\"\n    );\n    for (\n      var propertyIndex = 0;\n      propertyIndex < propertyElements.length;\n      ++propertyIndex\n    ) {\n      var propertyElement = propertyElements[propertyIndex];\n      if (propertyElement.hasAttribute(\"ref\")) {\n        var name = propertyElement.getAttribute(\"ref\");\n        var value = propertyElement.textContent.trim();\n        properties[name] = value;\n      }\n    }\n\n    var featureInfo = new ImageryLayerFeatureInfo();\n    featureInfo.data = feature;\n    featureInfo.properties = properties;\n    featureInfo.configureNameFromProperties(properties);\n    featureInfo.configureDescriptionFromProperties(properties);\n    result.push(featureInfo);\n  }\n\n  return result;\n}\n\nfunction esriXmlToFeatureInfo(xml) {\n  var featureInfoResponse = xml.documentElement;\n  var result = [];\n  var properties;\n\n  var features = featureInfoResponse.getElementsByTagNameNS(\"*\", \"FIELDS\");\n  if (features.length > 0) {\n    // Standard esri format\n    for (var featureIndex = 0; featureIndex < features.length; ++featureIndex) {\n      var feature = features[featureIndex];\n\n      properties = {};\n\n      var propertyAttributes = feature.attributes;\n      for (\n        var attributeIndex = 0;\n        attributeIndex < propertyAttributes.length;\n        ++attributeIndex\n      ) {\n        var attribute = propertyAttributes[attributeIndex];\n        properties[attribute.name] = attribute.value;\n      }\n\n      result.push(\n        imageryLayerFeatureInfoFromDataAndProperties(feature, properties)\n      );\n    }\n  } else {\n    // Thredds format -- looks like esri, but instead of containing FIELDS, contains FeatureInfo element\n    var featureInfoElements = featureInfoResponse.getElementsByTagNameNS(\n      \"*\",\n      \"FeatureInfo\"\n    );\n    for (\n      var featureInfoElementIndex = 0;\n      featureInfoElementIndex < featureInfoElements.length;\n      ++featureInfoElementIndex\n    ) {\n      var featureInfoElement = featureInfoElements[featureInfoElementIndex];\n\n      properties = {};\n\n      // node.children is not supported in IE9-11, so use childNodes and check that child.nodeType is an element\n      var featureInfoChildren = featureInfoElement.childNodes;\n      for (\n        var childIndex = 0;\n        childIndex < featureInfoChildren.length;\n        ++childIndex\n      ) {\n        var child = featureInfoChildren[childIndex];\n        if (child.nodeType === Node.ELEMENT_NODE) {\n          properties[child.localName] = child.textContent;\n        }\n      }\n\n      result.push(\n        imageryLayerFeatureInfoFromDataAndProperties(\n          featureInfoElement,\n          properties\n        )\n      );\n    }\n  }\n\n  return result;\n}\n\nfunction gmlToFeatureInfo(xml) {\n  var result = [];\n\n  var featureCollection = xml.documentElement;\n\n  var featureMembers = featureCollection.getElementsByTagNameNS(\n    gmlNamespace,\n    \"featureMember\"\n  );\n  for (\n    var featureIndex = 0;\n    featureIndex < featureMembers.length;\n    ++featureIndex\n  ) {\n    var featureMember = featureMembers[featureIndex];\n\n    var properties = {};\n    getGmlPropertiesRecursively(featureMember, properties);\n    result.push(\n      imageryLayerFeatureInfoFromDataAndProperties(featureMember, properties)\n    );\n  }\n\n  return result;\n}\n\n// msGmlToFeatureInfo is similar to gmlToFeatureInfo, but assumes different XML structure\n// eg. <msGMLOutput> <ABC_layer> <ABC_feature> <foo>bar</foo> ... </ABC_feature> </ABC_layer> </msGMLOutput>\n\nfunction msGmlToFeatureInfo(xml) {\n  var result = [];\n\n  // Find the first child. Except for IE, this would work:\n  // var layer = xml.documentElement.children[0];\n  var layer;\n  var children = xml.documentElement.childNodes;\n  for (var i = 0; i < children.length; i++) {\n    if (children[i].nodeType === Node.ELEMENT_NODE) {\n      layer = children[i];\n      break;\n    }\n  }\n  if (!defined(layer)) {\n    throw new RuntimeError(\n      \"Unable to find first child of the feature info xml document\"\n    );\n  }\n  var featureMembers = layer.childNodes;\n  for (\n    var featureIndex = 0;\n    featureIndex < featureMembers.length;\n    ++featureIndex\n  ) {\n    var featureMember = featureMembers[featureIndex];\n    if (featureMember.nodeType === Node.ELEMENT_NODE) {\n      var properties = {};\n      getGmlPropertiesRecursively(featureMember, properties);\n      result.push(\n        imageryLayerFeatureInfoFromDataAndProperties(featureMember, properties)\n      );\n    }\n  }\n\n  return result;\n}\n\nfunction getGmlPropertiesRecursively(gmlNode, properties) {\n  var isSingleValue = true;\n\n  for (var i = 0; i < gmlNode.childNodes.length; ++i) {\n    var child = gmlNode.childNodes[i];\n\n    if (child.nodeType === Node.ELEMENT_NODE) {\n      isSingleValue = false;\n    }\n\n    if (\n      child.localName === \"Point\" ||\n      child.localName === \"LineString\" ||\n      child.localName === \"Polygon\" ||\n      child.localName === \"boundedBy\"\n    ) {\n      continue;\n    }\n\n    if (\n      child.hasChildNodes() &&\n      getGmlPropertiesRecursively(child, properties)\n    ) {\n      properties[child.localName] = child.textContent;\n    }\n  }\n\n  return isSingleValue;\n}\n\nfunction imageryLayerFeatureInfoFromDataAndProperties(data, properties) {\n  var featureInfo = new ImageryLayerFeatureInfo();\n  featureInfo.data = data;\n  featureInfo.properties = properties;\n  featureInfo.configureNameFromProperties(properties);\n  featureInfo.configureDescriptionFromProperties(properties);\n  return featureInfo;\n}\n\nfunction unknownXmlToFeatureInfo(xml) {\n  var xmlText = new XMLSerializer().serializeToString(xml);\n\n  var element = document.createElement(\"div\");\n  var pre = document.createElement(\"pre\");\n  pre.textContent = xmlText;\n  element.appendChild(pre);\n\n  var featureInfo = new ImageryLayerFeatureInfo();\n  featureInfo.data = xml;\n  featureInfo.description = element.innerHTML;\n  return [featureInfo];\n}\n\nvar emptyBodyRegex = /<body>\\s*<\\/body>/im;\nvar wmsServiceExceptionReportRegex = /<ServiceExceptionReport([\\s\\S]*)<\\/ServiceExceptionReport>/im;\nvar titleRegex = /<title>([\\s\\S]*)<\\/title>/im;\n\nfunction textToFeatureInfo(text) {\n  // If the text is HTML and it has an empty body tag, assume it means no features were found.\n  if (emptyBodyRegex.test(text)) {\n    return undefined;\n  }\n\n  // If this is a WMS exception report, treat it as \"no features found\" rather than showing\n  // bogus feature info.\n  if (wmsServiceExceptionReportRegex.test(text)) {\n    return undefined;\n  }\n\n  // If the text has a <title> element, use it as the name.\n  var name;\n  var title = titleRegex.exec(text);\n  if (title && title.length > 1) {\n    name = title[1];\n  }\n\n  var featureInfo = new ImageryLayerFeatureInfo();\n  featureInfo.name = name;\n  featureInfo.description = text;\n  featureInfo.data = text;\n  return [featureInfo];\n}\nexport default GetFeatureInfoFormat;\n"]},"metadata":{},"sourceType":"module"}