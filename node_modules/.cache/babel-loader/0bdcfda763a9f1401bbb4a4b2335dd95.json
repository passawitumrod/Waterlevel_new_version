{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport Cartesian4 from \"./Cartesian4.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport RuntimeError from \"./RuntimeError.js\";\n/**\n * A 4x4 matrix, indexable as a column-major order array.\n * Constructor parameters are in row-major order for code readability.\n * @alias Matrix4\n * @constructor\n *\n * @param {Number} [column0Row0=0.0] The value for column 0, row 0.\n * @param {Number} [column1Row0=0.0] The value for column 1, row 0.\n * @param {Number} [column2Row0=0.0] The value for column 2, row 0.\n * @param {Number} [column3Row0=0.0] The value for column 3, row 0.\n * @param {Number} [column0Row1=0.0] The value for column 0, row 1.\n * @param {Number} [column1Row1=0.0] The value for column 1, row 1.\n * @param {Number} [column2Row1=0.0] The value for column 2, row 1.\n * @param {Number} [column3Row1=0.0] The value for column 3, row 1.\n * @param {Number} [column0Row2=0.0] The value for column 0, row 2.\n * @param {Number} [column1Row2=0.0] The value for column 1, row 2.\n * @param {Number} [column2Row2=0.0] The value for column 2, row 2.\n * @param {Number} [column3Row2=0.0] The value for column 3, row 2.\n * @param {Number} [column0Row3=0.0] The value for column 0, row 3.\n * @param {Number} [column1Row3=0.0] The value for column 1, row 3.\n * @param {Number} [column2Row3=0.0] The value for column 2, row 3.\n * @param {Number} [column3Row3=0.0] The value for column 3, row 3.\n *\n * @see Matrix4.fromColumnMajorArray\n * @see Matrix4.fromRowMajorArray\n * @see Matrix4.fromRotationTranslation\n * @see Matrix4.fromTranslationRotationScale\n * @see Matrix4.fromTranslationQuaternionRotationScale\n * @see Matrix4.fromTranslation\n * @see Matrix4.fromScale\n * @see Matrix4.fromUniformScale\n * @see Matrix4.fromCamera\n * @see Matrix4.computePerspectiveFieldOfView\n * @see Matrix4.computeOrthographicOffCenter\n * @see Matrix4.computePerspectiveOffCenter\n * @see Matrix4.computeInfinitePerspectiveOffCenter\n * @see Matrix4.computeViewportTransformation\n * @see Matrix4.computeView\n * @see Matrix2\n * @see Matrix3\n * @see Packable\n */\n\nfunction Matrix4(column0Row0, column1Row0, column2Row0, column3Row0, column0Row1, column1Row1, column2Row1, column3Row1, column0Row2, column1Row2, column2Row2, column3Row2, column0Row3, column1Row3, column2Row3, column3Row3) {\n  this[0] = defaultValue(column0Row0, 0.0);\n  this[1] = defaultValue(column0Row1, 0.0);\n  this[2] = defaultValue(column0Row2, 0.0);\n  this[3] = defaultValue(column0Row3, 0.0);\n  this[4] = defaultValue(column1Row0, 0.0);\n  this[5] = defaultValue(column1Row1, 0.0);\n  this[6] = defaultValue(column1Row2, 0.0);\n  this[7] = defaultValue(column1Row3, 0.0);\n  this[8] = defaultValue(column2Row0, 0.0);\n  this[9] = defaultValue(column2Row1, 0.0);\n  this[10] = defaultValue(column2Row2, 0.0);\n  this[11] = defaultValue(column2Row3, 0.0);\n  this[12] = defaultValue(column3Row0, 0.0);\n  this[13] = defaultValue(column3Row1, 0.0);\n  this[14] = defaultValue(column3Row2, 0.0);\n  this[15] = defaultValue(column3Row3, 0.0);\n}\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\n\n\nMatrix4.packedLength = 16;\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {Matrix4} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\n\nMatrix4.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array); //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  array[startingIndex++] = value[0];\n  array[startingIndex++] = value[1];\n  array[startingIndex++] = value[2];\n  array[startingIndex++] = value[3];\n  array[startingIndex++] = value[4];\n  array[startingIndex++] = value[5];\n  array[startingIndex++] = value[6];\n  array[startingIndex++] = value[7];\n  array[startingIndex++] = value[8];\n  array[startingIndex++] = value[9];\n  array[startingIndex++] = value[10];\n  array[startingIndex++] = value[11];\n  array[startingIndex++] = value[12];\n  array[startingIndex++] = value[13];\n  array[startingIndex++] = value[14];\n  array[startingIndex] = value[15];\n  return array;\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {Matrix4} [result] The object into which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\n */\n\n\nMatrix4.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array); //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  if (!defined(result)) {\n    result = new Matrix4();\n  }\n\n  result[0] = array[startingIndex++];\n  result[1] = array[startingIndex++];\n  result[2] = array[startingIndex++];\n  result[3] = array[startingIndex++];\n  result[4] = array[startingIndex++];\n  result[5] = array[startingIndex++];\n  result[6] = array[startingIndex++];\n  result[7] = array[startingIndex++];\n  result[8] = array[startingIndex++];\n  result[9] = array[startingIndex++];\n  result[10] = array[startingIndex++];\n  result[11] = array[startingIndex++];\n  result[12] = array[startingIndex++];\n  result[13] = array[startingIndex++];\n  result[14] = array[startingIndex++];\n  result[15] = array[startingIndex];\n  return result;\n};\n/**\n * Duplicates a Matrix4 instance.\n *\n * @param {Matrix4} matrix The matrix to duplicate.\n * @param {Matrix4} [result] The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided. (Returns undefined if matrix is undefined)\n */\n\n\nMatrix4.clone = function (matrix, result) {\n  if (!defined(matrix)) {\n    return undefined;\n  }\n\n  if (!defined(result)) {\n    return new Matrix4(matrix[0], matrix[4], matrix[8], matrix[12], matrix[1], matrix[5], matrix[9], matrix[13], matrix[2], matrix[6], matrix[10], matrix[14], matrix[3], matrix[7], matrix[11], matrix[15]);\n  }\n\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[3];\n  result[4] = matrix[4];\n  result[5] = matrix[5];\n  result[6] = matrix[6];\n  result[7] = matrix[7];\n  result[8] = matrix[8];\n  result[9] = matrix[9];\n  result[10] = matrix[10];\n  result[11] = matrix[11];\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n  return result;\n};\n/**\n * Creates a Matrix4 from 16 consecutive elements in an array.\n * @function\n *\n * @param {Number[]} array The array whose 16 consecutive elements correspond to the positions of the matrix.  Assumes column-major order.\n * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to first column first row position in the matrix.\n * @param {Matrix4} [result] The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\n *\n * @example\n * // Create the Matrix4:\n * // [1.0, 2.0, 3.0, 4.0]\n * // [1.0, 2.0, 3.0, 4.0]\n * // [1.0, 2.0, 3.0, 4.0]\n * // [1.0, 2.0, 3.0, 4.0]\n *\n * var v = [1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0];\n * var m = Cesium.Matrix4.fromArray(v);\n *\n * // Create same Matrix4 with using an offset into an array\n * var v2 = [0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0];\n * var m2 = Cesium.Matrix4.fromArray(v2, 2);\n */\n\n\nMatrix4.fromArray = Matrix4.unpack;\n/**\n * Computes a Matrix4 instance from a column-major order array.\n *\n * @param {Number[]} values The column-major order array.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\n\nMatrix4.fromColumnMajorArray = function (values, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"values\", values); //>>includeEnd('debug');\n\n  return Matrix4.clone(values, result);\n};\n/**\n * Computes a Matrix4 instance from a row-major order array.\n * The resulting matrix will be in column-major order.\n *\n * @param {Number[]} values The row-major order array.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\n\n\nMatrix4.fromRowMajorArray = function (values, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"values\", values); //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Matrix4(values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15]);\n  }\n\n  result[0] = values[0];\n  result[1] = values[4];\n  result[2] = values[8];\n  result[3] = values[12];\n  result[4] = values[1];\n  result[5] = values[5];\n  result[6] = values[9];\n  result[7] = values[13];\n  result[8] = values[2];\n  result[9] = values[6];\n  result[10] = values[10];\n  result[11] = values[14];\n  result[12] = values[3];\n  result[13] = values[7];\n  result[14] = values[11];\n  result[15] = values[15];\n  return result;\n};\n/**\n * Computes a Matrix4 instance from a Matrix3 representing the rotation\n * and a Cartesian3 representing the translation.\n *\n * @param {Matrix3} rotation The upper left portion of the matrix representing the rotation.\n * @param {Cartesian3} [translation=Cartesian3.ZERO] The upper right portion of the matrix representing the translation.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\n\n\nMatrix4.fromRotationTranslation = function (rotation, translation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"rotation\", rotation); //>>includeEnd('debug');\n\n  translation = defaultValue(translation, Cartesian3.ZERO);\n\n  if (!defined(result)) {\n    return new Matrix4(rotation[0], rotation[3], rotation[6], translation.x, rotation[1], rotation[4], rotation[7], translation.y, rotation[2], rotation[5], rotation[8], translation.z, 0.0, 0.0, 0.0, 1.0);\n  }\n\n  result[0] = rotation[0];\n  result[1] = rotation[1];\n  result[2] = rotation[2];\n  result[3] = 0.0;\n  result[4] = rotation[3];\n  result[5] = rotation[4];\n  result[6] = rotation[5];\n  result[7] = 0.0;\n  result[8] = rotation[6];\n  result[9] = rotation[7];\n  result[10] = rotation[8];\n  result[11] = 0.0;\n  result[12] = translation.x;\n  result[13] = translation.y;\n  result[14] = translation.z;\n  result[15] = 1.0;\n  return result;\n};\n/**\n * Computes a Matrix4 instance from a translation, rotation, and scale (TRS)\n * representation with the rotation represented as a quaternion.\n *\n * @param {Cartesian3} translation The translation transformation.\n * @param {Quaternion} rotation The rotation transformation.\n * @param {Cartesian3} scale The non-uniform scale transformation.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n *\n * @example\n * var result = Cesium.Matrix4.fromTranslationQuaternionRotationScale(\n *   new Cesium.Cartesian3(1.0, 2.0, 3.0), // translation\n *   Cesium.Quaternion.IDENTITY,           // rotation\n *   new Cesium.Cartesian3(7.0, 8.0, 9.0), // scale\n *   result);\n */\n\n\nMatrix4.fromTranslationQuaternionRotationScale = function (translation, rotation, scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"translation\", translation);\n  Check.typeOf.object(\"rotation\", rotation);\n  Check.typeOf.object(\"scale\", scale); //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Matrix4();\n  }\n\n  var scaleX = scale.x;\n  var scaleY = scale.y;\n  var scaleZ = scale.z;\n  var x2 = rotation.x * rotation.x;\n  var xy = rotation.x * rotation.y;\n  var xz = rotation.x * rotation.z;\n  var xw = rotation.x * rotation.w;\n  var y2 = rotation.y * rotation.y;\n  var yz = rotation.y * rotation.z;\n  var yw = rotation.y * rotation.w;\n  var z2 = rotation.z * rotation.z;\n  var zw = rotation.z * rotation.w;\n  var w2 = rotation.w * rotation.w;\n  var m00 = x2 - y2 - z2 + w2;\n  var m01 = 2.0 * (xy - zw);\n  var m02 = 2.0 * (xz + yw);\n  var m10 = 2.0 * (xy + zw);\n  var m11 = -x2 + y2 - z2 + w2;\n  var m12 = 2.0 * (yz - xw);\n  var m20 = 2.0 * (xz - yw);\n  var m21 = 2.0 * (yz + xw);\n  var m22 = -x2 - y2 + z2 + w2;\n  result[0] = m00 * scaleX;\n  result[1] = m10 * scaleX;\n  result[2] = m20 * scaleX;\n  result[3] = 0.0;\n  result[4] = m01 * scaleY;\n  result[5] = m11 * scaleY;\n  result[6] = m21 * scaleY;\n  result[7] = 0.0;\n  result[8] = m02 * scaleZ;\n  result[9] = m12 * scaleZ;\n  result[10] = m22 * scaleZ;\n  result[11] = 0.0;\n  result[12] = translation.x;\n  result[13] = translation.y;\n  result[14] = translation.z;\n  result[15] = 1.0;\n  return result;\n};\n/**\n * Creates a Matrix4 instance from a {@link TranslationRotationScale} instance.\n *\n * @param {TranslationRotationScale} translationRotationScale The instance.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\n\n\nMatrix4.fromTranslationRotationScale = function (translationRotationScale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"translationRotationScale\", translationRotationScale); //>>includeEnd('debug');\n\n  return Matrix4.fromTranslationQuaternionRotationScale(translationRotationScale.translation, translationRotationScale.rotation, translationRotationScale.scale, result);\n};\n/**\n * Creates a Matrix4 instance from a Cartesian3 representing the translation.\n *\n * @param {Cartesian3} translation The upper right portion of the matrix representing the translation.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n *\n * @see Matrix4.multiplyByTranslation\n */\n\n\nMatrix4.fromTranslation = function (translation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"translation\", translation); //>>includeEnd('debug');\n\n  return Matrix4.fromRotationTranslation(Matrix3.IDENTITY, translation, result);\n};\n/**\n * Computes a Matrix4 instance representing a non-uniform scale.\n *\n * @param {Cartesian3} scale The x, y, and z scale factors.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n *\n * @example\n * // Creates\n * //   [7.0, 0.0, 0.0, 0.0]\n * //   [0.0, 8.0, 0.0, 0.0]\n * //   [0.0, 0.0, 9.0, 0.0]\n * //   [0.0, 0.0, 0.0, 1.0]\n * var m = Cesium.Matrix4.fromScale(new Cesium.Cartesian3(7.0, 8.0, 9.0));\n */\n\n\nMatrix4.fromScale = function (scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"scale\", scale); //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Matrix4(scale.x, 0.0, 0.0, 0.0, 0.0, scale.y, 0.0, 0.0, 0.0, 0.0, scale.z, 0.0, 0.0, 0.0, 0.0, 1.0);\n  }\n\n  result[0] = scale.x;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = scale.y;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 0.0;\n  result[9] = 0.0;\n  result[10] = scale.z;\n  result[11] = 0.0;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = 0.0;\n  result[15] = 1.0;\n  return result;\n};\n/**\n * Computes a Matrix4 instance representing a uniform scale.\n *\n * @param {Number} scale The uniform scale factor.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n *\n * @example\n * // Creates\n * //   [2.0, 0.0, 0.0, 0.0]\n * //   [0.0, 2.0, 0.0, 0.0]\n * //   [0.0, 0.0, 2.0, 0.0]\n * //   [0.0, 0.0, 0.0, 1.0]\n * var m = Cesium.Matrix4.fromUniformScale(2.0);\n */\n\n\nMatrix4.fromUniformScale = function (scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"scale\", scale); //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Matrix4(scale, 0.0, 0.0, 0.0, 0.0, scale, 0.0, 0.0, 0.0, 0.0, scale, 0.0, 0.0, 0.0, 0.0, 1.0);\n  }\n\n  result[0] = scale;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = scale;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 0.0;\n  result[9] = 0.0;\n  result[10] = scale;\n  result[11] = 0.0;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = 0.0;\n  result[15] = 1.0;\n  return result;\n};\n\nvar fromCameraF = new Cartesian3();\nvar fromCameraR = new Cartesian3();\nvar fromCameraU = new Cartesian3();\n/**\n * Computes a Matrix4 instance from a Camera.\n *\n * @param {Camera} camera The camera to use.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\n\nMatrix4.fromCamera = function (camera, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"camera\", camera); //>>includeEnd('debug');\n\n  var position = camera.position;\n  var direction = camera.direction;\n  var up = camera.up; //>>includeStart('debug', pragmas.debug);\n\n  Check.typeOf.object(\"camera.position\", position);\n  Check.typeOf.object(\"camera.direction\", direction);\n  Check.typeOf.object(\"camera.up\", up); //>>includeEnd('debug');\n\n  Cartesian3.normalize(direction, fromCameraF);\n  Cartesian3.normalize(Cartesian3.cross(fromCameraF, up, fromCameraR), fromCameraR);\n  Cartesian3.normalize(Cartesian3.cross(fromCameraR, fromCameraF, fromCameraU), fromCameraU);\n  var sX = fromCameraR.x;\n  var sY = fromCameraR.y;\n  var sZ = fromCameraR.z;\n  var fX = fromCameraF.x;\n  var fY = fromCameraF.y;\n  var fZ = fromCameraF.z;\n  var uX = fromCameraU.x;\n  var uY = fromCameraU.y;\n  var uZ = fromCameraU.z;\n  var positionX = position.x;\n  var positionY = position.y;\n  var positionZ = position.z;\n  var t0 = sX * -positionX + sY * -positionY + sZ * -positionZ;\n  var t1 = uX * -positionX + uY * -positionY + uZ * -positionZ;\n  var t2 = fX * positionX + fY * positionY + fZ * positionZ; // The code below this comment is an optimized\n  // version of the commented lines.\n  // Rather that create two matrices and then multiply,\n  // we just bake in the multiplcation as part of creation.\n  // var rotation = new Matrix4(\n  //                 sX,  sY,  sZ, 0.0,\n  //                 uX,  uY,  uZ, 0.0,\n  //                -fX, -fY, -fZ, 0.0,\n  //                 0.0,  0.0,  0.0, 1.0);\n  // var translation = new Matrix4(\n  //                 1.0, 0.0, 0.0, -position.x,\n  //                 0.0, 1.0, 0.0, -position.y,\n  //                 0.0, 0.0, 1.0, -position.z,\n  //                 0.0, 0.0, 0.0, 1.0);\n  // return rotation.multiply(translation);\n\n  if (!defined(result)) {\n    return new Matrix4(sX, sY, sZ, t0, uX, uY, uZ, t1, -fX, -fY, -fZ, t2, 0.0, 0.0, 0.0, 1.0);\n  }\n\n  result[0] = sX;\n  result[1] = uX;\n  result[2] = -fX;\n  result[3] = 0.0;\n  result[4] = sY;\n  result[5] = uY;\n  result[6] = -fY;\n  result[7] = 0.0;\n  result[8] = sZ;\n  result[9] = uZ;\n  result[10] = -fZ;\n  result[11] = 0.0;\n  result[12] = t0;\n  result[13] = t1;\n  result[14] = t2;\n  result[15] = 1.0;\n  return result;\n};\n/**\n * Computes a Matrix4 instance representing a perspective transformation matrix.\n *\n * @param {Number} fovY The field of view along the Y axis in radians.\n * @param {Number} aspectRatio The aspect ratio.\n * @param {Number} near The distance to the near plane in meters.\n * @param {Number} far The distance to the far plane in meters.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n *\n * @exception {DeveloperError} fovY must be in (0, PI].\n * @exception {DeveloperError} aspectRatio must be greater than zero.\n * @exception {DeveloperError} near must be greater than zero.\n * @exception {DeveloperError} far must be greater than zero.\n */\n\n\nMatrix4.computePerspectiveFieldOfView = function (fovY, aspectRatio, near, far, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThan(\"fovY\", fovY, 0.0);\n  Check.typeOf.number.lessThan(\"fovY\", fovY, Math.PI);\n  Check.typeOf.number.greaterThan(\"near\", near, 0.0);\n  Check.typeOf.number.greaterThan(\"far\", far, 0.0);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  var bottom = Math.tan(fovY * 0.5);\n  var column1Row1 = 1.0 / bottom;\n  var column0Row0 = column1Row1 / aspectRatio;\n  var column2Row2 = (far + near) / (near - far);\n  var column3Row2 = 2.0 * far * near / (near - far);\n  result[0] = column0Row0;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = column1Row1;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 0.0;\n  result[9] = 0.0;\n  result[10] = column2Row2;\n  result[11] = -1.0;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = column3Row2;\n  result[15] = 0.0;\n  return result;\n};\n/**\n * Computes a Matrix4 instance representing an orthographic transformation matrix.\n *\n * @param {Number} left The number of meters to the left of the camera that will be in view.\n * @param {Number} right The number of meters to the right of the camera that will be in view.\n * @param {Number} bottom The number of meters below of the camera that will be in view.\n * @param {Number} top The number of meters above of the camera that will be in view.\n * @param {Number} near The distance to the near plane in meters.\n * @param {Number} far The distance to the far plane in meters.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n */\n\n\nMatrix4.computeOrthographicOffCenter = function (left, right, bottom, top, near, far, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"left\", left);\n  Check.typeOf.number(\"right\", right);\n  Check.typeOf.number(\"bottom\", bottom);\n  Check.typeOf.number(\"top\", top);\n  Check.typeOf.number(\"near\", near);\n  Check.typeOf.number(\"far\", far);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  var a = 1.0 / (right - left);\n  var b = 1.0 / (top - bottom);\n  var c = 1.0 / (far - near);\n  var tx = -(right + left) * a;\n  var ty = -(top + bottom) * b;\n  var tz = -(far + near) * c;\n  a *= 2.0;\n  b *= 2.0;\n  c *= -2.0;\n  result[0] = a;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = b;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 0.0;\n  result[9] = 0.0;\n  result[10] = c;\n  result[11] = 0.0;\n  result[12] = tx;\n  result[13] = ty;\n  result[14] = tz;\n  result[15] = 1.0;\n  return result;\n};\n/**\n * Computes a Matrix4 instance representing an off center perspective transformation.\n *\n * @param {Number} left The number of meters to the left of the camera that will be in view.\n * @param {Number} right The number of meters to the right of the camera that will be in view.\n * @param {Number} bottom The number of meters below of the camera that will be in view.\n * @param {Number} top The number of meters above of the camera that will be in view.\n * @param {Number} near The distance to the near plane in meters.\n * @param {Number} far The distance to the far plane in meters.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n */\n\n\nMatrix4.computePerspectiveOffCenter = function (left, right, bottom, top, near, far, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"left\", left);\n  Check.typeOf.number(\"right\", right);\n  Check.typeOf.number(\"bottom\", bottom);\n  Check.typeOf.number(\"top\", top);\n  Check.typeOf.number(\"near\", near);\n  Check.typeOf.number(\"far\", far);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  var column0Row0 = 2.0 * near / (right - left);\n  var column1Row1 = 2.0 * near / (top - bottom);\n  var column2Row0 = (right + left) / (right - left);\n  var column2Row1 = (top + bottom) / (top - bottom);\n  var column2Row2 = -(far + near) / (far - near);\n  var column2Row3 = -1.0;\n  var column3Row2 = -2.0 * far * near / (far - near);\n  result[0] = column0Row0;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = column1Row1;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = column2Row3;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = column3Row2;\n  result[15] = 0.0;\n  return result;\n};\n/**\n * Computes a Matrix4 instance representing an infinite off center perspective transformation.\n *\n * @param {Number} left The number of meters to the left of the camera that will be in view.\n * @param {Number} right The number of meters to the right of the camera that will be in view.\n * @param {Number} bottom The number of meters below of the camera that will be in view.\n * @param {Number} top The number of meters above of the camera that will be in view.\n * @param {Number} near The distance to the near plane in meters.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n */\n\n\nMatrix4.computeInfinitePerspectiveOffCenter = function (left, right, bottom, top, near, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"left\", left);\n  Check.typeOf.number(\"right\", right);\n  Check.typeOf.number(\"bottom\", bottom);\n  Check.typeOf.number(\"top\", top);\n  Check.typeOf.number(\"near\", near);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  var column0Row0 = 2.0 * near / (right - left);\n  var column1Row1 = 2.0 * near / (top - bottom);\n  var column2Row0 = (right + left) / (right - left);\n  var column2Row1 = (top + bottom) / (top - bottom);\n  var column2Row2 = -1.0;\n  var column2Row3 = -1.0;\n  var column3Row2 = -2.0 * near;\n  result[0] = column0Row0;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = column1Row1;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = column2Row3;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = column3Row2;\n  result[15] = 0.0;\n  return result;\n};\n/**\n * Computes a Matrix4 instance that transforms from normalized device coordinates to window coordinates.\n *\n * @param {Object}[viewport = { x : 0.0, y : 0.0, width : 0.0, height : 0.0 }] The viewport's corners as shown in Example 1.\n * @param {Number}[nearDepthRange=0.0] The near plane distance in window coordinates.\n * @param {Number}[farDepthRange=1.0] The far plane distance in window coordinates.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * // Create viewport transformation using an explicit viewport and depth range.\n * var m = Cesium.Matrix4.computeViewportTransformation({\n *     x : 0.0,\n *     y : 0.0,\n *     width : 1024.0,\n *     height : 768.0\n * }, 0.0, 1.0, new Cesium.Matrix4());\n */\n\n\nMatrix4.computeViewportTransformation = function (viewport, nearDepthRange, farDepthRange, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  viewport = defaultValue(viewport, defaultValue.EMPTY_OBJECT);\n  var x = defaultValue(viewport.x, 0.0);\n  var y = defaultValue(viewport.y, 0.0);\n  var width = defaultValue(viewport.width, 0.0);\n  var height = defaultValue(viewport.height, 0.0);\n  nearDepthRange = defaultValue(nearDepthRange, 0.0);\n  farDepthRange = defaultValue(farDepthRange, 1.0);\n  var halfWidth = width * 0.5;\n  var halfHeight = height * 0.5;\n  var halfDepth = (farDepthRange - nearDepthRange) * 0.5;\n  var column0Row0 = halfWidth;\n  var column1Row1 = halfHeight;\n  var column2Row2 = halfDepth;\n  var column3Row0 = x + halfWidth;\n  var column3Row1 = y + halfHeight;\n  var column3Row2 = nearDepthRange + halfDepth;\n  var column3Row3 = 1.0;\n  result[0] = column0Row0;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = column1Row1;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 0.0;\n  result[9] = 0.0;\n  result[10] = column2Row2;\n  result[11] = 0.0;\n  result[12] = column3Row0;\n  result[13] = column3Row1;\n  result[14] = column3Row2;\n  result[15] = column3Row3;\n  return result;\n};\n/**\n * Computes a Matrix4 instance that transforms from world space to view space.\n *\n * @param {Cartesian3} position The position of the camera.\n * @param {Cartesian3} direction The forward direction.\n * @param {Cartesian3} up The up direction.\n * @param {Cartesian3} right The right direction.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n */\n\n\nMatrix4.computeView = function (position, direction, up, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"position\", position);\n  Check.typeOf.object(\"direction\", direction);\n  Check.typeOf.object(\"up\", up);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  result[0] = right.x;\n  result[1] = up.x;\n  result[2] = -direction.x;\n  result[3] = 0.0;\n  result[4] = right.y;\n  result[5] = up.y;\n  result[6] = -direction.y;\n  result[7] = 0.0;\n  result[8] = right.z;\n  result[9] = up.z;\n  result[10] = -direction.z;\n  result[11] = 0.0;\n  result[12] = -Cartesian3.dot(right, position);\n  result[13] = -Cartesian3.dot(up, position);\n  result[14] = Cartesian3.dot(direction, position);\n  result[15] = 1.0;\n  return result;\n};\n/**\n * Computes an Array from the provided Matrix4 instance.\n * The array will be in column-major order.\n *\n * @param {Matrix4} matrix The matrix to use..\n * @param {Number[]} [result] The Array onto which to store the result.\n * @returns {Number[]} The modified Array parameter or a new Array instance if one was not provided.\n *\n * @example\n * //create an array from an instance of Matrix4\n * // m = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n * var a = Cesium.Matrix4.toArray(m);\n *\n * // m remains the same\n * //creates a = [10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0]\n */\n\n\nMatrix4.toArray = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix); //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return [matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5], matrix[6], matrix[7], matrix[8], matrix[9], matrix[10], matrix[11], matrix[12], matrix[13], matrix[14], matrix[15]];\n  }\n\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[3];\n  result[4] = matrix[4];\n  result[5] = matrix[5];\n  result[6] = matrix[6];\n  result[7] = matrix[7];\n  result[8] = matrix[8];\n  result[9] = matrix[9];\n  result[10] = matrix[10];\n  result[11] = matrix[11];\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n  return result;\n};\n/**\n * Computes the array index of the element at the provided row and column.\n *\n * @param {Number} row The zero-based index of the row.\n * @param {Number} column The zero-based index of the column.\n * @returns {Number} The index of the element at the provided row and column.\n *\n * @exception {DeveloperError} row must be 0, 1, 2, or 3.\n * @exception {DeveloperError} column must be 0, 1, 2, or 3.\n *\n * @example\n * var myMatrix = new Cesium.Matrix4();\n * var column1Row0Index = Cesium.Matrix4.getElementIndex(1, 0);\n * var column1Row0 = myMatrix[column1Row0Index];\n * myMatrix[column1Row0Index] = 10.0;\n */\n\n\nMatrix4.getElementIndex = function (column, row) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\"row\", row, 0);\n  Check.typeOf.number.lessThanOrEquals(\"row\", row, 3);\n  Check.typeOf.number.greaterThanOrEquals(\"column\", column, 0);\n  Check.typeOf.number.lessThanOrEquals(\"column\", column, 3); //>>includeEnd('debug');\n\n  return column * 4 + row;\n};\n/**\n * Retrieves a copy of the matrix column at the provided index as a Cartesian4 instance.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Number} index The zero-based index of the column to retrieve.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n *\n * @exception {DeveloperError} index must be 0, 1, 2, or 3.\n *\n * @example\n * //returns a Cartesian4 instance with values from the specified column\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * //Example 1: Creates an instance of Cartesian\n * var a = Cesium.Matrix4.getColumn(m, 2, new Cesium.Cartesian4());\n *\n * @example\n * //Example 2: Sets values for Cartesian instance\n * var a = new Cesium.Cartesian4();\n * Cesium.Matrix4.getColumn(m, 2, a);\n *\n * // a.x = 12.0; a.y = 16.0; a.z = 20.0; a.w = 24.0;\n */\n\n\nMatrix4.getColumn = function (matrix, index, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  Check.typeOf.number.lessThanOrEquals(\"index\", index, 3);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  var startIndex = index * 4;\n  var x = matrix[startIndex];\n  var y = matrix[startIndex + 1];\n  var z = matrix[startIndex + 2];\n  var w = matrix[startIndex + 3];\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  result.w = w;\n  return result;\n};\n/**\n * Computes a new matrix that replaces the specified column in the provided matrix with the provided Cartesian4 instance.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Number} index The zero-based index of the column to set.\n * @param {Cartesian4} cartesian The Cartesian whose values will be assigned to the specified column.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @exception {DeveloperError} index must be 0, 1, 2, or 3.\n *\n * @example\n * //creates a new Matrix4 instance with new column values from the Cartesian4 instance\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * var a = Cesium.Matrix4.setColumn(m, 2, new Cesium.Cartesian4(99.0, 98.0, 97.0, 96.0), new Cesium.Matrix4());\n *\n * // m remains the same\n * // a = [10.0, 11.0, 99.0, 13.0]\n * //     [14.0, 15.0, 98.0, 17.0]\n * //     [18.0, 19.0, 97.0, 21.0]\n * //     [22.0, 23.0, 96.0, 25.0]\n */\n\n\nMatrix4.setColumn = function (matrix, index, cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  Check.typeOf.number.lessThanOrEquals(\"index\", index, 3);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  result = Matrix4.clone(matrix, result);\n  var startIndex = index * 4;\n  result[startIndex] = cartesian.x;\n  result[startIndex + 1] = cartesian.y;\n  result[startIndex + 2] = cartesian.z;\n  result[startIndex + 3] = cartesian.w;\n  return result;\n};\n/**\n * Computes a new matrix that replaces the translation in the rightmost column of the provided\n * matrix with the provided translation.  This assumes the matrix is an affine transformation\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Cartesian3} translation The translation that replaces the translation of the provided matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\n\n\nMatrix4.setTranslation = function (matrix, translation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"translation\", translation);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[3];\n  result[4] = matrix[4];\n  result[5] = matrix[5];\n  result[6] = matrix[6];\n  result[7] = matrix[7];\n  result[8] = matrix[8];\n  result[9] = matrix[9];\n  result[10] = matrix[10];\n  result[11] = matrix[11];\n  result[12] = translation.x;\n  result[13] = translation.y;\n  result[14] = translation.z;\n  result[15] = matrix[15];\n  return result;\n};\n\nvar scaleScratch = new Cartesian3();\n/**\n * Computes a new matrix that replaces the scale with the provided scale.  This assumes the matrix is an affine transformation\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Cartesian3} scale The scale that replaces the scale of the provided matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\n\nMatrix4.setScale = function (matrix, scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"scale\", scale);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  var existingScale = Matrix4.getScale(matrix, scaleScratch);\n  var newScale = Cartesian3.divideComponents(scale, existingScale, scaleScratch);\n  return Matrix4.multiplyByScale(matrix, newScale, result);\n};\n/**\n * Retrieves a copy of the matrix row at the provided index as a Cartesian4 instance.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Number} index The zero-based index of the row to retrieve.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n *\n * @exception {DeveloperError} index must be 0, 1, 2, or 3.\n *\n * @example\n * //returns a Cartesian4 instance with values from the specified column\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * //Example 1: Returns an instance of Cartesian\n * var a = Cesium.Matrix4.getRow(m, 2, new Cesium.Cartesian4());\n *\n * @example\n * //Example 2: Sets values for a Cartesian instance\n * var a = new Cesium.Cartesian4();\n * Cesium.Matrix4.getRow(m, 2, a);\n *\n * // a.x = 18.0; a.y = 19.0; a.z = 20.0; a.w = 21.0;\n */\n\n\nMatrix4.getRow = function (matrix, index, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  Check.typeOf.number.lessThanOrEquals(\"index\", index, 3);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  var x = matrix[index];\n  var y = matrix[index + 4];\n  var z = matrix[index + 8];\n  var w = matrix[index + 12];\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  result.w = w;\n  return result;\n};\n/**\n * Computes a new matrix that replaces the specified row in the provided matrix with the provided Cartesian4 instance.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Number} index The zero-based index of the row to set.\n * @param {Cartesian4} cartesian The Cartesian whose values will be assigned to the specified row.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @exception {DeveloperError} index must be 0, 1, 2, or 3.\n *\n * @example\n * //create a new Matrix4 instance with new row values from the Cartesian4 instance\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * var a = Cesium.Matrix4.setRow(m, 2, new Cesium.Cartesian4(99.0, 98.0, 97.0, 96.0), new Cesium.Matrix4());\n *\n * // m remains the same\n * // a = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [99.0, 98.0, 97.0, 96.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n */\n\n\nMatrix4.setRow = function (matrix, index, cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  Check.typeOf.number.lessThanOrEquals(\"index\", index, 3);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  result = Matrix4.clone(matrix, result);\n  result[index] = cartesian.x;\n  result[index + 4] = cartesian.y;\n  result[index + 8] = cartesian.z;\n  result[index + 12] = cartesian.w;\n  return result;\n};\n\nvar scratchColumn = new Cartesian3();\n/**\n * Extracts the non-uniform scale assuming the matrix is an affine transformation.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter\n */\n\nMatrix4.getScale = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  result.x = Cartesian3.magnitude(Cartesian3.fromElements(matrix[0], matrix[1], matrix[2], scratchColumn));\n  result.y = Cartesian3.magnitude(Cartesian3.fromElements(matrix[4], matrix[5], matrix[6], scratchColumn));\n  result.z = Cartesian3.magnitude(Cartesian3.fromElements(matrix[8], matrix[9], matrix[10], scratchColumn));\n  return result;\n};\n\nvar scratchScale = new Cartesian3();\n/**\n * Computes the maximum scale assuming the matrix is an affine transformation.\n * The maximum scale is the maximum length of the column vectors in the upper-left\n * 3x3 matrix.\n *\n * @param {Matrix4} matrix The matrix.\n * @returns {Number} The maximum scale.\n */\n\nMatrix4.getMaximumScale = function (matrix) {\n  Matrix4.getScale(matrix, scratchScale);\n  return Cartesian3.maximumComponent(scratchScale);\n};\n/**\n * Computes the product of two matrices.\n *\n * @param {Matrix4} left The first matrix.\n * @param {Matrix4} right The second matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\n\n\nMatrix4.multiply = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  var left0 = left[0];\n  var left1 = left[1];\n  var left2 = left[2];\n  var left3 = left[3];\n  var left4 = left[4];\n  var left5 = left[5];\n  var left6 = left[6];\n  var left7 = left[7];\n  var left8 = left[8];\n  var left9 = left[9];\n  var left10 = left[10];\n  var left11 = left[11];\n  var left12 = left[12];\n  var left13 = left[13];\n  var left14 = left[14];\n  var left15 = left[15];\n  var right0 = right[0];\n  var right1 = right[1];\n  var right2 = right[2];\n  var right3 = right[3];\n  var right4 = right[4];\n  var right5 = right[5];\n  var right6 = right[6];\n  var right7 = right[7];\n  var right8 = right[8];\n  var right9 = right[9];\n  var right10 = right[10];\n  var right11 = right[11];\n  var right12 = right[12];\n  var right13 = right[13];\n  var right14 = right[14];\n  var right15 = right[15];\n  var column0Row0 = left0 * right0 + left4 * right1 + left8 * right2 + left12 * right3;\n  var column0Row1 = left1 * right0 + left5 * right1 + left9 * right2 + left13 * right3;\n  var column0Row2 = left2 * right0 + left6 * right1 + left10 * right2 + left14 * right3;\n  var column0Row3 = left3 * right0 + left7 * right1 + left11 * right2 + left15 * right3;\n  var column1Row0 = left0 * right4 + left4 * right5 + left8 * right6 + left12 * right7;\n  var column1Row1 = left1 * right4 + left5 * right5 + left9 * right6 + left13 * right7;\n  var column1Row2 = left2 * right4 + left6 * right5 + left10 * right6 + left14 * right7;\n  var column1Row3 = left3 * right4 + left7 * right5 + left11 * right6 + left15 * right7;\n  var column2Row0 = left0 * right8 + left4 * right9 + left8 * right10 + left12 * right11;\n  var column2Row1 = left1 * right8 + left5 * right9 + left9 * right10 + left13 * right11;\n  var column2Row2 = left2 * right8 + left6 * right9 + left10 * right10 + left14 * right11;\n  var column2Row3 = left3 * right8 + left7 * right9 + left11 * right10 + left15 * right11;\n  var column3Row0 = left0 * right12 + left4 * right13 + left8 * right14 + left12 * right15;\n  var column3Row1 = left1 * right12 + left5 * right13 + left9 * right14 + left13 * right15;\n  var column3Row2 = left2 * right12 + left6 * right13 + left10 * right14 + left14 * right15;\n  var column3Row3 = left3 * right12 + left7 * right13 + left11 * right14 + left15 * right15;\n  result[0] = column0Row0;\n  result[1] = column0Row1;\n  result[2] = column0Row2;\n  result[3] = column0Row3;\n  result[4] = column1Row0;\n  result[5] = column1Row1;\n  result[6] = column1Row2;\n  result[7] = column1Row3;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = column2Row3;\n  result[12] = column3Row0;\n  result[13] = column3Row1;\n  result[14] = column3Row2;\n  result[15] = column3Row3;\n  return result;\n};\n/**\n * Computes the sum of two matrices.\n *\n * @param {Matrix4} left The first matrix.\n * @param {Matrix4} right The second matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\n\n\nMatrix4.add = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  result[0] = left[0] + right[0];\n  result[1] = left[1] + right[1];\n  result[2] = left[2] + right[2];\n  result[3] = left[3] + right[3];\n  result[4] = left[4] + right[4];\n  result[5] = left[5] + right[5];\n  result[6] = left[6] + right[6];\n  result[7] = left[7] + right[7];\n  result[8] = left[8] + right[8];\n  result[9] = left[9] + right[9];\n  result[10] = left[10] + right[10];\n  result[11] = left[11] + right[11];\n  result[12] = left[12] + right[12];\n  result[13] = left[13] + right[13];\n  result[14] = left[14] + right[14];\n  result[15] = left[15] + right[15];\n  return result;\n};\n/**\n * Computes the difference of two matrices.\n *\n * @param {Matrix4} left The first matrix.\n * @param {Matrix4} right The second matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\n\n\nMatrix4.subtract = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  result[0] = left[0] - right[0];\n  result[1] = left[1] - right[1];\n  result[2] = left[2] - right[2];\n  result[3] = left[3] - right[3];\n  result[4] = left[4] - right[4];\n  result[5] = left[5] - right[5];\n  result[6] = left[6] - right[6];\n  result[7] = left[7] - right[7];\n  result[8] = left[8] - right[8];\n  result[9] = left[9] - right[9];\n  result[10] = left[10] - right[10];\n  result[11] = left[11] - right[11];\n  result[12] = left[12] - right[12];\n  result[13] = left[13] - right[13];\n  result[14] = left[14] - right[14];\n  result[15] = left[15] - right[15];\n  return result;\n};\n/**\n * Computes the product of two matrices assuming the matrices are\n * affine transformation matrices, where the upper left 3x3 elements\n * are a rotation matrix, and the upper three elements in the fourth\n * column are the translation.  The bottom row is assumed to be [0, 0, 0, 1].\n * The matrix is not verified to be in the proper form.\n * This method is faster than computing the product for general 4x4\n * matrices using {@link Matrix4.multiply}.\n *\n * @param {Matrix4} left The first matrix.\n * @param {Matrix4} right The second matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * var m1 = new Cesium.Matrix4(1.0, 6.0, 7.0, 0.0, 2.0, 5.0, 8.0, 0.0, 3.0, 4.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n * var m2 = Cesium.Transforms.eastNorthUpToFixedFrame(new Cesium.Cartesian3(1.0, 1.0, 1.0));\n * var m3 = Cesium.Matrix4.multiplyTransformation(m1, m2, new Cesium.Matrix4());\n */\n\n\nMatrix4.multiplyTransformation = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  var left0 = left[0];\n  var left1 = left[1];\n  var left2 = left[2];\n  var left4 = left[4];\n  var left5 = left[5];\n  var left6 = left[6];\n  var left8 = left[8];\n  var left9 = left[9];\n  var left10 = left[10];\n  var left12 = left[12];\n  var left13 = left[13];\n  var left14 = left[14];\n  var right0 = right[0];\n  var right1 = right[1];\n  var right2 = right[2];\n  var right4 = right[4];\n  var right5 = right[5];\n  var right6 = right[6];\n  var right8 = right[8];\n  var right9 = right[9];\n  var right10 = right[10];\n  var right12 = right[12];\n  var right13 = right[13];\n  var right14 = right[14];\n  var column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;\n  var column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;\n  var column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;\n  var column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;\n  var column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;\n  var column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;\n  var column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;\n  var column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;\n  var column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;\n  var column3Row0 = left0 * right12 + left4 * right13 + left8 * right14 + left12;\n  var column3Row1 = left1 * right12 + left5 * right13 + left9 * right14 + left13;\n  var column3Row2 = left2 * right12 + left6 * right13 + left10 * right14 + left14;\n  result[0] = column0Row0;\n  result[1] = column0Row1;\n  result[2] = column0Row2;\n  result[3] = 0.0;\n  result[4] = column1Row0;\n  result[5] = column1Row1;\n  result[6] = column1Row2;\n  result[7] = 0.0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = 0.0;\n  result[12] = column3Row0;\n  result[13] = column3Row1;\n  result[14] = column3Row2;\n  result[15] = 1.0;\n  return result;\n};\n/**\n * Multiplies a transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\n * by a 3x3 rotation matrix.  This is an optimization\n * for <code>Matrix4.multiply(m, Matrix4.fromRotationTranslation(rotation), m);</code> with less allocations and arithmetic operations.\n *\n * @param {Matrix4} matrix The matrix on the left-hand side.\n * @param {Matrix3} rotation The 3x3 rotation matrix on the right-hand side.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromRotationTranslation(rotation), m);\n * Cesium.Matrix4.multiplyByMatrix3(m, rotation, m);\n */\n\n\nMatrix4.multiplyByMatrix3 = function (matrix, rotation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"rotation\", rotation);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  var left0 = matrix[0];\n  var left1 = matrix[1];\n  var left2 = matrix[2];\n  var left4 = matrix[4];\n  var left5 = matrix[5];\n  var left6 = matrix[6];\n  var left8 = matrix[8];\n  var left9 = matrix[9];\n  var left10 = matrix[10];\n  var right0 = rotation[0];\n  var right1 = rotation[1];\n  var right2 = rotation[2];\n  var right4 = rotation[3];\n  var right5 = rotation[4];\n  var right6 = rotation[5];\n  var right8 = rotation[6];\n  var right9 = rotation[7];\n  var right10 = rotation[8];\n  var column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;\n  var column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;\n  var column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;\n  var column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;\n  var column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;\n  var column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;\n  var column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;\n  var column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;\n  var column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;\n  result[0] = column0Row0;\n  result[1] = column0Row1;\n  result[2] = column0Row2;\n  result[3] = 0.0;\n  result[4] = column1Row0;\n  result[5] = column1Row1;\n  result[6] = column1Row2;\n  result[7] = 0.0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = 0.0;\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n  return result;\n};\n/**\n * Multiplies a transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\n * by an implicit translation matrix defined by a {@link Cartesian3}.  This is an optimization\n * for <code>Matrix4.multiply(m, Matrix4.fromTranslation(position), m);</code> with less allocations and arithmetic operations.\n *\n * @param {Matrix4} matrix The matrix on the left-hand side.\n * @param {Cartesian3} translation The translation on the right-hand side.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromTranslation(position), m);\n * Cesium.Matrix4.multiplyByTranslation(m, position, m);\n */\n\n\nMatrix4.multiplyByTranslation = function (matrix, translation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"translation\", translation);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  var x = translation.x;\n  var y = translation.y;\n  var z = translation.z;\n  var tx = x * matrix[0] + y * matrix[4] + z * matrix[8] + matrix[12];\n  var ty = x * matrix[1] + y * matrix[5] + z * matrix[9] + matrix[13];\n  var tz = x * matrix[2] + y * matrix[6] + z * matrix[10] + matrix[14];\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[3];\n  result[4] = matrix[4];\n  result[5] = matrix[5];\n  result[6] = matrix[6];\n  result[7] = matrix[7];\n  result[8] = matrix[8];\n  result[9] = matrix[9];\n  result[10] = matrix[10];\n  result[11] = matrix[11];\n  result[12] = tx;\n  result[13] = ty;\n  result[14] = tz;\n  result[15] = matrix[15];\n  return result;\n};\n\nvar uniformScaleScratch = new Cartesian3();\n/**\n * Multiplies an affine transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\n * by an implicit uniform scale matrix.  This is an optimization\n * for <code>Matrix4.multiply(m, Matrix4.fromUniformScale(scale), m);</code>, where\n * <code>m</code> must be an affine matrix.\n * This function performs fewer allocations and arithmetic operations.\n *\n * @param {Matrix4} matrix The affine matrix on the left-hand side.\n * @param {Number} scale The uniform scale on the right-hand side.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n *\n * @example\n * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromUniformScale(scale), m);\n * Cesium.Matrix4.multiplyByUniformScale(m, scale, m);\n *\n * @see Matrix4.fromUniformScale\n * @see Matrix4.multiplyByScale\n */\n\nMatrix4.multiplyByUniformScale = function (matrix, scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.number(\"scale\", scale);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  uniformScaleScratch.x = scale;\n  uniformScaleScratch.y = scale;\n  uniformScaleScratch.z = scale;\n  return Matrix4.multiplyByScale(matrix, uniformScaleScratch, result);\n};\n/**\n * Multiplies an affine transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\n * by an implicit non-uniform scale matrix.  This is an optimization\n * for <code>Matrix4.multiply(m, Matrix4.fromUniformScale(scale), m);</code>, where\n * <code>m</code> must be an affine matrix.\n * This function performs fewer allocations and arithmetic operations.\n *\n * @param {Matrix4} matrix The affine matrix on the left-hand side.\n * @param {Cartesian3} scale The non-uniform scale on the right-hand side.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n *\n * @example\n * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromScale(scale), m);\n * Cesium.Matrix4.multiplyByScale(m, scale, m);\n *\n * @see Matrix4.fromScale\n * @see Matrix4.multiplyByUniformScale\n */\n\n\nMatrix4.multiplyByScale = function (matrix, scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"scale\", scale);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  var scaleX = scale.x;\n  var scaleY = scale.y;\n  var scaleZ = scale.z; // Faster than Cartesian3.equals\n\n  if (scaleX === 1.0 && scaleY === 1.0 && scaleZ === 1.0) {\n    return Matrix4.clone(matrix, result);\n  }\n\n  result[0] = scaleX * matrix[0];\n  result[1] = scaleX * matrix[1];\n  result[2] = scaleX * matrix[2];\n  result[3] = 0.0;\n  result[4] = scaleY * matrix[4];\n  result[5] = scaleY * matrix[5];\n  result[6] = scaleY * matrix[6];\n  result[7] = 0.0;\n  result[8] = scaleZ * matrix[8];\n  result[9] = scaleZ * matrix[9];\n  result[10] = scaleZ * matrix[10];\n  result[11] = 0.0;\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = 1.0;\n  return result;\n};\n/**\n * Computes the product of a matrix and a column vector.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Cartesian4} cartesian The vector.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\n\n\nMatrix4.multiplyByVector = function (matrix, cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  var vX = cartesian.x;\n  var vY = cartesian.y;\n  var vZ = cartesian.z;\n  var vW = cartesian.w;\n  var x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ + matrix[12] * vW;\n  var y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ + matrix[13] * vW;\n  var z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ + matrix[14] * vW;\n  var w = matrix[3] * vX + matrix[7] * vY + matrix[11] * vZ + matrix[15] * vW;\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  result.w = w;\n  return result;\n};\n/**\n * Computes the product of a matrix and a {@link Cartesian3}.  This is equivalent to calling {@link Matrix4.multiplyByVector}\n * with a {@link Cartesian4} with a <code>w</code> component of zero.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Cartesian3} cartesian The point.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n *\n * @example\n * var p = new Cesium.Cartesian3(1.0, 2.0, 3.0);\n * var result = Cesium.Matrix4.multiplyByPointAsVector(matrix, p, new Cesium.Cartesian3());\n * // A shortcut for\n * //   Cartesian3 p = ...\n * //   Cesium.Matrix4.multiplyByVector(matrix, new Cesium.Cartesian4(p.x, p.y, p.z, 0.0), result);\n */\n\n\nMatrix4.multiplyByPointAsVector = function (matrix, cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  var vX = cartesian.x;\n  var vY = cartesian.y;\n  var vZ = cartesian.z;\n  var x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ;\n  var y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ;\n  var z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ;\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  return result;\n};\n/**\n * Computes the product of a matrix and a {@link Cartesian3}. This is equivalent to calling {@link Matrix4.multiplyByVector}\n * with a {@link Cartesian4} with a <code>w</code> component of 1, but returns a {@link Cartesian3} instead of a {@link Cartesian4}.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Cartesian3} cartesian The point.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n *\n * @example\n * var p = new Cesium.Cartesian3(1.0, 2.0, 3.0);\n * var result = Cesium.Matrix4.multiplyByPoint(matrix, p, new Cesium.Cartesian3());\n */\n\n\nMatrix4.multiplyByPoint = function (matrix, cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  var vX = cartesian.x;\n  var vY = cartesian.y;\n  var vZ = cartesian.z;\n  var x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ + matrix[12];\n  var y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ + matrix[13];\n  var z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ + matrix[14];\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  return result;\n};\n/**\n * Computes the product of a matrix and a scalar.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Number} scalar The number to multiply by.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * //create a Matrix4 instance which is a scaled version of the supplied Matrix4\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * var a = Cesium.Matrix4.multiplyByScalar(m, -2, new Cesium.Matrix4());\n *\n * // m remains the same\n * // a = [-20.0, -22.0, -24.0, -26.0]\n * //     [-28.0, -30.0, -32.0, -34.0]\n * //     [-36.0, -38.0, -40.0, -42.0]\n * //     [-44.0, -46.0, -48.0, -50.0]\n */\n\n\nMatrix4.multiplyByScalar = function (matrix, scalar, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.number(\"scalar\", scalar);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  result[0] = matrix[0] * scalar;\n  result[1] = matrix[1] * scalar;\n  result[2] = matrix[2] * scalar;\n  result[3] = matrix[3] * scalar;\n  result[4] = matrix[4] * scalar;\n  result[5] = matrix[5] * scalar;\n  result[6] = matrix[6] * scalar;\n  result[7] = matrix[7] * scalar;\n  result[8] = matrix[8] * scalar;\n  result[9] = matrix[9] * scalar;\n  result[10] = matrix[10] * scalar;\n  result[11] = matrix[11] * scalar;\n  result[12] = matrix[12] * scalar;\n  result[13] = matrix[13] * scalar;\n  result[14] = matrix[14] * scalar;\n  result[15] = matrix[15] * scalar;\n  return result;\n};\n/**\n * Computes a negated copy of the provided matrix.\n *\n * @param {Matrix4} matrix The matrix to negate.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * //create a new Matrix4 instance which is a negation of a Matrix4\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * var a = Cesium.Matrix4.negate(m, new Cesium.Matrix4());\n *\n * // m remains the same\n * // a = [-10.0, -11.0, -12.0, -13.0]\n * //     [-14.0, -15.0, -16.0, -17.0]\n * //     [-18.0, -19.0, -20.0, -21.0]\n * //     [-22.0, -23.0, -24.0, -25.0]\n */\n\n\nMatrix4.negate = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  result[0] = -matrix[0];\n  result[1] = -matrix[1];\n  result[2] = -matrix[2];\n  result[3] = -matrix[3];\n  result[4] = -matrix[4];\n  result[5] = -matrix[5];\n  result[6] = -matrix[6];\n  result[7] = -matrix[7];\n  result[8] = -matrix[8];\n  result[9] = -matrix[9];\n  result[10] = -matrix[10];\n  result[11] = -matrix[11];\n  result[12] = -matrix[12];\n  result[13] = -matrix[13];\n  result[14] = -matrix[14];\n  result[15] = -matrix[15];\n  return result;\n};\n/**\n * Computes the transpose of the provided matrix.\n *\n * @param {Matrix4} matrix The matrix to transpose.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * //returns transpose of a Matrix4\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * var a = Cesium.Matrix4.transpose(m, new Cesium.Matrix4());\n *\n * // m remains the same\n * // a = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n */\n\n\nMatrix4.transpose = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  var matrix1 = matrix[1];\n  var matrix2 = matrix[2];\n  var matrix3 = matrix[3];\n  var matrix6 = matrix[6];\n  var matrix7 = matrix[7];\n  var matrix11 = matrix[11];\n  result[0] = matrix[0];\n  result[1] = matrix[4];\n  result[2] = matrix[8];\n  result[3] = matrix[12];\n  result[4] = matrix1;\n  result[5] = matrix[5];\n  result[6] = matrix[9];\n  result[7] = matrix[13];\n  result[8] = matrix2;\n  result[9] = matrix6;\n  result[10] = matrix[10];\n  result[11] = matrix[14];\n  result[12] = matrix3;\n  result[13] = matrix7;\n  result[14] = matrix11;\n  result[15] = matrix[15];\n  return result;\n};\n/**\n * Computes a matrix, which contains the absolute (unsigned) values of the provided matrix's elements.\n *\n * @param {Matrix4} matrix The matrix with signed elements.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\n\n\nMatrix4.abs = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  result[0] = Math.abs(matrix[0]);\n  result[1] = Math.abs(matrix[1]);\n  result[2] = Math.abs(matrix[2]);\n  result[3] = Math.abs(matrix[3]);\n  result[4] = Math.abs(matrix[4]);\n  result[5] = Math.abs(matrix[5]);\n  result[6] = Math.abs(matrix[6]);\n  result[7] = Math.abs(matrix[7]);\n  result[8] = Math.abs(matrix[8]);\n  result[9] = Math.abs(matrix[9]);\n  result[10] = Math.abs(matrix[10]);\n  result[11] = Math.abs(matrix[11]);\n  result[12] = Math.abs(matrix[12]);\n  result[13] = Math.abs(matrix[13]);\n  result[14] = Math.abs(matrix[14]);\n  result[15] = Math.abs(matrix[15]);\n  return result;\n};\n/**\n * Compares the provided matrices componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Matrix4} [left] The first matrix.\n * @param {Matrix4} [right] The second matrix.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n *\n * @example\n * //compares two Matrix4 instances\n *\n * // a = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n *\n * // b = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n *\n * if(Cesium.Matrix4.equals(a,b)) {\n *      console.log(\"Both matrices are equal\");\n * } else {\n *      console.log(\"They are not equal\");\n * }\n *\n * //Prints \"Both matrices are equal\" on the console\n */\n\n\nMatrix4.equals = function (left, right) {\n  // Given that most matrices will be transformation matrices, the elements\n  // are tested in order such that the test is likely to fail as early\n  // as possible.  I _think_ this is just as friendly to the L1 cache\n  // as testing in index order.  It is certainty faster in practice.\n  return left === right || defined(left) && defined(right) && // Translation\n  left[12] === right[12] && left[13] === right[13] && left[14] === right[14] && // Rotation/scale\n  left[0] === right[0] && left[1] === right[1] && left[2] === right[2] && left[4] === right[4] && left[5] === right[5] && left[6] === right[6] && left[8] === right[8] && left[9] === right[9] && left[10] === right[10] && // Bottom row\n  left[3] === right[3] && left[7] === right[7] && left[11] === right[11] && left[15] === right[15];\n};\n/**\n * Compares the provided matrices componentwise and returns\n * <code>true</code> if they are within the provided epsilon,\n * <code>false</code> otherwise.\n *\n * @param {Matrix4} [left] The first matrix.\n * @param {Matrix4} [right] The second matrix.\n * @param {Number} epsilon The epsilon to use for equality testing.\n * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\n *\n * @example\n * //compares two Matrix4 instances\n *\n * // a = [10.5, 14.5, 18.5, 22.5]\n * //     [11.5, 15.5, 19.5, 23.5]\n * //     [12.5, 16.5, 20.5, 24.5]\n * //     [13.5, 17.5, 21.5, 25.5]\n *\n * // b = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n *\n * if(Cesium.Matrix4.equalsEpsilon(a,b,0.1)){\n *      console.log(\"Difference between both the matrices is less than 0.1\");\n * } else {\n *      console.log(\"Difference between both the matrices is not less than 0.1\");\n * }\n *\n * //Prints \"Difference between both the matrices is not less than 0.1\" on the console\n */\n\n\nMatrix4.equalsEpsilon = function (left, right, epsilon) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"epsilon\", epsilon); //>>includeEnd('debug');\n\n  return left === right || defined(left) && defined(right) && Math.abs(left[0] - right[0]) <= epsilon && Math.abs(left[1] - right[1]) <= epsilon && Math.abs(left[2] - right[2]) <= epsilon && Math.abs(left[3] - right[3]) <= epsilon && Math.abs(left[4] - right[4]) <= epsilon && Math.abs(left[5] - right[5]) <= epsilon && Math.abs(left[6] - right[6]) <= epsilon && Math.abs(left[7] - right[7]) <= epsilon && Math.abs(left[8] - right[8]) <= epsilon && Math.abs(left[9] - right[9]) <= epsilon && Math.abs(left[10] - right[10]) <= epsilon && Math.abs(left[11] - right[11]) <= epsilon && Math.abs(left[12] - right[12]) <= epsilon && Math.abs(left[13] - right[13]) <= epsilon && Math.abs(left[14] - right[14]) <= epsilon && Math.abs(left[15] - right[15]) <= epsilon;\n};\n/**\n * Gets the translation portion of the provided matrix, assuming the matrix is a affine transformation matrix.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\n\n\nMatrix4.getTranslation = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  result.x = matrix[12];\n  result.y = matrix[13];\n  result.z = matrix[14];\n  return result;\n};\n/**\n * Gets the upper left 3x3 rotation matrix of the provided matrix, assuming the matrix is an affine transformation matrix.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Matrix3} result The object onto which to store the result.\n * @returns {Matrix3} The modified result parameter.\n *\n * @example\n * // returns a Matrix3 instance from a Matrix4 instance\n *\n * // m = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n *\n * var b = new Cesium.Matrix3();\n * Cesium.Matrix4.getMatrix3(m,b);\n *\n * // b = [10.0, 14.0, 18.0]\n * //     [11.0, 15.0, 19.0]\n * //     [12.0, 16.0, 20.0]\n */\n\n\nMatrix4.getMatrix3 = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[4];\n  result[4] = matrix[5];\n  result[5] = matrix[6];\n  result[6] = matrix[8];\n  result[7] = matrix[9];\n  result[8] = matrix[10];\n  return result;\n};\n\nvar scratchInverseRotation = new Matrix3();\nvar scratchMatrix3Zero = new Matrix3();\nvar scratchBottomRow = new Cartesian4();\nvar scratchExpectedBottomRow = new Cartesian4(0.0, 0.0, 0.0, 1.0);\n/**\n * Computes the inverse of the provided matrix using Cramers Rule.\n * If the determinant is zero, the matrix can not be inverted, and an exception is thrown.\n * If the matrix is an affine transformation matrix, it is more efficient\n * to invert it with {@link Matrix4.inverseTransformation}.\n *\n * @param {Matrix4} matrix The matrix to invert.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @exception {RuntimeError} matrix is not invertible because its determinate is zero.\n */\n\nMatrix4.inverse = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n  //\n  // Ported from:\n  //   ftp://download.intel.com/design/PentiumIII/sml/24504301.pdf\n  //\n\n  var src0 = matrix[0];\n  var src1 = matrix[4];\n  var src2 = matrix[8];\n  var src3 = matrix[12];\n  var src4 = matrix[1];\n  var src5 = matrix[5];\n  var src6 = matrix[9];\n  var src7 = matrix[13];\n  var src8 = matrix[2];\n  var src9 = matrix[6];\n  var src10 = matrix[10];\n  var src11 = matrix[14];\n  var src12 = matrix[3];\n  var src13 = matrix[7];\n  var src14 = matrix[11];\n  var src15 = matrix[15]; // calculate pairs for first 8 elements (cofactors)\n\n  var tmp0 = src10 * src15;\n  var tmp1 = src11 * src14;\n  var tmp2 = src9 * src15;\n  var tmp3 = src11 * src13;\n  var tmp4 = src9 * src14;\n  var tmp5 = src10 * src13;\n  var tmp6 = src8 * src15;\n  var tmp7 = src11 * src12;\n  var tmp8 = src8 * src14;\n  var tmp9 = src10 * src12;\n  var tmp10 = src8 * src13;\n  var tmp11 = src9 * src12; // calculate first 8 elements (cofactors)\n\n  var dst0 = tmp0 * src5 + tmp3 * src6 + tmp4 * src7 - (tmp1 * src5 + tmp2 * src6 + tmp5 * src7);\n  var dst1 = tmp1 * src4 + tmp6 * src6 + tmp9 * src7 - (tmp0 * src4 + tmp7 * src6 + tmp8 * src7);\n  var dst2 = tmp2 * src4 + tmp7 * src5 + tmp10 * src7 - (tmp3 * src4 + tmp6 * src5 + tmp11 * src7);\n  var dst3 = tmp5 * src4 + tmp8 * src5 + tmp11 * src6 - (tmp4 * src4 + tmp9 * src5 + tmp10 * src6);\n  var dst4 = tmp1 * src1 + tmp2 * src2 + tmp5 * src3 - (tmp0 * src1 + tmp3 * src2 + tmp4 * src3);\n  var dst5 = tmp0 * src0 + tmp7 * src2 + tmp8 * src3 - (tmp1 * src0 + tmp6 * src2 + tmp9 * src3);\n  var dst6 = tmp3 * src0 + tmp6 * src1 + tmp11 * src3 - (tmp2 * src0 + tmp7 * src1 + tmp10 * src3);\n  var dst7 = tmp4 * src0 + tmp9 * src1 + tmp10 * src2 - (tmp5 * src0 + tmp8 * src1 + tmp11 * src2); // calculate pairs for second 8 elements (cofactors)\n\n  tmp0 = src2 * src7;\n  tmp1 = src3 * src6;\n  tmp2 = src1 * src7;\n  tmp3 = src3 * src5;\n  tmp4 = src1 * src6;\n  tmp5 = src2 * src5;\n  tmp6 = src0 * src7;\n  tmp7 = src3 * src4;\n  tmp8 = src0 * src6;\n  tmp9 = src2 * src4;\n  tmp10 = src0 * src5;\n  tmp11 = src1 * src4; // calculate second 8 elements (cofactors)\n\n  var dst8 = tmp0 * src13 + tmp3 * src14 + tmp4 * src15 - (tmp1 * src13 + tmp2 * src14 + tmp5 * src15);\n  var dst9 = tmp1 * src12 + tmp6 * src14 + tmp9 * src15 - (tmp0 * src12 + tmp7 * src14 + tmp8 * src15);\n  var dst10 = tmp2 * src12 + tmp7 * src13 + tmp10 * src15 - (tmp3 * src12 + tmp6 * src13 + tmp11 * src15);\n  var dst11 = tmp5 * src12 + tmp8 * src13 + tmp11 * src14 - (tmp4 * src12 + tmp9 * src13 + tmp10 * src14);\n  var dst12 = tmp2 * src10 + tmp5 * src11 + tmp1 * src9 - (tmp4 * src11 + tmp0 * src9 + tmp3 * src10);\n  var dst13 = tmp8 * src11 + tmp0 * src8 + tmp7 * src10 - (tmp6 * src10 + tmp9 * src11 + tmp1 * src8);\n  var dst14 = tmp6 * src9 + tmp11 * src11 + tmp3 * src8 - (tmp10 * src11 + tmp2 * src8 + tmp7 * src9);\n  var dst15 = tmp10 * src10 + tmp4 * src8 + tmp9 * src9 - (tmp8 * src9 + tmp11 * src10 + tmp5 * src8); // calculate determinant\n\n  var det = src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;\n\n  if (Math.abs(det) < CesiumMath.EPSILON21) {\n    // Special case for a zero scale matrix that can occur, for example,\n    // when a model's node has a [0, 0, 0] scale.\n    if (Matrix3.equalsEpsilon(Matrix4.getMatrix3(matrix, scratchInverseRotation), scratchMatrix3Zero, CesiumMath.EPSILON7) && Cartesian4.equals(Matrix4.getRow(matrix, 3, scratchBottomRow), scratchExpectedBottomRow)) {\n      result[0] = 0.0;\n      result[1] = 0.0;\n      result[2] = 0.0;\n      result[3] = 0.0;\n      result[4] = 0.0;\n      result[5] = 0.0;\n      result[6] = 0.0;\n      result[7] = 0.0;\n      result[8] = 0.0;\n      result[9] = 0.0;\n      result[10] = 0.0;\n      result[11] = 0.0;\n      result[12] = -matrix[12];\n      result[13] = -matrix[13];\n      result[14] = -matrix[14];\n      result[15] = 1.0;\n      return result;\n    }\n\n    throw new RuntimeError(\"matrix is not invertible because its determinate is zero.\");\n  } // calculate matrix inverse\n\n\n  det = 1.0 / det;\n  result[0] = dst0 * det;\n  result[1] = dst1 * det;\n  result[2] = dst2 * det;\n  result[3] = dst3 * det;\n  result[4] = dst4 * det;\n  result[5] = dst5 * det;\n  result[6] = dst6 * det;\n  result[7] = dst7 * det;\n  result[8] = dst8 * det;\n  result[9] = dst9 * det;\n  result[10] = dst10 * det;\n  result[11] = dst11 * det;\n  result[12] = dst12 * det;\n  result[13] = dst13 * det;\n  result[14] = dst14 * det;\n  result[15] = dst15 * det;\n  return result;\n};\n/**\n * Computes the inverse of the provided matrix assuming it is\n * an affine transformation matrix, where the upper left 3x3 elements\n * are a rotation matrix, and the upper three elements in the fourth\n * column are the translation.  The bottom row is assumed to be [0, 0, 0, 1].\n * The matrix is not verified to be in the proper form.\n * This method is faster than computing the inverse for a general 4x4\n * matrix using {@link Matrix4.inverse}.\n *\n * @param {Matrix4} matrix The matrix to invert.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\n\n\nMatrix4.inverseTransformation = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n  //This function is an optimized version of the below 4 lines.\n  //var rT = Matrix3.transpose(Matrix4.getMatrix3(matrix));\n  //var rTN = Matrix3.negate(rT);\n  //var rTT = Matrix3.multiplyByVector(rTN, Matrix4.getTranslation(matrix));\n  //return Matrix4.fromRotationTranslation(rT, rTT, result);\n\n  var matrix0 = matrix[0];\n  var matrix1 = matrix[1];\n  var matrix2 = matrix[2];\n  var matrix4 = matrix[4];\n  var matrix5 = matrix[5];\n  var matrix6 = matrix[6];\n  var matrix8 = matrix[8];\n  var matrix9 = matrix[9];\n  var matrix10 = matrix[10];\n  var vX = matrix[12];\n  var vY = matrix[13];\n  var vZ = matrix[14];\n  var x = -matrix0 * vX - matrix1 * vY - matrix2 * vZ;\n  var y = -matrix4 * vX - matrix5 * vY - matrix6 * vZ;\n  var z = -matrix8 * vX - matrix9 * vY - matrix10 * vZ;\n  result[0] = matrix0;\n  result[1] = matrix4;\n  result[2] = matrix8;\n  result[3] = 0.0;\n  result[4] = matrix1;\n  result[5] = matrix5;\n  result[6] = matrix9;\n  result[7] = 0.0;\n  result[8] = matrix2;\n  result[9] = matrix6;\n  result[10] = matrix10;\n  result[11] = 0.0;\n  result[12] = x;\n  result[13] = y;\n  result[14] = z;\n  result[15] = 1.0;\n  return result;\n};\n/**\n * An immutable Matrix4 instance initialized to the identity matrix.\n *\n * @type {Matrix4}\n * @constant\n */\n\n\nMatrix4.IDENTITY = Object.freeze(new Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0));\n/**\n * An immutable Matrix4 instance initialized to the zero matrix.\n *\n * @type {Matrix4}\n * @constant\n */\n\nMatrix4.ZERO = Object.freeze(new Matrix4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));\n/**\n * The index into Matrix4 for column 0, row 0.\n *\n * @type {Number}\n * @constant\n */\n\nMatrix4.COLUMN0ROW0 = 0;\n/**\n * The index into Matrix4 for column 0, row 1.\n *\n * @type {Number}\n * @constant\n */\n\nMatrix4.COLUMN0ROW1 = 1;\n/**\n * The index into Matrix4 for column 0, row 2.\n *\n * @type {Number}\n * @constant\n */\n\nMatrix4.COLUMN0ROW2 = 2;\n/**\n * The index into Matrix4 for column 0, row 3.\n *\n * @type {Number}\n * @constant\n */\n\nMatrix4.COLUMN0ROW3 = 3;\n/**\n * The index into Matrix4 for column 1, row 0.\n *\n * @type {Number}\n * @constant\n */\n\nMatrix4.COLUMN1ROW0 = 4;\n/**\n * The index into Matrix4 for column 1, row 1.\n *\n * @type {Number}\n * @constant\n */\n\nMatrix4.COLUMN1ROW1 = 5;\n/**\n * The index into Matrix4 for column 1, row 2.\n *\n * @type {Number}\n * @constant\n */\n\nMatrix4.COLUMN1ROW2 = 6;\n/**\n * The index into Matrix4 for column 1, row 3.\n *\n * @type {Number}\n * @constant\n */\n\nMatrix4.COLUMN1ROW3 = 7;\n/**\n * The index into Matrix4 for column 2, row 0.\n *\n * @type {Number}\n * @constant\n */\n\nMatrix4.COLUMN2ROW0 = 8;\n/**\n * The index into Matrix4 for column 2, row 1.\n *\n * @type {Number}\n * @constant\n */\n\nMatrix4.COLUMN2ROW1 = 9;\n/**\n * The index into Matrix4 for column 2, row 2.\n *\n * @type {Number}\n * @constant\n */\n\nMatrix4.COLUMN2ROW2 = 10;\n/**\n * The index into Matrix4 for column 2, row 3.\n *\n * @type {Number}\n * @constant\n */\n\nMatrix4.COLUMN2ROW3 = 11;\n/**\n * The index into Matrix4 for column 3, row 0.\n *\n * @type {Number}\n * @constant\n */\n\nMatrix4.COLUMN3ROW0 = 12;\n/**\n * The index into Matrix4 for column 3, row 1.\n *\n * @type {Number}\n * @constant\n */\n\nMatrix4.COLUMN3ROW1 = 13;\n/**\n * The index into Matrix4 for column 3, row 2.\n *\n * @type {Number}\n * @constant\n */\n\nMatrix4.COLUMN3ROW2 = 14;\n/**\n * The index into Matrix4 for column 3, row 3.\n *\n * @type {Number}\n * @constant\n */\n\nMatrix4.COLUMN3ROW3 = 15;\nObject.defineProperties(Matrix4.prototype, {\n  /**\n   * Gets the number of items in the collection.\n   * @memberof Matrix4.prototype\n   *\n   * @type {Number}\n   */\n  length: {\n    get: function get() {\n      return Matrix4.packedLength;\n    }\n  }\n});\n/**\n * Duplicates the provided Matrix4 instance.\n *\n * @param {Matrix4} [result] The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\n */\n\nMatrix4.prototype.clone = function (result) {\n  return Matrix4.clone(this, result);\n};\n/**\n * Compares this matrix to the provided matrix componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Matrix4} [right] The right hand side matrix.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\n\n\nMatrix4.prototype.equals = function (right) {\n  return Matrix4.equals(this, right);\n};\n/**\n * @private\n */\n\n\nMatrix4.equalsArray = function (matrix, array, offset) {\n  return matrix[0] === array[offset] && matrix[1] === array[offset + 1] && matrix[2] === array[offset + 2] && matrix[3] === array[offset + 3] && matrix[4] === array[offset + 4] && matrix[5] === array[offset + 5] && matrix[6] === array[offset + 6] && matrix[7] === array[offset + 7] && matrix[8] === array[offset + 8] && matrix[9] === array[offset + 9] && matrix[10] === array[offset + 10] && matrix[11] === array[offset + 11] && matrix[12] === array[offset + 12] && matrix[13] === array[offset + 13] && matrix[14] === array[offset + 14] && matrix[15] === array[offset + 15];\n};\n/**\n * Compares this matrix to the provided matrix componentwise and returns\n * <code>true</code> if they are within the provided epsilon,\n * <code>false</code> otherwise.\n *\n * @param {Matrix4} [right] The right hand side matrix.\n * @param {Number} epsilon The epsilon to use for equality testing.\n * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\n */\n\n\nMatrix4.prototype.equalsEpsilon = function (right, epsilon) {\n  return Matrix4.equalsEpsilon(this, right, epsilon);\n};\n/**\n * Computes a string representing this Matrix with each row being\n * on a separate line and in the format '(column0, column1, column2, column3)'.\n *\n * @returns {String} A string representing the provided Matrix with each row being on a separate line and in the format '(column0, column1, column2, column3)'.\n */\n\n\nMatrix4.prototype.toString = function () {\n  return \"(\" + this[0] + \", \" + this[4] + \", \" + this[8] + \", \" + this[12] + \")\\n\" + \"(\" + this[1] + \", \" + this[5] + \", \" + this[9] + \", \" + this[13] + \")\\n\" + \"(\" + this[2] + \", \" + this[6] + \", \" + this[10] + \", \" + this[14] + \")\\n\" + \"(\" + this[3] + \", \" + this[7] + \", \" + this[11] + \", \" + this[15] + \")\";\n};\n\nexport default Matrix4;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/Matrix4.js"],"names":["Cartesian3","Cartesian4","Check","defaultValue","defined","CesiumMath","Matrix3","RuntimeError","Matrix4","column0Row0","column1Row0","column2Row0","column3Row0","column0Row1","column1Row1","column2Row1","column3Row1","column0Row2","column1Row2","column2Row2","column3Row2","column0Row3","column1Row3","column2Row3","column3Row3","packedLength","pack","value","array","startingIndex","typeOf","object","unpack","result","clone","matrix","undefined","fromArray","fromColumnMajorArray","values","fromRowMajorArray","fromRotationTranslation","rotation","translation","ZERO","x","y","z","fromTranslationQuaternionRotationScale","scale","scaleX","scaleY","scaleZ","x2","xy","xz","xw","w","y2","yz","yw","z2","zw","w2","m00","m01","m02","m10","m11","m12","m20","m21","m22","fromTranslationRotationScale","translationRotationScale","fromTranslation","IDENTITY","fromScale","fromUniformScale","number","fromCameraF","fromCameraR","fromCameraU","fromCamera","camera","position","direction","up","normalize","cross","sX","sY","sZ","fX","fY","fZ","uX","uY","uZ","positionX","positionY","positionZ","t0","t1","t2","computePerspectiveFieldOfView","fovY","aspectRatio","near","far","greaterThan","lessThan","Math","PI","bottom","tan","computeOrthographicOffCenter","left","right","top","a","b","c","tx","ty","tz","computePerspectiveOffCenter","computeInfinitePerspectiveOffCenter","computeViewportTransformation","viewport","nearDepthRange","farDepthRange","EMPTY_OBJECT","width","height","halfWidth","halfHeight","halfDepth","computeView","dot","toArray","getElementIndex","column","row","greaterThanOrEquals","lessThanOrEquals","getColumn","index","startIndex","setColumn","cartesian","setTranslation","scaleScratch","setScale","existingScale","getScale","newScale","divideComponents","multiplyByScale","getRow","setRow","scratchColumn","magnitude","fromElements","scratchScale","getMaximumScale","maximumComponent","multiply","left0","left1","left2","left3","left4","left5","left6","left7","left8","left9","left10","left11","left12","left13","left14","left15","right0","right1","right2","right3","right4","right5","right6","right7","right8","right9","right10","right11","right12","right13","right14","right15","add","subtract","multiplyTransformation","multiplyByMatrix3","multiplyByTranslation","uniformScaleScratch","multiplyByUniformScale","multiplyByVector","vX","vY","vZ","vW","multiplyByPointAsVector","multiplyByPoint","multiplyByScalar","scalar","negate","transpose","matrix1","matrix2","matrix3","matrix6","matrix7","matrix11","abs","equals","equalsEpsilon","epsilon","getTranslation","getMatrix3","scratchInverseRotation","scratchMatrix3Zero","scratchBottomRow","scratchExpectedBottomRow","inverse","src0","src1","src2","src3","src4","src5","src6","src7","src8","src9","src10","src11","src12","src13","src14","src15","tmp0","tmp1","tmp2","tmp3","tmp4","tmp5","tmp6","tmp7","tmp8","tmp9","tmp10","tmp11","dst0","dst1","dst2","dst3","dst4","dst5","dst6","dst7","dst8","dst9","dst10","dst11","dst12","dst13","dst14","dst15","det","EPSILON21","EPSILON7","inverseTransformation","matrix0","matrix4","matrix5","matrix8","matrix9","matrix10","Object","freeze","COLUMN0ROW0","COLUMN0ROW1","COLUMN0ROW2","COLUMN0ROW3","COLUMN1ROW0","COLUMN1ROW1","COLUMN1ROW2","COLUMN1ROW3","COLUMN2ROW0","COLUMN2ROW1","COLUMN2ROW2","COLUMN2ROW3","COLUMN3ROW0","COLUMN3ROW1","COLUMN3ROW2","COLUMN3ROW3","defineProperties","prototype","length","get","equalsArray","offset","toString"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,iBAAvB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,UAAP,MAAuB,WAAvB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,SAASC,OAAT,CACEC,WADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,WAJF,EAKEC,WALF,EAMEC,WANF,EAOEC,WAPF,EAQEC,WARF,EASEC,WATF,EAUEC,WAVF,EAWEC,WAXF,EAYEC,WAZF,EAaEC,WAbF,EAcEC,WAdF,EAeEC,WAfF,EAgBEC,WAhBF,EAiBE;AACA,OAAK,CAAL,IAAUrB,YAAY,CAACM,WAAD,EAAc,GAAd,CAAtB;AACA,OAAK,CAAL,IAAUN,YAAY,CAACU,WAAD,EAAc,GAAd,CAAtB;AACA,OAAK,CAAL,IAAUV,YAAY,CAACc,WAAD,EAAc,GAAd,CAAtB;AACA,OAAK,CAAL,IAAUd,YAAY,CAACkB,WAAD,EAAc,GAAd,CAAtB;AACA,OAAK,CAAL,IAAUlB,YAAY,CAACO,WAAD,EAAc,GAAd,CAAtB;AACA,OAAK,CAAL,IAAUP,YAAY,CAACW,WAAD,EAAc,GAAd,CAAtB;AACA,OAAK,CAAL,IAAUX,YAAY,CAACe,WAAD,EAAc,GAAd,CAAtB;AACA,OAAK,CAAL,IAAUf,YAAY,CAACmB,WAAD,EAAc,GAAd,CAAtB;AACA,OAAK,CAAL,IAAUnB,YAAY,CAACQ,WAAD,EAAc,GAAd,CAAtB;AACA,OAAK,CAAL,IAAUR,YAAY,CAACY,WAAD,EAAc,GAAd,CAAtB;AACA,OAAK,EAAL,IAAWZ,YAAY,CAACgB,WAAD,EAAc,GAAd,CAAvB;AACA,OAAK,EAAL,IAAWhB,YAAY,CAACoB,WAAD,EAAc,GAAd,CAAvB;AACA,OAAK,EAAL,IAAWpB,YAAY,CAACS,WAAD,EAAc,GAAd,CAAvB;AACA,OAAK,EAAL,IAAWT,YAAY,CAACa,WAAD,EAAc,GAAd,CAAvB;AACA,OAAK,EAAL,IAAWb,YAAY,CAACiB,WAAD,EAAc,GAAd,CAAvB;AACA,OAAK,EAAL,IAAWjB,YAAY,CAACqB,WAAD,EAAc,GAAd,CAAvB;AACD;AAED;;;;;;AAIAhB,OAAO,CAACiB,YAAR,GAAuB,EAAvB;AAEA;;;;;;;;;;AASAjB,OAAO,CAACkB,IAAR,GAAe,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,aAAxB,EAAuC;AACpD;AACA3B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,OAApB,EAA6BJ,KAA7B;AACAzB,EAAAA,KAAK,CAACE,OAAN,CAAc,OAAd,EAAuBwB,KAAvB,EAHoD,CAIpD;;AAEAC,EAAAA,aAAa,GAAG1B,YAAY,CAAC0B,aAAD,EAAgB,CAAhB,CAA5B;AAEAD,EAAAA,KAAK,CAACC,aAAa,EAAd,CAAL,GAAyBF,KAAK,CAAC,CAAD,CAA9B;AACAC,EAAAA,KAAK,CAACC,aAAa,EAAd,CAAL,GAAyBF,KAAK,CAAC,CAAD,CAA9B;AACAC,EAAAA,KAAK,CAACC,aAAa,EAAd,CAAL,GAAyBF,KAAK,CAAC,CAAD,CAA9B;AACAC,EAAAA,KAAK,CAACC,aAAa,EAAd,CAAL,GAAyBF,KAAK,CAAC,CAAD,CAA9B;AACAC,EAAAA,KAAK,CAACC,aAAa,EAAd,CAAL,GAAyBF,KAAK,CAAC,CAAD,CAA9B;AACAC,EAAAA,KAAK,CAACC,aAAa,EAAd,CAAL,GAAyBF,KAAK,CAAC,CAAD,CAA9B;AACAC,EAAAA,KAAK,CAACC,aAAa,EAAd,CAAL,GAAyBF,KAAK,CAAC,CAAD,CAA9B;AACAC,EAAAA,KAAK,CAACC,aAAa,EAAd,CAAL,GAAyBF,KAAK,CAAC,CAAD,CAA9B;AACAC,EAAAA,KAAK,CAACC,aAAa,EAAd,CAAL,GAAyBF,KAAK,CAAC,CAAD,CAA9B;AACAC,EAAAA,KAAK,CAACC,aAAa,EAAd,CAAL,GAAyBF,KAAK,CAAC,CAAD,CAA9B;AACAC,EAAAA,KAAK,CAACC,aAAa,EAAd,CAAL,GAAyBF,KAAK,CAAC,EAAD,CAA9B;AACAC,EAAAA,KAAK,CAACC,aAAa,EAAd,CAAL,GAAyBF,KAAK,CAAC,EAAD,CAA9B;AACAC,EAAAA,KAAK,CAACC,aAAa,EAAd,CAAL,GAAyBF,KAAK,CAAC,EAAD,CAA9B;AACAC,EAAAA,KAAK,CAACC,aAAa,EAAd,CAAL,GAAyBF,KAAK,CAAC,EAAD,CAA9B;AACAC,EAAAA,KAAK,CAACC,aAAa,EAAd,CAAL,GAAyBF,KAAK,CAAC,EAAD,CAA9B;AACAC,EAAAA,KAAK,CAACC,aAAD,CAAL,GAAuBF,KAAK,CAAC,EAAD,CAA5B;AAEA,SAAOC,KAAP;AACD,CA1BD;AA4BA;;;;;;;;;;AAQApB,OAAO,CAACwB,MAAR,GAAiB,UAAUJ,KAAV,EAAiBC,aAAjB,EAAgCI,MAAhC,EAAwC;AACvD;AACA/B,EAAAA,KAAK,CAACE,OAAN,CAAc,OAAd,EAAuBwB,KAAvB,EAFuD,CAGvD;;AAEAC,EAAAA,aAAa,GAAG1B,YAAY,CAAC0B,aAAD,EAAgB,CAAhB,CAA5B;;AAEA,MAAI,CAACzB,OAAO,CAAC6B,MAAD,CAAZ,EAAsB;AACpBA,IAAAA,MAAM,GAAG,IAAIzB,OAAJ,EAAT;AACD;;AAEDyB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYL,KAAK,CAACC,aAAa,EAAd,CAAjB;AACAI,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYL,KAAK,CAACC,aAAa,EAAd,CAAjB;AACAI,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYL,KAAK,CAACC,aAAa,EAAd,CAAjB;AACAI,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYL,KAAK,CAACC,aAAa,EAAd,CAAjB;AACAI,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYL,KAAK,CAACC,aAAa,EAAd,CAAjB;AACAI,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYL,KAAK,CAACC,aAAa,EAAd,CAAjB;AACAI,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYL,KAAK,CAACC,aAAa,EAAd,CAAjB;AACAI,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYL,KAAK,CAACC,aAAa,EAAd,CAAjB;AACAI,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYL,KAAK,CAACC,aAAa,EAAd,CAAjB;AACAI,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYL,KAAK,CAACC,aAAa,EAAd,CAAjB;AACAI,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaL,KAAK,CAACC,aAAa,EAAd,CAAlB;AACAI,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaL,KAAK,CAACC,aAAa,EAAd,CAAlB;AACAI,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaL,KAAK,CAACC,aAAa,EAAd,CAAlB;AACAI,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaL,KAAK,CAACC,aAAa,EAAd,CAAlB;AACAI,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaL,KAAK,CAACC,aAAa,EAAd,CAAlB;AACAI,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaL,KAAK,CAACC,aAAD,CAAlB;AACA,SAAOI,MAAP;AACD,CA5BD;AA8BA;;;;;;;;;AAOAzB,OAAO,CAAC0B,KAAR,GAAgB,UAAUC,MAAV,EAAkBF,MAAlB,EAA0B;AACxC,MAAI,CAAC7B,OAAO,CAAC+B,MAAD,CAAZ,EAAsB;AACpB,WAAOC,SAAP;AACD;;AACD,MAAI,CAAChC,OAAO,CAAC6B,MAAD,CAAZ,EAAsB;AACpB,WAAO,IAAIzB,OAAJ,CACL2B,MAAM,CAAC,CAAD,CADD,EAELA,MAAM,CAAC,CAAD,CAFD,EAGLA,MAAM,CAAC,CAAD,CAHD,EAILA,MAAM,CAAC,EAAD,CAJD,EAKLA,MAAM,CAAC,CAAD,CALD,EAMLA,MAAM,CAAC,CAAD,CAND,EAOLA,MAAM,CAAC,CAAD,CAPD,EAQLA,MAAM,CAAC,EAAD,CARD,EASLA,MAAM,CAAC,CAAD,CATD,EAULA,MAAM,CAAC,CAAD,CAVD,EAWLA,MAAM,CAAC,EAAD,CAXD,EAYLA,MAAM,CAAC,EAAD,CAZD,EAaLA,MAAM,CAAC,CAAD,CAbD,EAcLA,MAAM,CAAC,CAAD,CAdD,EAeLA,MAAM,CAAC,EAAD,CAfD,EAgBLA,MAAM,CAAC,EAAD,CAhBD,CAAP;AAkBD;;AACDF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACA,SAAOF,MAAP;AACD,CAzCD;AA2CA;;;;;;;;;;;;;;;;;;;;;;;;;AAuBAzB,OAAO,CAAC6B,SAAR,GAAoB7B,OAAO,CAACwB,MAA5B;AAEA;;;;;;;;AAOAxB,OAAO,CAAC8B,oBAAR,GAA+B,UAAUC,MAAV,EAAkBN,MAAlB,EAA0B;AACvD;AACA/B,EAAAA,KAAK,CAACE,OAAN,CAAc,QAAd,EAAwBmC,MAAxB,EAFuD,CAGvD;;AAEA,SAAO/B,OAAO,CAAC0B,KAAR,CAAcK,MAAd,EAAsBN,MAAtB,CAAP;AACD,CAND;AAQA;;;;;;;;;;AAQAzB,OAAO,CAACgC,iBAAR,GAA4B,UAAUD,MAAV,EAAkBN,MAAlB,EAA0B;AACpD;AACA/B,EAAAA,KAAK,CAACE,OAAN,CAAc,QAAd,EAAwBmC,MAAxB,EAFoD,CAGpD;;AAEA,MAAI,CAACnC,OAAO,CAAC6B,MAAD,CAAZ,EAAsB;AACpB,WAAO,IAAIzB,OAAJ,CACL+B,MAAM,CAAC,CAAD,CADD,EAELA,MAAM,CAAC,CAAD,CAFD,EAGLA,MAAM,CAAC,CAAD,CAHD,EAILA,MAAM,CAAC,CAAD,CAJD,EAKLA,MAAM,CAAC,CAAD,CALD,EAMLA,MAAM,CAAC,CAAD,CAND,EAOLA,MAAM,CAAC,CAAD,CAPD,EAQLA,MAAM,CAAC,CAAD,CARD,EASLA,MAAM,CAAC,CAAD,CATD,EAULA,MAAM,CAAC,CAAD,CAVD,EAWLA,MAAM,CAAC,EAAD,CAXD,EAYLA,MAAM,CAAC,EAAD,CAZD,EAaLA,MAAM,CAAC,EAAD,CAbD,EAcLA,MAAM,CAAC,EAAD,CAdD,EAeLA,MAAM,CAAC,EAAD,CAfD,EAgBLA,MAAM,CAAC,EAAD,CAhBD,CAAP;AAkBD;;AACDN,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYM,MAAM,CAAC,CAAD,CAAlB;AACAN,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYM,MAAM,CAAC,CAAD,CAAlB;AACAN,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYM,MAAM,CAAC,CAAD,CAAlB;AACAN,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYM,MAAM,CAAC,EAAD,CAAlB;AACAN,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYM,MAAM,CAAC,CAAD,CAAlB;AACAN,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYM,MAAM,CAAC,CAAD,CAAlB;AACAN,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYM,MAAM,CAAC,CAAD,CAAlB;AACAN,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYM,MAAM,CAAC,EAAD,CAAlB;AACAN,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYM,MAAM,CAAC,CAAD,CAAlB;AACAN,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYM,MAAM,CAAC,CAAD,CAAlB;AACAN,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaM,MAAM,CAAC,EAAD,CAAnB;AACAN,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaM,MAAM,CAAC,EAAD,CAAnB;AACAN,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaM,MAAM,CAAC,CAAD,CAAnB;AACAN,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaM,MAAM,CAAC,CAAD,CAAnB;AACAN,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaM,MAAM,CAAC,EAAD,CAAnB;AACAN,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaM,MAAM,CAAC,EAAD,CAAnB;AACA,SAAON,MAAP;AACD,CA1CD;AA4CA;;;;;;;;;;;AASAzB,OAAO,CAACiC,uBAAR,GAAkC,UAAUC,QAAV,EAAoBC,WAApB,EAAiCV,MAAjC,EAAyC;AACzE;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,UAApB,EAAgCW,QAAhC,EAFyE,CAGzE;;AAEAC,EAAAA,WAAW,GAAGxC,YAAY,CAACwC,WAAD,EAAc3C,UAAU,CAAC4C,IAAzB,CAA1B;;AAEA,MAAI,CAACxC,OAAO,CAAC6B,MAAD,CAAZ,EAAsB;AACpB,WAAO,IAAIzB,OAAJ,CACLkC,QAAQ,CAAC,CAAD,CADH,EAELA,QAAQ,CAAC,CAAD,CAFH,EAGLA,QAAQ,CAAC,CAAD,CAHH,EAILC,WAAW,CAACE,CAJP,EAKLH,QAAQ,CAAC,CAAD,CALH,EAMLA,QAAQ,CAAC,CAAD,CANH,EAOLA,QAAQ,CAAC,CAAD,CAPH,EAQLC,WAAW,CAACG,CARP,EASLJ,QAAQ,CAAC,CAAD,CATH,EAULA,QAAQ,CAAC,CAAD,CAVH,EAWLA,QAAQ,CAAC,CAAD,CAXH,EAYLC,WAAW,CAACI,CAZP,EAaL,GAbK,EAcL,GAdK,EAeL,GAfK,EAgBL,GAhBK,CAAP;AAkBD;;AAEDd,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYS,QAAQ,CAAC,CAAD,CAApB;AACAT,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYS,QAAQ,CAAC,CAAD,CAApB;AACAT,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYS,QAAQ,CAAC,CAAD,CAApB;AACAT,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYS,QAAQ,CAAC,CAAD,CAApB;AACAT,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYS,QAAQ,CAAC,CAAD,CAApB;AACAT,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYS,QAAQ,CAAC,CAAD,CAApB;AACAT,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYS,QAAQ,CAAC,CAAD,CAApB;AACAT,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYS,QAAQ,CAAC,CAAD,CAApB;AACAT,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaS,QAAQ,CAAC,CAAD,CAArB;AACAT,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaU,WAAW,CAACE,CAAzB;AACAZ,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaU,WAAW,CAACG,CAAzB;AACAb,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaU,WAAW,CAACI,CAAzB;AACAd,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACA,SAAOA,MAAP;AACD,CA7CD;AA+CA;;;;;;;;;;;;;;;;;;;AAiBAzB,OAAO,CAACwC,sCAAR,GAAiD,UAC/CL,WAD+C,EAE/CD,QAF+C,EAG/CO,KAH+C,EAI/ChB,MAJ+C,EAK/C;AACA;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,aAApB,EAAmCY,WAAnC;AACAzC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,UAApB,EAAgCW,QAAhC;AACAxC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,OAApB,EAA6BkB,KAA7B,EAJA,CAKA;;AAEA,MAAI,CAAC7C,OAAO,CAAC6B,MAAD,CAAZ,EAAsB;AACpBA,IAAAA,MAAM,GAAG,IAAIzB,OAAJ,EAAT;AACD;;AAED,MAAI0C,MAAM,GAAGD,KAAK,CAACJ,CAAnB;AACA,MAAIM,MAAM,GAAGF,KAAK,CAACH,CAAnB;AACA,MAAIM,MAAM,GAAGH,KAAK,CAACF,CAAnB;AAEA,MAAIM,EAAE,GAAGX,QAAQ,CAACG,CAAT,GAAaH,QAAQ,CAACG,CAA/B;AACA,MAAIS,EAAE,GAAGZ,QAAQ,CAACG,CAAT,GAAaH,QAAQ,CAACI,CAA/B;AACA,MAAIS,EAAE,GAAGb,QAAQ,CAACG,CAAT,GAAaH,QAAQ,CAACK,CAA/B;AACA,MAAIS,EAAE,GAAGd,QAAQ,CAACG,CAAT,GAAaH,QAAQ,CAACe,CAA/B;AACA,MAAIC,EAAE,GAAGhB,QAAQ,CAACI,CAAT,GAAaJ,QAAQ,CAACI,CAA/B;AACA,MAAIa,EAAE,GAAGjB,QAAQ,CAACI,CAAT,GAAaJ,QAAQ,CAACK,CAA/B;AACA,MAAIa,EAAE,GAAGlB,QAAQ,CAACI,CAAT,GAAaJ,QAAQ,CAACe,CAA/B;AACA,MAAII,EAAE,GAAGnB,QAAQ,CAACK,CAAT,GAAaL,QAAQ,CAACK,CAA/B;AACA,MAAIe,EAAE,GAAGpB,QAAQ,CAACK,CAAT,GAAaL,QAAQ,CAACe,CAA/B;AACA,MAAIM,EAAE,GAAGrB,QAAQ,CAACe,CAAT,GAAaf,QAAQ,CAACe,CAA/B;AAEA,MAAIO,GAAG,GAAGX,EAAE,GAAGK,EAAL,GAAUG,EAAV,GAAeE,EAAzB;AACA,MAAIE,GAAG,GAAG,OAAOX,EAAE,GAAGQ,EAAZ,CAAV;AACA,MAAII,GAAG,GAAG,OAAOX,EAAE,GAAGK,EAAZ,CAAV;AAEA,MAAIO,GAAG,GAAG,OAAOb,EAAE,GAAGQ,EAAZ,CAAV;AACA,MAAIM,GAAG,GAAG,CAACf,EAAD,GAAMK,EAAN,GAAWG,EAAX,GAAgBE,EAA1B;AACA,MAAIM,GAAG,GAAG,OAAOV,EAAE,GAAGH,EAAZ,CAAV;AAEA,MAAIc,GAAG,GAAG,OAAOf,EAAE,GAAGK,EAAZ,CAAV;AACA,MAAIW,GAAG,GAAG,OAAOZ,EAAE,GAAGH,EAAZ,CAAV;AACA,MAAIgB,GAAG,GAAG,CAACnB,EAAD,GAAMK,EAAN,GAAWG,EAAX,GAAgBE,EAA1B;AAEA9B,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY+B,GAAG,GAAGd,MAAlB;AACAjB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYkC,GAAG,GAAGjB,MAAlB;AACAjB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYqC,GAAG,GAAGpB,MAAlB;AACAjB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYgC,GAAG,GAAGd,MAAlB;AACAlB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYmC,GAAG,GAAGjB,MAAlB;AACAlB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYsC,GAAG,GAAGpB,MAAlB;AACAlB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYiC,GAAG,GAAGd,MAAlB;AACAnB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoC,GAAG,GAAGjB,MAAlB;AACAnB,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAauC,GAAG,GAAGpB,MAAnB;AACAnB,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaU,WAAW,CAACE,CAAzB;AACAZ,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaU,WAAW,CAACG,CAAzB;AACAb,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaU,WAAW,CAACI,CAAzB;AACAd,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AAEA,SAAOA,MAAP;AACD,CA7DD;AA+DA;;;;;;;;;AAOAzB,OAAO,CAACiE,4BAAR,GAAuC,UACrCC,wBADqC,EAErCzC,MAFqC,EAGrC;AACA;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,0BAApB,EAAgD2C,wBAAhD,EAFA,CAGA;;AAEA,SAAOlE,OAAO,CAACwC,sCAAR,CACL0B,wBAAwB,CAAC/B,WADpB,EAEL+B,wBAAwB,CAAChC,QAFpB,EAGLgC,wBAAwB,CAACzB,KAHpB,EAILhB,MAJK,CAAP;AAMD,CAdD;AAgBA;;;;;;;;;;;AASAzB,OAAO,CAACmE,eAAR,GAA0B,UAAUhC,WAAV,EAAuBV,MAAvB,EAA+B;AACvD;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,aAApB,EAAmCY,WAAnC,EAFuD,CAGvD;;AAEA,SAAOnC,OAAO,CAACiC,uBAAR,CAAgCnC,OAAO,CAACsE,QAAxC,EAAkDjC,WAAlD,EAA+DV,MAA/D,CAAP;AACD,CAND;AAQA;;;;;;;;;;;;;;;;;AAeAzB,OAAO,CAACqE,SAAR,GAAoB,UAAU5B,KAAV,EAAiBhB,MAAjB,EAAyB;AAC3C;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,OAApB,EAA6BkB,KAA7B,EAF2C,CAG3C;;AAEA,MAAI,CAAC7C,OAAO,CAAC6B,MAAD,CAAZ,EAAsB;AACpB,WAAO,IAAIzB,OAAJ,CACLyC,KAAK,CAACJ,CADD,EAEL,GAFK,EAGL,GAHK,EAIL,GAJK,EAKL,GALK,EAMLI,KAAK,CAACH,CAND,EAOL,GAPK,EAQL,GARK,EASL,GATK,EAUL,GAVK,EAWLG,KAAK,CAACF,CAXD,EAYL,GAZK,EAaL,GAbK,EAcL,GAdK,EAeL,GAfK,EAgBL,GAhBK,CAAP;AAkBD;;AAEDd,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYgB,KAAK,CAACJ,CAAlB;AACAZ,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYgB,KAAK,CAACH,CAAlB;AACAb,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAagB,KAAK,CAACF,CAAnB;AACAd,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACA,SAAOA,MAAP;AACD,CA3CD;AA6CA;;;;;;;;;;;;;;;;;AAeAzB,OAAO,CAACsE,gBAAR,GAA2B,UAAU7B,KAAV,EAAiBhB,MAAjB,EAAyB;AAClD;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,OAApB,EAA6B9B,KAA7B,EAFkD,CAGlD;;AAEA,MAAI,CAAC7C,OAAO,CAAC6B,MAAD,CAAZ,EAAsB;AACpB,WAAO,IAAIzB,OAAJ,CACLyC,KADK,EAEL,GAFK,EAGL,GAHK,EAIL,GAJK,EAKL,GALK,EAMLA,KANK,EAOL,GAPK,EAQL,GARK,EASL,GATK,EAUL,GAVK,EAWLA,KAXK,EAYL,GAZK,EAaL,GAbK,EAcL,GAdK,EAeL,GAfK,EAgBL,GAhBK,CAAP;AAkBD;;AAEDhB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYgB,KAAZ;AACAhB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYgB,KAAZ;AACAhB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAagB,KAAb;AACAhB,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACA,SAAOA,MAAP;AACD,CA3CD;;AA6CA,IAAI+C,WAAW,GAAG,IAAIhF,UAAJ,EAAlB;AACA,IAAIiF,WAAW,GAAG,IAAIjF,UAAJ,EAAlB;AACA,IAAIkF,WAAW,GAAG,IAAIlF,UAAJ,EAAlB;AAEA;;;;;;;;AAOAQ,OAAO,CAAC2E,UAAR,GAAqB,UAAUC,MAAV,EAAkBnD,MAAlB,EAA0B;AAC7C;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BqD,MAA9B,EAF6C,CAG7C;;AAEA,MAAIC,QAAQ,GAAGD,MAAM,CAACC,QAAtB;AACA,MAAIC,SAAS,GAAGF,MAAM,CAACE,SAAvB;AACA,MAAIC,EAAE,GAAGH,MAAM,CAACG,EAAhB,CAP6C,CAS7C;;AACArF,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,iBAApB,EAAuCsD,QAAvC;AACAnF,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,kBAApB,EAAwCuD,SAAxC;AACApF,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,WAApB,EAAiCwD,EAAjC,EAZ6C,CAa7C;;AAEAvF,EAAAA,UAAU,CAACwF,SAAX,CAAqBF,SAArB,EAAgCN,WAAhC;AACAhF,EAAAA,UAAU,CAACwF,SAAX,CACExF,UAAU,CAACyF,KAAX,CAAiBT,WAAjB,EAA8BO,EAA9B,EAAkCN,WAAlC,CADF,EAEEA,WAFF;AAIAjF,EAAAA,UAAU,CAACwF,SAAX,CACExF,UAAU,CAACyF,KAAX,CAAiBR,WAAjB,EAA8BD,WAA9B,EAA2CE,WAA3C,CADF,EAEEA,WAFF;AAKA,MAAIQ,EAAE,GAAGT,WAAW,CAACpC,CAArB;AACA,MAAI8C,EAAE,GAAGV,WAAW,CAACnC,CAArB;AACA,MAAI8C,EAAE,GAAGX,WAAW,CAAClC,CAArB;AACA,MAAI8C,EAAE,GAAGb,WAAW,CAACnC,CAArB;AACA,MAAIiD,EAAE,GAAGd,WAAW,CAAClC,CAArB;AACA,MAAIiD,EAAE,GAAGf,WAAW,CAACjC,CAArB;AACA,MAAIiD,EAAE,GAAGd,WAAW,CAACrC,CAArB;AACA,MAAIoD,EAAE,GAAGf,WAAW,CAACpC,CAArB;AACA,MAAIoD,EAAE,GAAGhB,WAAW,CAACnC,CAArB;AACA,MAAIoD,SAAS,GAAGd,QAAQ,CAACxC,CAAzB;AACA,MAAIuD,SAAS,GAAGf,QAAQ,CAACvC,CAAzB;AACA,MAAIuD,SAAS,GAAGhB,QAAQ,CAACtC,CAAzB;AACA,MAAIuD,EAAE,GAAGZ,EAAE,GAAG,CAACS,SAAN,GAAkBR,EAAE,GAAG,CAACS,SAAxB,GAAoCR,EAAE,GAAG,CAACS,SAAnD;AACA,MAAIE,EAAE,GAAGP,EAAE,GAAG,CAACG,SAAN,GAAkBF,EAAE,GAAG,CAACG,SAAxB,GAAoCF,EAAE,GAAG,CAACG,SAAnD;AACA,MAAIG,EAAE,GAAGX,EAAE,GAAGM,SAAL,GAAiBL,EAAE,GAAGM,SAAtB,GAAkCL,EAAE,GAAGM,SAAhD,CAvC6C,CAyC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAI,CAACjG,OAAO,CAAC6B,MAAD,CAAZ,EAAsB;AACpB,WAAO,IAAIzB,OAAJ,CACLkF,EADK,EAELC,EAFK,EAGLC,EAHK,EAILU,EAJK,EAKLN,EALK,EAMLC,EANK,EAOLC,EAPK,EAQLK,EARK,EASL,CAACV,EATI,EAUL,CAACC,EAVI,EAWL,CAACC,EAXI,EAYLS,EAZK,EAaL,GAbK,EAcL,GAdK,EAeL,GAfK,EAgBL,GAhBK,CAAP;AAkBD;;AACDvE,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYyD,EAAZ;AACAzD,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY+D,EAAZ;AACA/D,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAAC4D,EAAb;AACA5D,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY0D,EAAZ;AACA1D,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYgE,EAAZ;AACAhE,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAAC6D,EAAb;AACA7D,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY2D,EAAZ;AACA3D,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYiE,EAAZ;AACAjE,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,CAAC8D,EAAd;AACA9D,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaqE,EAAb;AACArE,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAasE,EAAb;AACAtE,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAauE,EAAb;AACAvE,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACA,SAAOA,MAAP;AACD,CA7FD;AA+FA;;;;;;;;;;;;;;;;;AAeAzB,OAAO,CAACiG,6BAAR,GAAwC,UACtCC,IADsC,EAEtCC,WAFsC,EAGtCC,IAHsC,EAItCC,GAJsC,EAKtC5E,MALsC,EAMtC;AACA;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB+B,WAApB,CAAgC,MAAhC,EAAwCJ,IAAxC,EAA8C,GAA9C;AACAxG,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoBgC,QAApB,CAA6B,MAA7B,EAAqCL,IAArC,EAA2CM,IAAI,CAACC,EAAhD;AACA/G,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB+B,WAApB,CAAgC,MAAhC,EAAwCF,IAAxC,EAA8C,GAA9C;AACA1G,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB+B,WAApB,CAAgC,KAAhC,EAAuCD,GAAvC,EAA4C,GAA5C;AACA3G,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EANA,CAOA;;AAEA,MAAIiF,MAAM,GAAGF,IAAI,CAACG,GAAL,CAAST,IAAI,GAAG,GAAhB,CAAb;AAEA,MAAI5F,WAAW,GAAG,MAAMoG,MAAxB;AACA,MAAIzG,WAAW,GAAGK,WAAW,GAAG6F,WAAhC;AACA,MAAIxF,WAAW,GAAG,CAAC0F,GAAG,GAAGD,IAAP,KAAgBA,IAAI,GAAGC,GAAvB,CAAlB;AACA,MAAIzF,WAAW,GAAI,MAAMyF,GAAN,GAAYD,IAAb,IAAsBA,IAAI,GAAGC,GAA7B,CAAlB;AAEA5E,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYxB,WAAZ;AACAwB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYnB,WAAZ;AACAmB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAad,WAAb;AACAc,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,CAAC,GAAd;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAab,WAAb;AACAa,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACA,SAAOA,MAAP;AACD,CAvCD;AAyCA;;;;;;;;;;;;;;AAYAzB,OAAO,CAAC4G,4BAAR,GAAuC,UACrCC,IADqC,EAErCC,KAFqC,EAGrCJ,MAHqC,EAIrCK,GAJqC,EAKrCX,IALqC,EAMrCC,GANqC,EAOrC5E,MAPqC,EAQrC;AACA;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,MAApB,EAA4BsC,IAA5B;AACAnH,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,OAApB,EAA6BuC,KAA7B;AACApH,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,QAApB,EAA8BmC,MAA9B;AACAhH,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,KAApB,EAA2BwC,GAA3B;AACArH,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,MAApB,EAA4B6B,IAA5B;AACA1G,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,KAApB,EAA2B8B,GAA3B;AACA3G,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EARA,CASA;;AAEA,MAAIuF,CAAC,GAAG,OAAOF,KAAK,GAAGD,IAAf,CAAR;AACA,MAAII,CAAC,GAAG,OAAOF,GAAG,GAAGL,MAAb,CAAR;AACA,MAAIQ,CAAC,GAAG,OAAOb,GAAG,GAAGD,IAAb,CAAR;AAEA,MAAIe,EAAE,GAAG,EAAEL,KAAK,GAAGD,IAAV,IAAkBG,CAA3B;AACA,MAAII,EAAE,GAAG,EAAEL,GAAG,GAAGL,MAAR,IAAkBO,CAA3B;AACA,MAAII,EAAE,GAAG,EAAEhB,GAAG,GAAGD,IAAR,IAAgBc,CAAzB;AACAF,EAAAA,CAAC,IAAI,GAAL;AACAC,EAAAA,CAAC,IAAI,GAAL;AACAC,EAAAA,CAAC,IAAI,CAAC,GAAN;AAEAzF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYuF,CAAZ;AACAvF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYwF,CAAZ;AACAxF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAayF,CAAb;AACAzF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa0F,EAAb;AACA1F,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa2F,EAAb;AACA3F,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa4F,EAAb;AACA5F,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACA,SAAOA,MAAP;AACD,CA/CD;AAiDA;;;;;;;;;;;;;;AAYAzB,OAAO,CAACsH,2BAAR,GAAsC,UACpCT,IADoC,EAEpCC,KAFoC,EAGpCJ,MAHoC,EAIpCK,GAJoC,EAKpCX,IALoC,EAMpCC,GANoC,EAOpC5E,MAPoC,EAQpC;AACA;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,MAApB,EAA4BsC,IAA5B;AACAnH,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,OAApB,EAA6BuC,KAA7B;AACApH,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,QAApB,EAA8BmC,MAA9B;AACAhH,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,KAApB,EAA2BwC,GAA3B;AACArH,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,MAApB,EAA4B6B,IAA5B;AACA1G,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,KAApB,EAA2B8B,GAA3B;AACA3G,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EARA,CASA;;AAEA,MAAIxB,WAAW,GAAI,MAAMmG,IAAP,IAAgBU,KAAK,GAAGD,IAAxB,CAAlB;AACA,MAAIvG,WAAW,GAAI,MAAM8F,IAAP,IAAgBW,GAAG,GAAGL,MAAtB,CAAlB;AACA,MAAIvG,WAAW,GAAG,CAAC2G,KAAK,GAAGD,IAAT,KAAkBC,KAAK,GAAGD,IAA1B,CAAlB;AACA,MAAItG,WAAW,GAAG,CAACwG,GAAG,GAAGL,MAAP,KAAkBK,GAAG,GAAGL,MAAxB,CAAlB;AACA,MAAI/F,WAAW,GAAG,EAAE0F,GAAG,GAAGD,IAAR,KAAiBC,GAAG,GAAGD,IAAvB,CAAlB;AACA,MAAIrF,WAAW,GAAG,CAAC,GAAnB;AACA,MAAIH,WAAW,GAAI,CAAC,GAAD,GAAOyF,GAAP,GAAaD,IAAd,IAAuBC,GAAG,GAAGD,IAA7B,CAAlB;AAEA3E,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYxB,WAAZ;AACAwB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYnB,WAAZ;AACAmB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYtB,WAAZ;AACAsB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYlB,WAAZ;AACAkB,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAad,WAAb;AACAc,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaV,WAAb;AACAU,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAab,WAAb;AACAa,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACA,SAAOA,MAAP;AACD,CA5CD;AA8CA;;;;;;;;;;;;;AAWAzB,OAAO,CAACuH,mCAAR,GAA8C,UAC5CV,IAD4C,EAE5CC,KAF4C,EAG5CJ,MAH4C,EAI5CK,GAJ4C,EAK5CX,IAL4C,EAM5C3E,MAN4C,EAO5C;AACA;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,MAApB,EAA4BsC,IAA5B;AACAnH,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,OAApB,EAA6BuC,KAA7B;AACApH,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,QAApB,EAA8BmC,MAA9B;AACAhH,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,KAApB,EAA2BwC,GAA3B;AACArH,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,MAApB,EAA4B6B,IAA5B;AACA1G,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAPA,CAQA;;AAEA,MAAIxB,WAAW,GAAI,MAAMmG,IAAP,IAAgBU,KAAK,GAAGD,IAAxB,CAAlB;AACA,MAAIvG,WAAW,GAAI,MAAM8F,IAAP,IAAgBW,GAAG,GAAGL,MAAtB,CAAlB;AACA,MAAIvG,WAAW,GAAG,CAAC2G,KAAK,GAAGD,IAAT,KAAkBC,KAAK,GAAGD,IAA1B,CAAlB;AACA,MAAItG,WAAW,GAAG,CAACwG,GAAG,GAAGL,MAAP,KAAkBK,GAAG,GAAGL,MAAxB,CAAlB;AACA,MAAI/F,WAAW,GAAG,CAAC,GAAnB;AACA,MAAII,WAAW,GAAG,CAAC,GAAnB;AACA,MAAIH,WAAW,GAAG,CAAC,GAAD,GAAOwF,IAAzB;AAEA3E,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYxB,WAAZ;AACAwB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYnB,WAAZ;AACAmB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYtB,WAAZ;AACAsB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYlB,WAAZ;AACAkB,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAad,WAAb;AACAc,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaV,WAAb;AACAU,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAab,WAAb;AACAa,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACA,SAAOA,MAAP;AACD,CA1CD;AA4CA;;;;;;;;;;;;;;;;;;;;AAkBAzB,OAAO,CAACwH,6BAAR,GAAwC,UACtCC,QADsC,EAEtCC,cAFsC,EAGtCC,aAHsC,EAItClG,MAJsC,EAKtC;AACA;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAFA,CAGA;;AAEAgG,EAAAA,QAAQ,GAAG9H,YAAY,CAAC8H,QAAD,EAAW9H,YAAY,CAACiI,YAAxB,CAAvB;AACA,MAAIvF,CAAC,GAAG1C,YAAY,CAAC8H,QAAQ,CAACpF,CAAV,EAAa,GAAb,CAApB;AACA,MAAIC,CAAC,GAAG3C,YAAY,CAAC8H,QAAQ,CAACnF,CAAV,EAAa,GAAb,CAApB;AACA,MAAIuF,KAAK,GAAGlI,YAAY,CAAC8H,QAAQ,CAACI,KAAV,EAAiB,GAAjB,CAAxB;AACA,MAAIC,MAAM,GAAGnI,YAAY,CAAC8H,QAAQ,CAACK,MAAV,EAAkB,GAAlB,CAAzB;AACAJ,EAAAA,cAAc,GAAG/H,YAAY,CAAC+H,cAAD,EAAiB,GAAjB,CAA7B;AACAC,EAAAA,aAAa,GAAGhI,YAAY,CAACgI,aAAD,EAAgB,GAAhB,CAA5B;AAEA,MAAII,SAAS,GAAGF,KAAK,GAAG,GAAxB;AACA,MAAIG,UAAU,GAAGF,MAAM,GAAG,GAA1B;AACA,MAAIG,SAAS,GAAG,CAACN,aAAa,GAAGD,cAAjB,IAAmC,GAAnD;AAEA,MAAIzH,WAAW,GAAG8H,SAAlB;AACA,MAAIzH,WAAW,GAAG0H,UAAlB;AACA,MAAIrH,WAAW,GAAGsH,SAAlB;AACA,MAAI7H,WAAW,GAAGiC,CAAC,GAAG0F,SAAtB;AACA,MAAIvH,WAAW,GAAG8B,CAAC,GAAG0F,UAAtB;AACA,MAAIpH,WAAW,GAAG8G,cAAc,GAAGO,SAAnC;AACA,MAAIjH,WAAW,GAAG,GAAlB;AAEAS,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYxB,WAAZ;AACAwB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYnB,WAAZ;AACAmB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAad,WAAb;AACAc,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAarB,WAAb;AACAqB,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAajB,WAAb;AACAiB,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAab,WAAb;AACAa,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaT,WAAb;AACA,SAAOS,MAAP;AACD,CA/CD;AAiDA;;;;;;;;;;;;AAUAzB,OAAO,CAACkI,WAAR,GAAsB,UAAUrD,QAAV,EAAoBC,SAApB,EAA+BC,EAA/B,EAAmC+B,KAAnC,EAA0CrF,MAA1C,EAAkD;AACtE;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,UAApB,EAAgCsD,QAAhC;AACAnF,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,WAApB,EAAiCuD,SAAjC;AACApF,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,IAApB,EAA0BwD,EAA1B;AACArF,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,OAApB,EAA6BuF,KAA7B;AACApH,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EANsE,CAOtE;;AAEAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYqF,KAAK,CAACzE,CAAlB;AACAZ,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYsD,EAAE,CAAC1C,CAAf;AACAZ,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAACqD,SAAS,CAACzC,CAAvB;AACAZ,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYqF,KAAK,CAACxE,CAAlB;AACAb,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYsD,EAAE,CAACzC,CAAf;AACAb,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAACqD,SAAS,CAACxC,CAAvB;AACAb,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYqF,KAAK,CAACvE,CAAlB;AACAd,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYsD,EAAE,CAACxC,CAAf;AACAd,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,CAACqD,SAAS,CAACvC,CAAxB;AACAd,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,CAACjC,UAAU,CAAC2I,GAAX,CAAerB,KAAf,EAAsBjC,QAAtB,CAAd;AACApD,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,CAACjC,UAAU,CAAC2I,GAAX,CAAepD,EAAf,EAAmBF,QAAnB,CAAd;AACApD,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAajC,UAAU,CAAC2I,GAAX,CAAerD,SAAf,EAA0BD,QAA1B,CAAb;AACApD,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACA,SAAOA,MAAP;AACD,CA1BD;AA4BA;;;;;;;;;;;;;;;;;;;;;AAmBAzB,OAAO,CAACoI,OAAR,GAAkB,UAAUzG,MAAV,EAAkBF,MAAlB,EAA0B;AAC1C;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B,EAF0C,CAG1C;;AAEA,MAAI,CAAC/B,OAAO,CAAC6B,MAAD,CAAZ,EAAsB;AACpB,WAAO,CACLE,MAAM,CAAC,CAAD,CADD,EAELA,MAAM,CAAC,CAAD,CAFD,EAGLA,MAAM,CAAC,CAAD,CAHD,EAILA,MAAM,CAAC,CAAD,CAJD,EAKLA,MAAM,CAAC,CAAD,CALD,EAMLA,MAAM,CAAC,CAAD,CAND,EAOLA,MAAM,CAAC,CAAD,CAPD,EAQLA,MAAM,CAAC,CAAD,CARD,EASLA,MAAM,CAAC,CAAD,CATD,EAULA,MAAM,CAAC,CAAD,CAVD,EAWLA,MAAM,CAAC,EAAD,CAXD,EAYLA,MAAM,CAAC,EAAD,CAZD,EAaLA,MAAM,CAAC,EAAD,CAbD,EAcLA,MAAM,CAAC,EAAD,CAdD,EAeLA,MAAM,CAAC,EAAD,CAfD,EAgBLA,MAAM,CAAC,EAAD,CAhBD,CAAP;AAkBD;;AACDF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACA,SAAOF,MAAP;AACD,CA1CD;AA4CA;;;;;;;;;;;;;;;;;;AAgBAzB,OAAO,CAACqI,eAAR,GAA0B,UAAUC,MAAV,EAAkBC,GAAlB,EAAuB;AAC/C;AACA7I,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoBiE,mBAApB,CAAwC,KAAxC,EAA+CD,GAA/C,EAAoD,CAApD;AACA7I,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoBkE,gBAApB,CAAqC,KAArC,EAA4CF,GAA5C,EAAiD,CAAjD;AAEA7I,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoBiE,mBAApB,CAAwC,QAAxC,EAAkDF,MAAlD,EAA0D,CAA1D;AACA5I,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoBkE,gBAApB,CAAqC,QAArC,EAA+CH,MAA/C,EAAuD,CAAvD,EAN+C,CAO/C;;AAEA,SAAOA,MAAM,GAAG,CAAT,GAAaC,GAApB;AACD,CAVD;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BAvI,OAAO,CAAC0I,SAAR,GAAoB,UAAU/G,MAAV,EAAkBgH,KAAlB,EAAyBlH,MAAzB,EAAiC;AACnD;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AAEAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoBiE,mBAApB,CAAwC,OAAxC,EAAiDG,KAAjD,EAAwD,CAAxD;AACAjJ,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoBkE,gBAApB,CAAqC,OAArC,EAA8CE,KAA9C,EAAqD,CAArD;AAEAjJ,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAPmD,CAQnD;;AAEA,MAAImH,UAAU,GAAGD,KAAK,GAAG,CAAzB;AACA,MAAItG,CAAC,GAAGV,MAAM,CAACiH,UAAD,CAAd;AACA,MAAItG,CAAC,GAAGX,MAAM,CAACiH,UAAU,GAAG,CAAd,CAAd;AACA,MAAIrG,CAAC,GAAGZ,MAAM,CAACiH,UAAU,GAAG,CAAd,CAAd;AACA,MAAI3F,CAAC,GAAGtB,MAAM,CAACiH,UAAU,GAAG,CAAd,CAAd;AAEAnH,EAAAA,MAAM,CAACY,CAAP,GAAWA,CAAX;AACAZ,EAAAA,MAAM,CAACa,CAAP,GAAWA,CAAX;AACAb,EAAAA,MAAM,CAACc,CAAP,GAAWA,CAAX;AACAd,EAAAA,MAAM,CAACwB,CAAP,GAAWA,CAAX;AACA,SAAOxB,MAAP;AACD,CArBD;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BAzB,OAAO,CAAC6I,SAAR,GAAoB,UAAUlH,MAAV,EAAkBgH,KAAlB,EAAyBG,SAAzB,EAAoCrH,MAApC,EAA4C;AAC9D;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AAEAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoBiE,mBAApB,CAAwC,OAAxC,EAAiDG,KAAjD,EAAwD,CAAxD;AACAjJ,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoBkE,gBAApB,CAAqC,OAArC,EAA8CE,KAA9C,EAAqD,CAArD;AAEAjJ,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,WAApB,EAAiCuH,SAAjC;AACApJ,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAR8D,CAS9D;;AAEAA,EAAAA,MAAM,GAAGzB,OAAO,CAAC0B,KAAR,CAAcC,MAAd,EAAsBF,MAAtB,CAAT;AACA,MAAImH,UAAU,GAAGD,KAAK,GAAG,CAAzB;AACAlH,EAAAA,MAAM,CAACmH,UAAD,CAAN,GAAqBE,SAAS,CAACzG,CAA/B;AACAZ,EAAAA,MAAM,CAACmH,UAAU,GAAG,CAAd,CAAN,GAAyBE,SAAS,CAACxG,CAAnC;AACAb,EAAAA,MAAM,CAACmH,UAAU,GAAG,CAAd,CAAN,GAAyBE,SAAS,CAACvG,CAAnC;AACAd,EAAAA,MAAM,CAACmH,UAAU,GAAG,CAAd,CAAN,GAAyBE,SAAS,CAAC7F,CAAnC;AACA,SAAOxB,MAAP;AACD,CAlBD;AAoBA;;;;;;;;;;;AASAzB,OAAO,CAAC+I,cAAR,GAAyB,UAAUpH,MAAV,EAAkBQ,WAAlB,EAA+BV,MAA/B,EAAuC;AAC9D;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AACAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,aAApB,EAAmCY,WAAnC;AACAzC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAJ8D,CAK9D;;AAEAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AAEAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AAEAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AAEAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaU,WAAW,CAACE,CAAzB;AACAZ,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaU,WAAW,CAACG,CAAzB;AACAb,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaU,WAAW,CAACI,CAAzB;AACAd,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AAEA,SAAOF,MAAP;AACD,CA5BD;;AA8BA,IAAIuH,YAAY,GAAG,IAAIxJ,UAAJ,EAAnB;AACA;;;;;;;;;AAQAQ,OAAO,CAACiJ,QAAR,GAAmB,UAAUtH,MAAV,EAAkBc,KAAlB,EAAyBhB,MAAzB,EAAiC;AAClD;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AACAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,OAApB,EAA6BkB,KAA7B;AACA/C,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAJkD,CAKlD;;AAEA,MAAIyH,aAAa,GAAGlJ,OAAO,CAACmJ,QAAR,CAAiBxH,MAAjB,EAAyBqH,YAAzB,CAApB;AACA,MAAII,QAAQ,GAAG5J,UAAU,CAAC6J,gBAAX,CACb5G,KADa,EAEbyG,aAFa,EAGbF,YAHa,CAAf;AAKA,SAAOhJ,OAAO,CAACsJ,eAAR,CAAwB3H,MAAxB,EAAgCyH,QAAhC,EAA0C3H,MAA1C,CAAP;AACD,CAdD;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BAzB,OAAO,CAACuJ,MAAR,GAAiB,UAAU5H,MAAV,EAAkBgH,KAAlB,EAAyBlH,MAAzB,EAAiC;AAChD;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AAEAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoBiE,mBAApB,CAAwC,OAAxC,EAAiDG,KAAjD,EAAwD,CAAxD;AACAjJ,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoBkE,gBAApB,CAAqC,OAArC,EAA8CE,KAA9C,EAAqD,CAArD;AAEAjJ,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAPgD,CAQhD;;AAEA,MAAIY,CAAC,GAAGV,MAAM,CAACgH,KAAD,CAAd;AACA,MAAIrG,CAAC,GAAGX,MAAM,CAACgH,KAAK,GAAG,CAAT,CAAd;AACA,MAAIpG,CAAC,GAAGZ,MAAM,CAACgH,KAAK,GAAG,CAAT,CAAd;AACA,MAAI1F,CAAC,GAAGtB,MAAM,CAACgH,KAAK,GAAG,EAAT,CAAd;AAEAlH,EAAAA,MAAM,CAACY,CAAP,GAAWA,CAAX;AACAZ,EAAAA,MAAM,CAACa,CAAP,GAAWA,CAAX;AACAb,EAAAA,MAAM,CAACc,CAAP,GAAWA,CAAX;AACAd,EAAAA,MAAM,CAACwB,CAAP,GAAWA,CAAX;AACA,SAAOxB,MAAP;AACD,CApBD;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BAzB,OAAO,CAACwJ,MAAR,GAAiB,UAAU7H,MAAV,EAAkBgH,KAAlB,EAAyBG,SAAzB,EAAoCrH,MAApC,EAA4C;AAC3D;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AAEAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoBiE,mBAApB,CAAwC,OAAxC,EAAiDG,KAAjD,EAAwD,CAAxD;AACAjJ,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoBkE,gBAApB,CAAqC,OAArC,EAA8CE,KAA9C,EAAqD,CAArD;AAEAjJ,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,WAApB,EAAiCuH,SAAjC;AACApJ,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAR2D,CAS3D;;AAEAA,EAAAA,MAAM,GAAGzB,OAAO,CAAC0B,KAAR,CAAcC,MAAd,EAAsBF,MAAtB,CAAT;AACAA,EAAAA,MAAM,CAACkH,KAAD,CAAN,GAAgBG,SAAS,CAACzG,CAA1B;AACAZ,EAAAA,MAAM,CAACkH,KAAK,GAAG,CAAT,CAAN,GAAoBG,SAAS,CAACxG,CAA9B;AACAb,EAAAA,MAAM,CAACkH,KAAK,GAAG,CAAT,CAAN,GAAoBG,SAAS,CAACvG,CAA9B;AACAd,EAAAA,MAAM,CAACkH,KAAK,GAAG,EAAT,CAAN,GAAqBG,SAAS,CAAC7F,CAA/B;AACA,SAAOxB,MAAP;AACD,CAjBD;;AAmBA,IAAIgI,aAAa,GAAG,IAAIjK,UAAJ,EAApB;AAEA;;;;;;;;AAOAQ,OAAO,CAACmJ,QAAR,GAAmB,UAAUxH,MAAV,EAAkBF,MAAlB,EAA0B;AAC3C;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AACAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAH2C,CAI3C;;AAEAA,EAAAA,MAAM,CAACY,CAAP,GAAW7C,UAAU,CAACkK,SAAX,CACTlK,UAAU,CAACmK,YAAX,CAAwBhI,MAAM,CAAC,CAAD,CAA9B,EAAmCA,MAAM,CAAC,CAAD,CAAzC,EAA8CA,MAAM,CAAC,CAAD,CAApD,EAAyD8H,aAAzD,CADS,CAAX;AAGAhI,EAAAA,MAAM,CAACa,CAAP,GAAW9C,UAAU,CAACkK,SAAX,CACTlK,UAAU,CAACmK,YAAX,CAAwBhI,MAAM,CAAC,CAAD,CAA9B,EAAmCA,MAAM,CAAC,CAAD,CAAzC,EAA8CA,MAAM,CAAC,CAAD,CAApD,EAAyD8H,aAAzD,CADS,CAAX;AAGAhI,EAAAA,MAAM,CAACc,CAAP,GAAW/C,UAAU,CAACkK,SAAX,CACTlK,UAAU,CAACmK,YAAX,CAAwBhI,MAAM,CAAC,CAAD,CAA9B,EAAmCA,MAAM,CAAC,CAAD,CAAzC,EAA8CA,MAAM,CAAC,EAAD,CAApD,EAA0D8H,aAA1D,CADS,CAAX;AAGA,SAAOhI,MAAP;AACD,CAhBD;;AAkBA,IAAImI,YAAY,GAAG,IAAIpK,UAAJ,EAAnB;AAEA;;;;;;;;;AAQAQ,OAAO,CAAC6J,eAAR,GAA0B,UAAUlI,MAAV,EAAkB;AAC1C3B,EAAAA,OAAO,CAACmJ,QAAR,CAAiBxH,MAAjB,EAAyBiI,YAAzB;AACA,SAAOpK,UAAU,CAACsK,gBAAX,CAA4BF,YAA5B,CAAP;AACD,CAHD;AAKA;;;;;;;;;;AAQA5J,OAAO,CAAC+J,QAAR,GAAmB,UAAUlD,IAAV,EAAgBC,KAAhB,EAAuBrF,MAAvB,EAA+B;AAChD;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,MAApB,EAA4BsF,IAA5B;AACAnH,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,OAApB,EAA6BuF,KAA7B;AACApH,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAJgD,CAKhD;;AAEA,MAAIuI,KAAK,GAAGnD,IAAI,CAAC,CAAD,CAAhB;AACA,MAAIoD,KAAK,GAAGpD,IAAI,CAAC,CAAD,CAAhB;AACA,MAAIqD,KAAK,GAAGrD,IAAI,CAAC,CAAD,CAAhB;AACA,MAAIsD,KAAK,GAAGtD,IAAI,CAAC,CAAD,CAAhB;AACA,MAAIuD,KAAK,GAAGvD,IAAI,CAAC,CAAD,CAAhB;AACA,MAAIwD,KAAK,GAAGxD,IAAI,CAAC,CAAD,CAAhB;AACA,MAAIyD,KAAK,GAAGzD,IAAI,CAAC,CAAD,CAAhB;AACA,MAAI0D,KAAK,GAAG1D,IAAI,CAAC,CAAD,CAAhB;AACA,MAAI2D,KAAK,GAAG3D,IAAI,CAAC,CAAD,CAAhB;AACA,MAAI4D,KAAK,GAAG5D,IAAI,CAAC,CAAD,CAAhB;AACA,MAAI6D,MAAM,GAAG7D,IAAI,CAAC,EAAD,CAAjB;AACA,MAAI8D,MAAM,GAAG9D,IAAI,CAAC,EAAD,CAAjB;AACA,MAAI+D,MAAM,GAAG/D,IAAI,CAAC,EAAD,CAAjB;AACA,MAAIgE,MAAM,GAAGhE,IAAI,CAAC,EAAD,CAAjB;AACA,MAAIiE,MAAM,GAAGjE,IAAI,CAAC,EAAD,CAAjB;AACA,MAAIkE,MAAM,GAAGlE,IAAI,CAAC,EAAD,CAAjB;AAEA,MAAImE,MAAM,GAAGlE,KAAK,CAAC,CAAD,CAAlB;AACA,MAAImE,MAAM,GAAGnE,KAAK,CAAC,CAAD,CAAlB;AACA,MAAIoE,MAAM,GAAGpE,KAAK,CAAC,CAAD,CAAlB;AACA,MAAIqE,MAAM,GAAGrE,KAAK,CAAC,CAAD,CAAlB;AACA,MAAIsE,MAAM,GAAGtE,KAAK,CAAC,CAAD,CAAlB;AACA,MAAIuE,MAAM,GAAGvE,KAAK,CAAC,CAAD,CAAlB;AACA,MAAIwE,MAAM,GAAGxE,KAAK,CAAC,CAAD,CAAlB;AACA,MAAIyE,MAAM,GAAGzE,KAAK,CAAC,CAAD,CAAlB;AACA,MAAI0E,MAAM,GAAG1E,KAAK,CAAC,CAAD,CAAlB;AACA,MAAI2E,MAAM,GAAG3E,KAAK,CAAC,CAAD,CAAlB;AACA,MAAI4E,OAAO,GAAG5E,KAAK,CAAC,EAAD,CAAnB;AACA,MAAI6E,OAAO,GAAG7E,KAAK,CAAC,EAAD,CAAnB;AACA,MAAI8E,OAAO,GAAG9E,KAAK,CAAC,EAAD,CAAnB;AACA,MAAI+E,OAAO,GAAG/E,KAAK,CAAC,EAAD,CAAnB;AACA,MAAIgF,OAAO,GAAGhF,KAAK,CAAC,EAAD,CAAnB;AACA,MAAIiF,OAAO,GAAGjF,KAAK,CAAC,EAAD,CAAnB;AAEA,MAAI7G,WAAW,GACb+J,KAAK,GAAGgB,MAAR,GAAiBZ,KAAK,GAAGa,MAAzB,GAAkCT,KAAK,GAAGU,MAA1C,GAAmDN,MAAM,GAAGO,MAD9D;AAEA,MAAI9K,WAAW,GACb4J,KAAK,GAAGe,MAAR,GAAiBX,KAAK,GAAGY,MAAzB,GAAkCR,KAAK,GAAGS,MAA1C,GAAmDL,MAAM,GAAGM,MAD9D;AAEA,MAAI1K,WAAW,GACbyJ,KAAK,GAAGc,MAAR,GAAiBV,KAAK,GAAGW,MAAzB,GAAkCP,MAAM,GAAGQ,MAA3C,GAAoDJ,MAAM,GAAGK,MAD/D;AAEA,MAAItK,WAAW,GACbsJ,KAAK,GAAGa,MAAR,GAAiBT,KAAK,GAAGU,MAAzB,GAAkCN,MAAM,GAAGO,MAA3C,GAAoDH,MAAM,GAAGI,MAD/D;AAGA,MAAIjL,WAAW,GACb8J,KAAK,GAAGoB,MAAR,GAAiBhB,KAAK,GAAGiB,MAAzB,GAAkCb,KAAK,GAAGc,MAA1C,GAAmDV,MAAM,GAAGW,MAD9D;AAEA,MAAIjL,WAAW,GACb2J,KAAK,GAAGmB,MAAR,GAAiBf,KAAK,GAAGgB,MAAzB,GAAkCZ,KAAK,GAAGa,MAA1C,GAAmDT,MAAM,GAAGU,MAD9D;AAEA,MAAI7K,WAAW,GACbwJ,KAAK,GAAGkB,MAAR,GAAiBd,KAAK,GAAGe,MAAzB,GAAkCX,MAAM,GAAGY,MAA3C,GAAoDR,MAAM,GAAGS,MAD/D;AAEA,MAAIzK,WAAW,GACbqJ,KAAK,GAAGiB,MAAR,GAAiBb,KAAK,GAAGc,MAAzB,GAAkCV,MAAM,GAAGW,MAA3C,GAAoDP,MAAM,GAAGQ,MAD/D;AAGA,MAAIpL,WAAW,GACb6J,KAAK,GAAGwB,MAAR,GAAiBpB,KAAK,GAAGqB,MAAzB,GAAkCjB,KAAK,GAAGkB,OAA1C,GAAoDd,MAAM,GAAGe,OAD/D;AAEA,MAAIpL,WAAW,GACb0J,KAAK,GAAGuB,MAAR,GAAiBnB,KAAK,GAAGoB,MAAzB,GAAkChB,KAAK,GAAGiB,OAA1C,GAAoDb,MAAM,GAAGc,OAD/D;AAEA,MAAIhL,WAAW,GACbuJ,KAAK,GAAGsB,MAAR,GAAiBlB,KAAK,GAAGmB,MAAzB,GAAkCf,MAAM,GAAGgB,OAA3C,GAAqDZ,MAAM,GAAGa,OADhE;AAEA,MAAI5K,WAAW,GACboJ,KAAK,GAAGqB,MAAR,GAAiBjB,KAAK,GAAGkB,MAAzB,GAAkCd,MAAM,GAAGe,OAA3C,GAAqDX,MAAM,GAAGY,OADhE;AAGA,MAAIvL,WAAW,GACb4J,KAAK,GAAG4B,OAAR,GAAkBxB,KAAK,GAAGyB,OAA1B,GAAoCrB,KAAK,GAAGsB,OAA5C,GAAsDlB,MAAM,GAAGmB,OADjE;AAEA,MAAIvL,WAAW,GACbyJ,KAAK,GAAG2B,OAAR,GAAkBvB,KAAK,GAAGwB,OAA1B,GAAoCpB,KAAK,GAAGqB,OAA5C,GAAsDjB,MAAM,GAAGkB,OADjE;AAEA,MAAInL,WAAW,GACbsJ,KAAK,GAAG0B,OAAR,GAAkBtB,KAAK,GAAGuB,OAA1B,GAAoCnB,MAAM,GAAGoB,OAA7C,GAAuDhB,MAAM,GAAGiB,OADlE;AAEA,MAAI/K,WAAW,GACbmJ,KAAK,GAAGyB,OAAR,GAAkBrB,KAAK,GAAGsB,OAA1B,GAAoClB,MAAM,GAAGmB,OAA7C,GAAuDf,MAAM,GAAGgB,OADlE;AAGAtK,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYxB,WAAZ;AACAwB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYpB,WAAZ;AACAoB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYhB,WAAZ;AACAgB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYZ,WAAZ;AACAY,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYvB,WAAZ;AACAuB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYnB,WAAZ;AACAmB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYf,WAAZ;AACAe,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYX,WAAZ;AACAW,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYtB,WAAZ;AACAsB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYlB,WAAZ;AACAkB,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAad,WAAb;AACAc,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaV,WAAb;AACAU,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAarB,WAAb;AACAqB,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAajB,WAAb;AACAiB,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAab,WAAb;AACAa,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaT,WAAb;AACA,SAAOS,MAAP;AACD,CA9FD;AAgGA;;;;;;;;;;AAQAzB,OAAO,CAACgM,GAAR,GAAc,UAAUnF,IAAV,EAAgBC,KAAhB,EAAuBrF,MAAvB,EAA+B;AAC3C;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,MAApB,EAA4BsF,IAA5B;AACAnH,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,OAApB,EAA6BuF,KAA7B;AACApH,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAJ2C,CAK3C;;AAEAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoF,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAA3B;AACArF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoF,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAA3B;AACArF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoF,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAA3B;AACArF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoF,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAA3B;AACArF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoF,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAA3B;AACArF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoF,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAA3B;AACArF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoF,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAA3B;AACArF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoF,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAA3B;AACArF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoF,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAA3B;AACArF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoF,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAA3B;AACArF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaoF,IAAI,CAAC,EAAD,CAAJ,GAAWC,KAAK,CAAC,EAAD,CAA7B;AACArF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaoF,IAAI,CAAC,EAAD,CAAJ,GAAWC,KAAK,CAAC,EAAD,CAA7B;AACArF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaoF,IAAI,CAAC,EAAD,CAAJ,GAAWC,KAAK,CAAC,EAAD,CAA7B;AACArF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaoF,IAAI,CAAC,EAAD,CAAJ,GAAWC,KAAK,CAAC,EAAD,CAA7B;AACArF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaoF,IAAI,CAAC,EAAD,CAAJ,GAAWC,KAAK,CAAC,EAAD,CAA7B;AACArF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaoF,IAAI,CAAC,EAAD,CAAJ,GAAWC,KAAK,CAAC,EAAD,CAA7B;AACA,SAAOrF,MAAP;AACD,CAxBD;AA0BA;;;;;;;;;;AAQAzB,OAAO,CAACiM,QAAR,GAAmB,UAAUpF,IAAV,EAAgBC,KAAhB,EAAuBrF,MAAvB,EAA+B;AAChD;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,MAApB,EAA4BsF,IAA5B;AACAnH,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,OAApB,EAA6BuF,KAA7B;AACApH,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAJgD,CAKhD;;AAEAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoF,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAA3B;AACArF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoF,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAA3B;AACArF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoF,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAA3B;AACArF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoF,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAA3B;AACArF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoF,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAA3B;AACArF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoF,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAA3B;AACArF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoF,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAA3B;AACArF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoF,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAA3B;AACArF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoF,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAA3B;AACArF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYoF,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAA3B;AACArF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaoF,IAAI,CAAC,EAAD,CAAJ,GAAWC,KAAK,CAAC,EAAD,CAA7B;AACArF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaoF,IAAI,CAAC,EAAD,CAAJ,GAAWC,KAAK,CAAC,EAAD,CAA7B;AACArF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaoF,IAAI,CAAC,EAAD,CAAJ,GAAWC,KAAK,CAAC,EAAD,CAA7B;AACArF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaoF,IAAI,CAAC,EAAD,CAAJ,GAAWC,KAAK,CAAC,EAAD,CAA7B;AACArF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaoF,IAAI,CAAC,EAAD,CAAJ,GAAWC,KAAK,CAAC,EAAD,CAA7B;AACArF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaoF,IAAI,CAAC,EAAD,CAAJ,GAAWC,KAAK,CAAC,EAAD,CAA7B;AACA,SAAOrF,MAAP;AACD,CAxBD;AA0BA;;;;;;;;;;;;;;;;;;;;;AAmBAzB,OAAO,CAACkM,sBAAR,GAAiC,UAAUrF,IAAV,EAAgBC,KAAhB,EAAuBrF,MAAvB,EAA+B;AAC9D;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,MAApB,EAA4BsF,IAA5B;AACAnH,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,OAApB,EAA6BuF,KAA7B;AACApH,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAJ8D,CAK9D;;AAEA,MAAIuI,KAAK,GAAGnD,IAAI,CAAC,CAAD,CAAhB;AACA,MAAIoD,KAAK,GAAGpD,IAAI,CAAC,CAAD,CAAhB;AACA,MAAIqD,KAAK,GAAGrD,IAAI,CAAC,CAAD,CAAhB;AACA,MAAIuD,KAAK,GAAGvD,IAAI,CAAC,CAAD,CAAhB;AACA,MAAIwD,KAAK,GAAGxD,IAAI,CAAC,CAAD,CAAhB;AACA,MAAIyD,KAAK,GAAGzD,IAAI,CAAC,CAAD,CAAhB;AACA,MAAI2D,KAAK,GAAG3D,IAAI,CAAC,CAAD,CAAhB;AACA,MAAI4D,KAAK,GAAG5D,IAAI,CAAC,CAAD,CAAhB;AACA,MAAI6D,MAAM,GAAG7D,IAAI,CAAC,EAAD,CAAjB;AACA,MAAI+D,MAAM,GAAG/D,IAAI,CAAC,EAAD,CAAjB;AACA,MAAIgE,MAAM,GAAGhE,IAAI,CAAC,EAAD,CAAjB;AACA,MAAIiE,MAAM,GAAGjE,IAAI,CAAC,EAAD,CAAjB;AAEA,MAAImE,MAAM,GAAGlE,KAAK,CAAC,CAAD,CAAlB;AACA,MAAImE,MAAM,GAAGnE,KAAK,CAAC,CAAD,CAAlB;AACA,MAAIoE,MAAM,GAAGpE,KAAK,CAAC,CAAD,CAAlB;AACA,MAAIsE,MAAM,GAAGtE,KAAK,CAAC,CAAD,CAAlB;AACA,MAAIuE,MAAM,GAAGvE,KAAK,CAAC,CAAD,CAAlB;AACA,MAAIwE,MAAM,GAAGxE,KAAK,CAAC,CAAD,CAAlB;AACA,MAAI0E,MAAM,GAAG1E,KAAK,CAAC,CAAD,CAAlB;AACA,MAAI2E,MAAM,GAAG3E,KAAK,CAAC,CAAD,CAAlB;AACA,MAAI4E,OAAO,GAAG5E,KAAK,CAAC,EAAD,CAAnB;AACA,MAAI8E,OAAO,GAAG9E,KAAK,CAAC,EAAD,CAAnB;AACA,MAAI+E,OAAO,GAAG/E,KAAK,CAAC,EAAD,CAAnB;AACA,MAAIgF,OAAO,GAAGhF,KAAK,CAAC,EAAD,CAAnB;AAEA,MAAI7G,WAAW,GAAG+J,KAAK,GAAGgB,MAAR,GAAiBZ,KAAK,GAAGa,MAAzB,GAAkCT,KAAK,GAAGU,MAA5D;AACA,MAAI7K,WAAW,GAAG4J,KAAK,GAAGe,MAAR,GAAiBX,KAAK,GAAGY,MAAzB,GAAkCR,KAAK,GAAGS,MAA5D;AACA,MAAIzK,WAAW,GAAGyJ,KAAK,GAAGc,MAAR,GAAiBV,KAAK,GAAGW,MAAzB,GAAkCP,MAAM,GAAGQ,MAA7D;AAEA,MAAIhL,WAAW,GAAG8J,KAAK,GAAGoB,MAAR,GAAiBhB,KAAK,GAAGiB,MAAzB,GAAkCb,KAAK,GAAGc,MAA5D;AACA,MAAIhL,WAAW,GAAG2J,KAAK,GAAGmB,MAAR,GAAiBf,KAAK,GAAGgB,MAAzB,GAAkCZ,KAAK,GAAGa,MAA5D;AACA,MAAI5K,WAAW,GAAGwJ,KAAK,GAAGkB,MAAR,GAAiBd,KAAK,GAAGe,MAAzB,GAAkCX,MAAM,GAAGY,MAA7D;AAEA,MAAInL,WAAW,GAAG6J,KAAK,GAAGwB,MAAR,GAAiBpB,KAAK,GAAGqB,MAAzB,GAAkCjB,KAAK,GAAGkB,OAA5D;AACA,MAAInL,WAAW,GAAG0J,KAAK,GAAGuB,MAAR,GAAiBnB,KAAK,GAAGoB,MAAzB,GAAkChB,KAAK,GAAGiB,OAA5D;AACA,MAAI/K,WAAW,GAAGuJ,KAAK,GAAGsB,MAAR,GAAiBlB,KAAK,GAAGmB,MAAzB,GAAkCf,MAAM,GAAGgB,OAA7D;AAEA,MAAItL,WAAW,GACb4J,KAAK,GAAG4B,OAAR,GAAkBxB,KAAK,GAAGyB,OAA1B,GAAoCrB,KAAK,GAAGsB,OAA5C,GAAsDlB,MADxD;AAEA,MAAIpK,WAAW,GACbyJ,KAAK,GAAG2B,OAAR,GAAkBvB,KAAK,GAAGwB,OAA1B,GAAoCpB,KAAK,GAAGqB,OAA5C,GAAsDjB,MADxD;AAEA,MAAIjK,WAAW,GACbsJ,KAAK,GAAG0B,OAAR,GAAkBtB,KAAK,GAAGuB,OAA1B,GAAoCnB,MAAM,GAAGoB,OAA7C,GAAuDhB,MADzD;AAGArJ,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYxB,WAAZ;AACAwB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYpB,WAAZ;AACAoB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYhB,WAAZ;AACAgB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYvB,WAAZ;AACAuB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYnB,WAAZ;AACAmB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYf,WAAZ;AACAe,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYtB,WAAZ;AACAsB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYlB,WAAZ;AACAkB,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAad,WAAb;AACAc,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAarB,WAAb;AACAqB,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAajB,WAAb;AACAiB,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAab,WAAb;AACAa,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACA,SAAOA,MAAP;AACD,CArED;AAuEA;;;;;;;;;;;;;;;;AAcAzB,OAAO,CAACmM,iBAAR,GAA4B,UAAUxK,MAAV,EAAkBO,QAAlB,EAA4BT,MAA5B,EAAoC;AAC9D;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AACAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,UAApB,EAAgCW,QAAhC;AACAxC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAJ8D,CAK9D;;AAEA,MAAIuI,KAAK,GAAGrI,MAAM,CAAC,CAAD,CAAlB;AACA,MAAIsI,KAAK,GAAGtI,MAAM,CAAC,CAAD,CAAlB;AACA,MAAIuI,KAAK,GAAGvI,MAAM,CAAC,CAAD,CAAlB;AACA,MAAIyI,KAAK,GAAGzI,MAAM,CAAC,CAAD,CAAlB;AACA,MAAI0I,KAAK,GAAG1I,MAAM,CAAC,CAAD,CAAlB;AACA,MAAI2I,KAAK,GAAG3I,MAAM,CAAC,CAAD,CAAlB;AACA,MAAI6I,KAAK,GAAG7I,MAAM,CAAC,CAAD,CAAlB;AACA,MAAI8I,KAAK,GAAG9I,MAAM,CAAC,CAAD,CAAlB;AACA,MAAI+I,MAAM,GAAG/I,MAAM,CAAC,EAAD,CAAnB;AAEA,MAAIqJ,MAAM,GAAG9I,QAAQ,CAAC,CAAD,CAArB;AACA,MAAI+I,MAAM,GAAG/I,QAAQ,CAAC,CAAD,CAArB;AACA,MAAIgJ,MAAM,GAAGhJ,QAAQ,CAAC,CAAD,CAArB;AACA,MAAIkJ,MAAM,GAAGlJ,QAAQ,CAAC,CAAD,CAArB;AACA,MAAImJ,MAAM,GAAGnJ,QAAQ,CAAC,CAAD,CAArB;AACA,MAAIoJ,MAAM,GAAGpJ,QAAQ,CAAC,CAAD,CAArB;AACA,MAAIsJ,MAAM,GAAGtJ,QAAQ,CAAC,CAAD,CAArB;AACA,MAAIuJ,MAAM,GAAGvJ,QAAQ,CAAC,CAAD,CAArB;AACA,MAAIwJ,OAAO,GAAGxJ,QAAQ,CAAC,CAAD,CAAtB;AAEA,MAAIjC,WAAW,GAAG+J,KAAK,GAAGgB,MAAR,GAAiBZ,KAAK,GAAGa,MAAzB,GAAkCT,KAAK,GAAGU,MAA5D;AACA,MAAI7K,WAAW,GAAG4J,KAAK,GAAGe,MAAR,GAAiBX,KAAK,GAAGY,MAAzB,GAAkCR,KAAK,GAAGS,MAA5D;AACA,MAAIzK,WAAW,GAAGyJ,KAAK,GAAGc,MAAR,GAAiBV,KAAK,GAAGW,MAAzB,GAAkCP,MAAM,GAAGQ,MAA7D;AAEA,MAAIhL,WAAW,GAAG8J,KAAK,GAAGoB,MAAR,GAAiBhB,KAAK,GAAGiB,MAAzB,GAAkCb,KAAK,GAAGc,MAA5D;AACA,MAAIhL,WAAW,GAAG2J,KAAK,GAAGmB,MAAR,GAAiBf,KAAK,GAAGgB,MAAzB,GAAkCZ,KAAK,GAAGa,MAA5D;AACA,MAAI5K,WAAW,GAAGwJ,KAAK,GAAGkB,MAAR,GAAiBd,KAAK,GAAGe,MAAzB,GAAkCX,MAAM,GAAGY,MAA7D;AAEA,MAAInL,WAAW,GAAG6J,KAAK,GAAGwB,MAAR,GAAiBpB,KAAK,GAAGqB,MAAzB,GAAkCjB,KAAK,GAAGkB,OAA5D;AACA,MAAInL,WAAW,GAAG0J,KAAK,GAAGuB,MAAR,GAAiBnB,KAAK,GAAGoB,MAAzB,GAAkChB,KAAK,GAAGiB,OAA5D;AACA,MAAI/K,WAAW,GAAGuJ,KAAK,GAAGsB,MAAR,GAAiBlB,KAAK,GAAGmB,MAAzB,GAAkCf,MAAM,GAAGgB,OAA7D;AAEAjK,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYxB,WAAZ;AACAwB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYpB,WAAZ;AACAoB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYhB,WAAZ;AACAgB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYvB,WAAZ;AACAuB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYnB,WAAZ;AACAmB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYf,WAAZ;AACAe,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYtB,WAAZ;AACAsB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYlB,WAAZ;AACAkB,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAad,WAAb;AACAc,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACA,SAAOF,MAAP;AACD,CAxDD;AA0DA;;;;;;;;;;;;;;;;AAcAzB,OAAO,CAACoM,qBAAR,GAAgC,UAAUzK,MAAV,EAAkBQ,WAAlB,EAA+BV,MAA/B,EAAuC;AACrE;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AACAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,aAApB,EAAmCY,WAAnC;AACAzC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAJqE,CAKrE;;AAEA,MAAIY,CAAC,GAAGF,WAAW,CAACE,CAApB;AACA,MAAIC,CAAC,GAAGH,WAAW,CAACG,CAApB;AACA,MAAIC,CAAC,GAAGJ,WAAW,CAACI,CAApB;AAEA,MAAI4E,EAAE,GAAG9E,CAAC,GAAGV,MAAM,CAAC,CAAD,CAAV,GAAgBW,CAAC,GAAGX,MAAM,CAAC,CAAD,CAA1B,GAAgCY,CAAC,GAAGZ,MAAM,CAAC,CAAD,CAA1C,GAAgDA,MAAM,CAAC,EAAD,CAA/D;AACA,MAAIyF,EAAE,GAAG/E,CAAC,GAAGV,MAAM,CAAC,CAAD,CAAV,GAAgBW,CAAC,GAAGX,MAAM,CAAC,CAAD,CAA1B,GAAgCY,CAAC,GAAGZ,MAAM,CAAC,CAAD,CAA1C,GAAgDA,MAAM,CAAC,EAAD,CAA/D;AACA,MAAI0F,EAAE,GAAGhF,CAAC,GAAGV,MAAM,CAAC,CAAD,CAAV,GAAgBW,CAAC,GAAGX,MAAM,CAAC,CAAD,CAA1B,GAAgCY,CAAC,GAAGZ,MAAM,CAAC,EAAD,CAA1C,GAAiDA,MAAM,CAAC,EAAD,CAAhE;AAEAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa0F,EAAb;AACA1F,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa2F,EAAb;AACA3F,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa4F,EAAb;AACA5F,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACA,SAAOF,MAAP;AACD,CAhCD;;AAkCA,IAAI4K,mBAAmB,GAAG,IAAI7M,UAAJ,EAA1B;AAEA;;;;;;;;;;;;;;;;;;;;;AAoBAQ,OAAO,CAACsM,sBAAR,GAAiC,UAAU3K,MAAV,EAAkBc,KAAlB,EAAyBhB,MAAzB,EAAiC;AAChE;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AACAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,OAApB,EAA6B9B,KAA7B;AACA/C,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAJgE,CAKhE;;AAEA4K,EAAAA,mBAAmB,CAAChK,CAApB,GAAwBI,KAAxB;AACA4J,EAAAA,mBAAmB,CAAC/J,CAApB,GAAwBG,KAAxB;AACA4J,EAAAA,mBAAmB,CAAC9J,CAApB,GAAwBE,KAAxB;AACA,SAAOzC,OAAO,CAACsJ,eAAR,CAAwB3H,MAAxB,EAAgC0K,mBAAhC,EAAqD5K,MAArD,CAAP;AACD,CAXD;AAaA;;;;;;;;;;;;;;;;;;;;;;AAoBAzB,OAAO,CAACsJ,eAAR,GAA0B,UAAU3H,MAAV,EAAkBc,KAAlB,EAAyBhB,MAAzB,EAAiC;AACzD;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AACAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,OAApB,EAA6BkB,KAA7B;AACA/C,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAJyD,CAKzD;;AAEA,MAAIiB,MAAM,GAAGD,KAAK,CAACJ,CAAnB;AACA,MAAIM,MAAM,GAAGF,KAAK,CAACH,CAAnB;AACA,MAAIM,MAAM,GAAGH,KAAK,CAACF,CAAnB,CATyD,CAWzD;;AACA,MAAIG,MAAM,KAAK,GAAX,IAAkBC,MAAM,KAAK,GAA7B,IAAoCC,MAAM,KAAK,GAAnD,EAAwD;AACtD,WAAO5C,OAAO,CAAC0B,KAAR,CAAcC,MAAd,EAAsBF,MAAtB,CAAP;AACD;;AAEDA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYiB,MAAM,GAAGf,MAAM,CAAC,CAAD,CAA3B;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYiB,MAAM,GAAGf,MAAM,CAAC,CAAD,CAA3B;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYiB,MAAM,GAAGf,MAAM,CAAC,CAAD,CAA3B;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYkB,MAAM,GAAGhB,MAAM,CAAC,CAAD,CAA3B;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYkB,MAAM,GAAGhB,MAAM,CAAC,CAAD,CAA3B;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYkB,MAAM,GAAGhB,MAAM,CAAC,CAAD,CAA3B;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYmB,MAAM,GAAGjB,MAAM,CAAC,CAAD,CAA3B;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYmB,MAAM,GAAGjB,MAAM,CAAC,CAAD,CAA3B;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAamB,MAAM,GAAGjB,MAAM,CAAC,EAAD,CAA5B;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACA,SAAOA,MAAP;AACD,CAjCD;AAmCA;;;;;;;;;;AAQAzB,OAAO,CAACuM,gBAAR,GAA2B,UAAU5K,MAAV,EAAkBmH,SAAlB,EAA6BrH,MAA7B,EAAqC;AAC9D;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AACAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,WAApB,EAAiCuH,SAAjC;AACApJ,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAJ8D,CAK9D;;AAEA,MAAI+K,EAAE,GAAG1D,SAAS,CAACzG,CAAnB;AACA,MAAIoK,EAAE,GAAG3D,SAAS,CAACxG,CAAnB;AACA,MAAIoK,EAAE,GAAG5D,SAAS,CAACvG,CAAnB;AACA,MAAIoK,EAAE,GAAG7D,SAAS,CAAC7F,CAAnB;AAEA,MAAIZ,CAAC,GAAGV,MAAM,CAAC,CAAD,CAAN,GAAY6K,EAAZ,GAAiB7K,MAAM,CAAC,CAAD,CAAN,GAAY8K,EAA7B,GAAkC9K,MAAM,CAAC,CAAD,CAAN,GAAY+K,EAA9C,GAAmD/K,MAAM,CAAC,EAAD,CAAN,GAAagL,EAAxE;AACA,MAAIrK,CAAC,GAAGX,MAAM,CAAC,CAAD,CAAN,GAAY6K,EAAZ,GAAiB7K,MAAM,CAAC,CAAD,CAAN,GAAY8K,EAA7B,GAAkC9K,MAAM,CAAC,CAAD,CAAN,GAAY+K,EAA9C,GAAmD/K,MAAM,CAAC,EAAD,CAAN,GAAagL,EAAxE;AACA,MAAIpK,CAAC,GAAGZ,MAAM,CAAC,CAAD,CAAN,GAAY6K,EAAZ,GAAiB7K,MAAM,CAAC,CAAD,CAAN,GAAY8K,EAA7B,GAAkC9K,MAAM,CAAC,EAAD,CAAN,GAAa+K,EAA/C,GAAoD/K,MAAM,CAAC,EAAD,CAAN,GAAagL,EAAzE;AACA,MAAI1J,CAAC,GAAGtB,MAAM,CAAC,CAAD,CAAN,GAAY6K,EAAZ,GAAiB7K,MAAM,CAAC,CAAD,CAAN,GAAY8K,EAA7B,GAAkC9K,MAAM,CAAC,EAAD,CAAN,GAAa+K,EAA/C,GAAoD/K,MAAM,CAAC,EAAD,CAAN,GAAagL,EAAzE;AAEAlL,EAAAA,MAAM,CAACY,CAAP,GAAWA,CAAX;AACAZ,EAAAA,MAAM,CAACa,CAAP,GAAWA,CAAX;AACAb,EAAAA,MAAM,CAACc,CAAP,GAAWA,CAAX;AACAd,EAAAA,MAAM,CAACwB,CAAP,GAAWA,CAAX;AACA,SAAOxB,MAAP;AACD,CAtBD;AAwBA;;;;;;;;;;;;;;;;;;AAgBAzB,OAAO,CAAC4M,uBAAR,GAAkC,UAAUjL,MAAV,EAAkBmH,SAAlB,EAA6BrH,MAA7B,EAAqC;AACrE;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AACAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,WAApB,EAAiCuH,SAAjC;AACApJ,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAJqE,CAKrE;;AAEA,MAAI+K,EAAE,GAAG1D,SAAS,CAACzG,CAAnB;AACA,MAAIoK,EAAE,GAAG3D,SAAS,CAACxG,CAAnB;AACA,MAAIoK,EAAE,GAAG5D,SAAS,CAACvG,CAAnB;AAEA,MAAIF,CAAC,GAAGV,MAAM,CAAC,CAAD,CAAN,GAAY6K,EAAZ,GAAiB7K,MAAM,CAAC,CAAD,CAAN,GAAY8K,EAA7B,GAAkC9K,MAAM,CAAC,CAAD,CAAN,GAAY+K,EAAtD;AACA,MAAIpK,CAAC,GAAGX,MAAM,CAAC,CAAD,CAAN,GAAY6K,EAAZ,GAAiB7K,MAAM,CAAC,CAAD,CAAN,GAAY8K,EAA7B,GAAkC9K,MAAM,CAAC,CAAD,CAAN,GAAY+K,EAAtD;AACA,MAAInK,CAAC,GAAGZ,MAAM,CAAC,CAAD,CAAN,GAAY6K,EAAZ,GAAiB7K,MAAM,CAAC,CAAD,CAAN,GAAY8K,EAA7B,GAAkC9K,MAAM,CAAC,EAAD,CAAN,GAAa+K,EAAvD;AAEAjL,EAAAA,MAAM,CAACY,CAAP,GAAWA,CAAX;AACAZ,EAAAA,MAAM,CAACa,CAAP,GAAWA,CAAX;AACAb,EAAAA,MAAM,CAACc,CAAP,GAAWA,CAAX;AACA,SAAOd,MAAP;AACD,CAnBD;AAqBA;;;;;;;;;;;;;;;AAaAzB,OAAO,CAAC6M,eAAR,GAA0B,UAAUlL,MAAV,EAAkBmH,SAAlB,EAA6BrH,MAA7B,EAAqC;AAC7D;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AACAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,WAApB,EAAiCuH,SAAjC;AACApJ,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAJ6D,CAK7D;;AAEA,MAAI+K,EAAE,GAAG1D,SAAS,CAACzG,CAAnB;AACA,MAAIoK,EAAE,GAAG3D,SAAS,CAACxG,CAAnB;AACA,MAAIoK,EAAE,GAAG5D,SAAS,CAACvG,CAAnB;AAEA,MAAIF,CAAC,GAAGV,MAAM,CAAC,CAAD,CAAN,GAAY6K,EAAZ,GAAiB7K,MAAM,CAAC,CAAD,CAAN,GAAY8K,EAA7B,GAAkC9K,MAAM,CAAC,CAAD,CAAN,GAAY+K,EAA9C,GAAmD/K,MAAM,CAAC,EAAD,CAAjE;AACA,MAAIW,CAAC,GAAGX,MAAM,CAAC,CAAD,CAAN,GAAY6K,EAAZ,GAAiB7K,MAAM,CAAC,CAAD,CAAN,GAAY8K,EAA7B,GAAkC9K,MAAM,CAAC,CAAD,CAAN,GAAY+K,EAA9C,GAAmD/K,MAAM,CAAC,EAAD,CAAjE;AACA,MAAIY,CAAC,GAAGZ,MAAM,CAAC,CAAD,CAAN,GAAY6K,EAAZ,GAAiB7K,MAAM,CAAC,CAAD,CAAN,GAAY8K,EAA7B,GAAkC9K,MAAM,CAAC,EAAD,CAAN,GAAa+K,EAA/C,GAAoD/K,MAAM,CAAC,EAAD,CAAlE;AAEAF,EAAAA,MAAM,CAACY,CAAP,GAAWA,CAAX;AACAZ,EAAAA,MAAM,CAACa,CAAP,GAAWA,CAAX;AACAb,EAAAA,MAAM,CAACc,CAAP,GAAWA,CAAX;AACA,SAAOd,MAAP;AACD,CAnBD;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;AAuBAzB,OAAO,CAAC8M,gBAAR,GAA2B,UAAUnL,MAAV,EAAkBoL,MAAlB,EAA0BtL,MAA1B,EAAkC;AAC3D;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AACAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,QAApB,EAA8BwI,MAA9B;AACArN,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAJ2D,CAK3D;;AAEAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAN,GAAYoL,MAAxB;AACAtL,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAN,GAAYoL,MAAxB;AACAtL,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAN,GAAYoL,MAAxB;AACAtL,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAN,GAAYoL,MAAxB;AACAtL,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAN,GAAYoL,MAAxB;AACAtL,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAN,GAAYoL,MAAxB;AACAtL,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAN,GAAYoL,MAAxB;AACAtL,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAN,GAAYoL,MAAxB;AACAtL,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAN,GAAYoL,MAAxB;AACAtL,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAN,GAAYoL,MAAxB;AACAtL,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAN,GAAaoL,MAA1B;AACAtL,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAN,GAAaoL,MAA1B;AACAtL,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAN,GAAaoL,MAA1B;AACAtL,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAN,GAAaoL,MAA1B;AACAtL,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAN,GAAaoL,MAA1B;AACAtL,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAN,GAAaoL,MAA1B;AACA,SAAOtL,MAAP;AACD,CAxBD;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;AAsBAzB,OAAO,CAACgN,MAAR,GAAiB,UAAUrL,MAAV,EAAkBF,MAAlB,EAA0B;AACzC;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AACAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAHyC,CAIzC;;AAEAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAACE,MAAM,CAAC,CAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAACE,MAAM,CAAC,CAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAACE,MAAM,CAAC,CAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAACE,MAAM,CAAC,CAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAACE,MAAM,CAAC,CAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAACE,MAAM,CAAC,CAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAACE,MAAM,CAAC,CAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAACE,MAAM,CAAC,CAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAACE,MAAM,CAAC,CAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAACE,MAAM,CAAC,CAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,CAACE,MAAM,CAAC,EAAD,CAApB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,CAACE,MAAM,CAAC,EAAD,CAApB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,CAACE,MAAM,CAAC,EAAD,CAApB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,CAACE,MAAM,CAAC,EAAD,CAApB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,CAACE,MAAM,CAAC,EAAD,CAApB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,CAACE,MAAM,CAAC,EAAD,CAApB;AACA,SAAOF,MAAP;AACD,CAvBD;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;AAsBAzB,OAAO,CAACiN,SAAR,GAAoB,UAAUtL,MAAV,EAAkBF,MAAlB,EAA0B;AAC5C;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AACAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAH4C,CAI5C;;AAEA,MAAIyL,OAAO,GAAGvL,MAAM,CAAC,CAAD,CAApB;AACA,MAAIwL,OAAO,GAAGxL,MAAM,CAAC,CAAD,CAApB;AACA,MAAIyL,OAAO,GAAGzL,MAAM,CAAC,CAAD,CAApB;AACA,MAAI0L,OAAO,GAAG1L,MAAM,CAAC,CAAD,CAApB;AACA,MAAI2L,OAAO,GAAG3L,MAAM,CAAC,CAAD,CAApB;AACA,MAAI4L,QAAQ,GAAG5L,MAAM,CAAC,EAAD,CAArB;AAEAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,EAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYyL,OAAZ;AACAzL,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,EAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY0L,OAAZ;AACA1L,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY4L,OAAZ;AACA5L,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa2L,OAAb;AACA3L,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa6L,OAAb;AACA7L,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa8L,QAAb;AACA9L,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaE,MAAM,CAAC,EAAD,CAAnB;AACA,SAAOF,MAAP;AACD,CA9BD;AAgCA;;;;;;;;;AAOAzB,OAAO,CAACwN,GAAR,GAAc,UAAU7L,MAAV,EAAkBF,MAAlB,EAA0B;AACtC;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AACAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAHsC,CAItC;;AAEAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY+E,IAAI,CAACgH,GAAL,CAAS7L,MAAM,CAAC,CAAD,CAAf,CAAZ;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY+E,IAAI,CAACgH,GAAL,CAAS7L,MAAM,CAAC,CAAD,CAAf,CAAZ;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY+E,IAAI,CAACgH,GAAL,CAAS7L,MAAM,CAAC,CAAD,CAAf,CAAZ;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY+E,IAAI,CAACgH,GAAL,CAAS7L,MAAM,CAAC,CAAD,CAAf,CAAZ;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY+E,IAAI,CAACgH,GAAL,CAAS7L,MAAM,CAAC,CAAD,CAAf,CAAZ;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY+E,IAAI,CAACgH,GAAL,CAAS7L,MAAM,CAAC,CAAD,CAAf,CAAZ;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY+E,IAAI,CAACgH,GAAL,CAAS7L,MAAM,CAAC,CAAD,CAAf,CAAZ;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY+E,IAAI,CAACgH,GAAL,CAAS7L,MAAM,CAAC,CAAD,CAAf,CAAZ;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY+E,IAAI,CAACgH,GAAL,CAAS7L,MAAM,CAAC,CAAD,CAAf,CAAZ;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY+E,IAAI,CAACgH,GAAL,CAAS7L,MAAM,CAAC,CAAD,CAAf,CAAZ;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa+E,IAAI,CAACgH,GAAL,CAAS7L,MAAM,CAAC,EAAD,CAAf,CAAb;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa+E,IAAI,CAACgH,GAAL,CAAS7L,MAAM,CAAC,EAAD,CAAf,CAAb;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa+E,IAAI,CAACgH,GAAL,CAAS7L,MAAM,CAAC,EAAD,CAAf,CAAb;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa+E,IAAI,CAACgH,GAAL,CAAS7L,MAAM,CAAC,EAAD,CAAf,CAAb;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa+E,IAAI,CAACgH,GAAL,CAAS7L,MAAM,CAAC,EAAD,CAAf,CAAb;AACAF,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa+E,IAAI,CAACgH,GAAL,CAAS7L,MAAM,CAAC,EAAD,CAAf,CAAb;AAEA,SAAOF,MAAP;AACD,CAxBD;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BAzB,OAAO,CAACyN,MAAR,GAAiB,UAAU5G,IAAV,EAAgBC,KAAhB,EAAuB;AACtC;AACA;AACA;AACA;AACA,SACED,IAAI,KAAKC,KAAT,IACClH,OAAO,CAACiH,IAAD,CAAP,IACCjH,OAAO,CAACkH,KAAD,CADR,IAEC;AACAD,EAAAA,IAAI,CAAC,EAAD,CAAJ,KAAaC,KAAK,CAAC,EAAD,CAHnB,IAICD,IAAI,CAAC,EAAD,CAAJ,KAAaC,KAAK,CAAC,EAAD,CAJnB,IAKCD,IAAI,CAAC,EAAD,CAAJ,KAAaC,KAAK,CAAC,EAAD,CALnB,IAMC;AACAD,EAAAA,IAAI,CAAC,CAAD,CAAJ,KAAYC,KAAK,CAAC,CAAD,CAPlB,IAQCD,IAAI,CAAC,CAAD,CAAJ,KAAYC,KAAK,CAAC,CAAD,CARlB,IASCD,IAAI,CAAC,CAAD,CAAJ,KAAYC,KAAK,CAAC,CAAD,CATlB,IAUCD,IAAI,CAAC,CAAD,CAAJ,KAAYC,KAAK,CAAC,CAAD,CAVlB,IAWCD,IAAI,CAAC,CAAD,CAAJ,KAAYC,KAAK,CAAC,CAAD,CAXlB,IAYCD,IAAI,CAAC,CAAD,CAAJ,KAAYC,KAAK,CAAC,CAAD,CAZlB,IAaCD,IAAI,CAAC,CAAD,CAAJ,KAAYC,KAAK,CAAC,CAAD,CAblB,IAcCD,IAAI,CAAC,CAAD,CAAJ,KAAYC,KAAK,CAAC,CAAD,CAdlB,IAeCD,IAAI,CAAC,EAAD,CAAJ,KAAaC,KAAK,CAAC,EAAD,CAfnB,IAgBC;AACAD,EAAAA,IAAI,CAAC,CAAD,CAAJ,KAAYC,KAAK,CAAC,CAAD,CAjBlB,IAkBCD,IAAI,CAAC,CAAD,CAAJ,KAAYC,KAAK,CAAC,CAAD,CAlBlB,IAmBCD,IAAI,CAAC,EAAD,CAAJ,KAAaC,KAAK,CAAC,EAAD,CAnBnB,IAoBCD,IAAI,CAAC,EAAD,CAAJ,KAAaC,KAAK,CAAC,EAAD,CAtBtB;AAwBD,CA7BD;AA+BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA9G,OAAO,CAAC0N,aAAR,GAAwB,UAAU7G,IAAV,EAAgBC,KAAhB,EAAuB6G,OAAvB,EAAgC;AACtD;AACAjO,EAAAA,KAAK,CAAC4B,MAAN,CAAaiD,MAAb,CAAoB,SAApB,EAA+BoJ,OAA/B,EAFsD,CAGtD;;AAEA,SACE9G,IAAI,KAAKC,KAAT,IACClH,OAAO,CAACiH,IAAD,CAAP,IACCjH,OAAO,CAACkH,KAAD,CADR,IAECN,IAAI,CAACgH,GAAL,CAAS3G,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAAxB,KAAgC6G,OAFjC,IAGCnH,IAAI,CAACgH,GAAL,CAAS3G,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAAxB,KAAgC6G,OAHjC,IAICnH,IAAI,CAACgH,GAAL,CAAS3G,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAAxB,KAAgC6G,OAJjC,IAKCnH,IAAI,CAACgH,GAAL,CAAS3G,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAAxB,KAAgC6G,OALjC,IAMCnH,IAAI,CAACgH,GAAL,CAAS3G,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAAxB,KAAgC6G,OANjC,IAOCnH,IAAI,CAACgH,GAAL,CAAS3G,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAAxB,KAAgC6G,OAPjC,IAQCnH,IAAI,CAACgH,GAAL,CAAS3G,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAAxB,KAAgC6G,OARjC,IASCnH,IAAI,CAACgH,GAAL,CAAS3G,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAAxB,KAAgC6G,OATjC,IAUCnH,IAAI,CAACgH,GAAL,CAAS3G,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAAxB,KAAgC6G,OAVjC,IAWCnH,IAAI,CAACgH,GAAL,CAAS3G,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAAxB,KAAgC6G,OAXjC,IAYCnH,IAAI,CAACgH,GAAL,CAAS3G,IAAI,CAAC,EAAD,CAAJ,GAAWC,KAAK,CAAC,EAAD,CAAzB,KAAkC6G,OAZnC,IAaCnH,IAAI,CAACgH,GAAL,CAAS3G,IAAI,CAAC,EAAD,CAAJ,GAAWC,KAAK,CAAC,EAAD,CAAzB,KAAkC6G,OAbnC,IAcCnH,IAAI,CAACgH,GAAL,CAAS3G,IAAI,CAAC,EAAD,CAAJ,GAAWC,KAAK,CAAC,EAAD,CAAzB,KAAkC6G,OAdnC,IAeCnH,IAAI,CAACgH,GAAL,CAAS3G,IAAI,CAAC,EAAD,CAAJ,GAAWC,KAAK,CAAC,EAAD,CAAzB,KAAkC6G,OAfnC,IAgBCnH,IAAI,CAACgH,GAAL,CAAS3G,IAAI,CAAC,EAAD,CAAJ,GAAWC,KAAK,CAAC,EAAD,CAAzB,KAAkC6G,OAhBnC,IAiBCnH,IAAI,CAACgH,GAAL,CAAS3G,IAAI,CAAC,EAAD,CAAJ,GAAWC,KAAK,CAAC,EAAD,CAAzB,KAAkC6G,OAnBtC;AAqBD,CA1BD;AA4BA;;;;;;;;;AAOA3N,OAAO,CAAC4N,cAAR,GAAyB,UAAUjM,MAAV,EAAkBF,MAAlB,EAA0B;AACjD;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AACAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAHiD,CAIjD;;AAEAA,EAAAA,MAAM,CAACY,CAAP,GAAWV,MAAM,CAAC,EAAD,CAAjB;AACAF,EAAAA,MAAM,CAACa,CAAP,GAAWX,MAAM,CAAC,EAAD,CAAjB;AACAF,EAAAA,MAAM,CAACc,CAAP,GAAWZ,MAAM,CAAC,EAAD,CAAjB;AACA,SAAOF,MAAP;AACD,CAVD;AAYA;;;;;;;;;;;;;;;;;;;;;;;;AAsBAzB,OAAO,CAAC6N,UAAR,GAAqB,UAAUlM,MAAV,EAAkBF,MAAlB,EAA0B;AAC7C;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AACAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAH6C,CAI7C;;AAEAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,CAAD,CAAlB;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYE,MAAM,CAAC,EAAD,CAAlB;AACA,SAAOF,MAAP;AACD,CAhBD;;AAkBA,IAAIqM,sBAAsB,GAAG,IAAIhO,OAAJ,EAA7B;AACA,IAAIiO,kBAAkB,GAAG,IAAIjO,OAAJ,EAAzB;AACA,IAAIkO,gBAAgB,GAAG,IAAIvO,UAAJ,EAAvB;AACA,IAAIwO,wBAAwB,GAAG,IAAIxO,UAAJ,CAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,EAA8B,GAA9B,CAA/B;AAEA;;;;;;;;;;;;;AAYAO,OAAO,CAACkO,OAAR,GAAkB,UAAUvM,MAAV,EAAkBF,MAAlB,EAA0B;AAC1C;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AACAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAH0C,CAI1C;AACA;AACA;AACA;AACA;;AACA,MAAI0M,IAAI,GAAGxM,MAAM,CAAC,CAAD,CAAjB;AACA,MAAIyM,IAAI,GAAGzM,MAAM,CAAC,CAAD,CAAjB;AACA,MAAI0M,IAAI,GAAG1M,MAAM,CAAC,CAAD,CAAjB;AACA,MAAI2M,IAAI,GAAG3M,MAAM,CAAC,EAAD,CAAjB;AACA,MAAI4M,IAAI,GAAG5M,MAAM,CAAC,CAAD,CAAjB;AACA,MAAI6M,IAAI,GAAG7M,MAAM,CAAC,CAAD,CAAjB;AACA,MAAI8M,IAAI,GAAG9M,MAAM,CAAC,CAAD,CAAjB;AACA,MAAI+M,IAAI,GAAG/M,MAAM,CAAC,EAAD,CAAjB;AACA,MAAIgN,IAAI,GAAGhN,MAAM,CAAC,CAAD,CAAjB;AACA,MAAIiN,IAAI,GAAGjN,MAAM,CAAC,CAAD,CAAjB;AACA,MAAIkN,KAAK,GAAGlN,MAAM,CAAC,EAAD,CAAlB;AACA,MAAImN,KAAK,GAAGnN,MAAM,CAAC,EAAD,CAAlB;AACA,MAAIoN,KAAK,GAAGpN,MAAM,CAAC,CAAD,CAAlB;AACA,MAAIqN,KAAK,GAAGrN,MAAM,CAAC,CAAD,CAAlB;AACA,MAAIsN,KAAK,GAAGtN,MAAM,CAAC,EAAD,CAAlB;AACA,MAAIuN,KAAK,GAAGvN,MAAM,CAAC,EAAD,CAAlB,CAxB0C,CA0B1C;;AACA,MAAIwN,IAAI,GAAGN,KAAK,GAAGK,KAAnB;AACA,MAAIE,IAAI,GAAGN,KAAK,GAAGG,KAAnB;AACA,MAAII,IAAI,GAAGT,IAAI,GAAGM,KAAlB;AACA,MAAII,IAAI,GAAGR,KAAK,GAAGE,KAAnB;AACA,MAAIO,IAAI,GAAGX,IAAI,GAAGK,KAAlB;AACA,MAAIO,IAAI,GAAGX,KAAK,GAAGG,KAAnB;AACA,MAAIS,IAAI,GAAGd,IAAI,GAAGO,KAAlB;AACA,MAAIQ,IAAI,GAAGZ,KAAK,GAAGC,KAAnB;AACA,MAAIY,IAAI,GAAGhB,IAAI,GAAGM,KAAlB;AACA,MAAIW,IAAI,GAAGf,KAAK,GAAGE,KAAnB;AACA,MAAIc,KAAK,GAAGlB,IAAI,GAAGK,KAAnB;AACA,MAAIc,KAAK,GAAGlB,IAAI,GAAGG,KAAnB,CAtC0C,CAwC1C;;AACA,MAAIgB,IAAI,GACNZ,IAAI,GAAGX,IAAP,GACAc,IAAI,GAAGb,IADP,GAEAc,IAAI,GAAGb,IAFP,IAGCU,IAAI,GAAGZ,IAAP,GAAca,IAAI,GAAGZ,IAArB,GAA4Be,IAAI,GAAGd,IAHpC,CADF;AAKA,MAAIsB,IAAI,GACNZ,IAAI,GAAGb,IAAP,GACAkB,IAAI,GAAGhB,IADP,GAEAmB,IAAI,GAAGlB,IAFP,IAGCS,IAAI,GAAGZ,IAAP,GAAcmB,IAAI,GAAGjB,IAArB,GAA4BkB,IAAI,GAAGjB,IAHpC,CADF;AAKA,MAAIuB,IAAI,GACNZ,IAAI,GAAGd,IAAP,GACAmB,IAAI,GAAGlB,IADP,GAEAqB,KAAK,GAAGnB,IAFR,IAGCY,IAAI,GAAGf,IAAP,GAAckB,IAAI,GAAGjB,IAArB,GAA4BsB,KAAK,GAAGpB,IAHrC,CADF;AAKA,MAAIwB,IAAI,GACNV,IAAI,GAAGjB,IAAP,GACAoB,IAAI,GAAGnB,IADP,GAEAsB,KAAK,GAAGrB,IAFR,IAGCc,IAAI,GAAGhB,IAAP,GAAcqB,IAAI,GAAGpB,IAArB,GAA4BqB,KAAK,GAAGpB,IAHrC,CADF;AAKA,MAAI0B,IAAI,GACNf,IAAI,GAAGhB,IAAP,GACAiB,IAAI,GAAGhB,IADP,GAEAmB,IAAI,GAAGlB,IAFP,IAGCa,IAAI,GAAGf,IAAP,GAAckB,IAAI,GAAGjB,IAArB,GAA4BkB,IAAI,GAAGjB,IAHpC,CADF;AAKA,MAAI8B,IAAI,GACNjB,IAAI,GAAGhB,IAAP,GACAuB,IAAI,GAAGrB,IADP,GAEAsB,IAAI,GAAGrB,IAFP,IAGCc,IAAI,GAAGjB,IAAP,GAAcsB,IAAI,GAAGpB,IAArB,GAA4BuB,IAAI,GAAGtB,IAHpC,CADF;AAKA,MAAI+B,IAAI,GACNf,IAAI,GAAGnB,IAAP,GACAsB,IAAI,GAAGrB,IADP,GAEA0B,KAAK,GAAGxB,IAFR,IAGCe,IAAI,GAAGlB,IAAP,GAAcuB,IAAI,GAAGtB,IAArB,GAA4ByB,KAAK,GAAGvB,IAHrC,CADF;AAKA,MAAIgC,IAAI,GACNf,IAAI,GAAGpB,IAAP,GACAyB,IAAI,GAAGxB,IADP,GAEAyB,KAAK,GAAGxB,IAFR,IAGCmB,IAAI,GAAGrB,IAAP,GAAcwB,IAAI,GAAGvB,IAArB,GAA4B0B,KAAK,GAAGzB,IAHrC,CADF,CA5E0C,CAkF1C;;AACAc,EAAAA,IAAI,GAAGd,IAAI,GAAGK,IAAd;AACAU,EAAAA,IAAI,GAAGd,IAAI,GAAGG,IAAd;AACAY,EAAAA,IAAI,GAAGjB,IAAI,GAAGM,IAAd;AACAY,EAAAA,IAAI,GAAGhB,IAAI,GAAGE,IAAd;AACAe,EAAAA,IAAI,GAAGnB,IAAI,GAAGK,IAAd;AACAe,EAAAA,IAAI,GAAGnB,IAAI,GAAGG,IAAd;AACAiB,EAAAA,IAAI,GAAGtB,IAAI,GAAGO,IAAd;AACAgB,EAAAA,IAAI,GAAGpB,IAAI,GAAGC,IAAd;AACAoB,EAAAA,IAAI,GAAGxB,IAAI,GAAGM,IAAd;AACAmB,EAAAA,IAAI,GAAGvB,IAAI,GAAGE,IAAd;AACAsB,EAAAA,KAAK,GAAG1B,IAAI,GAAGK,IAAf;AACAsB,EAAAA,KAAK,GAAG1B,IAAI,GAAGG,IAAf,CA9F0C,CAgG1C;;AACA,MAAIgC,IAAI,GACNpB,IAAI,GAAGH,KAAP,GACAM,IAAI,GAAGL,KADP,GAEAM,IAAI,GAAGL,KAFP,IAGCE,IAAI,GAAGJ,KAAP,GAAeK,IAAI,GAAGJ,KAAtB,GAA8BO,IAAI,GAAGN,KAHtC,CADF;AAKA,MAAIsB,IAAI,GACNpB,IAAI,GAAGL,KAAP,GACAU,IAAI,GAAGR,KADP,GAEAW,IAAI,GAAGV,KAFP,IAGCC,IAAI,GAAGJ,KAAP,GAAeW,IAAI,GAAGT,KAAtB,GAA8BU,IAAI,GAAGT,KAHtC,CADF;AAKA,MAAIuB,KAAK,GACPpB,IAAI,GAAGN,KAAP,GACAW,IAAI,GAAGV,KADP,GAEAa,KAAK,GAAGX,KAFR,IAGCI,IAAI,GAAGP,KAAP,GAAeU,IAAI,GAAGT,KAAtB,GAA8Bc,KAAK,GAAGZ,KAHvC,CADF;AAKA,MAAIwB,KAAK,GACPlB,IAAI,GAAGT,KAAP,GACAY,IAAI,GAAGX,KADP,GAEAc,KAAK,GAAGb,KAFR,IAGCM,IAAI,GAAGR,KAAP,GAAea,IAAI,GAAGZ,KAAtB,GAA8Ba,KAAK,GAAGZ,KAHvC,CADF;AAKA,MAAI0B,KAAK,GACPtB,IAAI,GAAGR,KAAP,GACAW,IAAI,GAAGV,KADP,GAEAM,IAAI,GAAGR,IAFP,IAGCW,IAAI,GAAGT,KAAP,GAAeK,IAAI,GAAGP,IAAtB,GAA6BU,IAAI,GAAGT,KAHrC,CADF;AAKA,MAAI+B,KAAK,GACPjB,IAAI,GAAGb,KAAP,GACAK,IAAI,GAAGR,IADP,GAEAe,IAAI,GAAGb,KAFP,IAGCY,IAAI,GAAGZ,KAAP,GAAee,IAAI,GAAGd,KAAtB,GAA8BM,IAAI,GAAGT,IAHtC,CADF;AAKA,MAAIkC,KAAK,GACPpB,IAAI,GAAGb,IAAP,GACAkB,KAAK,GAAGhB,KADR,GAEAQ,IAAI,GAAGX,IAFP,IAGCkB,KAAK,GAAGf,KAAR,GAAgBO,IAAI,GAAGV,IAAvB,GAA8Be,IAAI,GAAGd,IAHtC,CADF;AAKA,MAAIkC,KAAK,GACPjB,KAAK,GAAGhB,KAAR,GACAU,IAAI,GAAGZ,IADP,GAEAiB,IAAI,GAAGhB,IAFP,IAGCe,IAAI,GAAGf,IAAP,GAAckB,KAAK,GAAGjB,KAAtB,GAA8BW,IAAI,GAAGb,IAHtC,CADF,CApI0C,CA0I1C;;AACA,MAAIoC,GAAG,GAAG5C,IAAI,GAAG4B,IAAP,GAAc3B,IAAI,GAAG4B,IAArB,GAA4B3B,IAAI,GAAG4B,IAAnC,GAA0C3B,IAAI,GAAG4B,IAA3D;;AAEA,MAAI1J,IAAI,CAACgH,GAAL,CAASuD,GAAT,IAAgBlR,UAAU,CAACmR,SAA/B,EAA0C;AACxC;AACA;AACA,QACElR,OAAO,CAAC4N,aAAR,CACE1N,OAAO,CAAC6N,UAAR,CAAmBlM,MAAnB,EAA2BmM,sBAA3B,CADF,EAEEC,kBAFF,EAGElO,UAAU,CAACoR,QAHb,KAKAxR,UAAU,CAACgO,MAAX,CACEzN,OAAO,CAACuJ,MAAR,CAAe5H,MAAf,EAAuB,CAAvB,EAA0BqM,gBAA1B,CADF,EAEEC,wBAFF,CANF,EAUE;AACAxM,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,MAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,MAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,MAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,CAACE,MAAM,CAAC,EAAD,CAApB;AACAF,MAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,CAACE,MAAM,CAAC,EAAD,CAApB;AACAF,MAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,CAACE,MAAM,CAAC,EAAD,CAApB;AACAF,MAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACA,aAAOA,MAAP;AACD;;AAED,UAAM,IAAI1B,YAAJ,CACJ,2DADI,CAAN;AAGD,GAjLyC,CAmL1C;;;AACAgR,EAAAA,GAAG,GAAG,MAAMA,GAAZ;AAEAtP,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYsO,IAAI,GAAGgB,GAAnB;AACAtP,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYuO,IAAI,GAAGe,GAAnB;AACAtP,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYwO,IAAI,GAAGc,GAAnB;AACAtP,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYyO,IAAI,GAAGa,GAAnB;AACAtP,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY0O,IAAI,GAAGY,GAAnB;AACAtP,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY2O,IAAI,GAAGW,GAAnB;AACAtP,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY4O,IAAI,GAAGU,GAAnB;AACAtP,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY6O,IAAI,GAAGS,GAAnB;AACAtP,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY8O,IAAI,GAAGQ,GAAnB;AACAtP,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY+O,IAAI,GAAGO,GAAnB;AACAtP,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAagP,KAAK,GAAGM,GAArB;AACAtP,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaiP,KAAK,GAAGK,GAArB;AACAtP,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAakP,KAAK,GAAGI,GAArB;AACAtP,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAamP,KAAK,GAAGG,GAArB;AACAtP,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaoP,KAAK,GAAGE,GAArB;AACAtP,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaqP,KAAK,GAAGC,GAArB;AACA,SAAOtP,MAAP;AACD,CAvMD;AAyMA;;;;;;;;;;;;;;;AAaAzB,OAAO,CAACkR,qBAAR,GAAgC,UAAUvP,MAAV,EAAkBF,MAAlB,EAA0B;AACxD;AACA/B,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BI,MAA9B;AACAjC,EAAAA,KAAK,CAAC4B,MAAN,CAAaC,MAAb,CAAoB,QAApB,EAA8BE,MAA9B,EAHwD,CAIxD;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAI0P,OAAO,GAAGxP,MAAM,CAAC,CAAD,CAApB;AACA,MAAIuL,OAAO,GAAGvL,MAAM,CAAC,CAAD,CAApB;AACA,MAAIwL,OAAO,GAAGxL,MAAM,CAAC,CAAD,CAApB;AACA,MAAIyP,OAAO,GAAGzP,MAAM,CAAC,CAAD,CAApB;AACA,MAAI0P,OAAO,GAAG1P,MAAM,CAAC,CAAD,CAApB;AACA,MAAI0L,OAAO,GAAG1L,MAAM,CAAC,CAAD,CAApB;AACA,MAAI2P,OAAO,GAAG3P,MAAM,CAAC,CAAD,CAApB;AACA,MAAI4P,OAAO,GAAG5P,MAAM,CAAC,CAAD,CAApB;AACA,MAAI6P,QAAQ,GAAG7P,MAAM,CAAC,EAAD,CAArB;AAEA,MAAI6K,EAAE,GAAG7K,MAAM,CAAC,EAAD,CAAf;AACA,MAAI8K,EAAE,GAAG9K,MAAM,CAAC,EAAD,CAAf;AACA,MAAI+K,EAAE,GAAG/K,MAAM,CAAC,EAAD,CAAf;AAEA,MAAIU,CAAC,GAAG,CAAC8O,OAAD,GAAW3E,EAAX,GAAgBU,OAAO,GAAGT,EAA1B,GAA+BU,OAAO,GAAGT,EAAjD;AACA,MAAIpK,CAAC,GAAG,CAAC8O,OAAD,GAAW5E,EAAX,GAAgB6E,OAAO,GAAG5E,EAA1B,GAA+BY,OAAO,GAAGX,EAAjD;AACA,MAAInK,CAAC,GAAG,CAAC+O,OAAD,GAAW9E,EAAX,GAAgB+E,OAAO,GAAG9E,EAA1B,GAA+B+E,QAAQ,GAAG9E,EAAlD;AAEAjL,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY0P,OAAZ;AACA1P,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY2P,OAAZ;AACA3P,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY6P,OAAZ;AACA7P,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYyL,OAAZ;AACAzL,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY4P,OAAZ;AACA5P,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY8P,OAAZ;AACA9P,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;AACAA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY0L,OAAZ;AACA1L,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY4L,OAAZ;AACA5L,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa+P,QAAb;AACA/P,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACAA,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaY,CAAb;AACAZ,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaa,CAAb;AACAb,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAac,CAAb;AACAd,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAa,GAAb;AACA,SAAOA,MAAP;AACD,CA/CD;AAiDA;;;;;;;;AAMAzB,OAAO,CAACoE,QAAR,GAAmBqN,MAAM,CAACC,MAAP,CACjB,IAAI1R,OAAJ,CACE,GADF,EAEE,GAFF,EAGE,GAHF,EAIE,GAJF,EAKE,GALF,EAME,GANF,EAOE,GAPF,EAQE,GARF,EASE,GATF,EAUE,GAVF,EAWE,GAXF,EAYE,GAZF,EAaE,GAbF,EAcE,GAdF,EAeE,GAfF,EAgBE,GAhBF,CADiB,CAAnB;AAqBA;;;;;;;AAMAA,OAAO,CAACoC,IAAR,GAAeqP,MAAM,CAACC,MAAP,CACb,IAAI1R,OAAJ,CACE,GADF,EAEE,GAFF,EAGE,GAHF,EAIE,GAJF,EAKE,GALF,EAME,GANF,EAOE,GAPF,EAQE,GARF,EASE,GATF,EAUE,GAVF,EAWE,GAXF,EAYE,GAZF,EAaE,GAbF,EAcE,GAdF,EAeE,GAfF,EAgBE,GAhBF,CADa,CAAf;AAqBA;;;;;;;AAMAA,OAAO,CAAC2R,WAAR,GAAsB,CAAtB;AAEA;;;;;;;AAMA3R,OAAO,CAAC4R,WAAR,GAAsB,CAAtB;AAEA;;;;;;;AAMA5R,OAAO,CAAC6R,WAAR,GAAsB,CAAtB;AAEA;;;;;;;AAMA7R,OAAO,CAAC8R,WAAR,GAAsB,CAAtB;AAEA;;;;;;;AAMA9R,OAAO,CAAC+R,WAAR,GAAsB,CAAtB;AAEA;;;;;;;AAMA/R,OAAO,CAACgS,WAAR,GAAsB,CAAtB;AAEA;;;;;;;AAMAhS,OAAO,CAACiS,WAAR,GAAsB,CAAtB;AAEA;;;;;;;AAMAjS,OAAO,CAACkS,WAAR,GAAsB,CAAtB;AAEA;;;;;;;AAMAlS,OAAO,CAACmS,WAAR,GAAsB,CAAtB;AAEA;;;;;;;AAMAnS,OAAO,CAACoS,WAAR,GAAsB,CAAtB;AAEA;;;;;;;AAMApS,OAAO,CAACqS,WAAR,GAAsB,EAAtB;AAEA;;;;;;;AAMArS,OAAO,CAACsS,WAAR,GAAsB,EAAtB;AAEA;;;;;;;AAMAtS,OAAO,CAACuS,WAAR,GAAsB,EAAtB;AAEA;;;;;;;AAMAvS,OAAO,CAACwS,WAAR,GAAsB,EAAtB;AAEA;;;;;;;AAMAxS,OAAO,CAACyS,WAAR,GAAsB,EAAtB;AAEA;;;;;;;AAMAzS,OAAO,CAAC0S,WAAR,GAAsB,EAAtB;AAEAjB,MAAM,CAACkB,gBAAP,CAAwB3S,OAAO,CAAC4S,SAAhC,EAA2C;AACzC;;;;;;AAMAC,EAAAA,MAAM,EAAE;AACNC,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO9S,OAAO,CAACiB,YAAf;AACD;AAHK;AAPiC,CAA3C;AAcA;;;;;;;AAMAjB,OAAO,CAAC4S,SAAR,CAAkBlR,KAAlB,GAA0B,UAAUD,MAAV,EAAkB;AAC1C,SAAOzB,OAAO,CAAC0B,KAAR,CAAc,IAAd,EAAoBD,MAApB,CAAP;AACD,CAFD;AAIA;;;;;;;;;AAOAzB,OAAO,CAAC4S,SAAR,CAAkBnF,MAAlB,GAA2B,UAAU3G,KAAV,EAAiB;AAC1C,SAAO9G,OAAO,CAACyN,MAAR,CAAe,IAAf,EAAqB3G,KAArB,CAAP;AACD,CAFD;AAIA;;;;;AAGA9G,OAAO,CAAC+S,WAAR,GAAsB,UAAUpR,MAAV,EAAkBP,KAAlB,EAAyB4R,MAAzB,EAAiC;AACrD,SACErR,MAAM,CAAC,CAAD,CAAN,KAAcP,KAAK,CAAC4R,MAAD,CAAnB,IACArR,MAAM,CAAC,CAAD,CAAN,KAAcP,KAAK,CAAC4R,MAAM,GAAG,CAAV,CADnB,IAEArR,MAAM,CAAC,CAAD,CAAN,KAAcP,KAAK,CAAC4R,MAAM,GAAG,CAAV,CAFnB,IAGArR,MAAM,CAAC,CAAD,CAAN,KAAcP,KAAK,CAAC4R,MAAM,GAAG,CAAV,CAHnB,IAIArR,MAAM,CAAC,CAAD,CAAN,KAAcP,KAAK,CAAC4R,MAAM,GAAG,CAAV,CAJnB,IAKArR,MAAM,CAAC,CAAD,CAAN,KAAcP,KAAK,CAAC4R,MAAM,GAAG,CAAV,CALnB,IAMArR,MAAM,CAAC,CAAD,CAAN,KAAcP,KAAK,CAAC4R,MAAM,GAAG,CAAV,CANnB,IAOArR,MAAM,CAAC,CAAD,CAAN,KAAcP,KAAK,CAAC4R,MAAM,GAAG,CAAV,CAPnB,IAQArR,MAAM,CAAC,CAAD,CAAN,KAAcP,KAAK,CAAC4R,MAAM,GAAG,CAAV,CARnB,IASArR,MAAM,CAAC,CAAD,CAAN,KAAcP,KAAK,CAAC4R,MAAM,GAAG,CAAV,CATnB,IAUArR,MAAM,CAAC,EAAD,CAAN,KAAeP,KAAK,CAAC4R,MAAM,GAAG,EAAV,CAVpB,IAWArR,MAAM,CAAC,EAAD,CAAN,KAAeP,KAAK,CAAC4R,MAAM,GAAG,EAAV,CAXpB,IAYArR,MAAM,CAAC,EAAD,CAAN,KAAeP,KAAK,CAAC4R,MAAM,GAAG,EAAV,CAZpB,IAaArR,MAAM,CAAC,EAAD,CAAN,KAAeP,KAAK,CAAC4R,MAAM,GAAG,EAAV,CAbpB,IAcArR,MAAM,CAAC,EAAD,CAAN,KAAeP,KAAK,CAAC4R,MAAM,GAAG,EAAV,CAdpB,IAeArR,MAAM,CAAC,EAAD,CAAN,KAAeP,KAAK,CAAC4R,MAAM,GAAG,EAAV,CAhBtB;AAkBD,CAnBD;AAqBA;;;;;;;;;;;AASAhT,OAAO,CAAC4S,SAAR,CAAkBlF,aAAlB,GAAkC,UAAU5G,KAAV,EAAiB6G,OAAjB,EAA0B;AAC1D,SAAO3N,OAAO,CAAC0N,aAAR,CAAsB,IAAtB,EAA4B5G,KAA5B,EAAmC6G,OAAnC,CAAP;AACD,CAFD;AAIA;;;;;;;;AAMA3N,OAAO,CAAC4S,SAAR,CAAkBK,QAAlB,GAA6B,YAAY;AACvC,SACE,MACA,KAAK,CAAL,CADA,GAEA,IAFA,GAGA,KAAK,CAAL,CAHA,GAIA,IAJA,GAKA,KAAK,CAAL,CALA,GAMA,IANA,GAOA,KAAK,EAAL,CAPA,GAQA,KARA,GASA,GATA,GAUA,KAAK,CAAL,CAVA,GAWA,IAXA,GAYA,KAAK,CAAL,CAZA,GAaA,IAbA,GAcA,KAAK,CAAL,CAdA,GAeA,IAfA,GAgBA,KAAK,EAAL,CAhBA,GAiBA,KAjBA,GAkBA,GAlBA,GAmBA,KAAK,CAAL,CAnBA,GAoBA,IApBA,GAqBA,KAAK,CAAL,CArBA,GAsBA,IAtBA,GAuBA,KAAK,EAAL,CAvBA,GAwBA,IAxBA,GAyBA,KAAK,EAAL,CAzBA,GA0BA,KA1BA,GA2BA,GA3BA,GA4BA,KAAK,CAAL,CA5BA,GA6BA,IA7BA,GA8BA,KAAK,CAAL,CA9BA,GA+BA,IA/BA,GAgCA,KAAK,EAAL,CAhCA,GAiCA,IAjCA,GAkCA,KAAK,EAAL,CAlCA,GAmCA,GApCF;AAsCD,CAvCD;;AAwCA,eAAejT,OAAf","sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Cartesian4 from \"./Cartesian4.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport RuntimeError from \"./RuntimeError.js\";\n\n/**\n * A 4x4 matrix, indexable as a column-major order array.\n * Constructor parameters are in row-major order for code readability.\n * @alias Matrix4\n * @constructor\n *\n * @param {Number} [column0Row0=0.0] The value for column 0, row 0.\n * @param {Number} [column1Row0=0.0] The value for column 1, row 0.\n * @param {Number} [column2Row0=0.0] The value for column 2, row 0.\n * @param {Number} [column3Row0=0.0] The value for column 3, row 0.\n * @param {Number} [column0Row1=0.0] The value for column 0, row 1.\n * @param {Number} [column1Row1=0.0] The value for column 1, row 1.\n * @param {Number} [column2Row1=0.0] The value for column 2, row 1.\n * @param {Number} [column3Row1=0.0] The value for column 3, row 1.\n * @param {Number} [column0Row2=0.0] The value for column 0, row 2.\n * @param {Number} [column1Row2=0.0] The value for column 1, row 2.\n * @param {Number} [column2Row2=0.0] The value for column 2, row 2.\n * @param {Number} [column3Row2=0.0] The value for column 3, row 2.\n * @param {Number} [column0Row3=0.0] The value for column 0, row 3.\n * @param {Number} [column1Row3=0.0] The value for column 1, row 3.\n * @param {Number} [column2Row3=0.0] The value for column 2, row 3.\n * @param {Number} [column3Row3=0.0] The value for column 3, row 3.\n *\n * @see Matrix4.fromColumnMajorArray\n * @see Matrix4.fromRowMajorArray\n * @see Matrix4.fromRotationTranslation\n * @see Matrix4.fromTranslationRotationScale\n * @see Matrix4.fromTranslationQuaternionRotationScale\n * @see Matrix4.fromTranslation\n * @see Matrix4.fromScale\n * @see Matrix4.fromUniformScale\n * @see Matrix4.fromCamera\n * @see Matrix4.computePerspectiveFieldOfView\n * @see Matrix4.computeOrthographicOffCenter\n * @see Matrix4.computePerspectiveOffCenter\n * @see Matrix4.computeInfinitePerspectiveOffCenter\n * @see Matrix4.computeViewportTransformation\n * @see Matrix4.computeView\n * @see Matrix2\n * @see Matrix3\n * @see Packable\n */\nfunction Matrix4(\n  column0Row0,\n  column1Row0,\n  column2Row0,\n  column3Row0,\n  column0Row1,\n  column1Row1,\n  column2Row1,\n  column3Row1,\n  column0Row2,\n  column1Row2,\n  column2Row2,\n  column3Row2,\n  column0Row3,\n  column1Row3,\n  column2Row3,\n  column3Row3\n) {\n  this[0] = defaultValue(column0Row0, 0.0);\n  this[1] = defaultValue(column0Row1, 0.0);\n  this[2] = defaultValue(column0Row2, 0.0);\n  this[3] = defaultValue(column0Row3, 0.0);\n  this[4] = defaultValue(column1Row0, 0.0);\n  this[5] = defaultValue(column1Row1, 0.0);\n  this[6] = defaultValue(column1Row2, 0.0);\n  this[7] = defaultValue(column1Row3, 0.0);\n  this[8] = defaultValue(column2Row0, 0.0);\n  this[9] = defaultValue(column2Row1, 0.0);\n  this[10] = defaultValue(column2Row2, 0.0);\n  this[11] = defaultValue(column2Row3, 0.0);\n  this[12] = defaultValue(column3Row0, 0.0);\n  this[13] = defaultValue(column3Row1, 0.0);\n  this[14] = defaultValue(column3Row2, 0.0);\n  this[15] = defaultValue(column3Row3, 0.0);\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nMatrix4.packedLength = 16;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {Matrix4} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nMatrix4.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  array[startingIndex++] = value[0];\n  array[startingIndex++] = value[1];\n  array[startingIndex++] = value[2];\n  array[startingIndex++] = value[3];\n  array[startingIndex++] = value[4];\n  array[startingIndex++] = value[5];\n  array[startingIndex++] = value[6];\n  array[startingIndex++] = value[7];\n  array[startingIndex++] = value[8];\n  array[startingIndex++] = value[9];\n  array[startingIndex++] = value[10];\n  array[startingIndex++] = value[11];\n  array[startingIndex++] = value[12];\n  array[startingIndex++] = value[13];\n  array[startingIndex++] = value[14];\n  array[startingIndex] = value[15];\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {Matrix4} [result] The object into which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\n */\nMatrix4.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  if (!defined(result)) {\n    result = new Matrix4();\n  }\n\n  result[0] = array[startingIndex++];\n  result[1] = array[startingIndex++];\n  result[2] = array[startingIndex++];\n  result[3] = array[startingIndex++];\n  result[4] = array[startingIndex++];\n  result[5] = array[startingIndex++];\n  result[6] = array[startingIndex++];\n  result[7] = array[startingIndex++];\n  result[8] = array[startingIndex++];\n  result[9] = array[startingIndex++];\n  result[10] = array[startingIndex++];\n  result[11] = array[startingIndex++];\n  result[12] = array[startingIndex++];\n  result[13] = array[startingIndex++];\n  result[14] = array[startingIndex++];\n  result[15] = array[startingIndex];\n  return result;\n};\n\n/**\n * Duplicates a Matrix4 instance.\n *\n * @param {Matrix4} matrix The matrix to duplicate.\n * @param {Matrix4} [result] The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided. (Returns undefined if matrix is undefined)\n */\nMatrix4.clone = function (matrix, result) {\n  if (!defined(matrix)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    return new Matrix4(\n      matrix[0],\n      matrix[4],\n      matrix[8],\n      matrix[12],\n      matrix[1],\n      matrix[5],\n      matrix[9],\n      matrix[13],\n      matrix[2],\n      matrix[6],\n      matrix[10],\n      matrix[14],\n      matrix[3],\n      matrix[7],\n      matrix[11],\n      matrix[15]\n    );\n  }\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[3];\n  result[4] = matrix[4];\n  result[5] = matrix[5];\n  result[6] = matrix[6];\n  result[7] = matrix[7];\n  result[8] = matrix[8];\n  result[9] = matrix[9];\n  result[10] = matrix[10];\n  result[11] = matrix[11];\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n  return result;\n};\n\n/**\n * Creates a Matrix4 from 16 consecutive elements in an array.\n * @function\n *\n * @param {Number[]} array The array whose 16 consecutive elements correspond to the positions of the matrix.  Assumes column-major order.\n * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to first column first row position in the matrix.\n * @param {Matrix4} [result] The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\n *\n * @example\n * // Create the Matrix4:\n * // [1.0, 2.0, 3.0, 4.0]\n * // [1.0, 2.0, 3.0, 4.0]\n * // [1.0, 2.0, 3.0, 4.0]\n * // [1.0, 2.0, 3.0, 4.0]\n *\n * var v = [1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0];\n * var m = Cesium.Matrix4.fromArray(v);\n *\n * // Create same Matrix4 with using an offset into an array\n * var v2 = [0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0];\n * var m2 = Cesium.Matrix4.fromArray(v2, 2);\n */\nMatrix4.fromArray = Matrix4.unpack;\n\n/**\n * Computes a Matrix4 instance from a column-major order array.\n *\n * @param {Number[]} values The column-major order array.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\nMatrix4.fromColumnMajorArray = function (values, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"values\", values);\n  //>>includeEnd('debug');\n\n  return Matrix4.clone(values, result);\n};\n\n/**\n * Computes a Matrix4 instance from a row-major order array.\n * The resulting matrix will be in column-major order.\n *\n * @param {Number[]} values The row-major order array.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\nMatrix4.fromRowMajorArray = function (values, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"values\", values);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Matrix4(\n      values[0],\n      values[1],\n      values[2],\n      values[3],\n      values[4],\n      values[5],\n      values[6],\n      values[7],\n      values[8],\n      values[9],\n      values[10],\n      values[11],\n      values[12],\n      values[13],\n      values[14],\n      values[15]\n    );\n  }\n  result[0] = values[0];\n  result[1] = values[4];\n  result[2] = values[8];\n  result[3] = values[12];\n  result[4] = values[1];\n  result[5] = values[5];\n  result[6] = values[9];\n  result[7] = values[13];\n  result[8] = values[2];\n  result[9] = values[6];\n  result[10] = values[10];\n  result[11] = values[14];\n  result[12] = values[3];\n  result[13] = values[7];\n  result[14] = values[11];\n  result[15] = values[15];\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance from a Matrix3 representing the rotation\n * and a Cartesian3 representing the translation.\n *\n * @param {Matrix3} rotation The upper left portion of the matrix representing the rotation.\n * @param {Cartesian3} [translation=Cartesian3.ZERO] The upper right portion of the matrix representing the translation.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\nMatrix4.fromRotationTranslation = function (rotation, translation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"rotation\", rotation);\n  //>>includeEnd('debug');\n\n  translation = defaultValue(translation, Cartesian3.ZERO);\n\n  if (!defined(result)) {\n    return new Matrix4(\n      rotation[0],\n      rotation[3],\n      rotation[6],\n      translation.x,\n      rotation[1],\n      rotation[4],\n      rotation[7],\n      translation.y,\n      rotation[2],\n      rotation[5],\n      rotation[8],\n      translation.z,\n      0.0,\n      0.0,\n      0.0,\n      1.0\n    );\n  }\n\n  result[0] = rotation[0];\n  result[1] = rotation[1];\n  result[2] = rotation[2];\n  result[3] = 0.0;\n  result[4] = rotation[3];\n  result[5] = rotation[4];\n  result[6] = rotation[5];\n  result[7] = 0.0;\n  result[8] = rotation[6];\n  result[9] = rotation[7];\n  result[10] = rotation[8];\n  result[11] = 0.0;\n  result[12] = translation.x;\n  result[13] = translation.y;\n  result[14] = translation.z;\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance from a translation, rotation, and scale (TRS)\n * representation with the rotation represented as a quaternion.\n *\n * @param {Cartesian3} translation The translation transformation.\n * @param {Quaternion} rotation The rotation transformation.\n * @param {Cartesian3} scale The non-uniform scale transformation.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n *\n * @example\n * var result = Cesium.Matrix4.fromTranslationQuaternionRotationScale(\n *   new Cesium.Cartesian3(1.0, 2.0, 3.0), // translation\n *   Cesium.Quaternion.IDENTITY,           // rotation\n *   new Cesium.Cartesian3(7.0, 8.0, 9.0), // scale\n *   result);\n */\nMatrix4.fromTranslationQuaternionRotationScale = function (\n  translation,\n  rotation,\n  scale,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"translation\", translation);\n  Check.typeOf.object(\"rotation\", rotation);\n  Check.typeOf.object(\"scale\", scale);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Matrix4();\n  }\n\n  var scaleX = scale.x;\n  var scaleY = scale.y;\n  var scaleZ = scale.z;\n\n  var x2 = rotation.x * rotation.x;\n  var xy = rotation.x * rotation.y;\n  var xz = rotation.x * rotation.z;\n  var xw = rotation.x * rotation.w;\n  var y2 = rotation.y * rotation.y;\n  var yz = rotation.y * rotation.z;\n  var yw = rotation.y * rotation.w;\n  var z2 = rotation.z * rotation.z;\n  var zw = rotation.z * rotation.w;\n  var w2 = rotation.w * rotation.w;\n\n  var m00 = x2 - y2 - z2 + w2;\n  var m01 = 2.0 * (xy - zw);\n  var m02 = 2.0 * (xz + yw);\n\n  var m10 = 2.0 * (xy + zw);\n  var m11 = -x2 + y2 - z2 + w2;\n  var m12 = 2.0 * (yz - xw);\n\n  var m20 = 2.0 * (xz - yw);\n  var m21 = 2.0 * (yz + xw);\n  var m22 = -x2 - y2 + z2 + w2;\n\n  result[0] = m00 * scaleX;\n  result[1] = m10 * scaleX;\n  result[2] = m20 * scaleX;\n  result[3] = 0.0;\n  result[4] = m01 * scaleY;\n  result[5] = m11 * scaleY;\n  result[6] = m21 * scaleY;\n  result[7] = 0.0;\n  result[8] = m02 * scaleZ;\n  result[9] = m12 * scaleZ;\n  result[10] = m22 * scaleZ;\n  result[11] = 0.0;\n  result[12] = translation.x;\n  result[13] = translation.y;\n  result[14] = translation.z;\n  result[15] = 1.0;\n\n  return result;\n};\n\n/**\n * Creates a Matrix4 instance from a {@link TranslationRotationScale} instance.\n *\n * @param {TranslationRotationScale} translationRotationScale The instance.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\nMatrix4.fromTranslationRotationScale = function (\n  translationRotationScale,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"translationRotationScale\", translationRotationScale);\n  //>>includeEnd('debug');\n\n  return Matrix4.fromTranslationQuaternionRotationScale(\n    translationRotationScale.translation,\n    translationRotationScale.rotation,\n    translationRotationScale.scale,\n    result\n  );\n};\n\n/**\n * Creates a Matrix4 instance from a Cartesian3 representing the translation.\n *\n * @param {Cartesian3} translation The upper right portion of the matrix representing the translation.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n *\n * @see Matrix4.multiplyByTranslation\n */\nMatrix4.fromTranslation = function (translation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"translation\", translation);\n  //>>includeEnd('debug');\n\n  return Matrix4.fromRotationTranslation(Matrix3.IDENTITY, translation, result);\n};\n\n/**\n * Computes a Matrix4 instance representing a non-uniform scale.\n *\n * @param {Cartesian3} scale The x, y, and z scale factors.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n *\n * @example\n * // Creates\n * //   [7.0, 0.0, 0.0, 0.0]\n * //   [0.0, 8.0, 0.0, 0.0]\n * //   [0.0, 0.0, 9.0, 0.0]\n * //   [0.0, 0.0, 0.0, 1.0]\n * var m = Cesium.Matrix4.fromScale(new Cesium.Cartesian3(7.0, 8.0, 9.0));\n */\nMatrix4.fromScale = function (scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"scale\", scale);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Matrix4(\n      scale.x,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      scale.y,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      scale.z,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0\n    );\n  }\n\n  result[0] = scale.x;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = scale.y;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 0.0;\n  result[9] = 0.0;\n  result[10] = scale.z;\n  result[11] = 0.0;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = 0.0;\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance representing a uniform scale.\n *\n * @param {Number} scale The uniform scale factor.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n *\n * @example\n * // Creates\n * //   [2.0, 0.0, 0.0, 0.0]\n * //   [0.0, 2.0, 0.0, 0.0]\n * //   [0.0, 0.0, 2.0, 0.0]\n * //   [0.0, 0.0, 0.0, 1.0]\n * var m = Cesium.Matrix4.fromUniformScale(2.0);\n */\nMatrix4.fromUniformScale = function (scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"scale\", scale);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Matrix4(\n      scale,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      scale,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      scale,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0\n    );\n  }\n\n  result[0] = scale;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = scale;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 0.0;\n  result[9] = 0.0;\n  result[10] = scale;\n  result[11] = 0.0;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = 0.0;\n  result[15] = 1.0;\n  return result;\n};\n\nvar fromCameraF = new Cartesian3();\nvar fromCameraR = new Cartesian3();\nvar fromCameraU = new Cartesian3();\n\n/**\n * Computes a Matrix4 instance from a Camera.\n *\n * @param {Camera} camera The camera to use.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\nMatrix4.fromCamera = function (camera, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"camera\", camera);\n  //>>includeEnd('debug');\n\n  var position = camera.position;\n  var direction = camera.direction;\n  var up = camera.up;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"camera.position\", position);\n  Check.typeOf.object(\"camera.direction\", direction);\n  Check.typeOf.object(\"camera.up\", up);\n  //>>includeEnd('debug');\n\n  Cartesian3.normalize(direction, fromCameraF);\n  Cartesian3.normalize(\n    Cartesian3.cross(fromCameraF, up, fromCameraR),\n    fromCameraR\n  );\n  Cartesian3.normalize(\n    Cartesian3.cross(fromCameraR, fromCameraF, fromCameraU),\n    fromCameraU\n  );\n\n  var sX = fromCameraR.x;\n  var sY = fromCameraR.y;\n  var sZ = fromCameraR.z;\n  var fX = fromCameraF.x;\n  var fY = fromCameraF.y;\n  var fZ = fromCameraF.z;\n  var uX = fromCameraU.x;\n  var uY = fromCameraU.y;\n  var uZ = fromCameraU.z;\n  var positionX = position.x;\n  var positionY = position.y;\n  var positionZ = position.z;\n  var t0 = sX * -positionX + sY * -positionY + sZ * -positionZ;\n  var t1 = uX * -positionX + uY * -positionY + uZ * -positionZ;\n  var t2 = fX * positionX + fY * positionY + fZ * positionZ;\n\n  // The code below this comment is an optimized\n  // version of the commented lines.\n  // Rather that create two matrices and then multiply,\n  // we just bake in the multiplcation as part of creation.\n  // var rotation = new Matrix4(\n  //                 sX,  sY,  sZ, 0.0,\n  //                 uX,  uY,  uZ, 0.0,\n  //                -fX, -fY, -fZ, 0.0,\n  //                 0.0,  0.0,  0.0, 1.0);\n  // var translation = new Matrix4(\n  //                 1.0, 0.0, 0.0, -position.x,\n  //                 0.0, 1.0, 0.0, -position.y,\n  //                 0.0, 0.0, 1.0, -position.z,\n  //                 0.0, 0.0, 0.0, 1.0);\n  // return rotation.multiply(translation);\n  if (!defined(result)) {\n    return new Matrix4(\n      sX,\n      sY,\n      sZ,\n      t0,\n      uX,\n      uY,\n      uZ,\n      t1,\n      -fX,\n      -fY,\n      -fZ,\n      t2,\n      0.0,\n      0.0,\n      0.0,\n      1.0\n    );\n  }\n  result[0] = sX;\n  result[1] = uX;\n  result[2] = -fX;\n  result[3] = 0.0;\n  result[4] = sY;\n  result[5] = uY;\n  result[6] = -fY;\n  result[7] = 0.0;\n  result[8] = sZ;\n  result[9] = uZ;\n  result[10] = -fZ;\n  result[11] = 0.0;\n  result[12] = t0;\n  result[13] = t1;\n  result[14] = t2;\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance representing a perspective transformation matrix.\n *\n * @param {Number} fovY The field of view along the Y axis in radians.\n * @param {Number} aspectRatio The aspect ratio.\n * @param {Number} near The distance to the near plane in meters.\n * @param {Number} far The distance to the far plane in meters.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n *\n * @exception {DeveloperError} fovY must be in (0, PI].\n * @exception {DeveloperError} aspectRatio must be greater than zero.\n * @exception {DeveloperError} near must be greater than zero.\n * @exception {DeveloperError} far must be greater than zero.\n */\nMatrix4.computePerspectiveFieldOfView = function (\n  fovY,\n  aspectRatio,\n  near,\n  far,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThan(\"fovY\", fovY, 0.0);\n  Check.typeOf.number.lessThan(\"fovY\", fovY, Math.PI);\n  Check.typeOf.number.greaterThan(\"near\", near, 0.0);\n  Check.typeOf.number.greaterThan(\"far\", far, 0.0);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  var bottom = Math.tan(fovY * 0.5);\n\n  var column1Row1 = 1.0 / bottom;\n  var column0Row0 = column1Row1 / aspectRatio;\n  var column2Row2 = (far + near) / (near - far);\n  var column3Row2 = (2.0 * far * near) / (near - far);\n\n  result[0] = column0Row0;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = column1Row1;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 0.0;\n  result[9] = 0.0;\n  result[10] = column2Row2;\n  result[11] = -1.0;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = column3Row2;\n  result[15] = 0.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance representing an orthographic transformation matrix.\n *\n * @param {Number} left The number of meters to the left of the camera that will be in view.\n * @param {Number} right The number of meters to the right of the camera that will be in view.\n * @param {Number} bottom The number of meters below of the camera that will be in view.\n * @param {Number} top The number of meters above of the camera that will be in view.\n * @param {Number} near The distance to the near plane in meters.\n * @param {Number} far The distance to the far plane in meters.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.computeOrthographicOffCenter = function (\n  left,\n  right,\n  bottom,\n  top,\n  near,\n  far,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"left\", left);\n  Check.typeOf.number(\"right\", right);\n  Check.typeOf.number(\"bottom\", bottom);\n  Check.typeOf.number(\"top\", top);\n  Check.typeOf.number(\"near\", near);\n  Check.typeOf.number(\"far\", far);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  var a = 1.0 / (right - left);\n  var b = 1.0 / (top - bottom);\n  var c = 1.0 / (far - near);\n\n  var tx = -(right + left) * a;\n  var ty = -(top + bottom) * b;\n  var tz = -(far + near) * c;\n  a *= 2.0;\n  b *= 2.0;\n  c *= -2.0;\n\n  result[0] = a;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = b;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 0.0;\n  result[9] = 0.0;\n  result[10] = c;\n  result[11] = 0.0;\n  result[12] = tx;\n  result[13] = ty;\n  result[14] = tz;\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance representing an off center perspective transformation.\n *\n * @param {Number} left The number of meters to the left of the camera that will be in view.\n * @param {Number} right The number of meters to the right of the camera that will be in view.\n * @param {Number} bottom The number of meters below of the camera that will be in view.\n * @param {Number} top The number of meters above of the camera that will be in view.\n * @param {Number} near The distance to the near plane in meters.\n * @param {Number} far The distance to the far plane in meters.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.computePerspectiveOffCenter = function (\n  left,\n  right,\n  bottom,\n  top,\n  near,\n  far,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"left\", left);\n  Check.typeOf.number(\"right\", right);\n  Check.typeOf.number(\"bottom\", bottom);\n  Check.typeOf.number(\"top\", top);\n  Check.typeOf.number(\"near\", near);\n  Check.typeOf.number(\"far\", far);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  var column0Row0 = (2.0 * near) / (right - left);\n  var column1Row1 = (2.0 * near) / (top - bottom);\n  var column2Row0 = (right + left) / (right - left);\n  var column2Row1 = (top + bottom) / (top - bottom);\n  var column2Row2 = -(far + near) / (far - near);\n  var column2Row3 = -1.0;\n  var column3Row2 = (-2.0 * far * near) / (far - near);\n\n  result[0] = column0Row0;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = column1Row1;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = column2Row3;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = column3Row2;\n  result[15] = 0.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance representing an infinite off center perspective transformation.\n *\n * @param {Number} left The number of meters to the left of the camera that will be in view.\n * @param {Number} right The number of meters to the right of the camera that will be in view.\n * @param {Number} bottom The number of meters below of the camera that will be in view.\n * @param {Number} top The number of meters above of the camera that will be in view.\n * @param {Number} near The distance to the near plane in meters.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.computeInfinitePerspectiveOffCenter = function (\n  left,\n  right,\n  bottom,\n  top,\n  near,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"left\", left);\n  Check.typeOf.number(\"right\", right);\n  Check.typeOf.number(\"bottom\", bottom);\n  Check.typeOf.number(\"top\", top);\n  Check.typeOf.number(\"near\", near);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  var column0Row0 = (2.0 * near) / (right - left);\n  var column1Row1 = (2.0 * near) / (top - bottom);\n  var column2Row0 = (right + left) / (right - left);\n  var column2Row1 = (top + bottom) / (top - bottom);\n  var column2Row2 = -1.0;\n  var column2Row3 = -1.0;\n  var column3Row2 = -2.0 * near;\n\n  result[0] = column0Row0;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = column1Row1;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = column2Row3;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = column3Row2;\n  result[15] = 0.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance that transforms from normalized device coordinates to window coordinates.\n *\n * @param {Object}[viewport = { x : 0.0, y : 0.0, width : 0.0, height : 0.0 }] The viewport's corners as shown in Example 1.\n * @param {Number}[nearDepthRange=0.0] The near plane distance in window coordinates.\n * @param {Number}[farDepthRange=1.0] The far plane distance in window coordinates.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * // Create viewport transformation using an explicit viewport and depth range.\n * var m = Cesium.Matrix4.computeViewportTransformation({\n *     x : 0.0,\n *     y : 0.0,\n *     width : 1024.0,\n *     height : 768.0\n * }, 0.0, 1.0, new Cesium.Matrix4());\n */\nMatrix4.computeViewportTransformation = function (\n  viewport,\n  nearDepthRange,\n  farDepthRange,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  viewport = defaultValue(viewport, defaultValue.EMPTY_OBJECT);\n  var x = defaultValue(viewport.x, 0.0);\n  var y = defaultValue(viewport.y, 0.0);\n  var width = defaultValue(viewport.width, 0.0);\n  var height = defaultValue(viewport.height, 0.0);\n  nearDepthRange = defaultValue(nearDepthRange, 0.0);\n  farDepthRange = defaultValue(farDepthRange, 1.0);\n\n  var halfWidth = width * 0.5;\n  var halfHeight = height * 0.5;\n  var halfDepth = (farDepthRange - nearDepthRange) * 0.5;\n\n  var column0Row0 = halfWidth;\n  var column1Row1 = halfHeight;\n  var column2Row2 = halfDepth;\n  var column3Row0 = x + halfWidth;\n  var column3Row1 = y + halfHeight;\n  var column3Row2 = nearDepthRange + halfDepth;\n  var column3Row3 = 1.0;\n\n  result[0] = column0Row0;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = column1Row1;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 0.0;\n  result[9] = 0.0;\n  result[10] = column2Row2;\n  result[11] = 0.0;\n  result[12] = column3Row0;\n  result[13] = column3Row1;\n  result[14] = column3Row2;\n  result[15] = column3Row3;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance that transforms from world space to view space.\n *\n * @param {Cartesian3} position The position of the camera.\n * @param {Cartesian3} direction The forward direction.\n * @param {Cartesian3} up The up direction.\n * @param {Cartesian3} right The right direction.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.computeView = function (position, direction, up, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"position\", position);\n  Check.typeOf.object(\"direction\", direction);\n  Check.typeOf.object(\"up\", up);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = right.x;\n  result[1] = up.x;\n  result[2] = -direction.x;\n  result[3] = 0.0;\n  result[4] = right.y;\n  result[5] = up.y;\n  result[6] = -direction.y;\n  result[7] = 0.0;\n  result[8] = right.z;\n  result[9] = up.z;\n  result[10] = -direction.z;\n  result[11] = 0.0;\n  result[12] = -Cartesian3.dot(right, position);\n  result[13] = -Cartesian3.dot(up, position);\n  result[14] = Cartesian3.dot(direction, position);\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Computes an Array from the provided Matrix4 instance.\n * The array will be in column-major order.\n *\n * @param {Matrix4} matrix The matrix to use..\n * @param {Number[]} [result] The Array onto which to store the result.\n * @returns {Number[]} The modified Array parameter or a new Array instance if one was not provided.\n *\n * @example\n * //create an array from an instance of Matrix4\n * // m = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n * var a = Cesium.Matrix4.toArray(m);\n *\n * // m remains the same\n * //creates a = [10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0]\n */\nMatrix4.toArray = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return [\n      matrix[0],\n      matrix[1],\n      matrix[2],\n      matrix[3],\n      matrix[4],\n      matrix[5],\n      matrix[6],\n      matrix[7],\n      matrix[8],\n      matrix[9],\n      matrix[10],\n      matrix[11],\n      matrix[12],\n      matrix[13],\n      matrix[14],\n      matrix[15],\n    ];\n  }\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[3];\n  result[4] = matrix[4];\n  result[5] = matrix[5];\n  result[6] = matrix[6];\n  result[7] = matrix[7];\n  result[8] = matrix[8];\n  result[9] = matrix[9];\n  result[10] = matrix[10];\n  result[11] = matrix[11];\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n  return result;\n};\n\n/**\n * Computes the array index of the element at the provided row and column.\n *\n * @param {Number} row The zero-based index of the row.\n * @param {Number} column The zero-based index of the column.\n * @returns {Number} The index of the element at the provided row and column.\n *\n * @exception {DeveloperError} row must be 0, 1, 2, or 3.\n * @exception {DeveloperError} column must be 0, 1, 2, or 3.\n *\n * @example\n * var myMatrix = new Cesium.Matrix4();\n * var column1Row0Index = Cesium.Matrix4.getElementIndex(1, 0);\n * var column1Row0 = myMatrix[column1Row0Index];\n * myMatrix[column1Row0Index] = 10.0;\n */\nMatrix4.getElementIndex = function (column, row) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\"row\", row, 0);\n  Check.typeOf.number.lessThanOrEquals(\"row\", row, 3);\n\n  Check.typeOf.number.greaterThanOrEquals(\"column\", column, 0);\n  Check.typeOf.number.lessThanOrEquals(\"column\", column, 3);\n  //>>includeEnd('debug');\n\n  return column * 4 + row;\n};\n\n/**\n * Retrieves a copy of the matrix column at the provided index as a Cartesian4 instance.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Number} index The zero-based index of the column to retrieve.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n *\n * @exception {DeveloperError} index must be 0, 1, 2, or 3.\n *\n * @example\n * //returns a Cartesian4 instance with values from the specified column\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * //Example 1: Creates an instance of Cartesian\n * var a = Cesium.Matrix4.getColumn(m, 2, new Cesium.Cartesian4());\n *\n * @example\n * //Example 2: Sets values for Cartesian instance\n * var a = new Cesium.Cartesian4();\n * Cesium.Matrix4.getColumn(m, 2, a);\n *\n * // a.x = 12.0; a.y = 16.0; a.z = 20.0; a.w = 24.0;\n */\nMatrix4.getColumn = function (matrix, index, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  Check.typeOf.number.lessThanOrEquals(\"index\", index, 3);\n\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  var startIndex = index * 4;\n  var x = matrix[startIndex];\n  var y = matrix[startIndex + 1];\n  var z = matrix[startIndex + 2];\n  var w = matrix[startIndex + 3];\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  result.w = w;\n  return result;\n};\n\n/**\n * Computes a new matrix that replaces the specified column in the provided matrix with the provided Cartesian4 instance.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Number} index The zero-based index of the column to set.\n * @param {Cartesian4} cartesian The Cartesian whose values will be assigned to the specified column.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @exception {DeveloperError} index must be 0, 1, 2, or 3.\n *\n * @example\n * //creates a new Matrix4 instance with new column values from the Cartesian4 instance\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * var a = Cesium.Matrix4.setColumn(m, 2, new Cesium.Cartesian4(99.0, 98.0, 97.0, 96.0), new Cesium.Matrix4());\n *\n * // m remains the same\n * // a = [10.0, 11.0, 99.0, 13.0]\n * //     [14.0, 15.0, 98.0, 17.0]\n * //     [18.0, 19.0, 97.0, 21.0]\n * //     [22.0, 23.0, 96.0, 25.0]\n */\nMatrix4.setColumn = function (matrix, index, cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  Check.typeOf.number.lessThanOrEquals(\"index\", index, 3);\n\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result = Matrix4.clone(matrix, result);\n  var startIndex = index * 4;\n  result[startIndex] = cartesian.x;\n  result[startIndex + 1] = cartesian.y;\n  result[startIndex + 2] = cartesian.z;\n  result[startIndex + 3] = cartesian.w;\n  return result;\n};\n\n/**\n * Computes a new matrix that replaces the translation in the rightmost column of the provided\n * matrix with the provided translation.  This assumes the matrix is an affine transformation\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Cartesian3} translation The translation that replaces the translation of the provided matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.setTranslation = function (matrix, translation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"translation\", translation);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[3];\n\n  result[4] = matrix[4];\n  result[5] = matrix[5];\n  result[6] = matrix[6];\n  result[7] = matrix[7];\n\n  result[8] = matrix[8];\n  result[9] = matrix[9];\n  result[10] = matrix[10];\n  result[11] = matrix[11];\n\n  result[12] = translation.x;\n  result[13] = translation.y;\n  result[14] = translation.z;\n  result[15] = matrix[15];\n\n  return result;\n};\n\nvar scaleScratch = new Cartesian3();\n/**\n * Computes a new matrix that replaces the scale with the provided scale.  This assumes the matrix is an affine transformation\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Cartesian3} scale The scale that replaces the scale of the provided matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.setScale = function (matrix, scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"scale\", scale);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  var existingScale = Matrix4.getScale(matrix, scaleScratch);\n  var newScale = Cartesian3.divideComponents(\n    scale,\n    existingScale,\n    scaleScratch\n  );\n  return Matrix4.multiplyByScale(matrix, newScale, result);\n};\n\n/**\n * Retrieves a copy of the matrix row at the provided index as a Cartesian4 instance.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Number} index The zero-based index of the row to retrieve.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n *\n * @exception {DeveloperError} index must be 0, 1, 2, or 3.\n *\n * @example\n * //returns a Cartesian4 instance with values from the specified column\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * //Example 1: Returns an instance of Cartesian\n * var a = Cesium.Matrix4.getRow(m, 2, new Cesium.Cartesian4());\n *\n * @example\n * //Example 2: Sets values for a Cartesian instance\n * var a = new Cesium.Cartesian4();\n * Cesium.Matrix4.getRow(m, 2, a);\n *\n * // a.x = 18.0; a.y = 19.0; a.z = 20.0; a.w = 21.0;\n */\nMatrix4.getRow = function (matrix, index, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  Check.typeOf.number.lessThanOrEquals(\"index\", index, 3);\n\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  var x = matrix[index];\n  var y = matrix[index + 4];\n  var z = matrix[index + 8];\n  var w = matrix[index + 12];\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  result.w = w;\n  return result;\n};\n\n/**\n * Computes a new matrix that replaces the specified row in the provided matrix with the provided Cartesian4 instance.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Number} index The zero-based index of the row to set.\n * @param {Cartesian4} cartesian The Cartesian whose values will be assigned to the specified row.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @exception {DeveloperError} index must be 0, 1, 2, or 3.\n *\n * @example\n * //create a new Matrix4 instance with new row values from the Cartesian4 instance\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * var a = Cesium.Matrix4.setRow(m, 2, new Cesium.Cartesian4(99.0, 98.0, 97.0, 96.0), new Cesium.Matrix4());\n *\n * // m remains the same\n * // a = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [99.0, 98.0, 97.0, 96.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n */\nMatrix4.setRow = function (matrix, index, cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  Check.typeOf.number.lessThanOrEquals(\"index\", index, 3);\n\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result = Matrix4.clone(matrix, result);\n  result[index] = cartesian.x;\n  result[index + 4] = cartesian.y;\n  result[index + 8] = cartesian.z;\n  result[index + 12] = cartesian.w;\n  return result;\n};\n\nvar scratchColumn = new Cartesian3();\n\n/**\n * Extracts the non-uniform scale assuming the matrix is an affine transformation.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter\n */\nMatrix4.getScale = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = Cartesian3.magnitude(\n    Cartesian3.fromElements(matrix[0], matrix[1], matrix[2], scratchColumn)\n  );\n  result.y = Cartesian3.magnitude(\n    Cartesian3.fromElements(matrix[4], matrix[5], matrix[6], scratchColumn)\n  );\n  result.z = Cartesian3.magnitude(\n    Cartesian3.fromElements(matrix[8], matrix[9], matrix[10], scratchColumn)\n  );\n  return result;\n};\n\nvar scratchScale = new Cartesian3();\n\n/**\n * Computes the maximum scale assuming the matrix is an affine transformation.\n * The maximum scale is the maximum length of the column vectors in the upper-left\n * 3x3 matrix.\n *\n * @param {Matrix4} matrix The matrix.\n * @returns {Number} The maximum scale.\n */\nMatrix4.getMaximumScale = function (matrix) {\n  Matrix4.getScale(matrix, scratchScale);\n  return Cartesian3.maximumComponent(scratchScale);\n};\n\n/**\n * Computes the product of two matrices.\n *\n * @param {Matrix4} left The first matrix.\n * @param {Matrix4} right The second matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.multiply = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  var left0 = left[0];\n  var left1 = left[1];\n  var left2 = left[2];\n  var left3 = left[3];\n  var left4 = left[4];\n  var left5 = left[5];\n  var left6 = left[6];\n  var left7 = left[7];\n  var left8 = left[8];\n  var left9 = left[9];\n  var left10 = left[10];\n  var left11 = left[11];\n  var left12 = left[12];\n  var left13 = left[13];\n  var left14 = left[14];\n  var left15 = left[15];\n\n  var right0 = right[0];\n  var right1 = right[1];\n  var right2 = right[2];\n  var right3 = right[3];\n  var right4 = right[4];\n  var right5 = right[5];\n  var right6 = right[6];\n  var right7 = right[7];\n  var right8 = right[8];\n  var right9 = right[9];\n  var right10 = right[10];\n  var right11 = right[11];\n  var right12 = right[12];\n  var right13 = right[13];\n  var right14 = right[14];\n  var right15 = right[15];\n\n  var column0Row0 =\n    left0 * right0 + left4 * right1 + left8 * right2 + left12 * right3;\n  var column0Row1 =\n    left1 * right0 + left5 * right1 + left9 * right2 + left13 * right3;\n  var column0Row2 =\n    left2 * right0 + left6 * right1 + left10 * right2 + left14 * right3;\n  var column0Row3 =\n    left3 * right0 + left7 * right1 + left11 * right2 + left15 * right3;\n\n  var column1Row0 =\n    left0 * right4 + left4 * right5 + left8 * right6 + left12 * right7;\n  var column1Row1 =\n    left1 * right4 + left5 * right5 + left9 * right6 + left13 * right7;\n  var column1Row2 =\n    left2 * right4 + left6 * right5 + left10 * right6 + left14 * right7;\n  var column1Row3 =\n    left3 * right4 + left7 * right5 + left11 * right6 + left15 * right7;\n\n  var column2Row0 =\n    left0 * right8 + left4 * right9 + left8 * right10 + left12 * right11;\n  var column2Row1 =\n    left1 * right8 + left5 * right9 + left9 * right10 + left13 * right11;\n  var column2Row2 =\n    left2 * right8 + left6 * right9 + left10 * right10 + left14 * right11;\n  var column2Row3 =\n    left3 * right8 + left7 * right9 + left11 * right10 + left15 * right11;\n\n  var column3Row0 =\n    left0 * right12 + left4 * right13 + left8 * right14 + left12 * right15;\n  var column3Row1 =\n    left1 * right12 + left5 * right13 + left9 * right14 + left13 * right15;\n  var column3Row2 =\n    left2 * right12 + left6 * right13 + left10 * right14 + left14 * right15;\n  var column3Row3 =\n    left3 * right12 + left7 * right13 + left11 * right14 + left15 * right15;\n\n  result[0] = column0Row0;\n  result[1] = column0Row1;\n  result[2] = column0Row2;\n  result[3] = column0Row3;\n  result[4] = column1Row0;\n  result[5] = column1Row1;\n  result[6] = column1Row2;\n  result[7] = column1Row3;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = column2Row3;\n  result[12] = column3Row0;\n  result[13] = column3Row1;\n  result[14] = column3Row2;\n  result[15] = column3Row3;\n  return result;\n};\n\n/**\n * Computes the sum of two matrices.\n *\n * @param {Matrix4} left The first matrix.\n * @param {Matrix4} right The second matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.add = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = left[0] + right[0];\n  result[1] = left[1] + right[1];\n  result[2] = left[2] + right[2];\n  result[3] = left[3] + right[3];\n  result[4] = left[4] + right[4];\n  result[5] = left[5] + right[5];\n  result[6] = left[6] + right[6];\n  result[7] = left[7] + right[7];\n  result[8] = left[8] + right[8];\n  result[9] = left[9] + right[9];\n  result[10] = left[10] + right[10];\n  result[11] = left[11] + right[11];\n  result[12] = left[12] + right[12];\n  result[13] = left[13] + right[13];\n  result[14] = left[14] + right[14];\n  result[15] = left[15] + right[15];\n  return result;\n};\n\n/**\n * Computes the difference of two matrices.\n *\n * @param {Matrix4} left The first matrix.\n * @param {Matrix4} right The second matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.subtract = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = left[0] - right[0];\n  result[1] = left[1] - right[1];\n  result[2] = left[2] - right[2];\n  result[3] = left[3] - right[3];\n  result[4] = left[4] - right[4];\n  result[5] = left[5] - right[5];\n  result[6] = left[6] - right[6];\n  result[7] = left[7] - right[7];\n  result[8] = left[8] - right[8];\n  result[9] = left[9] - right[9];\n  result[10] = left[10] - right[10];\n  result[11] = left[11] - right[11];\n  result[12] = left[12] - right[12];\n  result[13] = left[13] - right[13];\n  result[14] = left[14] - right[14];\n  result[15] = left[15] - right[15];\n  return result;\n};\n\n/**\n * Computes the product of two matrices assuming the matrices are\n * affine transformation matrices, where the upper left 3x3 elements\n * are a rotation matrix, and the upper three elements in the fourth\n * column are the translation.  The bottom row is assumed to be [0, 0, 0, 1].\n * The matrix is not verified to be in the proper form.\n * This method is faster than computing the product for general 4x4\n * matrices using {@link Matrix4.multiply}.\n *\n * @param {Matrix4} left The first matrix.\n * @param {Matrix4} right The second matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * var m1 = new Cesium.Matrix4(1.0, 6.0, 7.0, 0.0, 2.0, 5.0, 8.0, 0.0, 3.0, 4.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n * var m2 = Cesium.Transforms.eastNorthUpToFixedFrame(new Cesium.Cartesian3(1.0, 1.0, 1.0));\n * var m3 = Cesium.Matrix4.multiplyTransformation(m1, m2, new Cesium.Matrix4());\n */\nMatrix4.multiplyTransformation = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  var left0 = left[0];\n  var left1 = left[1];\n  var left2 = left[2];\n  var left4 = left[4];\n  var left5 = left[5];\n  var left6 = left[6];\n  var left8 = left[8];\n  var left9 = left[9];\n  var left10 = left[10];\n  var left12 = left[12];\n  var left13 = left[13];\n  var left14 = left[14];\n\n  var right0 = right[0];\n  var right1 = right[1];\n  var right2 = right[2];\n  var right4 = right[4];\n  var right5 = right[5];\n  var right6 = right[6];\n  var right8 = right[8];\n  var right9 = right[9];\n  var right10 = right[10];\n  var right12 = right[12];\n  var right13 = right[13];\n  var right14 = right[14];\n\n  var column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;\n  var column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;\n  var column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;\n\n  var column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;\n  var column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;\n  var column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;\n\n  var column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;\n  var column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;\n  var column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;\n\n  var column3Row0 =\n    left0 * right12 + left4 * right13 + left8 * right14 + left12;\n  var column3Row1 =\n    left1 * right12 + left5 * right13 + left9 * right14 + left13;\n  var column3Row2 =\n    left2 * right12 + left6 * right13 + left10 * right14 + left14;\n\n  result[0] = column0Row0;\n  result[1] = column0Row1;\n  result[2] = column0Row2;\n  result[3] = 0.0;\n  result[4] = column1Row0;\n  result[5] = column1Row1;\n  result[6] = column1Row2;\n  result[7] = 0.0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = 0.0;\n  result[12] = column3Row0;\n  result[13] = column3Row1;\n  result[14] = column3Row2;\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Multiplies a transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\n * by a 3x3 rotation matrix.  This is an optimization\n * for <code>Matrix4.multiply(m, Matrix4.fromRotationTranslation(rotation), m);</code> with less allocations and arithmetic operations.\n *\n * @param {Matrix4} matrix The matrix on the left-hand side.\n * @param {Matrix3} rotation The 3x3 rotation matrix on the right-hand side.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromRotationTranslation(rotation), m);\n * Cesium.Matrix4.multiplyByMatrix3(m, rotation, m);\n */\nMatrix4.multiplyByMatrix3 = function (matrix, rotation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"rotation\", rotation);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  var left0 = matrix[0];\n  var left1 = matrix[1];\n  var left2 = matrix[2];\n  var left4 = matrix[4];\n  var left5 = matrix[5];\n  var left6 = matrix[6];\n  var left8 = matrix[8];\n  var left9 = matrix[9];\n  var left10 = matrix[10];\n\n  var right0 = rotation[0];\n  var right1 = rotation[1];\n  var right2 = rotation[2];\n  var right4 = rotation[3];\n  var right5 = rotation[4];\n  var right6 = rotation[5];\n  var right8 = rotation[6];\n  var right9 = rotation[7];\n  var right10 = rotation[8];\n\n  var column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;\n  var column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;\n  var column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;\n\n  var column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;\n  var column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;\n  var column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;\n\n  var column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;\n  var column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;\n  var column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;\n\n  result[0] = column0Row0;\n  result[1] = column0Row1;\n  result[2] = column0Row2;\n  result[3] = 0.0;\n  result[4] = column1Row0;\n  result[5] = column1Row1;\n  result[6] = column1Row2;\n  result[7] = 0.0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = 0.0;\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n  return result;\n};\n\n/**\n * Multiplies a transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\n * by an implicit translation matrix defined by a {@link Cartesian3}.  This is an optimization\n * for <code>Matrix4.multiply(m, Matrix4.fromTranslation(position), m);</code> with less allocations and arithmetic operations.\n *\n * @param {Matrix4} matrix The matrix on the left-hand side.\n * @param {Cartesian3} translation The translation on the right-hand side.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromTranslation(position), m);\n * Cesium.Matrix4.multiplyByTranslation(m, position, m);\n */\nMatrix4.multiplyByTranslation = function (matrix, translation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"translation\", translation);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  var x = translation.x;\n  var y = translation.y;\n  var z = translation.z;\n\n  var tx = x * matrix[0] + y * matrix[4] + z * matrix[8] + matrix[12];\n  var ty = x * matrix[1] + y * matrix[5] + z * matrix[9] + matrix[13];\n  var tz = x * matrix[2] + y * matrix[6] + z * matrix[10] + matrix[14];\n\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[3];\n  result[4] = matrix[4];\n  result[5] = matrix[5];\n  result[6] = matrix[6];\n  result[7] = matrix[7];\n  result[8] = matrix[8];\n  result[9] = matrix[9];\n  result[10] = matrix[10];\n  result[11] = matrix[11];\n  result[12] = tx;\n  result[13] = ty;\n  result[14] = tz;\n  result[15] = matrix[15];\n  return result;\n};\n\nvar uniformScaleScratch = new Cartesian3();\n\n/**\n * Multiplies an affine transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\n * by an implicit uniform scale matrix.  This is an optimization\n * for <code>Matrix4.multiply(m, Matrix4.fromUniformScale(scale), m);</code>, where\n * <code>m</code> must be an affine matrix.\n * This function performs fewer allocations and arithmetic operations.\n *\n * @param {Matrix4} matrix The affine matrix on the left-hand side.\n * @param {Number} scale The uniform scale on the right-hand side.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n *\n * @example\n * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromUniformScale(scale), m);\n * Cesium.Matrix4.multiplyByUniformScale(m, scale, m);\n *\n * @see Matrix4.fromUniformScale\n * @see Matrix4.multiplyByScale\n */\nMatrix4.multiplyByUniformScale = function (matrix, scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.number(\"scale\", scale);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  uniformScaleScratch.x = scale;\n  uniformScaleScratch.y = scale;\n  uniformScaleScratch.z = scale;\n  return Matrix4.multiplyByScale(matrix, uniformScaleScratch, result);\n};\n\n/**\n * Multiplies an affine transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\n * by an implicit non-uniform scale matrix.  This is an optimization\n * for <code>Matrix4.multiply(m, Matrix4.fromUniformScale(scale), m);</code>, where\n * <code>m</code> must be an affine matrix.\n * This function performs fewer allocations and arithmetic operations.\n *\n * @param {Matrix4} matrix The affine matrix on the left-hand side.\n * @param {Cartesian3} scale The non-uniform scale on the right-hand side.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n *\n * @example\n * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromScale(scale), m);\n * Cesium.Matrix4.multiplyByScale(m, scale, m);\n *\n * @see Matrix4.fromScale\n * @see Matrix4.multiplyByUniformScale\n */\nMatrix4.multiplyByScale = function (matrix, scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"scale\", scale);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  var scaleX = scale.x;\n  var scaleY = scale.y;\n  var scaleZ = scale.z;\n\n  // Faster than Cartesian3.equals\n  if (scaleX === 1.0 && scaleY === 1.0 && scaleZ === 1.0) {\n    return Matrix4.clone(matrix, result);\n  }\n\n  result[0] = scaleX * matrix[0];\n  result[1] = scaleX * matrix[1];\n  result[2] = scaleX * matrix[2];\n  result[3] = 0.0;\n  result[4] = scaleY * matrix[4];\n  result[5] = scaleY * matrix[5];\n  result[6] = scaleY * matrix[6];\n  result[7] = 0.0;\n  result[8] = scaleZ * matrix[8];\n  result[9] = scaleZ * matrix[9];\n  result[10] = scaleZ * matrix[10];\n  result[11] = 0.0;\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Computes the product of a matrix and a column vector.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Cartesian4} cartesian The vector.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nMatrix4.multiplyByVector = function (matrix, cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  var vX = cartesian.x;\n  var vY = cartesian.y;\n  var vZ = cartesian.z;\n  var vW = cartesian.w;\n\n  var x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ + matrix[12] * vW;\n  var y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ + matrix[13] * vW;\n  var z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ + matrix[14] * vW;\n  var w = matrix[3] * vX + matrix[7] * vY + matrix[11] * vZ + matrix[15] * vW;\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  result.w = w;\n  return result;\n};\n\n/**\n * Computes the product of a matrix and a {@link Cartesian3}.  This is equivalent to calling {@link Matrix4.multiplyByVector}\n * with a {@link Cartesian4} with a <code>w</code> component of zero.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Cartesian3} cartesian The point.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n *\n * @example\n * var p = new Cesium.Cartesian3(1.0, 2.0, 3.0);\n * var result = Cesium.Matrix4.multiplyByPointAsVector(matrix, p, new Cesium.Cartesian3());\n * // A shortcut for\n * //   Cartesian3 p = ...\n * //   Cesium.Matrix4.multiplyByVector(matrix, new Cesium.Cartesian4(p.x, p.y, p.z, 0.0), result);\n */\nMatrix4.multiplyByPointAsVector = function (matrix, cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  var vX = cartesian.x;\n  var vY = cartesian.y;\n  var vZ = cartesian.z;\n\n  var x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ;\n  var y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ;\n  var z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ;\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  return result;\n};\n\n/**\n * Computes the product of a matrix and a {@link Cartesian3}. This is equivalent to calling {@link Matrix4.multiplyByVector}\n * with a {@link Cartesian4} with a <code>w</code> component of 1, but returns a {@link Cartesian3} instead of a {@link Cartesian4}.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Cartesian3} cartesian The point.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n *\n * @example\n * var p = new Cesium.Cartesian3(1.0, 2.0, 3.0);\n * var result = Cesium.Matrix4.multiplyByPoint(matrix, p, new Cesium.Cartesian3());\n */\nMatrix4.multiplyByPoint = function (matrix, cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  var vX = cartesian.x;\n  var vY = cartesian.y;\n  var vZ = cartesian.z;\n\n  var x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ + matrix[12];\n  var y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ + matrix[13];\n  var z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ + matrix[14];\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  return result;\n};\n\n/**\n * Computes the product of a matrix and a scalar.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Number} scalar The number to multiply by.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * //create a Matrix4 instance which is a scaled version of the supplied Matrix4\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * var a = Cesium.Matrix4.multiplyByScalar(m, -2, new Cesium.Matrix4());\n *\n * // m remains the same\n * // a = [-20.0, -22.0, -24.0, -26.0]\n * //     [-28.0, -30.0, -32.0, -34.0]\n * //     [-36.0, -38.0, -40.0, -42.0]\n * //     [-44.0, -46.0, -48.0, -50.0]\n */\nMatrix4.multiplyByScalar = function (matrix, scalar, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.number(\"scalar\", scalar);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = matrix[0] * scalar;\n  result[1] = matrix[1] * scalar;\n  result[2] = matrix[2] * scalar;\n  result[3] = matrix[3] * scalar;\n  result[4] = matrix[4] * scalar;\n  result[5] = matrix[5] * scalar;\n  result[6] = matrix[6] * scalar;\n  result[7] = matrix[7] * scalar;\n  result[8] = matrix[8] * scalar;\n  result[9] = matrix[9] * scalar;\n  result[10] = matrix[10] * scalar;\n  result[11] = matrix[11] * scalar;\n  result[12] = matrix[12] * scalar;\n  result[13] = matrix[13] * scalar;\n  result[14] = matrix[14] * scalar;\n  result[15] = matrix[15] * scalar;\n  return result;\n};\n\n/**\n * Computes a negated copy of the provided matrix.\n *\n * @param {Matrix4} matrix The matrix to negate.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * //create a new Matrix4 instance which is a negation of a Matrix4\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * var a = Cesium.Matrix4.negate(m, new Cesium.Matrix4());\n *\n * // m remains the same\n * // a = [-10.0, -11.0, -12.0, -13.0]\n * //     [-14.0, -15.0, -16.0, -17.0]\n * //     [-18.0, -19.0, -20.0, -21.0]\n * //     [-22.0, -23.0, -24.0, -25.0]\n */\nMatrix4.negate = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = -matrix[0];\n  result[1] = -matrix[1];\n  result[2] = -matrix[2];\n  result[3] = -matrix[3];\n  result[4] = -matrix[4];\n  result[5] = -matrix[5];\n  result[6] = -matrix[6];\n  result[7] = -matrix[7];\n  result[8] = -matrix[8];\n  result[9] = -matrix[9];\n  result[10] = -matrix[10];\n  result[11] = -matrix[11];\n  result[12] = -matrix[12];\n  result[13] = -matrix[13];\n  result[14] = -matrix[14];\n  result[15] = -matrix[15];\n  return result;\n};\n\n/**\n * Computes the transpose of the provided matrix.\n *\n * @param {Matrix4} matrix The matrix to transpose.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * //returns transpose of a Matrix4\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * var a = Cesium.Matrix4.transpose(m, new Cesium.Matrix4());\n *\n * // m remains the same\n * // a = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n */\nMatrix4.transpose = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  var matrix1 = matrix[1];\n  var matrix2 = matrix[2];\n  var matrix3 = matrix[3];\n  var matrix6 = matrix[6];\n  var matrix7 = matrix[7];\n  var matrix11 = matrix[11];\n\n  result[0] = matrix[0];\n  result[1] = matrix[4];\n  result[2] = matrix[8];\n  result[3] = matrix[12];\n  result[4] = matrix1;\n  result[5] = matrix[5];\n  result[6] = matrix[9];\n  result[7] = matrix[13];\n  result[8] = matrix2;\n  result[9] = matrix6;\n  result[10] = matrix[10];\n  result[11] = matrix[14];\n  result[12] = matrix3;\n  result[13] = matrix7;\n  result[14] = matrix11;\n  result[15] = matrix[15];\n  return result;\n};\n\n/**\n * Computes a matrix, which contains the absolute (unsigned) values of the provided matrix's elements.\n *\n * @param {Matrix4} matrix The matrix with signed elements.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.abs = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = Math.abs(matrix[0]);\n  result[1] = Math.abs(matrix[1]);\n  result[2] = Math.abs(matrix[2]);\n  result[3] = Math.abs(matrix[3]);\n  result[4] = Math.abs(matrix[4]);\n  result[5] = Math.abs(matrix[5]);\n  result[6] = Math.abs(matrix[6]);\n  result[7] = Math.abs(matrix[7]);\n  result[8] = Math.abs(matrix[8]);\n  result[9] = Math.abs(matrix[9]);\n  result[10] = Math.abs(matrix[10]);\n  result[11] = Math.abs(matrix[11]);\n  result[12] = Math.abs(matrix[12]);\n  result[13] = Math.abs(matrix[13]);\n  result[14] = Math.abs(matrix[14]);\n  result[15] = Math.abs(matrix[15]);\n\n  return result;\n};\n\n/**\n * Compares the provided matrices componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Matrix4} [left] The first matrix.\n * @param {Matrix4} [right] The second matrix.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n *\n * @example\n * //compares two Matrix4 instances\n *\n * // a = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n *\n * // b = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n *\n * if(Cesium.Matrix4.equals(a,b)) {\n *      console.log(\"Both matrices are equal\");\n * } else {\n *      console.log(\"They are not equal\");\n * }\n *\n * //Prints \"Both matrices are equal\" on the console\n */\nMatrix4.equals = function (left, right) {\n  // Given that most matrices will be transformation matrices, the elements\n  // are tested in order such that the test is likely to fail as early\n  // as possible.  I _think_ this is just as friendly to the L1 cache\n  // as testing in index order.  It is certainty faster in practice.\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      // Translation\n      left[12] === right[12] &&\n      left[13] === right[13] &&\n      left[14] === right[14] &&\n      // Rotation/scale\n      left[0] === right[0] &&\n      left[1] === right[1] &&\n      left[2] === right[2] &&\n      left[4] === right[4] &&\n      left[5] === right[5] &&\n      left[6] === right[6] &&\n      left[8] === right[8] &&\n      left[9] === right[9] &&\n      left[10] === right[10] &&\n      // Bottom row\n      left[3] === right[3] &&\n      left[7] === right[7] &&\n      left[11] === right[11] &&\n      left[15] === right[15])\n  );\n};\n\n/**\n * Compares the provided matrices componentwise and returns\n * <code>true</code> if they are within the provided epsilon,\n * <code>false</code> otherwise.\n *\n * @param {Matrix4} [left] The first matrix.\n * @param {Matrix4} [right] The second matrix.\n * @param {Number} epsilon The epsilon to use for equality testing.\n * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\n *\n * @example\n * //compares two Matrix4 instances\n *\n * // a = [10.5, 14.5, 18.5, 22.5]\n * //     [11.5, 15.5, 19.5, 23.5]\n * //     [12.5, 16.5, 20.5, 24.5]\n * //     [13.5, 17.5, 21.5, 25.5]\n *\n * // b = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n *\n * if(Cesium.Matrix4.equalsEpsilon(a,b,0.1)){\n *      console.log(\"Difference between both the matrices is less than 0.1\");\n * } else {\n *      console.log(\"Difference between both the matrices is not less than 0.1\");\n * }\n *\n * //Prints \"Difference between both the matrices is not less than 0.1\" on the console\n */\nMatrix4.equalsEpsilon = function (left, right, epsilon) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"epsilon\", epsilon);\n  //>>includeEnd('debug');\n\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      Math.abs(left[0] - right[0]) <= epsilon &&\n      Math.abs(left[1] - right[1]) <= epsilon &&\n      Math.abs(left[2] - right[2]) <= epsilon &&\n      Math.abs(left[3] - right[3]) <= epsilon &&\n      Math.abs(left[4] - right[4]) <= epsilon &&\n      Math.abs(left[5] - right[5]) <= epsilon &&\n      Math.abs(left[6] - right[6]) <= epsilon &&\n      Math.abs(left[7] - right[7]) <= epsilon &&\n      Math.abs(left[8] - right[8]) <= epsilon &&\n      Math.abs(left[9] - right[9]) <= epsilon &&\n      Math.abs(left[10] - right[10]) <= epsilon &&\n      Math.abs(left[11] - right[11]) <= epsilon &&\n      Math.abs(left[12] - right[12]) <= epsilon &&\n      Math.abs(left[13] - right[13]) <= epsilon &&\n      Math.abs(left[14] - right[14]) <= epsilon &&\n      Math.abs(left[15] - right[15]) <= epsilon)\n  );\n};\n\n/**\n * Gets the translation portion of the provided matrix, assuming the matrix is a affine transformation matrix.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nMatrix4.getTranslation = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = matrix[12];\n  result.y = matrix[13];\n  result.z = matrix[14];\n  return result;\n};\n\n/**\n * Gets the upper left 3x3 rotation matrix of the provided matrix, assuming the matrix is an affine transformation matrix.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Matrix3} result The object onto which to store the result.\n * @returns {Matrix3} The modified result parameter.\n *\n * @example\n * // returns a Matrix3 instance from a Matrix4 instance\n *\n * // m = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n *\n * var b = new Cesium.Matrix3();\n * Cesium.Matrix4.getMatrix3(m,b);\n *\n * // b = [10.0, 14.0, 18.0]\n * //     [11.0, 15.0, 19.0]\n * //     [12.0, 16.0, 20.0]\n */\nMatrix4.getMatrix3 = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[4];\n  result[4] = matrix[5];\n  result[5] = matrix[6];\n  result[6] = matrix[8];\n  result[7] = matrix[9];\n  result[8] = matrix[10];\n  return result;\n};\n\nvar scratchInverseRotation = new Matrix3();\nvar scratchMatrix3Zero = new Matrix3();\nvar scratchBottomRow = new Cartesian4();\nvar scratchExpectedBottomRow = new Cartesian4(0.0, 0.0, 0.0, 1.0);\n\n/**\n * Computes the inverse of the provided matrix using Cramers Rule.\n * If the determinant is zero, the matrix can not be inverted, and an exception is thrown.\n * If the matrix is an affine transformation matrix, it is more efficient\n * to invert it with {@link Matrix4.inverseTransformation}.\n *\n * @param {Matrix4} matrix The matrix to invert.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @exception {RuntimeError} matrix is not invertible because its determinate is zero.\n */\nMatrix4.inverse = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n  //\n  // Ported from:\n  //   ftp://download.intel.com/design/PentiumIII/sml/24504301.pdf\n  //\n  var src0 = matrix[0];\n  var src1 = matrix[4];\n  var src2 = matrix[8];\n  var src3 = matrix[12];\n  var src4 = matrix[1];\n  var src5 = matrix[5];\n  var src6 = matrix[9];\n  var src7 = matrix[13];\n  var src8 = matrix[2];\n  var src9 = matrix[6];\n  var src10 = matrix[10];\n  var src11 = matrix[14];\n  var src12 = matrix[3];\n  var src13 = matrix[7];\n  var src14 = matrix[11];\n  var src15 = matrix[15];\n\n  // calculate pairs for first 8 elements (cofactors)\n  var tmp0 = src10 * src15;\n  var tmp1 = src11 * src14;\n  var tmp2 = src9 * src15;\n  var tmp3 = src11 * src13;\n  var tmp4 = src9 * src14;\n  var tmp5 = src10 * src13;\n  var tmp6 = src8 * src15;\n  var tmp7 = src11 * src12;\n  var tmp8 = src8 * src14;\n  var tmp9 = src10 * src12;\n  var tmp10 = src8 * src13;\n  var tmp11 = src9 * src12;\n\n  // calculate first 8 elements (cofactors)\n  var dst0 =\n    tmp0 * src5 +\n    tmp3 * src6 +\n    tmp4 * src7 -\n    (tmp1 * src5 + tmp2 * src6 + tmp5 * src7);\n  var dst1 =\n    tmp1 * src4 +\n    tmp6 * src6 +\n    tmp9 * src7 -\n    (tmp0 * src4 + tmp7 * src6 + tmp8 * src7);\n  var dst2 =\n    tmp2 * src4 +\n    tmp7 * src5 +\n    tmp10 * src7 -\n    (tmp3 * src4 + tmp6 * src5 + tmp11 * src7);\n  var dst3 =\n    tmp5 * src4 +\n    tmp8 * src5 +\n    tmp11 * src6 -\n    (tmp4 * src4 + tmp9 * src5 + tmp10 * src6);\n  var dst4 =\n    tmp1 * src1 +\n    tmp2 * src2 +\n    tmp5 * src3 -\n    (tmp0 * src1 + tmp3 * src2 + tmp4 * src3);\n  var dst5 =\n    tmp0 * src0 +\n    tmp7 * src2 +\n    tmp8 * src3 -\n    (tmp1 * src0 + tmp6 * src2 + tmp9 * src3);\n  var dst6 =\n    tmp3 * src0 +\n    tmp6 * src1 +\n    tmp11 * src3 -\n    (tmp2 * src0 + tmp7 * src1 + tmp10 * src3);\n  var dst7 =\n    tmp4 * src0 +\n    tmp9 * src1 +\n    tmp10 * src2 -\n    (tmp5 * src0 + tmp8 * src1 + tmp11 * src2);\n\n  // calculate pairs for second 8 elements (cofactors)\n  tmp0 = src2 * src7;\n  tmp1 = src3 * src6;\n  tmp2 = src1 * src7;\n  tmp3 = src3 * src5;\n  tmp4 = src1 * src6;\n  tmp5 = src2 * src5;\n  tmp6 = src0 * src7;\n  tmp7 = src3 * src4;\n  tmp8 = src0 * src6;\n  tmp9 = src2 * src4;\n  tmp10 = src0 * src5;\n  tmp11 = src1 * src4;\n\n  // calculate second 8 elements (cofactors)\n  var dst8 =\n    tmp0 * src13 +\n    tmp3 * src14 +\n    tmp4 * src15 -\n    (tmp1 * src13 + tmp2 * src14 + tmp5 * src15);\n  var dst9 =\n    tmp1 * src12 +\n    tmp6 * src14 +\n    tmp9 * src15 -\n    (tmp0 * src12 + tmp7 * src14 + tmp8 * src15);\n  var dst10 =\n    tmp2 * src12 +\n    tmp7 * src13 +\n    tmp10 * src15 -\n    (tmp3 * src12 + tmp6 * src13 + tmp11 * src15);\n  var dst11 =\n    tmp5 * src12 +\n    tmp8 * src13 +\n    tmp11 * src14 -\n    (tmp4 * src12 + tmp9 * src13 + tmp10 * src14);\n  var dst12 =\n    tmp2 * src10 +\n    tmp5 * src11 +\n    tmp1 * src9 -\n    (tmp4 * src11 + tmp0 * src9 + tmp3 * src10);\n  var dst13 =\n    tmp8 * src11 +\n    tmp0 * src8 +\n    tmp7 * src10 -\n    (tmp6 * src10 + tmp9 * src11 + tmp1 * src8);\n  var dst14 =\n    tmp6 * src9 +\n    tmp11 * src11 +\n    tmp3 * src8 -\n    (tmp10 * src11 + tmp2 * src8 + tmp7 * src9);\n  var dst15 =\n    tmp10 * src10 +\n    tmp4 * src8 +\n    tmp9 * src9 -\n    (tmp8 * src9 + tmp11 * src10 + tmp5 * src8);\n\n  // calculate determinant\n  var det = src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;\n\n  if (Math.abs(det) < CesiumMath.EPSILON21) {\n    // Special case for a zero scale matrix that can occur, for example,\n    // when a model's node has a [0, 0, 0] scale.\n    if (\n      Matrix3.equalsEpsilon(\n        Matrix4.getMatrix3(matrix, scratchInverseRotation),\n        scratchMatrix3Zero,\n        CesiumMath.EPSILON7\n      ) &&\n      Cartesian4.equals(\n        Matrix4.getRow(matrix, 3, scratchBottomRow),\n        scratchExpectedBottomRow\n      )\n    ) {\n      result[0] = 0.0;\n      result[1] = 0.0;\n      result[2] = 0.0;\n      result[3] = 0.0;\n      result[4] = 0.0;\n      result[5] = 0.0;\n      result[6] = 0.0;\n      result[7] = 0.0;\n      result[8] = 0.0;\n      result[9] = 0.0;\n      result[10] = 0.0;\n      result[11] = 0.0;\n      result[12] = -matrix[12];\n      result[13] = -matrix[13];\n      result[14] = -matrix[14];\n      result[15] = 1.0;\n      return result;\n    }\n\n    throw new RuntimeError(\n      \"matrix is not invertible because its determinate is zero.\"\n    );\n  }\n\n  // calculate matrix inverse\n  det = 1.0 / det;\n\n  result[0] = dst0 * det;\n  result[1] = dst1 * det;\n  result[2] = dst2 * det;\n  result[3] = dst3 * det;\n  result[4] = dst4 * det;\n  result[5] = dst5 * det;\n  result[6] = dst6 * det;\n  result[7] = dst7 * det;\n  result[8] = dst8 * det;\n  result[9] = dst9 * det;\n  result[10] = dst10 * det;\n  result[11] = dst11 * det;\n  result[12] = dst12 * det;\n  result[13] = dst13 * det;\n  result[14] = dst14 * det;\n  result[15] = dst15 * det;\n  return result;\n};\n\n/**\n * Computes the inverse of the provided matrix assuming it is\n * an affine transformation matrix, where the upper left 3x3 elements\n * are a rotation matrix, and the upper three elements in the fourth\n * column are the translation.  The bottom row is assumed to be [0, 0, 0, 1].\n * The matrix is not verified to be in the proper form.\n * This method is faster than computing the inverse for a general 4x4\n * matrix using {@link Matrix4.inverse}.\n *\n * @param {Matrix4} matrix The matrix to invert.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.inverseTransformation = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  //This function is an optimized version of the below 4 lines.\n  //var rT = Matrix3.transpose(Matrix4.getMatrix3(matrix));\n  //var rTN = Matrix3.negate(rT);\n  //var rTT = Matrix3.multiplyByVector(rTN, Matrix4.getTranslation(matrix));\n  //return Matrix4.fromRotationTranslation(rT, rTT, result);\n\n  var matrix0 = matrix[0];\n  var matrix1 = matrix[1];\n  var matrix2 = matrix[2];\n  var matrix4 = matrix[4];\n  var matrix5 = matrix[5];\n  var matrix6 = matrix[6];\n  var matrix8 = matrix[8];\n  var matrix9 = matrix[9];\n  var matrix10 = matrix[10];\n\n  var vX = matrix[12];\n  var vY = matrix[13];\n  var vZ = matrix[14];\n\n  var x = -matrix0 * vX - matrix1 * vY - matrix2 * vZ;\n  var y = -matrix4 * vX - matrix5 * vY - matrix6 * vZ;\n  var z = -matrix8 * vX - matrix9 * vY - matrix10 * vZ;\n\n  result[0] = matrix0;\n  result[1] = matrix4;\n  result[2] = matrix8;\n  result[3] = 0.0;\n  result[4] = matrix1;\n  result[5] = matrix5;\n  result[6] = matrix9;\n  result[7] = 0.0;\n  result[8] = matrix2;\n  result[9] = matrix6;\n  result[10] = matrix10;\n  result[11] = 0.0;\n  result[12] = x;\n  result[13] = y;\n  result[14] = z;\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * An immutable Matrix4 instance initialized to the identity matrix.\n *\n * @type {Matrix4}\n * @constant\n */\nMatrix4.IDENTITY = Object.freeze(\n  new Matrix4(\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0\n  )\n);\n\n/**\n * An immutable Matrix4 instance initialized to the zero matrix.\n *\n * @type {Matrix4}\n * @constant\n */\nMatrix4.ZERO = Object.freeze(\n  new Matrix4(\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0\n  )\n);\n\n/**\n * The index into Matrix4 for column 0, row 0.\n *\n * @type {Number}\n * @constant\n */\nMatrix4.COLUMN0ROW0 = 0;\n\n/**\n * The index into Matrix4 for column 0, row 1.\n *\n * @type {Number}\n * @constant\n */\nMatrix4.COLUMN0ROW1 = 1;\n\n/**\n * The index into Matrix4 for column 0, row 2.\n *\n * @type {Number}\n * @constant\n */\nMatrix4.COLUMN0ROW2 = 2;\n\n/**\n * The index into Matrix4 for column 0, row 3.\n *\n * @type {Number}\n * @constant\n */\nMatrix4.COLUMN0ROW3 = 3;\n\n/**\n * The index into Matrix4 for column 1, row 0.\n *\n * @type {Number}\n * @constant\n */\nMatrix4.COLUMN1ROW0 = 4;\n\n/**\n * The index into Matrix4 for column 1, row 1.\n *\n * @type {Number}\n * @constant\n */\nMatrix4.COLUMN1ROW1 = 5;\n\n/**\n * The index into Matrix4 for column 1, row 2.\n *\n * @type {Number}\n * @constant\n */\nMatrix4.COLUMN1ROW2 = 6;\n\n/**\n * The index into Matrix4 for column 1, row 3.\n *\n * @type {Number}\n * @constant\n */\nMatrix4.COLUMN1ROW3 = 7;\n\n/**\n * The index into Matrix4 for column 2, row 0.\n *\n * @type {Number}\n * @constant\n */\nMatrix4.COLUMN2ROW0 = 8;\n\n/**\n * The index into Matrix4 for column 2, row 1.\n *\n * @type {Number}\n * @constant\n */\nMatrix4.COLUMN2ROW1 = 9;\n\n/**\n * The index into Matrix4 for column 2, row 2.\n *\n * @type {Number}\n * @constant\n */\nMatrix4.COLUMN2ROW2 = 10;\n\n/**\n * The index into Matrix4 for column 2, row 3.\n *\n * @type {Number}\n * @constant\n */\nMatrix4.COLUMN2ROW3 = 11;\n\n/**\n * The index into Matrix4 for column 3, row 0.\n *\n * @type {Number}\n * @constant\n */\nMatrix4.COLUMN3ROW0 = 12;\n\n/**\n * The index into Matrix4 for column 3, row 1.\n *\n * @type {Number}\n * @constant\n */\nMatrix4.COLUMN3ROW1 = 13;\n\n/**\n * The index into Matrix4 for column 3, row 2.\n *\n * @type {Number}\n * @constant\n */\nMatrix4.COLUMN3ROW2 = 14;\n\n/**\n * The index into Matrix4 for column 3, row 3.\n *\n * @type {Number}\n * @constant\n */\nMatrix4.COLUMN3ROW3 = 15;\n\nObject.defineProperties(Matrix4.prototype, {\n  /**\n   * Gets the number of items in the collection.\n   * @memberof Matrix4.prototype\n   *\n   * @type {Number}\n   */\n  length: {\n    get: function () {\n      return Matrix4.packedLength;\n    },\n  },\n});\n\n/**\n * Duplicates the provided Matrix4 instance.\n *\n * @param {Matrix4} [result] The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\n */\nMatrix4.prototype.clone = function (result) {\n  return Matrix4.clone(this, result);\n};\n\n/**\n * Compares this matrix to the provided matrix componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Matrix4} [right] The right hand side matrix.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nMatrix4.prototype.equals = function (right) {\n  return Matrix4.equals(this, right);\n};\n\n/**\n * @private\n */\nMatrix4.equalsArray = function (matrix, array, offset) {\n  return (\n    matrix[0] === array[offset] &&\n    matrix[1] === array[offset + 1] &&\n    matrix[2] === array[offset + 2] &&\n    matrix[3] === array[offset + 3] &&\n    matrix[4] === array[offset + 4] &&\n    matrix[5] === array[offset + 5] &&\n    matrix[6] === array[offset + 6] &&\n    matrix[7] === array[offset + 7] &&\n    matrix[8] === array[offset + 8] &&\n    matrix[9] === array[offset + 9] &&\n    matrix[10] === array[offset + 10] &&\n    matrix[11] === array[offset + 11] &&\n    matrix[12] === array[offset + 12] &&\n    matrix[13] === array[offset + 13] &&\n    matrix[14] === array[offset + 14] &&\n    matrix[15] === array[offset + 15]\n  );\n};\n\n/**\n * Compares this matrix to the provided matrix componentwise and returns\n * <code>true</code> if they are within the provided epsilon,\n * <code>false</code> otherwise.\n *\n * @param {Matrix4} [right] The right hand side matrix.\n * @param {Number} epsilon The epsilon to use for equality testing.\n * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\n */\nMatrix4.prototype.equalsEpsilon = function (right, epsilon) {\n  return Matrix4.equalsEpsilon(this, right, epsilon);\n};\n\n/**\n * Computes a string representing this Matrix with each row being\n * on a separate line and in the format '(column0, column1, column2, column3)'.\n *\n * @returns {String} A string representing the provided Matrix with each row being on a separate line and in the format '(column0, column1, column2, column3)'.\n */\nMatrix4.prototype.toString = function () {\n  return (\n    \"(\" +\n    this[0] +\n    \", \" +\n    this[4] +\n    \", \" +\n    this[8] +\n    \", \" +\n    this[12] +\n    \")\\n\" +\n    \"(\" +\n    this[1] +\n    \", \" +\n    this[5] +\n    \", \" +\n    this[9] +\n    \", \" +\n    this[13] +\n    \")\\n\" +\n    \"(\" +\n    this[2] +\n    \", \" +\n    this[6] +\n    \", \" +\n    this[10] +\n    \", \" +\n    this[14] +\n    \")\\n\" +\n    \"(\" +\n    this[3] +\n    \", \" +\n    this[7] +\n    \", \" +\n    this[11] +\n    \", \" +\n    this[15] +\n    \")\"\n  );\n};\nexport default Matrix4;\n"]},"metadata":{},"sourceType":"module"}