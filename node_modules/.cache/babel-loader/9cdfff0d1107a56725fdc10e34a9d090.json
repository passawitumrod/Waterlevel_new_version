{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defined from \"../Core/defined.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport SceneMode from \"./SceneMode.js\";\n/**\n * Blends the atmosphere to geometry far from the camera for horizon views. Allows for additional\n * performance improvements by rendering less geometry and dispatching less terrain requests.\n *\n * @alias Fog\n * @constructor\n */\n\nfunction Fog() {\n  /**\n   * <code>true</code> if fog is enabled, <code>false</code> otherwise.\n   * @type {Boolean}\n   * @default true\n   */\n  this.enabled = true;\n  /**\n   * A scalar that determines the density of the fog. Terrain that is in full fog are culled.\n   * The density of the fog increases as this number approaches 1.0 and becomes less dense as it approaches zero.\n   * The more dense the fog is, the more aggressively the terrain is culled. For example, if the camera is a height of\n   * 1000.0m above the ellipsoid, increasing the value to 3.0e-3 will cause many tiles close to the viewer be culled.\n   * Decreasing the value will push the fog further from the viewer, but decrease performance as more of the terrain is rendered.\n   * @type {Number}\n   * @default 2.0e-4\n   */\n\n  this.density = 2.0e-4;\n  /**\n   * A factor used to increase the screen space error of terrain tiles when they are partially in fog. The effect is to reduce\n   * the number of terrain tiles requested for rendering. If set to zero, the feature will be disabled. If the value is increased\n   * for mountainous regions, less tiles will need to be requested, but the terrain meshes near the horizon may be a noticeably\n   * lower resolution. If the value is increased in a relatively flat area, there will be little noticeable change on the horizon.\n   * @type {Number}\n   * @default 2.0\n   */\n\n  this.screenSpaceErrorFactor = 2.0;\n  /**\n   * The minimum brightness of the fog color from lighting. A value of 0.0 can cause the fog to be completely black. A value of 1.0 will not affect\n   * the brightness at all.\n   * @type {Number}\n   * @default 0.03\n   */\n\n  this.minimumBrightness = 0.03;\n} // These values were found by sampling the density at certain views and finding at what point culled tiles impacted the view at the horizon.\n\n\nvar heightsTable = [359.393, 800.749, 1275.6501, 2151.1192, 3141.7763, 4777.5198, 6281.2493, 12364.307, 15900.765, 49889.0549, 78026.8259, 99260.7344, 120036.3873, 151011.0158, 156091.1953, 203849.3112, 274866.9803, 319916.3149, 493552.0528, 628733.5874];\nvar densityTable = [2.0e-5, 2.0e-4, 1.0e-4, 7.0e-5, 5.0e-5, 4.0e-5, 3.0e-5, 1.9e-5, 1.0e-5, 8.5e-6, 6.2e-6, 5.8e-6, 5.3e-6, 5.2e-6, 5.1e-6, 4.2e-6, 4.0e-6, 3.4e-6, 2.6e-6, 2.2e-6]; // Scale densities by 1e6 to bring lowest value to ~1. Prevents divide by zero.\n\nfor (var i = 0; i < densityTable.length; ++i) {\n  densityTable[i] *= 1.0e6;\n} // Change range to [0, 1].\n\n\nvar tableStartDensity = densityTable[1];\nvar tableEndDensity = densityTable[densityTable.length - 1];\n\nfor (var j = 0; j < densityTable.length; ++j) {\n  densityTable[j] = (densityTable[j] - tableEndDensity) / (tableStartDensity - tableEndDensity);\n}\n\nvar tableLastIndex = 0;\n\nfunction findInterval(height) {\n  var heights = heightsTable;\n  var length = heights.length;\n\n  if (height < heights[0]) {\n    tableLastIndex = 0;\n    return tableLastIndex;\n  } else if (height > heights[length - 1]) {\n    tableLastIndex = length - 2;\n    return tableLastIndex;\n  } // Take advantage of temporal coherence by checking current, next and previous intervals\n  // for containment of time.\n\n\n  if (height >= heights[tableLastIndex]) {\n    if (tableLastIndex + 1 < length && height < heights[tableLastIndex + 1]) {\n      return tableLastIndex;\n    } else if (tableLastIndex + 2 < length && height < heights[tableLastIndex + 2]) {\n      ++tableLastIndex;\n      return tableLastIndex;\n    }\n  } else if (tableLastIndex - 1 >= 0 && height >= heights[tableLastIndex - 1]) {\n    --tableLastIndex;\n    return tableLastIndex;\n  } // The above failed so do a linear search.\n\n\n  var i;\n\n  for (i = 0; i < length - 2; ++i) {\n    if (height >= heights[i] && height < heights[i + 1]) {\n      break;\n    }\n  }\n\n  tableLastIndex = i;\n  return tableLastIndex;\n}\n\nvar scratchPositionNormal = new Cartesian3();\n\nFog.prototype.update = function (frameState) {\n  var enabled = frameState.fog.enabled = this.enabled;\n\n  if (!enabled) {\n    return;\n  }\n\n  var camera = frameState.camera;\n  var positionCartographic = camera.positionCartographic; // Turn off fog in space.\n\n  if (!defined(positionCartographic) || positionCartographic.height > 800000.0 || frameState.mode !== SceneMode.SCENE3D) {\n    frameState.fog.enabled = false;\n    return;\n  }\n\n  var height = positionCartographic.height;\n  var i = findInterval(height);\n  var t = CesiumMath.clamp((height - heightsTable[i]) / (heightsTable[i + 1] - heightsTable[i]), 0.0, 1.0);\n  var density = CesiumMath.lerp(densityTable[i], densityTable[i + 1], t); // Again, scale value to be in the range of densityTable (prevents divide by zero) and change to new range.\n\n  var startDensity = this.density * 1.0e6;\n  var endDensity = startDensity / tableStartDensity * tableEndDensity;\n  density = density * (startDensity - endDensity) * 1.0e-6; // Fade fog in as the camera tilts toward the horizon.\n\n  var positionNormal = Cartesian3.normalize(camera.positionWC, scratchPositionNormal);\n  var dot = Math.abs(Cartesian3.dot(camera.directionWC, positionNormal));\n  density *= 1.0 - dot;\n  frameState.fog.density = density;\n  frameState.fog.sse = this.screenSpaceErrorFactor;\n  frameState.fog.minimumBrightness = this.minimumBrightness;\n};\n\nexport default Fog;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/Fog.js"],"names":["Cartesian3","defined","CesiumMath","SceneMode","Fog","enabled","density","screenSpaceErrorFactor","minimumBrightness","heightsTable","densityTable","i","length","tableStartDensity","tableEndDensity","j","tableLastIndex","findInterval","height","heights","scratchPositionNormal","prototype","update","frameState","fog","camera","positionCartographic","mode","SCENE3D","t","clamp","lerp","startDensity","endDensity","positionNormal","normalize","positionWC","dot","Math","abs","directionWC","sse"],"mappings":"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","sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defined from \"../Core/defined.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport SceneMode from \"./SceneMode.js\";\n\n/**\n * Blends the atmosphere to geometry far from the camera for horizon views. Allows for additional\n * performance improvements by rendering less geometry and dispatching less terrain requests.\n *\n * @alias Fog\n * @constructor\n */\nfunction Fog() {\n  /**\n   * <code>true</code> if fog is enabled, <code>false</code> otherwise.\n   * @type {Boolean}\n   * @default true\n   */\n  this.enabled = true;\n  /**\n   * A scalar that determines the density of the fog. Terrain that is in full fog are culled.\n   * The density of the fog increases as this number approaches 1.0 and becomes less dense as it approaches zero.\n   * The more dense the fog is, the more aggressively the terrain is culled. For example, if the camera is a height of\n   * 1000.0m above the ellipsoid, increasing the value to 3.0e-3 will cause many tiles close to the viewer be culled.\n   * Decreasing the value will push the fog further from the viewer, but decrease performance as more of the terrain is rendered.\n   * @type {Number}\n   * @default 2.0e-4\n   */\n  this.density = 2.0e-4;\n  /**\n   * A factor used to increase the screen space error of terrain tiles when they are partially in fog. The effect is to reduce\n   * the number of terrain tiles requested for rendering. If set to zero, the feature will be disabled. If the value is increased\n   * for mountainous regions, less tiles will need to be requested, but the terrain meshes near the horizon may be a noticeably\n   * lower resolution. If the value is increased in a relatively flat area, there will be little noticeable change on the horizon.\n   * @type {Number}\n   * @default 2.0\n   */\n  this.screenSpaceErrorFactor = 2.0;\n  /**\n   * The minimum brightness of the fog color from lighting. A value of 0.0 can cause the fog to be completely black. A value of 1.0 will not affect\n   * the brightness at all.\n   * @type {Number}\n   * @default 0.03\n   */\n  this.minimumBrightness = 0.03;\n}\n\n// These values were found by sampling the density at certain views and finding at what point culled tiles impacted the view at the horizon.\nvar heightsTable = [\n  359.393,\n  800.749,\n  1275.6501,\n  2151.1192,\n  3141.7763,\n  4777.5198,\n  6281.2493,\n  12364.307,\n  15900.765,\n  49889.0549,\n  78026.8259,\n  99260.7344,\n  120036.3873,\n  151011.0158,\n  156091.1953,\n  203849.3112,\n  274866.9803,\n  319916.3149,\n  493552.0528,\n  628733.5874,\n];\nvar densityTable = [\n  2.0e-5,\n  2.0e-4,\n  1.0e-4,\n  7.0e-5,\n  5.0e-5,\n  4.0e-5,\n  3.0e-5,\n  1.9e-5,\n  1.0e-5,\n  8.5e-6,\n  6.2e-6,\n  5.8e-6,\n  5.3e-6,\n  5.2e-6,\n  5.1e-6,\n  4.2e-6,\n  4.0e-6,\n  3.4e-6,\n  2.6e-6,\n  2.2e-6,\n];\n\n// Scale densities by 1e6 to bring lowest value to ~1. Prevents divide by zero.\nfor (var i = 0; i < densityTable.length; ++i) {\n  densityTable[i] *= 1.0e6;\n}\n// Change range to [0, 1].\nvar tableStartDensity = densityTable[1];\nvar tableEndDensity = densityTable[densityTable.length - 1];\nfor (var j = 0; j < densityTable.length; ++j) {\n  densityTable[j] =\n    (densityTable[j] - tableEndDensity) / (tableStartDensity - tableEndDensity);\n}\n\nvar tableLastIndex = 0;\n\nfunction findInterval(height) {\n  var heights = heightsTable;\n  var length = heights.length;\n\n  if (height < heights[0]) {\n    tableLastIndex = 0;\n    return tableLastIndex;\n  } else if (height > heights[length - 1]) {\n    tableLastIndex = length - 2;\n    return tableLastIndex;\n  }\n\n  // Take advantage of temporal coherence by checking current, next and previous intervals\n  // for containment of time.\n  if (height >= heights[tableLastIndex]) {\n    if (tableLastIndex + 1 < length && height < heights[tableLastIndex + 1]) {\n      return tableLastIndex;\n    } else if (\n      tableLastIndex + 2 < length &&\n      height < heights[tableLastIndex + 2]\n    ) {\n      ++tableLastIndex;\n      return tableLastIndex;\n    }\n  } else if (tableLastIndex - 1 >= 0 && height >= heights[tableLastIndex - 1]) {\n    --tableLastIndex;\n    return tableLastIndex;\n  }\n\n  // The above failed so do a linear search.\n  var i;\n  for (i = 0; i < length - 2; ++i) {\n    if (height >= heights[i] && height < heights[i + 1]) {\n      break;\n    }\n  }\n\n  tableLastIndex = i;\n  return tableLastIndex;\n}\n\nvar scratchPositionNormal = new Cartesian3();\n\nFog.prototype.update = function (frameState) {\n  var enabled = (frameState.fog.enabled = this.enabled);\n  if (!enabled) {\n    return;\n  }\n\n  var camera = frameState.camera;\n  var positionCartographic = camera.positionCartographic;\n\n  // Turn off fog in space.\n  if (\n    !defined(positionCartographic) ||\n    positionCartographic.height > 800000.0 ||\n    frameState.mode !== SceneMode.SCENE3D\n  ) {\n    frameState.fog.enabled = false;\n    return;\n  }\n\n  var height = positionCartographic.height;\n  var i = findInterval(height);\n  var t = CesiumMath.clamp(\n    (height - heightsTable[i]) / (heightsTable[i + 1] - heightsTable[i]),\n    0.0,\n    1.0\n  );\n  var density = CesiumMath.lerp(densityTable[i], densityTable[i + 1], t);\n\n  // Again, scale value to be in the range of densityTable (prevents divide by zero) and change to new range.\n  var startDensity = this.density * 1.0e6;\n  var endDensity = (startDensity / tableStartDensity) * tableEndDensity;\n  density = density * (startDensity - endDensity) * 1.0e-6;\n\n  // Fade fog in as the camera tilts toward the horizon.\n  var positionNormal = Cartesian3.normalize(\n    camera.positionWC,\n    scratchPositionNormal\n  );\n  var dot = Math.abs(Cartesian3.dot(camera.directionWC, positionNormal));\n  density *= 1.0 - dot;\n\n  frameState.fog.density = density;\n  frameState.fog.sse = this.screenSpaceErrorFactor;\n  frameState.fog.minimumBrightness = this.minimumBrightness;\n};\nexport default Fog;\n"]},"metadata":{},"sourceType":"module"}