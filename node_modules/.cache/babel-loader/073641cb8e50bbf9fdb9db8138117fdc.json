{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Resource from \"../Core/Resource.js\";\nimport when from \"../ThirdParty/when.js\";\nimport CubeMap from \"./CubeMap.js\";\n/**\n * Asynchronously loads six images and creates a cube map.  Returns a promise that\n * will resolve to a {@link CubeMap} once loaded, or reject if any image fails to load.\n *\n * @exports loadCubeMap\n *\n * @param {Context} context The context to use to create the cube map.\n * @param {Object} urls The source URL of each image.  See the example below.\n * @returns {Promise.<CubeMap>} a promise that will resolve to the requested {@link CubeMap} when loaded.\n *\n * @exception {DeveloperError} context is required.\n * @exception {DeveloperError} urls is required and must have positiveX, negativeX, positiveY, negativeY, positiveZ, and negativeZ properties.\n *\n *\n * @example\n * Cesium.loadCubeMap(context, {\n *     positiveX : 'skybox_px.png',\n *     negativeX : 'skybox_nx.png',\n *     positiveY : 'skybox_py.png',\n *     negativeY : 'skybox_ny.png',\n *     positiveZ : 'skybox_pz.png',\n *     negativeZ : 'skybox_nz.png'\n * }).then(function(cubeMap) {\n *     // use the cubemap\n * }).otherwise(function(error) {\n *     // an error occurred\n * });\n *\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\n *\n * @private\n */\n\nfunction loadCubeMap(context, urls) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"context\", context);\n\n  if (!defined(urls) || !defined(urls.positiveX) || !defined(urls.negativeX) || !defined(urls.positiveY) || !defined(urls.negativeY) || !defined(urls.positiveZ) || !defined(urls.negativeZ)) {\n    throw new DeveloperError(\"urls is required and must have positiveX, negativeX, positiveY, negativeY, positiveZ, and negativeZ properties.\");\n  } //>>includeEnd('debug');\n  // PERFORMANCE_IDEA: Given the size of some cube maps, we should consider tiling them, which\n  // would prevent hiccups when uploading, for example, six 4096x4096 textures to the GPU.\n  //\n  // Also, it is perhaps acceptable to use the context here in the callbacks, but\n  // ideally, we would do it in the primitive's update function.\n\n\n  var flipOptions = {\n    flipY: true,\n    preferImageBitmap: true\n  };\n  var facePromises = [Resource.createIfNeeded(urls.positiveX).fetchImage(flipOptions), Resource.createIfNeeded(urls.negativeX).fetchImage(flipOptions), Resource.createIfNeeded(urls.positiveY).fetchImage(flipOptions), Resource.createIfNeeded(urls.negativeY).fetchImage(flipOptions), Resource.createIfNeeded(urls.positiveZ).fetchImage(flipOptions), Resource.createIfNeeded(urls.negativeZ).fetchImage(flipOptions)];\n  return when.all(facePromises, function (images) {\n    return new CubeMap({\n      context: context,\n      source: {\n        positiveX: images[0],\n        negativeX: images[1],\n        positiveY: images[2],\n        negativeY: images[3],\n        positiveZ: images[4],\n        negativeZ: images[5]\n      }\n    });\n  });\n}\n\nexport default loadCubeMap;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Renderer/loadCubeMap.js"],"names":["Check","defined","DeveloperError","Resource","when","CubeMap","loadCubeMap","context","urls","positiveX","negativeX","positiveY","negativeY","positiveZ","negativeZ","flipOptions","flipY","preferImageBitmap","facePromises","createIfNeeded","fetchImage","all","images","source"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,OAAP,MAAoB,cAApB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,SAASC,WAAT,CAAqBC,OAArB,EAA8BC,IAA9B,EAAoC;AAClC;AACAR,EAAAA,KAAK,CAACC,OAAN,CAAc,SAAd,EAAyBM,OAAzB;;AACA,MACE,CAACN,OAAO,CAACO,IAAD,CAAR,IACA,CAACP,OAAO,CAACO,IAAI,CAACC,SAAN,CADR,IAEA,CAACR,OAAO,CAACO,IAAI,CAACE,SAAN,CAFR,IAGA,CAACT,OAAO,CAACO,IAAI,CAACG,SAAN,CAHR,IAIA,CAACV,OAAO,CAACO,IAAI,CAACI,SAAN,CAJR,IAKA,CAACX,OAAO,CAACO,IAAI,CAACK,SAAN,CALR,IAMA,CAACZ,OAAO,CAACO,IAAI,CAACM,SAAN,CAPV,EAQE;AACA,UAAM,IAAIZ,cAAJ,CACJ,iHADI,CAAN;AAGD,GAfiC,CAgBlC;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAIa,WAAW,GAAG;AAChBC,IAAAA,KAAK,EAAE,IADS;AAEhBC,IAAAA,iBAAiB,EAAE;AAFH,GAAlB;AAKA,MAAIC,YAAY,GAAG,CACjBf,QAAQ,CAACgB,cAAT,CAAwBX,IAAI,CAACC,SAA7B,EAAwCW,UAAxC,CAAmDL,WAAnD,CADiB,EAEjBZ,QAAQ,CAACgB,cAAT,CAAwBX,IAAI,CAACE,SAA7B,EAAwCU,UAAxC,CAAmDL,WAAnD,CAFiB,EAGjBZ,QAAQ,CAACgB,cAAT,CAAwBX,IAAI,CAACG,SAA7B,EAAwCS,UAAxC,CAAmDL,WAAnD,CAHiB,EAIjBZ,QAAQ,CAACgB,cAAT,CAAwBX,IAAI,CAACI,SAA7B,EAAwCQ,UAAxC,CAAmDL,WAAnD,CAJiB,EAKjBZ,QAAQ,CAACgB,cAAT,CAAwBX,IAAI,CAACK,SAA7B,EAAwCO,UAAxC,CAAmDL,WAAnD,CALiB,EAMjBZ,QAAQ,CAACgB,cAAT,CAAwBX,IAAI,CAACM,SAA7B,EAAwCM,UAAxC,CAAmDL,WAAnD,CANiB,CAAnB;AASA,SAAOX,IAAI,CAACiB,GAAL,CAASH,YAAT,EAAuB,UAAUI,MAAV,EAAkB;AAC9C,WAAO,IAAIjB,OAAJ,CAAY;AACjBE,MAAAA,OAAO,EAAEA,OADQ;AAEjBgB,MAAAA,MAAM,EAAE;AACNd,QAAAA,SAAS,EAAEa,MAAM,CAAC,CAAD,CADX;AAENZ,QAAAA,SAAS,EAAEY,MAAM,CAAC,CAAD,CAFX;AAGNX,QAAAA,SAAS,EAAEW,MAAM,CAAC,CAAD,CAHX;AAINV,QAAAA,SAAS,EAAEU,MAAM,CAAC,CAAD,CAJX;AAKNT,QAAAA,SAAS,EAAES,MAAM,CAAC,CAAD,CALX;AAMNR,QAAAA,SAAS,EAAEQ,MAAM,CAAC,CAAD;AANX;AAFS,KAAZ,CAAP;AAWD,GAZM,CAAP;AAaD;;AACD,eAAehB,WAAf","sourcesContent":["import Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Resource from \"../Core/Resource.js\";\nimport when from \"../ThirdParty/when.js\";\nimport CubeMap from \"./CubeMap.js\";\n\n/**\n * Asynchronously loads six images and creates a cube map.  Returns a promise that\n * will resolve to a {@link CubeMap} once loaded, or reject if any image fails to load.\n *\n * @exports loadCubeMap\n *\n * @param {Context} context The context to use to create the cube map.\n * @param {Object} urls The source URL of each image.  See the example below.\n * @returns {Promise.<CubeMap>} a promise that will resolve to the requested {@link CubeMap} when loaded.\n *\n * @exception {DeveloperError} context is required.\n * @exception {DeveloperError} urls is required and must have positiveX, negativeX, positiveY, negativeY, positiveZ, and negativeZ properties.\n *\n *\n * @example\n * Cesium.loadCubeMap(context, {\n *     positiveX : 'skybox_px.png',\n *     negativeX : 'skybox_nx.png',\n *     positiveY : 'skybox_py.png',\n *     negativeY : 'skybox_ny.png',\n *     positiveZ : 'skybox_pz.png',\n *     negativeZ : 'skybox_nz.png'\n * }).then(function(cubeMap) {\n *     // use the cubemap\n * }).otherwise(function(error) {\n *     // an error occurred\n * });\n *\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\n *\n * @private\n */\nfunction loadCubeMap(context, urls) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"context\", context);\n  if (\n    !defined(urls) ||\n    !defined(urls.positiveX) ||\n    !defined(urls.negativeX) ||\n    !defined(urls.positiveY) ||\n    !defined(urls.negativeY) ||\n    !defined(urls.positiveZ) ||\n    !defined(urls.negativeZ)\n  ) {\n    throw new DeveloperError(\n      \"urls is required and must have positiveX, negativeX, positiveY, negativeY, positiveZ, and negativeZ properties.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  // PERFORMANCE_IDEA: Given the size of some cube maps, we should consider tiling them, which\n  // would prevent hiccups when uploading, for example, six 4096x4096 textures to the GPU.\n  //\n  // Also, it is perhaps acceptable to use the context here in the callbacks, but\n  // ideally, we would do it in the primitive's update function.\n  var flipOptions = {\n    flipY: true,\n    preferImageBitmap: true,\n  };\n\n  var facePromises = [\n    Resource.createIfNeeded(urls.positiveX).fetchImage(flipOptions),\n    Resource.createIfNeeded(urls.negativeX).fetchImage(flipOptions),\n    Resource.createIfNeeded(urls.positiveY).fetchImage(flipOptions),\n    Resource.createIfNeeded(urls.negativeY).fetchImage(flipOptions),\n    Resource.createIfNeeded(urls.positiveZ).fetchImage(flipOptions),\n    Resource.createIfNeeded(urls.negativeZ).fetchImage(flipOptions),\n  ];\n\n  return when.all(facePromises, function (images) {\n    return new CubeMap({\n      context: context,\n      source: {\n        positiveX: images[0],\n        negativeX: images[1],\n        positiveY: images[2],\n        negativeY: images[3],\n        positiveZ: images[4],\n        negativeZ: images[5],\n      },\n    });\n  });\n}\nexport default loadCubeMap;\n"]},"metadata":{},"sourceType":"module"}