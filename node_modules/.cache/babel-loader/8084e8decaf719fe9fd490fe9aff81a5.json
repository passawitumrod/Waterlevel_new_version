{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport ClearCommand from \"../Renderer/ClearCommand.js\";\nimport Framebuffer from \"../Renderer/Framebuffer.js\";\nimport PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport Sampler from \"../Renderer/Sampler.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport Texture from \"../Renderer/Texture.js\";\nimport TextureMagnificationFilter from \"../Renderer/TextureMagnificationFilter.js\";\nimport TextureMinificationFilter from \"../Renderer/TextureMinificationFilter.js\";\nimport TextureWrap from \"../Renderer/TextureWrap.js\";\nimport PassThrough from \"../Shaders/PostProcessStages/PassThrough.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport StencilConstants from \"./StencilConstants.js\";\nimport StencilFunction from \"./StencilFunction.js\";\nimport StencilOperation from \"./StencilOperation.js\";\n/**\n * @private\n */\n\nfunction InvertClassification() {\n  this.previousFramebuffer = undefined;\n  this._previousFramebuffer = undefined;\n  this._texture = undefined;\n  this._classifiedTexture = undefined;\n  this._depthStencilTexture = undefined;\n  this._fbo = undefined;\n  this._fboClassified = undefined;\n  this._rsUnclassified = undefined;\n  this._rsClassified = undefined;\n  this._unclassifiedCommand = undefined;\n  this._classifiedCommand = undefined;\n  this._translucentCommand = undefined;\n  this._clearColorCommand = new ClearCommand({\n    color: new Color(0.0, 0.0, 0.0, 0.0),\n    owner: this\n  });\n  this._clearCommand = new ClearCommand({\n    color: new Color(0.0, 0.0, 0.0, 0.0),\n    depth: 1.0,\n    stencil: 0\n  });\n  var that = this;\n  this._uniformMap = {\n    colorTexture: function () {\n      return that._texture;\n    },\n    depthTexture: function () {\n      return that._depthStencilTexture;\n    },\n    classifiedTexture: function () {\n      return that._classifiedTexture;\n    }\n  };\n}\n\nObject.defineProperties(InvertClassification.prototype, {\n  unclassifiedCommand: {\n    get: function () {\n      return this._unclassifiedCommand;\n    }\n  }\n});\n\nInvertClassification.isTranslucencySupported = function (context) {\n  return context.depthTexture && context.fragmentDepth;\n};\n\nvar rsUnclassified = {\n  depthMask: false,\n  stencilTest: {\n    enabled: true,\n    frontFunction: StencilFunction.EQUAL,\n    frontOperation: {\n      fail: StencilOperation.KEEP,\n      zFail: StencilOperation.KEEP,\n      zPass: StencilOperation.KEEP\n    },\n    backFunction: StencilFunction.NEVER,\n    reference: 0,\n    mask: StencilConstants.CLASSIFICATION_MASK\n  },\n  blending: BlendingState.ALPHA_BLEND\n};\nvar rsClassified = {\n  depthMask: false,\n  stencilTest: {\n    enabled: true,\n    frontFunction: StencilFunction.NOT_EQUAL,\n    frontOperation: {\n      fail: StencilOperation.KEEP,\n      zFail: StencilOperation.KEEP,\n      zPass: StencilOperation.KEEP\n    },\n    backFunction: StencilFunction.NEVER,\n    reference: 0,\n    mask: StencilConstants.CLASSIFICATION_MASK\n  },\n  blending: BlendingState.ALPHA_BLEND\n}; // Set the 3D Tiles bit when rendering back into the scene's framebuffer. This is only needed if\n// invert classification does not use the scene's depth-stencil texture, which is the case if the invert\n// classification color is translucent.\n\nvar rsDefault = {\n  depthMask: true,\n  depthTest: {\n    enabled: true\n  },\n  stencilTest: StencilConstants.setCesium3DTileBit(),\n  stencilMask: StencilConstants.CESIUM_3D_TILE_MASK,\n  blending: BlendingState.ALPHA_BLEND\n};\nvar translucentFS = \"#extension GL_EXT_frag_depth : enable\\n\" + \"uniform sampler2D colorTexture;\\n\" + \"uniform sampler2D depthTexture;\\n\" + \"uniform sampler2D classifiedTexture;\\n\" + \"varying vec2 v_textureCoordinates;\\n\" + \"void main()\\n\" + \"{\\n\" + \"    vec4 color = texture2D(colorTexture, v_textureCoordinates);\\n\" + \"    if (color.a == 0.0)\\n\" + \"    {\\n\" + \"        discard;\\n\" + \"    }\\n\" + \"    bool isClassified = all(equal(texture2D(classifiedTexture, v_textureCoordinates), vec4(0.0)));\\n\" + \"#ifdef UNCLASSIFIED\\n\" + \"    vec4 highlightColor = czm_invertClassificationColor;\\n\" + \"    if (isClassified)\\n\" + \"    {\\n\" + \"        discard;\\n\" + \"    }\\n\" + \"#else\\n\" + \"    vec4 highlightColor = vec4(1.0);\\n\" + \"    if (!isClassified)\\n\" + \"    {\\n\" + \"        discard;\\n\" + \"    }\\n\" + \"#endif\\n\" + \"    gl_FragColor = color * highlightColor;\\n\" + \"    gl_FragDepthEXT = texture2D(depthTexture, v_textureCoordinates).r;\\n\" + \"}\\n\";\nvar opaqueFS = \"uniform sampler2D colorTexture;\\n\" + \"varying vec2 v_textureCoordinates;\\n\" + \"void main()\\n\" + \"{\\n\" + \"    vec4 color = texture2D(colorTexture, v_textureCoordinates);\\n\" + \"    if (color.a == 0.0)\\n\" + \"    {\\n\" + \"        discard;\\n\" + \"    }\\n\" + \"#ifdef UNCLASSIFIED\\n\" + \"    gl_FragColor = color * czm_invertClassificationColor;\\n\" + \"#else\\n\" + \"    gl_FragColor = color;\\n\" + \"#endif\\n\" + \"}\\n\";\n\nInvertClassification.prototype.update = function (context) {\n  var texture = this._texture;\n  var previousFramebufferChanged = !defined(texture) || this.previousFramebuffer !== this._previousFramebuffer;\n  this._previousFramebuffer = this.previousFramebuffer;\n  var width = context.drawingBufferWidth;\n  var height = context.drawingBufferHeight;\n  var textureChanged = !defined(texture) || texture.width !== width || texture.height !== height;\n\n  if (textureChanged || previousFramebufferChanged) {\n    this._texture = this._texture && this._texture.destroy();\n    this._classifiedTexture = this._classifiedTexture && this._classifiedTexture.destroy();\n    this._depthStencilTexture = this._depthStencilTexture && this._depthStencilTexture.destroy();\n    this._texture = new Texture({\n      context: context,\n      width: width,\n      height: height,\n      pixelFormat: PixelFormat.RGBA,\n      pixelDatatype: PixelDatatype.UNSIGNED_BYTE,\n      sampler: new Sampler({\n        wrapS: TextureWrap.CLAMP_TO_EDGE,\n        wrapT: TextureWrap.CLAMP_TO_EDGE,\n        minificationFilter: TextureMinificationFilter.LINEAR,\n        magnificationFilter: TextureMagnificationFilter.LINEAR\n      })\n    });\n\n    if (!defined(this._previousFramebuffer)) {\n      this._classifiedTexture = new Texture({\n        context: context,\n        width: width,\n        height: height,\n        pixelFormat: PixelFormat.RGBA,\n        pixelDatatype: PixelDatatype.UNSIGNED_BYTE,\n        sampler: new Sampler({\n          wrapS: TextureWrap.CLAMP_TO_EDGE,\n          wrapT: TextureWrap.CLAMP_TO_EDGE,\n          minificationFilter: TextureMinificationFilter.LINEAR,\n          magnificationFilter: TextureMagnificationFilter.LINEAR\n        })\n      });\n      this._depthStencilTexture = new Texture({\n        context: context,\n        width: width,\n        height: height,\n        pixelFormat: PixelFormat.DEPTH_STENCIL,\n        pixelDatatype: PixelDatatype.UNSIGNED_INT_24_8\n      });\n    }\n  }\n\n  if (!defined(this._fbo) || textureChanged || previousFramebufferChanged) {\n    this._fbo = this._fbo && this._fbo.destroy();\n    this._fboClassified = this._fboClassified && this._fboClassified.destroy();\n    var depthStencilTexture;\n    var depthStencilRenderbuffer;\n\n    if (defined(this._previousFramebuffer)) {\n      depthStencilTexture = this._previousFramebuffer.depthStencilTexture;\n      depthStencilRenderbuffer = this._previousFramebuffer.depthStencilRenderbuffer;\n    } else {\n      depthStencilTexture = this._depthStencilTexture;\n    }\n\n    this._fbo = new Framebuffer({\n      context: context,\n      colorTextures: [this._texture],\n      depthStencilTexture: depthStencilTexture,\n      depthStencilRenderbuffer: depthStencilRenderbuffer,\n      destroyAttachments: false\n    });\n\n    if (!defined(this._previousFramebuffer)) {\n      this._fboClassified = new Framebuffer({\n        context: context,\n        colorTextures: [this._classifiedTexture],\n        depthStencilTexture: depthStencilTexture,\n        destroyAttachments: false\n      });\n    }\n  }\n\n  if (!defined(this._rsUnclassified)) {\n    this._rsUnclassified = RenderState.fromCache(rsUnclassified);\n    this._rsClassified = RenderState.fromCache(rsClassified);\n    this._rsDefault = RenderState.fromCache(rsDefault);\n  }\n\n  if (!defined(this._unclassifiedCommand) || previousFramebufferChanged) {\n    if (defined(this._unclassifiedCommand)) {\n      this._unclassifiedCommand.shaderProgram = this._unclassifiedCommand.shaderProgram && this._unclassifiedCommand.shaderProgram.destroy();\n      this._classifiedCommand.shaderProgram = this._classifiedCommand.shaderProgram && this._classifiedCommand.shaderProgram.destroy();\n    }\n\n    var fs = defined(this._previousFramebuffer) ? opaqueFS : translucentFS;\n    var unclassifiedFSSource = new ShaderSource({\n      defines: [\"UNCLASSIFIED\"],\n      sources: [fs]\n    });\n    var classifiedFSSource = new ShaderSource({\n      sources: [fs]\n    });\n    this._unclassifiedCommand = context.createViewportQuadCommand(unclassifiedFSSource, {\n      renderState: defined(this._previousFramebuffer) ? this._rsUnclassified : this._rsDefault,\n      uniformMap: this._uniformMap,\n      owner: this\n    });\n    this._classifiedCommand = context.createViewportQuadCommand(classifiedFSSource, {\n      renderState: defined(this._previousFramebuffer) ? this._rsClassified : this._rsDefault,\n      uniformMap: this._uniformMap,\n      owner: this\n    });\n\n    if (defined(this._translucentCommand)) {\n      this._translucentCommand.shaderProgram = this._translucentCommand.shaderProgram && this._translucentCommand.shaderProgram.destroy();\n    }\n\n    if (!defined(this._previousFramebuffer)) {\n      this._translucentCommand = context.createViewportQuadCommand(PassThrough, {\n        renderState: this._rsUnclassified,\n        uniformMap: this._uniformMap,\n        owner: this\n      });\n    }\n  }\n};\n\nInvertClassification.prototype.clear = function (context, passState) {\n  var framebuffer = passState.framebuffer;\n\n  if (defined(this._previousFramebuffer)) {\n    passState.framebuffer = this._fbo;\n\n    this._clearColorCommand.execute(context, passState);\n  } else {\n    passState.framebuffer = this._fbo;\n\n    this._clearCommand.execute(context, passState);\n\n    passState.framebuffer = this._fboClassified;\n\n    this._clearCommand.execute(context, passState);\n  }\n\n  passState.framebuffer = framebuffer;\n};\n\nInvertClassification.prototype.executeClassified = function (context, passState) {\n  if (!defined(this._previousFramebuffer)) {\n    var framebuffer = passState.framebuffer;\n    passState.framebuffer = this._fboClassified;\n\n    this._translucentCommand.execute(context, passState);\n\n    passState.framebuffer = framebuffer;\n  }\n\n  this._classifiedCommand.execute(context, passState);\n};\n\nInvertClassification.prototype.executeUnclassified = function (context, passState) {\n  this._unclassifiedCommand.execute(context, passState);\n};\n\nInvertClassification.prototype.isDestroyed = function () {\n  return false;\n};\n\nInvertClassification.prototype.destroy = function () {\n  this._fbo = this._fbo && this._fbo.destroy();\n  this._texture = this._texture && this._texture.destroy();\n  this._depthStencilTexture = this._depthStencilTexture && this._depthStencilTexture.destroy();\n\n  if (defined(this._unclassifiedCommand)) {\n    this._unclassifiedCommand.shaderProgram = this._unclassifiedCommand.shaderProgram && this._unclassifiedCommand.shaderProgram.destroy();\n    this._classifiedCommand.shaderProgram = this._classifiedCommand.shaderProgram && this._classifiedCommand.shaderProgram.destroy();\n  }\n\n  return destroyObject(this);\n};\n\nexport default InvertClassification;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/InvertClassification.js"],"names":["Color","defined","destroyObject","PixelFormat","ClearCommand","Framebuffer","PixelDatatype","RenderState","Sampler","ShaderSource","Texture","TextureMagnificationFilter","TextureMinificationFilter","TextureWrap","PassThrough","BlendingState","StencilConstants","StencilFunction","StencilOperation","InvertClassification","previousFramebuffer","undefined","_previousFramebuffer","_texture","_classifiedTexture","_depthStencilTexture","_fbo","_fboClassified","_rsUnclassified","_rsClassified","_unclassifiedCommand","_classifiedCommand","_translucentCommand","_clearColorCommand","color","owner","_clearCommand","depth","stencil","that","_uniformMap","colorTexture","depthTexture","classifiedTexture","Object","defineProperties","prototype","unclassifiedCommand","get","isTranslucencySupported","context","fragmentDepth","rsUnclassified","depthMask","stencilTest","enabled","frontFunction","EQUAL","frontOperation","fail","KEEP","zFail","zPass","backFunction","NEVER","reference","mask","CLASSIFICATION_MASK","blending","ALPHA_BLEND","rsClassified","NOT_EQUAL","rsDefault","depthTest","setCesium3DTileBit","stencilMask","CESIUM_3D_TILE_MASK","translucentFS","opaqueFS","update","texture","previousFramebufferChanged","width","drawingBufferWidth","height","drawingBufferHeight","textureChanged","destroy","pixelFormat","RGBA","pixelDatatype","UNSIGNED_BYTE","sampler","wrapS","CLAMP_TO_EDGE","wrapT","minificationFilter","LINEAR","magnificationFilter","DEPTH_STENCIL","UNSIGNED_INT_24_8","depthStencilTexture","depthStencilRenderbuffer","colorTextures","destroyAttachments","fromCache","_rsDefault","shaderProgram","fs","unclassifiedFSSource","defines","sources","classifiedFSSource","createViewportQuadCommand","renderState","uniformMap","clear","passState","framebuffer","execute","executeClassified","executeUnclassified","isDestroyed"],"mappings":"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","sourcesContent":["import Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport ClearCommand from \"../Renderer/ClearCommand.js\";\nimport Framebuffer from \"../Renderer/Framebuffer.js\";\nimport PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport Sampler from \"../Renderer/Sampler.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport Texture from \"../Renderer/Texture.js\";\nimport TextureMagnificationFilter from \"../Renderer/TextureMagnificationFilter.js\";\nimport TextureMinificationFilter from \"../Renderer/TextureMinificationFilter.js\";\nimport TextureWrap from \"../Renderer/TextureWrap.js\";\nimport PassThrough from \"../Shaders/PostProcessStages/PassThrough.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport StencilConstants from \"./StencilConstants.js\";\nimport StencilFunction from \"./StencilFunction.js\";\nimport StencilOperation from \"./StencilOperation.js\";\n\n/**\n * @private\n */\nfunction InvertClassification() {\n  this.previousFramebuffer = undefined;\n  this._previousFramebuffer = undefined;\n\n  this._texture = undefined;\n  this._classifiedTexture = undefined;\n  this._depthStencilTexture = undefined;\n  this._fbo = undefined;\n  this._fboClassified = undefined;\n\n  this._rsUnclassified = undefined;\n  this._rsClassified = undefined;\n\n  this._unclassifiedCommand = undefined;\n  this._classifiedCommand = undefined;\n  this._translucentCommand = undefined;\n\n  this._clearColorCommand = new ClearCommand({\n    color: new Color(0.0, 0.0, 0.0, 0.0),\n    owner: this,\n  });\n  this._clearCommand = new ClearCommand({\n    color: new Color(0.0, 0.0, 0.0, 0.0),\n    depth: 1.0,\n    stencil: 0,\n  });\n\n  var that = this;\n  this._uniformMap = {\n    colorTexture: function () {\n      return that._texture;\n    },\n    depthTexture: function () {\n      return that._depthStencilTexture;\n    },\n    classifiedTexture: function () {\n      return that._classifiedTexture;\n    },\n  };\n}\n\nObject.defineProperties(InvertClassification.prototype, {\n  unclassifiedCommand: {\n    get: function () {\n      return this._unclassifiedCommand;\n    },\n  },\n});\n\nInvertClassification.isTranslucencySupported = function (context) {\n  return context.depthTexture && context.fragmentDepth;\n};\n\nvar rsUnclassified = {\n  depthMask: false,\n  stencilTest: {\n    enabled: true,\n    frontFunction: StencilFunction.EQUAL,\n    frontOperation: {\n      fail: StencilOperation.KEEP,\n      zFail: StencilOperation.KEEP,\n      zPass: StencilOperation.KEEP,\n    },\n    backFunction: StencilFunction.NEVER,\n    reference: 0,\n    mask: StencilConstants.CLASSIFICATION_MASK,\n  },\n  blending: BlendingState.ALPHA_BLEND,\n};\n\nvar rsClassified = {\n  depthMask: false,\n  stencilTest: {\n    enabled: true,\n    frontFunction: StencilFunction.NOT_EQUAL,\n    frontOperation: {\n      fail: StencilOperation.KEEP,\n      zFail: StencilOperation.KEEP,\n      zPass: StencilOperation.KEEP,\n    },\n    backFunction: StencilFunction.NEVER,\n    reference: 0,\n    mask: StencilConstants.CLASSIFICATION_MASK,\n  },\n  blending: BlendingState.ALPHA_BLEND,\n};\n\n// Set the 3D Tiles bit when rendering back into the scene's framebuffer. This is only needed if\n// invert classification does not use the scene's depth-stencil texture, which is the case if the invert\n// classification color is translucent.\nvar rsDefault = {\n  depthMask: true,\n  depthTest: {\n    enabled: true,\n  },\n  stencilTest: StencilConstants.setCesium3DTileBit(),\n  stencilMask: StencilConstants.CESIUM_3D_TILE_MASK,\n  blending: BlendingState.ALPHA_BLEND,\n};\n\nvar translucentFS =\n  \"#extension GL_EXT_frag_depth : enable\\n\" +\n  \"uniform sampler2D colorTexture;\\n\" +\n  \"uniform sampler2D depthTexture;\\n\" +\n  \"uniform sampler2D classifiedTexture;\\n\" +\n  \"varying vec2 v_textureCoordinates;\\n\" +\n  \"void main()\\n\" +\n  \"{\\n\" +\n  \"    vec4 color = texture2D(colorTexture, v_textureCoordinates);\\n\" +\n  \"    if (color.a == 0.0)\\n\" +\n  \"    {\\n\" +\n  \"        discard;\\n\" +\n  \"    }\\n\" +\n  \"    bool isClassified = all(equal(texture2D(classifiedTexture, v_textureCoordinates), vec4(0.0)));\\n\" +\n  \"#ifdef UNCLASSIFIED\\n\" +\n  \"    vec4 highlightColor = czm_invertClassificationColor;\\n\" +\n  \"    if (isClassified)\\n\" +\n  \"    {\\n\" +\n  \"        discard;\\n\" +\n  \"    }\\n\" +\n  \"#else\\n\" +\n  \"    vec4 highlightColor = vec4(1.0);\\n\" +\n  \"    if (!isClassified)\\n\" +\n  \"    {\\n\" +\n  \"        discard;\\n\" +\n  \"    }\\n\" +\n  \"#endif\\n\" +\n  \"    gl_FragColor = color * highlightColor;\\n\" +\n  \"    gl_FragDepthEXT = texture2D(depthTexture, v_textureCoordinates).r;\\n\" +\n  \"}\\n\";\n\nvar opaqueFS =\n  \"uniform sampler2D colorTexture;\\n\" +\n  \"varying vec2 v_textureCoordinates;\\n\" +\n  \"void main()\\n\" +\n  \"{\\n\" +\n  \"    vec4 color = texture2D(colorTexture, v_textureCoordinates);\\n\" +\n  \"    if (color.a == 0.0)\\n\" +\n  \"    {\\n\" +\n  \"        discard;\\n\" +\n  \"    }\\n\" +\n  \"#ifdef UNCLASSIFIED\\n\" +\n  \"    gl_FragColor = color * czm_invertClassificationColor;\\n\" +\n  \"#else\\n\" +\n  \"    gl_FragColor = color;\\n\" +\n  \"#endif\\n\" +\n  \"}\\n\";\n\nInvertClassification.prototype.update = function (context) {\n  var texture = this._texture;\n  var previousFramebufferChanged =\n    !defined(texture) || this.previousFramebuffer !== this._previousFramebuffer;\n  this._previousFramebuffer = this.previousFramebuffer;\n\n  var width = context.drawingBufferWidth;\n  var height = context.drawingBufferHeight;\n\n  var textureChanged =\n    !defined(texture) || texture.width !== width || texture.height !== height;\n  if (textureChanged || previousFramebufferChanged) {\n    this._texture = this._texture && this._texture.destroy();\n    this._classifiedTexture =\n      this._classifiedTexture && this._classifiedTexture.destroy();\n    this._depthStencilTexture =\n      this._depthStencilTexture && this._depthStencilTexture.destroy();\n\n    this._texture = new Texture({\n      context: context,\n      width: width,\n      height: height,\n      pixelFormat: PixelFormat.RGBA,\n      pixelDatatype: PixelDatatype.UNSIGNED_BYTE,\n      sampler: new Sampler({\n        wrapS: TextureWrap.CLAMP_TO_EDGE,\n        wrapT: TextureWrap.CLAMP_TO_EDGE,\n        minificationFilter: TextureMinificationFilter.LINEAR,\n        magnificationFilter: TextureMagnificationFilter.LINEAR,\n      }),\n    });\n\n    if (!defined(this._previousFramebuffer)) {\n      this._classifiedTexture = new Texture({\n        context: context,\n        width: width,\n        height: height,\n        pixelFormat: PixelFormat.RGBA,\n        pixelDatatype: PixelDatatype.UNSIGNED_BYTE,\n        sampler: new Sampler({\n          wrapS: TextureWrap.CLAMP_TO_EDGE,\n          wrapT: TextureWrap.CLAMP_TO_EDGE,\n          minificationFilter: TextureMinificationFilter.LINEAR,\n          magnificationFilter: TextureMagnificationFilter.LINEAR,\n        }),\n      });\n      this._depthStencilTexture = new Texture({\n        context: context,\n        width: width,\n        height: height,\n        pixelFormat: PixelFormat.DEPTH_STENCIL,\n        pixelDatatype: PixelDatatype.UNSIGNED_INT_24_8,\n      });\n    }\n  }\n\n  if (!defined(this._fbo) || textureChanged || previousFramebufferChanged) {\n    this._fbo = this._fbo && this._fbo.destroy();\n    this._fboClassified = this._fboClassified && this._fboClassified.destroy();\n\n    var depthStencilTexture;\n    var depthStencilRenderbuffer;\n    if (defined(this._previousFramebuffer)) {\n      depthStencilTexture = this._previousFramebuffer.depthStencilTexture;\n      depthStencilRenderbuffer = this._previousFramebuffer\n        .depthStencilRenderbuffer;\n    } else {\n      depthStencilTexture = this._depthStencilTexture;\n    }\n\n    this._fbo = new Framebuffer({\n      context: context,\n      colorTextures: [this._texture],\n      depthStencilTexture: depthStencilTexture,\n      depthStencilRenderbuffer: depthStencilRenderbuffer,\n      destroyAttachments: false,\n    });\n\n    if (!defined(this._previousFramebuffer)) {\n      this._fboClassified = new Framebuffer({\n        context: context,\n        colorTextures: [this._classifiedTexture],\n        depthStencilTexture: depthStencilTexture,\n        destroyAttachments: false,\n      });\n    }\n  }\n\n  if (!defined(this._rsUnclassified)) {\n    this._rsUnclassified = RenderState.fromCache(rsUnclassified);\n    this._rsClassified = RenderState.fromCache(rsClassified);\n    this._rsDefault = RenderState.fromCache(rsDefault);\n  }\n\n  if (!defined(this._unclassifiedCommand) || previousFramebufferChanged) {\n    if (defined(this._unclassifiedCommand)) {\n      this._unclassifiedCommand.shaderProgram =\n        this._unclassifiedCommand.shaderProgram &&\n        this._unclassifiedCommand.shaderProgram.destroy();\n      this._classifiedCommand.shaderProgram =\n        this._classifiedCommand.shaderProgram &&\n        this._classifiedCommand.shaderProgram.destroy();\n    }\n\n    var fs = defined(this._previousFramebuffer) ? opaqueFS : translucentFS;\n    var unclassifiedFSSource = new ShaderSource({\n      defines: [\"UNCLASSIFIED\"],\n      sources: [fs],\n    });\n    var classifiedFSSource = new ShaderSource({\n      sources: [fs],\n    });\n    this._unclassifiedCommand = context.createViewportQuadCommand(\n      unclassifiedFSSource,\n      {\n        renderState: defined(this._previousFramebuffer)\n          ? this._rsUnclassified\n          : this._rsDefault,\n        uniformMap: this._uniformMap,\n        owner: this,\n      }\n    );\n    this._classifiedCommand = context.createViewportQuadCommand(\n      classifiedFSSource,\n      {\n        renderState: defined(this._previousFramebuffer)\n          ? this._rsClassified\n          : this._rsDefault,\n        uniformMap: this._uniformMap,\n        owner: this,\n      }\n    );\n\n    if (defined(this._translucentCommand)) {\n      this._translucentCommand.shaderProgram =\n        this._translucentCommand.shaderProgram &&\n        this._translucentCommand.shaderProgram.destroy();\n    }\n    if (!defined(this._previousFramebuffer)) {\n      this._translucentCommand = context.createViewportQuadCommand(\n        PassThrough,\n        {\n          renderState: this._rsUnclassified,\n          uniformMap: this._uniformMap,\n          owner: this,\n        }\n      );\n    }\n  }\n};\n\nInvertClassification.prototype.clear = function (context, passState) {\n  var framebuffer = passState.framebuffer;\n\n  if (defined(this._previousFramebuffer)) {\n    passState.framebuffer = this._fbo;\n    this._clearColorCommand.execute(context, passState);\n  } else {\n    passState.framebuffer = this._fbo;\n    this._clearCommand.execute(context, passState);\n    passState.framebuffer = this._fboClassified;\n    this._clearCommand.execute(context, passState);\n  }\n\n  passState.framebuffer = framebuffer;\n};\n\nInvertClassification.prototype.executeClassified = function (\n  context,\n  passState\n) {\n  if (!defined(this._previousFramebuffer)) {\n    var framebuffer = passState.framebuffer;\n\n    passState.framebuffer = this._fboClassified;\n    this._translucentCommand.execute(context, passState);\n\n    passState.framebuffer = framebuffer;\n  }\n  this._classifiedCommand.execute(context, passState);\n};\n\nInvertClassification.prototype.executeUnclassified = function (\n  context,\n  passState\n) {\n  this._unclassifiedCommand.execute(context, passState);\n};\n\nInvertClassification.prototype.isDestroyed = function () {\n  return false;\n};\n\nInvertClassification.prototype.destroy = function () {\n  this._fbo = this._fbo && this._fbo.destroy();\n  this._texture = this._texture && this._texture.destroy();\n  this._depthStencilTexture =\n    this._depthStencilTexture && this._depthStencilTexture.destroy();\n\n  if (defined(this._unclassifiedCommand)) {\n    this._unclassifiedCommand.shaderProgram =\n      this._unclassifiedCommand.shaderProgram &&\n      this._unclassifiedCommand.shaderProgram.destroy();\n    this._classifiedCommand.shaderProgram =\n      this._classifiedCommand.shaderProgram &&\n      this._classifiedCommand.shaderProgram.destroy();\n  }\n\n  return destroyObject(this);\n};\nexport default InvertClassification;\n"]},"metadata":{},"sourceType":"module"}