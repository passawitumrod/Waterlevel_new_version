{"ast":null,"code":"import defined from \"./defined.js\";\n/**\n * An {@link InterpolationAlgorithm} for performing Lagrange interpolation.\n *\n * @exports LagrangePolynomialApproximation\n */\n\nvar LagrangePolynomialApproximation = {\n  type: \"Lagrange\"\n};\n/**\n * Given the desired degree, returns the number of data points required for interpolation.\n *\n * @param {Number} degree The desired degree of interpolation.\n * @returns {Number} The number of required data points needed for the desired degree of interpolation.\n */\n\nLagrangePolynomialApproximation.getRequiredDataPoints = function (degree) {\n  return Math.max(degree + 1.0, 2);\n};\n/**\n * Interpolates values using Lagrange Polynomial Approximation.\n *\n * @param {Number} x The independent variable for which the dependent variables will be interpolated.\n * @param {Number[]} xTable The array of independent variables to use to interpolate.  The values\n * in this array must be in increasing order and the same value must not occur twice in the array.\n * @param {Number[]} yTable The array of dependent variables to use to interpolate.  For a set of three\n * dependent values (p,q,w) at time 1 and time 2 this should be as follows: {p1, q1, w1, p2, q2, w2}.\n * @param {Number} yStride The number of dependent variable values in yTable corresponding to\n * each independent variable value in xTable.\n * @param {Number[]} [result] An existing array into which to store the result.\n * @returns {Number[]} The array of interpolated values, or the result parameter if one was provided.\n */\n\n\nLagrangePolynomialApproximation.interpolateOrderZero = function (x, xTable, yTable, yStride, result) {\n  if (!defined(result)) {\n    result = new Array(yStride);\n  }\n\n  var i;\n  var j;\n  var length = xTable.length;\n\n  for (i = 0; i < yStride; i++) {\n    result[i] = 0;\n  }\n\n  for (i = 0; i < length; i++) {\n    var coefficient = 1;\n\n    for (j = 0; j < length; j++) {\n      if (j !== i) {\n        var diffX = xTable[i] - xTable[j];\n        coefficient *= (x - xTable[j]) / diffX;\n      }\n    }\n\n    for (j = 0; j < yStride; j++) {\n      result[j] += coefficient * yTable[i * yStride + j];\n    }\n  }\n\n  return result;\n};\n\nexport default LagrangePolynomialApproximation;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/LagrangePolynomialApproximation.js"],"names":["defined","LagrangePolynomialApproximation","type","getRequiredDataPoints","degree","Math","max","interpolateOrderZero","x","xTable","yTable","yStride","result","Array","i","j","length","coefficient","diffX"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,cAApB;AAEA;;;;;;AAKA,IAAIC,+BAA+B,GAAG;AACpCC,EAAAA,IAAI,EAAE;AAD8B,CAAtC;AAIA;;;;;;;AAMAD,+BAA+B,CAACE,qBAAhC,GAAwD,UAAUC,MAAV,EAAkB;AACxE,SAAOC,IAAI,CAACC,GAAL,CAASF,MAAM,GAAG,GAAlB,EAAuB,CAAvB,CAAP;AACD,CAFD;AAIA;;;;;;;;;;;;;;;AAaAH,+BAA+B,CAACM,oBAAhC,GAAuD,UACrDC,CADqD,EAErDC,MAFqD,EAGrDC,MAHqD,EAIrDC,OAJqD,EAKrDC,MALqD,EAMrD;AACA,MAAI,CAACZ,OAAO,CAACY,MAAD,CAAZ,EAAsB;AACpBA,IAAAA,MAAM,GAAG,IAAIC,KAAJ,CAAUF,OAAV,CAAT;AACD;;AAED,MAAIG,CAAJ;AACA,MAAIC,CAAJ;AACA,MAAIC,MAAM,GAAGP,MAAM,CAACO,MAApB;;AAEA,OAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,OAAhB,EAAyBG,CAAC,EAA1B,EAA8B;AAC5BF,IAAAA,MAAM,CAACE,CAAD,CAAN,GAAY,CAAZ;AACD;;AAED,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGE,MAAhB,EAAwBF,CAAC,EAAzB,EAA6B;AAC3B,QAAIG,WAAW,GAAG,CAAlB;;AAEA,SAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,MAAhB,EAAwBD,CAAC,EAAzB,EAA6B;AAC3B,UAAIA,CAAC,KAAKD,CAAV,EAAa;AACX,YAAII,KAAK,GAAGT,MAAM,CAACK,CAAD,CAAN,GAAYL,MAAM,CAACM,CAAD,CAA9B;AACAE,QAAAA,WAAW,IAAI,CAACT,CAAC,GAAGC,MAAM,CAACM,CAAD,CAAX,IAAkBG,KAAjC;AACD;AACF;;AAED,SAAKH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGJ,OAAhB,EAAyBI,CAAC,EAA1B,EAA8B;AAC5BH,MAAAA,MAAM,CAACG,CAAD,CAAN,IAAaE,WAAW,GAAGP,MAAM,CAACI,CAAC,GAAGH,OAAJ,GAAcI,CAAf,CAAjC;AACD;AACF;;AAED,SAAOH,MAAP;AACD,CAnCD;;AAoCA,eAAeX,+BAAf","sourcesContent":["import defined from \"./defined.js\";\n\n/**\n * An {@link InterpolationAlgorithm} for performing Lagrange interpolation.\n *\n * @exports LagrangePolynomialApproximation\n */\nvar LagrangePolynomialApproximation = {\n  type: \"Lagrange\",\n};\n\n/**\n * Given the desired degree, returns the number of data points required for interpolation.\n *\n * @param {Number} degree The desired degree of interpolation.\n * @returns {Number} The number of required data points needed for the desired degree of interpolation.\n */\nLagrangePolynomialApproximation.getRequiredDataPoints = function (degree) {\n  return Math.max(degree + 1.0, 2);\n};\n\n/**\n * Interpolates values using Lagrange Polynomial Approximation.\n *\n * @param {Number} x The independent variable for which the dependent variables will be interpolated.\n * @param {Number[]} xTable The array of independent variables to use to interpolate.  The values\n * in this array must be in increasing order and the same value must not occur twice in the array.\n * @param {Number[]} yTable The array of dependent variables to use to interpolate.  For a set of three\n * dependent values (p,q,w) at time 1 and time 2 this should be as follows: {p1, q1, w1, p2, q2, w2}.\n * @param {Number} yStride The number of dependent variable values in yTable corresponding to\n * each independent variable value in xTable.\n * @param {Number[]} [result] An existing array into which to store the result.\n * @returns {Number[]} The array of interpolated values, or the result parameter if one was provided.\n */\nLagrangePolynomialApproximation.interpolateOrderZero = function (\n  x,\n  xTable,\n  yTable,\n  yStride,\n  result\n) {\n  if (!defined(result)) {\n    result = new Array(yStride);\n  }\n\n  var i;\n  var j;\n  var length = xTable.length;\n\n  for (i = 0; i < yStride; i++) {\n    result[i] = 0;\n  }\n\n  for (i = 0; i < length; i++) {\n    var coefficient = 1;\n\n    for (j = 0; j < length; j++) {\n      if (j !== i) {\n        var diffX = xTable[i] - xTable[j];\n        coefficient *= (x - xTable[j]) / diffX;\n      }\n    }\n\n    for (j = 0; j < yStride; j++) {\n      result[j] += coefficient * yTable[i * yStride + j];\n    }\n  }\n\n  return result;\n};\nexport default LagrangePolynomialApproximation;\n"]},"metadata":{},"sourceType":"module"}