{"ast":null,"code":"import ArcType from \"../Core/ArcType.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport getFilenameFromUri from \"../Core/getFilenameFromUri.js\";\nimport PinBuilder from \"../Core/PinBuilder.js\";\nimport PolygonHierarchy from \"../Core/PolygonHierarchy.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport VerticalOrigin from \"../Scene/VerticalOrigin.js\";\nimport topojson from \"../ThirdParty/topojson.js\";\nimport when from \"../ThirdParty/when.js\";\nimport BillboardGraphics from \"./BillboardGraphics.js\";\nimport CallbackProperty from \"./CallbackProperty.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport ConstantPositionProperty from \"./ConstantPositionProperty.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport DataSource from \"./DataSource.js\";\nimport EntityCluster from \"./EntityCluster.js\";\nimport EntityCollection from \"./EntityCollection.js\";\nimport PolygonGraphics from \"./PolygonGraphics.js\";\nimport PolylineGraphics from \"./PolylineGraphics.js\";\n\nfunction defaultCrsFunction(coordinates) {\n  return Cartesian3.fromDegrees(coordinates[0], coordinates[1], coordinates[2]);\n}\n\nvar crsNames = {\n  \"urn:ogc:def:crs:OGC:1.3:CRS84\": defaultCrsFunction,\n  \"EPSG:4326\": defaultCrsFunction,\n  \"urn:ogc:def:crs:EPSG::4326\": defaultCrsFunction\n};\nvar crsLinkHrefs = {};\nvar crsLinkTypes = {};\nvar defaultMarkerSize = 48;\nvar defaultMarkerSymbol;\nvar defaultMarkerColor = Color.ROYALBLUE;\nvar defaultStroke = Color.YELLOW;\nvar defaultStrokeWidth = 2;\nvar defaultFill = Color.fromBytes(255, 255, 0, 100);\nvar defaultClampToGround = false;\nvar sizes = {\n  small: 24,\n  medium: 48,\n  large: 64\n};\nvar simpleStyleIdentifiers = [\"title\", \"description\", //\n\"marker-size\", \"marker-symbol\", \"marker-color\", \"stroke\", //\n\"stroke-opacity\", \"stroke-width\", \"fill\", \"fill-opacity\"];\n\nfunction defaultDescribe(properties, nameProperty) {\n  var html = \"\";\n\n  for (var key in properties) {\n    if (properties.hasOwnProperty(key)) {\n      if (key === nameProperty || simpleStyleIdentifiers.indexOf(key) !== -1) {\n        continue;\n      }\n\n      var value = properties[key];\n\n      if (defined(value)) {\n        if (typeof value === \"object\") {\n          html += \"<tr><th>\" + key + \"</th><td>\" + defaultDescribe(value) + \"</td></tr>\";\n        } else {\n          html += \"<tr><th>\" + key + \"</th><td>\" + value + \"</td></tr>\";\n        }\n      }\n    }\n  }\n\n  if (html.length > 0) {\n    html = '<table class=\"cesium-infoBox-defaultTable\"><tbody>' + html + \"</tbody></table>\";\n  }\n\n  return html;\n}\n\nfunction createDescriptionCallback(describe, properties, nameProperty) {\n  var description;\n  return function (time, result) {\n    if (!defined(description)) {\n      description = describe(properties, nameProperty);\n    }\n\n    return description;\n  };\n}\n\nfunction defaultDescribeProperty(properties, nameProperty) {\n  return new CallbackProperty(createDescriptionCallback(defaultDescribe, properties, nameProperty), true);\n} //GeoJSON specifies only the Feature object has a usable id property\n//But since \"multi\" geometries create multiple entity,\n//we can't use it for them either.\n\n\nfunction createObject(geoJson, entityCollection, describe) {\n  var id = geoJson.id;\n\n  if (!defined(id) || geoJson.type !== \"Feature\") {\n    id = createGuid();\n  } else {\n    var i = 2;\n    var finalId = id;\n\n    while (defined(entityCollection.getById(finalId))) {\n      finalId = id + \"_\" + i;\n      i++;\n    }\n\n    id = finalId;\n  }\n\n  var entity = entityCollection.getOrCreateEntity(id);\n  var properties = geoJson.properties;\n\n  if (defined(properties)) {\n    entity.properties = properties;\n    var nameProperty; //Check for the simplestyle specified name first.\n\n    var name = properties.title;\n\n    if (defined(name)) {\n      entity.name = name;\n      nameProperty = \"title\";\n    } else {\n      //Else, find the name by selecting an appropriate property.\n      //The name will be obtained based on this order:\n      //1) The first case-insensitive property with the name 'title',\n      //2) The first case-insensitive property with the name 'name',\n      //3) The first property containing the word 'title'.\n      //4) The first property containing the word 'name',\n      var namePropertyPrecedence = Number.MAX_VALUE;\n\n      for (var key in properties) {\n        if (properties.hasOwnProperty(key) && properties[key]) {\n          var lowerKey = key.toLowerCase();\n\n          if (namePropertyPrecedence > 1 && lowerKey === \"title\") {\n            namePropertyPrecedence = 1;\n            nameProperty = key;\n            break;\n          } else if (namePropertyPrecedence > 2 && lowerKey === \"name\") {\n            namePropertyPrecedence = 2;\n            nameProperty = key;\n          } else if (namePropertyPrecedence > 3 && /title/i.test(key)) {\n            namePropertyPrecedence = 3;\n            nameProperty = key;\n          } else if (namePropertyPrecedence > 4 && /name/i.test(key)) {\n            namePropertyPrecedence = 4;\n            nameProperty = key;\n          }\n        }\n      }\n\n      if (defined(nameProperty)) {\n        entity.name = properties[nameProperty];\n      }\n    }\n\n    var description = properties.description;\n\n    if (description !== null) {\n      entity.description = !defined(description) ? describe(properties, nameProperty) : new ConstantProperty(description);\n    }\n  }\n\n  return entity;\n}\n\nfunction coordinatesArrayToCartesianArray(coordinates, crsFunction) {\n  var positions = new Array(coordinates.length);\n\n  for (var i = 0; i < coordinates.length; i++) {\n    positions[i] = crsFunction(coordinates[i]);\n  }\n\n  return positions;\n}\n\nvar geoJsonObjectTypes = {\n  Feature: processFeature,\n  FeatureCollection: processFeatureCollection,\n  GeometryCollection: processGeometryCollection,\n  LineString: processLineString,\n  MultiLineString: processMultiLineString,\n  MultiPoint: processMultiPoint,\n  MultiPolygon: processMultiPolygon,\n  Point: processPoint,\n  Polygon: processPolygon,\n  Topology: processTopology\n};\nvar geometryTypes = {\n  GeometryCollection: processGeometryCollection,\n  LineString: processLineString,\n  MultiLineString: processMultiLineString,\n  MultiPoint: processMultiPoint,\n  MultiPolygon: processMultiPolygon,\n  Point: processPoint,\n  Polygon: processPolygon,\n  Topology: processTopology\n}; // GeoJSON processing functions\n\nfunction processFeature(dataSource, feature, notUsed, crsFunction, options) {\n  if (feature.geometry === null) {\n    //Null geometry is allowed, so just create an empty entity instance for it.\n    createObject(feature, dataSource._entityCollection, options.describe);\n    return;\n  }\n\n  if (!defined(feature.geometry)) {\n    throw new RuntimeError(\"feature.geometry is required.\");\n  }\n\n  var geometryType = feature.geometry.type;\n  var geometryHandler = geometryTypes[geometryType];\n\n  if (!defined(geometryHandler)) {\n    throw new RuntimeError(\"Unknown geometry type: \" + geometryType);\n  }\n\n  geometryHandler(dataSource, feature, feature.geometry, crsFunction, options);\n}\n\nfunction processFeatureCollection(dataSource, featureCollection, notUsed, crsFunction, options) {\n  var features = featureCollection.features;\n\n  for (var i = 0, len = features.length; i < len; i++) {\n    processFeature(dataSource, features[i], undefined, crsFunction, options);\n  }\n}\n\nfunction processGeometryCollection(dataSource, geoJson, geometryCollection, crsFunction, options) {\n  var geometries = geometryCollection.geometries;\n\n  for (var i = 0, len = geometries.length; i < len; i++) {\n    var geometry = geometries[i];\n    var geometryType = geometry.type;\n    var geometryHandler = geometryTypes[geometryType];\n\n    if (!defined(geometryHandler)) {\n      throw new RuntimeError(\"Unknown geometry type: \" + geometryType);\n    }\n\n    geometryHandler(dataSource, geoJson, geometry, crsFunction, options);\n  }\n}\n\nfunction createPoint(dataSource, geoJson, crsFunction, coordinates, options) {\n  var symbol = options.markerSymbol;\n  var color = options.markerColor;\n  var size = options.markerSize;\n  var properties = geoJson.properties;\n\n  if (defined(properties)) {\n    var cssColor = properties[\"marker-color\"];\n\n    if (defined(cssColor)) {\n      color = Color.fromCssColorString(cssColor);\n    }\n\n    size = defaultValue(sizes[properties[\"marker-size\"]], size);\n    var markerSymbol = properties[\"marker-symbol\"];\n\n    if (defined(markerSymbol)) {\n      symbol = markerSymbol;\n    }\n  }\n\n  var canvasOrPromise;\n\n  if (defined(symbol)) {\n    if (symbol.length === 1) {\n      canvasOrPromise = dataSource._pinBuilder.fromText(symbol.toUpperCase(), color, size);\n    } else {\n      canvasOrPromise = dataSource._pinBuilder.fromMakiIconId(symbol, color, size);\n    }\n  } else {\n    canvasOrPromise = dataSource._pinBuilder.fromColor(color, size);\n  }\n\n  var billboard = new BillboardGraphics();\n  billboard.verticalOrigin = new ConstantProperty(VerticalOrigin.BOTTOM); // Clamp to ground if there isn't a height specified\n\n  if (coordinates.length === 2 && options.clampToGround) {\n    billboard.heightReference = HeightReference.CLAMP_TO_GROUND;\n  }\n\n  var entity = createObject(geoJson, dataSource._entityCollection, options.describe);\n  entity.billboard = billboard;\n  entity.position = new ConstantPositionProperty(crsFunction(coordinates));\n  var promise = when(canvasOrPromise).then(function (image) {\n    billboard.image = new ConstantProperty(image);\n  }).otherwise(function () {\n    billboard.image = new ConstantProperty(dataSource._pinBuilder.fromColor(color, size));\n  });\n\n  dataSource._promises.push(promise);\n}\n\nfunction processPoint(dataSource, geoJson, geometry, crsFunction, options) {\n  createPoint(dataSource, geoJson, crsFunction, geometry.coordinates, options);\n}\n\nfunction processMultiPoint(dataSource, geoJson, geometry, crsFunction, options) {\n  var coordinates = geometry.coordinates;\n\n  for (var i = 0; i < coordinates.length; i++) {\n    createPoint(dataSource, geoJson, crsFunction, coordinates[i], options);\n  }\n}\n\nfunction createLineString(dataSource, geoJson, crsFunction, coordinates, options) {\n  var material = options.strokeMaterialProperty;\n  var widthProperty = options.strokeWidthProperty;\n  var properties = geoJson.properties;\n\n  if (defined(properties)) {\n    var width = properties[\"stroke-width\"];\n\n    if (defined(width)) {\n      widthProperty = new ConstantProperty(width);\n    }\n\n    var color;\n    var stroke = properties.stroke;\n\n    if (defined(stroke)) {\n      color = Color.fromCssColorString(stroke);\n    }\n\n    var opacity = properties[\"stroke-opacity\"];\n\n    if (defined(opacity) && opacity !== 1.0) {\n      if (!defined(color)) {\n        color = material.color.clone();\n      }\n\n      color.alpha = opacity;\n    }\n\n    if (defined(color)) {\n      material = new ColorMaterialProperty(color);\n    }\n  }\n\n  var entity = createObject(geoJson, dataSource._entityCollection, options.describe);\n  var polylineGraphics = new PolylineGraphics();\n  entity.polyline = polylineGraphics;\n  polylineGraphics.clampToGround = options.clampToGround;\n  polylineGraphics.material = material;\n  polylineGraphics.width = widthProperty;\n  polylineGraphics.positions = new ConstantProperty(coordinatesArrayToCartesianArray(coordinates, crsFunction));\n  polylineGraphics.arcType = ArcType.RHUMB;\n}\n\nfunction processLineString(dataSource, geoJson, geometry, crsFunction, options) {\n  createLineString(dataSource, geoJson, crsFunction, geometry.coordinates, options);\n}\n\nfunction processMultiLineString(dataSource, geoJson, geometry, crsFunction, options) {\n  var lineStrings = geometry.coordinates;\n\n  for (var i = 0; i < lineStrings.length; i++) {\n    createLineString(dataSource, geoJson, crsFunction, lineStrings[i], options);\n  }\n}\n\nfunction createPolygon(dataSource, geoJson, crsFunction, coordinates, options) {\n  if (coordinates.length === 0 || coordinates[0].length === 0) {\n    return;\n  }\n\n  var outlineColorProperty = options.strokeMaterialProperty.color;\n  var material = options.fillMaterialProperty;\n  var widthProperty = options.strokeWidthProperty;\n  var properties = geoJson.properties;\n\n  if (defined(properties)) {\n    var width = properties[\"stroke-width\"];\n\n    if (defined(width)) {\n      widthProperty = new ConstantProperty(width);\n    }\n\n    var color;\n    var stroke = properties.stroke;\n\n    if (defined(stroke)) {\n      color = Color.fromCssColorString(stroke);\n    }\n\n    var opacity = properties[\"stroke-opacity\"];\n\n    if (defined(opacity) && opacity !== 1.0) {\n      if (!defined(color)) {\n        color = options.strokeMaterialProperty.color.clone();\n      }\n\n      color.alpha = opacity;\n    }\n\n    if (defined(color)) {\n      outlineColorProperty = new ConstantProperty(color);\n    }\n\n    var fillColor;\n    var fill = properties.fill;\n\n    if (defined(fill)) {\n      fillColor = Color.fromCssColorString(fill);\n      fillColor.alpha = material.color.alpha;\n    }\n\n    opacity = properties[\"fill-opacity\"];\n\n    if (defined(opacity) && opacity !== material.color.alpha) {\n      if (!defined(fillColor)) {\n        fillColor = material.color.clone();\n      }\n\n      fillColor.alpha = opacity;\n    }\n\n    if (defined(fillColor)) {\n      material = new ColorMaterialProperty(fillColor);\n    }\n  }\n\n  var polygon = new PolygonGraphics();\n  polygon.outline = new ConstantProperty(true);\n  polygon.outlineColor = outlineColorProperty;\n  polygon.outlineWidth = widthProperty;\n  polygon.material = material;\n  polygon.arcType = ArcType.RHUMB;\n  var holes = [];\n\n  for (var i = 1, len = coordinates.length; i < len; i++) {\n    holes.push(new PolygonHierarchy(coordinatesArrayToCartesianArray(coordinates[i], crsFunction)));\n  }\n\n  var positions = coordinates[0];\n  polygon.hierarchy = new ConstantProperty(new PolygonHierarchy(coordinatesArrayToCartesianArray(positions, crsFunction), holes));\n\n  if (positions[0].length > 2) {\n    polygon.perPositionHeight = new ConstantProperty(true);\n  } else if (!options.clampToGround) {\n    polygon.height = 0;\n  }\n\n  var entity = createObject(geoJson, dataSource._entityCollection, options.describe);\n  entity.polygon = polygon;\n}\n\nfunction processPolygon(dataSource, geoJson, geometry, crsFunction, options) {\n  createPolygon(dataSource, geoJson, crsFunction, geometry.coordinates, options);\n}\n\nfunction processMultiPolygon(dataSource, geoJson, geometry, crsFunction, options) {\n  var polygons = geometry.coordinates;\n\n  for (var i = 0; i < polygons.length; i++) {\n    createPolygon(dataSource, geoJson, crsFunction, polygons[i], options);\n  }\n}\n\nfunction processTopology(dataSource, geoJson, geometry, crsFunction, options) {\n  for (var property in geometry.objects) {\n    if (geometry.objects.hasOwnProperty(property)) {\n      var feature = topojson.feature(geometry, geometry.objects[property]);\n      var typeHandler = geoJsonObjectTypes[feature.type];\n      typeHandler(dataSource, feature, feature, crsFunction, options);\n    }\n  }\n}\n/**\n * A {@link DataSource} which processes both\n * {@link http://www.geojson.org/|GeoJSON} and {@link https://github.com/mbostock/topojson|TopoJSON} data.\n * {@link https://github.com/mapbox/simplestyle-spec|simplestyle-spec} properties will also be used if they\n * are present.\n *\n * @alias GeoJsonDataSource\n * @constructor\n *\n * @param {String} [name] The name of this data source.  If undefined, a name will be taken from\n *                        the name of the GeoJSON file.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=GeoJSON%20and%20TopoJSON.html|Cesium Sandcastle GeoJSON and TopoJSON Demo}\n * @demo {@link https://sandcastle.cesium.com/index.html?src=GeoJSON%20simplestyle.html|Cesium Sandcastle GeoJSON simplestyle Demo}\n *\n * @example\n * var viewer = new Cesium.Viewer('cesiumContainer');\n * viewer.dataSources.add(Cesium.GeoJsonDataSource.load('../../SampleData/ne_10m_us_states.topojson', {\n *   stroke: Cesium.Color.HOTPINK,\n *   fill: Cesium.Color.PINK,\n *   strokeWidth: 3,\n *   markerSymbol: '?'\n * }));\n */\n\n\nfunction GeoJsonDataSource(name) {\n  this._name = name;\n  this._changed = new Event();\n  this._error = new Event();\n  this._isLoading = false;\n  this._loading = new Event();\n  this._entityCollection = new EntityCollection(this);\n  this._promises = [];\n  this._pinBuilder = new PinBuilder();\n  this._entityCluster = new EntityCluster();\n  this._credit = undefined;\n  this._resourceCredits = [];\n}\n/**\n * Creates a Promise to a new instance loaded with the provided GeoJSON or TopoJSON data.\n *\n * @param {Resource|String|Object} data A url, GeoJSON object, or TopoJSON object to be loaded.\n * @param {Object} [options] An object with the following properties:\n * @param {String} [options.sourceUri] Overrides the url to use for resolving relative links.\n * @param {Number} [options.markerSize=GeoJsonDataSource.markerSize] The default size of the map pin created for each point, in pixels.\n * @param {String} [options.markerSymbol=GeoJsonDataSource.markerSymbol] The default symbol of the map pin created for each point.\n * @param {Color} [options.markerColor=GeoJsonDataSource.markerColor] The default color of the map pin created for each point.\n * @param {Color} [options.stroke=GeoJsonDataSource.stroke] The default color of polylines and polygon outlines.\n * @param {Number} [options.strokeWidth=GeoJsonDataSource.strokeWidth] The default width of polylines and polygon outlines.\n * @param {Color} [options.fill=GeoJsonDataSource.fill] The default color for polygon interiors.\n * @param {Boolean} [options.clampToGround=GeoJsonDataSource.clampToGround] true if we want the geometry features (polygons or linestrings) clamped to the ground.\n * @param {Credit|String} [options.credit] A credit for the data source, which is displayed on the canvas.\n *\n * @returns {Promise.<GeoJsonDataSource>} A promise that will resolve when the data is loaded.\n */\n\n\nGeoJsonDataSource.load = function (data, options) {\n  return new GeoJsonDataSource().load(data, options);\n};\n\nObject.defineProperties(GeoJsonDataSource, {\n  /**\n   * Gets or sets the default size of the map pin created for each point, in pixels.\n   * @memberof GeoJsonDataSource\n   * @type {Number}\n   * @default 48\n   */\n  markerSize: {\n    get: function () {\n      return defaultMarkerSize;\n    },\n    set: function (value) {\n      defaultMarkerSize = value;\n    }\n  },\n\n  /**\n   * Gets or sets the default symbol of the map pin created for each point.\n   * This can be any valid {@link http://mapbox.com/maki/|Maki} identifier, any single character,\n   * or blank if no symbol is to be used.\n   * @memberof GeoJsonDataSource\n   * @type {String}\n   */\n  markerSymbol: {\n    get: function () {\n      return defaultMarkerSymbol;\n    },\n    set: function (value) {\n      defaultMarkerSymbol = value;\n    }\n  },\n\n  /**\n   * Gets or sets the default color of the map pin created for each point.\n   * @memberof GeoJsonDataSource\n   * @type {Color}\n   * @default Color.ROYALBLUE\n   */\n  markerColor: {\n    get: function () {\n      return defaultMarkerColor;\n    },\n    set: function (value) {\n      defaultMarkerColor = value;\n    }\n  },\n\n  /**\n   * Gets or sets the default color of polylines and polygon outlines.\n   * @memberof GeoJsonDataSource\n   * @type {Color}\n   * @default Color.BLACK\n   */\n  stroke: {\n    get: function () {\n      return defaultStroke;\n    },\n    set: function (value) {\n      defaultStroke = value;\n    }\n  },\n\n  /**\n   * Gets or sets the default width of polylines and polygon outlines.\n   * @memberof GeoJsonDataSource\n   * @type {Number}\n   * @default 2.0\n   */\n  strokeWidth: {\n    get: function () {\n      return defaultStrokeWidth;\n    },\n    set: function (value) {\n      defaultStrokeWidth = value;\n    }\n  },\n\n  /**\n   * Gets or sets default color for polygon interiors.\n   * @memberof GeoJsonDataSource\n   * @type {Color}\n   * @default Color.YELLOW\n   */\n  fill: {\n    get: function () {\n      return defaultFill;\n    },\n    set: function (value) {\n      defaultFill = value;\n    }\n  },\n\n  /**\n   * Gets or sets default of whether to clamp to the ground.\n   * @memberof GeoJsonDataSource\n   * @type {Boolean}\n   * @default false\n   */\n  clampToGround: {\n    get: function () {\n      return defaultClampToGround;\n    },\n    set: function (value) {\n      defaultClampToGround = value;\n    }\n  },\n\n  /**\n   * Gets an object that maps the name of a crs to a callback function which takes a GeoJSON coordinate\n   * and transforms it into a WGS84 Earth-fixed Cartesian.  Older versions of GeoJSON which\n   * supported the EPSG type can be added to this list as well, by specifying the complete EPSG name,\n   * for example 'EPSG:4326'.\n   * @memberof GeoJsonDataSource\n   * @type {Object}\n   */\n  crsNames: {\n    get: function () {\n      return crsNames;\n    }\n  },\n\n  /**\n   * Gets an object that maps the href property of a crs link to a callback function\n   * which takes the crs properties object and returns a Promise that resolves\n   * to a function that takes a GeoJSON coordinate and transforms it into a WGS84 Earth-fixed Cartesian.\n   * Items in this object take precedence over those defined in <code>crsLinkHrefs</code>, assuming\n   * the link has a type specified.\n   * @memberof GeoJsonDataSource\n   * @type {Object}\n   */\n  crsLinkHrefs: {\n    get: function () {\n      return crsLinkHrefs;\n    }\n  },\n\n  /**\n   * Gets an object that maps the type property of a crs link to a callback function\n   * which takes the crs properties object and returns a Promise that resolves\n   * to a function that takes a GeoJSON coordinate and transforms it into a WGS84 Earth-fixed Cartesian.\n   * Items in <code>crsLinkHrefs</code> take precedence over this object.\n   * @memberof GeoJsonDataSource\n   * @type {Object}\n   */\n  crsLinkTypes: {\n    get: function () {\n      return crsLinkTypes;\n    }\n  }\n});\nObject.defineProperties(GeoJsonDataSource.prototype, {\n  /**\n   * Gets or sets a human-readable name for this instance.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {String}\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n    set: function (value) {\n      if (this._name !== value) {\n        this._name = value;\n\n        this._changed.raiseEvent(this);\n      }\n    }\n  },\n\n  /**\n   * This DataSource only defines static data, therefore this property is always undefined.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {DataSourceClock}\n   */\n  clock: {\n    value: undefined,\n    writable: false\n  },\n\n  /**\n   * Gets the collection of {@link Entity} instances.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {EntityCollection}\n   */\n  entities: {\n    get: function () {\n      return this._entityCollection;\n    }\n  },\n\n  /**\n   * Gets a value indicating if the data source is currently loading data.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Boolean}\n   */\n  isLoading: {\n    get: function () {\n      return this._isLoading;\n    }\n  },\n\n  /**\n   * Gets an event that will be raised when the underlying data changes.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Event}\n   */\n  changedEvent: {\n    get: function () {\n      return this._changed;\n    }\n  },\n\n  /**\n   * Gets an event that will be raised if an error is encountered during processing.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: function () {\n      return this._error;\n    }\n  },\n\n  /**\n   * Gets an event that will be raised when the data source either starts or stops loading.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Event}\n   */\n  loadingEvent: {\n    get: function () {\n      return this._loading;\n    }\n  },\n\n  /**\n   * Gets whether or not this data source should be displayed.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function () {\n      return this._entityCollection.show;\n    },\n    set: function (value) {\n      this._entityCollection.show = value;\n    }\n  },\n\n  /**\n   * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.\n   *\n   * @memberof GeoJsonDataSource.prototype\n   * @type {EntityCluster}\n   */\n  clustering: {\n    get: function () {\n      return this._entityCluster;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value must be defined.\");\n      } //>>includeEnd('debug');\n\n\n      this._entityCluster = value;\n    }\n  },\n\n  /**\n   * Gets the credit that will be displayed for the data source\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Credit}\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    }\n  }\n});\n/**\n * Asynchronously loads the provided GeoJSON or TopoJSON data, replacing any existing data.\n *\n * @param {Resource|String|Object} data A url, GeoJSON object, or TopoJSON object to be loaded.\n * @param {Object} [options] An object with the following properties:\n * @param {String} [options.sourceUri] Overrides the url to use for resolving relative links.\n * @param {GeoJsonDataSource~describe} [options.describe=GeoJsonDataSource.defaultDescribeProperty] A function which returns a Property object (or just a string),\n *                                                                                which converts the properties into an html description.\n * @param {Number} [options.markerSize=GeoJsonDataSource.markerSize] The default size of the map pin created for each point, in pixels.\n * @param {String} [options.markerSymbol=GeoJsonDataSource.markerSymbol] The default symbol of the map pin created for each point.\n * @param {Color} [options.markerColor=GeoJsonDataSource.markerColor] The default color of the map pin created for each point.\n * @param {Color} [options.stroke=GeoJsonDataSource.stroke] The default color of polylines and polygon outlines.\n * @param {Number} [options.strokeWidth=GeoJsonDataSource.strokeWidth] The default width of polylines and polygon outlines.\n * @param {Color} [options.fill=GeoJsonDataSource.fill] The default color for polygon interiors.\n * @param {Boolean} [options.clampToGround=GeoJsonDataSource.clampToGround] true if we want the features clamped to the ground.\n * @param {Credit|String} [options.credit] A credit for the data source, which is displayed on the canvas.\n *\n * @returns {Promise.<GeoJsonDataSource>} a promise that will resolve when the GeoJSON is loaded.\n */\n\nGeoJsonDataSource.prototype.load = function (data, options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(data)) {\n    throw new DeveloperError(\"data is required.\");\n  } //>>includeEnd('debug');\n\n\n  DataSource.setLoading(this, true);\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT); // User specified credit\n\n  var credit = options.credit;\n\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n\n  this._credit = credit;\n  var promise = data;\n  var sourceUri = options.sourceUri;\n\n  if (typeof data === \"string\" || data instanceof Resource) {\n    data = Resource.createIfNeeded(data);\n    promise = data.fetchJson();\n    sourceUri = defaultValue(sourceUri, data.getUrlComponent()); // Add resource credits to our list of credits to display\n\n    var resourceCredits = this._resourceCredits;\n    var credits = data.credits;\n\n    if (defined(credits)) {\n      var length = credits.length;\n\n      for (var i = 0; i < length; i++) {\n        resourceCredits.push(credits[i]);\n      }\n    }\n  }\n\n  options = {\n    describe: defaultValue(options.describe, defaultDescribeProperty),\n    markerSize: defaultValue(options.markerSize, defaultMarkerSize),\n    markerSymbol: defaultValue(options.markerSymbol, defaultMarkerSymbol),\n    markerColor: defaultValue(options.markerColor, defaultMarkerColor),\n    strokeWidthProperty: new ConstantProperty(defaultValue(options.strokeWidth, defaultStrokeWidth)),\n    strokeMaterialProperty: new ColorMaterialProperty(defaultValue(options.stroke, defaultStroke)),\n    fillMaterialProperty: new ColorMaterialProperty(defaultValue(options.fill, defaultFill)),\n    clampToGround: defaultValue(options.clampToGround, defaultClampToGround)\n  };\n  var that = this;\n  return when(promise, function (geoJson) {\n    return load(that, geoJson, options, sourceUri);\n  }).otherwise(function (error) {\n    DataSource.setLoading(that, false);\n\n    that._error.raiseEvent(that, error);\n\n    console.log(error);\n    return when.reject(error);\n  });\n};\n\nfunction load(that, geoJson, options, sourceUri) {\n  var name;\n\n  if (defined(sourceUri)) {\n    name = getFilenameFromUri(sourceUri);\n  }\n\n  if (defined(name) && that._name !== name) {\n    that._name = name;\n\n    that._changed.raiseEvent(that);\n  }\n\n  var typeHandler = geoJsonObjectTypes[geoJson.type];\n\n  if (!defined(typeHandler)) {\n    throw new RuntimeError(\"Unsupported GeoJSON object type: \" + geoJson.type);\n  } //Check for a Coordinate Reference System.\n\n\n  var crs = geoJson.crs;\n  var crsFunction = crs !== null ? defaultCrsFunction : null;\n\n  if (defined(crs)) {\n    if (!defined(crs.properties)) {\n      throw new RuntimeError(\"crs.properties is undefined.\");\n    }\n\n    var properties = crs.properties;\n\n    if (crs.type === \"name\") {\n      crsFunction = crsNames[properties.name];\n\n      if (!defined(crsFunction)) {\n        throw new RuntimeError(\"Unknown crs name: \" + properties.name);\n      }\n    } else if (crs.type === \"link\") {\n      var handler = crsLinkHrefs[properties.href];\n\n      if (!defined(handler)) {\n        handler = crsLinkTypes[properties.type];\n      }\n\n      if (!defined(handler)) {\n        throw new RuntimeError(\"Unable to resolve crs link: \" + JSON.stringify(properties));\n      }\n\n      crsFunction = handler(properties);\n    } else if (crs.type === \"EPSG\") {\n      crsFunction = crsNames[\"EPSG:\" + properties.code];\n\n      if (!defined(crsFunction)) {\n        throw new RuntimeError(\"Unknown crs EPSG code: \" + properties.code);\n      }\n    } else {\n      throw new RuntimeError(\"Unknown crs type: \" + crs.type);\n    }\n  }\n\n  return when(crsFunction, function (crsFunction) {\n    that._entityCollection.removeAll(); // null is a valid value for the crs, but means the entire load process becomes a no-op\n    // because we can't assume anything about the coordinates.\n\n\n    if (crsFunction !== null) {\n      typeHandler(that, geoJson, geoJson, crsFunction, options);\n    }\n\n    return when.all(that._promises, function () {\n      that._promises.length = 0;\n      DataSource.setLoading(that, false);\n      return that;\n    });\n  });\n}\n/**\n * This callback is displayed as part of the GeoJsonDataSource class.\n * @callback GeoJsonDataSource~describe\n * @param {Object} properties The properties of the feature.\n * @param {String} nameProperty The property key that Cesium estimates to have the name of the feature.\n */\n\n\nexport default GeoJsonDataSource;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/GeoJsonDataSource.js"],"names":["ArcType","Cartesian3","Color","createGuid","Credit","defaultValue","defined","DeveloperError","Event","getFilenameFromUri","PinBuilder","PolygonHierarchy","Resource","RuntimeError","HeightReference","VerticalOrigin","topojson","when","BillboardGraphics","CallbackProperty","ColorMaterialProperty","ConstantPositionProperty","ConstantProperty","DataSource","EntityCluster","EntityCollection","PolygonGraphics","PolylineGraphics","defaultCrsFunction","coordinates","fromDegrees","crsNames","crsLinkHrefs","crsLinkTypes","defaultMarkerSize","defaultMarkerSymbol","defaultMarkerColor","ROYALBLUE","defaultStroke","YELLOW","defaultStrokeWidth","defaultFill","fromBytes","defaultClampToGround","sizes","small","medium","large","simpleStyleIdentifiers","defaultDescribe","properties","nameProperty","html","key","hasOwnProperty","indexOf","value","length","createDescriptionCallback","describe","description","time","result","defaultDescribeProperty","createObject","geoJson","entityCollection","id","type","i","finalId","getById","entity","getOrCreateEntity","name","title","namePropertyPrecedence","Number","MAX_VALUE","lowerKey","toLowerCase","test","coordinatesArrayToCartesianArray","crsFunction","positions","Array","geoJsonObjectTypes","Feature","processFeature","FeatureCollection","processFeatureCollection","GeometryCollection","processGeometryCollection","LineString","processLineString","MultiLineString","processMultiLineString","MultiPoint","processMultiPoint","MultiPolygon","processMultiPolygon","Point","processPoint","Polygon","processPolygon","Topology","processTopology","geometryTypes","dataSource","feature","notUsed","options","geometry","_entityCollection","geometryType","geometryHandler","featureCollection","features","len","undefined","geometryCollection","geometries","createPoint","symbol","markerSymbol","color","markerColor","size","markerSize","cssColor","fromCssColorString","canvasOrPromise","_pinBuilder","fromText","toUpperCase","fromMakiIconId","fromColor","billboard","verticalOrigin","BOTTOM","clampToGround","heightReference","CLAMP_TO_GROUND","position","promise","then","image","otherwise","_promises","push","createLineString","material","strokeMaterialProperty","widthProperty","strokeWidthProperty","width","stroke","opacity","clone","alpha","polylineGraphics","polyline","arcType","RHUMB","lineStrings","createPolygon","outlineColorProperty","fillMaterialProperty","fillColor","fill","polygon","outline","outlineColor","outlineWidth","holes","hierarchy","perPositionHeight","height","polygons","property","objects","typeHandler","GeoJsonDataSource","_name","_changed","_error","_isLoading","_loading","_entityCluster","_credit","_resourceCredits","load","data","Object","defineProperties","get","set","strokeWidth","prototype","raiseEvent","clock","writable","entities","isLoading","changedEvent","errorEvent","loadingEvent","show","clustering","credit","setLoading","EMPTY_OBJECT","sourceUri","createIfNeeded","fetchJson","getUrlComponent","resourceCredits","credits","that","error","console","log","reject","crs","handler","href","JSON","stringify","code","removeAll","all"],"mappings":"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","sourcesContent":["import ArcType from \"../Core/ArcType.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport getFilenameFromUri from \"../Core/getFilenameFromUri.js\";\nimport PinBuilder from \"../Core/PinBuilder.js\";\nimport PolygonHierarchy from \"../Core/PolygonHierarchy.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport VerticalOrigin from \"../Scene/VerticalOrigin.js\";\nimport topojson from \"../ThirdParty/topojson.js\";\nimport when from \"../ThirdParty/when.js\";\nimport BillboardGraphics from \"./BillboardGraphics.js\";\nimport CallbackProperty from \"./CallbackProperty.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport ConstantPositionProperty from \"./ConstantPositionProperty.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport DataSource from \"./DataSource.js\";\nimport EntityCluster from \"./EntityCluster.js\";\nimport EntityCollection from \"./EntityCollection.js\";\nimport PolygonGraphics from \"./PolygonGraphics.js\";\nimport PolylineGraphics from \"./PolylineGraphics.js\";\n\nfunction defaultCrsFunction(coordinates) {\n  return Cartesian3.fromDegrees(coordinates[0], coordinates[1], coordinates[2]);\n}\n\nvar crsNames = {\n  \"urn:ogc:def:crs:OGC:1.3:CRS84\": defaultCrsFunction,\n  \"EPSG:4326\": defaultCrsFunction,\n  \"urn:ogc:def:crs:EPSG::4326\": defaultCrsFunction,\n};\n\nvar crsLinkHrefs = {};\nvar crsLinkTypes = {};\nvar defaultMarkerSize = 48;\nvar defaultMarkerSymbol;\nvar defaultMarkerColor = Color.ROYALBLUE;\nvar defaultStroke = Color.YELLOW;\nvar defaultStrokeWidth = 2;\nvar defaultFill = Color.fromBytes(255, 255, 0, 100);\nvar defaultClampToGround = false;\n\nvar sizes = {\n  small: 24,\n  medium: 48,\n  large: 64,\n};\n\nvar simpleStyleIdentifiers = [\n  \"title\",\n  \"description\", //\n  \"marker-size\",\n  \"marker-symbol\",\n  \"marker-color\",\n  \"stroke\", //\n  \"stroke-opacity\",\n  \"stroke-width\",\n  \"fill\",\n  \"fill-opacity\",\n];\n\nfunction defaultDescribe(properties, nameProperty) {\n  var html = \"\";\n  for (var key in properties) {\n    if (properties.hasOwnProperty(key)) {\n      if (key === nameProperty || simpleStyleIdentifiers.indexOf(key) !== -1) {\n        continue;\n      }\n      var value = properties[key];\n      if (defined(value)) {\n        if (typeof value === \"object\") {\n          html +=\n            \"<tr><th>\" +\n            key +\n            \"</th><td>\" +\n            defaultDescribe(value) +\n            \"</td></tr>\";\n        } else {\n          html += \"<tr><th>\" + key + \"</th><td>\" + value + \"</td></tr>\";\n        }\n      }\n    }\n  }\n\n  if (html.length > 0) {\n    html =\n      '<table class=\"cesium-infoBox-defaultTable\"><tbody>' +\n      html +\n      \"</tbody></table>\";\n  }\n\n  return html;\n}\n\nfunction createDescriptionCallback(describe, properties, nameProperty) {\n  var description;\n  return function (time, result) {\n    if (!defined(description)) {\n      description = describe(properties, nameProperty);\n    }\n    return description;\n  };\n}\n\nfunction defaultDescribeProperty(properties, nameProperty) {\n  return new CallbackProperty(\n    createDescriptionCallback(defaultDescribe, properties, nameProperty),\n    true\n  );\n}\n\n//GeoJSON specifies only the Feature object has a usable id property\n//But since \"multi\" geometries create multiple entity,\n//we can't use it for them either.\nfunction createObject(geoJson, entityCollection, describe) {\n  var id = geoJson.id;\n  if (!defined(id) || geoJson.type !== \"Feature\") {\n    id = createGuid();\n  } else {\n    var i = 2;\n    var finalId = id;\n    while (defined(entityCollection.getById(finalId))) {\n      finalId = id + \"_\" + i;\n      i++;\n    }\n    id = finalId;\n  }\n\n  var entity = entityCollection.getOrCreateEntity(id);\n  var properties = geoJson.properties;\n  if (defined(properties)) {\n    entity.properties = properties;\n\n    var nameProperty;\n\n    //Check for the simplestyle specified name first.\n    var name = properties.title;\n    if (defined(name)) {\n      entity.name = name;\n      nameProperty = \"title\";\n    } else {\n      //Else, find the name by selecting an appropriate property.\n      //The name will be obtained based on this order:\n      //1) The first case-insensitive property with the name 'title',\n      //2) The first case-insensitive property with the name 'name',\n      //3) The first property containing the word 'title'.\n      //4) The first property containing the word 'name',\n      var namePropertyPrecedence = Number.MAX_VALUE;\n      for (var key in properties) {\n        if (properties.hasOwnProperty(key) && properties[key]) {\n          var lowerKey = key.toLowerCase();\n\n          if (namePropertyPrecedence > 1 && lowerKey === \"title\") {\n            namePropertyPrecedence = 1;\n            nameProperty = key;\n            break;\n          } else if (namePropertyPrecedence > 2 && lowerKey === \"name\") {\n            namePropertyPrecedence = 2;\n            nameProperty = key;\n          } else if (namePropertyPrecedence > 3 && /title/i.test(key)) {\n            namePropertyPrecedence = 3;\n            nameProperty = key;\n          } else if (namePropertyPrecedence > 4 && /name/i.test(key)) {\n            namePropertyPrecedence = 4;\n            nameProperty = key;\n          }\n        }\n      }\n      if (defined(nameProperty)) {\n        entity.name = properties[nameProperty];\n      }\n    }\n\n    var description = properties.description;\n    if (description !== null) {\n      entity.description = !defined(description)\n        ? describe(properties, nameProperty)\n        : new ConstantProperty(description);\n    }\n  }\n  return entity;\n}\n\nfunction coordinatesArrayToCartesianArray(coordinates, crsFunction) {\n  var positions = new Array(coordinates.length);\n  for (var i = 0; i < coordinates.length; i++) {\n    positions[i] = crsFunction(coordinates[i]);\n  }\n  return positions;\n}\n\nvar geoJsonObjectTypes = {\n  Feature: processFeature,\n  FeatureCollection: processFeatureCollection,\n  GeometryCollection: processGeometryCollection,\n  LineString: processLineString,\n  MultiLineString: processMultiLineString,\n  MultiPoint: processMultiPoint,\n  MultiPolygon: processMultiPolygon,\n  Point: processPoint,\n  Polygon: processPolygon,\n  Topology: processTopology,\n};\n\nvar geometryTypes = {\n  GeometryCollection: processGeometryCollection,\n  LineString: processLineString,\n  MultiLineString: processMultiLineString,\n  MultiPoint: processMultiPoint,\n  MultiPolygon: processMultiPolygon,\n  Point: processPoint,\n  Polygon: processPolygon,\n  Topology: processTopology,\n};\n\n// GeoJSON processing functions\nfunction processFeature(dataSource, feature, notUsed, crsFunction, options) {\n  if (feature.geometry === null) {\n    //Null geometry is allowed, so just create an empty entity instance for it.\n    createObject(feature, dataSource._entityCollection, options.describe);\n    return;\n  }\n\n  if (!defined(feature.geometry)) {\n    throw new RuntimeError(\"feature.geometry is required.\");\n  }\n\n  var geometryType = feature.geometry.type;\n  var geometryHandler = geometryTypes[geometryType];\n  if (!defined(geometryHandler)) {\n    throw new RuntimeError(\"Unknown geometry type: \" + geometryType);\n  }\n  geometryHandler(dataSource, feature, feature.geometry, crsFunction, options);\n}\n\nfunction processFeatureCollection(\n  dataSource,\n  featureCollection,\n  notUsed,\n  crsFunction,\n  options\n) {\n  var features = featureCollection.features;\n  for (var i = 0, len = features.length; i < len; i++) {\n    processFeature(dataSource, features[i], undefined, crsFunction, options);\n  }\n}\n\nfunction processGeometryCollection(\n  dataSource,\n  geoJson,\n  geometryCollection,\n  crsFunction,\n  options\n) {\n  var geometries = geometryCollection.geometries;\n  for (var i = 0, len = geometries.length; i < len; i++) {\n    var geometry = geometries[i];\n    var geometryType = geometry.type;\n    var geometryHandler = geometryTypes[geometryType];\n    if (!defined(geometryHandler)) {\n      throw new RuntimeError(\"Unknown geometry type: \" + geometryType);\n    }\n    geometryHandler(dataSource, geoJson, geometry, crsFunction, options);\n  }\n}\n\nfunction createPoint(dataSource, geoJson, crsFunction, coordinates, options) {\n  var symbol = options.markerSymbol;\n  var color = options.markerColor;\n  var size = options.markerSize;\n\n  var properties = geoJson.properties;\n  if (defined(properties)) {\n    var cssColor = properties[\"marker-color\"];\n    if (defined(cssColor)) {\n      color = Color.fromCssColorString(cssColor);\n    }\n\n    size = defaultValue(sizes[properties[\"marker-size\"]], size);\n    var markerSymbol = properties[\"marker-symbol\"];\n    if (defined(markerSymbol)) {\n      symbol = markerSymbol;\n    }\n  }\n\n  var canvasOrPromise;\n  if (defined(symbol)) {\n    if (symbol.length === 1) {\n      canvasOrPromise = dataSource._pinBuilder.fromText(\n        symbol.toUpperCase(),\n        color,\n        size\n      );\n    } else {\n      canvasOrPromise = dataSource._pinBuilder.fromMakiIconId(\n        symbol,\n        color,\n        size\n      );\n    }\n  } else {\n    canvasOrPromise = dataSource._pinBuilder.fromColor(color, size);\n  }\n\n  var billboard = new BillboardGraphics();\n  billboard.verticalOrigin = new ConstantProperty(VerticalOrigin.BOTTOM);\n\n  // Clamp to ground if there isn't a height specified\n  if (coordinates.length === 2 && options.clampToGround) {\n    billboard.heightReference = HeightReference.CLAMP_TO_GROUND;\n  }\n\n  var entity = createObject(\n    geoJson,\n    dataSource._entityCollection,\n    options.describe\n  );\n  entity.billboard = billboard;\n  entity.position = new ConstantPositionProperty(crsFunction(coordinates));\n\n  var promise = when(canvasOrPromise)\n    .then(function (image) {\n      billboard.image = new ConstantProperty(image);\n    })\n    .otherwise(function () {\n      billboard.image = new ConstantProperty(\n        dataSource._pinBuilder.fromColor(color, size)\n      );\n    });\n\n  dataSource._promises.push(promise);\n}\n\nfunction processPoint(dataSource, geoJson, geometry, crsFunction, options) {\n  createPoint(dataSource, geoJson, crsFunction, geometry.coordinates, options);\n}\n\nfunction processMultiPoint(\n  dataSource,\n  geoJson,\n  geometry,\n  crsFunction,\n  options\n) {\n  var coordinates = geometry.coordinates;\n  for (var i = 0; i < coordinates.length; i++) {\n    createPoint(dataSource, geoJson, crsFunction, coordinates[i], options);\n  }\n}\n\nfunction createLineString(\n  dataSource,\n  geoJson,\n  crsFunction,\n  coordinates,\n  options\n) {\n  var material = options.strokeMaterialProperty;\n  var widthProperty = options.strokeWidthProperty;\n\n  var properties = geoJson.properties;\n  if (defined(properties)) {\n    var width = properties[\"stroke-width\"];\n    if (defined(width)) {\n      widthProperty = new ConstantProperty(width);\n    }\n\n    var color;\n    var stroke = properties.stroke;\n    if (defined(stroke)) {\n      color = Color.fromCssColorString(stroke);\n    }\n    var opacity = properties[\"stroke-opacity\"];\n    if (defined(opacity) && opacity !== 1.0) {\n      if (!defined(color)) {\n        color = material.color.clone();\n      }\n      color.alpha = opacity;\n    }\n    if (defined(color)) {\n      material = new ColorMaterialProperty(color);\n    }\n  }\n\n  var entity = createObject(\n    geoJson,\n    dataSource._entityCollection,\n    options.describe\n  );\n  var polylineGraphics = new PolylineGraphics();\n  entity.polyline = polylineGraphics;\n\n  polylineGraphics.clampToGround = options.clampToGround;\n  polylineGraphics.material = material;\n  polylineGraphics.width = widthProperty;\n  polylineGraphics.positions = new ConstantProperty(\n    coordinatesArrayToCartesianArray(coordinates, crsFunction)\n  );\n  polylineGraphics.arcType = ArcType.RHUMB;\n}\n\nfunction processLineString(\n  dataSource,\n  geoJson,\n  geometry,\n  crsFunction,\n  options\n) {\n  createLineString(\n    dataSource,\n    geoJson,\n    crsFunction,\n    geometry.coordinates,\n    options\n  );\n}\n\nfunction processMultiLineString(\n  dataSource,\n  geoJson,\n  geometry,\n  crsFunction,\n  options\n) {\n  var lineStrings = geometry.coordinates;\n  for (var i = 0; i < lineStrings.length; i++) {\n    createLineString(dataSource, geoJson, crsFunction, lineStrings[i], options);\n  }\n}\n\nfunction createPolygon(dataSource, geoJson, crsFunction, coordinates, options) {\n  if (coordinates.length === 0 || coordinates[0].length === 0) {\n    return;\n  }\n\n  var outlineColorProperty = options.strokeMaterialProperty.color;\n  var material = options.fillMaterialProperty;\n  var widthProperty = options.strokeWidthProperty;\n\n  var properties = geoJson.properties;\n  if (defined(properties)) {\n    var width = properties[\"stroke-width\"];\n    if (defined(width)) {\n      widthProperty = new ConstantProperty(width);\n    }\n\n    var color;\n    var stroke = properties.stroke;\n    if (defined(stroke)) {\n      color = Color.fromCssColorString(stroke);\n    }\n    var opacity = properties[\"stroke-opacity\"];\n    if (defined(opacity) && opacity !== 1.0) {\n      if (!defined(color)) {\n        color = options.strokeMaterialProperty.color.clone();\n      }\n      color.alpha = opacity;\n    }\n\n    if (defined(color)) {\n      outlineColorProperty = new ConstantProperty(color);\n    }\n\n    var fillColor;\n    var fill = properties.fill;\n    if (defined(fill)) {\n      fillColor = Color.fromCssColorString(fill);\n      fillColor.alpha = material.color.alpha;\n    }\n    opacity = properties[\"fill-opacity\"];\n    if (defined(opacity) && opacity !== material.color.alpha) {\n      if (!defined(fillColor)) {\n        fillColor = material.color.clone();\n      }\n      fillColor.alpha = opacity;\n    }\n    if (defined(fillColor)) {\n      material = new ColorMaterialProperty(fillColor);\n    }\n  }\n\n  var polygon = new PolygonGraphics();\n  polygon.outline = new ConstantProperty(true);\n  polygon.outlineColor = outlineColorProperty;\n  polygon.outlineWidth = widthProperty;\n  polygon.material = material;\n  polygon.arcType = ArcType.RHUMB;\n\n  var holes = [];\n  for (var i = 1, len = coordinates.length; i < len; i++) {\n    holes.push(\n      new PolygonHierarchy(\n        coordinatesArrayToCartesianArray(coordinates[i], crsFunction)\n      )\n    );\n  }\n\n  var positions = coordinates[0];\n  polygon.hierarchy = new ConstantProperty(\n    new PolygonHierarchy(\n      coordinatesArrayToCartesianArray(positions, crsFunction),\n      holes\n    )\n  );\n  if (positions[0].length > 2) {\n    polygon.perPositionHeight = new ConstantProperty(true);\n  } else if (!options.clampToGround) {\n    polygon.height = 0;\n  }\n\n  var entity = createObject(\n    geoJson,\n    dataSource._entityCollection,\n    options.describe\n  );\n  entity.polygon = polygon;\n}\n\nfunction processPolygon(dataSource, geoJson, geometry, crsFunction, options) {\n  createPolygon(\n    dataSource,\n    geoJson,\n    crsFunction,\n    geometry.coordinates,\n    options\n  );\n}\n\nfunction processMultiPolygon(\n  dataSource,\n  geoJson,\n  geometry,\n  crsFunction,\n  options\n) {\n  var polygons = geometry.coordinates;\n  for (var i = 0; i < polygons.length; i++) {\n    createPolygon(dataSource, geoJson, crsFunction, polygons[i], options);\n  }\n}\n\nfunction processTopology(dataSource, geoJson, geometry, crsFunction, options) {\n  for (var property in geometry.objects) {\n    if (geometry.objects.hasOwnProperty(property)) {\n      var feature = topojson.feature(geometry, geometry.objects[property]);\n      var typeHandler = geoJsonObjectTypes[feature.type];\n      typeHandler(dataSource, feature, feature, crsFunction, options);\n    }\n  }\n}\n\n/**\n * A {@link DataSource} which processes both\n * {@link http://www.geojson.org/|GeoJSON} and {@link https://github.com/mbostock/topojson|TopoJSON} data.\n * {@link https://github.com/mapbox/simplestyle-spec|simplestyle-spec} properties will also be used if they\n * are present.\n *\n * @alias GeoJsonDataSource\n * @constructor\n *\n * @param {String} [name] The name of this data source.  If undefined, a name will be taken from\n *                        the name of the GeoJSON file.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=GeoJSON%20and%20TopoJSON.html|Cesium Sandcastle GeoJSON and TopoJSON Demo}\n * @demo {@link https://sandcastle.cesium.com/index.html?src=GeoJSON%20simplestyle.html|Cesium Sandcastle GeoJSON simplestyle Demo}\n *\n * @example\n * var viewer = new Cesium.Viewer('cesiumContainer');\n * viewer.dataSources.add(Cesium.GeoJsonDataSource.load('../../SampleData/ne_10m_us_states.topojson', {\n *   stroke: Cesium.Color.HOTPINK,\n *   fill: Cesium.Color.PINK,\n *   strokeWidth: 3,\n *   markerSymbol: '?'\n * }));\n */\nfunction GeoJsonDataSource(name) {\n  this._name = name;\n  this._changed = new Event();\n  this._error = new Event();\n  this._isLoading = false;\n  this._loading = new Event();\n  this._entityCollection = new EntityCollection(this);\n  this._promises = [];\n  this._pinBuilder = new PinBuilder();\n  this._entityCluster = new EntityCluster();\n  this._credit = undefined;\n  this._resourceCredits = [];\n}\n\n/**\n * Creates a Promise to a new instance loaded with the provided GeoJSON or TopoJSON data.\n *\n * @param {Resource|String|Object} data A url, GeoJSON object, or TopoJSON object to be loaded.\n * @param {Object} [options] An object with the following properties:\n * @param {String} [options.sourceUri] Overrides the url to use for resolving relative links.\n * @param {Number} [options.markerSize=GeoJsonDataSource.markerSize] The default size of the map pin created for each point, in pixels.\n * @param {String} [options.markerSymbol=GeoJsonDataSource.markerSymbol] The default symbol of the map pin created for each point.\n * @param {Color} [options.markerColor=GeoJsonDataSource.markerColor] The default color of the map pin created for each point.\n * @param {Color} [options.stroke=GeoJsonDataSource.stroke] The default color of polylines and polygon outlines.\n * @param {Number} [options.strokeWidth=GeoJsonDataSource.strokeWidth] The default width of polylines and polygon outlines.\n * @param {Color} [options.fill=GeoJsonDataSource.fill] The default color for polygon interiors.\n * @param {Boolean} [options.clampToGround=GeoJsonDataSource.clampToGround] true if we want the geometry features (polygons or linestrings) clamped to the ground.\n * @param {Credit|String} [options.credit] A credit for the data source, which is displayed on the canvas.\n *\n * @returns {Promise.<GeoJsonDataSource>} A promise that will resolve when the data is loaded.\n */\nGeoJsonDataSource.load = function (data, options) {\n  return new GeoJsonDataSource().load(data, options);\n};\n\nObject.defineProperties(GeoJsonDataSource, {\n  /**\n   * Gets or sets the default size of the map pin created for each point, in pixels.\n   * @memberof GeoJsonDataSource\n   * @type {Number}\n   * @default 48\n   */\n  markerSize: {\n    get: function () {\n      return defaultMarkerSize;\n    },\n    set: function (value) {\n      defaultMarkerSize = value;\n    },\n  },\n  /**\n   * Gets or sets the default symbol of the map pin created for each point.\n   * This can be any valid {@link http://mapbox.com/maki/|Maki} identifier, any single character,\n   * or blank if no symbol is to be used.\n   * @memberof GeoJsonDataSource\n   * @type {String}\n   */\n  markerSymbol: {\n    get: function () {\n      return defaultMarkerSymbol;\n    },\n    set: function (value) {\n      defaultMarkerSymbol = value;\n    },\n  },\n  /**\n   * Gets or sets the default color of the map pin created for each point.\n   * @memberof GeoJsonDataSource\n   * @type {Color}\n   * @default Color.ROYALBLUE\n   */\n  markerColor: {\n    get: function () {\n      return defaultMarkerColor;\n    },\n    set: function (value) {\n      defaultMarkerColor = value;\n    },\n  },\n  /**\n   * Gets or sets the default color of polylines and polygon outlines.\n   * @memberof GeoJsonDataSource\n   * @type {Color}\n   * @default Color.BLACK\n   */\n  stroke: {\n    get: function () {\n      return defaultStroke;\n    },\n    set: function (value) {\n      defaultStroke = value;\n    },\n  },\n  /**\n   * Gets or sets the default width of polylines and polygon outlines.\n   * @memberof GeoJsonDataSource\n   * @type {Number}\n   * @default 2.0\n   */\n  strokeWidth: {\n    get: function () {\n      return defaultStrokeWidth;\n    },\n    set: function (value) {\n      defaultStrokeWidth = value;\n    },\n  },\n  /**\n   * Gets or sets default color for polygon interiors.\n   * @memberof GeoJsonDataSource\n   * @type {Color}\n   * @default Color.YELLOW\n   */\n  fill: {\n    get: function () {\n      return defaultFill;\n    },\n    set: function (value) {\n      defaultFill = value;\n    },\n  },\n  /**\n   * Gets or sets default of whether to clamp to the ground.\n   * @memberof GeoJsonDataSource\n   * @type {Boolean}\n   * @default false\n   */\n  clampToGround: {\n    get: function () {\n      return defaultClampToGround;\n    },\n    set: function (value) {\n      defaultClampToGround = value;\n    },\n  },\n\n  /**\n   * Gets an object that maps the name of a crs to a callback function which takes a GeoJSON coordinate\n   * and transforms it into a WGS84 Earth-fixed Cartesian.  Older versions of GeoJSON which\n   * supported the EPSG type can be added to this list as well, by specifying the complete EPSG name,\n   * for example 'EPSG:4326'.\n   * @memberof GeoJsonDataSource\n   * @type {Object}\n   */\n  crsNames: {\n    get: function () {\n      return crsNames;\n    },\n  },\n\n  /**\n   * Gets an object that maps the href property of a crs link to a callback function\n   * which takes the crs properties object and returns a Promise that resolves\n   * to a function that takes a GeoJSON coordinate and transforms it into a WGS84 Earth-fixed Cartesian.\n   * Items in this object take precedence over those defined in <code>crsLinkHrefs</code>, assuming\n   * the link has a type specified.\n   * @memberof GeoJsonDataSource\n   * @type {Object}\n   */\n  crsLinkHrefs: {\n    get: function () {\n      return crsLinkHrefs;\n    },\n  },\n\n  /**\n   * Gets an object that maps the type property of a crs link to a callback function\n   * which takes the crs properties object and returns a Promise that resolves\n   * to a function that takes a GeoJSON coordinate and transforms it into a WGS84 Earth-fixed Cartesian.\n   * Items in <code>crsLinkHrefs</code> take precedence over this object.\n   * @memberof GeoJsonDataSource\n   * @type {Object}\n   */\n  crsLinkTypes: {\n    get: function () {\n      return crsLinkTypes;\n    },\n  },\n});\n\nObject.defineProperties(GeoJsonDataSource.prototype, {\n  /**\n   * Gets or sets a human-readable name for this instance.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {String}\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n    set: function (value) {\n      if (this._name !== value) {\n        this._name = value;\n        this._changed.raiseEvent(this);\n      }\n    },\n  },\n  /**\n   * This DataSource only defines static data, therefore this property is always undefined.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {DataSourceClock}\n   */\n  clock: {\n    value: undefined,\n    writable: false,\n  },\n  /**\n   * Gets the collection of {@link Entity} instances.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {EntityCollection}\n   */\n  entities: {\n    get: function () {\n      return this._entityCollection;\n    },\n  },\n  /**\n   * Gets a value indicating if the data source is currently loading data.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Boolean}\n   */\n  isLoading: {\n    get: function () {\n      return this._isLoading;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the underlying data changes.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Event}\n   */\n  changedEvent: {\n    get: function () {\n      return this._changed;\n    },\n  },\n  /**\n   * Gets an event that will be raised if an error is encountered during processing.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: function () {\n      return this._error;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the data source either starts or stops loading.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Event}\n   */\n  loadingEvent: {\n    get: function () {\n      return this._loading;\n    },\n  },\n  /**\n   * Gets whether or not this data source should be displayed.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function () {\n      return this._entityCollection.show;\n    },\n    set: function (value) {\n      this._entityCollection.show = value;\n    },\n  },\n\n  /**\n   * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.\n   *\n   * @memberof GeoJsonDataSource.prototype\n   * @type {EntityCluster}\n   */\n  clustering: {\n    get: function () {\n      return this._entityCluster;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value must be defined.\");\n      }\n      //>>includeEnd('debug');\n      this._entityCluster = value;\n    },\n  },\n  /**\n   * Gets the credit that will be displayed for the data source\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Credit}\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n});\n\n/**\n * Asynchronously loads the provided GeoJSON or TopoJSON data, replacing any existing data.\n *\n * @param {Resource|String|Object} data A url, GeoJSON object, or TopoJSON object to be loaded.\n * @param {Object} [options] An object with the following properties:\n * @param {String} [options.sourceUri] Overrides the url to use for resolving relative links.\n * @param {GeoJsonDataSource~describe} [options.describe=GeoJsonDataSource.defaultDescribeProperty] A function which returns a Property object (or just a string),\n *                                                                                which converts the properties into an html description.\n * @param {Number} [options.markerSize=GeoJsonDataSource.markerSize] The default size of the map pin created for each point, in pixels.\n * @param {String} [options.markerSymbol=GeoJsonDataSource.markerSymbol] The default symbol of the map pin created for each point.\n * @param {Color} [options.markerColor=GeoJsonDataSource.markerColor] The default color of the map pin created for each point.\n * @param {Color} [options.stroke=GeoJsonDataSource.stroke] The default color of polylines and polygon outlines.\n * @param {Number} [options.strokeWidth=GeoJsonDataSource.strokeWidth] The default width of polylines and polygon outlines.\n * @param {Color} [options.fill=GeoJsonDataSource.fill] The default color for polygon interiors.\n * @param {Boolean} [options.clampToGround=GeoJsonDataSource.clampToGround] true if we want the features clamped to the ground.\n * @param {Credit|String} [options.credit] A credit for the data source, which is displayed on the canvas.\n *\n * @returns {Promise.<GeoJsonDataSource>} a promise that will resolve when the GeoJSON is loaded.\n */\nGeoJsonDataSource.prototype.load = function (data, options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(data)) {\n    throw new DeveloperError(\"data is required.\");\n  }\n  //>>includeEnd('debug');\n\n  DataSource.setLoading(this, true);\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  // User specified credit\n  var credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n  this._credit = credit;\n\n  var promise = data;\n  var sourceUri = options.sourceUri;\n  if (typeof data === \"string\" || data instanceof Resource) {\n    data = Resource.createIfNeeded(data);\n    promise = data.fetchJson();\n    sourceUri = defaultValue(sourceUri, data.getUrlComponent());\n\n    // Add resource credits to our list of credits to display\n    var resourceCredits = this._resourceCredits;\n    var credits = data.credits;\n    if (defined(credits)) {\n      var length = credits.length;\n      for (var i = 0; i < length; i++) {\n        resourceCredits.push(credits[i]);\n      }\n    }\n  }\n\n  options = {\n    describe: defaultValue(options.describe, defaultDescribeProperty),\n    markerSize: defaultValue(options.markerSize, defaultMarkerSize),\n    markerSymbol: defaultValue(options.markerSymbol, defaultMarkerSymbol),\n    markerColor: defaultValue(options.markerColor, defaultMarkerColor),\n    strokeWidthProperty: new ConstantProperty(\n      defaultValue(options.strokeWidth, defaultStrokeWidth)\n    ),\n    strokeMaterialProperty: new ColorMaterialProperty(\n      defaultValue(options.stroke, defaultStroke)\n    ),\n    fillMaterialProperty: new ColorMaterialProperty(\n      defaultValue(options.fill, defaultFill)\n    ),\n    clampToGround: defaultValue(options.clampToGround, defaultClampToGround),\n  };\n\n  var that = this;\n  return when(promise, function (geoJson) {\n    return load(that, geoJson, options, sourceUri);\n  }).otherwise(function (error) {\n    DataSource.setLoading(that, false);\n    that._error.raiseEvent(that, error);\n    console.log(error);\n    return when.reject(error);\n  });\n};\n\nfunction load(that, geoJson, options, sourceUri) {\n  var name;\n  if (defined(sourceUri)) {\n    name = getFilenameFromUri(sourceUri);\n  }\n\n  if (defined(name) && that._name !== name) {\n    that._name = name;\n    that._changed.raiseEvent(that);\n  }\n\n  var typeHandler = geoJsonObjectTypes[geoJson.type];\n  if (!defined(typeHandler)) {\n    throw new RuntimeError(\"Unsupported GeoJSON object type: \" + geoJson.type);\n  }\n\n  //Check for a Coordinate Reference System.\n  var crs = geoJson.crs;\n  var crsFunction = crs !== null ? defaultCrsFunction : null;\n\n  if (defined(crs)) {\n    if (!defined(crs.properties)) {\n      throw new RuntimeError(\"crs.properties is undefined.\");\n    }\n\n    var properties = crs.properties;\n    if (crs.type === \"name\") {\n      crsFunction = crsNames[properties.name];\n      if (!defined(crsFunction)) {\n        throw new RuntimeError(\"Unknown crs name: \" + properties.name);\n      }\n    } else if (crs.type === \"link\") {\n      var handler = crsLinkHrefs[properties.href];\n      if (!defined(handler)) {\n        handler = crsLinkTypes[properties.type];\n      }\n\n      if (!defined(handler)) {\n        throw new RuntimeError(\n          \"Unable to resolve crs link: \" + JSON.stringify(properties)\n        );\n      }\n\n      crsFunction = handler(properties);\n    } else if (crs.type === \"EPSG\") {\n      crsFunction = crsNames[\"EPSG:\" + properties.code];\n      if (!defined(crsFunction)) {\n        throw new RuntimeError(\"Unknown crs EPSG code: \" + properties.code);\n      }\n    } else {\n      throw new RuntimeError(\"Unknown crs type: \" + crs.type);\n    }\n  }\n\n  return when(crsFunction, function (crsFunction) {\n    that._entityCollection.removeAll();\n\n    // null is a valid value for the crs, but means the entire load process becomes a no-op\n    // because we can't assume anything about the coordinates.\n    if (crsFunction !== null) {\n      typeHandler(that, geoJson, geoJson, crsFunction, options);\n    }\n\n    return when.all(that._promises, function () {\n      that._promises.length = 0;\n      DataSource.setLoading(that, false);\n      return that;\n    });\n  });\n}\n\n/**\n * This callback is displayed as part of the GeoJsonDataSource class.\n * @callback GeoJsonDataSource~describe\n * @param {Object} properties The properties of the feature.\n * @param {String} nameProperty The property key that Cesium estimates to have the name of the feature.\n */\nexport default GeoJsonDataSource;\n"]},"metadata":{},"sourceType":"module"}