{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport clone from \"../Core/clone.js\";\nimport Color from \"../Core/Color.js\";\nimport combine from \"../Core/combine.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport loadCRN from \"../Core/loadCRN.js\";\nimport loadKTX from \"../Core/loadKTX.js\";\nimport Matrix2 from \"../Core/Matrix2.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Resource from \"../Core/Resource.js\";\nimport CubeMap from \"../Renderer/CubeMap.js\";\nimport Texture from \"../Renderer/Texture.js\";\nimport AspectRampMaterial from \"../Shaders/Materials/AspectRampMaterial.js\";\nimport BumpMapMaterial from \"../Shaders/Materials/BumpMapMaterial.js\";\nimport CheckerboardMaterial from \"../Shaders/Materials/CheckerboardMaterial.js\";\nimport DotMaterial from \"../Shaders/Materials/DotMaterial.js\";\nimport ElevationContourMaterial from \"../Shaders/Materials/ElevationContourMaterial.js\";\nimport ElevationRampMaterial from \"../Shaders/Materials/ElevationRampMaterial.js\";\nimport FadeMaterial from \"../Shaders/Materials/FadeMaterial.js\";\nimport GridMaterial from \"../Shaders/Materials/GridMaterial.js\";\nimport NormalMapMaterial from \"../Shaders/Materials/NormalMapMaterial.js\";\nimport PolylineArrowMaterial from \"../Shaders/Materials/PolylineArrowMaterial.js\";\nimport PolylineDashMaterial from \"../Shaders/Materials/PolylineDashMaterial.js\";\nimport PolylineGlowMaterial from \"../Shaders/Materials/PolylineGlowMaterial.js\";\nimport PolylineOutlineMaterial from \"../Shaders/Materials/PolylineOutlineMaterial.js\";\nimport RimLightingMaterial from \"../Shaders/Materials/RimLightingMaterial.js\";\nimport Sampler from \"../Renderer/Sampler.js\";\nimport SlopeRampMaterial from \"../Shaders/Materials/SlopeRampMaterial.js\";\nimport StripeMaterial from \"../Shaders/Materials/StripeMaterial.js\";\nimport TextureMagnificationFilter from \"../Renderer/TextureMagnificationFilter.js\";\nimport TextureMinificationFilter from \"../Renderer/TextureMinificationFilter.js\";\nimport WaterMaterial from \"../Shaders/Materials/Water.js\";\nimport when from \"../ThirdParty/when.js\";\n/**\n * A Material defines surface appearance through a combination of diffuse, specular,\n * normal, emission, and alpha components. These values are specified using a\n * JSON schema called Fabric which gets parsed and assembled into glsl shader code\n * behind-the-scenes. Check out the {@link https://github.com/CesiumGS/cesium/wiki/Fabric|wiki page}\n * for more details on Fabric.\n * <br /><br />\n * <style type=\"text/css\">\n *  #materialDescriptions code {\n *      font-weight: normal;\n *      font-family: Consolas, 'Lucida Console', Monaco, monospace;\n *      color: #A35A00;\n *  }\n *  #materialDescriptions ul, #materialDescriptions ul ul {\n *      list-style-type: none;\n *  }\n *  #materialDescriptions ul ul {\n *      margin-bottom: 10px;\n *  }\n *  #materialDescriptions ul ul li {\n *      font-weight: normal;\n *      color: #000000;\n *      text-indent: -2em;\n *      margin-left: 2em;\n *  }\n *  #materialDescriptions ul li {\n *      font-weight: bold;\n *      color: #0053CF;\n *  }\n * </style>\n *\n * Base material types and their uniforms:\n * <div id='materialDescriptions'>\n * <ul>\n *  <li>Color</li>\n *  <ul>\n *      <li><code>color</code>:  rgba color object.</li>\n *  </ul>\n *  <li>Image</li>\n *  <ul>\n *      <li><code>image</code>:  path to image.</li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of times to repeat the image.</li>\n *  </ul>\n *  <li>DiffuseMap</li>\n *  <ul>\n *      <li><code>image</code>:  path to image.</li>\n *      <li><code>channels</code>:  Three character string containing any combination of r, g, b, and a for selecting the desired image channels.</li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of times to repeat the image.</li>\n *  </ul>\n *  <li>AlphaMap</li>\n *  <ul>\n *      <li><code>image</code>:  path to image.</li>\n *      <li><code>channel</code>:  One character string containing r, g, b, or a for selecting the desired image channel. </li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of times to repeat the image.</li>\n *  </ul>\n *  <li>SpecularMap</li>\n *  <ul>\n *      <li><code>image</code>: path to image.</li>\n *      <li><code>channel</code>: One character string containing r, g, b, or a for selecting the desired image channel. </li>\n *      <li><code>repeat</code>: Object with x and y values specifying the number of times to repeat the image.</li>\n *  </ul>\n *  <li>EmissionMap</li>\n *  <ul>\n *      <li><code>image</code>:  path to image.</li>\n *      <li><code>channels</code>:  Three character string containing any combination of r, g, b, and a for selecting the desired image channels. </li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of times to repeat the image.</li>\n *  </ul>\n *  <li>BumpMap</li>\n *  <ul>\n *      <li><code>image</code>:  path to image.</li>\n *      <li><code>channel</code>:  One character string containing r, g, b, or a for selecting the desired image channel. </li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of times to repeat the image.</li>\n *      <li><code>strength</code>:  Bump strength value between 0.0 and 1.0 where 0.0 is small bumps and 1.0 is large bumps.</li>\n *  </ul>\n *  <li>NormalMap</li>\n *  <ul>\n *      <li><code>image</code>:  path to image.</li>\n *      <li><code>channels</code>:  Three character string containing any combination of r, g, b, and a for selecting the desired image channels. </li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of times to repeat the image.</li>\n *      <li><code>strength</code>:  Bump strength value between 0.0 and 1.0 where 0.0 is small bumps and 1.0 is large bumps.</li>\n *  </ul>\n *  <li>Grid</li>\n *  <ul>\n *      <li><code>color</code>:  rgba color object for the whole material.</li>\n *      <li><code>cellAlpha</code>: Alpha value for the cells between grid lines.  This will be combined with color.alpha.</li>\n *      <li><code>lineCount</code>:  Object with x and y values specifying the number of columns and rows respectively.</li>\n *      <li><code>lineThickness</code>:  Object with x and y values specifying the thickness of grid lines (in pixels where available).</li>\n *      <li><code>lineOffset</code>:  Object with x and y values specifying the offset of grid lines (range is 0 to 1).</li>\n *  </ul>\n *  <li>Stripe</li>\n *  <ul>\n *      <li><code>horizontal</code>:  Boolean that determines if the stripes are horizontal or vertical.</li>\n *      <li><code>evenColor</code>:  rgba color object for the stripe's first color.</li>\n *      <li><code>oddColor</code>:  rgba color object for the stripe's second color.</li>\n *      <li><code>offset</code>:  Number that controls at which point into the pattern to begin drawing; with 0.0 being the beginning of the even color, 1.0 the beginning of the odd color, 2.0 being the even color again, and any multiple or fractional values being in between.</li>\n *      <li><code>repeat</code>:  Number that controls the total number of stripes, half light and half dark.</li>\n *  </ul>\n *  <li>Checkerboard</li>\n *  <ul>\n *      <li><code>lightColor</code>:  rgba color object for the checkerboard's light alternating color.</li>\n *      <li><code>darkColor</code>: rgba color object for the checkerboard's dark alternating color.</li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of columns and rows respectively.</li>\n *  </ul>\n *  <li>Dot</li>\n *  <ul>\n *      <li><code>lightColor</code>:  rgba color object for the dot color.</li>\n *      <li><code>darkColor</code>:  rgba color object for the background color.</li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of columns and rows of dots respectively.</li>\n *  </ul>\n *  <li>Water</li>\n *  <ul>\n *      <li><code>baseWaterColor</code>:  rgba color object base color of the water.</li>\n *      <li><code>blendColor</code>:  rgba color object used when blending from water to non-water areas.</li>\n *      <li><code>specularMap</code>:  Single channel texture used to indicate areas of water.</li>\n *      <li><code>normalMap</code>:  Normal map for water normal perturbation.</li>\n *      <li><code>frequency</code>:  Number that controls the number of waves.</li>\n *      <li><code>normalMap</code>:  Normal map for water normal perturbation.</li>\n *      <li><code>animationSpeed</code>:  Number that controls the animations speed of the water.</li>\n *      <li><code>amplitude</code>:  Number that controls the amplitude of water waves.</li>\n *      <li><code>specularIntensity</code>:  Number that controls the intensity of specular reflections.</li>\n *  </ul>\n *  <li>RimLighting</li>\n *  <ul>\n *      <li><code>color</code>:  diffuse color and alpha.</li>\n *      <li><code>rimColor</code>:  diffuse color and alpha of the rim.</li>\n *      <li><code>width</code>:  Number that determines the rim's width.</li>\n *  </ul>\n *  <li>Fade</li>\n *  <ul>\n *      <li><code>fadeInColor</code>: diffuse color and alpha at <code>time</code></li>\n *      <li><code>fadeOutColor</code>: diffuse color and alpha at <code>maximumDistance</code> from <code>time</code></li>\n *      <li><code>maximumDistance</code>: Number between 0.0 and 1.0 where the <code>fadeInColor</code> becomes the <code>fadeOutColor</code>. A value of 0.0 gives the entire material a color of <code>fadeOutColor</code> and a value of 1.0 gives the the entire material a color of <code>fadeInColor</code></li>\n *      <li><code>repeat</code>: true if the fade should wrap around the texture coodinates.</li>\n *      <li><code>fadeDirection</code>: Object with x and y values specifying if the fade should be in the x and y directions.</li>\n *      <li><code>time</code>: Object with x and y values between 0.0 and 1.0 of the <code>fadeInColor</code> position</li>\n *  </ul>\n *  <li>PolylineArrow</li>\n *  <ul>\n *      <li><code>color</code>: diffuse color and alpha.</li>\n *  </ul>\n *  <li>PolylineDash</li>\n *  <ul>\n *      <li><code>color</code>: color for the line.</li>\n *      <li><code>gapColor</code>: color for the gaps in the line.</li>\n *      <li><code>dashLength</code>: Dash length in pixels.</li>\n *      <li><code>dashPattern</code>: The 16 bit stipple pattern for the line..</li>\n *  </ul>\n *  <li>PolylineGlow</li>\n *  <ul>\n *      <li><code>color</code>: color and maximum alpha for the glow on the line.</li>\n *      <li><code>glowPower</code>: strength of the glow, as a percentage of the total line width (less than 1.0).</li>\n *      <li><code>taperPower</code>: strength of the tapering effect, as a percentage of the total line length.  If 1.0 or higher, no taper effect is used.</li>\n *  </ul>\n *  <li>PolylineOutline</li>\n *  <ul>\n *      <li><code>color</code>: diffuse color and alpha for the interior of the line.</li>\n *      <li><code>outlineColor</code>: diffuse color and alpha for the outline.</li>\n *      <li><code>outlineWidth</code>: width of the outline in pixels.</li>\n *  </ul>\n *  <li>ElevationContour</li>\n *  <ul>\n *      <li><code>color</code>: color and alpha for the contour line.</li>\n *      <li><code>spacing</code>: spacing for contour lines in meters.</li>\n *      <li><code>width</code>: Number specifying the width of the grid lines in pixels.</li>\n *  </ul>\n *  <li>ElevationRamp</li>\n *  <ul>\n *      <li><code>image</code>: color ramp image to use for coloring the terrain.</li>\n *      <li><code>minimumHeight</code>: minimum height for the ramp.</li>\n *      <li><code>maximumHeight</code>: maximum height for the ramp.</li>\n *  </ul>\n *  <li>SlopeRamp</li>\n *  <ul>\n *      <li><code>image</code>: color ramp image to use for coloring the terrain by slope.</li>\n *  </ul>\n *  <li>AspectRamp</li>\n *  <ul>\n *      <li><code>image</code>: color ramp image to use for color the terrain by aspect.</li>\n *  </ul>\n * </ul>\n * </ul>\n * </div>\n *\n * @alias Material\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.strict=false] Throws errors for issues that would normally be ignored, including unused uniforms or materials.\n * @param {Boolean|Function} [options.translucent=true] When <code>true</code> or a function that returns <code>true</code>, the geometry\n *                           with this material is expected to appear translucent.\n * @param {TextureMinificationFilter} [options.minificationFilter=TextureMinificationFilter.LINEAR] The {@link TextureMinificationFilter} to apply to this material's textures.\n * @param {TextureMagnificationFilter} [options.magnificationFilter=TextureMagnificationFilter.LINEAR] The {@link TextureMagnificationFilter} to apply to this material's textures.\n * @param {Object} options.fabric The fabric JSON used to generate the material.\n *\n * @constructor\n *\n * @exception {DeveloperError} fabric: uniform has invalid type.\n * @exception {DeveloperError} fabric: uniforms and materials cannot share the same property.\n * @exception {DeveloperError} fabric: cannot have source and components in the same section.\n * @exception {DeveloperError} fabric: property name is not valid. It should be 'type', 'materials', 'uniforms', 'components', or 'source'.\n * @exception {DeveloperError} fabric: property name is not valid. It should be 'diffuse', 'specular', 'shininess', 'normal', 'emission', or 'alpha'.\n * @exception {DeveloperError} strict: shader source does not use string.\n * @exception {DeveloperError} strict: shader source does not use uniform.\n * @exception {DeveloperError} strict: shader source does not use material.\n *\n * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric wiki page} for a more detailed options of Fabric.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Materials.html|Cesium Sandcastle Materials Demo}\n *\n * @example\n * // Create a color material with fromType:\n * polygon.material = Cesium.Material.fromType('Color');\n * polygon.material.uniforms.color = new Cesium.Color(1.0, 1.0, 0.0, 1.0);\n *\n * // Create the default material:\n * polygon.material = new Cesium.Material();\n *\n * // Create a color material with full Fabric notation:\n * polygon.material = new Cesium.Material({\n *     fabric : {\n *         type : 'Color',\n *         uniforms : {\n *             color : new Cesium.Color(1.0, 1.0, 0.0, 1.0)\n *         }\n *     }\n * });\n */\n\nfunction Material(options) {\n  /**\n   * The material type. Can be an existing type or a new type. If no type is specified in fabric, type is a GUID.\n   * @type {String}\n   * @default undefined\n   */\n  this.type = undefined;\n  /**\n   * The glsl shader source for this material.\n   * @type {String}\n   * @default undefined\n   */\n\n  this.shaderSource = undefined;\n  /**\n   * Maps sub-material names to Material objects.\n   * @type {Object}\n   * @default undefined\n   */\n\n  this.materials = undefined;\n  /**\n   * Maps uniform names to their values.\n   * @type {Object}\n   * @default undefined\n   */\n\n  this.uniforms = undefined;\n  this._uniforms = undefined;\n  /**\n   * When <code>true</code> or a function that returns <code>true</code>,\n   * the geometry is expected to appear translucent.\n   * @type {Boolean|Function}\n   * @default undefined\n   */\n\n  this.translucent = undefined;\n  this._minificationFilter = defaultValue(options.minificationFilter, TextureMinificationFilter.LINEAR);\n  this._magnificationFilter = defaultValue(options.magnificationFilter, TextureMagnificationFilter.LINEAR);\n  this._strict = undefined;\n  this._template = undefined;\n  this._count = undefined;\n  this._texturePaths = {};\n  this._loadedImages = [];\n  this._loadedCubeMaps = [];\n  this._textures = {};\n  this._updateFunctions = [];\n  this._defaultTexture = undefined;\n  initializeMaterial(options, this);\n  Object.defineProperties(this, {\n    type: {\n      value: this.type,\n      writable: false\n    }\n  });\n\n  if (!defined(Material._uniformList[this.type])) {\n    Material._uniformList[this.type] = Object.keys(this._uniforms);\n  }\n} // Cached list of combined uniform names indexed by type.\n// Used to get the list of uniforms in the same order.\n\n\nMaterial._uniformList = {};\n/**\n * Creates a new material using an existing material type.\n * <br /><br />\n * Shorthand for: new Material({fabric : {type : type}});\n *\n * @param {String} type The base material type.\n * @param {Object} [uniforms] Overrides for the default uniforms.\n * @returns {Material} New material object.\n *\n * @exception {DeveloperError} material with that type does not exist.\n *\n * @example\n * var material = Cesium.Material.fromType('Color', {\n *     color : new Cesium.Color(1.0, 0.0, 0.0, 1.0)\n * });\n */\n\nMaterial.fromType = function (type, uniforms) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(Material._materialCache.getMaterial(type))) {\n    throw new DeveloperError(\"material with type '\" + type + \"' does not exist.\");\n  } //>>includeEnd('debug');\n\n\n  var material = new Material({\n    fabric: {\n      type: type\n    }\n  });\n\n  if (defined(uniforms)) {\n    for (var name in uniforms) {\n      if (uniforms.hasOwnProperty(name)) {\n        material.uniforms[name] = uniforms[name];\n      }\n    }\n  }\n\n  return material;\n};\n/**\n * Gets whether or not this material is translucent.\n * @returns {Boolean} <code>true</code> if this material is translucent, <code>false</code> otherwise.\n */\n\n\nMaterial.prototype.isTranslucent = function () {\n  if (defined(this.translucent)) {\n    if (typeof this.translucent === \"function\") {\n      return this.translucent();\n    }\n\n    return this.translucent;\n  }\n\n  var translucent = true;\n  var funcs = this._translucentFunctions;\n  var length = funcs.length;\n\n  for (var i = 0; i < length; ++i) {\n    var func = funcs[i];\n\n    if (typeof func === \"function\") {\n      translucent = translucent && func();\n    } else {\n      translucent = translucent && func;\n    }\n\n    if (!translucent) {\n      break;\n    }\n  }\n\n  return translucent;\n};\n/**\n * @private\n */\n\n\nMaterial.prototype.update = function (context) {\n  var i;\n  var uniformId;\n  var loadedImages = this._loadedImages;\n  var length = loadedImages.length;\n\n  for (i = 0; i < length; ++i) {\n    var loadedImage = loadedImages[i];\n    uniformId = loadedImage.id;\n    var image = loadedImage.image;\n    var sampler = new Sampler({\n      minificationFilter: this._minificationFilter,\n      magnificationFilter: this._magnificationFilter\n    });\n    var texture;\n\n    if (defined(image.internalFormat)) {\n      texture = new Texture({\n        context: context,\n        pixelFormat: image.internalFormat,\n        width: image.width,\n        height: image.height,\n        source: {\n          arrayBufferView: image.bufferView\n        },\n        sampler: sampler\n      });\n    } else {\n      texture = new Texture({\n        context: context,\n        source: image,\n        sampler: sampler\n      });\n    }\n\n    this._textures[uniformId] = texture;\n    var uniformDimensionsName = uniformId + \"Dimensions\";\n\n    if (this.uniforms.hasOwnProperty(uniformDimensionsName)) {\n      var uniformDimensions = this.uniforms[uniformDimensionsName];\n      uniformDimensions.x = texture._width;\n      uniformDimensions.y = texture._height;\n    }\n  }\n\n  loadedImages.length = 0;\n  var loadedCubeMaps = this._loadedCubeMaps;\n  length = loadedCubeMaps.length;\n\n  for (i = 0; i < length; ++i) {\n    var loadedCubeMap = loadedCubeMaps[i];\n    uniformId = loadedCubeMap.id;\n    var images = loadedCubeMap.images;\n    var cubeMap = new CubeMap({\n      context: context,\n      source: {\n        positiveX: images[0],\n        negativeX: images[1],\n        positiveY: images[2],\n        negativeY: images[3],\n        positiveZ: images[4],\n        negativeZ: images[5]\n      },\n      sampler: new Sampler({\n        minificationFilter: this._minificationFilter,\n        magnificationFilter: this._magnificationFilter\n      })\n    });\n    this._textures[uniformId] = cubeMap;\n  }\n\n  loadedCubeMaps.length = 0;\n  var updateFunctions = this._updateFunctions;\n  length = updateFunctions.length;\n\n  for (i = 0; i < length; ++i) {\n    updateFunctions[i](this, context);\n  }\n\n  var subMaterials = this.materials;\n\n  for (var name in subMaterials) {\n    if (subMaterials.hasOwnProperty(name)) {\n      subMaterials[name].update(context);\n    }\n  }\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see Material#destroy\n */\n\n\nMaterial.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * material = material && material.destroy();\n *\n * @see Material#isDestroyed\n */\n\n\nMaterial.prototype.destroy = function () {\n  var textures = this._textures;\n\n  for (var texture in textures) {\n    if (textures.hasOwnProperty(texture)) {\n      var instance = textures[texture];\n\n      if (instance !== this._defaultTexture) {\n        instance.destroy();\n      }\n    }\n  }\n\n  var materials = this.materials;\n\n  for (var material in materials) {\n    if (materials.hasOwnProperty(material)) {\n      materials[material].destroy();\n    }\n  }\n\n  return destroyObject(this);\n};\n\nfunction initializeMaterial(options, result) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  result._strict = defaultValue(options.strict, false);\n  result._count = defaultValue(options.count, 0);\n  result._template = clone(defaultValue(options.fabric, defaultValue.EMPTY_OBJECT));\n  result._template.uniforms = clone(defaultValue(result._template.uniforms, defaultValue.EMPTY_OBJECT));\n  result._template.materials = clone(defaultValue(result._template.materials, defaultValue.EMPTY_OBJECT));\n  result.type = defined(result._template.type) ? result._template.type : createGuid();\n  result.shaderSource = \"\";\n  result.materials = {};\n  result.uniforms = {};\n  result._uniforms = {};\n  result._translucentFunctions = [];\n  var translucent; // If the cache contains this material type, build the material template off of the stored template.\n\n  var cachedMaterial = Material._materialCache.getMaterial(result.type);\n\n  if (defined(cachedMaterial)) {\n    var template = clone(cachedMaterial.fabric, true);\n    result._template = combine(result._template, template, true);\n    translucent = cachedMaterial.translucent;\n  } // Make sure the template has no obvious errors. More error checking happens later.\n\n\n  checkForTemplateErrors(result); // If the material has a new type, add it to the cache.\n\n  if (!defined(cachedMaterial)) {\n    Material._materialCache.addMaterial(result.type, result);\n  }\n\n  createMethodDefinition(result);\n  createUniforms(result);\n  createSubMaterials(result);\n  var defaultTranslucent = result._translucentFunctions.length === 0 ? true : undefined;\n  translucent = defaultValue(translucent, defaultTranslucent);\n  translucent = defaultValue(options.translucent, translucent);\n\n  if (defined(translucent)) {\n    if (typeof translucent === \"function\") {\n      var wrappedTranslucent = function () {\n        return translucent(result);\n      };\n\n      result._translucentFunctions.push(wrappedTranslucent);\n    } else {\n      result._translucentFunctions.push(translucent);\n    }\n  }\n}\n\nfunction checkForValidProperties(object, properties, result, throwNotFound) {\n  if (defined(object)) {\n    for (var property in object) {\n      if (object.hasOwnProperty(property)) {\n        var hasProperty = properties.indexOf(property) !== -1;\n\n        if (throwNotFound && !hasProperty || !throwNotFound && hasProperty) {\n          result(property, properties);\n        }\n      }\n    }\n  }\n}\n\nfunction invalidNameError(property, properties) {\n  //>>includeStart('debug', pragmas.debug);\n  var errorString = \"fabric: property name '\" + property + \"' is not valid. It should be \";\n\n  for (var i = 0; i < properties.length; i++) {\n    var propertyName = \"'\" + properties[i] + \"'\";\n    errorString += i === properties.length - 1 ? \"or \" + propertyName + \".\" : propertyName + \", \";\n  }\n\n  throw new DeveloperError(errorString); //>>includeEnd('debug');\n}\n\nfunction duplicateNameError(property, properties) {\n  //>>includeStart('debug', pragmas.debug);\n  var errorString = \"fabric: uniforms and materials cannot share the same property '\" + property + \"'\";\n  throw new DeveloperError(errorString); //>>includeEnd('debug');\n}\n\nvar templateProperties = [\"type\", \"materials\", \"uniforms\", \"components\", \"source\"];\nvar componentProperties = [\"diffuse\", \"specular\", \"shininess\", \"normal\", \"emission\", \"alpha\"];\n\nfunction checkForTemplateErrors(material) {\n  var template = material._template;\n  var uniforms = template.uniforms;\n  var materials = template.materials;\n  var components = template.components; // Make sure source and components do not exist in the same template.\n  //>>includeStart('debug', pragmas.debug);\n\n  if (defined(components) && defined(template.source)) {\n    throw new DeveloperError(\"fabric: cannot have source and components in the same template.\");\n  } //>>includeEnd('debug');\n  // Make sure all template and components properties are valid.\n\n\n  checkForValidProperties(template, templateProperties, invalidNameError, true);\n  checkForValidProperties(components, componentProperties, invalidNameError, true); // Make sure uniforms and materials do not share any of the same names.\n\n  var materialNames = [];\n\n  for (var property in materials) {\n    if (materials.hasOwnProperty(property)) {\n      materialNames.push(property);\n    }\n  }\n\n  checkForValidProperties(uniforms, materialNames, duplicateNameError, false);\n}\n\nfunction isMaterialFused(shaderComponent, material) {\n  var materials = material._template.materials;\n\n  for (var subMaterialId in materials) {\n    if (materials.hasOwnProperty(subMaterialId)) {\n      if (shaderComponent.indexOf(subMaterialId) > -1) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n} // Create the czm_getMaterial method body using source or components.\n\n\nfunction createMethodDefinition(material) {\n  var components = material._template.components;\n  var source = material._template.source;\n\n  if (defined(source)) {\n    material.shaderSource += source + \"\\n\";\n  } else {\n    material.shaderSource += \"czm_material czm_getMaterial(czm_materialInput materialInput)\\n{\\n\";\n    material.shaderSource += \"czm_material material = czm_getDefaultMaterial(materialInput);\\n\";\n\n    if (defined(components)) {\n      var isMultiMaterial = Object.keys(material._template.materials).length > 0;\n\n      for (var component in components) {\n        if (components.hasOwnProperty(component)) {\n          if (component === \"diffuse\" || component === \"emission\") {\n            var isFusion = isMultiMaterial && isMaterialFused(components[component], material);\n            var componentSource = isFusion ? components[component] : \"czm_gammaCorrect(\" + components[component] + \")\";\n            material.shaderSource += \"material.\" + component + \" = \" + componentSource + \"; \\n\";\n          } else if (component === \"alpha\") {\n            material.shaderSource += \"material.alpha = \" + components.alpha + \"; \\n\";\n          } else {\n            material.shaderSource += \"material.\" + component + \" = \" + components[component] + \";\\n\";\n          }\n        }\n      }\n    }\n\n    material.shaderSource += \"return material;\\n}\\n\";\n  }\n}\n\nvar matrixMap = {\n  mat2: Matrix2,\n  mat3: Matrix3,\n  mat4: Matrix4\n};\nvar ktxRegex = /\\.ktx$/i;\nvar crnRegex = /\\.crn$/i;\n\nfunction createTexture2DUpdateFunction(uniformId) {\n  var oldUniformValue;\n  return function (material, context) {\n    var uniforms = material.uniforms;\n    var uniformValue = uniforms[uniformId];\n    var uniformChanged = oldUniformValue !== uniformValue;\n    oldUniformValue = uniformValue;\n    var texture = material._textures[uniformId];\n    var uniformDimensionsName;\n    var uniformDimensions;\n\n    if (uniformValue instanceof HTMLVideoElement) {\n      // HTMLVideoElement.readyState >=2 means we have enough data for the current frame.\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState\n      if (uniformValue.readyState >= 2) {\n        if (uniformChanged && defined(texture)) {\n          if (texture !== context.defaultTexture) {\n            texture.destroy();\n          }\n\n          texture = undefined;\n        }\n\n        if (!defined(texture) || texture === context.defaultTexture) {\n          var sampler = new Sampler({\n            minificationFilter: material._minificationFilter,\n            magnificationFilter: material._magnificationFilter\n          });\n          texture = new Texture({\n            context: context,\n            source: uniformValue,\n            sampler: sampler\n          });\n          material._textures[uniformId] = texture;\n          return;\n        }\n\n        texture.copyFrom(uniformValue);\n      } else if (!defined(texture)) {\n        material._textures[uniformId] = context.defaultTexture;\n      }\n\n      return;\n    }\n\n    if (uniformValue instanceof Texture && uniformValue !== texture) {\n      material._texturePaths[uniformId] = undefined;\n      var tmp = material._textures[uniformId];\n\n      if (tmp !== material._defaultTexture) {\n        tmp.destroy();\n      }\n\n      material._textures[uniformId] = uniformValue;\n      uniformDimensionsName = uniformId + \"Dimensions\";\n\n      if (uniforms.hasOwnProperty(uniformDimensionsName)) {\n        uniformDimensions = uniforms[uniformDimensionsName];\n        uniformDimensions.x = uniformValue._width;\n        uniformDimensions.y = uniformValue._height;\n      }\n\n      return;\n    }\n\n    if (!defined(texture)) {\n      material._texturePaths[uniformId] = undefined;\n\n      if (!defined(material._defaultTexture)) {\n        material._defaultTexture = context.defaultTexture;\n      }\n\n      texture = material._textures[uniformId] = material._defaultTexture;\n      uniformDimensionsName = uniformId + \"Dimensions\";\n\n      if (uniforms.hasOwnProperty(uniformDimensionsName)) {\n        uniformDimensions = uniforms[uniformDimensionsName];\n        uniformDimensions.x = texture._width;\n        uniformDimensions.y = texture._height;\n      }\n    }\n\n    if (uniformValue === Material.DefaultImageId) {\n      return;\n    } // When using the entity layer, the Resource objects get recreated on getValue because\n    //  they are clonable. That's why we check the url property for Resources\n    //  because the instances aren't the same and we keep trying to load the same\n    //  image if it fails to load.\n\n\n    var isResource = uniformValue instanceof Resource;\n\n    if (!defined(material._texturePaths[uniformId]) || isResource && uniformValue.url !== material._texturePaths[uniformId].url || !isResource && uniformValue !== material._texturePaths[uniformId]) {\n      if (typeof uniformValue === \"string\" || isResource) {\n        var resource = isResource ? uniformValue : Resource.createIfNeeded(uniformValue);\n        var promise;\n\n        if (ktxRegex.test(resource.url)) {\n          promise = loadKTX(resource);\n        } else if (crnRegex.test(resource.url)) {\n          promise = loadCRN(resource);\n        } else {\n          promise = resource.fetchImage();\n        }\n\n        when(promise, function (image) {\n          material._loadedImages.push({\n            id: uniformId,\n            image: image\n          });\n        });\n      } else if (uniformValue instanceof HTMLCanvasElement || uniformValue instanceof HTMLImageElement) {\n        material._loadedImages.push({\n          id: uniformId,\n          image: uniformValue\n        });\n      }\n\n      material._texturePaths[uniformId] = uniformValue;\n    }\n  };\n}\n\nfunction createCubeMapUpdateFunction(uniformId) {\n  return function (material, context) {\n    var uniformValue = material.uniforms[uniformId];\n\n    if (uniformValue instanceof CubeMap) {\n      var tmp = material._textures[uniformId];\n\n      if (tmp !== material._defaultTexture) {\n        tmp.destroy();\n      }\n\n      material._texturePaths[uniformId] = undefined;\n      material._textures[uniformId] = uniformValue;\n      return;\n    }\n\n    if (!defined(material._textures[uniformId])) {\n      material._texturePaths[uniformId] = undefined;\n      material._textures[uniformId] = context.defaultCubeMap;\n    }\n\n    if (uniformValue === Material.DefaultCubeMapId) {\n      return;\n    }\n\n    var path = uniformValue.positiveX + uniformValue.negativeX + uniformValue.positiveY + uniformValue.negativeY + uniformValue.positiveZ + uniformValue.negativeZ;\n\n    if (path !== material._texturePaths[uniformId]) {\n      var promises = [Resource.createIfNeeded(uniformValue.positiveX).fetchImage(), Resource.createIfNeeded(uniformValue.negativeX).fetchImage(), Resource.createIfNeeded(uniformValue.positiveY).fetchImage(), Resource.createIfNeeded(uniformValue.negativeY).fetchImage(), Resource.createIfNeeded(uniformValue.positiveZ).fetchImage(), Resource.createIfNeeded(uniformValue.negativeZ).fetchImage()];\n      when.all(promises).then(function (images) {\n        material._loadedCubeMaps.push({\n          id: uniformId,\n          images: images\n        });\n      });\n      material._texturePaths[uniformId] = path;\n    }\n  };\n}\n\nfunction createUniforms(material) {\n  var uniforms = material._template.uniforms;\n\n  for (var uniformId in uniforms) {\n    if (uniforms.hasOwnProperty(uniformId)) {\n      createUniform(material, uniformId);\n    }\n  }\n} // Writes uniform declarations to the shader file and connects uniform values with\n// corresponding material properties through the returnUniforms function.\n\n\nfunction createUniform(material, uniformId) {\n  var strict = material._strict;\n  var materialUniforms = material._template.uniforms;\n  var uniformValue = materialUniforms[uniformId];\n  var uniformType = getUniformType(uniformValue); //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(uniformType)) {\n    throw new DeveloperError(\"fabric: uniform '\" + uniformId + \"' has invalid type.\");\n  } //>>includeEnd('debug');\n\n\n  var replacedTokenCount;\n\n  if (uniformType === \"channels\") {\n    replacedTokenCount = replaceToken(material, uniformId, uniformValue, false); //>>includeStart('debug', pragmas.debug);\n\n    if (replacedTokenCount === 0 && strict) {\n      throw new DeveloperError(\"strict: shader source does not use channels '\" + uniformId + \"'.\");\n    } //>>includeEnd('debug');\n\n  } else {\n    // Since webgl doesn't allow texture dimension queries in glsl, create a uniform to do it.\n    // Check if the shader source actually uses texture dimensions before creating the uniform.\n    if (uniformType === \"sampler2D\") {\n      var imageDimensionsUniformName = uniformId + \"Dimensions\";\n\n      if (getNumberOfTokens(material, imageDimensionsUniformName) > 0) {\n        materialUniforms[imageDimensionsUniformName] = {\n          type: \"ivec3\",\n          x: 1,\n          y: 1\n        };\n        createUniform(material, imageDimensionsUniformName);\n      }\n    } // Add uniform declaration to source code.\n\n\n    var uniformDeclarationRegex = new RegExp(\"uniform\\\\s+\" + uniformType + \"\\\\s+\" + uniformId + \"\\\\s*;\");\n\n    if (!uniformDeclarationRegex.test(material.shaderSource)) {\n      var uniformDeclaration = \"uniform \" + uniformType + \" \" + uniformId + \";\";\n      material.shaderSource = uniformDeclaration + material.shaderSource;\n    }\n\n    var newUniformId = uniformId + \"_\" + material._count++;\n    replacedTokenCount = replaceToken(material, uniformId, newUniformId); //>>includeStart('debug', pragmas.debug);\n\n    if (replacedTokenCount === 1 && strict) {\n      throw new DeveloperError(\"strict: shader source does not use uniform '\" + uniformId + \"'.\");\n    } //>>includeEnd('debug');\n    // Set uniform value\n\n\n    material.uniforms[uniformId] = uniformValue;\n\n    if (uniformType === \"sampler2D\") {\n      material._uniforms[newUniformId] = function () {\n        return material._textures[uniformId];\n      };\n\n      material._updateFunctions.push(createTexture2DUpdateFunction(uniformId));\n    } else if (uniformType === \"samplerCube\") {\n      material._uniforms[newUniformId] = function () {\n        return material._textures[uniformId];\n      };\n\n      material._updateFunctions.push(createCubeMapUpdateFunction(uniformId));\n    } else if (uniformType.indexOf(\"mat\") !== -1) {\n      var scratchMatrix = new matrixMap[uniformType]();\n\n      material._uniforms[newUniformId] = function () {\n        return matrixMap[uniformType].fromColumnMajorArray(material.uniforms[uniformId], scratchMatrix);\n      };\n    } else {\n      material._uniforms[newUniformId] = function () {\n        return material.uniforms[uniformId];\n      };\n    }\n  }\n} // Determines the uniform type based on the uniform in the template.\n\n\nfunction getUniformType(uniformValue) {\n  var uniformType = uniformValue.type;\n\n  if (!defined(uniformType)) {\n    var type = typeof uniformValue;\n\n    if (type === \"number\") {\n      uniformType = \"float\";\n    } else if (type === \"boolean\") {\n      uniformType = \"bool\";\n    } else if (type === \"string\" || uniformValue instanceof Resource || uniformValue instanceof HTMLCanvasElement || uniformValue instanceof HTMLImageElement) {\n      if (/^([rgba]){1,4}$/i.test(uniformValue)) {\n        uniformType = \"channels\";\n      } else if (uniformValue === Material.DefaultCubeMapId) {\n        uniformType = \"samplerCube\";\n      } else {\n        uniformType = \"sampler2D\";\n      }\n    } else if (type === \"object\") {\n      if (Array.isArray(uniformValue)) {\n        if (uniformValue.length === 4 || uniformValue.length === 9 || uniformValue.length === 16) {\n          uniformType = \"mat\" + Math.sqrt(uniformValue.length);\n        }\n      } else {\n        var numAttributes = 0;\n\n        for (var attribute in uniformValue) {\n          if (uniformValue.hasOwnProperty(attribute)) {\n            numAttributes += 1;\n          }\n        }\n\n        if (numAttributes >= 2 && numAttributes <= 4) {\n          uniformType = \"vec\" + numAttributes;\n        } else if (numAttributes === 6) {\n          uniformType = \"samplerCube\";\n        }\n      }\n    }\n  }\n\n  return uniformType;\n} // Create all sub-materials by combining source and uniforms together.\n\n\nfunction createSubMaterials(material) {\n  var strict = material._strict;\n  var subMaterialTemplates = material._template.materials;\n\n  for (var subMaterialId in subMaterialTemplates) {\n    if (subMaterialTemplates.hasOwnProperty(subMaterialId)) {\n      // Construct the sub-material.\n      var subMaterial = new Material({\n        strict: strict,\n        fabric: subMaterialTemplates[subMaterialId],\n        count: material._count\n      });\n      material._count = subMaterial._count;\n      material._uniforms = combine(material._uniforms, subMaterial._uniforms, true);\n      material.materials[subMaterialId] = subMaterial;\n      material._translucentFunctions = material._translucentFunctions.concat(subMaterial._translucentFunctions); // Make the material's czm_getMaterial unique by appending the sub-material type.\n\n      var originalMethodName = \"czm_getMaterial\";\n      var newMethodName = originalMethodName + \"_\" + material._count++;\n      replaceToken(subMaterial, originalMethodName, newMethodName);\n      material.shaderSource = subMaterial.shaderSource + material.shaderSource; // Replace each material id with an czm_getMaterial method call.\n\n      var materialMethodCall = newMethodName + \"(materialInput)\";\n      var tokensReplacedCount = replaceToken(material, subMaterialId, materialMethodCall); //>>includeStart('debug', pragmas.debug);\n\n      if (tokensReplacedCount === 0 && strict) {\n        throw new DeveloperError(\"strict: shader source does not use material '\" + subMaterialId + \"'.\");\n      } //>>includeEnd('debug');\n\n    }\n  }\n} // Used for searching or replacing a token in a material's shader source with something else.\n// If excludePeriod is true, do not accept tokens that are preceded by periods.\n// http://stackoverflow.com/questions/641407/javascript-negative-lookbehind-equivalent\n\n\nfunction replaceToken(material, token, newToken, excludePeriod) {\n  excludePeriod = defaultValue(excludePeriod, true);\n  var count = 0;\n  var suffixChars = \"([\\\\w])?\";\n  var prefixChars = \"([\\\\w\" + (excludePeriod ? \".\" : \"\") + \"])?\";\n  var regExp = new RegExp(prefixChars + token + suffixChars, \"g\");\n  material.shaderSource = material.shaderSource.replace(regExp, function ($0, $1, $2) {\n    if ($1 || $2) {\n      return $0;\n    }\n\n    count += 1;\n    return newToken;\n  });\n  return count;\n}\n\nfunction getNumberOfTokens(material, token, excludePeriod) {\n  return replaceToken(material, token, token, excludePeriod);\n}\n\nMaterial._materialCache = {\n  _materials: {},\n  addMaterial: function (type, materialTemplate) {\n    this._materials[type] = materialTemplate;\n  },\n  getMaterial: function (type) {\n    return this._materials[type];\n  }\n};\n/**\n * Gets or sets the default texture uniform value.\n * @type {String}\n */\n\nMaterial.DefaultImageId = \"czm_defaultImage\";\n/**\n * Gets or sets the default cube map texture uniform value.\n * @type {String}\n */\n\nMaterial.DefaultCubeMapId = \"czm_defaultCubeMap\";\n/**\n * Gets the name of the color material.\n * @type {String}\n * @readonly\n */\n\nMaterial.ColorType = \"Color\";\n\nMaterial._materialCache.addMaterial(Material.ColorType, {\n  fabric: {\n    type: Material.ColorType,\n    uniforms: {\n      color: new Color(1.0, 0.0, 0.0, 0.5)\n    },\n    components: {\n      diffuse: \"color.rgb\",\n      alpha: \"color.a\"\n    }\n  },\n  translucent: function (material) {\n    return material.uniforms.color.alpha < 1.0;\n  }\n});\n/**\n * Gets the name of the image material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.ImageType = \"Image\";\n\nMaterial._materialCache.addMaterial(Material.ImageType, {\n  fabric: {\n    type: Material.ImageType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      repeat: new Cartesian2(1.0, 1.0),\n      color: new Color(1.0, 1.0, 1.0, 1.0)\n    },\n    components: {\n      diffuse: \"texture2D(image, fract(repeat * materialInput.st)).rgb * color.rgb\",\n      alpha: \"texture2D(image, fract(repeat * materialInput.st)).a * color.a\"\n    }\n  },\n  translucent: function (material) {\n    return material.uniforms.color.alpha < 1.0;\n  }\n});\n/**\n * Gets the name of the diffuce map material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.DiffuseMapType = \"DiffuseMap\";\n\nMaterial._materialCache.addMaterial(Material.DiffuseMapType, {\n  fabric: {\n    type: Material.DiffuseMapType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      channels: \"rgb\",\n      repeat: new Cartesian2(1.0, 1.0)\n    },\n    components: {\n      diffuse: \"texture2D(image, fract(repeat * materialInput.st)).channels\"\n    }\n  },\n  translucent: false\n});\n/**\n * Gets the name of the alpha map material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.AlphaMapType = \"AlphaMap\";\n\nMaterial._materialCache.addMaterial(Material.AlphaMapType, {\n  fabric: {\n    type: Material.AlphaMapType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      channel: \"a\",\n      repeat: new Cartesian2(1.0, 1.0)\n    },\n    components: {\n      alpha: \"texture2D(image, fract(repeat * materialInput.st)).channel\"\n    }\n  },\n  translucent: true\n});\n/**\n * Gets the name of the specular map material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.SpecularMapType = \"SpecularMap\";\n\nMaterial._materialCache.addMaterial(Material.SpecularMapType, {\n  fabric: {\n    type: Material.SpecularMapType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      channel: \"r\",\n      repeat: new Cartesian2(1.0, 1.0)\n    },\n    components: {\n      specular: \"texture2D(image, fract(repeat * materialInput.st)).channel\"\n    }\n  },\n  translucent: false\n});\n/**\n * Gets the name of the emmision map material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.EmissionMapType = \"EmissionMap\";\n\nMaterial._materialCache.addMaterial(Material.EmissionMapType, {\n  fabric: {\n    type: Material.EmissionMapType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      channels: \"rgb\",\n      repeat: new Cartesian2(1.0, 1.0)\n    },\n    components: {\n      emission: \"texture2D(image, fract(repeat * materialInput.st)).channels\"\n    }\n  },\n  translucent: false\n});\n/**\n * Gets the name of the bump map material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.BumpMapType = \"BumpMap\";\n\nMaterial._materialCache.addMaterial(Material.BumpMapType, {\n  fabric: {\n    type: Material.BumpMapType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      channel: \"r\",\n      strength: 0.8,\n      repeat: new Cartesian2(1.0, 1.0)\n    },\n    source: BumpMapMaterial\n  },\n  translucent: false\n});\n/**\n * Gets the name of the normal map material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.NormalMapType = \"NormalMap\";\n\nMaterial._materialCache.addMaterial(Material.NormalMapType, {\n  fabric: {\n    type: Material.NormalMapType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      channels: \"rgb\",\n      strength: 0.8,\n      repeat: new Cartesian2(1.0, 1.0)\n    },\n    source: NormalMapMaterial\n  },\n  translucent: false\n});\n/**\n * Gets the name of the grid material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.GridType = \"Grid\";\n\nMaterial._materialCache.addMaterial(Material.GridType, {\n  fabric: {\n    type: Material.GridType,\n    uniforms: {\n      color: new Color(0.0, 1.0, 0.0, 1.0),\n      cellAlpha: 0.1,\n      lineCount: new Cartesian2(8.0, 8.0),\n      lineThickness: new Cartesian2(1.0, 1.0),\n      lineOffset: new Cartesian2(0.0, 0.0)\n    },\n    source: GridMaterial\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return uniforms.color.alpha < 1.0 || uniforms.cellAlpha < 1.0;\n  }\n});\n/**\n * Gets the name of the stripe material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.StripeType = \"Stripe\";\n\nMaterial._materialCache.addMaterial(Material.StripeType, {\n  fabric: {\n    type: Material.StripeType,\n    uniforms: {\n      horizontal: true,\n      evenColor: new Color(1.0, 1.0, 1.0, 0.5),\n      oddColor: new Color(0.0, 0.0, 1.0, 0.5),\n      offset: 0.0,\n      repeat: 5.0\n    },\n    source: StripeMaterial\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return uniforms.evenColor.alpha < 1.0 || uniforms.oddColor.alpha < 1.0;\n  }\n});\n/**\n * Gets the name of the checkerboard material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.CheckerboardType = \"Checkerboard\";\n\nMaterial._materialCache.addMaterial(Material.CheckerboardType, {\n  fabric: {\n    type: Material.CheckerboardType,\n    uniforms: {\n      lightColor: new Color(1.0, 1.0, 1.0, 0.5),\n      darkColor: new Color(0.0, 0.0, 0.0, 0.5),\n      repeat: new Cartesian2(5.0, 5.0)\n    },\n    source: CheckerboardMaterial\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return uniforms.lightColor.alpha < 1.0 || uniforms.darkColor.alpha < 1.0;\n  }\n});\n/**\n * Gets the name of the dot material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.DotType = \"Dot\";\n\nMaterial._materialCache.addMaterial(Material.DotType, {\n  fabric: {\n    type: Material.DotType,\n    uniforms: {\n      lightColor: new Color(1.0, 1.0, 0.0, 0.75),\n      darkColor: new Color(0.0, 1.0, 1.0, 0.75),\n      repeat: new Cartesian2(5.0, 5.0)\n    },\n    source: DotMaterial\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return uniforms.lightColor.alpha < 1.0 || uniforms.darkColor.alpha < 1.0;\n  }\n});\n/**\n * Gets the name of the water material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.WaterType = \"Water\";\n\nMaterial._materialCache.addMaterial(Material.WaterType, {\n  fabric: {\n    type: Material.WaterType,\n    uniforms: {\n      baseWaterColor: new Color(0.2, 0.3, 0.6, 1.0),\n      blendColor: new Color(0.0, 1.0, 0.699, 1.0),\n      specularMap: Material.DefaultImageId,\n      normalMap: Material.DefaultImageId,\n      frequency: 10.0,\n      animationSpeed: 0.01,\n      amplitude: 1.0,\n      specularIntensity: 0.5,\n      fadeFactor: 1.0\n    },\n    source: WaterMaterial\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return uniforms.baseWaterColor.alpha < 1.0 || uniforms.blendColor.alpha < 1.0;\n  }\n});\n/**\n * Gets the name of the rim lighting material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.RimLightingType = \"RimLighting\";\n\nMaterial._materialCache.addMaterial(Material.RimLightingType, {\n  fabric: {\n    type: Material.RimLightingType,\n    uniforms: {\n      color: new Color(1.0, 0.0, 0.0, 0.7),\n      rimColor: new Color(1.0, 1.0, 1.0, 0.4),\n      width: 0.3\n    },\n    source: RimLightingMaterial\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return uniforms.color.alpha < 1.0 || uniforms.rimColor.alpha < 1.0;\n  }\n});\n/**\n * Gets the name of the fade material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.FadeType = \"Fade\";\n\nMaterial._materialCache.addMaterial(Material.FadeType, {\n  fabric: {\n    type: Material.FadeType,\n    uniforms: {\n      fadeInColor: new Color(1.0, 0.0, 0.0, 1.0),\n      fadeOutColor: new Color(0.0, 0.0, 0.0, 0.0),\n      maximumDistance: 0.5,\n      repeat: true,\n      fadeDirection: {\n        x: true,\n        y: true\n      },\n      time: new Cartesian2(0.5, 0.5)\n    },\n    source: FadeMaterial\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return uniforms.fadeInColor.alpha < 1.0 || uniforms.fadeOutColor.alpha < 1.0;\n  }\n});\n/**\n * Gets the name of the polyline arrow material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.PolylineArrowType = \"PolylineArrow\";\n\nMaterial._materialCache.addMaterial(Material.PolylineArrowType, {\n  fabric: {\n    type: Material.PolylineArrowType,\n    uniforms: {\n      color: new Color(1.0, 1.0, 1.0, 1.0)\n    },\n    source: PolylineArrowMaterial\n  },\n  translucent: true\n});\n/**\n * Gets the name of the polyline glow material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.PolylineDashType = \"PolylineDash\";\n\nMaterial._materialCache.addMaterial(Material.PolylineDashType, {\n  fabric: {\n    type: Material.PolylineDashType,\n    uniforms: {\n      color: new Color(1.0, 0.0, 1.0, 1.0),\n      gapColor: new Color(0.0, 0.0, 0.0, 0.0),\n      dashLength: 16.0,\n      dashPattern: 255.0\n    },\n    source: PolylineDashMaterial\n  },\n  translucent: true\n});\n/**\n * Gets the name of the polyline glow material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.PolylineGlowType = \"PolylineGlow\";\n\nMaterial._materialCache.addMaterial(Material.PolylineGlowType, {\n  fabric: {\n    type: Material.PolylineGlowType,\n    uniforms: {\n      color: new Color(0.0, 0.5, 1.0, 1.0),\n      glowPower: 0.25,\n      taperPower: 1.0\n    },\n    source: PolylineGlowMaterial\n  },\n  translucent: true\n});\n/**\n * Gets the name of the polyline outline material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.PolylineOutlineType = \"PolylineOutline\";\n\nMaterial._materialCache.addMaterial(Material.PolylineOutlineType, {\n  fabric: {\n    type: Material.PolylineOutlineType,\n    uniforms: {\n      color: new Color(1.0, 1.0, 1.0, 1.0),\n      outlineColor: new Color(1.0, 0.0, 0.0, 1.0),\n      outlineWidth: 1.0\n    },\n    source: PolylineOutlineMaterial\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return uniforms.color.alpha < 1.0 || uniforms.outlineColor.alpha < 1.0;\n  }\n});\n/**\n * Gets the name of the elevation contour material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.ElevationContourType = \"ElevationContour\";\n\nMaterial._materialCache.addMaterial(Material.ElevationContourType, {\n  fabric: {\n    type: Material.ElevationContourType,\n    uniforms: {\n      spacing: 100.0,\n      color: new Color(1.0, 0.0, 0.0, 1.0),\n      width: 1.0\n    },\n    source: ElevationContourMaterial\n  },\n  translucent: false\n});\n/**\n * Gets the name of the elevation contour material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.ElevationRampType = \"ElevationRamp\";\n\nMaterial._materialCache.addMaterial(Material.ElevationRampType, {\n  fabric: {\n    type: Material.ElevationRampType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      minimumHeight: 0.0,\n      maximumHeight: 10000.0\n    },\n    source: ElevationRampMaterial\n  },\n  translucent: false\n});\n/**\n * Gets the name of the slope ramp material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.SlopeRampMaterialType = \"SlopeRamp\";\n\nMaterial._materialCache.addMaterial(Material.SlopeRampMaterialType, {\n  fabric: {\n    type: Material.SlopeRampMaterialType,\n    uniforms: {\n      image: Material.DefaultImageId\n    },\n    source: SlopeRampMaterial\n  },\n  translucent: false\n});\n/**\n * Gets the name of the aspect ramp material.\n * @type {String}\n * @readonly\n */\n\n\nMaterial.AspectRampMaterialType = \"AspectRamp\";\n\nMaterial._materialCache.addMaterial(Material.AspectRampMaterialType, {\n  fabric: {\n    type: Material.AspectRampMaterialType,\n    uniforms: {\n      image: Material.DefaultImageId\n    },\n    source: AspectRampMaterial\n  },\n  translucent: false\n});\n\nexport default Material;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/Material.js"],"names":["Cartesian2","clone","Color","combine","createGuid","defaultValue","defined","destroyObject","DeveloperError","loadCRN","loadKTX","Matrix2","Matrix3","Matrix4","Resource","CubeMap","Texture","AspectRampMaterial","BumpMapMaterial","CheckerboardMaterial","DotMaterial","ElevationContourMaterial","ElevationRampMaterial","FadeMaterial","GridMaterial","NormalMapMaterial","PolylineArrowMaterial","PolylineDashMaterial","PolylineGlowMaterial","PolylineOutlineMaterial","RimLightingMaterial","Sampler","SlopeRampMaterial","StripeMaterial","TextureMagnificationFilter","TextureMinificationFilter","WaterMaterial","when","Material","options","type","undefined","shaderSource","materials","uniforms","_uniforms","translucent","_minificationFilter","minificationFilter","LINEAR","_magnificationFilter","magnificationFilter","_strict","_template","_count","_texturePaths","_loadedImages","_loadedCubeMaps","_textures","_updateFunctions","_defaultTexture","initializeMaterial","Object","defineProperties","value","writable","_uniformList","keys","fromType","_materialCache","getMaterial","material","fabric","name","hasOwnProperty","prototype","isTranslucent","funcs","_translucentFunctions","length","i","func","update","context","uniformId","loadedImages","loadedImage","id","image","sampler","texture","internalFormat","pixelFormat","width","height","source","arrayBufferView","bufferView","uniformDimensionsName","uniformDimensions","x","_width","y","_height","loadedCubeMaps","loadedCubeMap","images","cubeMap","positiveX","negativeX","positiveY","negativeY","positiveZ","negativeZ","updateFunctions","subMaterials","isDestroyed","destroy","textures","instance","result","EMPTY_OBJECT","strict","count","cachedMaterial","template","checkForTemplateErrors","addMaterial","createMethodDefinition","createUniforms","createSubMaterials","defaultTranslucent","wrappedTranslucent","push","checkForValidProperties","object","properties","throwNotFound","property","hasProperty","indexOf","invalidNameError","errorString","propertyName","duplicateNameError","templateProperties","componentProperties","components","materialNames","isMaterialFused","shaderComponent","subMaterialId","isMultiMaterial","component","isFusion","componentSource","alpha","matrixMap","mat2","mat3","mat4","ktxRegex","crnRegex","createTexture2DUpdateFunction","oldUniformValue","uniformValue","uniformChanged","HTMLVideoElement","readyState","defaultTexture","copyFrom","tmp","DefaultImageId","isResource","url","resource","createIfNeeded","promise","test","fetchImage","HTMLCanvasElement","HTMLImageElement","createCubeMapUpdateFunction","defaultCubeMap","DefaultCubeMapId","path","promises","all","then","createUniform","materialUniforms","uniformType","getUniformType","replacedTokenCount","replaceToken","imageDimensionsUniformName","getNumberOfTokens","uniformDeclarationRegex","RegExp","uniformDeclaration","newUniformId","scratchMatrix","fromColumnMajorArray","Array","isArray","Math","sqrt","numAttributes","attribute","subMaterialTemplates","subMaterial","concat","originalMethodName","newMethodName","materialMethodCall","tokensReplacedCount","token","newToken","excludePeriod","suffixChars","prefixChars","regExp","replace","$0","$1","$2","_materials","materialTemplate","ColorType","color","diffuse","ImageType","repeat","DiffuseMapType","channels","AlphaMapType","channel","SpecularMapType","specular","EmissionMapType","emission","BumpMapType","strength","NormalMapType","GridType","cellAlpha","lineCount","lineThickness","lineOffset","StripeType","horizontal","evenColor","oddColor","offset","CheckerboardType","lightColor","darkColor","DotType","WaterType","baseWaterColor","blendColor","specularMap","normalMap","frequency","animationSpeed","amplitude","specularIntensity","fadeFactor","RimLightingType","rimColor","FadeType","fadeInColor","fadeOutColor","maximumDistance","fadeDirection","time","PolylineArrowType","PolylineDashType","gapColor","dashLength","dashPattern","PolylineGlowType","glowPower","taperPower","PolylineOutlineType","outlineColor","outlineWidth","ElevationContourType","spacing","ElevationRampType","minimumHeight","maximumHeight","SlopeRampMaterialType","AspectRampMaterialType"],"mappings":"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","sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport clone from \"../Core/clone.js\";\nimport Color from \"../Core/Color.js\";\nimport combine from \"../Core/combine.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport loadCRN from \"../Core/loadCRN.js\";\nimport loadKTX from \"../Core/loadKTX.js\";\nimport Matrix2 from \"../Core/Matrix2.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Resource from \"../Core/Resource.js\";\nimport CubeMap from \"../Renderer/CubeMap.js\";\nimport Texture from \"../Renderer/Texture.js\";\nimport AspectRampMaterial from \"../Shaders/Materials/AspectRampMaterial.js\";\nimport BumpMapMaterial from \"../Shaders/Materials/BumpMapMaterial.js\";\nimport CheckerboardMaterial from \"../Shaders/Materials/CheckerboardMaterial.js\";\nimport DotMaterial from \"../Shaders/Materials/DotMaterial.js\";\nimport ElevationContourMaterial from \"../Shaders/Materials/ElevationContourMaterial.js\";\nimport ElevationRampMaterial from \"../Shaders/Materials/ElevationRampMaterial.js\";\nimport FadeMaterial from \"../Shaders/Materials/FadeMaterial.js\";\nimport GridMaterial from \"../Shaders/Materials/GridMaterial.js\";\nimport NormalMapMaterial from \"../Shaders/Materials/NormalMapMaterial.js\";\nimport PolylineArrowMaterial from \"../Shaders/Materials/PolylineArrowMaterial.js\";\nimport PolylineDashMaterial from \"../Shaders/Materials/PolylineDashMaterial.js\";\nimport PolylineGlowMaterial from \"../Shaders/Materials/PolylineGlowMaterial.js\";\nimport PolylineOutlineMaterial from \"../Shaders/Materials/PolylineOutlineMaterial.js\";\nimport RimLightingMaterial from \"../Shaders/Materials/RimLightingMaterial.js\";\nimport Sampler from \"../Renderer/Sampler.js\";\nimport SlopeRampMaterial from \"../Shaders/Materials/SlopeRampMaterial.js\";\nimport StripeMaterial from \"../Shaders/Materials/StripeMaterial.js\";\nimport TextureMagnificationFilter from \"../Renderer/TextureMagnificationFilter.js\";\nimport TextureMinificationFilter from \"../Renderer/TextureMinificationFilter.js\";\nimport WaterMaterial from \"../Shaders/Materials/Water.js\";\nimport when from \"../ThirdParty/when.js\";\n\n/**\n * A Material defines surface appearance through a combination of diffuse, specular,\n * normal, emission, and alpha components. These values are specified using a\n * JSON schema called Fabric which gets parsed and assembled into glsl shader code\n * behind-the-scenes. Check out the {@link https://github.com/CesiumGS/cesium/wiki/Fabric|wiki page}\n * for more details on Fabric.\n * <br /><br />\n * <style type=\"text/css\">\n *  #materialDescriptions code {\n *      font-weight: normal;\n *      font-family: Consolas, 'Lucida Console', Monaco, monospace;\n *      color: #A35A00;\n *  }\n *  #materialDescriptions ul, #materialDescriptions ul ul {\n *      list-style-type: none;\n *  }\n *  #materialDescriptions ul ul {\n *      margin-bottom: 10px;\n *  }\n *  #materialDescriptions ul ul li {\n *      font-weight: normal;\n *      color: #000000;\n *      text-indent: -2em;\n *      margin-left: 2em;\n *  }\n *  #materialDescriptions ul li {\n *      font-weight: bold;\n *      color: #0053CF;\n *  }\n * </style>\n *\n * Base material types and their uniforms:\n * <div id='materialDescriptions'>\n * <ul>\n *  <li>Color</li>\n *  <ul>\n *      <li><code>color</code>:  rgba color object.</li>\n *  </ul>\n *  <li>Image</li>\n *  <ul>\n *      <li><code>image</code>:  path to image.</li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of times to repeat the image.</li>\n *  </ul>\n *  <li>DiffuseMap</li>\n *  <ul>\n *      <li><code>image</code>:  path to image.</li>\n *      <li><code>channels</code>:  Three character string containing any combination of r, g, b, and a for selecting the desired image channels.</li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of times to repeat the image.</li>\n *  </ul>\n *  <li>AlphaMap</li>\n *  <ul>\n *      <li><code>image</code>:  path to image.</li>\n *      <li><code>channel</code>:  One character string containing r, g, b, or a for selecting the desired image channel. </li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of times to repeat the image.</li>\n *  </ul>\n *  <li>SpecularMap</li>\n *  <ul>\n *      <li><code>image</code>: path to image.</li>\n *      <li><code>channel</code>: One character string containing r, g, b, or a for selecting the desired image channel. </li>\n *      <li><code>repeat</code>: Object with x and y values specifying the number of times to repeat the image.</li>\n *  </ul>\n *  <li>EmissionMap</li>\n *  <ul>\n *      <li><code>image</code>:  path to image.</li>\n *      <li><code>channels</code>:  Three character string containing any combination of r, g, b, and a for selecting the desired image channels. </li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of times to repeat the image.</li>\n *  </ul>\n *  <li>BumpMap</li>\n *  <ul>\n *      <li><code>image</code>:  path to image.</li>\n *      <li><code>channel</code>:  One character string containing r, g, b, or a for selecting the desired image channel. </li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of times to repeat the image.</li>\n *      <li><code>strength</code>:  Bump strength value between 0.0 and 1.0 where 0.0 is small bumps and 1.0 is large bumps.</li>\n *  </ul>\n *  <li>NormalMap</li>\n *  <ul>\n *      <li><code>image</code>:  path to image.</li>\n *      <li><code>channels</code>:  Three character string containing any combination of r, g, b, and a for selecting the desired image channels. </li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of times to repeat the image.</li>\n *      <li><code>strength</code>:  Bump strength value between 0.0 and 1.0 where 0.0 is small bumps and 1.0 is large bumps.</li>\n *  </ul>\n *  <li>Grid</li>\n *  <ul>\n *      <li><code>color</code>:  rgba color object for the whole material.</li>\n *      <li><code>cellAlpha</code>: Alpha value for the cells between grid lines.  This will be combined with color.alpha.</li>\n *      <li><code>lineCount</code>:  Object with x and y values specifying the number of columns and rows respectively.</li>\n *      <li><code>lineThickness</code>:  Object with x and y values specifying the thickness of grid lines (in pixels where available).</li>\n *      <li><code>lineOffset</code>:  Object with x and y values specifying the offset of grid lines (range is 0 to 1).</li>\n *  </ul>\n *  <li>Stripe</li>\n *  <ul>\n *      <li><code>horizontal</code>:  Boolean that determines if the stripes are horizontal or vertical.</li>\n *      <li><code>evenColor</code>:  rgba color object for the stripe's first color.</li>\n *      <li><code>oddColor</code>:  rgba color object for the stripe's second color.</li>\n *      <li><code>offset</code>:  Number that controls at which point into the pattern to begin drawing; with 0.0 being the beginning of the even color, 1.0 the beginning of the odd color, 2.0 being the even color again, and any multiple or fractional values being in between.</li>\n *      <li><code>repeat</code>:  Number that controls the total number of stripes, half light and half dark.</li>\n *  </ul>\n *  <li>Checkerboard</li>\n *  <ul>\n *      <li><code>lightColor</code>:  rgba color object for the checkerboard's light alternating color.</li>\n *      <li><code>darkColor</code>: rgba color object for the checkerboard's dark alternating color.</li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of columns and rows respectively.</li>\n *  </ul>\n *  <li>Dot</li>\n *  <ul>\n *      <li><code>lightColor</code>:  rgba color object for the dot color.</li>\n *      <li><code>darkColor</code>:  rgba color object for the background color.</li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of columns and rows of dots respectively.</li>\n *  </ul>\n *  <li>Water</li>\n *  <ul>\n *      <li><code>baseWaterColor</code>:  rgba color object base color of the water.</li>\n *      <li><code>blendColor</code>:  rgba color object used when blending from water to non-water areas.</li>\n *      <li><code>specularMap</code>:  Single channel texture used to indicate areas of water.</li>\n *      <li><code>normalMap</code>:  Normal map for water normal perturbation.</li>\n *      <li><code>frequency</code>:  Number that controls the number of waves.</li>\n *      <li><code>normalMap</code>:  Normal map for water normal perturbation.</li>\n *      <li><code>animationSpeed</code>:  Number that controls the animations speed of the water.</li>\n *      <li><code>amplitude</code>:  Number that controls the amplitude of water waves.</li>\n *      <li><code>specularIntensity</code>:  Number that controls the intensity of specular reflections.</li>\n *  </ul>\n *  <li>RimLighting</li>\n *  <ul>\n *      <li><code>color</code>:  diffuse color and alpha.</li>\n *      <li><code>rimColor</code>:  diffuse color and alpha of the rim.</li>\n *      <li><code>width</code>:  Number that determines the rim's width.</li>\n *  </ul>\n *  <li>Fade</li>\n *  <ul>\n *      <li><code>fadeInColor</code>: diffuse color and alpha at <code>time</code></li>\n *      <li><code>fadeOutColor</code>: diffuse color and alpha at <code>maximumDistance</code> from <code>time</code></li>\n *      <li><code>maximumDistance</code>: Number between 0.0 and 1.0 where the <code>fadeInColor</code> becomes the <code>fadeOutColor</code>. A value of 0.0 gives the entire material a color of <code>fadeOutColor</code> and a value of 1.0 gives the the entire material a color of <code>fadeInColor</code></li>\n *      <li><code>repeat</code>: true if the fade should wrap around the texture coodinates.</li>\n *      <li><code>fadeDirection</code>: Object with x and y values specifying if the fade should be in the x and y directions.</li>\n *      <li><code>time</code>: Object with x and y values between 0.0 and 1.0 of the <code>fadeInColor</code> position</li>\n *  </ul>\n *  <li>PolylineArrow</li>\n *  <ul>\n *      <li><code>color</code>: diffuse color and alpha.</li>\n *  </ul>\n *  <li>PolylineDash</li>\n *  <ul>\n *      <li><code>color</code>: color for the line.</li>\n *      <li><code>gapColor</code>: color for the gaps in the line.</li>\n *      <li><code>dashLength</code>: Dash length in pixels.</li>\n *      <li><code>dashPattern</code>: The 16 bit stipple pattern for the line..</li>\n *  </ul>\n *  <li>PolylineGlow</li>\n *  <ul>\n *      <li><code>color</code>: color and maximum alpha for the glow on the line.</li>\n *      <li><code>glowPower</code>: strength of the glow, as a percentage of the total line width (less than 1.0).</li>\n *      <li><code>taperPower</code>: strength of the tapering effect, as a percentage of the total line length.  If 1.0 or higher, no taper effect is used.</li>\n *  </ul>\n *  <li>PolylineOutline</li>\n *  <ul>\n *      <li><code>color</code>: diffuse color and alpha for the interior of the line.</li>\n *      <li><code>outlineColor</code>: diffuse color and alpha for the outline.</li>\n *      <li><code>outlineWidth</code>: width of the outline in pixels.</li>\n *  </ul>\n *  <li>ElevationContour</li>\n *  <ul>\n *      <li><code>color</code>: color and alpha for the contour line.</li>\n *      <li><code>spacing</code>: spacing for contour lines in meters.</li>\n *      <li><code>width</code>: Number specifying the width of the grid lines in pixels.</li>\n *  </ul>\n *  <li>ElevationRamp</li>\n *  <ul>\n *      <li><code>image</code>: color ramp image to use for coloring the terrain.</li>\n *      <li><code>minimumHeight</code>: minimum height for the ramp.</li>\n *      <li><code>maximumHeight</code>: maximum height for the ramp.</li>\n *  </ul>\n *  <li>SlopeRamp</li>\n *  <ul>\n *      <li><code>image</code>: color ramp image to use for coloring the terrain by slope.</li>\n *  </ul>\n *  <li>AspectRamp</li>\n *  <ul>\n *      <li><code>image</code>: color ramp image to use for color the terrain by aspect.</li>\n *  </ul>\n * </ul>\n * </ul>\n * </div>\n *\n * @alias Material\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.strict=false] Throws errors for issues that would normally be ignored, including unused uniforms or materials.\n * @param {Boolean|Function} [options.translucent=true] When <code>true</code> or a function that returns <code>true</code>, the geometry\n *                           with this material is expected to appear translucent.\n * @param {TextureMinificationFilter} [options.minificationFilter=TextureMinificationFilter.LINEAR] The {@link TextureMinificationFilter} to apply to this material's textures.\n * @param {TextureMagnificationFilter} [options.magnificationFilter=TextureMagnificationFilter.LINEAR] The {@link TextureMagnificationFilter} to apply to this material's textures.\n * @param {Object} options.fabric The fabric JSON used to generate the material.\n *\n * @constructor\n *\n * @exception {DeveloperError} fabric: uniform has invalid type.\n * @exception {DeveloperError} fabric: uniforms and materials cannot share the same property.\n * @exception {DeveloperError} fabric: cannot have source and components in the same section.\n * @exception {DeveloperError} fabric: property name is not valid. It should be 'type', 'materials', 'uniforms', 'components', or 'source'.\n * @exception {DeveloperError} fabric: property name is not valid. It should be 'diffuse', 'specular', 'shininess', 'normal', 'emission', or 'alpha'.\n * @exception {DeveloperError} strict: shader source does not use string.\n * @exception {DeveloperError} strict: shader source does not use uniform.\n * @exception {DeveloperError} strict: shader source does not use material.\n *\n * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric wiki page} for a more detailed options of Fabric.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Materials.html|Cesium Sandcastle Materials Demo}\n *\n * @example\n * // Create a color material with fromType:\n * polygon.material = Cesium.Material.fromType('Color');\n * polygon.material.uniforms.color = new Cesium.Color(1.0, 1.0, 0.0, 1.0);\n *\n * // Create the default material:\n * polygon.material = new Cesium.Material();\n *\n * // Create a color material with full Fabric notation:\n * polygon.material = new Cesium.Material({\n *     fabric : {\n *         type : 'Color',\n *         uniforms : {\n *             color : new Cesium.Color(1.0, 1.0, 0.0, 1.0)\n *         }\n *     }\n * });\n */\nfunction Material(options) {\n  /**\n   * The material type. Can be an existing type or a new type. If no type is specified in fabric, type is a GUID.\n   * @type {String}\n   * @default undefined\n   */\n  this.type = undefined;\n\n  /**\n   * The glsl shader source for this material.\n   * @type {String}\n   * @default undefined\n   */\n  this.shaderSource = undefined;\n\n  /**\n   * Maps sub-material names to Material objects.\n   * @type {Object}\n   * @default undefined\n   */\n  this.materials = undefined;\n\n  /**\n   * Maps uniform names to their values.\n   * @type {Object}\n   * @default undefined\n   */\n  this.uniforms = undefined;\n  this._uniforms = undefined;\n\n  /**\n   * When <code>true</code> or a function that returns <code>true</code>,\n   * the geometry is expected to appear translucent.\n   * @type {Boolean|Function}\n   * @default undefined\n   */\n  this.translucent = undefined;\n\n  this._minificationFilter = defaultValue(\n    options.minificationFilter,\n    TextureMinificationFilter.LINEAR\n  );\n  this._magnificationFilter = defaultValue(\n    options.magnificationFilter,\n    TextureMagnificationFilter.LINEAR\n  );\n\n  this._strict = undefined;\n  this._template = undefined;\n  this._count = undefined;\n\n  this._texturePaths = {};\n  this._loadedImages = [];\n  this._loadedCubeMaps = [];\n\n  this._textures = {};\n\n  this._updateFunctions = [];\n\n  this._defaultTexture = undefined;\n\n  initializeMaterial(options, this);\n  Object.defineProperties(this, {\n    type: {\n      value: this.type,\n      writable: false,\n    },\n  });\n\n  if (!defined(Material._uniformList[this.type])) {\n    Material._uniformList[this.type] = Object.keys(this._uniforms);\n  }\n}\n\n// Cached list of combined uniform names indexed by type.\n// Used to get the list of uniforms in the same order.\nMaterial._uniformList = {};\n\n/**\n * Creates a new material using an existing material type.\n * <br /><br />\n * Shorthand for: new Material({fabric : {type : type}});\n *\n * @param {String} type The base material type.\n * @param {Object} [uniforms] Overrides for the default uniforms.\n * @returns {Material} New material object.\n *\n * @exception {DeveloperError} material with that type does not exist.\n *\n * @example\n * var material = Cesium.Material.fromType('Color', {\n *     color : new Cesium.Color(1.0, 0.0, 0.0, 1.0)\n * });\n */\nMaterial.fromType = function (type, uniforms) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(Material._materialCache.getMaterial(type))) {\n    throw new DeveloperError(\n      \"material with type '\" + type + \"' does not exist.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var material = new Material({\n    fabric: {\n      type: type,\n    },\n  });\n\n  if (defined(uniforms)) {\n    for (var name in uniforms) {\n      if (uniforms.hasOwnProperty(name)) {\n        material.uniforms[name] = uniforms[name];\n      }\n    }\n  }\n\n  return material;\n};\n\n/**\n * Gets whether or not this material is translucent.\n * @returns {Boolean} <code>true</code> if this material is translucent, <code>false</code> otherwise.\n */\nMaterial.prototype.isTranslucent = function () {\n  if (defined(this.translucent)) {\n    if (typeof this.translucent === \"function\") {\n      return this.translucent();\n    }\n\n    return this.translucent;\n  }\n\n  var translucent = true;\n  var funcs = this._translucentFunctions;\n  var length = funcs.length;\n  for (var i = 0; i < length; ++i) {\n    var func = funcs[i];\n    if (typeof func === \"function\") {\n      translucent = translucent && func();\n    } else {\n      translucent = translucent && func;\n    }\n\n    if (!translucent) {\n      break;\n    }\n  }\n  return translucent;\n};\n\n/**\n * @private\n */\nMaterial.prototype.update = function (context) {\n  var i;\n  var uniformId;\n\n  var loadedImages = this._loadedImages;\n  var length = loadedImages.length;\n\n  for (i = 0; i < length; ++i) {\n    var loadedImage = loadedImages[i];\n    uniformId = loadedImage.id;\n    var image = loadedImage.image;\n\n    var sampler = new Sampler({\n      minificationFilter: this._minificationFilter,\n      magnificationFilter: this._magnificationFilter,\n    });\n\n    var texture;\n    if (defined(image.internalFormat)) {\n      texture = new Texture({\n        context: context,\n        pixelFormat: image.internalFormat,\n        width: image.width,\n        height: image.height,\n        source: {\n          arrayBufferView: image.bufferView,\n        },\n        sampler: sampler,\n      });\n    } else {\n      texture = new Texture({\n        context: context,\n        source: image,\n        sampler: sampler,\n      });\n    }\n\n    this._textures[uniformId] = texture;\n\n    var uniformDimensionsName = uniformId + \"Dimensions\";\n    if (this.uniforms.hasOwnProperty(uniformDimensionsName)) {\n      var uniformDimensions = this.uniforms[uniformDimensionsName];\n      uniformDimensions.x = texture._width;\n      uniformDimensions.y = texture._height;\n    }\n  }\n\n  loadedImages.length = 0;\n\n  var loadedCubeMaps = this._loadedCubeMaps;\n  length = loadedCubeMaps.length;\n\n  for (i = 0; i < length; ++i) {\n    var loadedCubeMap = loadedCubeMaps[i];\n    uniformId = loadedCubeMap.id;\n    var images = loadedCubeMap.images;\n\n    var cubeMap = new CubeMap({\n      context: context,\n      source: {\n        positiveX: images[0],\n        negativeX: images[1],\n        positiveY: images[2],\n        negativeY: images[3],\n        positiveZ: images[4],\n        negativeZ: images[5],\n      },\n      sampler: new Sampler({\n        minificationFilter: this._minificationFilter,\n        magnificationFilter: this._magnificationFilter,\n      }),\n    });\n\n    this._textures[uniformId] = cubeMap;\n  }\n\n  loadedCubeMaps.length = 0;\n\n  var updateFunctions = this._updateFunctions;\n  length = updateFunctions.length;\n  for (i = 0; i < length; ++i) {\n    updateFunctions[i](this, context);\n  }\n\n  var subMaterials = this.materials;\n  for (var name in subMaterials) {\n    if (subMaterials.hasOwnProperty(name)) {\n      subMaterials[name].update(context);\n    }\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see Material#destroy\n */\nMaterial.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * material = material && material.destroy();\n *\n * @see Material#isDestroyed\n */\nMaterial.prototype.destroy = function () {\n  var textures = this._textures;\n  for (var texture in textures) {\n    if (textures.hasOwnProperty(texture)) {\n      var instance = textures[texture];\n      if (instance !== this._defaultTexture) {\n        instance.destroy();\n      }\n    }\n  }\n\n  var materials = this.materials;\n  for (var material in materials) {\n    if (materials.hasOwnProperty(material)) {\n      materials[material].destroy();\n    }\n  }\n  return destroyObject(this);\n};\n\nfunction initializeMaterial(options, result) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  result._strict = defaultValue(options.strict, false);\n  result._count = defaultValue(options.count, 0);\n  result._template = clone(\n    defaultValue(options.fabric, defaultValue.EMPTY_OBJECT)\n  );\n  result._template.uniforms = clone(\n    defaultValue(result._template.uniforms, defaultValue.EMPTY_OBJECT)\n  );\n  result._template.materials = clone(\n    defaultValue(result._template.materials, defaultValue.EMPTY_OBJECT)\n  );\n\n  result.type = defined(result._template.type)\n    ? result._template.type\n    : createGuid();\n\n  result.shaderSource = \"\";\n  result.materials = {};\n  result.uniforms = {};\n  result._uniforms = {};\n  result._translucentFunctions = [];\n\n  var translucent;\n\n  // If the cache contains this material type, build the material template off of the stored template.\n  var cachedMaterial = Material._materialCache.getMaterial(result.type);\n  if (defined(cachedMaterial)) {\n    var template = clone(cachedMaterial.fabric, true);\n    result._template = combine(result._template, template, true);\n    translucent = cachedMaterial.translucent;\n  }\n\n  // Make sure the template has no obvious errors. More error checking happens later.\n  checkForTemplateErrors(result);\n\n  // If the material has a new type, add it to the cache.\n  if (!defined(cachedMaterial)) {\n    Material._materialCache.addMaterial(result.type, result);\n  }\n\n  createMethodDefinition(result);\n  createUniforms(result);\n  createSubMaterials(result);\n\n  var defaultTranslucent =\n    result._translucentFunctions.length === 0 ? true : undefined;\n  translucent = defaultValue(translucent, defaultTranslucent);\n  translucent = defaultValue(options.translucent, translucent);\n\n  if (defined(translucent)) {\n    if (typeof translucent === \"function\") {\n      var wrappedTranslucent = function () {\n        return translucent(result);\n      };\n      result._translucentFunctions.push(wrappedTranslucent);\n    } else {\n      result._translucentFunctions.push(translucent);\n    }\n  }\n}\n\nfunction checkForValidProperties(object, properties, result, throwNotFound) {\n  if (defined(object)) {\n    for (var property in object) {\n      if (object.hasOwnProperty(property)) {\n        var hasProperty = properties.indexOf(property) !== -1;\n        if (\n          (throwNotFound && !hasProperty) ||\n          (!throwNotFound && hasProperty)\n        ) {\n          result(property, properties);\n        }\n      }\n    }\n  }\n}\n\nfunction invalidNameError(property, properties) {\n  //>>includeStart('debug', pragmas.debug);\n  var errorString =\n    \"fabric: property name '\" + property + \"' is not valid. It should be \";\n  for (var i = 0; i < properties.length; i++) {\n    var propertyName = \"'\" + properties[i] + \"'\";\n    errorString +=\n      i === properties.length - 1\n        ? \"or \" + propertyName + \".\"\n        : propertyName + \", \";\n  }\n  throw new DeveloperError(errorString);\n  //>>includeEnd('debug');\n}\n\nfunction duplicateNameError(property, properties) {\n  //>>includeStart('debug', pragmas.debug);\n  var errorString =\n    \"fabric: uniforms and materials cannot share the same property '\" +\n    property +\n    \"'\";\n  throw new DeveloperError(errorString);\n  //>>includeEnd('debug');\n}\n\nvar templateProperties = [\n  \"type\",\n  \"materials\",\n  \"uniforms\",\n  \"components\",\n  \"source\",\n];\nvar componentProperties = [\n  \"diffuse\",\n  \"specular\",\n  \"shininess\",\n  \"normal\",\n  \"emission\",\n  \"alpha\",\n];\n\nfunction checkForTemplateErrors(material) {\n  var template = material._template;\n  var uniforms = template.uniforms;\n  var materials = template.materials;\n  var components = template.components;\n\n  // Make sure source and components do not exist in the same template.\n  //>>includeStart('debug', pragmas.debug);\n  if (defined(components) && defined(template.source)) {\n    throw new DeveloperError(\n      \"fabric: cannot have source and components in the same template.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  // Make sure all template and components properties are valid.\n  checkForValidProperties(template, templateProperties, invalidNameError, true);\n  checkForValidProperties(\n    components,\n    componentProperties,\n    invalidNameError,\n    true\n  );\n\n  // Make sure uniforms and materials do not share any of the same names.\n  var materialNames = [];\n  for (var property in materials) {\n    if (materials.hasOwnProperty(property)) {\n      materialNames.push(property);\n    }\n  }\n  checkForValidProperties(uniforms, materialNames, duplicateNameError, false);\n}\n\nfunction isMaterialFused(shaderComponent, material) {\n  var materials = material._template.materials;\n  for (var subMaterialId in materials) {\n    if (materials.hasOwnProperty(subMaterialId)) {\n      if (shaderComponent.indexOf(subMaterialId) > -1) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n// Create the czm_getMaterial method body using source or components.\nfunction createMethodDefinition(material) {\n  var components = material._template.components;\n  var source = material._template.source;\n  if (defined(source)) {\n    material.shaderSource += source + \"\\n\";\n  } else {\n    material.shaderSource +=\n      \"czm_material czm_getMaterial(czm_materialInput materialInput)\\n{\\n\";\n    material.shaderSource +=\n      \"czm_material material = czm_getDefaultMaterial(materialInput);\\n\";\n    if (defined(components)) {\n      var isMultiMaterial =\n        Object.keys(material._template.materials).length > 0;\n      for (var component in components) {\n        if (components.hasOwnProperty(component)) {\n          if (component === \"diffuse\" || component === \"emission\") {\n            var isFusion =\n              isMultiMaterial &&\n              isMaterialFused(components[component], material);\n            var componentSource = isFusion\n              ? components[component]\n              : \"czm_gammaCorrect(\" + components[component] + \")\";\n            material.shaderSource +=\n              \"material.\" + component + \" = \" + componentSource + \"; \\n\";\n          } else if (component === \"alpha\") {\n            material.shaderSource +=\n              \"material.alpha = \" + components.alpha + \"; \\n\";\n          } else {\n            material.shaderSource +=\n              \"material.\" + component + \" = \" + components[component] + \";\\n\";\n          }\n        }\n      }\n    }\n    material.shaderSource += \"return material;\\n}\\n\";\n  }\n}\n\nvar matrixMap = {\n  mat2: Matrix2,\n  mat3: Matrix3,\n  mat4: Matrix4,\n};\n\nvar ktxRegex = /\\.ktx$/i;\nvar crnRegex = /\\.crn$/i;\n\nfunction createTexture2DUpdateFunction(uniformId) {\n  var oldUniformValue;\n  return function (material, context) {\n    var uniforms = material.uniforms;\n    var uniformValue = uniforms[uniformId];\n    var uniformChanged = oldUniformValue !== uniformValue;\n    oldUniformValue = uniformValue;\n    var texture = material._textures[uniformId];\n\n    var uniformDimensionsName;\n    var uniformDimensions;\n\n    if (uniformValue instanceof HTMLVideoElement) {\n      // HTMLVideoElement.readyState >=2 means we have enough data for the current frame.\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState\n      if (uniformValue.readyState >= 2) {\n        if (uniformChanged && defined(texture)) {\n          if (texture !== context.defaultTexture) {\n            texture.destroy();\n          }\n          texture = undefined;\n        }\n\n        if (!defined(texture) || texture === context.defaultTexture) {\n          var sampler = new Sampler({\n            minificationFilter: material._minificationFilter,\n            magnificationFilter: material._magnificationFilter,\n          });\n          texture = new Texture({\n            context: context,\n            source: uniformValue,\n            sampler: sampler,\n          });\n          material._textures[uniformId] = texture;\n          return;\n        }\n\n        texture.copyFrom(uniformValue);\n      } else if (!defined(texture)) {\n        material._textures[uniformId] = context.defaultTexture;\n      }\n      return;\n    }\n\n    if (uniformValue instanceof Texture && uniformValue !== texture) {\n      material._texturePaths[uniformId] = undefined;\n      var tmp = material._textures[uniformId];\n      if (tmp !== material._defaultTexture) {\n        tmp.destroy();\n      }\n      material._textures[uniformId] = uniformValue;\n\n      uniformDimensionsName = uniformId + \"Dimensions\";\n      if (uniforms.hasOwnProperty(uniformDimensionsName)) {\n        uniformDimensions = uniforms[uniformDimensionsName];\n        uniformDimensions.x = uniformValue._width;\n        uniformDimensions.y = uniformValue._height;\n      }\n\n      return;\n    }\n\n    if (!defined(texture)) {\n      material._texturePaths[uniformId] = undefined;\n      if (!defined(material._defaultTexture)) {\n        material._defaultTexture = context.defaultTexture;\n      }\n      texture = material._textures[uniformId] = material._defaultTexture;\n\n      uniformDimensionsName = uniformId + \"Dimensions\";\n      if (uniforms.hasOwnProperty(uniformDimensionsName)) {\n        uniformDimensions = uniforms[uniformDimensionsName];\n        uniformDimensions.x = texture._width;\n        uniformDimensions.y = texture._height;\n      }\n    }\n\n    if (uniformValue === Material.DefaultImageId) {\n      return;\n    }\n\n    // When using the entity layer, the Resource objects get recreated on getValue because\n    //  they are clonable. That's why we check the url property for Resources\n    //  because the instances aren't the same and we keep trying to load the same\n    //  image if it fails to load.\n    var isResource = uniformValue instanceof Resource;\n    if (\n      !defined(material._texturePaths[uniformId]) ||\n      (isResource &&\n        uniformValue.url !== material._texturePaths[uniformId].url) ||\n      (!isResource && uniformValue !== material._texturePaths[uniformId])\n    ) {\n      if (typeof uniformValue === \"string\" || isResource) {\n        var resource = isResource\n          ? uniformValue\n          : Resource.createIfNeeded(uniformValue);\n\n        var promise;\n        if (ktxRegex.test(resource.url)) {\n          promise = loadKTX(resource);\n        } else if (crnRegex.test(resource.url)) {\n          promise = loadCRN(resource);\n        } else {\n          promise = resource.fetchImage();\n        }\n        when(promise, function (image) {\n          material._loadedImages.push({\n            id: uniformId,\n            image: image,\n          });\n        });\n      } else if (\n        uniformValue instanceof HTMLCanvasElement ||\n        uniformValue instanceof HTMLImageElement\n      ) {\n        material._loadedImages.push({\n          id: uniformId,\n          image: uniformValue,\n        });\n      }\n\n      material._texturePaths[uniformId] = uniformValue;\n    }\n  };\n}\n\nfunction createCubeMapUpdateFunction(uniformId) {\n  return function (material, context) {\n    var uniformValue = material.uniforms[uniformId];\n\n    if (uniformValue instanceof CubeMap) {\n      var tmp = material._textures[uniformId];\n      if (tmp !== material._defaultTexture) {\n        tmp.destroy();\n      }\n      material._texturePaths[uniformId] = undefined;\n      material._textures[uniformId] = uniformValue;\n      return;\n    }\n\n    if (!defined(material._textures[uniformId])) {\n      material._texturePaths[uniformId] = undefined;\n      material._textures[uniformId] = context.defaultCubeMap;\n    }\n\n    if (uniformValue === Material.DefaultCubeMapId) {\n      return;\n    }\n\n    var path =\n      uniformValue.positiveX +\n      uniformValue.negativeX +\n      uniformValue.positiveY +\n      uniformValue.negativeY +\n      uniformValue.positiveZ +\n      uniformValue.negativeZ;\n\n    if (path !== material._texturePaths[uniformId]) {\n      var promises = [\n        Resource.createIfNeeded(uniformValue.positiveX).fetchImage(),\n        Resource.createIfNeeded(uniformValue.negativeX).fetchImage(),\n        Resource.createIfNeeded(uniformValue.positiveY).fetchImage(),\n        Resource.createIfNeeded(uniformValue.negativeY).fetchImage(),\n        Resource.createIfNeeded(uniformValue.positiveZ).fetchImage(),\n        Resource.createIfNeeded(uniformValue.negativeZ).fetchImage(),\n      ];\n\n      when.all(promises).then(function (images) {\n        material._loadedCubeMaps.push({\n          id: uniformId,\n          images: images,\n        });\n      });\n\n      material._texturePaths[uniformId] = path;\n    }\n  };\n}\n\nfunction createUniforms(material) {\n  var uniforms = material._template.uniforms;\n  for (var uniformId in uniforms) {\n    if (uniforms.hasOwnProperty(uniformId)) {\n      createUniform(material, uniformId);\n    }\n  }\n}\n\n// Writes uniform declarations to the shader file and connects uniform values with\n// corresponding material properties through the returnUniforms function.\nfunction createUniform(material, uniformId) {\n  var strict = material._strict;\n  var materialUniforms = material._template.uniforms;\n  var uniformValue = materialUniforms[uniformId];\n  var uniformType = getUniformType(uniformValue);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(uniformType)) {\n    throw new DeveloperError(\n      \"fabric: uniform '\" + uniformId + \"' has invalid type.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var replacedTokenCount;\n  if (uniformType === \"channels\") {\n    replacedTokenCount = replaceToken(material, uniformId, uniformValue, false);\n    //>>includeStart('debug', pragmas.debug);\n    if (replacedTokenCount === 0 && strict) {\n      throw new DeveloperError(\n        \"strict: shader source does not use channels '\" + uniformId + \"'.\"\n      );\n    }\n    //>>includeEnd('debug');\n  } else {\n    // Since webgl doesn't allow texture dimension queries in glsl, create a uniform to do it.\n    // Check if the shader source actually uses texture dimensions before creating the uniform.\n    if (uniformType === \"sampler2D\") {\n      var imageDimensionsUniformName = uniformId + \"Dimensions\";\n      if (getNumberOfTokens(material, imageDimensionsUniformName) > 0) {\n        materialUniforms[imageDimensionsUniformName] = {\n          type: \"ivec3\",\n          x: 1,\n          y: 1,\n        };\n        createUniform(material, imageDimensionsUniformName);\n      }\n    }\n\n    // Add uniform declaration to source code.\n    var uniformDeclarationRegex = new RegExp(\n      \"uniform\\\\s+\" + uniformType + \"\\\\s+\" + uniformId + \"\\\\s*;\"\n    );\n    if (!uniformDeclarationRegex.test(material.shaderSource)) {\n      var uniformDeclaration = \"uniform \" + uniformType + \" \" + uniformId + \";\";\n      material.shaderSource = uniformDeclaration + material.shaderSource;\n    }\n\n    var newUniformId = uniformId + \"_\" + material._count++;\n    replacedTokenCount = replaceToken(material, uniformId, newUniformId);\n    //>>includeStart('debug', pragmas.debug);\n    if (replacedTokenCount === 1 && strict) {\n      throw new DeveloperError(\n        \"strict: shader source does not use uniform '\" + uniformId + \"'.\"\n      );\n    }\n    //>>includeEnd('debug');\n\n    // Set uniform value\n    material.uniforms[uniformId] = uniformValue;\n\n    if (uniformType === \"sampler2D\") {\n      material._uniforms[newUniformId] = function () {\n        return material._textures[uniformId];\n      };\n      material._updateFunctions.push(createTexture2DUpdateFunction(uniformId));\n    } else if (uniformType === \"samplerCube\") {\n      material._uniforms[newUniformId] = function () {\n        return material._textures[uniformId];\n      };\n      material._updateFunctions.push(createCubeMapUpdateFunction(uniformId));\n    } else if (uniformType.indexOf(\"mat\") !== -1) {\n      var scratchMatrix = new matrixMap[uniformType]();\n      material._uniforms[newUniformId] = function () {\n        return matrixMap[uniformType].fromColumnMajorArray(\n          material.uniforms[uniformId],\n          scratchMatrix\n        );\n      };\n    } else {\n      material._uniforms[newUniformId] = function () {\n        return material.uniforms[uniformId];\n      };\n    }\n  }\n}\n\n// Determines the uniform type based on the uniform in the template.\nfunction getUniformType(uniformValue) {\n  var uniformType = uniformValue.type;\n  if (!defined(uniformType)) {\n    var type = typeof uniformValue;\n    if (type === \"number\") {\n      uniformType = \"float\";\n    } else if (type === \"boolean\") {\n      uniformType = \"bool\";\n    } else if (\n      type === \"string\" ||\n      uniformValue instanceof Resource ||\n      uniformValue instanceof HTMLCanvasElement ||\n      uniformValue instanceof HTMLImageElement\n    ) {\n      if (/^([rgba]){1,4}$/i.test(uniformValue)) {\n        uniformType = \"channels\";\n      } else if (uniformValue === Material.DefaultCubeMapId) {\n        uniformType = \"samplerCube\";\n      } else {\n        uniformType = \"sampler2D\";\n      }\n    } else if (type === \"object\") {\n      if (Array.isArray(uniformValue)) {\n        if (\n          uniformValue.length === 4 ||\n          uniformValue.length === 9 ||\n          uniformValue.length === 16\n        ) {\n          uniformType = \"mat\" + Math.sqrt(uniformValue.length);\n        }\n      } else {\n        var numAttributes = 0;\n        for (var attribute in uniformValue) {\n          if (uniformValue.hasOwnProperty(attribute)) {\n            numAttributes += 1;\n          }\n        }\n        if (numAttributes >= 2 && numAttributes <= 4) {\n          uniformType = \"vec\" + numAttributes;\n        } else if (numAttributes === 6) {\n          uniformType = \"samplerCube\";\n        }\n      }\n    }\n  }\n  return uniformType;\n}\n\n// Create all sub-materials by combining source and uniforms together.\nfunction createSubMaterials(material) {\n  var strict = material._strict;\n  var subMaterialTemplates = material._template.materials;\n  for (var subMaterialId in subMaterialTemplates) {\n    if (subMaterialTemplates.hasOwnProperty(subMaterialId)) {\n      // Construct the sub-material.\n      var subMaterial = new Material({\n        strict: strict,\n        fabric: subMaterialTemplates[subMaterialId],\n        count: material._count,\n      });\n\n      material._count = subMaterial._count;\n      material._uniforms = combine(\n        material._uniforms,\n        subMaterial._uniforms,\n        true\n      );\n      material.materials[subMaterialId] = subMaterial;\n      material._translucentFunctions = material._translucentFunctions.concat(\n        subMaterial._translucentFunctions\n      );\n\n      // Make the material's czm_getMaterial unique by appending the sub-material type.\n      var originalMethodName = \"czm_getMaterial\";\n      var newMethodName = originalMethodName + \"_\" + material._count++;\n      replaceToken(subMaterial, originalMethodName, newMethodName);\n      material.shaderSource = subMaterial.shaderSource + material.shaderSource;\n\n      // Replace each material id with an czm_getMaterial method call.\n      var materialMethodCall = newMethodName + \"(materialInput)\";\n      var tokensReplacedCount = replaceToken(\n        material,\n        subMaterialId,\n        materialMethodCall\n      );\n      //>>includeStart('debug', pragmas.debug);\n      if (tokensReplacedCount === 0 && strict) {\n        throw new DeveloperError(\n          \"strict: shader source does not use material '\" + subMaterialId + \"'.\"\n        );\n      }\n      //>>includeEnd('debug');\n    }\n  }\n}\n\n// Used for searching or replacing a token in a material's shader source with something else.\n// If excludePeriod is true, do not accept tokens that are preceded by periods.\n// http://stackoverflow.com/questions/641407/javascript-negative-lookbehind-equivalent\nfunction replaceToken(material, token, newToken, excludePeriod) {\n  excludePeriod = defaultValue(excludePeriod, true);\n  var count = 0;\n  var suffixChars = \"([\\\\w])?\";\n  var prefixChars = \"([\\\\w\" + (excludePeriod ? \".\" : \"\") + \"])?\";\n  var regExp = new RegExp(prefixChars + token + suffixChars, \"g\");\n  material.shaderSource = material.shaderSource.replace(regExp, function (\n    $0,\n    $1,\n    $2\n  ) {\n    if ($1 || $2) {\n      return $0;\n    }\n    count += 1;\n    return newToken;\n  });\n  return count;\n}\n\nfunction getNumberOfTokens(material, token, excludePeriod) {\n  return replaceToken(material, token, token, excludePeriod);\n}\n\nMaterial._materialCache = {\n  _materials: {},\n  addMaterial: function (type, materialTemplate) {\n    this._materials[type] = materialTemplate;\n  },\n  getMaterial: function (type) {\n    return this._materials[type];\n  },\n};\n\n/**\n * Gets or sets the default texture uniform value.\n * @type {String}\n */\nMaterial.DefaultImageId = \"czm_defaultImage\";\n\n/**\n * Gets or sets the default cube map texture uniform value.\n * @type {String}\n */\nMaterial.DefaultCubeMapId = \"czm_defaultCubeMap\";\n\n/**\n * Gets the name of the color material.\n * @type {String}\n * @readonly\n */\nMaterial.ColorType = \"Color\";\nMaterial._materialCache.addMaterial(Material.ColorType, {\n  fabric: {\n    type: Material.ColorType,\n    uniforms: {\n      color: new Color(1.0, 0.0, 0.0, 0.5),\n    },\n    components: {\n      diffuse: \"color.rgb\",\n      alpha: \"color.a\",\n    },\n  },\n  translucent: function (material) {\n    return material.uniforms.color.alpha < 1.0;\n  },\n});\n\n/**\n * Gets the name of the image material.\n * @type {String}\n * @readonly\n */\nMaterial.ImageType = \"Image\";\nMaterial._materialCache.addMaterial(Material.ImageType, {\n  fabric: {\n    type: Material.ImageType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      repeat: new Cartesian2(1.0, 1.0),\n      color: new Color(1.0, 1.0, 1.0, 1.0),\n    },\n    components: {\n      diffuse:\n        \"texture2D(image, fract(repeat * materialInput.st)).rgb * color.rgb\",\n      alpha: \"texture2D(image, fract(repeat * materialInput.st)).a * color.a\",\n    },\n  },\n  translucent: function (material) {\n    return material.uniforms.color.alpha < 1.0;\n  },\n});\n\n/**\n * Gets the name of the diffuce map material.\n * @type {String}\n * @readonly\n */\nMaterial.DiffuseMapType = \"DiffuseMap\";\nMaterial._materialCache.addMaterial(Material.DiffuseMapType, {\n  fabric: {\n    type: Material.DiffuseMapType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      channels: \"rgb\",\n      repeat: new Cartesian2(1.0, 1.0),\n    },\n    components: {\n      diffuse: \"texture2D(image, fract(repeat * materialInput.st)).channels\",\n    },\n  },\n  translucent: false,\n});\n\n/**\n * Gets the name of the alpha map material.\n * @type {String}\n * @readonly\n */\nMaterial.AlphaMapType = \"AlphaMap\";\nMaterial._materialCache.addMaterial(Material.AlphaMapType, {\n  fabric: {\n    type: Material.AlphaMapType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      channel: \"a\",\n      repeat: new Cartesian2(1.0, 1.0),\n    },\n    components: {\n      alpha: \"texture2D(image, fract(repeat * materialInput.st)).channel\",\n    },\n  },\n  translucent: true,\n});\n\n/**\n * Gets the name of the specular map material.\n * @type {String}\n * @readonly\n */\nMaterial.SpecularMapType = \"SpecularMap\";\nMaterial._materialCache.addMaterial(Material.SpecularMapType, {\n  fabric: {\n    type: Material.SpecularMapType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      channel: \"r\",\n      repeat: new Cartesian2(1.0, 1.0),\n    },\n    components: {\n      specular: \"texture2D(image, fract(repeat * materialInput.st)).channel\",\n    },\n  },\n  translucent: false,\n});\n\n/**\n * Gets the name of the emmision map material.\n * @type {String}\n * @readonly\n */\nMaterial.EmissionMapType = \"EmissionMap\";\nMaterial._materialCache.addMaterial(Material.EmissionMapType, {\n  fabric: {\n    type: Material.EmissionMapType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      channels: \"rgb\",\n      repeat: new Cartesian2(1.0, 1.0),\n    },\n    components: {\n      emission: \"texture2D(image, fract(repeat * materialInput.st)).channels\",\n    },\n  },\n  translucent: false,\n});\n\n/**\n * Gets the name of the bump map material.\n * @type {String}\n * @readonly\n */\nMaterial.BumpMapType = \"BumpMap\";\nMaterial._materialCache.addMaterial(Material.BumpMapType, {\n  fabric: {\n    type: Material.BumpMapType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      channel: \"r\",\n      strength: 0.8,\n      repeat: new Cartesian2(1.0, 1.0),\n    },\n    source: BumpMapMaterial,\n  },\n  translucent: false,\n});\n\n/**\n * Gets the name of the normal map material.\n * @type {String}\n * @readonly\n */\nMaterial.NormalMapType = \"NormalMap\";\nMaterial._materialCache.addMaterial(Material.NormalMapType, {\n  fabric: {\n    type: Material.NormalMapType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      channels: \"rgb\",\n      strength: 0.8,\n      repeat: new Cartesian2(1.0, 1.0),\n    },\n    source: NormalMapMaterial,\n  },\n  translucent: false,\n});\n\n/**\n * Gets the name of the grid material.\n * @type {String}\n * @readonly\n */\nMaterial.GridType = \"Grid\";\nMaterial._materialCache.addMaterial(Material.GridType, {\n  fabric: {\n    type: Material.GridType,\n    uniforms: {\n      color: new Color(0.0, 1.0, 0.0, 1.0),\n      cellAlpha: 0.1,\n      lineCount: new Cartesian2(8.0, 8.0),\n      lineThickness: new Cartesian2(1.0, 1.0),\n      lineOffset: new Cartesian2(0.0, 0.0),\n    },\n    source: GridMaterial,\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return uniforms.color.alpha < 1.0 || uniforms.cellAlpha < 1.0;\n  },\n});\n\n/**\n * Gets the name of the stripe material.\n * @type {String}\n * @readonly\n */\nMaterial.StripeType = \"Stripe\";\nMaterial._materialCache.addMaterial(Material.StripeType, {\n  fabric: {\n    type: Material.StripeType,\n    uniforms: {\n      horizontal: true,\n      evenColor: new Color(1.0, 1.0, 1.0, 0.5),\n      oddColor: new Color(0.0, 0.0, 1.0, 0.5),\n      offset: 0.0,\n      repeat: 5.0,\n    },\n    source: StripeMaterial,\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return uniforms.evenColor.alpha < 1.0 || uniforms.oddColor.alpha < 1.0;\n  },\n});\n\n/**\n * Gets the name of the checkerboard material.\n * @type {String}\n * @readonly\n */\nMaterial.CheckerboardType = \"Checkerboard\";\nMaterial._materialCache.addMaterial(Material.CheckerboardType, {\n  fabric: {\n    type: Material.CheckerboardType,\n    uniforms: {\n      lightColor: new Color(1.0, 1.0, 1.0, 0.5),\n      darkColor: new Color(0.0, 0.0, 0.0, 0.5),\n      repeat: new Cartesian2(5.0, 5.0),\n    },\n    source: CheckerboardMaterial,\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return uniforms.lightColor.alpha < 1.0 || uniforms.darkColor.alpha < 1.0;\n  },\n});\n\n/**\n * Gets the name of the dot material.\n * @type {String}\n * @readonly\n */\nMaterial.DotType = \"Dot\";\nMaterial._materialCache.addMaterial(Material.DotType, {\n  fabric: {\n    type: Material.DotType,\n    uniforms: {\n      lightColor: new Color(1.0, 1.0, 0.0, 0.75),\n      darkColor: new Color(0.0, 1.0, 1.0, 0.75),\n      repeat: new Cartesian2(5.0, 5.0),\n    },\n    source: DotMaterial,\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return uniforms.lightColor.alpha < 1.0 || uniforms.darkColor.alpha < 1.0;\n  },\n});\n\n/**\n * Gets the name of the water material.\n * @type {String}\n * @readonly\n */\nMaterial.WaterType = \"Water\";\nMaterial._materialCache.addMaterial(Material.WaterType, {\n  fabric: {\n    type: Material.WaterType,\n    uniforms: {\n      baseWaterColor: new Color(0.2, 0.3, 0.6, 1.0),\n      blendColor: new Color(0.0, 1.0, 0.699, 1.0),\n      specularMap: Material.DefaultImageId,\n      normalMap: Material.DefaultImageId,\n      frequency: 10.0,\n      animationSpeed: 0.01,\n      amplitude: 1.0,\n      specularIntensity: 0.5,\n      fadeFactor: 1.0,\n    },\n    source: WaterMaterial,\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return (\n      uniforms.baseWaterColor.alpha < 1.0 || uniforms.blendColor.alpha < 1.0\n    );\n  },\n});\n\n/**\n * Gets the name of the rim lighting material.\n * @type {String}\n * @readonly\n */\nMaterial.RimLightingType = \"RimLighting\";\nMaterial._materialCache.addMaterial(Material.RimLightingType, {\n  fabric: {\n    type: Material.RimLightingType,\n    uniforms: {\n      color: new Color(1.0, 0.0, 0.0, 0.7),\n      rimColor: new Color(1.0, 1.0, 1.0, 0.4),\n      width: 0.3,\n    },\n    source: RimLightingMaterial,\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return uniforms.color.alpha < 1.0 || uniforms.rimColor.alpha < 1.0;\n  },\n});\n\n/**\n * Gets the name of the fade material.\n * @type {String}\n * @readonly\n */\nMaterial.FadeType = \"Fade\";\nMaterial._materialCache.addMaterial(Material.FadeType, {\n  fabric: {\n    type: Material.FadeType,\n    uniforms: {\n      fadeInColor: new Color(1.0, 0.0, 0.0, 1.0),\n      fadeOutColor: new Color(0.0, 0.0, 0.0, 0.0),\n      maximumDistance: 0.5,\n      repeat: true,\n      fadeDirection: {\n        x: true,\n        y: true,\n      },\n      time: new Cartesian2(0.5, 0.5),\n    },\n    source: FadeMaterial,\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return (\n      uniforms.fadeInColor.alpha < 1.0 || uniforms.fadeOutColor.alpha < 1.0\n    );\n  },\n});\n\n/**\n * Gets the name of the polyline arrow material.\n * @type {String}\n * @readonly\n */\nMaterial.PolylineArrowType = \"PolylineArrow\";\nMaterial._materialCache.addMaterial(Material.PolylineArrowType, {\n  fabric: {\n    type: Material.PolylineArrowType,\n    uniforms: {\n      color: new Color(1.0, 1.0, 1.0, 1.0),\n    },\n    source: PolylineArrowMaterial,\n  },\n  translucent: true,\n});\n\n/**\n * Gets the name of the polyline glow material.\n * @type {String}\n * @readonly\n */\nMaterial.PolylineDashType = \"PolylineDash\";\nMaterial._materialCache.addMaterial(Material.PolylineDashType, {\n  fabric: {\n    type: Material.PolylineDashType,\n    uniforms: {\n      color: new Color(1.0, 0.0, 1.0, 1.0),\n      gapColor: new Color(0.0, 0.0, 0.0, 0.0),\n      dashLength: 16.0,\n      dashPattern: 255.0,\n    },\n    source: PolylineDashMaterial,\n  },\n  translucent: true,\n});\n\n/**\n * Gets the name of the polyline glow material.\n * @type {String}\n * @readonly\n */\nMaterial.PolylineGlowType = \"PolylineGlow\";\nMaterial._materialCache.addMaterial(Material.PolylineGlowType, {\n  fabric: {\n    type: Material.PolylineGlowType,\n    uniforms: {\n      color: new Color(0.0, 0.5, 1.0, 1.0),\n      glowPower: 0.25,\n      taperPower: 1.0,\n    },\n    source: PolylineGlowMaterial,\n  },\n  translucent: true,\n});\n\n/**\n * Gets the name of the polyline outline material.\n * @type {String}\n * @readonly\n */\nMaterial.PolylineOutlineType = \"PolylineOutline\";\nMaterial._materialCache.addMaterial(Material.PolylineOutlineType, {\n  fabric: {\n    type: Material.PolylineOutlineType,\n    uniforms: {\n      color: new Color(1.0, 1.0, 1.0, 1.0),\n      outlineColor: new Color(1.0, 0.0, 0.0, 1.0),\n      outlineWidth: 1.0,\n    },\n    source: PolylineOutlineMaterial,\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return uniforms.color.alpha < 1.0 || uniforms.outlineColor.alpha < 1.0;\n  },\n});\n\n/**\n * Gets the name of the elevation contour material.\n * @type {String}\n * @readonly\n */\nMaterial.ElevationContourType = \"ElevationContour\";\nMaterial._materialCache.addMaterial(Material.ElevationContourType, {\n  fabric: {\n    type: Material.ElevationContourType,\n    uniforms: {\n      spacing: 100.0,\n      color: new Color(1.0, 0.0, 0.0, 1.0),\n      width: 1.0,\n    },\n    source: ElevationContourMaterial,\n  },\n  translucent: false,\n});\n\n/**\n * Gets the name of the elevation contour material.\n * @type {String}\n * @readonly\n */\nMaterial.ElevationRampType = \"ElevationRamp\";\nMaterial._materialCache.addMaterial(Material.ElevationRampType, {\n  fabric: {\n    type: Material.ElevationRampType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      minimumHeight: 0.0,\n      maximumHeight: 10000.0,\n    },\n    source: ElevationRampMaterial,\n  },\n  translucent: false,\n});\n\n/**\n * Gets the name of the slope ramp material.\n * @type {String}\n * @readonly\n */\nMaterial.SlopeRampMaterialType = \"SlopeRamp\";\nMaterial._materialCache.addMaterial(Material.SlopeRampMaterialType, {\n  fabric: {\n    type: Material.SlopeRampMaterialType,\n    uniforms: {\n      image: Material.DefaultImageId,\n    },\n    source: SlopeRampMaterial,\n  },\n  translucent: false,\n});\n\n/**\n * Gets the name of the aspect ramp material.\n * @type {String}\n * @readonly\n */\nMaterial.AspectRampMaterialType = \"AspectRamp\";\nMaterial._materialCache.addMaterial(Material.AspectRampMaterialType, {\n  fabric: {\n    type: Material.AspectRampMaterialType,\n    uniforms: {\n      image: Material.DefaultImageId,\n    },\n    source: AspectRampMaterial,\n  },\n  translucent: false,\n});\nexport default Material;\n"]},"metadata":{},"sourceType":"module"}