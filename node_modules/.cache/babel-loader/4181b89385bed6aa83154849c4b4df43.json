{"ast":null,"code":"import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n/**\n * A vertex format defines what attributes make up a vertex.  A VertexFormat can be provided\n * to a {@link Geometry} to request that certain properties be computed, e.g., just position,\n * position and normal, etc.\n *\n * @param {Object} [options] An object with boolean properties corresponding to VertexFormat properties as shown in the code example.\n *\n * @alias VertexFormat\n * @constructor\n *\n * @example\n * // Create a vertex format with position and 2D texture coordinate attributes.\n * var format = new Cesium.VertexFormat({\n *   position : true,\n *   st : true\n * });\n *\n * @see Geometry#attributes\n * @see Packable\n */\n\nfunction VertexFormat(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  /**\n   * When <code>true</code>, the vertex has a 3D position attribute.\n   * <p>\n   * 64-bit floating-point (for precision).  3 components per attribute.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n\n  this.position = defaultValue(options.position, false);\n  /**\n   * When <code>true</code>, the vertex has a normal attribute (normalized), which is commonly used for lighting.\n   * <p>\n   * 32-bit floating-point.  3 components per attribute.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n\n  this.normal = defaultValue(options.normal, false);\n  /**\n   * When <code>true</code>, the vertex has a 2D texture coordinate attribute.\n   * <p>\n   * 32-bit floating-point.  2 components per attribute\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n\n  this.st = defaultValue(options.st, false);\n  /**\n   * When <code>true</code>, the vertex has a bitangent attribute (normalized), which is used for tangent-space effects like bump mapping.\n   * <p>\n   * 32-bit floating-point.  3 components per attribute.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n\n  this.bitangent = defaultValue(options.bitangent, false);\n  /**\n   * When <code>true</code>, the vertex has a tangent attribute (normalized), which is used for tangent-space effects like bump mapping.\n   * <p>\n   * 32-bit floating-point.  3 components per attribute.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n\n  this.tangent = defaultValue(options.tangent, false);\n  /**\n   * When <code>true</code>, the vertex has an RGB color attribute.\n   * <p>\n   * 8-bit unsigned byte.  3 components per attribute.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n\n  this.color = defaultValue(options.color, false);\n}\n/**\n * An immutable vertex format with only a position attribute.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n */\n\n\nVertexFormat.POSITION_ONLY = Object.freeze(new VertexFormat({\n  position: true\n}));\n/**\n * An immutable vertex format with position and normal attributes.\n * This is compatible with per-instance color appearances like {@link PerInstanceColorAppearance}.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n * @see VertexFormat#normal\n */\n\nVertexFormat.POSITION_AND_NORMAL = Object.freeze(new VertexFormat({\n  position: true,\n  normal: true\n}));\n/**\n * An immutable vertex format with position, normal, and st attributes.\n * This is compatible with {@link MaterialAppearance} when {@link MaterialAppearance#materialSupport}\n * is <code>TEXTURED/code>.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n * @see VertexFormat#normal\n * @see VertexFormat#st\n */\n\nVertexFormat.POSITION_NORMAL_AND_ST = Object.freeze(new VertexFormat({\n  position: true,\n  normal: true,\n  st: true\n}));\n/**\n * An immutable vertex format with position and st attributes.\n * This is compatible with {@link EllipsoidSurfaceAppearance}.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n * @see VertexFormat#st\n */\n\nVertexFormat.POSITION_AND_ST = Object.freeze(new VertexFormat({\n  position: true,\n  st: true\n}));\n/**\n * An immutable vertex format with position and color attributes.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n * @see VertexFormat#color\n */\n\nVertexFormat.POSITION_AND_COLOR = Object.freeze(new VertexFormat({\n  position: true,\n  color: true\n}));\n/**\n * An immutable vertex format with well-known attributes: position, normal, st, tangent, and bitangent.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n * @see VertexFormat#normal\n * @see VertexFormat#st\n * @see VertexFormat#tangent\n * @see VertexFormat#bitangent\n */\n\nVertexFormat.ALL = Object.freeze(new VertexFormat({\n  position: true,\n  normal: true,\n  st: true,\n  tangent: true,\n  bitangent: true\n}));\n/**\n * An immutable vertex format with position, normal, and st attributes.\n * This is compatible with most appearances and materials; however\n * normal and st attributes are not always required.  When this is\n * known in advance, another <code>VertexFormat</code> should be used.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n * @see VertexFormat#normal\n */\n\nVertexFormat.DEFAULT = VertexFormat.POSITION_NORMAL_AND_ST;\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\n\nVertexFormat.packedLength = 6;\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {VertexFormat} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\n\nVertexFormat.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  } //>>includeEnd('debug');\n\n\n  startingIndex = defaultValue(startingIndex, 0);\n  array[startingIndex++] = value.position ? 1.0 : 0.0;\n  array[startingIndex++] = value.normal ? 1.0 : 0.0;\n  array[startingIndex++] = value.st ? 1.0 : 0.0;\n  array[startingIndex++] = value.tangent ? 1.0 : 0.0;\n  array[startingIndex++] = value.bitangent ? 1.0 : 0.0;\n  array[startingIndex] = value.color ? 1.0 : 0.0;\n  return array;\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {VertexFormat} [result] The object into which to store the result.\n * @returns {VertexFormat} The modified result parameter or a new VertexFormat instance if one was not provided.\n */\n\n\nVertexFormat.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  } //>>includeEnd('debug');\n\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  if (!defined(result)) {\n    result = new VertexFormat();\n  }\n\n  result.position = array[startingIndex++] === 1.0;\n  result.normal = array[startingIndex++] === 1.0;\n  result.st = array[startingIndex++] === 1.0;\n  result.tangent = array[startingIndex++] === 1.0;\n  result.bitangent = array[startingIndex++] === 1.0;\n  result.color = array[startingIndex] === 1.0;\n  return result;\n};\n/**\n * Duplicates a VertexFormat instance.\n *\n * @param {VertexFormat} vertexFormat The vertex format to duplicate.\n * @param {VertexFormat} [result] The object onto which to store the result.\n * @returns {VertexFormat} The modified result parameter or a new VertexFormat instance if one was not provided. (Returns undefined if vertexFormat is undefined)\n */\n\n\nVertexFormat.clone = function (vertexFormat, result) {\n  if (!defined(vertexFormat)) {\n    return undefined;\n  }\n\n  if (!defined(result)) {\n    result = new VertexFormat();\n  }\n\n  result.position = vertexFormat.position;\n  result.normal = vertexFormat.normal;\n  result.st = vertexFormat.st;\n  result.tangent = vertexFormat.tangent;\n  result.bitangent = vertexFormat.bitangent;\n  result.color = vertexFormat.color;\n  return result;\n};\n\nexport default VertexFormat;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/VertexFormat.js"],"names":["defaultValue","defined","DeveloperError","VertexFormat","options","EMPTY_OBJECT","position","normal","st","bitangent","tangent","color","POSITION_ONLY","Object","freeze","POSITION_AND_NORMAL","POSITION_NORMAL_AND_ST","POSITION_AND_ST","POSITION_AND_COLOR","ALL","DEFAULT","packedLength","pack","value","array","startingIndex","unpack","result","clone","vertexFormat","undefined"],"mappings":"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","sourcesContent":["import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * A vertex format defines what attributes make up a vertex.  A VertexFormat can be provided\n * to a {@link Geometry} to request that certain properties be computed, e.g., just position,\n * position and normal, etc.\n *\n * @param {Object} [options] An object with boolean properties corresponding to VertexFormat properties as shown in the code example.\n *\n * @alias VertexFormat\n * @constructor\n *\n * @example\n * // Create a vertex format with position and 2D texture coordinate attributes.\n * var format = new Cesium.VertexFormat({\n *   position : true,\n *   st : true\n * });\n *\n * @see Geometry#attributes\n * @see Packable\n */\nfunction VertexFormat(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  /**\n   * When <code>true</code>, the vertex has a 3D position attribute.\n   * <p>\n   * 64-bit floating-point (for precision).  3 components per attribute.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.position = defaultValue(options.position, false);\n\n  /**\n   * When <code>true</code>, the vertex has a normal attribute (normalized), which is commonly used for lighting.\n   * <p>\n   * 32-bit floating-point.  3 components per attribute.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.normal = defaultValue(options.normal, false);\n\n  /**\n   * When <code>true</code>, the vertex has a 2D texture coordinate attribute.\n   * <p>\n   * 32-bit floating-point.  2 components per attribute\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.st = defaultValue(options.st, false);\n\n  /**\n   * When <code>true</code>, the vertex has a bitangent attribute (normalized), which is used for tangent-space effects like bump mapping.\n   * <p>\n   * 32-bit floating-point.  3 components per attribute.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.bitangent = defaultValue(options.bitangent, false);\n\n  /**\n   * When <code>true</code>, the vertex has a tangent attribute (normalized), which is used for tangent-space effects like bump mapping.\n   * <p>\n   * 32-bit floating-point.  3 components per attribute.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.tangent = defaultValue(options.tangent, false);\n\n  /**\n   * When <code>true</code>, the vertex has an RGB color attribute.\n   * <p>\n   * 8-bit unsigned byte.  3 components per attribute.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.color = defaultValue(options.color, false);\n}\n\n/**\n * An immutable vertex format with only a position attribute.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n */\nVertexFormat.POSITION_ONLY = Object.freeze(\n  new VertexFormat({\n    position: true,\n  })\n);\n\n/**\n * An immutable vertex format with position and normal attributes.\n * This is compatible with per-instance color appearances like {@link PerInstanceColorAppearance}.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n * @see VertexFormat#normal\n */\nVertexFormat.POSITION_AND_NORMAL = Object.freeze(\n  new VertexFormat({\n    position: true,\n    normal: true,\n  })\n);\n\n/**\n * An immutable vertex format with position, normal, and st attributes.\n * This is compatible with {@link MaterialAppearance} when {@link MaterialAppearance#materialSupport}\n * is <code>TEXTURED/code>.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n * @see VertexFormat#normal\n * @see VertexFormat#st\n */\nVertexFormat.POSITION_NORMAL_AND_ST = Object.freeze(\n  new VertexFormat({\n    position: true,\n    normal: true,\n    st: true,\n  })\n);\n\n/**\n * An immutable vertex format with position and st attributes.\n * This is compatible with {@link EllipsoidSurfaceAppearance}.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n * @see VertexFormat#st\n */\nVertexFormat.POSITION_AND_ST = Object.freeze(\n  new VertexFormat({\n    position: true,\n    st: true,\n  })\n);\n\n/**\n * An immutable vertex format with position and color attributes.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n * @see VertexFormat#color\n */\nVertexFormat.POSITION_AND_COLOR = Object.freeze(\n  new VertexFormat({\n    position: true,\n    color: true,\n  })\n);\n\n/**\n * An immutable vertex format with well-known attributes: position, normal, st, tangent, and bitangent.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n * @see VertexFormat#normal\n * @see VertexFormat#st\n * @see VertexFormat#tangent\n * @see VertexFormat#bitangent\n */\nVertexFormat.ALL = Object.freeze(\n  new VertexFormat({\n    position: true,\n    normal: true,\n    st: true,\n    tangent: true,\n    bitangent: true,\n  })\n);\n\n/**\n * An immutable vertex format with position, normal, and st attributes.\n * This is compatible with most appearances and materials; however\n * normal and st attributes are not always required.  When this is\n * known in advance, another <code>VertexFormat</code> should be used.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n * @see VertexFormat#normal\n */\nVertexFormat.DEFAULT = VertexFormat.POSITION_NORMAL_AND_ST;\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nVertexFormat.packedLength = 6;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {VertexFormat} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nVertexFormat.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  array[startingIndex++] = value.position ? 1.0 : 0.0;\n  array[startingIndex++] = value.normal ? 1.0 : 0.0;\n  array[startingIndex++] = value.st ? 1.0 : 0.0;\n  array[startingIndex++] = value.tangent ? 1.0 : 0.0;\n  array[startingIndex++] = value.bitangent ? 1.0 : 0.0;\n  array[startingIndex] = value.color ? 1.0 : 0.0;\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {VertexFormat} [result] The object into which to store the result.\n * @returns {VertexFormat} The modified result parameter or a new VertexFormat instance if one was not provided.\n */\nVertexFormat.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  if (!defined(result)) {\n    result = new VertexFormat();\n  }\n\n  result.position = array[startingIndex++] === 1.0;\n  result.normal = array[startingIndex++] === 1.0;\n  result.st = array[startingIndex++] === 1.0;\n  result.tangent = array[startingIndex++] === 1.0;\n  result.bitangent = array[startingIndex++] === 1.0;\n  result.color = array[startingIndex] === 1.0;\n  return result;\n};\n\n/**\n * Duplicates a VertexFormat instance.\n *\n * @param {VertexFormat} vertexFormat The vertex format to duplicate.\n * @param {VertexFormat} [result] The object onto which to store the result.\n * @returns {VertexFormat} The modified result parameter or a new VertexFormat instance if one was not provided. (Returns undefined if vertexFormat is undefined)\n */\nVertexFormat.clone = function (vertexFormat, result) {\n  if (!defined(vertexFormat)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    result = new VertexFormat();\n  }\n\n  result.position = vertexFormat.position;\n  result.normal = vertexFormat.normal;\n  result.st = vertexFormat.st;\n  result.tangent = vertexFormat.tangent;\n  result.bitangent = vertexFormat.bitangent;\n  result.color = vertexFormat.color;\n  return result;\n};\nexport default VertexFormat;\n"]},"metadata":{},"sourceType":"module"}