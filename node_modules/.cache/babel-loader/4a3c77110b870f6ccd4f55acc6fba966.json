{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n/**\n * Describes a two dimensional label located at the position of the containing {@link Entity}.\n * <p>\n * <div align='center'>\n * <img src='Images/Label.png' width='400' height='300' /><br />\n * Example labels\n * </div>\n * </p>\n *\n * @alias LabelGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the label.\n * @param {Property} [options.text] A Property specifying the text. Explicit newlines '\\n' are supported.\n * @param {Property} [options.font='30px sans-serif'] A Property specifying the CSS font.\n * @param {Property} [options.style=LabelStyle.FILL] A Property specifying the {@link LabelStyle}.\n * @param {Property} [options.scale=1.0] A numeric Property specifying the scale to apply to the text.\n * @param {Property} [options.showBackground=false] A boolean Property specifying the visibility of the background behind the label.\n * @param {Property} [options.backgroundColor=new Color(0.165, 0.165, 0.165, 0.8)] A Property specifying the background {@link Color}.\n * @param {Property} [options.backgroundPadding=new Cartesian2(7, 5)] A {@link Cartesian2} Property specifying the horizontal and vertical background padding in pixels.\n * @param {Property} [options.pixelOffset=Cartesian2.ZERO] A {@link Cartesian2} Property specifying the pixel offset.\n * @param {Property} [options.eyeOffset=Cartesian3.ZERO] A {@link Cartesian3} Property specifying the eye offset.\n * @param {Property} [options.horizontalOrigin=HorizontalOrigin.CENTER] A Property specifying the {@link HorizontalOrigin}.\n * @param {Property} [options.verticalOrigin=VerticalOrigin.CENTER] A Property specifying the {@link VerticalOrigin}.\n * @param {Property} [options.heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @param {Property} [options.fillColor=Color.WHITE] A Property specifying the fill {@link Color}.\n * @param {Property} [options.outlineColor=Color.BLACK] A Property specifying the outline {@link Color}.\n * @param {Property} [options.outlineWidth=1.0] A numeric Property specifying the outline width.\n * @param {Property} [options.translucencyByDistance] A {@link NearFarScalar} Property used to set translucency based on distance from the camera.\n * @param {Property} [options.pixelOffsetScaleByDistance] A {@link NearFarScalar} Property used to set pixelOffset based on distance from the camera.\n * @param {Property} [options.scaleByDistance] A {@link NearFarScalar} Property used to set scale based on distance from the camera.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this label will be displayed.\n * @param {Property} [options.disableDepthTestDistance] A Property specifying the distance from the camera at which to disable the depth test to.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Labels.html|Cesium Sandcastle Labels Demo}\n */\n\nfunction LabelGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._text = undefined;\n  this._textSubscription = undefined;\n  this._font = undefined;\n  this._fontSubscription = undefined;\n  this._style = undefined;\n  this._styleSubscription = undefined;\n  this._scale = undefined;\n  this._scaleSubscription = undefined;\n  this._showBackground = undefined;\n  this._showBackgroundSubscription = undefined;\n  this._backgroundColor = undefined;\n  this._backgroundColorSubscription = undefined;\n  this._backgroundPadding = undefined;\n  this._backgroundPaddingSubscription = undefined;\n  this._pixelOffset = undefined;\n  this._pixelOffsetSubscription = undefined;\n  this._eyeOffset = undefined;\n  this._eyeOffsetSubscription = undefined;\n  this._horizontalOrigin = undefined;\n  this._horizontalOriginSubscription = undefined;\n  this._verticalOrigin = undefined;\n  this._verticalOriginSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._fillColor = undefined;\n  this._fillColorSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._translucencyByDistance = undefined;\n  this._translucencyByDistanceSubscription = undefined;\n  this._pixelOffsetScaleByDistance = undefined;\n  this._pixelOffsetScaleByDistanceSubscription = undefined;\n  this._scaleByDistance = undefined;\n  this._scaleByDistanceSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._disableDepthTestDistance = undefined;\n  this._disableDepthTestDistanceSubscription = undefined;\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(LabelGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof LabelGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the label.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the string Property specifying the text of the label.\n   * Explicit newlines '\\n' are supported.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  text: createPropertyDescriptor(\"text\"),\n\n  /**\n   * Gets or sets the string Property specifying the font in CSS syntax.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/font|CSS font on MDN}\n   */\n  font: createPropertyDescriptor(\"font\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link LabelStyle}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  style: createPropertyDescriptor(\"style\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the uniform scale to apply to the image.\n   * A scale greater than <code>1.0</code> enlarges the label while a scale less than <code>1.0</code> shrinks it.\n   * <p>\n   * <div align='center'>\n   * <img src='Images/Label.setScale.png' width='400' height='300' /><br/>\n   * From left to right in the above image, the scales are <code>0.5</code>, <code>1.0</code>,\n   * and <code>2.0</code>.\n   * </div>\n   * </p>\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  scale: createPropertyDescriptor(\"scale\"),\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the background behind the label.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   * @default false\n   */\n  showBackground: createPropertyDescriptor(\"showBackground\"),\n\n  /**\n   * Gets or sets the Property specifying the background {@link Color}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   * @default new Color(0.165, 0.165, 0.165, 0.8)\n   */\n  backgroundColor: createPropertyDescriptor(\"backgroundColor\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the label's horizontal and vertical\n   * background padding in pixels.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   * @default new Cartesian2(7, 5)\n   */\n  backgroundPadding: createPropertyDescriptor(\"backgroundPadding\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the label's pixel offset in screen space\n   * from the origin of this label.  This is commonly used to align multiple labels and labels at\n   * the same position, e.g., an image and text.  The screen space origin is the top, left corner of the\n   * canvas; <code>x</code> increases from left to right, and <code>y</code> increases from top to bottom.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Label.setPixelOffset.default.png' width='250' height='188' /></td>\n   * <td align='center'><code>l.pixeloffset = new Cartesian2(25, 75);</code><br/><img src='Images/Label.setPixelOffset.x50y-25.png' width='250' height='188' /></td>\n   * </tr></table>\n   * The label's origin is indicated by the yellow point.\n   * </div>\n   * </p>\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   * @default Cartesian2.ZERO\n   */\n  pixelOffset: createPropertyDescriptor(\"pixelOffset\"),\n\n  /**\n   * Gets or sets the {@link Cartesian3} Property specifying the label's offset in eye coordinates.\n   * Eye coordinates is a left-handed coordinate system, where <code>x</code> points towards the viewer's\n   * right, <code>y</code> points up, and <code>z</code> points into the screen.\n   * <p>\n   * An eye offset is commonly used to arrange multiple labels or objects at the same position, e.g., to\n   * arrange a label above its corresponding 3D model.\n   * </p>\n   * Below, the label is positioned at the center of the Earth but an eye offset makes it always\n   * appear on top of the Earth regardless of the viewer's or Earth's orientation.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.one.png' width='250' height='188' /></td>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.two.png' width='250' height='188' /></td>\n   * </tr></table>\n   * <code>l.eyeOffset = new Cartesian3(0.0, 8000000.0, 0.0);</code><br /><br />\n   * </div>\n   * </p>\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   * @default Cartesian3.ZERO\n   */\n  eyeOffset: createPropertyDescriptor(\"eyeOffset\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HorizontalOrigin}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  horizontalOrigin: createPropertyDescriptor(\"horizontalOrigin\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link VerticalOrigin}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  verticalOrigin: createPropertyDescriptor(\"verticalOrigin\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the Property specifying the fill {@link Color}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  fillColor: createPropertyDescriptor(\"fillColor\"),\n\n  /**\n   * Gets or sets the Property specifying the outline {@link Color}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the outline width.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the translucency of the label based on the distance from the camera.\n   * A label's translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the label's translucency remains clamped to the nearest bound.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  translucencyByDistance: createPropertyDescriptor(\"translucencyByDistance\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the pixel offset of the label based on the distance from the camera.\n   * A label's pixel offset will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the label's pixel offset remains clamped to the nearest bound.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  pixelOffsetScaleByDistance: createPropertyDescriptor(\"pixelOffsetScaleByDistance\"),\n\n  /**\n   * Gets or sets near and far scaling properties of a Label based on the label's distance from the camera.\n   * A label's scale will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the label's scale remains clamped to the nearest bound.  If undefined,\n   * scaleByDistance will be disabled.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  scaleByDistance: createPropertyDescriptor(\"scaleByDistance\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this label will be displayed.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\"distanceDisplayCondition\"),\n\n  /**\n   * Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n   * When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  disableDepthTestDistance: createPropertyDescriptor(\"disableDepthTestDistance\")\n});\n/**\n * Duplicates this instance.\n *\n * @param {LabelGraphics} [result] The object onto which to store the result.\n * @returns {LabelGraphics} The modified result parameter or a new instance if one was not provided.\n */\n\nLabelGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new LabelGraphics(this);\n  }\n\n  result.show = this.show;\n  result.text = this.text;\n  result.font = this.font;\n  result.style = this.style;\n  result.scale = this.scale;\n  result.showBackground = this.showBackground;\n  result.backgroundColor = this.backgroundColor;\n  result.backgroundPadding = this.backgroundPadding;\n  result.pixelOffset = this.pixelOffset;\n  result.eyeOffset = this.eyeOffset;\n  result.horizontalOrigin = this.horizontalOrigin;\n  result.verticalOrigin = this.verticalOrigin;\n  result.heightReference = this.heightReference;\n  result.fillColor = this.fillColor;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.translucencyByDistance = this.translucencyByDistance;\n  result.pixelOffsetScaleByDistance = this.pixelOffsetScaleByDistance;\n  result.scaleByDistance = this.scaleByDistance;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.disableDepthTestDistance = this.disableDepthTestDistance;\n  return result;\n};\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {LabelGraphics} source The object to be merged into this object.\n */\n\n\nLabelGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  } //>>includeEnd('debug');\n\n\n  this.show = defaultValue(this.show, source.show);\n  this.text = defaultValue(this.text, source.text);\n  this.font = defaultValue(this.font, source.font);\n  this.style = defaultValue(this.style, source.style);\n  this.scale = defaultValue(this.scale, source.scale);\n  this.showBackground = defaultValue(this.showBackground, source.showBackground);\n  this.backgroundColor = defaultValue(this.backgroundColor, source.backgroundColor);\n  this.backgroundPadding = defaultValue(this.backgroundPadding, source.backgroundPadding);\n  this.pixelOffset = defaultValue(this.pixelOffset, source.pixelOffset);\n  this.eyeOffset = defaultValue(this.eyeOffset, source.eyeOffset);\n  this.horizontalOrigin = defaultValue(this.horizontalOrigin, source.horizontalOrigin);\n  this.verticalOrigin = defaultValue(this.verticalOrigin, source.verticalOrigin);\n  this.heightReference = defaultValue(this.heightReference, source.heightReference);\n  this.fillColor = defaultValue(this.fillColor, source.fillColor);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.translucencyByDistance = defaultValue(this.translucencyByDistance, source.translucencyByDistance);\n  this.pixelOffsetScaleByDistance = defaultValue(this.pixelOffsetScaleByDistance, source.pixelOffsetScaleByDistance);\n  this.scaleByDistance = defaultValue(this.scaleByDistance, source.scaleByDistance);\n  this.distanceDisplayCondition = defaultValue(this.distanceDisplayCondition, source.distanceDisplayCondition);\n  this.disableDepthTestDistance = defaultValue(this.disableDepthTestDistance, source.disableDepthTestDistance);\n};\n\nexport default LabelGraphics;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/LabelGraphics.js"],"names":["defaultValue","defined","DeveloperError","Event","createPropertyDescriptor","LabelGraphics","options","_definitionChanged","_show","undefined","_showSubscription","_text","_textSubscription","_font","_fontSubscription","_style","_styleSubscription","_scale","_scaleSubscription","_showBackground","_showBackgroundSubscription","_backgroundColor","_backgroundColorSubscription","_backgroundPadding","_backgroundPaddingSubscription","_pixelOffset","_pixelOffsetSubscription","_eyeOffset","_eyeOffsetSubscription","_horizontalOrigin","_horizontalOriginSubscription","_verticalOrigin","_verticalOriginSubscription","_heightReference","_heightReferenceSubscription","_fillColor","_fillColorSubscription","_outlineColor","_outlineColorSubscription","_outlineWidth","_outlineWidthSubscription","_translucencyByDistance","_translucencyByDistanceSubscription","_pixelOffsetScaleByDistance","_pixelOffsetScaleByDistanceSubscription","_scaleByDistance","_scaleByDistanceSubscription","_distanceDisplayCondition","_distanceDisplayConditionSubscription","_disableDepthTestDistance","_disableDepthTestDistanceSubscription","merge","EMPTY_OBJECT","Object","defineProperties","prototype","definitionChanged","get","show","text","font","style","scale","showBackground","backgroundColor","backgroundPadding","pixelOffset","eyeOffset","horizontalOrigin","verticalOrigin","heightReference","fillColor","outlineColor","outlineWidth","translucencyByDistance","pixelOffsetScaleByDistance","scaleByDistance","distanceDisplayCondition","disableDepthTestDistance","clone","result","source"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * Describes a two dimensional label located at the position of the containing {@link Entity}.\n * <p>\n * <div align='center'>\n * <img src='Images/Label.png' width='400' height='300' /><br />\n * Example labels\n * </div>\n * </p>\n *\n * @alias LabelGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the label.\n * @param {Property} [options.text] A Property specifying the text. Explicit newlines '\\n' are supported.\n * @param {Property} [options.font='30px sans-serif'] A Property specifying the CSS font.\n * @param {Property} [options.style=LabelStyle.FILL] A Property specifying the {@link LabelStyle}.\n * @param {Property} [options.scale=1.0] A numeric Property specifying the scale to apply to the text.\n * @param {Property} [options.showBackground=false] A boolean Property specifying the visibility of the background behind the label.\n * @param {Property} [options.backgroundColor=new Color(0.165, 0.165, 0.165, 0.8)] A Property specifying the background {@link Color}.\n * @param {Property} [options.backgroundPadding=new Cartesian2(7, 5)] A {@link Cartesian2} Property specifying the horizontal and vertical background padding in pixels.\n * @param {Property} [options.pixelOffset=Cartesian2.ZERO] A {@link Cartesian2} Property specifying the pixel offset.\n * @param {Property} [options.eyeOffset=Cartesian3.ZERO] A {@link Cartesian3} Property specifying the eye offset.\n * @param {Property} [options.horizontalOrigin=HorizontalOrigin.CENTER] A Property specifying the {@link HorizontalOrigin}.\n * @param {Property} [options.verticalOrigin=VerticalOrigin.CENTER] A Property specifying the {@link VerticalOrigin}.\n * @param {Property} [options.heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @param {Property} [options.fillColor=Color.WHITE] A Property specifying the fill {@link Color}.\n * @param {Property} [options.outlineColor=Color.BLACK] A Property specifying the outline {@link Color}.\n * @param {Property} [options.outlineWidth=1.0] A numeric Property specifying the outline width.\n * @param {Property} [options.translucencyByDistance] A {@link NearFarScalar} Property used to set translucency based on distance from the camera.\n * @param {Property} [options.pixelOffsetScaleByDistance] A {@link NearFarScalar} Property used to set pixelOffset based on distance from the camera.\n * @param {Property} [options.scaleByDistance] A {@link NearFarScalar} Property used to set scale based on distance from the camera.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this label will be displayed.\n * @param {Property} [options.disableDepthTestDistance] A Property specifying the distance from the camera at which to disable the depth test to.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Labels.html|Cesium Sandcastle Labels Demo}\n */\nfunction LabelGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._text = undefined;\n  this._textSubscription = undefined;\n  this._font = undefined;\n  this._fontSubscription = undefined;\n  this._style = undefined;\n  this._styleSubscription = undefined;\n  this._scale = undefined;\n  this._scaleSubscription = undefined;\n  this._showBackground = undefined;\n  this._showBackgroundSubscription = undefined;\n  this._backgroundColor = undefined;\n  this._backgroundColorSubscription = undefined;\n  this._backgroundPadding = undefined;\n  this._backgroundPaddingSubscription = undefined;\n  this._pixelOffset = undefined;\n  this._pixelOffsetSubscription = undefined;\n  this._eyeOffset = undefined;\n  this._eyeOffsetSubscription = undefined;\n  this._horizontalOrigin = undefined;\n  this._horizontalOriginSubscription = undefined;\n  this._verticalOrigin = undefined;\n  this._verticalOriginSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._fillColor = undefined;\n  this._fillColorSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._translucencyByDistance = undefined;\n  this._translucencyByDistanceSubscription = undefined;\n  this._pixelOffsetScaleByDistance = undefined;\n  this._pixelOffsetScaleByDistanceSubscription = undefined;\n  this._scaleByDistance = undefined;\n  this._scaleByDistanceSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._disableDepthTestDistance = undefined;\n  this._disableDepthTestDistanceSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(LabelGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof LabelGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the label.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the string Property specifying the text of the label.\n   * Explicit newlines '\\n' are supported.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  text: createPropertyDescriptor(\"text\"),\n\n  /**\n   * Gets or sets the string Property specifying the font in CSS syntax.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/font|CSS font on MDN}\n   */\n  font: createPropertyDescriptor(\"font\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link LabelStyle}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  style: createPropertyDescriptor(\"style\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the uniform scale to apply to the image.\n   * A scale greater than <code>1.0</code> enlarges the label while a scale less than <code>1.0</code> shrinks it.\n   * <p>\n   * <div align='center'>\n   * <img src='Images/Label.setScale.png' width='400' height='300' /><br/>\n   * From left to right in the above image, the scales are <code>0.5</code>, <code>1.0</code>,\n   * and <code>2.0</code>.\n   * </div>\n   * </p>\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  scale: createPropertyDescriptor(\"scale\"),\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the background behind the label.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   * @default false\n   */\n  showBackground: createPropertyDescriptor(\"showBackground\"),\n\n  /**\n   * Gets or sets the Property specifying the background {@link Color}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   * @default new Color(0.165, 0.165, 0.165, 0.8)\n   */\n  backgroundColor: createPropertyDescriptor(\"backgroundColor\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the label's horizontal and vertical\n   * background padding in pixels.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   * @default new Cartesian2(7, 5)\n   */\n  backgroundPadding: createPropertyDescriptor(\"backgroundPadding\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the label's pixel offset in screen space\n   * from the origin of this label.  This is commonly used to align multiple labels and labels at\n   * the same position, e.g., an image and text.  The screen space origin is the top, left corner of the\n   * canvas; <code>x</code> increases from left to right, and <code>y</code> increases from top to bottom.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Label.setPixelOffset.default.png' width='250' height='188' /></td>\n   * <td align='center'><code>l.pixeloffset = new Cartesian2(25, 75);</code><br/><img src='Images/Label.setPixelOffset.x50y-25.png' width='250' height='188' /></td>\n   * </tr></table>\n   * The label's origin is indicated by the yellow point.\n   * </div>\n   * </p>\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   * @default Cartesian2.ZERO\n   */\n  pixelOffset: createPropertyDescriptor(\"pixelOffset\"),\n\n  /**\n   * Gets or sets the {@link Cartesian3} Property specifying the label's offset in eye coordinates.\n   * Eye coordinates is a left-handed coordinate system, where <code>x</code> points towards the viewer's\n   * right, <code>y</code> points up, and <code>z</code> points into the screen.\n   * <p>\n   * An eye offset is commonly used to arrange multiple labels or objects at the same position, e.g., to\n   * arrange a label above its corresponding 3D model.\n   * </p>\n   * Below, the label is positioned at the center of the Earth but an eye offset makes it always\n   * appear on top of the Earth regardless of the viewer's or Earth's orientation.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.one.png' width='250' height='188' /></td>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.two.png' width='250' height='188' /></td>\n   * </tr></table>\n   * <code>l.eyeOffset = new Cartesian3(0.0, 8000000.0, 0.0);</code><br /><br />\n   * </div>\n   * </p>\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   * @default Cartesian3.ZERO\n   */\n  eyeOffset: createPropertyDescriptor(\"eyeOffset\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HorizontalOrigin}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  horizontalOrigin: createPropertyDescriptor(\"horizontalOrigin\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link VerticalOrigin}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  verticalOrigin: createPropertyDescriptor(\"verticalOrigin\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the Property specifying the fill {@link Color}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  fillColor: createPropertyDescriptor(\"fillColor\"),\n\n  /**\n   * Gets or sets the Property specifying the outline {@link Color}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the outline width.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the translucency of the label based on the distance from the camera.\n   * A label's translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the label's translucency remains clamped to the nearest bound.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  translucencyByDistance: createPropertyDescriptor(\"translucencyByDistance\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the pixel offset of the label based on the distance from the camera.\n   * A label's pixel offset will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the label's pixel offset remains clamped to the nearest bound.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  pixelOffsetScaleByDistance: createPropertyDescriptor(\n    \"pixelOffsetScaleByDistance\"\n  ),\n\n  /**\n   * Gets or sets near and far scaling properties of a Label based on the label's distance from the camera.\n   * A label's scale will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the label's scale remains clamped to the nearest bound.  If undefined,\n   * scaleByDistance will be disabled.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  scaleByDistance: createPropertyDescriptor(\"scaleByDistance\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this label will be displayed.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n\n  /**\n   * Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n   * When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied.\n   * @memberof LabelGraphics.prototype\n   * @type {Property}\n   */\n  disableDepthTestDistance: createPropertyDescriptor(\n    \"disableDepthTestDistance\"\n  ),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {LabelGraphics} [result] The object onto which to store the result.\n * @returns {LabelGraphics} The modified result parameter or a new instance if one was not provided.\n */\nLabelGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new LabelGraphics(this);\n  }\n  result.show = this.show;\n  result.text = this.text;\n  result.font = this.font;\n  result.style = this.style;\n  result.scale = this.scale;\n  result.showBackground = this.showBackground;\n  result.backgroundColor = this.backgroundColor;\n  result.backgroundPadding = this.backgroundPadding;\n  result.pixelOffset = this.pixelOffset;\n  result.eyeOffset = this.eyeOffset;\n  result.horizontalOrigin = this.horizontalOrigin;\n  result.verticalOrigin = this.verticalOrigin;\n  result.heightReference = this.heightReference;\n  result.fillColor = this.fillColor;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.translucencyByDistance = this.translucencyByDistance;\n  result.pixelOffsetScaleByDistance = this.pixelOffsetScaleByDistance;\n  result.scaleByDistance = this.scaleByDistance;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.disableDepthTestDistance = this.disableDepthTestDistance;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {LabelGraphics} source The object to be merged into this object.\n */\nLabelGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.text = defaultValue(this.text, source.text);\n  this.font = defaultValue(this.font, source.font);\n  this.style = defaultValue(this.style, source.style);\n  this.scale = defaultValue(this.scale, source.scale);\n  this.showBackground = defaultValue(\n    this.showBackground,\n    source.showBackground\n  );\n  this.backgroundColor = defaultValue(\n    this.backgroundColor,\n    source.backgroundColor\n  );\n  this.backgroundPadding = defaultValue(\n    this.backgroundPadding,\n    source.backgroundPadding\n  );\n  this.pixelOffset = defaultValue(this.pixelOffset, source.pixelOffset);\n  this.eyeOffset = defaultValue(this.eyeOffset, source.eyeOffset);\n  this.horizontalOrigin = defaultValue(\n    this.horizontalOrigin,\n    source.horizontalOrigin\n  );\n  this.verticalOrigin = defaultValue(\n    this.verticalOrigin,\n    source.verticalOrigin\n  );\n  this.heightReference = defaultValue(\n    this.heightReference,\n    source.heightReference\n  );\n  this.fillColor = defaultValue(this.fillColor, source.fillColor);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.translucencyByDistance = defaultValue(\n    this.translucencyByDistance,\n    source.translucencyByDistance\n  );\n  this.pixelOffsetScaleByDistance = defaultValue(\n    this.pixelOffsetScaleByDistance,\n    source.pixelOffsetScaleByDistance\n  );\n  this.scaleByDistance = defaultValue(\n    this.scaleByDistance,\n    source.scaleByDistance\n  );\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n  this.disableDepthTestDistance = defaultValue(\n    this.disableDepthTestDistance,\n    source.disableDepthTestDistance\n  );\n};\nexport default LabelGraphics;\n"]},"metadata":{},"sourceType":"module"}