{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport getMagic from \"../Core/getMagic.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport when from \"../ThirdParty/when.js\";\n/**\n * Represents the contents of a\n * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/Composite|Composite}\n * tile in a {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification|3D Tiles} tileset.\n * <p>\n * Implements the {@link Cesium3DTileContent} interface.\n * </p>\n *\n * @alias Composite3DTileContent\n * @constructor\n *\n * @private\n */\n\nfunction Composite3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset, factory) {\n  this._tileset = tileset;\n  this._tile = tile;\n  this._resource = resource;\n  this._contents = [];\n  this._readyPromise = when.defer();\n  initialize(this, arrayBuffer, byteOffset, factory);\n}\n\nObject.defineProperties(Composite3DTileContent.prototype, {\n  featurePropertiesDirty: {\n    get: function () {\n      var contents = this._contents;\n      var length = contents.length;\n\n      for (var i = 0; i < length; ++i) {\n        if (contents[i].featurePropertiesDirty) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    set: function (value) {\n      var contents = this._contents;\n      var length = contents.length;\n\n      for (var i = 0; i < length; ++i) {\n        contents[i].featurePropertiesDirty = value;\n      }\n    }\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>featuresLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  featuresLength: {\n    get: function () {\n      return 0;\n    }\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>pointsLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  pointsLength: {\n    get: function () {\n      return 0;\n    }\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>trianglesLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  trianglesLength: {\n    get: function () {\n      return 0;\n    }\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>geometryByteLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  geometryByteLength: {\n    get: function () {\n      return 0;\n    }\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.   <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>texturesByteLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  texturesByteLength: {\n    get: function () {\n      return 0;\n    }\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>batchTableByteLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  batchTableByteLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  innerContents: {\n    get: function () {\n      return this._contents;\n    }\n  },\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    }\n  },\n  tileset: {\n    get: function () {\n      return this._tileset;\n    }\n  },\n  tile: {\n    get: function () {\n      return this._tile;\n    }\n  },\n  url: {\n    get: function () {\n      return this._resource.getUrlComponent(true);\n    }\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface. <code>Composite3DTileContent</code>\n   * always returns <code>undefined</code>.  Instead call <code>batchTable</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  batchTable: {\n    get: function () {\n      return undefined;\n    }\n  }\n});\nvar sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\n\nfunction initialize(content, arrayBuffer, byteOffset, factory) {\n  byteOffset = defaultValue(byteOffset, 0);\n  var uint8Array = new Uint8Array(arrayBuffer);\n  var view = new DataView(arrayBuffer);\n  byteOffset += sizeOfUint32; // Skip magic\n\n  var version = view.getUint32(byteOffset, true);\n\n  if (version !== 1) {\n    throw new RuntimeError(\"Only Composite Tile version 1 is supported. Version \" + version + \" is not.\");\n  }\n\n  byteOffset += sizeOfUint32; // Skip byteLength\n\n  byteOffset += sizeOfUint32;\n  var tilesLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var contentPromises = [];\n\n  for (var i = 0; i < tilesLength; ++i) {\n    var tileType = getMagic(uint8Array, byteOffset); // Tile byte length is stored after magic and version\n\n    var tileByteLength = view.getUint32(byteOffset + sizeOfUint32 * 2, true);\n    var contentFactory = factory[tileType];\n\n    if (defined(contentFactory)) {\n      var innerContent = contentFactory(content._tileset, content._tile, content._resource, arrayBuffer, byteOffset);\n\n      content._contents.push(innerContent);\n\n      contentPromises.push(innerContent.readyPromise);\n    } else {\n      throw new RuntimeError(\"Unknown tile content type, \" + tileType + \", inside Composite tile\");\n    }\n\n    byteOffset += tileByteLength;\n  }\n\n  when.all(contentPromises).then(function () {\n    content._readyPromise.resolve(content);\n  }).otherwise(function (error) {\n    content._readyPromise.reject(error);\n  });\n}\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n * always returns <code>false</code>.  Instead call <code>hasProperty</code> for a tile in the composite.\n */\n\n\nComposite3DTileContent.prototype.hasProperty = function (batchId, name) {\n  return false;\n};\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n * always returns <code>undefined</code>.  Instead call <code>getFeature</code> for a tile in the composite.\n */\n\n\nComposite3DTileContent.prototype.getFeature = function (batchId) {\n  return undefined;\n};\n\nComposite3DTileContent.prototype.applyDebugSettings = function (enabled, color) {\n  var contents = this._contents;\n  var length = contents.length;\n\n  for (var i = 0; i < length; ++i) {\n    contents[i].applyDebugSettings(enabled, color);\n  }\n};\n\nComposite3DTileContent.prototype.applyStyle = function (style) {\n  var contents = this._contents;\n  var length = contents.length;\n\n  for (var i = 0; i < length; ++i) {\n    contents[i].applyStyle(style);\n  }\n};\n\nComposite3DTileContent.prototype.update = function (tileset, frameState) {\n  var contents = this._contents;\n  var length = contents.length;\n\n  for (var i = 0; i < length; ++i) {\n    contents[i].update(tileset, frameState);\n  }\n};\n\nComposite3DTileContent.prototype.isDestroyed = function () {\n  return false;\n};\n\nComposite3DTileContent.prototype.destroy = function () {\n  var contents = this._contents;\n  var length = contents.length;\n\n  for (var i = 0; i < length; ++i) {\n    contents[i].destroy();\n  }\n\n  return destroyObject(this);\n};\n\nexport default Composite3DTileContent;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/Composite3DTileContent.js"],"names":["defaultValue","defined","destroyObject","getMagic","RuntimeError","when","Composite3DTileContent","tileset","tile","resource","arrayBuffer","byteOffset","factory","_tileset","_tile","_resource","_contents","_readyPromise","defer","initialize","Object","defineProperties","prototype","featurePropertiesDirty","get","contents","length","i","set","value","featuresLength","pointsLength","trianglesLength","geometryByteLength","texturesByteLength","batchTableByteLength","innerContents","readyPromise","promise","url","getUrlComponent","batchTable","undefined","sizeOfUint32","Uint32Array","BYTES_PER_ELEMENT","content","uint8Array","Uint8Array","view","DataView","version","getUint32","tilesLength","contentPromises","tileType","tileByteLength","contentFactory","innerContent","push","all","then","resolve","otherwise","error","reject","hasProperty","batchId","name","getFeature","applyDebugSettings","enabled","color","applyStyle","style","update","frameState","isDestroyed","destroy"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport getMagic from \"../Core/getMagic.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport when from \"../ThirdParty/when.js\";\n\n/**\n * Represents the contents of a\n * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/Composite|Composite}\n * tile in a {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification|3D Tiles} tileset.\n * <p>\n * Implements the {@link Cesium3DTileContent} interface.\n * </p>\n *\n * @alias Composite3DTileContent\n * @constructor\n *\n * @private\n */\nfunction Composite3DTileContent(\n  tileset,\n  tile,\n  resource,\n  arrayBuffer,\n  byteOffset,\n  factory\n) {\n  this._tileset = tileset;\n  this._tile = tile;\n  this._resource = resource;\n  this._contents = [];\n  this._readyPromise = when.defer();\n\n  initialize(this, arrayBuffer, byteOffset, factory);\n}\n\nObject.defineProperties(Composite3DTileContent.prototype, {\n  featurePropertiesDirty: {\n    get: function () {\n      var contents = this._contents;\n      var length = contents.length;\n      for (var i = 0; i < length; ++i) {\n        if (contents[i].featurePropertiesDirty) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    set: function (value) {\n      var contents = this._contents;\n      var length = contents.length;\n      for (var i = 0; i < length; ++i) {\n        contents[i].featurePropertiesDirty = value;\n      }\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>featuresLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  featuresLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>pointsLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  pointsLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>trianglesLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  trianglesLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>geometryByteLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  geometryByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.   <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>texturesByteLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  texturesByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>batchTableByteLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  batchTableByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  innerContents: {\n    get: function () {\n      return this._contents;\n    },\n  },\n\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    },\n  },\n\n  tileset: {\n    get: function () {\n      return this._tileset;\n    },\n  },\n\n  tile: {\n    get: function () {\n      return this._tile;\n    },\n  },\n\n  url: {\n    get: function () {\n      return this._resource.getUrlComponent(true);\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface. <code>Composite3DTileContent</code>\n   * always returns <code>undefined</code>.  Instead call <code>batchTable</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  batchTable: {\n    get: function () {\n      return undefined;\n    },\n  },\n});\n\nvar sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\n\nfunction initialize(content, arrayBuffer, byteOffset, factory) {\n  byteOffset = defaultValue(byteOffset, 0);\n\n  var uint8Array = new Uint8Array(arrayBuffer);\n  var view = new DataView(arrayBuffer);\n  byteOffset += sizeOfUint32; // Skip magic\n\n  var version = view.getUint32(byteOffset, true);\n  if (version !== 1) {\n    throw new RuntimeError(\n      \"Only Composite Tile version 1 is supported. Version \" +\n        version +\n        \" is not.\"\n    );\n  }\n  byteOffset += sizeOfUint32;\n\n  // Skip byteLength\n  byteOffset += sizeOfUint32;\n\n  var tilesLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  var contentPromises = [];\n\n  for (var i = 0; i < tilesLength; ++i) {\n    var tileType = getMagic(uint8Array, byteOffset);\n\n    // Tile byte length is stored after magic and version\n    var tileByteLength = view.getUint32(byteOffset + sizeOfUint32 * 2, true);\n\n    var contentFactory = factory[tileType];\n\n    if (defined(contentFactory)) {\n      var innerContent = contentFactory(\n        content._tileset,\n        content._tile,\n        content._resource,\n        arrayBuffer,\n        byteOffset\n      );\n      content._contents.push(innerContent);\n      contentPromises.push(innerContent.readyPromise);\n    } else {\n      throw new RuntimeError(\n        \"Unknown tile content type, \" + tileType + \", inside Composite tile\"\n      );\n    }\n\n    byteOffset += tileByteLength;\n  }\n\n  when\n    .all(contentPromises)\n    .then(function () {\n      content._readyPromise.resolve(content);\n    })\n    .otherwise(function (error) {\n      content._readyPromise.reject(error);\n    });\n}\n\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n * always returns <code>false</code>.  Instead call <code>hasProperty</code> for a tile in the composite.\n */\nComposite3DTileContent.prototype.hasProperty = function (batchId, name) {\n  return false;\n};\n\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n * always returns <code>undefined</code>.  Instead call <code>getFeature</code> for a tile in the composite.\n */\nComposite3DTileContent.prototype.getFeature = function (batchId) {\n  return undefined;\n};\n\nComposite3DTileContent.prototype.applyDebugSettings = function (\n  enabled,\n  color\n) {\n  var contents = this._contents;\n  var length = contents.length;\n  for (var i = 0; i < length; ++i) {\n    contents[i].applyDebugSettings(enabled, color);\n  }\n};\n\nComposite3DTileContent.prototype.applyStyle = function (style) {\n  var contents = this._contents;\n  var length = contents.length;\n  for (var i = 0; i < length; ++i) {\n    contents[i].applyStyle(style);\n  }\n};\n\nComposite3DTileContent.prototype.update = function (tileset, frameState) {\n  var contents = this._contents;\n  var length = contents.length;\n  for (var i = 0; i < length; ++i) {\n    contents[i].update(tileset, frameState);\n  }\n};\n\nComposite3DTileContent.prototype.isDestroyed = function () {\n  return false;\n};\n\nComposite3DTileContent.prototype.destroy = function () {\n  var contents = this._contents;\n  var length = contents.length;\n  for (var i = 0; i < length; ++i) {\n    contents[i].destroy();\n  }\n  return destroyObject(this);\n};\nexport default Composite3DTileContent;\n"]},"metadata":{},"sourceType":"module"}