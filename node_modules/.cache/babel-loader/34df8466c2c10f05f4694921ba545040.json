{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n/**\n * Describes an ellipse defined by a center point and semi-major and semi-minor axes.\n * The ellipse conforms to the curvature of the globe and can be placed on the surface or\n * at altitude and can optionally be extruded into a volume.\n * The center point is determined by the containing {@link Entity}.\n *\n * @alias EllipseGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the ellipse.\n * @param {Property} [options.semiMajorAxis] The numeric Property specifying the semi-major axis.\n * @param {Property} [options.semiMinorAxis] The numeric Property specifying the semi-minor axis.\n * @param {Property} [options.height=0] A numeric Property specifying the altitude of the ellipse relative to the ellipsoid surface.\n * @param {Property} [options.heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @param {Property} [options.extrudedHeight] A numeric Property specifying the altitude of the ellipse's extruded face relative to the ellipsoid surface.\n * @param {Property} [options.extrudedHeightReference=HeightReference.NONE] A Property specifying what the extrudedHeight is relative to.\n * @param {Property} [options.rotation=0.0] A numeric property specifying the rotation of the ellipse counter-clockwise from north.\n * @param {Property} [options.stRotation=0.0] A numeric property specifying the rotation of the ellipse texture counter-clockwise from north.\n * @param {Property} [options.granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the angular distance between points on the ellipse.\n * @param {Property} [options.fill=true] A boolean Property specifying whether the ellipse is filled with the provided material.\n * @param {MaterialProperty} [options.material=Color.WHITE] A Property specifying the material used to fill the ellipse.\n * @param {Property} [options.outline=false] A boolean Property specifying whether the ellipse is outlined.\n * @param {Property} [options.outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @param {Property} [options.outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @param {Property} [options.numberOfVerticalLines=16] A numeric Property specifying the number of vertical lines to draw along the perimeter for the outline.\n * @param {Property} [options.shadows=ShadowMode.DISABLED] An enum Property specifying whether the ellipse casts or receives shadows from light sources.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this ellipse will be displayed.\n * @param {Property} [options.classificationType=ClassificationType.BOTH] An enum Property specifying whether this ellipse will classify terrain, 3D Tiles, or both when on the ground.\n * @param {ConstantProperty} [options.zIndex=0] A property specifying the zIndex of the Ellipse.  Used for ordering ground geometry.  Only has an effect if the ellipse is constant and neither height or exturdedHeight are specified.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Circles and Ellipses.html|Cesium Sandcastle Circles and Ellipses Demo}\n */\n\nfunction EllipseGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._semiMajorAxis = undefined;\n  this._semiMajorAxisSubscription = undefined;\n  this._semiMinorAxis = undefined;\n  this._semiMinorAxisSubscription = undefined;\n  this._height = undefined;\n  this._heightSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._extrudedHeight = undefined;\n  this._extrudedHeightSubscription = undefined;\n  this._extrudedHeightReference = undefined;\n  this._extrudedHeightReferenceSubscription = undefined;\n  this._rotation = undefined;\n  this._rotationSubscription = undefined;\n  this._stRotation = undefined;\n  this._stRotationSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._numberOfVerticalLines = undefined;\n  this._numberOfVerticalLinesSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._classificationType = undefined;\n  this._classificationTypeSubscription = undefined;\n  this._zIndex = undefined;\n  this._zIndexSubscription = undefined;\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(EllipseGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof EllipseGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the ellipse.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the semi-major axis.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   */\n  semiMajorAxis: createPropertyDescriptor(\"semiMajorAxis\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the semi-minor axis.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   */\n  semiMinorAxis: createPropertyDescriptor(\"semiMinorAxis\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the ellipse.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default 0.0\n   */\n  height: createPropertyDescriptor(\"height\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the ellipse extrusion.\n   * Setting this property creates volume starting at height and ending at this altitude.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   */\n  extrudedHeight: createPropertyDescriptor(\"extrudedHeight\"),\n\n  /**\n   * Gets or sets the Property specifying the extruded {@link HeightReference}.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default HeightReference.NONE\n   */\n  extrudedHeightReference: createPropertyDescriptor(\"extrudedHeightReference\"),\n\n  /**\n   * Gets or sets the numeric property specifying the rotation of the ellipse clockwise from north.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default 0\n   */\n  rotation: createPropertyDescriptor(\"rotation\"),\n\n  /**\n   * Gets or sets the numeric property specifying the rotation of the ellipse texture counter-clockwise from north.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default 0\n   */\n  stRotation: createPropertyDescriptor(\"stRotation\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the angular distance between points on the ellipse.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default {CesiumMath.RADIANS_PER_DEGREE}\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the ellipse is filled with the provided material.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the ellipse.\n   * @memberof EllipseGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the ellipse is outlined.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the number of vertical lines to draw along the perimeter for the outline.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default 16\n   */\n  numberOfVerticalLines: createPropertyDescriptor(\"numberOfVerticalLines\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the ellipse\n   * casts or receives shadows from light sources.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this ellipse will be displayed.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\"distanceDisplayCondition\"),\n\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying whether this ellipse will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default ClassificationType.BOTH\n   */\n  classificationType: createPropertyDescriptor(\"classificationType\"),\n\n  /**\n   * Gets or sets the zIndex Property specifying the ellipse ordering.  Only has an effect if the ellipse is constant and neither height or extrudedHeight are specified\n   * @memberof EllipseGraphics.prototype\n   * @type {ConstantProperty}\n   * @default 0\n   */\n  zIndex: createPropertyDescriptor(\"zIndex\")\n});\n/**\n * Duplicates this instance.\n *\n * @param {EllipseGraphics} [result] The object onto which to store the result.\n * @returns {EllipseGraphics} The modified result parameter or a new instance if one was not provided.\n */\n\nEllipseGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new EllipseGraphics(this);\n  }\n\n  result.show = this.show;\n  result.semiMajorAxis = this.semiMajorAxis;\n  result.semiMinorAxis = this.semiMinorAxis;\n  result.height = this.height;\n  result.heightReference = this.heightReference;\n  result.extrudedHeight = this.extrudedHeight;\n  result.extrudedHeightReference = this.extrudedHeightReference;\n  result.rotation = this.rotation;\n  result.stRotation = this.stRotation;\n  result.granularity = this.granularity;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.numberOfVerticalLines = this.numberOfVerticalLines;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.classificationType = this.classificationType;\n  result.zIndex = this.zIndex;\n  return result;\n};\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {EllipseGraphics} source The object to be merged into this object.\n */\n\n\nEllipseGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  } //>>includeEnd('debug');\n\n\n  this.show = defaultValue(this.show, source.show);\n  this.semiMajorAxis = defaultValue(this.semiMajorAxis, source.semiMajorAxis);\n  this.semiMinorAxis = defaultValue(this.semiMinorAxis, source.semiMinorAxis);\n  this.height = defaultValue(this.height, source.height);\n  this.heightReference = defaultValue(this.heightReference, source.heightReference);\n  this.extrudedHeight = defaultValue(this.extrudedHeight, source.extrudedHeight);\n  this.extrudedHeightReference = defaultValue(this.extrudedHeightReference, source.extrudedHeightReference);\n  this.rotation = defaultValue(this.rotation, source.rotation);\n  this.stRotation = defaultValue(this.stRotation, source.stRotation);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.numberOfVerticalLines = defaultValue(this.numberOfVerticalLines, source.numberOfVerticalLines);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(this.distanceDisplayCondition, source.distanceDisplayCondition);\n  this.classificationType = defaultValue(this.classificationType, source.classificationType);\n  this.zIndex = defaultValue(this.zIndex, source.zIndex);\n};\n\nexport default EllipseGraphics;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/EllipseGraphics.js"],"names":["defaultValue","defined","DeveloperError","Event","createMaterialPropertyDescriptor","createPropertyDescriptor","EllipseGraphics","options","_definitionChanged","_show","undefined","_showSubscription","_semiMajorAxis","_semiMajorAxisSubscription","_semiMinorAxis","_semiMinorAxisSubscription","_height","_heightSubscription","_heightReference","_heightReferenceSubscription","_extrudedHeight","_extrudedHeightSubscription","_extrudedHeightReference","_extrudedHeightReferenceSubscription","_rotation","_rotationSubscription","_stRotation","_stRotationSubscription","_granularity","_granularitySubscription","_fill","_fillSubscription","_material","_materialSubscription","_outline","_outlineSubscription","_outlineColor","_outlineColorSubscription","_outlineWidth","_outlineWidthSubscription","_numberOfVerticalLines","_numberOfVerticalLinesSubscription","_shadows","_shadowsSubscription","_distanceDisplayCondition","_distanceDisplayConditionSubscription","_classificationType","_classificationTypeSubscription","_zIndex","_zIndexSubscription","merge","EMPTY_OBJECT","Object","defineProperties","prototype","definitionChanged","get","show","semiMajorAxis","semiMinorAxis","height","heightReference","extrudedHeight","extrudedHeightReference","rotation","stRotation","granularity","fill","material","outline","outlineColor","outlineWidth","numberOfVerticalLines","shadows","distanceDisplayCondition","classificationType","zIndex","clone","result","source"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * Describes an ellipse defined by a center point and semi-major and semi-minor axes.\n * The ellipse conforms to the curvature of the globe and can be placed on the surface or\n * at altitude and can optionally be extruded into a volume.\n * The center point is determined by the containing {@link Entity}.\n *\n * @alias EllipseGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the ellipse.\n * @param {Property} [options.semiMajorAxis] The numeric Property specifying the semi-major axis.\n * @param {Property} [options.semiMinorAxis] The numeric Property specifying the semi-minor axis.\n * @param {Property} [options.height=0] A numeric Property specifying the altitude of the ellipse relative to the ellipsoid surface.\n * @param {Property} [options.heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @param {Property} [options.extrudedHeight] A numeric Property specifying the altitude of the ellipse's extruded face relative to the ellipsoid surface.\n * @param {Property} [options.extrudedHeightReference=HeightReference.NONE] A Property specifying what the extrudedHeight is relative to.\n * @param {Property} [options.rotation=0.0] A numeric property specifying the rotation of the ellipse counter-clockwise from north.\n * @param {Property} [options.stRotation=0.0] A numeric property specifying the rotation of the ellipse texture counter-clockwise from north.\n * @param {Property} [options.granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the angular distance between points on the ellipse.\n * @param {Property} [options.fill=true] A boolean Property specifying whether the ellipse is filled with the provided material.\n * @param {MaterialProperty} [options.material=Color.WHITE] A Property specifying the material used to fill the ellipse.\n * @param {Property} [options.outline=false] A boolean Property specifying whether the ellipse is outlined.\n * @param {Property} [options.outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @param {Property} [options.outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @param {Property} [options.numberOfVerticalLines=16] A numeric Property specifying the number of vertical lines to draw along the perimeter for the outline.\n * @param {Property} [options.shadows=ShadowMode.DISABLED] An enum Property specifying whether the ellipse casts or receives shadows from light sources.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this ellipse will be displayed.\n * @param {Property} [options.classificationType=ClassificationType.BOTH] An enum Property specifying whether this ellipse will classify terrain, 3D Tiles, or both when on the ground.\n * @param {ConstantProperty} [options.zIndex=0] A property specifying the zIndex of the Ellipse.  Used for ordering ground geometry.  Only has an effect if the ellipse is constant and neither height or exturdedHeight are specified.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Circles and Ellipses.html|Cesium Sandcastle Circles and Ellipses Demo}\n */\nfunction EllipseGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._semiMajorAxis = undefined;\n  this._semiMajorAxisSubscription = undefined;\n  this._semiMinorAxis = undefined;\n  this._semiMinorAxisSubscription = undefined;\n  this._height = undefined;\n  this._heightSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._extrudedHeight = undefined;\n  this._extrudedHeightSubscription = undefined;\n  this._extrudedHeightReference = undefined;\n  this._extrudedHeightReferenceSubscription = undefined;\n  this._rotation = undefined;\n  this._rotationSubscription = undefined;\n  this._stRotation = undefined;\n  this._stRotationSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._numberOfVerticalLines = undefined;\n  this._numberOfVerticalLinesSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._classificationType = undefined;\n  this._classificationTypeSubscription = undefined;\n  this._zIndex = undefined;\n  this._zIndexSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(EllipseGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof EllipseGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the ellipse.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the semi-major axis.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   */\n  semiMajorAxis: createPropertyDescriptor(\"semiMajorAxis\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the semi-minor axis.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   */\n  semiMinorAxis: createPropertyDescriptor(\"semiMinorAxis\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the ellipse.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default 0.0\n   */\n  height: createPropertyDescriptor(\"height\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the ellipse extrusion.\n   * Setting this property creates volume starting at height and ending at this altitude.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   */\n  extrudedHeight: createPropertyDescriptor(\"extrudedHeight\"),\n\n  /**\n   * Gets or sets the Property specifying the extruded {@link HeightReference}.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default HeightReference.NONE\n   */\n  extrudedHeightReference: createPropertyDescriptor(\"extrudedHeightReference\"),\n\n  /**\n   * Gets or sets the numeric property specifying the rotation of the ellipse clockwise from north.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default 0\n   */\n  rotation: createPropertyDescriptor(\"rotation\"),\n\n  /**\n   * Gets or sets the numeric property specifying the rotation of the ellipse texture counter-clockwise from north.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default 0\n   */\n  stRotation: createPropertyDescriptor(\"stRotation\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the angular distance between points on the ellipse.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default {CesiumMath.RADIANS_PER_DEGREE}\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the ellipse is filled with the provided material.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the ellipse.\n   * @memberof EllipseGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the ellipse is outlined.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the number of vertical lines to draw along the perimeter for the outline.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default 16\n   */\n  numberOfVerticalLines: createPropertyDescriptor(\"numberOfVerticalLines\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the ellipse\n   * casts or receives shadows from light sources.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this ellipse will be displayed.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying whether this ellipse will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property}\n   * @default ClassificationType.BOTH\n   */\n  classificationType: createPropertyDescriptor(\"classificationType\"),\n\n  /**\n   * Gets or sets the zIndex Property specifying the ellipse ordering.  Only has an effect if the ellipse is constant and neither height or extrudedHeight are specified\n   * @memberof EllipseGraphics.prototype\n   * @type {ConstantProperty}\n   * @default 0\n   */\n  zIndex: createPropertyDescriptor(\"zIndex\"),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {EllipseGraphics} [result] The object onto which to store the result.\n * @returns {EllipseGraphics} The modified result parameter or a new instance if one was not provided.\n */\nEllipseGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new EllipseGraphics(this);\n  }\n  result.show = this.show;\n  result.semiMajorAxis = this.semiMajorAxis;\n  result.semiMinorAxis = this.semiMinorAxis;\n  result.height = this.height;\n  result.heightReference = this.heightReference;\n  result.extrudedHeight = this.extrudedHeight;\n  result.extrudedHeightReference = this.extrudedHeightReference;\n  result.rotation = this.rotation;\n  result.stRotation = this.stRotation;\n  result.granularity = this.granularity;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.numberOfVerticalLines = this.numberOfVerticalLines;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.classificationType = this.classificationType;\n  result.zIndex = this.zIndex;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {EllipseGraphics} source The object to be merged into this object.\n */\nEllipseGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.semiMajorAxis = defaultValue(this.semiMajorAxis, source.semiMajorAxis);\n  this.semiMinorAxis = defaultValue(this.semiMinorAxis, source.semiMinorAxis);\n  this.height = defaultValue(this.height, source.height);\n  this.heightReference = defaultValue(\n    this.heightReference,\n    source.heightReference\n  );\n  this.extrudedHeight = defaultValue(\n    this.extrudedHeight,\n    source.extrudedHeight\n  );\n  this.extrudedHeightReference = defaultValue(\n    this.extrudedHeightReference,\n    source.extrudedHeightReference\n  );\n  this.rotation = defaultValue(this.rotation, source.rotation);\n  this.stRotation = defaultValue(this.stRotation, source.stRotation);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.numberOfVerticalLines = defaultValue(\n    this.numberOfVerticalLines,\n    source.numberOfVerticalLines\n  );\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n  this.classificationType = defaultValue(\n    this.classificationType,\n    source.classificationType\n  );\n  this.zIndex = defaultValue(this.zIndex, source.zIndex);\n};\nexport default EllipseGraphics;\n"]},"metadata":{},"sourceType":"module"}