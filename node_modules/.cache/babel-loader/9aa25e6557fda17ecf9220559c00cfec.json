{"ast":null,"code":"import DOMPurify from \"../ThirdParty/purify.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nvar nextCreditId = 0;\nvar creditToId = {};\n/**\n * A credit contains data pertaining to how to display attributions/credits for certain content on the screen.\n * @param {String} html An string representing an html code snippet\n * @param {Boolean} [showOnScreen=false] If true, the credit will be visible in the main credit container.  Otherwise, it will appear in a popover\n *\n * @alias Credit\n * @constructor\n *\n * @exception {DeveloperError} html is required.\n *\n * @example\n * //Create a credit with a tooltip, image and link\n * var credit = new Cesium.Credit('<a href=\"https://cesium.com/\" target=\"_blank\"><img src=\"/images/cesium_logo.png\" title=\"Cesium\"/></a>');\n */\n\nfunction Credit(html, showOnScreen) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"html\", html); //>>includeEnd('debug');\n\n  var id;\n  var key = html;\n\n  if (defined(creditToId[key])) {\n    id = creditToId[key];\n  } else {\n    id = nextCreditId++;\n    creditToId[key] = id;\n  }\n\n  showOnScreen = defaultValue(showOnScreen, false); // Credits are immutable so generate an id to use to optimize equal()\n\n  this._id = id;\n  this._html = html;\n  this._showOnScreen = showOnScreen;\n  this._element = undefined;\n}\n\nObject.defineProperties(Credit.prototype, {\n  /**\n   * The credit content\n   * @memberof Credit.prototype\n   * @type {String}\n   * @readonly\n   */\n  html: {\n    get: function () {\n      return this._html;\n    }\n  },\n\n  /**\n   * @memberof Credit.prototype\n   * @type {Number}\n   * @readonly\n   *\n   * @private\n   */\n  id: {\n    get: function () {\n      return this._id;\n    }\n  },\n\n  /**\n   * Whether the credit should be displayed on screen or in a lightbox\n   * @memberof Credit.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  showOnScreen: {\n    get: function () {\n      return this._showOnScreen;\n    }\n  },\n\n  /**\n   * Gets the credit element\n   * @memberof Credit.prototype\n   * @type {HTMLElement}\n   * @readonly\n   */\n  element: {\n    get: function () {\n      if (!defined(this._element)) {\n        var html = DOMPurify.sanitize(this._html);\n        var div = document.createElement(\"div\");\n        div._creditId = this._id;\n        div.style.display = \"inline\";\n        div.innerHTML = html;\n        var links = div.querySelectorAll(\"a\");\n\n        for (var i = 0; i < links.length; i++) {\n          links[i].setAttribute(\"target\", \"_blank\");\n        }\n\n        this._element = div;\n      }\n\n      return this._element;\n    }\n  }\n});\n/**\n * Returns true if the credits are equal\n *\n * @param {Credit} left The first credit\n * @param {Credit} right The second credit\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\nCredit.equals = function (left, right) {\n  return left === right || defined(left) && defined(right) && left._id === right._id;\n};\n/**\n * Returns true if the credits are equal\n *\n * @param {Credit} credit The credit to compare to.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nCredit.prototype.equals = function (credit) {\n  return Credit.equals(this, credit);\n};\n/**\n * @private\n * @param attribution\n * @return {Credit}\n */\n\n\nCredit.getIonCredit = function (attribution) {\n  var showOnScreen = defined(attribution.collapsible) && !attribution.collapsible;\n  var credit = new Credit(attribution.html, showOnScreen);\n  credit._isIon = credit.html.indexOf(\"ion-credit.png\") !== -1;\n  return credit;\n};\n/**\n * Duplicates a Credit instance.\n *\n * @param {Credit} [credit] The Credit to duplicate.\n * @returns {Credit} A new Credit instance that is a duplicate of the one provided. (Returns undefined if the credit is undefined)\n */\n\n\nCredit.clone = function (credit) {\n  if (defined(credit)) {\n    return new Credit(credit.html, credit.showOnScreen);\n  }\n};\n\nexport default Credit;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/Credit.js"],"names":["DOMPurify","Check","defaultValue","defined","nextCreditId","creditToId","Credit","html","showOnScreen","typeOf","string","id","key","_id","_html","_showOnScreen","_element","undefined","Object","defineProperties","prototype","get","element","sanitize","div","document","createElement","_creditId","style","display","innerHTML","links","querySelectorAll","i","length","setAttribute","equals","left","right","credit","getIonCredit","attribution","collapsible","_isIon","indexOf","clone"],"mappings":"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","sourcesContent":["import DOMPurify from \"../ThirdParty/purify.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\n\nvar nextCreditId = 0;\nvar creditToId = {};\n\n/**\n * A credit contains data pertaining to how to display attributions/credits for certain content on the screen.\n * @param {String} html An string representing an html code snippet\n * @param {Boolean} [showOnScreen=false] If true, the credit will be visible in the main credit container.  Otherwise, it will appear in a popover\n *\n * @alias Credit\n * @constructor\n *\n * @exception {DeveloperError} html is required.\n *\n * @example\n * //Create a credit with a tooltip, image and link\n * var credit = new Cesium.Credit('<a href=\"https://cesium.com/\" target=\"_blank\"><img src=\"/images/cesium_logo.png\" title=\"Cesium\"/></a>');\n */\nfunction Credit(html, showOnScreen) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"html\", html);\n  //>>includeEnd('debug');\n  var id;\n  var key = html;\n\n  if (defined(creditToId[key])) {\n    id = creditToId[key];\n  } else {\n    id = nextCreditId++;\n    creditToId[key] = id;\n  }\n\n  showOnScreen = defaultValue(showOnScreen, false);\n\n  // Credits are immutable so generate an id to use to optimize equal()\n  this._id = id;\n  this._html = html;\n  this._showOnScreen = showOnScreen;\n  this._element = undefined;\n}\n\nObject.defineProperties(Credit.prototype, {\n  /**\n   * The credit content\n   * @memberof Credit.prototype\n   * @type {String}\n   * @readonly\n   */\n  html: {\n    get: function () {\n      return this._html;\n    },\n  },\n\n  /**\n   * @memberof Credit.prototype\n   * @type {Number}\n   * @readonly\n   *\n   * @private\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n\n  /**\n   * Whether the credit should be displayed on screen or in a lightbox\n   * @memberof Credit.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  showOnScreen: {\n    get: function () {\n      return this._showOnScreen;\n    },\n  },\n\n  /**\n   * Gets the credit element\n   * @memberof Credit.prototype\n   * @type {HTMLElement}\n   * @readonly\n   */\n  element: {\n    get: function () {\n      if (!defined(this._element)) {\n        var html = DOMPurify.sanitize(this._html);\n\n        var div = document.createElement(\"div\");\n        div._creditId = this._id;\n        div.style.display = \"inline\";\n        div.innerHTML = html;\n\n        var links = div.querySelectorAll(\"a\");\n        for (var i = 0; i < links.length; i++) {\n          links[i].setAttribute(\"target\", \"_blank\");\n        }\n\n        this._element = div;\n      }\n      return this._element;\n    },\n  },\n});\n\n/**\n * Returns true if the credits are equal\n *\n * @param {Credit} left The first credit\n * @param {Credit} right The second credit\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCredit.equals = function (left, right) {\n  return (\n    left === right ||\n    (defined(left) && defined(right) && left._id === right._id)\n  );\n};\n\n/**\n * Returns true if the credits are equal\n *\n * @param {Credit} credit The credit to compare to.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCredit.prototype.equals = function (credit) {\n  return Credit.equals(this, credit);\n};\n\n/**\n * @private\n * @param attribution\n * @return {Credit}\n */\nCredit.getIonCredit = function (attribution) {\n  var showOnScreen =\n    defined(attribution.collapsible) && !attribution.collapsible;\n  var credit = new Credit(attribution.html, showOnScreen);\n\n  credit._isIon = credit.html.indexOf(\"ion-credit.png\") !== -1;\n  return credit;\n};\n\n/**\n * Duplicates a Credit instance.\n *\n * @param {Credit} [credit] The Credit to duplicate.\n * @returns {Credit} A new Credit instance that is a duplicate of the one provided. (Returns undefined if the credit is undefined)\n */\nCredit.clone = function (credit) {\n  if (defined(credit)) {\n    return new Credit(credit.html, credit.showOnScreen);\n  }\n};\nexport default Credit;\n"]},"metadata":{},"sourceType":"module"}