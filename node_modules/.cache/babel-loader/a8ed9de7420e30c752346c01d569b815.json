{"ast":null,"code":"/**\n * Parses the result of XMLHttpRequest's getAllResponseHeaders() method into\n * a dictionary.\n *\n * @exports parseResponseHeaders\n *\n * @param {String} headerString The header string returned by getAllResponseHeaders().  The format is\n *                 described here: http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method\n * @returns {Object} A dictionary of key/value pairs, where each key is the name of a header and the corresponding value\n *                   is that header's value.\n *\n * @private\n */\nfunction parseResponseHeaders(headerString) {\n  var headers = {};\n\n  if (!headerString) {\n    return headers;\n  }\n\n  var headerPairs = headerString.split(\"\\r\\n\");\n\n  for (var i = 0; i < headerPairs.length; ++i) {\n    var headerPair = headerPairs[i]; // Can't use split() here because it does the wrong thing\n    // if the header value has the string \": \" in it.\n\n    var index = headerPair.indexOf(\": \");\n\n    if (index > 0) {\n      var key = headerPair.substring(0, index);\n      var val = headerPair.substring(index + 2);\n      headers[key] = val;\n    }\n  }\n\n  return headers;\n}\n\nexport default parseResponseHeaders;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/parseResponseHeaders.js"],"names":["parseResponseHeaders","headerString","headers","headerPairs","split","i","length","headerPair","index","indexOf","key","substring","val"],"mappings":"AAAA;;;;;;;;;;;;;AAaA,SAASA,oBAAT,CAA8BC,YAA9B,EAA4C;AAC1C,MAAIC,OAAO,GAAG,EAAd;;AAEA,MAAI,CAACD,YAAL,EAAmB;AACjB,WAAOC,OAAP;AACD;;AAED,MAAIC,WAAW,GAAGF,YAAY,CAACG,KAAb,CAAmB,MAAnB,CAAlB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACG,MAAhC,EAAwC,EAAED,CAA1C,EAA6C;AAC3C,QAAIE,UAAU,GAAGJ,WAAW,CAACE,CAAD,CAA5B,CAD2C,CAE3C;AACA;;AACA,QAAIG,KAAK,GAAGD,UAAU,CAACE,OAAX,CAAmB,IAAnB,CAAZ;;AACA,QAAID,KAAK,GAAG,CAAZ,EAAe;AACb,UAAIE,GAAG,GAAGH,UAAU,CAACI,SAAX,CAAqB,CAArB,EAAwBH,KAAxB,CAAV;AACA,UAAII,GAAG,GAAGL,UAAU,CAACI,SAAX,CAAqBH,KAAK,GAAG,CAA7B,CAAV;AACAN,MAAAA,OAAO,CAACQ,GAAD,CAAP,GAAeE,GAAf;AACD;AACF;;AAED,SAAOV,OAAP;AACD;;AACD,eAAeF,oBAAf","sourcesContent":["/**\n * Parses the result of XMLHttpRequest's getAllResponseHeaders() method into\n * a dictionary.\n *\n * @exports parseResponseHeaders\n *\n * @param {String} headerString The header string returned by getAllResponseHeaders().  The format is\n *                 described here: http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method\n * @returns {Object} A dictionary of key/value pairs, where each key is the name of a header and the corresponding value\n *                   is that header's value.\n *\n * @private\n */\nfunction parseResponseHeaders(headerString) {\n  var headers = {};\n\n  if (!headerString) {\n    return headers;\n  }\n\n  var headerPairs = headerString.split(\"\\u000d\\u000a\");\n\n  for (var i = 0; i < headerPairs.length; ++i) {\n    var headerPair = headerPairs[i];\n    // Can't use split() here because it does the wrong thing\n    // if the header value has the string \": \" in it.\n    var index = headerPair.indexOf(\"\\u003a\\u0020\");\n    if (index > 0) {\n      var key = headerPair.substring(0, index);\n      var val = headerPair.substring(index + 2);\n      headers[key] = val;\n    }\n  }\n\n  return headers;\n}\nexport default parseResponseHeaders;\n"]},"metadata":{},"sourceType":"module"}