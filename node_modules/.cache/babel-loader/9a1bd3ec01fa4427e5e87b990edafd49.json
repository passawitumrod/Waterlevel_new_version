{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport CesiumMath from \"../Core/Math.js\";\n/**\n * A ParticleEmitter that emits particles from a circle.\n * Particles will be positioned within a circle and have initial velocities going along the z vector.\n *\n * @alias CircleEmitter\n * @constructor\n *\n * @param {Number} [radius=1.0] The radius of the circle in meters.\n */\n\nfunction CircleEmitter(radius) {\n  radius = defaultValue(radius, 1.0); //>>includeStart('debug', pragmas.debug);\n\n  Check.typeOf.number.greaterThan(\"radius\", radius, 0.0); //>>includeEnd('debug');\n\n  this._radius = defaultValue(radius, 1.0);\n}\n\nObject.defineProperties(CircleEmitter.prototype, {\n  /**\n   * The radius of the circle in meters.\n   * @memberof CircleEmitter.prototype\n   * @type {Number}\n   * @default 1.0\n   */\n  radius: {\n    get: function get() {\n      return this._radius;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThan(\"value\", value, 0.0); //>>includeEnd('debug');\n\n      this._radius = value;\n    }\n  }\n});\n/**\n * Initializes the given {@link Particle} by setting it's position and velocity.\n *\n * @private\n * @param {Particle} particle The particle to initialize.\n */\n\nCircleEmitter.prototype.emit = function (particle) {\n  var theta = CesiumMath.randomBetween(0.0, CesiumMath.TWO_PI);\n  var rad = CesiumMath.randomBetween(0.0, this._radius);\n  var x = rad * Math.cos(theta);\n  var y = rad * Math.sin(theta);\n  var z = 0.0;\n  particle.position = Cartesian3.fromElements(x, y, z, particle.position);\n  particle.velocity = Cartesian3.clone(Cartesian3.UNIT_Z, particle.velocity);\n};\n\nexport default CircleEmitter;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/CircleEmitter.js"],"names":["Cartesian3","Check","defaultValue","CesiumMath","CircleEmitter","radius","typeOf","number","greaterThan","_radius","Object","defineProperties","prototype","get","set","value","emit","particle","theta","randomBetween","TWO_PI","rad","x","Math","cos","y","sin","z","position","fromElements","velocity","clone","UNIT_Z"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,uBAAvB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AAEA;;;;;;;;;;AASA,SAASC,aAAT,CAAuBC,MAAvB,EAA+B;AAC7BA,EAAAA,MAAM,GAAGH,YAAY,CAACG,MAAD,EAAS,GAAT,CAArB,CAD6B,CAG7B;;AACAJ,EAAAA,KAAK,CAACK,MAAN,CAAaC,MAAb,CAAoBC,WAApB,CAAgC,QAAhC,EAA0CH,MAA1C,EAAkD,GAAlD,EAJ6B,CAK7B;;AAEA,OAAKI,OAAL,GAAeP,YAAY,CAACG,MAAD,EAAS,GAAT,CAA3B;AACD;;AAEDK,MAAM,CAACC,gBAAP,CAAwBP,aAAa,CAACQ,SAAtC,EAAiD;AAC/C;;;;;;AAMAP,EAAAA,MAAM,EAAE;AACNQ,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKJ,OAAZ;AACD,KAHK;AAINK,IAAAA,GAAG,EAAE,aAAUC,KAAV,EAAiB;AACpB;AACAd,MAAAA,KAAK,CAACK,MAAN,CAAaC,MAAb,CAAoBC,WAApB,CAAgC,OAAhC,EAAyCO,KAAzC,EAAgD,GAAhD,EAFoB,CAGpB;;AACA,WAAKN,OAAL,GAAeM,KAAf;AACD;AATK;AAPuC,CAAjD;AAoBA;;;;;;;AAMAX,aAAa,CAACQ,SAAd,CAAwBI,IAAxB,GAA+B,UAAUC,QAAV,EAAoB;AACjD,MAAIC,KAAK,GAAGf,UAAU,CAACgB,aAAX,CAAyB,GAAzB,EAA8BhB,UAAU,CAACiB,MAAzC,CAAZ;AACA,MAAIC,GAAG,GAAGlB,UAAU,CAACgB,aAAX,CAAyB,GAAzB,EAA8B,KAAKV,OAAnC,CAAV;AAEA,MAAIa,CAAC,GAAGD,GAAG,GAAGE,IAAI,CAACC,GAAL,CAASN,KAAT,CAAd;AACA,MAAIO,CAAC,GAAGJ,GAAG,GAAGE,IAAI,CAACG,GAAL,CAASR,KAAT,CAAd;AACA,MAAIS,CAAC,GAAG,GAAR;AAEAV,EAAAA,QAAQ,CAACW,QAAT,GAAoB5B,UAAU,CAAC6B,YAAX,CAAwBP,CAAxB,EAA2BG,CAA3B,EAA8BE,CAA9B,EAAiCV,QAAQ,CAACW,QAA1C,CAApB;AACAX,EAAAA,QAAQ,CAACa,QAAT,GAAoB9B,UAAU,CAAC+B,KAAX,CAAiB/B,UAAU,CAACgC,MAA5B,EAAoCf,QAAQ,CAACa,QAA7C,CAApB;AACD,CAVD;;AAWA,eAAe1B,aAAf","sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport CesiumMath from \"../Core/Math.js\";\n\n/**\n * A ParticleEmitter that emits particles from a circle.\n * Particles will be positioned within a circle and have initial velocities going along the z vector.\n *\n * @alias CircleEmitter\n * @constructor\n *\n * @param {Number} [radius=1.0] The radius of the circle in meters.\n */\nfunction CircleEmitter(radius) {\n  radius = defaultValue(radius, 1.0);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThan(\"radius\", radius, 0.0);\n  //>>includeEnd('debug');\n\n  this._radius = defaultValue(radius, 1.0);\n}\n\nObject.defineProperties(CircleEmitter.prototype, {\n  /**\n   * The radius of the circle in meters.\n   * @memberof CircleEmitter.prototype\n   * @type {Number}\n   * @default 1.0\n   */\n  radius: {\n    get: function () {\n      return this._radius;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThan(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._radius = value;\n    },\n  },\n});\n\n/**\n * Initializes the given {@link Particle} by setting it's position and velocity.\n *\n * @private\n * @param {Particle} particle The particle to initialize.\n */\nCircleEmitter.prototype.emit = function (particle) {\n  var theta = CesiumMath.randomBetween(0.0, CesiumMath.TWO_PI);\n  var rad = CesiumMath.randomBetween(0.0, this._radius);\n\n  var x = rad * Math.cos(theta);\n  var y = rad * Math.sin(theta);\n  var z = 0.0;\n\n  particle.position = Cartesian3.fromElements(x, y, z, particle.position);\n  particle.velocity = Cartesian3.clone(Cartesian3.UNIT_Z, particle.velocity);\n};\nexport default CircleEmitter;\n"]},"metadata":{},"sourceType":"module"}