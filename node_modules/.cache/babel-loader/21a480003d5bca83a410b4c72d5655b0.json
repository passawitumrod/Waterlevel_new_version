{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Appearance from \"./Appearance.js\";\n/**\n * Visualizes a vertex attribute by displaying it as a color for debugging.\n * <p>\n * Components for well-known unit-length vectors, i.e., <code>normal</code>,\n * <code>tangent</code>, and <code>bitangent</code>, are scaled and biased\n * from [-1.0, 1.0] to (-1.0, 1.0).\n * </p>\n *\n * @alias DebugAppearance\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {String} options.attributeName The name of the attribute to visualize.\n * @param {Boolean} [options.perInstanceAttribute=false] Boolean that determines whether this attribute is a per-instance geometry attribute.\n * @param {String} [options.glslDatatype='vec3'] The GLSL datatype of the attribute.  Supported datatypes are <code>float</code>, <code>vec2</code>, <code>vec3</code>, and <code>vec4</code>.\n * @param {String} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n * @param {String} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n * @param {RenderState} [options.renderState] Optional render state to override the default render state.\n *\n * @exception {DeveloperError} options.glslDatatype must be float, vec2, vec3, or vec4.\n *\n * @example\n * var primitive = new Cesium.Primitive({\n *   geometryInstances : // ...\n *   appearance : new Cesium.DebugAppearance({\n *     attributeName : 'normal'\n *   })\n * });\n */\n\nfunction DebugAppearance(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var attributeName = options.attributeName;\n  var perInstanceAttribute = options.perInstanceAttribute; //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(attributeName)) {\n    throw new DeveloperError(\"options.attributeName is required.\");\n  } //>>includeEnd('debug');\n\n\n  if (!defined(perInstanceAttribute)) {\n    perInstanceAttribute = false;\n  }\n\n  var glslDatatype = defaultValue(options.glslDatatype, \"vec3\");\n  var varyingName = \"v_\" + attributeName;\n  var getColor; // Well-known normalized vector attributes in VertexFormat\n\n  if (attributeName === \"normal\" || attributeName === \"tangent\" || attributeName === \"bitangent\") {\n    getColor = \"vec4 getColor() { return vec4((\" + varyingName + \" + vec3(1.0)) * 0.5, 1.0); }\\n\";\n  } else {\n    // All other attributes, both well-known and custom\n    if (attributeName === \"st\") {\n      glslDatatype = \"vec2\";\n    }\n\n    switch (glslDatatype) {\n      case \"float\":\n        getColor = \"vec4 getColor() { return vec4(vec3(\" + varyingName + \"), 1.0); }\\n\";\n        break;\n\n      case \"vec2\":\n        getColor = \"vec4 getColor() { return vec4(\" + varyingName + \", 0.0, 1.0); }\\n\";\n        break;\n\n      case \"vec3\":\n        getColor = \"vec4 getColor() { return vec4(\" + varyingName + \", 1.0); }\\n\";\n        break;\n\n      case \"vec4\":\n        getColor = \"vec4 getColor() { return \" + varyingName + \"; }\\n\";\n        break;\n      //>>includeStart('debug', pragmas.debug);\n\n      default:\n        throw new DeveloperError(\"options.glslDatatype must be float, vec2, vec3, or vec4.\");\n      //>>includeEnd('debug');\n    }\n  }\n\n  var vs = \"attribute vec3 position3DHigh;\\n\" + \"attribute vec3 position3DLow;\\n\" + \"attribute float batchId;\\n\" + (perInstanceAttribute ? \"\" : \"attribute \" + glslDatatype + \" \" + attributeName + \";\\n\") + \"varying \" + glslDatatype + \" \" + varyingName + \";\\n\" + \"void main()\\n\" + \"{\\n\" + \"vec4 p = czm_translateRelativeToEye(position3DHigh, position3DLow);\\n\" + (perInstanceAttribute ? varyingName + \" = czm_batchTable_\" + attributeName + \"(batchId);\\n\" : varyingName + \" = \" + attributeName + \";\\n\") + \"gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\" + \"}\";\n  var fs = \"varying \" + glslDatatype + \" \" + varyingName + \";\\n\" + getColor + \"\\n\" + \"void main()\\n\" + \"{\\n\" + \"gl_FragColor = getColor();\\n\" + \"}\";\n  /**\n   * This property is part of the {@link Appearance} interface, but is not\n   * used by {@link DebugAppearance} since a fully custom fragment shader is used.\n   *\n   * @type Material\n   *\n   * @default undefined\n   */\n\n  this.material = undefined;\n  /**\n   * When <code>true</code>, the geometry is expected to appear translucent.\n   *\n   * @type {Boolean}\n   *\n   * @default false\n   */\n\n  this.translucent = defaultValue(options.translucent, false);\n  this._vertexShaderSource = defaultValue(options.vertexShaderSource, vs);\n  this._fragmentShaderSource = defaultValue(options.fragmentShaderSource, fs);\n  this._renderState = Appearance.getDefaultRenderState(false, false, options.renderState);\n  this._closed = defaultValue(options.closed, false); // Non-derived members\n\n  this._attributeName = attributeName;\n  this._glslDatatype = glslDatatype;\n}\n\nObject.defineProperties(DebugAppearance.prototype, {\n  /**\n   * The GLSL source code for the vertex shader.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  vertexShaderSource: {\n    get: function get() {\n      return this._vertexShaderSource;\n    }\n  },\n\n  /**\n   * The GLSL source code for the fragment shader.  The full fragment shader\n   * source is built procedurally taking into account the {@link DebugAppearance#material}.\n   * Use {@link DebugAppearance#getFragmentShaderSource} to get the full source.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  fragmentShaderSource: {\n    get: function get() {\n      return this._fragmentShaderSource;\n    }\n  },\n\n  /**\n   * The WebGL fixed-function state to use when rendering the geometry.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {Object}\n   * @readonly\n   */\n  renderState: {\n    get: function get() {\n      return this._renderState;\n    }\n  },\n\n  /**\n   * When <code>true</code>, the geometry is expected to be closed.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  closed: {\n    get: function get() {\n      return this._closed;\n    }\n  },\n\n  /**\n   * The name of the attribute being visualized.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  attributeName: {\n    get: function get() {\n      return this._attributeName;\n    }\n  },\n\n  /**\n   * The GLSL datatype of the attribute being visualized.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  glslDatatype: {\n    get: function get() {\n      return this._glslDatatype;\n    }\n  }\n});\n/**\n * Returns the full GLSL fragment shader source, which for {@link DebugAppearance} is just\n * {@link DebugAppearance#fragmentShaderSource}.\n *\n * @function\n *\n * @returns {String} The full GLSL fragment shader source.\n */\n\nDebugAppearance.prototype.getFragmentShaderSource = Appearance.prototype.getFragmentShaderSource;\n/**\n * Determines if the geometry is translucent based on {@link DebugAppearance#translucent}.\n *\n * @function\n *\n * @returns {Boolean} <code>true</code> if the appearance is translucent.\n */\n\nDebugAppearance.prototype.isTranslucent = Appearance.prototype.isTranslucent;\n/**\n * Creates a render state.  This is not the final render state instance; instead,\n * it can contain a subset of render state properties identical to the render state\n * created in the context.\n *\n * @function\n *\n * @returns {Object} The render state.\n */\n\nDebugAppearance.prototype.getRenderState = Appearance.prototype.getRenderState;\nexport default DebugAppearance;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/DebugAppearance.js"],"names":["defaultValue","defined","DeveloperError","Appearance","DebugAppearance","options","EMPTY_OBJECT","attributeName","perInstanceAttribute","glslDatatype","varyingName","getColor","vs","fs","material","undefined","translucent","_vertexShaderSource","vertexShaderSource","_fragmentShaderSource","fragmentShaderSource","_renderState","getDefaultRenderState","renderState","_closed","closed","_attributeName","_glslDatatype","Object","defineProperties","prototype","get","getFragmentShaderSource","isTranslucent","getRenderState"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Appearance from \"./Appearance.js\";\n\n/**\n * Visualizes a vertex attribute by displaying it as a color for debugging.\n * <p>\n * Components for well-known unit-length vectors, i.e., <code>normal</code>,\n * <code>tangent</code>, and <code>bitangent</code>, are scaled and biased\n * from [-1.0, 1.0] to (-1.0, 1.0).\n * </p>\n *\n * @alias DebugAppearance\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {String} options.attributeName The name of the attribute to visualize.\n * @param {Boolean} [options.perInstanceAttribute=false] Boolean that determines whether this attribute is a per-instance geometry attribute.\n * @param {String} [options.glslDatatype='vec3'] The GLSL datatype of the attribute.  Supported datatypes are <code>float</code>, <code>vec2</code>, <code>vec3</code>, and <code>vec4</code>.\n * @param {String} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n * @param {String} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n * @param {RenderState} [options.renderState] Optional render state to override the default render state.\n *\n * @exception {DeveloperError} options.glslDatatype must be float, vec2, vec3, or vec4.\n *\n * @example\n * var primitive = new Cesium.Primitive({\n *   geometryInstances : // ...\n *   appearance : new Cesium.DebugAppearance({\n *     attributeName : 'normal'\n *   })\n * });\n */\nfunction DebugAppearance(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var attributeName = options.attributeName;\n  var perInstanceAttribute = options.perInstanceAttribute;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(attributeName)) {\n    throw new DeveloperError(\"options.attributeName is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(perInstanceAttribute)) {\n    perInstanceAttribute = false;\n  }\n\n  var glslDatatype = defaultValue(options.glslDatatype, \"vec3\");\n  var varyingName = \"v_\" + attributeName;\n  var getColor;\n\n  // Well-known normalized vector attributes in VertexFormat\n  if (\n    attributeName === \"normal\" ||\n    attributeName === \"tangent\" ||\n    attributeName === \"bitangent\"\n  ) {\n    getColor =\n      \"vec4 getColor() { return vec4((\" +\n      varyingName +\n      \" + vec3(1.0)) * 0.5, 1.0); }\\n\";\n  } else {\n    // All other attributes, both well-known and custom\n    if (attributeName === \"st\") {\n      glslDatatype = \"vec2\";\n    }\n\n    switch (glslDatatype) {\n      case \"float\":\n        getColor =\n          \"vec4 getColor() { return vec4(vec3(\" + varyingName + \"), 1.0); }\\n\";\n        break;\n      case \"vec2\":\n        getColor =\n          \"vec4 getColor() { return vec4(\" + varyingName + \", 0.0, 1.0); }\\n\";\n        break;\n      case \"vec3\":\n        getColor =\n          \"vec4 getColor() { return vec4(\" + varyingName + \", 1.0); }\\n\";\n        break;\n      case \"vec4\":\n        getColor = \"vec4 getColor() { return \" + varyingName + \"; }\\n\";\n        break;\n      //>>includeStart('debug', pragmas.debug);\n      default:\n        throw new DeveloperError(\n          \"options.glslDatatype must be float, vec2, vec3, or vec4.\"\n        );\n      //>>includeEnd('debug');\n    }\n  }\n\n  var vs =\n    \"attribute vec3 position3DHigh;\\n\" +\n    \"attribute vec3 position3DLow;\\n\" +\n    \"attribute float batchId;\\n\" +\n    (perInstanceAttribute\n      ? \"\"\n      : \"attribute \" + glslDatatype + \" \" + attributeName + \";\\n\") +\n    \"varying \" +\n    glslDatatype +\n    \" \" +\n    varyingName +\n    \";\\n\" +\n    \"void main()\\n\" +\n    \"{\\n\" +\n    \"vec4 p = czm_translateRelativeToEye(position3DHigh, position3DLow);\\n\" +\n    (perInstanceAttribute\n      ? varyingName + \" = czm_batchTable_\" + attributeName + \"(batchId);\\n\"\n      : varyingName + \" = \" + attributeName + \";\\n\") +\n    \"gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\" +\n    \"}\";\n  var fs =\n    \"varying \" +\n    glslDatatype +\n    \" \" +\n    varyingName +\n    \";\\n\" +\n    getColor +\n    \"\\n\" +\n    \"void main()\\n\" +\n    \"{\\n\" +\n    \"gl_FragColor = getColor();\\n\" +\n    \"}\";\n\n  /**\n   * This property is part of the {@link Appearance} interface, but is not\n   * used by {@link DebugAppearance} since a fully custom fragment shader is used.\n   *\n   * @type Material\n   *\n   * @default undefined\n   */\n  this.material = undefined;\n\n  /**\n   * When <code>true</code>, the geometry is expected to appear translucent.\n   *\n   * @type {Boolean}\n   *\n   * @default false\n   */\n  this.translucent = defaultValue(options.translucent, false);\n\n  this._vertexShaderSource = defaultValue(options.vertexShaderSource, vs);\n  this._fragmentShaderSource = defaultValue(options.fragmentShaderSource, fs);\n  this._renderState = Appearance.getDefaultRenderState(\n    false,\n    false,\n    options.renderState\n  );\n  this._closed = defaultValue(options.closed, false);\n\n  // Non-derived members\n\n  this._attributeName = attributeName;\n  this._glslDatatype = glslDatatype;\n}\n\nObject.defineProperties(DebugAppearance.prototype, {\n  /**\n   * The GLSL source code for the vertex shader.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  vertexShaderSource: {\n    get: function () {\n      return this._vertexShaderSource;\n    },\n  },\n\n  /**\n   * The GLSL source code for the fragment shader.  The full fragment shader\n   * source is built procedurally taking into account the {@link DebugAppearance#material}.\n   * Use {@link DebugAppearance#getFragmentShaderSource} to get the full source.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  fragmentShaderSource: {\n    get: function () {\n      return this._fragmentShaderSource;\n    },\n  },\n\n  /**\n   * The WebGL fixed-function state to use when rendering the geometry.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {Object}\n   * @readonly\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the geometry is expected to be closed.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  closed: {\n    get: function () {\n      return this._closed;\n    },\n  },\n\n  /**\n   * The name of the attribute being visualized.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  attributeName: {\n    get: function () {\n      return this._attributeName;\n    },\n  },\n\n  /**\n   * The GLSL datatype of the attribute being visualized.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  glslDatatype: {\n    get: function () {\n      return this._glslDatatype;\n    },\n  },\n});\n\n/**\n * Returns the full GLSL fragment shader source, which for {@link DebugAppearance} is just\n * {@link DebugAppearance#fragmentShaderSource}.\n *\n * @function\n *\n * @returns {String} The full GLSL fragment shader source.\n */\nDebugAppearance.prototype.getFragmentShaderSource =\n  Appearance.prototype.getFragmentShaderSource;\n\n/**\n * Determines if the geometry is translucent based on {@link DebugAppearance#translucent}.\n *\n * @function\n *\n * @returns {Boolean} <code>true</code> if the appearance is translucent.\n */\nDebugAppearance.prototype.isTranslucent = Appearance.prototype.isTranslucent;\n\n/**\n * Creates a render state.  This is not the final render state instance; instead,\n * it can contain a subset of render state properties identical to the render state\n * created in the context.\n *\n * @function\n *\n * @returns {Object} The render state.\n */\nDebugAppearance.prototype.getRenderState = Appearance.prototype.getRenderState;\nexport default DebugAppearance;\n"]},"metadata":{},"sourceType":"module"}