{"ast":null,"code":"import PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport WebGLConstants from \"./WebGLConstants.js\";\n/**\n * The format of a pixel, i.e., the number of components it has and what they represent.\n *\n * @exports PixelFormat\n */\n\nvar PixelFormat = {\n  /**\n   * A pixel format containing a depth value.\n   *\n   * @type {Number}\n   * @constant\n   */\n  DEPTH_COMPONENT: WebGLConstants.DEPTH_COMPONENT,\n\n  /**\n   * A pixel format containing a depth and stencil value, most often used with {@link PixelDatatype.UNSIGNED_INT_24_8}.\n   *\n   * @type {Number}\n   * @constant\n   */\n  DEPTH_STENCIL: WebGLConstants.DEPTH_STENCIL,\n\n  /**\n   * A pixel format containing an alpha channel.\n   *\n   * @type {Number}\n   * @constant\n   */\n  ALPHA: WebGLConstants.ALPHA,\n\n  /**\n   * A pixel format containing red, green, and blue channels.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGB: WebGLConstants.RGB,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA: WebGLConstants.RGBA,\n\n  /**\n   * A pixel format containing a luminance (intensity) channel.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LUMINANCE: WebGLConstants.LUMINANCE,\n\n  /**\n   * A pixel format containing luminance (intensity) and alpha channels.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LUMINANCE_ALPHA: WebGLConstants.LUMINANCE_ALPHA,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is DXT1 compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGB_DXT1: WebGLConstants.COMPRESSED_RGB_S3TC_DXT1_EXT,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is DXT1 compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA_DXT1: WebGLConstants.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is DXT3 compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA_DXT3: WebGLConstants.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is DXT5 compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA_DXT5: WebGLConstants.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is PVR 4bpp compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGB_PVRTC_4BPPV1: WebGLConstants.COMPRESSED_RGB_PVRTC_4BPPV1_IMG,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is PVR 2bpp compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGB_PVRTC_2BPPV1: WebGLConstants.COMPRESSED_RGB_PVRTC_2BPPV1_IMG,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is PVR 4bpp compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA_PVRTC_4BPPV1: WebGLConstants.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is PVR 2bpp compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA_PVRTC_2BPPV1: WebGLConstants.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is ETC1 compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGB_ETC1: WebGLConstants.COMPRESSED_RGB_ETC1_WEBGL,\n\n  /**\n   * @private\n   */\n  componentsLength: function (pixelFormat) {\n    switch (pixelFormat) {\n      case PixelFormat.RGB:\n        return 3;\n\n      case PixelFormat.RGBA:\n        return 4;\n\n      case PixelFormat.LUMINANCE_ALPHA:\n        return 2;\n\n      case PixelFormat.ALPHA:\n      case PixelFormat.LUMINANCE:\n        return 1;\n\n      default:\n        return 1;\n    }\n  },\n\n  /**\n   * @private\n   */\n  validate: function (pixelFormat) {\n    return pixelFormat === PixelFormat.DEPTH_COMPONENT || pixelFormat === PixelFormat.DEPTH_STENCIL || pixelFormat === PixelFormat.ALPHA || pixelFormat === PixelFormat.RGB || pixelFormat === PixelFormat.RGBA || pixelFormat === PixelFormat.LUMINANCE || pixelFormat === PixelFormat.LUMINANCE_ALPHA || pixelFormat === PixelFormat.RGB_DXT1 || pixelFormat === PixelFormat.RGBA_DXT1 || pixelFormat === PixelFormat.RGBA_DXT3 || pixelFormat === PixelFormat.RGBA_DXT5 || pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1 || pixelFormat === PixelFormat.RGB_ETC1;\n  },\n\n  /**\n   * @private\n   */\n  isColorFormat: function (pixelFormat) {\n    return pixelFormat === PixelFormat.ALPHA || pixelFormat === PixelFormat.RGB || pixelFormat === PixelFormat.RGBA || pixelFormat === PixelFormat.LUMINANCE || pixelFormat === PixelFormat.LUMINANCE_ALPHA;\n  },\n\n  /**\n   * @private\n   */\n  isDepthFormat: function (pixelFormat) {\n    return pixelFormat === PixelFormat.DEPTH_COMPONENT || pixelFormat === PixelFormat.DEPTH_STENCIL;\n  },\n\n  /**\n   * @private\n   */\n  isCompressedFormat: function (pixelFormat) {\n    return pixelFormat === PixelFormat.RGB_DXT1 || pixelFormat === PixelFormat.RGBA_DXT1 || pixelFormat === PixelFormat.RGBA_DXT3 || pixelFormat === PixelFormat.RGBA_DXT5 || pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1 || pixelFormat === PixelFormat.RGB_ETC1;\n  },\n\n  /**\n   * @private\n   */\n  isDXTFormat: function (pixelFormat) {\n    return pixelFormat === PixelFormat.RGB_DXT1 || pixelFormat === PixelFormat.RGBA_DXT1 || pixelFormat === PixelFormat.RGBA_DXT3 || pixelFormat === PixelFormat.RGBA_DXT5;\n  },\n\n  /**\n   * @private\n   */\n  isPVRTCFormat: function (pixelFormat) {\n    return pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1;\n  },\n\n  /**\n   * @private\n   */\n  isETC1Format: function (pixelFormat) {\n    return pixelFormat === PixelFormat.RGB_ETC1;\n  },\n\n  /**\n   * @private\n   */\n  compressedTextureSizeInBytes: function (pixelFormat, width, height) {\n    switch (pixelFormat) {\n      case PixelFormat.RGB_DXT1:\n      case PixelFormat.RGBA_DXT1:\n      case PixelFormat.RGB_ETC1:\n        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;\n\n      case PixelFormat.RGBA_DXT3:\n      case PixelFormat.RGBA_DXT5:\n        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\n\n      case PixelFormat.RGB_PVRTC_4BPPV1:\n      case PixelFormat.RGBA_PVRTC_4BPPV1:\n        return Math.floor((Math.max(width, 8) * Math.max(height, 8) * 4 + 7) / 8);\n\n      case PixelFormat.RGB_PVRTC_2BPPV1:\n      case PixelFormat.RGBA_PVRTC_2BPPV1:\n        return Math.floor((Math.max(width, 16) * Math.max(height, 8) * 2 + 7) / 8);\n\n      default:\n        return 0;\n    }\n  },\n\n  /**\n   * @private\n   */\n  textureSizeInBytes: function (pixelFormat, pixelDatatype, width, height) {\n    var componentsLength = PixelFormat.componentsLength(pixelFormat);\n\n    if (PixelDatatype.isPacked(pixelDatatype)) {\n      componentsLength = 1;\n    }\n\n    return componentsLength * PixelDatatype.sizeInBytes(pixelDatatype) * width * height;\n  },\n\n  /**\n   * @private\n   */\n  alignmentInBytes: function (pixelFormat, pixelDatatype, width) {\n    var mod = PixelFormat.textureSizeInBytes(pixelFormat, pixelDatatype, width, 1) % 4;\n    return mod === 0 ? 4 : mod === 2 ? 2 : 1;\n  },\n\n  /**\n   * @private\n   */\n  createTypedArray: function (pixelFormat, pixelDatatype, width, height) {\n    var constructor;\n    var sizeInBytes = PixelDatatype.sizeInBytes(pixelDatatype);\n\n    if (sizeInBytes === Uint8Array.BYTES_PER_ELEMENT) {\n      constructor = Uint8Array;\n    } else if (sizeInBytes === Uint16Array.BYTES_PER_ELEMENT) {\n      constructor = Uint16Array;\n    } else if (sizeInBytes === Float32Array.BYTES_PER_ELEMENT && pixelDatatype === PixelDatatype.FLOAT) {\n      constructor = Float32Array;\n    } else {\n      constructor = Uint32Array;\n    }\n\n    var size = PixelFormat.componentsLength(pixelFormat) * width * height;\n    return new constructor(size);\n  },\n\n  /**\n   * @private\n   */\n  flipY: function (bufferView, pixelFormat, pixelDatatype, width, height) {\n    if (height === 1) {\n      return bufferView;\n    }\n\n    var flipped = PixelFormat.createTypedArray(pixelFormat, pixelDatatype, width, height);\n    var numberOfComponents = PixelFormat.componentsLength(pixelFormat);\n    var textureWidth = width * numberOfComponents;\n\n    for (var i = 0; i < height; ++i) {\n      var row = i * height * numberOfComponents;\n      var flippedRow = (height - i - 1) * height * numberOfComponents;\n\n      for (var j = 0; j < textureWidth; ++j) {\n        flipped[flippedRow + j] = bufferView[row + j];\n      }\n    }\n\n    return flipped;\n  }\n};\nexport default Object.freeze(PixelFormat);","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/PixelFormat.js"],"names":["PixelDatatype","WebGLConstants","PixelFormat","DEPTH_COMPONENT","DEPTH_STENCIL","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","RGB_DXT1","COMPRESSED_RGB_S3TC_DXT1_EXT","RGBA_DXT1","COMPRESSED_RGBA_S3TC_DXT1_EXT","RGBA_DXT3","COMPRESSED_RGBA_S3TC_DXT3_EXT","RGBA_DXT5","COMPRESSED_RGBA_S3TC_DXT5_EXT","RGB_PVRTC_4BPPV1","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","RGB_PVRTC_2BPPV1","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","RGBA_PVRTC_4BPPV1","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","RGBA_PVRTC_2BPPV1","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","RGB_ETC1","COMPRESSED_RGB_ETC1_WEBGL","componentsLength","pixelFormat","validate","isColorFormat","isDepthFormat","isCompressedFormat","isDXTFormat","isPVRTCFormat","isETC1Format","compressedTextureSizeInBytes","width","height","Math","floor","max","textureSizeInBytes","pixelDatatype","isPacked","sizeInBytes","alignmentInBytes","mod","createTypedArray","constructor","Uint8Array","BYTES_PER_ELEMENT","Uint16Array","Float32Array","FLOAT","Uint32Array","size","flipY","bufferView","flipped","numberOfComponents","textureWidth","i","row","flippedRow","j","Object","freeze"],"mappings":"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","sourcesContent":["import PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport WebGLConstants from \"./WebGLConstants.js\";\n\n/**\n * The format of a pixel, i.e., the number of components it has and what they represent.\n *\n * @exports PixelFormat\n */\nvar PixelFormat = {\n  /**\n   * A pixel format containing a depth value.\n   *\n   * @type {Number}\n   * @constant\n   */\n  DEPTH_COMPONENT: WebGLConstants.DEPTH_COMPONENT,\n\n  /**\n   * A pixel format containing a depth and stencil value, most often used with {@link PixelDatatype.UNSIGNED_INT_24_8}.\n   *\n   * @type {Number}\n   * @constant\n   */\n  DEPTH_STENCIL: WebGLConstants.DEPTH_STENCIL,\n\n  /**\n   * A pixel format containing an alpha channel.\n   *\n   * @type {Number}\n   * @constant\n   */\n  ALPHA: WebGLConstants.ALPHA,\n\n  /**\n   * A pixel format containing red, green, and blue channels.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGB: WebGLConstants.RGB,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA: WebGLConstants.RGBA,\n\n  /**\n   * A pixel format containing a luminance (intensity) channel.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LUMINANCE: WebGLConstants.LUMINANCE,\n\n  /**\n   * A pixel format containing luminance (intensity) and alpha channels.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LUMINANCE_ALPHA: WebGLConstants.LUMINANCE_ALPHA,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is DXT1 compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGB_DXT1: WebGLConstants.COMPRESSED_RGB_S3TC_DXT1_EXT,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is DXT1 compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA_DXT1: WebGLConstants.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is DXT3 compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA_DXT3: WebGLConstants.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is DXT5 compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA_DXT5: WebGLConstants.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is PVR 4bpp compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGB_PVRTC_4BPPV1: WebGLConstants.COMPRESSED_RGB_PVRTC_4BPPV1_IMG,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is PVR 2bpp compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGB_PVRTC_2BPPV1: WebGLConstants.COMPRESSED_RGB_PVRTC_2BPPV1_IMG,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is PVR 4bpp compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA_PVRTC_4BPPV1: WebGLConstants.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is PVR 2bpp compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA_PVRTC_2BPPV1: WebGLConstants.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is ETC1 compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGB_ETC1: WebGLConstants.COMPRESSED_RGB_ETC1_WEBGL,\n\n  /**\n   * @private\n   */\n  componentsLength: function (pixelFormat) {\n    switch (pixelFormat) {\n      case PixelFormat.RGB:\n        return 3;\n      case PixelFormat.RGBA:\n        return 4;\n      case PixelFormat.LUMINANCE_ALPHA:\n        return 2;\n      case PixelFormat.ALPHA:\n      case PixelFormat.LUMINANCE:\n        return 1;\n      default:\n        return 1;\n    }\n  },\n\n  /**\n   * @private\n   */\n  validate: function (pixelFormat) {\n    return (\n      pixelFormat === PixelFormat.DEPTH_COMPONENT ||\n      pixelFormat === PixelFormat.DEPTH_STENCIL ||\n      pixelFormat === PixelFormat.ALPHA ||\n      pixelFormat === PixelFormat.RGB ||\n      pixelFormat === PixelFormat.RGBA ||\n      pixelFormat === PixelFormat.LUMINANCE ||\n      pixelFormat === PixelFormat.LUMINANCE_ALPHA ||\n      pixelFormat === PixelFormat.RGB_DXT1 ||\n      pixelFormat === PixelFormat.RGBA_DXT1 ||\n      pixelFormat === PixelFormat.RGBA_DXT3 ||\n      pixelFormat === PixelFormat.RGBA_DXT5 ||\n      pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 ||\n      pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 ||\n      pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 ||\n      pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1 ||\n      pixelFormat === PixelFormat.RGB_ETC1\n    );\n  },\n\n  /**\n   * @private\n   */\n  isColorFormat: function (pixelFormat) {\n    return (\n      pixelFormat === PixelFormat.ALPHA ||\n      pixelFormat === PixelFormat.RGB ||\n      pixelFormat === PixelFormat.RGBA ||\n      pixelFormat === PixelFormat.LUMINANCE ||\n      pixelFormat === PixelFormat.LUMINANCE_ALPHA\n    );\n  },\n\n  /**\n   * @private\n   */\n  isDepthFormat: function (pixelFormat) {\n    return (\n      pixelFormat === PixelFormat.DEPTH_COMPONENT ||\n      pixelFormat === PixelFormat.DEPTH_STENCIL\n    );\n  },\n\n  /**\n   * @private\n   */\n  isCompressedFormat: function (pixelFormat) {\n    return (\n      pixelFormat === PixelFormat.RGB_DXT1 ||\n      pixelFormat === PixelFormat.RGBA_DXT1 ||\n      pixelFormat === PixelFormat.RGBA_DXT3 ||\n      pixelFormat === PixelFormat.RGBA_DXT5 ||\n      pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 ||\n      pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 ||\n      pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 ||\n      pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1 ||\n      pixelFormat === PixelFormat.RGB_ETC1\n    );\n  },\n\n  /**\n   * @private\n   */\n  isDXTFormat: function (pixelFormat) {\n    return (\n      pixelFormat === PixelFormat.RGB_DXT1 ||\n      pixelFormat === PixelFormat.RGBA_DXT1 ||\n      pixelFormat === PixelFormat.RGBA_DXT3 ||\n      pixelFormat === PixelFormat.RGBA_DXT5\n    );\n  },\n\n  /**\n   * @private\n   */\n  isPVRTCFormat: function (pixelFormat) {\n    return (\n      pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 ||\n      pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 ||\n      pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 ||\n      pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1\n    );\n  },\n\n  /**\n   * @private\n   */\n  isETC1Format: function (pixelFormat) {\n    return pixelFormat === PixelFormat.RGB_ETC1;\n  },\n\n  /**\n   * @private\n   */\n  compressedTextureSizeInBytes: function (pixelFormat, width, height) {\n    switch (pixelFormat) {\n      case PixelFormat.RGB_DXT1:\n      case PixelFormat.RGBA_DXT1:\n      case PixelFormat.RGB_ETC1:\n        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;\n\n      case PixelFormat.RGBA_DXT3:\n      case PixelFormat.RGBA_DXT5:\n        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\n\n      case PixelFormat.RGB_PVRTC_4BPPV1:\n      case PixelFormat.RGBA_PVRTC_4BPPV1:\n        return Math.floor(\n          (Math.max(width, 8) * Math.max(height, 8) * 4 + 7) / 8\n        );\n\n      case PixelFormat.RGB_PVRTC_2BPPV1:\n      case PixelFormat.RGBA_PVRTC_2BPPV1:\n        return Math.floor(\n          (Math.max(width, 16) * Math.max(height, 8) * 2 + 7) / 8\n        );\n\n      default:\n        return 0;\n    }\n  },\n\n  /**\n   * @private\n   */\n  textureSizeInBytes: function (pixelFormat, pixelDatatype, width, height) {\n    var componentsLength = PixelFormat.componentsLength(pixelFormat);\n    if (PixelDatatype.isPacked(pixelDatatype)) {\n      componentsLength = 1;\n    }\n    return (\n      componentsLength *\n      PixelDatatype.sizeInBytes(pixelDatatype) *\n      width *\n      height\n    );\n  },\n\n  /**\n   * @private\n   */\n  alignmentInBytes: function (pixelFormat, pixelDatatype, width) {\n    var mod =\n      PixelFormat.textureSizeInBytes(pixelFormat, pixelDatatype, width, 1) % 4;\n    return mod === 0 ? 4 : mod === 2 ? 2 : 1;\n  },\n\n  /**\n   * @private\n   */\n  createTypedArray: function (pixelFormat, pixelDatatype, width, height) {\n    var constructor;\n    var sizeInBytes = PixelDatatype.sizeInBytes(pixelDatatype);\n    if (sizeInBytes === Uint8Array.BYTES_PER_ELEMENT) {\n      constructor = Uint8Array;\n    } else if (sizeInBytes === Uint16Array.BYTES_PER_ELEMENT) {\n      constructor = Uint16Array;\n    } else if (\n      sizeInBytes === Float32Array.BYTES_PER_ELEMENT &&\n      pixelDatatype === PixelDatatype.FLOAT\n    ) {\n      constructor = Float32Array;\n    } else {\n      constructor = Uint32Array;\n    }\n\n    var size = PixelFormat.componentsLength(pixelFormat) * width * height;\n    return new constructor(size);\n  },\n\n  /**\n   * @private\n   */\n  flipY: function (bufferView, pixelFormat, pixelDatatype, width, height) {\n    if (height === 1) {\n      return bufferView;\n    }\n    var flipped = PixelFormat.createTypedArray(\n      pixelFormat,\n      pixelDatatype,\n      width,\n      height\n    );\n    var numberOfComponents = PixelFormat.componentsLength(pixelFormat);\n    var textureWidth = width * numberOfComponents;\n    for (var i = 0; i < height; ++i) {\n      var row = i * height * numberOfComponents;\n      var flippedRow = (height - i - 1) * height * numberOfComponents;\n      for (var j = 0; j < textureWidth; ++j) {\n        flipped[flippedRow + j] = bufferView[row + j];\n      }\n    }\n    return flipped;\n  },\n};\nexport default Object.freeze(PixelFormat);\n"]},"metadata":{},"sourceType":"module"}