{"ast":null,"code":"import BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n/**\n * Describes geometry representing a plane centered at the origin, with a unit width and length.\n *\n * @alias PlaneGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @example\n * var planeGeometry = new Cesium.PlaneGeometry({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY\n * });\n */\n\nfunction PlaneGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n  this._vertexFormat = vertexFormat;\n  this._workerName = \"createPlaneGeometry\";\n}\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\n\n\nPlaneGeometry.packedLength = VertexFormat.packedLength;\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PlaneGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\n\nPlaneGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array); //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  return array;\n};\n\nvar scratchVertexFormat = new VertexFormat();\nvar scratchOptions = {\n  vertexFormat: scratchVertexFormat\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PlaneGeometry} [result] The object into which to store the result.\n * @returns {PlaneGeometry} The modified result parameter or a new PlaneGeometry instance if one was not provided.\n */\n\nPlaneGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array); //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n\n  if (!defined(result)) {\n    return new PlaneGeometry(scratchOptions);\n  }\n\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  return result;\n};\n\nvar min = new Cartesian3(-0.5, -0.5, 0.0);\nvar max = new Cartesian3(0.5, 0.5, 0.0);\n/**\n * Computes the geometric representation of a plane, including its vertices, indices, and a bounding sphere.\n *\n * @param {PlaneGeometry} planeGeometry A description of the plane.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\n\nPlaneGeometry.createGeometry = function (planeGeometry) {\n  var vertexFormat = planeGeometry._vertexFormat;\n  var attributes = new GeometryAttributes();\n  var indices;\n  var positions;\n\n  if (vertexFormat.position) {\n    // 4 corner points.  Duplicated 3 times each for each incident edge/face.\n    positions = new Float64Array(4 * 3); // +z face\n\n    positions[0] = min.x;\n    positions[1] = min.y;\n    positions[2] = 0.0;\n    positions[3] = max.x;\n    positions[4] = min.y;\n    positions[5] = 0.0;\n    positions[6] = max.x;\n    positions[7] = max.y;\n    positions[8] = 0.0;\n    positions[9] = min.x;\n    positions[10] = max.y;\n    positions[11] = 0.0;\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions\n    });\n\n    if (vertexFormat.normal) {\n      var normals = new Float32Array(4 * 3); // +z face\n\n      normals[0] = 0.0;\n      normals[1] = 0.0;\n      normals[2] = 1.0;\n      normals[3] = 0.0;\n      normals[4] = 0.0;\n      normals[5] = 1.0;\n      normals[6] = 0.0;\n      normals[7] = 0.0;\n      normals[8] = 1.0;\n      normals[9] = 0.0;\n      normals[10] = 0.0;\n      normals[11] = 1.0;\n      attributes.normal = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: normals\n      });\n    }\n\n    if (vertexFormat.st) {\n      var texCoords = new Float32Array(4 * 2); // +z face\n\n      texCoords[0] = 0.0;\n      texCoords[1] = 0.0;\n      texCoords[2] = 1.0;\n      texCoords[3] = 0.0;\n      texCoords[4] = 1.0;\n      texCoords[5] = 1.0;\n      texCoords[6] = 0.0;\n      texCoords[7] = 1.0;\n      attributes.st = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 2,\n        values: texCoords\n      });\n    }\n\n    if (vertexFormat.tangent) {\n      var tangents = new Float32Array(4 * 3); // +z face\n\n      tangents[0] = 1.0;\n      tangents[1] = 0.0;\n      tangents[2] = 0.0;\n      tangents[3] = 1.0;\n      tangents[4] = 0.0;\n      tangents[5] = 0.0;\n      tangents[6] = 1.0;\n      tangents[7] = 0.0;\n      tangents[8] = 0.0;\n      tangents[9] = 1.0;\n      tangents[10] = 0.0;\n      tangents[11] = 0.0;\n      attributes.tangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: tangents\n      });\n    }\n\n    if (vertexFormat.bitangent) {\n      var bitangents = new Float32Array(4 * 3); // +z face\n\n      bitangents[0] = 0.0;\n      bitangents[1] = 1.0;\n      bitangents[2] = 0.0;\n      bitangents[3] = 0.0;\n      bitangents[4] = 1.0;\n      bitangents[5] = 0.0;\n      bitangents[6] = 0.0;\n      bitangents[7] = 1.0;\n      bitangents[8] = 0.0;\n      bitangents[9] = 0.0;\n      bitangents[10] = 1.0;\n      bitangents[11] = 0.0;\n      attributes.bitangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: bitangents\n      });\n    } // 2 triangles\n\n\n    indices = new Uint16Array(2 * 3); // +z face\n\n    indices[0] = 0;\n    indices[1] = 1;\n    indices[2] = 2;\n    indices[3] = 0;\n    indices[4] = 2;\n    indices[5] = 3;\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: new BoundingSphere(Cartesian3.ZERO, Math.sqrt(2.0))\n  });\n};\n\nexport default PlaneGeometry;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/PlaneGeometry.js"],"names":["BoundingSphere","Cartesian3","Check","ComponentDatatype","defaultValue","defined","Geometry","GeometryAttribute","GeometryAttributes","PrimitiveType","VertexFormat","PlaneGeometry","options","EMPTY_OBJECT","vertexFormat","DEFAULT","_vertexFormat","_workerName","packedLength","pack","value","array","startingIndex","typeOf","object","scratchVertexFormat","scratchOptions","unpack","result","clone","min","max","createGeometry","planeGeometry","attributes","indices","positions","position","Float64Array","x","y","componentDatatype","DOUBLE","componentsPerAttribute","values","normal","normals","Float32Array","FLOAT","st","texCoords","tangent","tangents","bitangent","bitangents","Uint16Array","primitiveType","TRIANGLES","boundingSphere","ZERO","Math","sqrt"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,qBAA3B;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,iBAAP,MAA8B,wBAA9B;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,iBAAP,MAA8B,wBAA9B;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AAEA;;;;;;;;;;;;;;;AAcA,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;AAC9BA,EAAAA,OAAO,GAAGR,YAAY,CAACQ,OAAD,EAAUR,YAAY,CAACS,YAAvB,CAAtB;AAEA,MAAIC,YAAY,GAAGV,YAAY,CAACQ,OAAO,CAACE,YAAT,EAAuBJ,YAAY,CAACK,OAApC,CAA/B;AAEA,OAAKC,aAAL,GAAqBF,YAArB;AACA,OAAKG,WAAL,GAAmB,qBAAnB;AACD;AAED;;;;;;AAIAN,aAAa,CAACO,YAAd,GAA6BR,YAAY,CAACQ,YAA1C;AAEA;;;;;;;;;;AASAP,aAAa,CAACQ,IAAd,GAAqB,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,aAAxB,EAAuC;AAC1D;AACApB,EAAAA,KAAK,CAACqB,MAAN,CAAaC,MAAb,CAAoB,OAApB,EAA6BJ,KAA7B;AACAlB,EAAAA,KAAK,CAACG,OAAN,CAAc,OAAd,EAAuBgB,KAAvB,EAH0D,CAI1D;;AAEAC,EAAAA,aAAa,GAAGlB,YAAY,CAACkB,aAAD,EAAgB,CAAhB,CAA5B;AAEAZ,EAAAA,YAAY,CAACS,IAAb,CAAkBC,KAAK,CAACJ,aAAxB,EAAuCK,KAAvC,EAA8CC,aAA9C;AAEA,SAAOD,KAAP;AACD,CAXD;;AAaA,IAAII,mBAAmB,GAAG,IAAIf,YAAJ,EAA1B;AACA,IAAIgB,cAAc,GAAG;AACnBZ,EAAAA,YAAY,EAAEW;AADK,CAArB;AAIA;;;;;;;;;AAQAd,aAAa,CAACgB,MAAd,GAAuB,UAAUN,KAAV,EAAiBC,aAAjB,EAAgCM,MAAhC,EAAwC;AAC7D;AACA1B,EAAAA,KAAK,CAACG,OAAN,CAAc,OAAd,EAAuBgB,KAAvB,EAF6D,CAG7D;;AAEAC,EAAAA,aAAa,GAAGlB,YAAY,CAACkB,aAAD,EAAgB,CAAhB,CAA5B;AAEA,MAAIR,YAAY,GAAGJ,YAAY,CAACiB,MAAb,CACjBN,KADiB,EAEjBC,aAFiB,EAGjBG,mBAHiB,CAAnB;;AAMA,MAAI,CAACpB,OAAO,CAACuB,MAAD,CAAZ,EAAsB;AACpB,WAAO,IAAIjB,aAAJ,CAAkBe,cAAlB,CAAP;AACD;;AAEDE,EAAAA,MAAM,CAACZ,aAAP,GAAuBN,YAAY,CAACmB,KAAb,CAAmBf,YAAnB,EAAiCc,MAAM,CAACZ,aAAxC,CAAvB;AAEA,SAAOY,MAAP;AACD,CApBD;;AAsBA,IAAIE,GAAG,GAAG,IAAI7B,UAAJ,CAAe,CAAC,GAAhB,EAAqB,CAAC,GAAtB,EAA2B,GAA3B,CAAV;AACA,IAAI8B,GAAG,GAAG,IAAI9B,UAAJ,CAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,CAAV;AAEA;;;;;;;AAMAU,aAAa,CAACqB,cAAd,GAA+B,UAAUC,aAAV,EAAyB;AACtD,MAAInB,YAAY,GAAGmB,aAAa,CAACjB,aAAjC;AAEA,MAAIkB,UAAU,GAAG,IAAI1B,kBAAJ,EAAjB;AACA,MAAI2B,OAAJ;AACA,MAAIC,SAAJ;;AAEA,MAAItB,YAAY,CAACuB,QAAjB,EAA2B;AACzB;AACAD,IAAAA,SAAS,GAAG,IAAIE,YAAJ,CAAiB,IAAI,CAArB,CAAZ,CAFyB,CAIzB;;AACAF,IAAAA,SAAS,CAAC,CAAD,CAAT,GAAeN,GAAG,CAACS,CAAnB;AACAH,IAAAA,SAAS,CAAC,CAAD,CAAT,GAAeN,GAAG,CAACU,CAAnB;AACAJ,IAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,GAAf;AACAA,IAAAA,SAAS,CAAC,CAAD,CAAT,GAAeL,GAAG,CAACQ,CAAnB;AACAH,IAAAA,SAAS,CAAC,CAAD,CAAT,GAAeN,GAAG,CAACU,CAAnB;AACAJ,IAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,GAAf;AACAA,IAAAA,SAAS,CAAC,CAAD,CAAT,GAAeL,GAAG,CAACQ,CAAnB;AACAH,IAAAA,SAAS,CAAC,CAAD,CAAT,GAAeL,GAAG,CAACS,CAAnB;AACAJ,IAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,GAAf;AACAA,IAAAA,SAAS,CAAC,CAAD,CAAT,GAAeN,GAAG,CAACS,CAAnB;AACAH,IAAAA,SAAS,CAAC,EAAD,CAAT,GAAgBL,GAAG,CAACS,CAApB;AACAJ,IAAAA,SAAS,CAAC,EAAD,CAAT,GAAgB,GAAhB;AAEAF,IAAAA,UAAU,CAACG,QAAX,GAAsB,IAAI9B,iBAAJ,CAAsB;AAC1CkC,MAAAA,iBAAiB,EAAEtC,iBAAiB,CAACuC,MADK;AAE1CC,MAAAA,sBAAsB,EAAE,CAFkB;AAG1CC,MAAAA,MAAM,EAAER;AAHkC,KAAtB,CAAtB;;AAMA,QAAItB,YAAY,CAAC+B,MAAjB,EAAyB;AACvB,UAAIC,OAAO,GAAG,IAAIC,YAAJ,CAAiB,IAAI,CAArB,CAAd,CADuB,CAGvB;;AACAD,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,GAAb;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,GAAb;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,GAAb;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,GAAb;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,GAAb;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,GAAb;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,GAAb;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,GAAb;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,GAAb;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,GAAb;AACAA,MAAAA,OAAO,CAAC,EAAD,CAAP,GAAc,GAAd;AACAA,MAAAA,OAAO,CAAC,EAAD,CAAP,GAAc,GAAd;AAEAZ,MAAAA,UAAU,CAACW,MAAX,GAAoB,IAAItC,iBAAJ,CAAsB;AACxCkC,QAAAA,iBAAiB,EAAEtC,iBAAiB,CAAC6C,KADG;AAExCL,QAAAA,sBAAsB,EAAE,CAFgB;AAGxCC,QAAAA,MAAM,EAAEE;AAHgC,OAAtB,CAApB;AAKD;;AAED,QAAIhC,YAAY,CAACmC,EAAjB,EAAqB;AACnB,UAAIC,SAAS,GAAG,IAAIH,YAAJ,CAAiB,IAAI,CAArB,CAAhB,CADmB,CAGnB;;AACAG,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,GAAf;AACAA,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,GAAf;AACAA,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,GAAf;AACAA,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,GAAf;AACAA,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,GAAf;AACAA,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,GAAf;AACAA,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,GAAf;AACAA,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,GAAf;AAEAhB,MAAAA,UAAU,CAACe,EAAX,GAAgB,IAAI1C,iBAAJ,CAAsB;AACpCkC,QAAAA,iBAAiB,EAAEtC,iBAAiB,CAAC6C,KADD;AAEpCL,QAAAA,sBAAsB,EAAE,CAFY;AAGpCC,QAAAA,MAAM,EAAEM;AAH4B,OAAtB,CAAhB;AAKD;;AAED,QAAIpC,YAAY,CAACqC,OAAjB,EAA0B;AACxB,UAAIC,QAAQ,GAAG,IAAIL,YAAJ,CAAiB,IAAI,CAArB,CAAf,CADwB,CAGxB;;AACAK,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,GAAd;AACAA,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,GAAd;AACAA,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,GAAd;AACAA,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,GAAd;AACAA,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,GAAd;AACAA,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,GAAd;AACAA,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,GAAd;AACAA,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,GAAd;AACAA,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,GAAd;AACAA,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,GAAd;AACAA,MAAAA,QAAQ,CAAC,EAAD,CAAR,GAAe,GAAf;AACAA,MAAAA,QAAQ,CAAC,EAAD,CAAR,GAAe,GAAf;AAEAlB,MAAAA,UAAU,CAACiB,OAAX,GAAqB,IAAI5C,iBAAJ,CAAsB;AACzCkC,QAAAA,iBAAiB,EAAEtC,iBAAiB,CAAC6C,KADI;AAEzCL,QAAAA,sBAAsB,EAAE,CAFiB;AAGzCC,QAAAA,MAAM,EAAEQ;AAHiC,OAAtB,CAArB;AAKD;;AAED,QAAItC,YAAY,CAACuC,SAAjB,EAA4B;AAC1B,UAAIC,UAAU,GAAG,IAAIP,YAAJ,CAAiB,IAAI,CAArB,CAAjB,CAD0B,CAG1B;;AACAO,MAAAA,UAAU,CAAC,CAAD,CAAV,GAAgB,GAAhB;AACAA,MAAAA,UAAU,CAAC,CAAD,CAAV,GAAgB,GAAhB;AACAA,MAAAA,UAAU,CAAC,CAAD,CAAV,GAAgB,GAAhB;AACAA,MAAAA,UAAU,CAAC,CAAD,CAAV,GAAgB,GAAhB;AACAA,MAAAA,UAAU,CAAC,CAAD,CAAV,GAAgB,GAAhB;AACAA,MAAAA,UAAU,CAAC,CAAD,CAAV,GAAgB,GAAhB;AACAA,MAAAA,UAAU,CAAC,CAAD,CAAV,GAAgB,GAAhB;AACAA,MAAAA,UAAU,CAAC,CAAD,CAAV,GAAgB,GAAhB;AACAA,MAAAA,UAAU,CAAC,CAAD,CAAV,GAAgB,GAAhB;AACAA,MAAAA,UAAU,CAAC,CAAD,CAAV,GAAgB,GAAhB;AACAA,MAAAA,UAAU,CAAC,EAAD,CAAV,GAAiB,GAAjB;AACAA,MAAAA,UAAU,CAAC,EAAD,CAAV,GAAiB,GAAjB;AAEApB,MAAAA,UAAU,CAACmB,SAAX,GAAuB,IAAI9C,iBAAJ,CAAsB;AAC3CkC,QAAAA,iBAAiB,EAAEtC,iBAAiB,CAAC6C,KADM;AAE3CL,QAAAA,sBAAsB,EAAE,CAFmB;AAG3CC,QAAAA,MAAM,EAAEU;AAHmC,OAAtB,CAAvB;AAKD,KAlHwB,CAoHzB;;;AACAnB,IAAAA,OAAO,GAAG,IAAIoB,WAAJ,CAAgB,IAAI,CAApB,CAAV,CArHyB,CAuHzB;;AACApB,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,CAAb;AACAA,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,CAAb;AACAA,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,CAAb;AACAA,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,CAAb;AACAA,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,CAAb;AACAA,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,CAAb;AACD;;AAED,SAAO,IAAI7B,QAAJ,CAAa;AAClB4B,IAAAA,UAAU,EAAEA,UADM;AAElBC,IAAAA,OAAO,EAAEA,OAFS;AAGlBqB,IAAAA,aAAa,EAAE/C,aAAa,CAACgD,SAHX;AAIlBC,IAAAA,cAAc,EAAE,IAAI1D,cAAJ,CAAmBC,UAAU,CAAC0D,IAA9B,EAAoCC,IAAI,CAACC,IAAL,CAAU,GAAV,CAApC;AAJE,GAAb,CAAP;AAMD,CA7ID;;AA8IA,eAAelD,aAAf","sourcesContent":["import BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\n/**\n * Describes geometry representing a plane centered at the origin, with a unit width and length.\n *\n * @alias PlaneGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @example\n * var planeGeometry = new Cesium.PlaneGeometry({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY\n * });\n */\nfunction PlaneGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n\n  this._vertexFormat = vertexFormat;\n  this._workerName = \"createPlaneGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nPlaneGeometry.packedLength = VertexFormat.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PlaneGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nPlaneGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n\n  return array;\n};\n\nvar scratchVertexFormat = new VertexFormat();\nvar scratchOptions = {\n  vertexFormat: scratchVertexFormat,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PlaneGeometry} [result] The object into which to store the result.\n * @returns {PlaneGeometry} The modified result parameter or a new PlaneGeometry instance if one was not provided.\n */\nPlaneGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n\n  if (!defined(result)) {\n    return new PlaneGeometry(scratchOptions);\n  }\n\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n\n  return result;\n};\n\nvar min = new Cartesian3(-0.5, -0.5, 0.0);\nvar max = new Cartesian3(0.5, 0.5, 0.0);\n\n/**\n * Computes the geometric representation of a plane, including its vertices, indices, and a bounding sphere.\n *\n * @param {PlaneGeometry} planeGeometry A description of the plane.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPlaneGeometry.createGeometry = function (planeGeometry) {\n  var vertexFormat = planeGeometry._vertexFormat;\n\n  var attributes = new GeometryAttributes();\n  var indices;\n  var positions;\n\n  if (vertexFormat.position) {\n    // 4 corner points.  Duplicated 3 times each for each incident edge/face.\n    positions = new Float64Array(4 * 3);\n\n    // +z face\n    positions[0] = min.x;\n    positions[1] = min.y;\n    positions[2] = 0.0;\n    positions[3] = max.x;\n    positions[4] = min.y;\n    positions[5] = 0.0;\n    positions[6] = max.x;\n    positions[7] = max.y;\n    positions[8] = 0.0;\n    positions[9] = min.x;\n    positions[10] = max.y;\n    positions[11] = 0.0;\n\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions,\n    });\n\n    if (vertexFormat.normal) {\n      var normals = new Float32Array(4 * 3);\n\n      // +z face\n      normals[0] = 0.0;\n      normals[1] = 0.0;\n      normals[2] = 1.0;\n      normals[3] = 0.0;\n      normals[4] = 0.0;\n      normals[5] = 1.0;\n      normals[6] = 0.0;\n      normals[7] = 0.0;\n      normals[8] = 1.0;\n      normals[9] = 0.0;\n      normals[10] = 0.0;\n      normals[11] = 1.0;\n\n      attributes.normal = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: normals,\n      });\n    }\n\n    if (vertexFormat.st) {\n      var texCoords = new Float32Array(4 * 2);\n\n      // +z face\n      texCoords[0] = 0.0;\n      texCoords[1] = 0.0;\n      texCoords[2] = 1.0;\n      texCoords[3] = 0.0;\n      texCoords[4] = 1.0;\n      texCoords[5] = 1.0;\n      texCoords[6] = 0.0;\n      texCoords[7] = 1.0;\n\n      attributes.st = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 2,\n        values: texCoords,\n      });\n    }\n\n    if (vertexFormat.tangent) {\n      var tangents = new Float32Array(4 * 3);\n\n      // +z face\n      tangents[0] = 1.0;\n      tangents[1] = 0.0;\n      tangents[2] = 0.0;\n      tangents[3] = 1.0;\n      tangents[4] = 0.0;\n      tangents[5] = 0.0;\n      tangents[6] = 1.0;\n      tangents[7] = 0.0;\n      tangents[8] = 0.0;\n      tangents[9] = 1.0;\n      tangents[10] = 0.0;\n      tangents[11] = 0.0;\n\n      attributes.tangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: tangents,\n      });\n    }\n\n    if (vertexFormat.bitangent) {\n      var bitangents = new Float32Array(4 * 3);\n\n      // +z face\n      bitangents[0] = 0.0;\n      bitangents[1] = 1.0;\n      bitangents[2] = 0.0;\n      bitangents[3] = 0.0;\n      bitangents[4] = 1.0;\n      bitangents[5] = 0.0;\n      bitangents[6] = 0.0;\n      bitangents[7] = 1.0;\n      bitangents[8] = 0.0;\n      bitangents[9] = 0.0;\n      bitangents[10] = 1.0;\n      bitangents[11] = 0.0;\n\n      attributes.bitangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: bitangents,\n      });\n    }\n\n    // 2 triangles\n    indices = new Uint16Array(2 * 3);\n\n    // +z face\n    indices[0] = 0;\n    indices[1] = 1;\n    indices[2] = 2;\n    indices[3] = 0;\n    indices[4] = 2;\n    indices[5] = 3;\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: new BoundingSphere(Cartesian3.ZERO, Math.sqrt(2.0)),\n  });\n};\nexport default PlaneGeometry;\n"]},"metadata":{},"sourceType":"module"}