{"ast":null,"code":"import Color from \"./Color.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n/**\n * Value and type information for per-instance geometry color.\n *\n * @alias ColorGeometryInstanceAttribute\n * @constructor\n *\n * @param {Number} [red=1.0] The red component.\n * @param {Number} [green=1.0] The green component.\n * @param {Number} [blue=1.0] The blue component.\n * @param {Number} [alpha=1.0] The alpha component.\n *\n *\n * @example\n * var instance = new Cesium.GeometryInstance({\n *   geometry : Cesium.BoxGeometry.fromDimensions({\n *     dimensions : new Cesium.Cartesian3(1000000.0, 1000000.0, 500000.0)\n *   }),\n *   modelMatrix : Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\n *     Cesium.Cartesian3.fromDegrees(0.0, 0.0)), new Cesium.Cartesian3(0.0, 0.0, 1000000.0), new Cesium.Matrix4()),\n *   id : 'box',\n *   attributes : {\n *     color : new Cesium.ColorGeometryInstanceAttribute(red, green, blue, alpha)\n *   }\n * });\n *\n * @see GeometryInstance\n * @see GeometryInstanceAttribute\n */\n\nfunction ColorGeometryInstanceAttribute(red, green, blue, alpha) {\n  red = defaultValue(red, 1.0);\n  green = defaultValue(green, 1.0);\n  blue = defaultValue(blue, 1.0);\n  alpha = defaultValue(alpha, 1.0);\n  /**\n   * The values for the attributes stored in a typed array.\n   *\n   * @type Uint8Array\n   *\n   * @default [255, 255, 255, 255]\n   */\n\n  this.value = new Uint8Array([Color.floatToByte(red), Color.floatToByte(green), Color.floatToByte(blue), Color.floatToByte(alpha)]);\n}\n\nObject.defineProperties(ColorGeometryInstanceAttribute.prototype, {\n  /**\n   * The datatype of each component in the attribute, e.g., individual elements in\n   * {@link ColorGeometryInstanceAttribute#value}.\n   *\n   * @memberof ColorGeometryInstanceAttribute.prototype\n   *\n   * @type {ComponentDatatype}\n   * @readonly\n   *\n   * @default {@link ComponentDatatype.UNSIGNED_BYTE}\n   */\n  componentDatatype: {\n    get: function () {\n      return ComponentDatatype.UNSIGNED_BYTE;\n    }\n  },\n\n  /**\n   * The number of components in the attributes, i.e., {@link ColorGeometryInstanceAttribute#value}.\n   *\n   * @memberof ColorGeometryInstanceAttribute.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @default 4\n   */\n  componentsPerAttribute: {\n    get: function () {\n      return 4;\n    }\n  },\n\n  /**\n   * When <code>true</code> and <code>componentDatatype</code> is an integer format,\n   * indicate that the components should be mapped to the range [0, 1] (unsigned)\n   * or [-1, 1] (signed) when they are accessed as floating-point for rendering.\n   *\n   * @memberof ColorGeometryInstanceAttribute.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  normalize: {\n    get: function () {\n      return true;\n    }\n  }\n});\n/**\n * Creates a new {@link ColorGeometryInstanceAttribute} instance given the provided {@link Color}.\n *\n * @param {Color} color The color.\n * @returns {ColorGeometryInstanceAttribute} The new {@link ColorGeometryInstanceAttribute} instance.\n *\n * @example\n * var instance = new Cesium.GeometryInstance({\n *   geometry : geometry,\n *   attributes : {\n *     color : Cesium.ColorGeometryInstanceAttribute.fromColor(Cesium.Color.CORNFLOWERBLUE),\n *   }\n * });\n */\n\nColorGeometryInstanceAttribute.fromColor = function (color) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required.\");\n  } //>>includeEnd('debug');\n\n\n  return new ColorGeometryInstanceAttribute(color.red, color.green, color.blue, color.alpha);\n};\n/**\n * Converts a color to a typed array that can be used to assign a color attribute.\n *\n * @param {Color} color The color.\n * @param {Uint8Array} [result] The array to store the result in, if undefined a new instance will be created.\n *\n * @returns {Uint8Array} The modified result parameter or a new instance if result was undefined.\n *\n * @example\n * var attributes = primitive.getGeometryInstanceAttributes('an id');\n * attributes.color = Cesium.ColorGeometryInstanceAttribute.toValue(Cesium.Color.AQUA, attributes.color);\n */\n\n\nColorGeometryInstanceAttribute.toValue = function (color, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required.\");\n  } //>>includeEnd('debug');\n\n\n  if (!defined(result)) {\n    return new Uint8Array(color.toBytes());\n  }\n\n  return color.toBytes(result);\n};\n/**\n * Compares the provided ColorGeometryInstanceAttributes and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {ColorGeometryInstanceAttribute} [left] The first ColorGeometryInstanceAttribute.\n * @param {ColorGeometryInstanceAttribute} [right] The second ColorGeometryInstanceAttribute.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nColorGeometryInstanceAttribute.equals = function (left, right) {\n  return left === right || defined(left) && defined(right) && left.value[0] === right.value[0] && left.value[1] === right.value[1] && left.value[2] === right.value[2] && left.value[3] === right.value[3];\n};\n\nexport default ColorGeometryInstanceAttribute;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/ColorGeometryInstanceAttribute.js"],"names":["Color","ComponentDatatype","defaultValue","defined","DeveloperError","ColorGeometryInstanceAttribute","red","green","blue","alpha","value","Uint8Array","floatToByte","Object","defineProperties","prototype","componentDatatype","get","UNSIGNED_BYTE","componentsPerAttribute","normalize","fromColor","color","toValue","result","toBytes","equals","left","right"],"mappings":"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","sourcesContent":["import Color from \"./Color.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Value and type information for per-instance geometry color.\n *\n * @alias ColorGeometryInstanceAttribute\n * @constructor\n *\n * @param {Number} [red=1.0] The red component.\n * @param {Number} [green=1.0] The green component.\n * @param {Number} [blue=1.0] The blue component.\n * @param {Number} [alpha=1.0] The alpha component.\n *\n *\n * @example\n * var instance = new Cesium.GeometryInstance({\n *   geometry : Cesium.BoxGeometry.fromDimensions({\n *     dimensions : new Cesium.Cartesian3(1000000.0, 1000000.0, 500000.0)\n *   }),\n *   modelMatrix : Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\n *     Cesium.Cartesian3.fromDegrees(0.0, 0.0)), new Cesium.Cartesian3(0.0, 0.0, 1000000.0), new Cesium.Matrix4()),\n *   id : 'box',\n *   attributes : {\n *     color : new Cesium.ColorGeometryInstanceAttribute(red, green, blue, alpha)\n *   }\n * });\n *\n * @see GeometryInstance\n * @see GeometryInstanceAttribute\n */\nfunction ColorGeometryInstanceAttribute(red, green, blue, alpha) {\n  red = defaultValue(red, 1.0);\n  green = defaultValue(green, 1.0);\n  blue = defaultValue(blue, 1.0);\n  alpha = defaultValue(alpha, 1.0);\n\n  /**\n   * The values for the attributes stored in a typed array.\n   *\n   * @type Uint8Array\n   *\n   * @default [255, 255, 255, 255]\n   */\n  this.value = new Uint8Array([\n    Color.floatToByte(red),\n    Color.floatToByte(green),\n    Color.floatToByte(blue),\n    Color.floatToByte(alpha),\n  ]);\n}\n\nObject.defineProperties(ColorGeometryInstanceAttribute.prototype, {\n  /**\n   * The datatype of each component in the attribute, e.g., individual elements in\n   * {@link ColorGeometryInstanceAttribute#value}.\n   *\n   * @memberof ColorGeometryInstanceAttribute.prototype\n   *\n   * @type {ComponentDatatype}\n   * @readonly\n   *\n   * @default {@link ComponentDatatype.UNSIGNED_BYTE}\n   */\n  componentDatatype: {\n    get: function () {\n      return ComponentDatatype.UNSIGNED_BYTE;\n    },\n  },\n\n  /**\n   * The number of components in the attributes, i.e., {@link ColorGeometryInstanceAttribute#value}.\n   *\n   * @memberof ColorGeometryInstanceAttribute.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @default 4\n   */\n  componentsPerAttribute: {\n    get: function () {\n      return 4;\n    },\n  },\n\n  /**\n   * When <code>true</code> and <code>componentDatatype</code> is an integer format,\n   * indicate that the components should be mapped to the range [0, 1] (unsigned)\n   * or [-1, 1] (signed) when they are accessed as floating-point for rendering.\n   *\n   * @memberof ColorGeometryInstanceAttribute.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  normalize: {\n    get: function () {\n      return true;\n    },\n  },\n});\n\n/**\n * Creates a new {@link ColorGeometryInstanceAttribute} instance given the provided {@link Color}.\n *\n * @param {Color} color The color.\n * @returns {ColorGeometryInstanceAttribute} The new {@link ColorGeometryInstanceAttribute} instance.\n *\n * @example\n * var instance = new Cesium.GeometryInstance({\n *   geometry : geometry,\n *   attributes : {\n *     color : Cesium.ColorGeometryInstanceAttribute.fromColor(Cesium.Color.CORNFLOWERBLUE),\n *   }\n * });\n */\nColorGeometryInstanceAttribute.fromColor = function (color) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required.\");\n  }\n  //>>includeEnd('debug');\n\n  return new ColorGeometryInstanceAttribute(\n    color.red,\n    color.green,\n    color.blue,\n    color.alpha\n  );\n};\n\n/**\n * Converts a color to a typed array that can be used to assign a color attribute.\n *\n * @param {Color} color The color.\n * @param {Uint8Array} [result] The array to store the result in, if undefined a new instance will be created.\n *\n * @returns {Uint8Array} The modified result parameter or a new instance if result was undefined.\n *\n * @example\n * var attributes = primitive.getGeometryInstanceAttributes('an id');\n * attributes.color = Cesium.ColorGeometryInstanceAttribute.toValue(Cesium.Color.AQUA, attributes.color);\n */\nColorGeometryInstanceAttribute.toValue = function (color, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Uint8Array(color.toBytes());\n  }\n  return color.toBytes(result);\n};\n\n/**\n * Compares the provided ColorGeometryInstanceAttributes and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {ColorGeometryInstanceAttribute} [left] The first ColorGeometryInstanceAttribute.\n * @param {ColorGeometryInstanceAttribute} [right] The second ColorGeometryInstanceAttribute.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nColorGeometryInstanceAttribute.equals = function (left, right) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      left.value[0] === right.value[0] &&\n      left.value[1] === right.value[1] &&\n      left.value[2] === right.value[2] &&\n      left.value[3] === right.value[3])\n  );\n};\nexport default ColorGeometryInstanceAttribute;\n"]},"metadata":{},"sourceType":"module"}