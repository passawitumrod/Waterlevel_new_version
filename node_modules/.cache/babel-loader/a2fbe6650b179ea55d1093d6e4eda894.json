{"ast":null,"code":"import createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\n/**\n * A collection of primitives.  This is most often used with {@link Scene#primitives},\n * but <code>PrimitiveCollection</code> is also a primitive itself so collections can\n * be added to collections forming a hierarchy.\n *\n * @alias PrimitiveCollection\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.show=true] Determines if the primitives in the collection will be shown.\n * @param {Boolean} [options.destroyPrimitives=true] Determines if primitives in the collection are destroyed when they are removed.\n *\n * @example\n * var billboards = new Cesium.BillboardCollection();\n * var labels = new Cesium.LabelCollection();\n *\n * var collection = new Cesium.PrimitiveCollection();\n * collection.add(billboards);\n *\n * scene.primitives.add(collection);  // Add collection\n * scene.primitives.add(labels);      // Add regular primitive\n */\n\nfunction PrimitiveCollection(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._primitives = [];\n  this._guid = createGuid(); // Used by the OrderedGroundPrimitiveCollection\n\n  this._zIndex = undefined;\n  /**\n   * Determines if primitives in this collection will be shown.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n\n  this.show = defaultValue(options.show, true);\n  /**\n   * Determines if primitives in the collection are destroyed when they are removed by\n   * {@link PrimitiveCollection#destroy} or  {@link PrimitiveCollection#remove} or implicitly\n   * by {@link PrimitiveCollection#removeAll}.\n   *\n   * @type {Boolean}\n   * @default true\n   *\n   * @example\n   * // Example 1. Primitives are destroyed by default.\n   * var primitives = new Cesium.PrimitiveCollection();\n   * var labels = primitives.add(new Cesium.LabelCollection());\n   * primitives = primitives.destroy();\n   * var b = labels.isDestroyed(); // true\n   *\n   * @example\n   * // Example 2. Do not destroy primitives in a collection.\n   * var primitives = new Cesium.PrimitiveCollection();\n   * primitives.destroyPrimitives = false;\n   * var labels = primitives.add(new Cesium.LabelCollection());\n   * primitives = primitives.destroy();\n   * var b = labels.isDestroyed(); // false\n   * labels = labels.destroy();    // explicitly destroy\n   */\n\n  this.destroyPrimitives = defaultValue(options.destroyPrimitives, true);\n}\n\nObject.defineProperties(PrimitiveCollection.prototype, {\n  /**\n   * Gets the number of primitives in the collection.\n   *\n   * @memberof PrimitiveCollection.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  length: {\n    get: function get() {\n      return this._primitives.length;\n    }\n  }\n});\n/**\n * Adds a primitive to the collection.\n *\n * @param {Object} primitive The primitive to add.\n * @param {Number} [index] the index to add the layer at.  If omitted, the primitive will\n *                         added at the bottom  of all existing primitives.\n * @returns {Object} The primitive added to the collection.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * var billboards = scene.primitives.add(new Cesium.BillboardCollection());\n */\n\nPrimitiveCollection.prototype.add = function (primitive, index) {\n  var hasIndex = defined(index); //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(primitive)) {\n    throw new DeveloperError(\"primitive is required.\");\n  }\n\n  if (hasIndex) {\n    if (index < 0) {\n      throw new DeveloperError(\"index must be greater than or equal to zero.\");\n    } else if (index > this._primitives.length) {\n      throw new DeveloperError(\"index must be less than or equal to the number of primitives.\");\n    }\n  } //>>includeEnd('debug');\n\n\n  var external = primitive._external = primitive._external || {};\n  var composites = external._composites = external._composites || {};\n  composites[this._guid] = {\n    collection: this\n  };\n\n  if (!hasIndex) {\n    this._primitives.push(primitive);\n  } else {\n    this._primitives.splice(index, 0, primitive);\n  }\n\n  return primitive;\n};\n/**\n * Removes a primitive from the collection.\n *\n * @param {Object} [primitive] The primitive to remove.\n * @returns {Boolean} <code>true</code> if the primitive was removed; <code>false</code> if the primitive is <code>undefined</code> or was not found in the collection.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * var billboards = scene.primitives.add(new Cesium.BillboardCollection());\n * scene.primitives.remove(billboards);  // Returns true\n *\n * @see PrimitiveCollection#destroyPrimitives\n */\n\n\nPrimitiveCollection.prototype.remove = function (primitive) {\n  // PERFORMANCE_IDEA:  We can obviously make this a lot faster.\n  if (this.contains(primitive)) {\n    var index = this._primitives.indexOf(primitive);\n\n    if (index !== -1) {\n      this._primitives.splice(index, 1);\n\n      delete primitive._external._composites[this._guid];\n\n      if (this.destroyPrimitives) {\n        primitive.destroy();\n      }\n\n      return true;\n    } // else ... this is not possible, I swear.\n\n  }\n\n  return false;\n};\n/**\n * Removes and destroys a primitive, regardless of destroyPrimitives setting.\n * @private\n */\n\n\nPrimitiveCollection.prototype.removeAndDestroy = function (primitive) {\n  var removed = this.remove(primitive);\n\n  if (removed && !this.destroyPrimitives) {\n    primitive.destroy();\n  }\n\n  return removed;\n};\n/**\n * Removes all primitives in the collection.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#destroyPrimitives\n */\n\n\nPrimitiveCollection.prototype.removeAll = function () {\n  var primitives = this._primitives;\n  var length = primitives.length;\n\n  for (var i = 0; i < length; ++i) {\n    delete primitives[i]._external._composites[this._guid];\n\n    if (this.destroyPrimitives) {\n      primitives[i].destroy();\n    }\n  }\n\n  this._primitives = [];\n};\n/**\n * Determines if this collection contains a primitive.\n *\n * @param {Object} [primitive] The primitive to check for.\n * @returns {Boolean} <code>true</code> if the primitive is in the collection; <code>false</code> if the primitive is <code>undefined</code> or was not found in the collection.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#get\n */\n\n\nPrimitiveCollection.prototype.contains = function (primitive) {\n  return !!(defined(primitive) && primitive._external && primitive._external._composites && primitive._external._composites[this._guid]);\n};\n\nfunction getPrimitiveIndex(compositePrimitive, primitive) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!compositePrimitive.contains(primitive)) {\n    throw new DeveloperError(\"primitive is not in this collection.\");\n  } //>>includeEnd('debug');\n\n\n  return compositePrimitive._primitives.indexOf(primitive);\n}\n/**\n * Raises a primitive \"up one\" in the collection.  If all primitives in the collection are drawn\n * on the globe surface, this visually moves the primitive up one.\n *\n * @param {Object} [primitive] The primitive to raise.\n *\n * @exception {DeveloperError} primitive is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#raiseToTop\n * @see PrimitiveCollection#lower\n * @see PrimitiveCollection#lowerToBottom\n */\n\n\nPrimitiveCollection.prototype.raise = function (primitive) {\n  if (defined(primitive)) {\n    var index = getPrimitiveIndex(this, primitive);\n    var primitives = this._primitives;\n\n    if (index !== primitives.length - 1) {\n      var p = primitives[index];\n      primitives[index] = primitives[index + 1];\n      primitives[index + 1] = p;\n    }\n  }\n};\n/**\n * Raises a primitive to the \"top\" of the collection.  If all primitives in the collection are drawn\n * on the globe surface, this visually moves the primitive to the top.\n *\n * @param {Object} [primitive] The primitive to raise the top.\n *\n * @exception {DeveloperError} primitive is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#raise\n * @see PrimitiveCollection#lower\n * @see PrimitiveCollection#lowerToBottom\n */\n\n\nPrimitiveCollection.prototype.raiseToTop = function (primitive) {\n  if (defined(primitive)) {\n    var index = getPrimitiveIndex(this, primitive);\n    var primitives = this._primitives;\n\n    if (index !== primitives.length - 1) {\n      // PERFORMANCE_IDEA:  Could be faster\n      primitives.splice(index, 1);\n      primitives.push(primitive);\n    }\n  }\n};\n/**\n * Lowers a primitive \"down one\" in the collection.  If all primitives in the collection are drawn\n * on the globe surface, this visually moves the primitive down one.\n *\n * @param {Object} [primitive] The primitive to lower.\n *\n * @exception {DeveloperError} primitive is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#lowerToBottom\n * @see PrimitiveCollection#raise\n * @see PrimitiveCollection#raiseToTop\n */\n\n\nPrimitiveCollection.prototype.lower = function (primitive) {\n  if (defined(primitive)) {\n    var index = getPrimitiveIndex(this, primitive);\n    var primitives = this._primitives;\n\n    if (index !== 0) {\n      var p = primitives[index];\n      primitives[index] = primitives[index - 1];\n      primitives[index - 1] = p;\n    }\n  }\n};\n/**\n * Lowers a primitive to the \"bottom\" of the collection.  If all primitives in the collection are drawn\n * on the globe surface, this visually moves the primitive to the bottom.\n *\n * @param {Object} [primitive] The primitive to lower to the bottom.\n *\n * @exception {DeveloperError} primitive is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#lower\n * @see PrimitiveCollection#raise\n * @see PrimitiveCollection#raiseToTop\n */\n\n\nPrimitiveCollection.prototype.lowerToBottom = function (primitive) {\n  if (defined(primitive)) {\n    var index = getPrimitiveIndex(this, primitive);\n    var primitives = this._primitives;\n\n    if (index !== 0) {\n      // PERFORMANCE_IDEA:  Could be faster\n      primitives.splice(index, 1);\n      primitives.unshift(primitive);\n    }\n  }\n};\n/**\n * Returns the primitive in the collection at the specified index.\n *\n * @param {Number} index The zero-based index of the primitive to return.\n * @returns {Object} The primitive at the <code>index</code>.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * // Toggle the show property of every primitive in the collection.\n * var primitives = scene.primitives;\n * var length = primitives.length;\n * for (var i = 0; i < length; ++i) {\n *   var p = primitives.get(i);\n *   p.show = !p.show;\n * }\n *\n * @see PrimitiveCollection#length\n */\n\n\nPrimitiveCollection.prototype.get = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(index)) {\n    throw new DeveloperError(\"index is required.\");\n  } //>>includeEnd('debug');\n\n\n  return this._primitives[index];\n};\n/**\n * @private\n */\n\n\nPrimitiveCollection.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n\n  var primitives = this._primitives; // Using primitives.length in the loop is a temporary workaround\n  // to allow quadtree updates to add and remove primitives in\n  // update().  This will be changed to manage added and removed lists.\n\n  for (var i = 0; i < primitives.length; ++i) {\n    primitives[i].update(frameState);\n  }\n};\n/**\n * @private\n */\n\n\nPrimitiveCollection.prototype.prePassesUpdate = function (frameState) {\n  var primitives = this._primitives; // Using primitives.length in the loop is a temporary workaround\n  // to allow quadtree updates to add and remove primitives in\n  // update().  This will be changed to manage added and removed lists.\n\n  for (var i = 0; i < primitives.length; ++i) {\n    var primitive = primitives[i];\n\n    if (defined(primitive.prePassesUpdate)) {\n      primitive.prePassesUpdate(frameState);\n    }\n  }\n};\n/**\n * @private\n */\n\n\nPrimitiveCollection.prototype.updateForPass = function (frameState, passState) {\n  var primitives = this._primitives; // Using primitives.length in the loop is a temporary workaround\n  // to allow quadtree updates to add and remove primitives in\n  // update().  This will be changed to manage added and removed lists.\n\n  for (var i = 0; i < primitives.length; ++i) {\n    var primitive = primitives[i];\n\n    if (defined(primitive.updateForPass)) {\n      primitive.updateForPass(frameState, passState);\n    }\n  }\n};\n/**\n * @private\n */\n\n\nPrimitiveCollection.prototype.postPassesUpdate = function (frameState) {\n  var primitives = this._primitives; // Using primitives.length in the loop is a temporary workaround\n  // to allow quadtree updates to add and remove primitives in\n  // update().  This will be changed to manage added and removed lists.\n\n  for (var i = 0; i < primitives.length; ++i) {\n    var primitive = primitives[i];\n\n    if (defined(primitive.postPassesUpdate)) {\n      primitive.postPassesUpdate(frameState);\n    }\n  }\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see PrimitiveCollection#destroy\n */\n\n\nPrimitiveCollection.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys the WebGL resources held by each primitive in this collection.  Explicitly destroying this\n * collection allows for deterministic release of WebGL resources, instead of relying on the garbage\n * collector to destroy this collection.\n * <br /><br />\n * Since destroying a collection destroys all the contained primitives, only destroy a collection\n * when you are sure no other code is still using any of the contained primitives.\n * <br /><br />\n * Once this collection is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * primitives = primitives && primitives.destroy();\n *\n * @see PrimitiveCollection#isDestroyed\n */\n\n\nPrimitiveCollection.prototype.destroy = function () {\n  this.removeAll();\n  return destroyObject(this);\n};\n\nexport default PrimitiveCollection;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/PrimitiveCollection.js"],"names":["createGuid","defaultValue","defined","destroyObject","DeveloperError","PrimitiveCollection","options","EMPTY_OBJECT","_primitives","_guid","_zIndex","undefined","show","destroyPrimitives","Object","defineProperties","prototype","length","get","add","primitive","index","hasIndex","external","_external","composites","_composites","collection","push","splice","remove","contains","indexOf","destroy","removeAndDestroy","removed","removeAll","primitives","i","getPrimitiveIndex","compositePrimitive","raise","p","raiseToTop","lower","lowerToBottom","unshift","update","frameState","prePassesUpdate","updateForPass","passState","postPassesUpdate","isDestroyed"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,uBAAvB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAASC,mBAAT,CAA6BC,OAA7B,EAAsC;AACpCA,EAAAA,OAAO,GAAGL,YAAY,CAACK,OAAD,EAAUL,YAAY,CAACM,YAAvB,CAAtB;AAEA,OAAKC,WAAL,GAAmB,EAAnB;AACA,OAAKC,KAAL,GAAaT,UAAU,EAAvB,CAJoC,CAMpC;;AACA,OAAKU,OAAL,GAAeC,SAAf;AAEA;;;;;;;AAMA,OAAKC,IAAL,GAAYX,YAAY,CAACK,OAAO,CAACM,IAAT,EAAe,IAAf,CAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAKC,iBAAL,GAAyBZ,YAAY,CAACK,OAAO,CAACO,iBAAT,EAA4B,IAA5B,CAArC;AACD;;AAEDC,MAAM,CAACC,gBAAP,CAAwBV,mBAAmB,CAACW,SAA5C,EAAuD;AACrD;;;;;;;;AAQAC,EAAAA,MAAM,EAAE;AACNC,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKV,WAAL,CAAiBS,MAAxB;AACD;AAHK;AAT6C,CAAvD;AAgBA;;;;;;;;;;;;;;AAaAZ,mBAAmB,CAACW,SAApB,CAA8BG,GAA9B,GAAoC,UAAUC,SAAV,EAAqBC,KAArB,EAA4B;AAC9D,MAAIC,QAAQ,GAAGpB,OAAO,CAACmB,KAAD,CAAtB,CAD8D,CAG9D;;AACA,MAAI,CAACnB,OAAO,CAACkB,SAAD,CAAZ,EAAyB;AACvB,UAAM,IAAIhB,cAAJ,CAAmB,wBAAnB,CAAN;AACD;;AACD,MAAIkB,QAAJ,EAAc;AACZ,QAAID,KAAK,GAAG,CAAZ,EAAe;AACb,YAAM,IAAIjB,cAAJ,CAAmB,8CAAnB,CAAN;AACD,KAFD,MAEO,IAAIiB,KAAK,GAAG,KAAKb,WAAL,CAAiBS,MAA7B,EAAqC;AAC1C,YAAM,IAAIb,cAAJ,CACJ,+DADI,CAAN;AAGD;AACF,GAf6D,CAgB9D;;;AAEA,MAAImB,QAAQ,GAAIH,SAAS,CAACI,SAAV,GAAsBJ,SAAS,CAACI,SAAV,IAAuB,EAA7D;AACA,MAAIC,UAAU,GAAIF,QAAQ,CAACG,WAAT,GAAuBH,QAAQ,CAACG,WAAT,IAAwB,EAAjE;AACAD,EAAAA,UAAU,CAAC,KAAKhB,KAAN,CAAV,GAAyB;AACvBkB,IAAAA,UAAU,EAAE;AADW,GAAzB;;AAIA,MAAI,CAACL,QAAL,EAAe;AACb,SAAKd,WAAL,CAAiBoB,IAAjB,CAAsBR,SAAtB;AACD,GAFD,MAEO;AACL,SAAKZ,WAAL,CAAiBqB,MAAjB,CAAwBR,KAAxB,EAA+B,CAA/B,EAAkCD,SAAlC;AACD;;AAED,SAAOA,SAAP;AACD,CA/BD;AAiCA;;;;;;;;;;;;;;;;;AAeAf,mBAAmB,CAACW,SAApB,CAA8Bc,MAA9B,GAAuC,UAAUV,SAAV,EAAqB;AAC1D;AACA,MAAI,KAAKW,QAAL,CAAcX,SAAd,CAAJ,EAA8B;AAC5B,QAAIC,KAAK,GAAG,KAAKb,WAAL,CAAiBwB,OAAjB,CAAyBZ,SAAzB,CAAZ;;AACA,QAAIC,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,WAAKb,WAAL,CAAiBqB,MAAjB,CAAwBR,KAAxB,EAA+B,CAA/B;;AAEA,aAAOD,SAAS,CAACI,SAAV,CAAoBE,WAApB,CAAgC,KAAKjB,KAArC,CAAP;;AAEA,UAAI,KAAKI,iBAAT,EAA4B;AAC1BO,QAAAA,SAAS,CAACa,OAAV;AACD;;AAED,aAAO,IAAP;AACD,KAZ2B,CAa5B;;AACD;;AAED,SAAO,KAAP;AACD,CAnBD;AAqBA;;;;;;AAIA5B,mBAAmB,CAACW,SAApB,CAA8BkB,gBAA9B,GAAiD,UAAUd,SAAV,EAAqB;AACpE,MAAIe,OAAO,GAAG,KAAKL,MAAL,CAAYV,SAAZ,CAAd;;AACA,MAAIe,OAAO,IAAI,CAAC,KAAKtB,iBAArB,EAAwC;AACtCO,IAAAA,SAAS,CAACa,OAAV;AACD;;AACD,SAAOE,OAAP;AACD,CAND;AAQA;;;;;;;;;AAOA9B,mBAAmB,CAACW,SAApB,CAA8BoB,SAA9B,GAA0C,YAAY;AACpD,MAAIC,UAAU,GAAG,KAAK7B,WAAtB;AACA,MAAIS,MAAM,GAAGoB,UAAU,CAACpB,MAAxB;;AACA,OAAK,IAAIqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,MAApB,EAA4B,EAAEqB,CAA9B,EAAiC;AAC/B,WAAOD,UAAU,CAACC,CAAD,CAAV,CAAcd,SAAd,CAAwBE,WAAxB,CAAoC,KAAKjB,KAAzC,CAAP;;AACA,QAAI,KAAKI,iBAAT,EAA4B;AAC1BwB,MAAAA,UAAU,CAACC,CAAD,CAAV,CAAcL,OAAd;AACD;AACF;;AACD,OAAKzB,WAAL,GAAmB,EAAnB;AACD,CAVD;AAYA;;;;;;;;;;;;AAUAH,mBAAmB,CAACW,SAApB,CAA8Be,QAA9B,GAAyC,UAAUX,SAAV,EAAqB;AAC5D,SAAO,CAAC,EACNlB,OAAO,CAACkB,SAAD,CAAP,IACAA,SAAS,CAACI,SADV,IAEAJ,SAAS,CAACI,SAAV,CAAoBE,WAFpB,IAGAN,SAAS,CAACI,SAAV,CAAoBE,WAApB,CAAgC,KAAKjB,KAArC,CAJM,CAAR;AAMD,CAPD;;AASA,SAAS8B,iBAAT,CAA2BC,kBAA3B,EAA+CpB,SAA/C,EAA0D;AACxD;AACA,MAAI,CAACoB,kBAAkB,CAACT,QAAnB,CAA4BX,SAA5B,CAAL,EAA6C;AAC3C,UAAM,IAAIhB,cAAJ,CAAmB,sCAAnB,CAAN;AACD,GAJuD,CAKxD;;;AAEA,SAAOoC,kBAAkB,CAAChC,WAAnB,CAA+BwB,OAA/B,CAAuCZ,SAAvC,CAAP;AACD;AAED;;;;;;;;;;;;;;;AAaAf,mBAAmB,CAACW,SAApB,CAA8ByB,KAA9B,GAAsC,UAAUrB,SAAV,EAAqB;AACzD,MAAIlB,OAAO,CAACkB,SAAD,CAAX,EAAwB;AACtB,QAAIC,KAAK,GAAGkB,iBAAiB,CAAC,IAAD,EAAOnB,SAAP,CAA7B;AACA,QAAIiB,UAAU,GAAG,KAAK7B,WAAtB;;AAEA,QAAIa,KAAK,KAAKgB,UAAU,CAACpB,MAAX,GAAoB,CAAlC,EAAqC;AACnC,UAAIyB,CAAC,GAAGL,UAAU,CAAChB,KAAD,CAAlB;AACAgB,MAAAA,UAAU,CAAChB,KAAD,CAAV,GAAoBgB,UAAU,CAAChB,KAAK,GAAG,CAAT,CAA9B;AACAgB,MAAAA,UAAU,CAAChB,KAAK,GAAG,CAAT,CAAV,GAAwBqB,CAAxB;AACD;AACF;AACF,CAXD;AAaA;;;;;;;;;;;;;;;AAaArC,mBAAmB,CAACW,SAApB,CAA8B2B,UAA9B,GAA2C,UAAUvB,SAAV,EAAqB;AAC9D,MAAIlB,OAAO,CAACkB,SAAD,CAAX,EAAwB;AACtB,QAAIC,KAAK,GAAGkB,iBAAiB,CAAC,IAAD,EAAOnB,SAAP,CAA7B;AACA,QAAIiB,UAAU,GAAG,KAAK7B,WAAtB;;AAEA,QAAIa,KAAK,KAAKgB,UAAU,CAACpB,MAAX,GAAoB,CAAlC,EAAqC;AACnC;AACAoB,MAAAA,UAAU,CAACR,MAAX,CAAkBR,KAAlB,EAAyB,CAAzB;AACAgB,MAAAA,UAAU,CAACT,IAAX,CAAgBR,SAAhB;AACD;AACF;AACF,CAXD;AAaA;;;;;;;;;;;;;;;AAaAf,mBAAmB,CAACW,SAApB,CAA8B4B,KAA9B,GAAsC,UAAUxB,SAAV,EAAqB;AACzD,MAAIlB,OAAO,CAACkB,SAAD,CAAX,EAAwB;AACtB,QAAIC,KAAK,GAAGkB,iBAAiB,CAAC,IAAD,EAAOnB,SAAP,CAA7B;AACA,QAAIiB,UAAU,GAAG,KAAK7B,WAAtB;;AAEA,QAAIa,KAAK,KAAK,CAAd,EAAiB;AACf,UAAIqB,CAAC,GAAGL,UAAU,CAAChB,KAAD,CAAlB;AACAgB,MAAAA,UAAU,CAAChB,KAAD,CAAV,GAAoBgB,UAAU,CAAChB,KAAK,GAAG,CAAT,CAA9B;AACAgB,MAAAA,UAAU,CAAChB,KAAK,GAAG,CAAT,CAAV,GAAwBqB,CAAxB;AACD;AACF;AACF,CAXD;AAaA;;;;;;;;;;;;;;;AAaArC,mBAAmB,CAACW,SAApB,CAA8B6B,aAA9B,GAA8C,UAAUzB,SAAV,EAAqB;AACjE,MAAIlB,OAAO,CAACkB,SAAD,CAAX,EAAwB;AACtB,QAAIC,KAAK,GAAGkB,iBAAiB,CAAC,IAAD,EAAOnB,SAAP,CAA7B;AACA,QAAIiB,UAAU,GAAG,KAAK7B,WAAtB;;AAEA,QAAIa,KAAK,KAAK,CAAd,EAAiB;AACf;AACAgB,MAAAA,UAAU,CAACR,MAAX,CAAkBR,KAAlB,EAAyB,CAAzB;AACAgB,MAAAA,UAAU,CAACS,OAAX,CAAmB1B,SAAnB;AACD;AACF;AACF,CAXD;AAaA;;;;;;;;;;;;;;;;;;;;;;AAoBAf,mBAAmB,CAACW,SAApB,CAA8BE,GAA9B,GAAoC,UAAUG,KAAV,EAAiB;AACnD;AACA,MAAI,CAACnB,OAAO,CAACmB,KAAD,CAAZ,EAAqB;AACnB,UAAM,IAAIjB,cAAJ,CAAmB,oBAAnB,CAAN;AACD,GAJkD,CAKnD;;;AAEA,SAAO,KAAKI,WAAL,CAAiBa,KAAjB,CAAP;AACD,CARD;AAUA;;;;;AAGAhB,mBAAmB,CAACW,SAApB,CAA8B+B,MAA9B,GAAuC,UAAUC,UAAV,EAAsB;AAC3D,MAAI,CAAC,KAAKpC,IAAV,EAAgB;AACd;AACD;;AAED,MAAIyB,UAAU,GAAG,KAAK7B,WAAtB,CAL2D,CAM3D;AACA;AACA;;AACA,OAAK,IAAI8B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAAU,CAACpB,MAA/B,EAAuC,EAAEqB,CAAzC,EAA4C;AAC1CD,IAAAA,UAAU,CAACC,CAAD,CAAV,CAAcS,MAAd,CAAqBC,UAArB;AACD;AACF,CAZD;AAcA;;;;;AAGA3C,mBAAmB,CAACW,SAApB,CAA8BiC,eAA9B,GAAgD,UAAUD,UAAV,EAAsB;AACpE,MAAIX,UAAU,GAAG,KAAK7B,WAAtB,CADoE,CAEpE;AACA;AACA;;AACA,OAAK,IAAI8B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAAU,CAACpB,MAA/B,EAAuC,EAAEqB,CAAzC,EAA4C;AAC1C,QAAIlB,SAAS,GAAGiB,UAAU,CAACC,CAAD,CAA1B;;AACA,QAAIpC,OAAO,CAACkB,SAAS,CAAC6B,eAAX,CAAX,EAAwC;AACtC7B,MAAAA,SAAS,CAAC6B,eAAV,CAA0BD,UAA1B;AACD;AACF;AACF,CAXD;AAaA;;;;;AAGA3C,mBAAmB,CAACW,SAApB,CAA8BkC,aAA9B,GAA8C,UAAUF,UAAV,EAAsBG,SAAtB,EAAiC;AAC7E,MAAId,UAAU,GAAG,KAAK7B,WAAtB,CAD6E,CAE7E;AACA;AACA;;AACA,OAAK,IAAI8B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAAU,CAACpB,MAA/B,EAAuC,EAAEqB,CAAzC,EAA4C;AAC1C,QAAIlB,SAAS,GAAGiB,UAAU,CAACC,CAAD,CAA1B;;AACA,QAAIpC,OAAO,CAACkB,SAAS,CAAC8B,aAAX,CAAX,EAAsC;AACpC9B,MAAAA,SAAS,CAAC8B,aAAV,CAAwBF,UAAxB,EAAoCG,SAApC;AACD;AACF;AACF,CAXD;AAaA;;;;;AAGA9C,mBAAmB,CAACW,SAApB,CAA8BoC,gBAA9B,GAAiD,UAAUJ,UAAV,EAAsB;AACrE,MAAIX,UAAU,GAAG,KAAK7B,WAAtB,CADqE,CAErE;AACA;AACA;;AACA,OAAK,IAAI8B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAAU,CAACpB,MAA/B,EAAuC,EAAEqB,CAAzC,EAA4C;AAC1C,QAAIlB,SAAS,GAAGiB,UAAU,CAACC,CAAD,CAA1B;;AACA,QAAIpC,OAAO,CAACkB,SAAS,CAACgC,gBAAX,CAAX,EAAyC;AACvChC,MAAAA,SAAS,CAACgC,gBAAV,CAA2BJ,UAA3B;AACD;AACF;AACF,CAXD;AAaA;;;;;;;;;;;;AAUA3C,mBAAmB,CAACW,SAApB,CAA8BqC,WAA9B,GAA4C,YAAY;AACtD,SAAO,KAAP;AACD,CAFD;AAIA;;;;;;;;;;;;;;;;;;;;;;AAoBAhD,mBAAmB,CAACW,SAApB,CAA8BiB,OAA9B,GAAwC,YAAY;AAClD,OAAKG,SAAL;AACA,SAAOjC,aAAa,CAAC,IAAD,CAApB;AACD,CAHD;;AAIA,eAAeE,mBAAf","sourcesContent":["import createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\n\n/**\n * A collection of primitives.  This is most often used with {@link Scene#primitives},\n * but <code>PrimitiveCollection</code> is also a primitive itself so collections can\n * be added to collections forming a hierarchy.\n *\n * @alias PrimitiveCollection\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.show=true] Determines if the primitives in the collection will be shown.\n * @param {Boolean} [options.destroyPrimitives=true] Determines if primitives in the collection are destroyed when they are removed.\n *\n * @example\n * var billboards = new Cesium.BillboardCollection();\n * var labels = new Cesium.LabelCollection();\n *\n * var collection = new Cesium.PrimitiveCollection();\n * collection.add(billboards);\n *\n * scene.primitives.add(collection);  // Add collection\n * scene.primitives.add(labels);      // Add regular primitive\n */\nfunction PrimitiveCollection(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._primitives = [];\n  this._guid = createGuid();\n\n  // Used by the OrderedGroundPrimitiveCollection\n  this._zIndex = undefined;\n\n  /**\n   * Determines if primitives in this collection will be shown.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.show = defaultValue(options.show, true);\n\n  /**\n   * Determines if primitives in the collection are destroyed when they are removed by\n   * {@link PrimitiveCollection#destroy} or  {@link PrimitiveCollection#remove} or implicitly\n   * by {@link PrimitiveCollection#removeAll}.\n   *\n   * @type {Boolean}\n   * @default true\n   *\n   * @example\n   * // Example 1. Primitives are destroyed by default.\n   * var primitives = new Cesium.PrimitiveCollection();\n   * var labels = primitives.add(new Cesium.LabelCollection());\n   * primitives = primitives.destroy();\n   * var b = labels.isDestroyed(); // true\n   *\n   * @example\n   * // Example 2. Do not destroy primitives in a collection.\n   * var primitives = new Cesium.PrimitiveCollection();\n   * primitives.destroyPrimitives = false;\n   * var labels = primitives.add(new Cesium.LabelCollection());\n   * primitives = primitives.destroy();\n   * var b = labels.isDestroyed(); // false\n   * labels = labels.destroy();    // explicitly destroy\n   */\n  this.destroyPrimitives = defaultValue(options.destroyPrimitives, true);\n}\n\nObject.defineProperties(PrimitiveCollection.prototype, {\n  /**\n   * Gets the number of primitives in the collection.\n   *\n   * @memberof PrimitiveCollection.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      return this._primitives.length;\n    },\n  },\n});\n\n/**\n * Adds a primitive to the collection.\n *\n * @param {Object} primitive The primitive to add.\n * @param {Number} [index] the index to add the layer at.  If omitted, the primitive will\n *                         added at the bottom  of all existing primitives.\n * @returns {Object} The primitive added to the collection.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * var billboards = scene.primitives.add(new Cesium.BillboardCollection());\n */\nPrimitiveCollection.prototype.add = function (primitive, index) {\n  var hasIndex = defined(index);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(primitive)) {\n    throw new DeveloperError(\"primitive is required.\");\n  }\n  if (hasIndex) {\n    if (index < 0) {\n      throw new DeveloperError(\"index must be greater than or equal to zero.\");\n    } else if (index > this._primitives.length) {\n      throw new DeveloperError(\n        \"index must be less than or equal to the number of primitives.\"\n      );\n    }\n  }\n  //>>includeEnd('debug');\n\n  var external = (primitive._external = primitive._external || {});\n  var composites = (external._composites = external._composites || {});\n  composites[this._guid] = {\n    collection: this,\n  };\n\n  if (!hasIndex) {\n    this._primitives.push(primitive);\n  } else {\n    this._primitives.splice(index, 0, primitive);\n  }\n\n  return primitive;\n};\n\n/**\n * Removes a primitive from the collection.\n *\n * @param {Object} [primitive] The primitive to remove.\n * @returns {Boolean} <code>true</code> if the primitive was removed; <code>false</code> if the primitive is <code>undefined</code> or was not found in the collection.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * var billboards = scene.primitives.add(new Cesium.BillboardCollection());\n * scene.primitives.remove(billboards);  // Returns true\n *\n * @see PrimitiveCollection#destroyPrimitives\n */\nPrimitiveCollection.prototype.remove = function (primitive) {\n  // PERFORMANCE_IDEA:  We can obviously make this a lot faster.\n  if (this.contains(primitive)) {\n    var index = this._primitives.indexOf(primitive);\n    if (index !== -1) {\n      this._primitives.splice(index, 1);\n\n      delete primitive._external._composites[this._guid];\n\n      if (this.destroyPrimitives) {\n        primitive.destroy();\n      }\n\n      return true;\n    }\n    // else ... this is not possible, I swear.\n  }\n\n  return false;\n};\n\n/**\n * Removes and destroys a primitive, regardless of destroyPrimitives setting.\n * @private\n */\nPrimitiveCollection.prototype.removeAndDestroy = function (primitive) {\n  var removed = this.remove(primitive);\n  if (removed && !this.destroyPrimitives) {\n    primitive.destroy();\n  }\n  return removed;\n};\n\n/**\n * Removes all primitives in the collection.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#destroyPrimitives\n */\nPrimitiveCollection.prototype.removeAll = function () {\n  var primitives = this._primitives;\n  var length = primitives.length;\n  for (var i = 0; i < length; ++i) {\n    delete primitives[i]._external._composites[this._guid];\n    if (this.destroyPrimitives) {\n      primitives[i].destroy();\n    }\n  }\n  this._primitives = [];\n};\n\n/**\n * Determines if this collection contains a primitive.\n *\n * @param {Object} [primitive] The primitive to check for.\n * @returns {Boolean} <code>true</code> if the primitive is in the collection; <code>false</code> if the primitive is <code>undefined</code> or was not found in the collection.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#get\n */\nPrimitiveCollection.prototype.contains = function (primitive) {\n  return !!(\n    defined(primitive) &&\n    primitive._external &&\n    primitive._external._composites &&\n    primitive._external._composites[this._guid]\n  );\n};\n\nfunction getPrimitiveIndex(compositePrimitive, primitive) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!compositePrimitive.contains(primitive)) {\n    throw new DeveloperError(\"primitive is not in this collection.\");\n  }\n  //>>includeEnd('debug');\n\n  return compositePrimitive._primitives.indexOf(primitive);\n}\n\n/**\n * Raises a primitive \"up one\" in the collection.  If all primitives in the collection are drawn\n * on the globe surface, this visually moves the primitive up one.\n *\n * @param {Object} [primitive] The primitive to raise.\n *\n * @exception {DeveloperError} primitive is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#raiseToTop\n * @see PrimitiveCollection#lower\n * @see PrimitiveCollection#lowerToBottom\n */\nPrimitiveCollection.prototype.raise = function (primitive) {\n  if (defined(primitive)) {\n    var index = getPrimitiveIndex(this, primitive);\n    var primitives = this._primitives;\n\n    if (index !== primitives.length - 1) {\n      var p = primitives[index];\n      primitives[index] = primitives[index + 1];\n      primitives[index + 1] = p;\n    }\n  }\n};\n\n/**\n * Raises a primitive to the \"top\" of the collection.  If all primitives in the collection are drawn\n * on the globe surface, this visually moves the primitive to the top.\n *\n * @param {Object} [primitive] The primitive to raise the top.\n *\n * @exception {DeveloperError} primitive is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#raise\n * @see PrimitiveCollection#lower\n * @see PrimitiveCollection#lowerToBottom\n */\nPrimitiveCollection.prototype.raiseToTop = function (primitive) {\n  if (defined(primitive)) {\n    var index = getPrimitiveIndex(this, primitive);\n    var primitives = this._primitives;\n\n    if (index !== primitives.length - 1) {\n      // PERFORMANCE_IDEA:  Could be faster\n      primitives.splice(index, 1);\n      primitives.push(primitive);\n    }\n  }\n};\n\n/**\n * Lowers a primitive \"down one\" in the collection.  If all primitives in the collection are drawn\n * on the globe surface, this visually moves the primitive down one.\n *\n * @param {Object} [primitive] The primitive to lower.\n *\n * @exception {DeveloperError} primitive is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#lowerToBottom\n * @see PrimitiveCollection#raise\n * @see PrimitiveCollection#raiseToTop\n */\nPrimitiveCollection.prototype.lower = function (primitive) {\n  if (defined(primitive)) {\n    var index = getPrimitiveIndex(this, primitive);\n    var primitives = this._primitives;\n\n    if (index !== 0) {\n      var p = primitives[index];\n      primitives[index] = primitives[index - 1];\n      primitives[index - 1] = p;\n    }\n  }\n};\n\n/**\n * Lowers a primitive to the \"bottom\" of the collection.  If all primitives in the collection are drawn\n * on the globe surface, this visually moves the primitive to the bottom.\n *\n * @param {Object} [primitive] The primitive to lower to the bottom.\n *\n * @exception {DeveloperError} primitive is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#lower\n * @see PrimitiveCollection#raise\n * @see PrimitiveCollection#raiseToTop\n */\nPrimitiveCollection.prototype.lowerToBottom = function (primitive) {\n  if (defined(primitive)) {\n    var index = getPrimitiveIndex(this, primitive);\n    var primitives = this._primitives;\n\n    if (index !== 0) {\n      // PERFORMANCE_IDEA:  Could be faster\n      primitives.splice(index, 1);\n      primitives.unshift(primitive);\n    }\n  }\n};\n\n/**\n * Returns the primitive in the collection at the specified index.\n *\n * @param {Number} index The zero-based index of the primitive to return.\n * @returns {Object} The primitive at the <code>index</code>.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * // Toggle the show property of every primitive in the collection.\n * var primitives = scene.primitives;\n * var length = primitives.length;\n * for (var i = 0; i < length; ++i) {\n *   var p = primitives.get(i);\n *   p.show = !p.show;\n * }\n *\n * @see PrimitiveCollection#length\n */\nPrimitiveCollection.prototype.get = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(index)) {\n    throw new DeveloperError(\"index is required.\");\n  }\n  //>>includeEnd('debug');\n\n  return this._primitives[index];\n};\n\n/**\n * @private\n */\nPrimitiveCollection.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n\n  var primitives = this._primitives;\n  // Using primitives.length in the loop is a temporary workaround\n  // to allow quadtree updates to add and remove primitives in\n  // update().  This will be changed to manage added and removed lists.\n  for (var i = 0; i < primitives.length; ++i) {\n    primitives[i].update(frameState);\n  }\n};\n\n/**\n * @private\n */\nPrimitiveCollection.prototype.prePassesUpdate = function (frameState) {\n  var primitives = this._primitives;\n  // Using primitives.length in the loop is a temporary workaround\n  // to allow quadtree updates to add and remove primitives in\n  // update().  This will be changed to manage added and removed lists.\n  for (var i = 0; i < primitives.length; ++i) {\n    var primitive = primitives[i];\n    if (defined(primitive.prePassesUpdate)) {\n      primitive.prePassesUpdate(frameState);\n    }\n  }\n};\n\n/**\n * @private\n */\nPrimitiveCollection.prototype.updateForPass = function (frameState, passState) {\n  var primitives = this._primitives;\n  // Using primitives.length in the loop is a temporary workaround\n  // to allow quadtree updates to add and remove primitives in\n  // update().  This will be changed to manage added and removed lists.\n  for (var i = 0; i < primitives.length; ++i) {\n    var primitive = primitives[i];\n    if (defined(primitive.updateForPass)) {\n      primitive.updateForPass(frameState, passState);\n    }\n  }\n};\n\n/**\n * @private\n */\nPrimitiveCollection.prototype.postPassesUpdate = function (frameState) {\n  var primitives = this._primitives;\n  // Using primitives.length in the loop is a temporary workaround\n  // to allow quadtree updates to add and remove primitives in\n  // update().  This will be changed to manage added and removed lists.\n  for (var i = 0; i < primitives.length; ++i) {\n    var primitive = primitives[i];\n    if (defined(primitive.postPassesUpdate)) {\n      primitive.postPassesUpdate(frameState);\n    }\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see PrimitiveCollection#destroy\n */\nPrimitiveCollection.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by each primitive in this collection.  Explicitly destroying this\n * collection allows for deterministic release of WebGL resources, instead of relying on the garbage\n * collector to destroy this collection.\n * <br /><br />\n * Since destroying a collection destroys all the contained primitives, only destroy a collection\n * when you are sure no other code is still using any of the contained primitives.\n * <br /><br />\n * Once this collection is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * primitives = primitives && primitives.destroy();\n *\n * @see PrimitiveCollection#isDestroyed\n */\nPrimitiveCollection.prototype.destroy = function () {\n  this.removeAll();\n  return destroyObject(this);\n};\nexport default PrimitiveCollection;\n"]},"metadata":{},"sourceType":"module"}