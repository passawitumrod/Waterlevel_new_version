{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n/**\n * Describes a polyline defined as the path made by an {@link Entity} as it moves over time.\n *\n * @alias PathGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the path.\n * @param {Property} [options.leadTime] A Property specifying the number of seconds in front the object to show.\n * @param {Property} [options.trailTime] A Property specifying the number of seconds behind of the object to show.\n * @param {Property} [options.width=1.0] A numeric Property specifying the width in pixels.\n * @param {Property} [options.resolution=60] A numeric Property specifying the maximum number of seconds to step when sampling the position.\n * @param {MaterialProperty} [options.material=Color.WHITE] A Property specifying the material used to draw the path.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this path will be displayed.\n */\n\nfunction PathGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._leadTime = undefined;\n  this._leadTimeSubscription = undefined;\n  this._trailTime = undefined;\n  this._trailTimeSubscription = undefined;\n  this._width = undefined;\n  this._widthSubscription = undefined;\n  this._resolution = undefined;\n  this._resolutionSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(PathGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof PathGraphics.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the path.\n   * @memberof PathGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the number of seconds in front of the object to show.\n   * @memberof PathGraphics.prototype\n   * @type {Property}\n   */\n  leadTime: createPropertyDescriptor(\"leadTime\"),\n\n  /**\n   * Gets or sets the Property specifying the number of seconds behind the object to show.\n   * @memberof PathGraphics.prototype\n   * @type {Property}\n   */\n  trailTime: createPropertyDescriptor(\"trailTime\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width in pixels.\n   * @memberof PathGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  width: createPropertyDescriptor(\"width\"),\n\n  /**\n   * Gets or sets the Property specifying the maximum number of seconds to step when sampling the position.\n   * @memberof PathGraphics.prototype\n   * @type {Property}\n   * @default 60\n   */\n  resolution: createPropertyDescriptor(\"resolution\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to draw the path.\n   * @memberof PathGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this path will be displayed.\n   * @memberof PathGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\"distanceDisplayCondition\")\n});\n/**\n * Duplicates this instance.\n *\n * @param {PathGraphics} [result] The object onto which to store the result.\n * @returns {PathGraphics} The modified result parameter or a new instance if one was not provided.\n */\n\nPathGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new PathGraphics(this);\n  }\n\n  result.show = this.show;\n  result.leadTime = this.leadTime;\n  result.trailTime = this.trailTime;\n  result.width = this.width;\n  result.resolution = this.resolution;\n  result.material = this.material;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  return result;\n};\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {PathGraphics} source The object to be merged into this object.\n */\n\n\nPathGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  } //>>includeEnd('debug');\n\n\n  this.show = defaultValue(this.show, source.show);\n  this.leadTime = defaultValue(this.leadTime, source.leadTime);\n  this.trailTime = defaultValue(this.trailTime, source.trailTime);\n  this.width = defaultValue(this.width, source.width);\n  this.resolution = defaultValue(this.resolution, source.resolution);\n  this.material = defaultValue(this.material, source.material);\n  this.distanceDisplayCondition = defaultValue(this.distanceDisplayCondition, source.distanceDisplayCondition);\n};\n\nexport default PathGraphics;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/PathGraphics.js"],"names":["defaultValue","defined","DeveloperError","Event","createMaterialPropertyDescriptor","createPropertyDescriptor","PathGraphics","options","_definitionChanged","_show","undefined","_showSubscription","_leadTime","_leadTimeSubscription","_trailTime","_trailTimeSubscription","_width","_widthSubscription","_resolution","_resolutionSubscription","_material","_materialSubscription","_distanceDisplayCondition","_distanceDisplayConditionSubscription","merge","EMPTY_OBJECT","Object","defineProperties","prototype","definitionChanged","get","show","leadTime","trailTime","width","resolution","material","distanceDisplayCondition","clone","result","source"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * Describes a polyline defined as the path made by an {@link Entity} as it moves over time.\n *\n * @alias PathGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the path.\n * @param {Property} [options.leadTime] A Property specifying the number of seconds in front the object to show.\n * @param {Property} [options.trailTime] A Property specifying the number of seconds behind of the object to show.\n * @param {Property} [options.width=1.0] A numeric Property specifying the width in pixels.\n * @param {Property} [options.resolution=60] A numeric Property specifying the maximum number of seconds to step when sampling the position.\n * @param {MaterialProperty} [options.material=Color.WHITE] A Property specifying the material used to draw the path.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this path will be displayed.\n */\nfunction PathGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._leadTime = undefined;\n  this._leadTimeSubscription = undefined;\n  this._trailTime = undefined;\n  this._trailTimeSubscription = undefined;\n  this._width = undefined;\n  this._widthSubscription = undefined;\n  this._resolution = undefined;\n  this._resolutionSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(PathGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof PathGraphics.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the path.\n   * @memberof PathGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the number of seconds in front of the object to show.\n   * @memberof PathGraphics.prototype\n   * @type {Property}\n   */\n  leadTime: createPropertyDescriptor(\"leadTime\"),\n\n  /**\n   * Gets or sets the Property specifying the number of seconds behind the object to show.\n   * @memberof PathGraphics.prototype\n   * @type {Property}\n   */\n  trailTime: createPropertyDescriptor(\"trailTime\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width in pixels.\n   * @memberof PathGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  width: createPropertyDescriptor(\"width\"),\n\n  /**\n   * Gets or sets the Property specifying the maximum number of seconds to step when sampling the position.\n   * @memberof PathGraphics.prototype\n   * @type {Property}\n   * @default 60\n   */\n  resolution: createPropertyDescriptor(\"resolution\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to draw the path.\n   * @memberof PathGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this path will be displayed.\n   * @memberof PathGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {PathGraphics} [result] The object onto which to store the result.\n * @returns {PathGraphics} The modified result parameter or a new instance if one was not provided.\n */\nPathGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new PathGraphics(this);\n  }\n  result.show = this.show;\n  result.leadTime = this.leadTime;\n  result.trailTime = this.trailTime;\n  result.width = this.width;\n  result.resolution = this.resolution;\n  result.material = this.material;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {PathGraphics} source The object to be merged into this object.\n */\nPathGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.leadTime = defaultValue(this.leadTime, source.leadTime);\n  this.trailTime = defaultValue(this.trailTime, source.trailTime);\n  this.width = defaultValue(this.width, source.width);\n  this.resolution = defaultValue(this.resolution, source.resolution);\n  this.material = defaultValue(this.material, source.material);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n};\nexport default PathGraphics;\n"]},"metadata":{},"sourceType":"module"}