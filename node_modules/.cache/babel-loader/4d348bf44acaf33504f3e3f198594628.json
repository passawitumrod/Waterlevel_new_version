{"ast":null,"code":"import when from \"../ThirdParty/when.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Event from \"./Event.js\";\nimport GeographicTilingScheme from \"./GeographicTilingScheme.js\";\nimport HeightmapTerrainData from \"./HeightmapTerrainData.js\";\nimport TerrainProvider from \"./TerrainProvider.js\";\n/**\n * A very simple {@link TerrainProvider} that produces geometry by tessellating an ellipsoidal\n * surface.\n *\n * @alias EllipsoidTerrainProvider\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {TilingScheme} [options.tilingScheme] The tiling scheme specifying how the ellipsoidal\n * surface is broken into tiles.  If this parameter is not provided, a {@link GeographicTilingScheme}\n * is used.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n * this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n * parameter is specified, the WGS84 ellipsoid is used.\n *\n * @see TerrainProvider\n */\n\nfunction EllipsoidTerrainProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._tilingScheme = options.tilingScheme;\n\n  if (!defined(this._tilingScheme)) {\n    this._tilingScheme = new GeographicTilingScheme({\n      ellipsoid: defaultValue(options.ellipsoid, Ellipsoid.WGS84)\n    });\n  } // Note: the 64 below does NOT need to match the actual vertex dimensions, because\n  // the ellipsoid is significantly smoother than actual terrain.\n\n\n  this._levelZeroMaximumGeometricError = TerrainProvider.getEstimatedLevelZeroGeometricErrorForAHeightmap(this._tilingScheme.ellipsoid, 64, this._tilingScheme.getNumberOfXTilesAtLevel(0));\n  this._errorEvent = new Event();\n  this._readyPromise = when.resolve(true);\n}\n\nObject.defineProperties(EllipsoidTerrainProvider.prototype, {\n  /**\n   * Gets an event that is raised when the terrain provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: function get() {\n      return this._errorEvent;\n    }\n  },\n\n  /**\n   * Gets the credit to display when this terrain provider is active.  Typically this is used to credit\n   * the source of the terrain.  This function should not be called before {@link EllipsoidTerrainProvider#ready} returns true.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {Credit}\n   */\n  credit: {\n    get: function get() {\n      return undefined;\n    }\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link EllipsoidTerrainProvider#ready} returns true.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {GeographicTilingScheme}\n   */\n  tilingScheme: {\n    get: function get() {\n      return this._tilingScheme;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {Boolean}\n   */\n  ready: {\n    get: function get() {\n      return true;\n    }\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function get() {\n      return this._readyPromise;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider includes a water mask.  The water mask\n   * indicates which areas of the globe are water rather than land, so they can be rendered\n   * as a reflective surface with animated waves.  This function should not be\n   * called before {@link EllipsoidTerrainProvider#ready} returns true.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {Boolean}\n   */\n  hasWaterMask: {\n    get: function get() {\n      return false;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the requested tiles include vertex normals.\n   * This function should not be called before {@link EllipsoidTerrainProvider#ready} returns true.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {Boolean}\n   */\n  hasVertexNormals: {\n    get: function get() {\n      return false;\n    }\n  }\n});\n/**\n * Requests the geometry for a given tile.  This function should not be called before\n * {@link TerrainProvider#ready} returns true.  The result includes terrain\n * data and indicates that all child tiles are available.\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @param {Request} [request] The request object. Intended for internal use only.\n *\n * @returns {Promise.<TerrainData>|undefined} A promise for the requested geometry.  If this method\n *          returns undefined instead of a promise, it is an indication that too many requests are already\n *          pending and the request will be retried later.\n */\n\nEllipsoidTerrainProvider.prototype.requestTileGeometry = function (x, y, level, request) {\n  var width = 16;\n  var height = 16;\n  return when.resolve(new HeightmapTerrainData({\n    buffer: new Uint8Array(width * height),\n    width: width,\n    height: height\n  }));\n};\n/**\n * Gets the maximum geometric error allowed in a tile at a given level.\n *\n * @param {Number} level The tile level for which to get the maximum geometric error.\n * @returns {Number} The maximum geometric error.\n */\n\n\nEllipsoidTerrainProvider.prototype.getLevelMaximumGeometricError = function (level) {\n  return this._levelZeroMaximumGeometricError / (1 << level);\n};\n/**\n * Determines whether data for a tile is available to be loaded.\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {Boolean} Undefined if not supported, otherwise true or false.\n */\n\n\nEllipsoidTerrainProvider.prototype.getTileDataAvailable = function (x, y, level) {\n  return undefined;\n};\n/**\n * Makes sure we load availability data for a tile\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {undefined|Promise} Undefined if nothing need to be loaded or a Promise that resolves when all required tiles are loaded\n */\n\n\nEllipsoidTerrainProvider.prototype.loadTileDataAvailability = function (x, y, level) {\n  return undefined;\n};\n\nexport default EllipsoidTerrainProvider;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/EllipsoidTerrainProvider.js"],"names":["when","defaultValue","defined","Ellipsoid","Event","GeographicTilingScheme","HeightmapTerrainData","TerrainProvider","EllipsoidTerrainProvider","options","EMPTY_OBJECT","_tilingScheme","tilingScheme","ellipsoid","WGS84","_levelZeroMaximumGeometricError","getEstimatedLevelZeroGeometricErrorForAHeightmap","getNumberOfXTilesAtLevel","_errorEvent","_readyPromise","resolve","Object","defineProperties","prototype","errorEvent","get","credit","undefined","ready","readyPromise","hasWaterMask","hasVertexNormals","requestTileGeometry","x","y","level","request","width","height","buffer","Uint8Array","getLevelMaximumGeometricError","getTileDataAvailable","loadTileDataAvailability"],"mappings":"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","sourcesContent":["import when from \"../ThirdParty/when.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Event from \"./Event.js\";\nimport GeographicTilingScheme from \"./GeographicTilingScheme.js\";\nimport HeightmapTerrainData from \"./HeightmapTerrainData.js\";\nimport TerrainProvider from \"./TerrainProvider.js\";\n\n/**\n * A very simple {@link TerrainProvider} that produces geometry by tessellating an ellipsoidal\n * surface.\n *\n * @alias EllipsoidTerrainProvider\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {TilingScheme} [options.tilingScheme] The tiling scheme specifying how the ellipsoidal\n * surface is broken into tiles.  If this parameter is not provided, a {@link GeographicTilingScheme}\n * is used.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n * this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n * parameter is specified, the WGS84 ellipsoid is used.\n *\n * @see TerrainProvider\n */\nfunction EllipsoidTerrainProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._tilingScheme = options.tilingScheme;\n  if (!defined(this._tilingScheme)) {\n    this._tilingScheme = new GeographicTilingScheme({\n      ellipsoid: defaultValue(options.ellipsoid, Ellipsoid.WGS84),\n    });\n  }\n\n  // Note: the 64 below does NOT need to match the actual vertex dimensions, because\n  // the ellipsoid is significantly smoother than actual terrain.\n  this._levelZeroMaximumGeometricError = TerrainProvider.getEstimatedLevelZeroGeometricErrorForAHeightmap(\n    this._tilingScheme.ellipsoid,\n    64,\n    this._tilingScheme.getNumberOfXTilesAtLevel(0)\n  );\n\n  this._errorEvent = new Event();\n  this._readyPromise = when.resolve(true);\n}\n\nObject.defineProperties(EllipsoidTerrainProvider.prototype, {\n  /**\n   * Gets an event that is raised when the terrain provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this terrain provider is active.  Typically this is used to credit\n   * the source of the terrain.  This function should not be called before {@link EllipsoidTerrainProvider#ready} returns true.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {Credit}\n   */\n  credit: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link EllipsoidTerrainProvider#ready} returns true.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {GeographicTilingScheme}\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {Boolean}\n   */\n  ready: {\n    get: function () {\n      return true;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider includes a water mask.  The water mask\n   * indicates which areas of the globe are water rather than land, so they can be rendered\n   * as a reflective surface with animated waves.  This function should not be\n   * called before {@link EllipsoidTerrainProvider#ready} returns true.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {Boolean}\n   */\n  hasWaterMask: {\n    get: function () {\n      return false;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the requested tiles include vertex normals.\n   * This function should not be called before {@link EllipsoidTerrainProvider#ready} returns true.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {Boolean}\n   */\n  hasVertexNormals: {\n    get: function () {\n      return false;\n    },\n  },\n});\n\n/**\n * Requests the geometry for a given tile.  This function should not be called before\n * {@link TerrainProvider#ready} returns true.  The result includes terrain\n * data and indicates that all child tiles are available.\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @param {Request} [request] The request object. Intended for internal use only.\n *\n * @returns {Promise.<TerrainData>|undefined} A promise for the requested geometry.  If this method\n *          returns undefined instead of a promise, it is an indication that too many requests are already\n *          pending and the request will be retried later.\n */\nEllipsoidTerrainProvider.prototype.requestTileGeometry = function (\n  x,\n  y,\n  level,\n  request\n) {\n  var width = 16;\n  var height = 16;\n  return when.resolve(\n    new HeightmapTerrainData({\n      buffer: new Uint8Array(width * height),\n      width: width,\n      height: height,\n    })\n  );\n};\n\n/**\n * Gets the maximum geometric error allowed in a tile at a given level.\n *\n * @param {Number} level The tile level for which to get the maximum geometric error.\n * @returns {Number} The maximum geometric error.\n */\nEllipsoidTerrainProvider.prototype.getLevelMaximumGeometricError = function (\n  level\n) {\n  return this._levelZeroMaximumGeometricError / (1 << level);\n};\n\n/**\n * Determines whether data for a tile is available to be loaded.\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {Boolean} Undefined if not supported, otherwise true or false.\n */\nEllipsoidTerrainProvider.prototype.getTileDataAvailable = function (\n  x,\n  y,\n  level\n) {\n  return undefined;\n};\n\n/**\n * Makes sure we load availability data for a tile\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {undefined|Promise} Undefined if nothing need to be loaded or a Promise that resolves when all required tiles are loaded\n */\nEllipsoidTerrainProvider.prototype.loadTileDataAvailability = function (\n  x,\n  y,\n  level\n) {\n  return undefined;\n};\nexport default EllipsoidTerrainProvider;\n"]},"metadata":{},"sourceType":"module"}