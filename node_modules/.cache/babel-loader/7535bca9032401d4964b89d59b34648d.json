{"ast":null,"code":"import knockout from \"../ThirdParty/knockout.js\";\n/**\n * Subscribe to a Knockout observable ES5 property, and immediately fire\n * the callback with the current value of the property.\n *\n * @private\n *\n * @exports subscribeAndEvaluate\n *\n * @param {Object} owner The object containing the observable property.\n * @param {String} observablePropertyName The name of the observable property.\n * @param {Function} callback The callback function.\n * @param {Object} [target] The value of this in the callback function.\n * @param {String} [event='change'] The name of the event to receive notification for.\n * @returns The subscription object from Knockout which can be used to dispose the subscription later.\n */\n\nfunction subscribeAndEvaluate(owner, observablePropertyName, callback, target, event) {\n  callback.call(target, owner[observablePropertyName]);\n  return knockout.getObservable(owner, observablePropertyName).subscribe(callback, target, event);\n}\n\nexport default subscribeAndEvaluate;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Widgets/subscribeAndEvaluate.js"],"names":["knockout","subscribeAndEvaluate","owner","observablePropertyName","callback","target","event","call","getObservable","subscribe"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,2BAArB;AAEA;;;;;;;;;;;;;;;;AAeA,SAASC,oBAAT,CACEC,KADF,EAEEC,sBAFF,EAGEC,QAHF,EAIEC,MAJF,EAKEC,KALF,EAME;AACAF,EAAAA,QAAQ,CAACG,IAAT,CAAcF,MAAd,EAAsBH,KAAK,CAACC,sBAAD,CAA3B;AACA,SAAOH,QAAQ,CACZQ,aADI,CACUN,KADV,EACiBC,sBADjB,EAEJM,SAFI,CAEML,QAFN,EAEgBC,MAFhB,EAEwBC,KAFxB,CAAP;AAGD;;AACD,eAAeL,oBAAf","sourcesContent":["import knockout from \"../ThirdParty/knockout.js\";\n\n/**\n * Subscribe to a Knockout observable ES5 property, and immediately fire\n * the callback with the current value of the property.\n *\n * @private\n *\n * @exports subscribeAndEvaluate\n *\n * @param {Object} owner The object containing the observable property.\n * @param {String} observablePropertyName The name of the observable property.\n * @param {Function} callback The callback function.\n * @param {Object} [target] The value of this in the callback function.\n * @param {String} [event='change'] The name of the event to receive notification for.\n * @returns The subscription object from Knockout which can be used to dispose the subscription later.\n */\nfunction subscribeAndEvaluate(\n  owner,\n  observablePropertyName,\n  callback,\n  target,\n  event\n) {\n  callback.call(target, owner[observablePropertyName]);\n  return knockout\n    .getObservable(owner, observablePropertyName)\n    .subscribe(callback, target, event);\n}\nexport default subscribeAndEvaluate;\n"]},"metadata":{},"sourceType":"module"}