{"ast":null,"code":"import DeveloperError from \"../Core/DeveloperError.js\";\n/**\n * A Command is a function with an extra <code>canExecute</code> observable property to determine\n * whether the command can be executed.  When executed, a Command function will check the\n * value of <code>canExecute</code> and throw if false.\n *\n * This type describes an interface and is not intended to be instantiated directly.\n * See {@link createCommand} to create a command from a function.\n *\n * @alias Command\n * @constructor\n */\n\nfunction Command() {\n  /**\n   * Gets whether this command can currently be executed.  This property is observable.\n   * @type {Boolean}\n   * @default undefined\n   */\n  this.canExecute = undefined;\n  /**\n   * Gets an event which is raised before the command executes, the event\n   * is raised with an object containing two properties: a <code>cancel</code> property,\n   * which if set to false by the listener will prevent the command from being executed, and\n   * an <code>args</code> property, which is the array of arguments being passed to the command.\n   * @type {Event}\n   * @default undefined\n   */\n\n  this.beforeExecute = undefined;\n  /**\n   * Gets an event which is raised after the command executes, the event\n   * is raised with the return value of the command as its only parameter.\n   * @type {Event}\n   * @default undefined\n   */\n\n  this.afterExecute = undefined;\n  DeveloperError.throwInstantiationError();\n}\n\nexport default Command;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Widgets/Command.js"],"names":["DeveloperError","Command","canExecute","undefined","beforeExecute","afterExecute","throwInstantiationError"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,2BAA3B;AAEA;;;;;;;;;;;;AAWA,SAASC,OAAT,GAAmB;AACjB;;;;;AAKA,OAAKC,UAAL,GAAkBC,SAAlB;AAEA;;;;;;;;;AAQA,OAAKC,aAAL,GAAqBD,SAArB;AAEA;;;;;;;AAMA,OAAKE,YAAL,GAAoBF,SAApB;AAEAH,EAAAA,cAAc,CAACM,uBAAf;AACD;;AACD,eAAeL,OAAf","sourcesContent":["import DeveloperError from \"../Core/DeveloperError.js\";\n\n/**\n * A Command is a function with an extra <code>canExecute</code> observable property to determine\n * whether the command can be executed.  When executed, a Command function will check the\n * value of <code>canExecute</code> and throw if false.\n *\n * This type describes an interface and is not intended to be instantiated directly.\n * See {@link createCommand} to create a command from a function.\n *\n * @alias Command\n * @constructor\n */\nfunction Command() {\n  /**\n   * Gets whether this command can currently be executed.  This property is observable.\n   * @type {Boolean}\n   * @default undefined\n   */\n  this.canExecute = undefined;\n\n  /**\n   * Gets an event which is raised before the command executes, the event\n   * is raised with an object containing two properties: a <code>cancel</code> property,\n   * which if set to false by the listener will prevent the command from being executed, and\n   * an <code>args</code> property, which is the array of arguments being passed to the command.\n   * @type {Event}\n   * @default undefined\n   */\n  this.beforeExecute = undefined;\n\n  /**\n   * Gets an event which is raised after the command executes, the event\n   * is raised with the return value of the command as its only parameter.\n   * @type {Event}\n   * @default undefined\n   */\n  this.afterExecute = undefined;\n\n  DeveloperError.throwInstantiationError();\n}\nexport default Command;\n"]},"metadata":{},"sourceType":"module"}