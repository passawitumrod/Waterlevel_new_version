{"ast":null,"code":"var tmp = {};\n/*!\n * Autolinker.js\n * 3.11.0\n *\n * Copyright(c) 2019 Gregory Jacobs <greg@greg-jacobs.com>\n * MIT License\n *\n * https://github.com/gregjacobs/Autolinker.js\n */\n\n(function (global, factory) {\n  global.Autolinker = factory();\n})(tmp, function () {\n  'use strict';\n  /**\n   * Assigns (shallow copies) the properties of `src` onto `dest`, if the\n   * corresponding property on `dest` === `undefined`.\n   *\n   * @param {Object} dest The destination object.\n   * @param {Object} src The source object.\n   * @return {Object} The destination object (`dest`)\n   */\n\n  function defaults(dest, src) {\n    for (var prop in src) {\n      if (src.hasOwnProperty(prop) && dest[prop] === undefined) {\n        dest[prop] = src[prop];\n      }\n    }\n\n    return dest;\n  }\n  /**\n   * Truncates the `str` at `len - ellipsisChars.length`, and adds the `ellipsisChars` to the\n   * end of the string (by default, two periods: '..'). If the `str` length does not exceed\n   * `len`, the string will be returned unchanged.\n   *\n   * @param {String} str The string to truncate and add an ellipsis to.\n   * @param {Number} truncateLen The length to truncate the string at.\n   * @param {String} [ellipsisChars=...] The ellipsis character(s) to add to the end of `str`\n   *   when truncated. Defaults to '...'\n   */\n\n\n  function ellipsis(str, truncateLen, ellipsisChars) {\n    var ellipsisLength;\n\n    if (str.length > truncateLen) {\n      if (ellipsisChars == null) {\n        ellipsisChars = '&hellip;';\n        ellipsisLength = 3;\n      } else {\n        ellipsisLength = ellipsisChars.length;\n      }\n\n      str = str.substring(0, truncateLen - ellipsisLength) + ellipsisChars;\n    }\n\n    return str;\n  }\n  /**\n   * Supports `Array.prototype.indexOf()` functionality for old IE (IE8 and below).\n   *\n   * @param {Array} arr The array to find an element of.\n   * @param {*} element The element to find in the array, and return the index of.\n   * @return {Number} The index of the `element`, or -1 if it was not found.\n   */\n\n\n  function indexOf(arr, element) {\n    if (Array.prototype.indexOf) {\n      return arr.indexOf(element);\n    } else {\n      for (var i = 0, len = arr.length; i < len; i++) {\n        if (arr[i] === element) return i;\n      }\n\n      return -1;\n    }\n  }\n  /**\n   * Removes array elements based on a filtering function. Mutates the input\n   * array.\n   *\n   * Using this instead of the ES5 Array.prototype.filter() function, to allow\n   * Autolinker compatibility with IE8, and also to prevent creating many new\n   * arrays in memory for filtering.\n   *\n   * @param {Array} arr The array to remove elements from. This array is\n   *   mutated.\n   * @param {Function} fn A function which should return `true` to\n   *   remove an element.\n   * @return {Array} The mutated input `arr`.\n   */\n\n\n  function remove(arr, fn) {\n    for (var i = arr.length - 1; i >= 0; i--) {\n      if (fn(arr[i]) === true) {\n        arr.splice(i, 1);\n      }\n    }\n  }\n  /**\n   * Performs the functionality of what modern browsers do when `String.prototype.split()` is called\n   * with a regular expression that contains capturing parenthesis.\n   *\n   * For example:\n   *\n   *     // Modern browsers:\n   *     \"a,b,c\".split( /(,)/ );  // --> [ 'a', ',', 'b', ',', 'c' ]\n   *\n   *     // Old IE (including IE8):\n   *     \"a,b,c\".split( /(,)/ );  // --> [ 'a', 'b', 'c' ]\n   *\n   * This method emulates the functionality of modern browsers for the old IE case.\n   *\n   * @param {String} str The string to split.\n   * @param {RegExp} splitRegex The regular expression to split the input `str` on. The splitting\n   *   character(s) will be spliced into the array, as in the \"modern browsers\" example in the\n   *   description of this method.\n   *   Note #1: the supplied regular expression **must** have the 'g' flag specified.\n   *   Note #2: for simplicity's sake, the regular expression does not need\n   *   to contain capturing parenthesis - it will be assumed that any match has them.\n   * @return {String[]} The split array of strings, with the splitting character(s) included.\n   */\n\n\n  function splitAndCapture(str, splitRegex) {\n    if (!splitRegex.global) throw new Error(\"`splitRegex` must have the 'g' flag set\");\n    var result = [],\n        lastIdx = 0,\n        match;\n\n    while (match = splitRegex.exec(str)) {\n      result.push(str.substring(lastIdx, match.index));\n      result.push(match[0]); // push the splitting char(s)\n\n      lastIdx = match.index + match[0].length;\n    }\n\n    result.push(str.substring(lastIdx));\n    return result;\n  }\n  /**\n   * Function that should never be called but is used to check that every\n   * enum value is handled using TypeScript's 'never' type.\n   */\n\n\n  function throwUnhandledCaseError(theValue) {\n    throw new Error(\"Unhandled case for value: '\" + theValue + \"'\");\n  }\n  /**\n   * @class Autolinker.HtmlTag\n   * @extends Object\n   *\n   * Represents an HTML tag, which can be used to easily build/modify HTML tags programmatically.\n   *\n   * Autolinker uses this abstraction to create HTML tags, and then write them out as strings. You may also use\n   * this class in your code, especially within a {@link Autolinker#replaceFn replaceFn}.\n   *\n   * ## Examples\n   *\n   * Example instantiation:\n   *\n   *     var tag = new Autolinker.HtmlTag( {\n   *         tagName : 'a',\n   *         attrs   : { 'href': 'http://google.com', 'class': 'external-link' },\n   *         innerHtml : 'Google'\n   *     } );\n   *\n   *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n   *\n   *     // Individual accessor methods\n   *     tag.getTagName();                 // 'a'\n   *     tag.getAttr( 'href' );            // 'http://google.com'\n   *     tag.hasClass( 'external-link' );  // true\n   *\n   *\n   * Using mutator methods (which may be used in combination with instantiation config properties):\n   *\n   *     var tag = new Autolinker.HtmlTag();\n   *     tag.setTagName( 'a' );\n   *     tag.setAttr( 'href', 'http://google.com' );\n   *     tag.addClass( 'external-link' );\n   *     tag.setInnerHtml( 'Google' );\n   *\n   *     tag.getTagName();                 // 'a'\n   *     tag.getAttr( 'href' );            // 'http://google.com'\n   *     tag.hasClass( 'external-link' );  // true\n   *\n   *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n   *\n   *\n   * ## Example use within a {@link Autolinker#replaceFn replaceFn}\n   *\n   *     var html = Autolinker.link( \"Test google.com\", {\n   *         replaceFn : function( match ) {\n   *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance, configured with the Match's href and anchor text\n   *             tag.setAttr( 'rel', 'nofollow' );\n   *\n   *             return tag;\n   *         }\n   *     } );\n   *\n   *     // generated html:\n   *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n   *\n   *\n   * ## Example use with a new tag for the replacement\n   *\n   *     var html = Autolinker.link( \"Test google.com\", {\n   *         replaceFn : function( match ) {\n   *             var tag = new Autolinker.HtmlTag( {\n   *                 tagName : 'button',\n   *                 attrs   : { 'title': 'Load URL: ' + match.getAnchorHref() },\n   *                 innerHtml : 'Load URL: ' + match.getAnchorText()\n   *             } );\n   *\n   *             return tag;\n   *         }\n   *     } );\n   *\n   *     // generated html:\n   *     //   Test <button title=\"Load URL: http://google.com\">Load URL: google.com</button>\n   */\n\n\n  var HtmlTag =\n  /** @class */\n  function () {\n    /**\n     * @method constructor\n     * @param {Object} [cfg] The configuration properties for this class, in an Object (map)\n     */\n    function HtmlTag(cfg) {\n      if (cfg === void 0) {\n        cfg = {};\n      }\n      /**\n       * @cfg {String} tagName\n       *\n       * The tag name. Ex: 'a', 'button', etc.\n       *\n       * Not required at instantiation time, but should be set using {@link #setTagName} before {@link #toAnchorString}\n       * is executed.\n       */\n\n\n      this.tagName = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {Object.<String, String>} attrs\n       *\n       * An key/value Object (map) of attributes to create the tag with. The keys are the attribute names, and the\n       * values are the attribute values.\n       */\n\n      this.attrs = {}; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {String} innerHTML\n       *\n       * The inner HTML for the tag.\n       */\n\n      this.innerHTML = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @protected\n       * @property {RegExp} whitespaceRegex\n       *\n       * Regular expression used to match whitespace in a string of CSS classes.\n       */\n\n      this.whitespaceRegex = /\\s+/; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      this.tagName = cfg.tagName || '';\n      this.attrs = cfg.attrs || {};\n      this.innerHTML = cfg.innerHtml || cfg.innerHTML || ''; // accept either the camelCased form or the fully capitalized acronym as in the DOM\n    }\n    /**\n     * Sets the tag name that will be used to generate the tag with.\n     *\n     * @param {String} tagName\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n\n\n    HtmlTag.prototype.setTagName = function (tagName) {\n      this.tagName = tagName;\n      return this;\n    };\n    /**\n     * Retrieves the tag name.\n     *\n     * @return {String}\n     */\n\n\n    HtmlTag.prototype.getTagName = function () {\n      return this.tagName || '';\n    };\n    /**\n     * Sets an attribute on the HtmlTag.\n     *\n     * @param {String} attrName The attribute name to set.\n     * @param {String} attrValue The attribute value to set.\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n\n\n    HtmlTag.prototype.setAttr = function (attrName, attrValue) {\n      var tagAttrs = this.getAttrs();\n      tagAttrs[attrName] = attrValue;\n      return this;\n    };\n    /**\n     * Retrieves an attribute from the HtmlTag. If the attribute does not exist, returns `undefined`.\n     *\n     * @param {String} attrName The attribute name to retrieve.\n     * @return {String} The attribute's value, or `undefined` if it does not exist on the HtmlTag.\n     */\n\n\n    HtmlTag.prototype.getAttr = function (attrName) {\n      return this.getAttrs()[attrName];\n    };\n    /**\n     * Sets one or more attributes on the HtmlTag.\n     *\n     * @param {Object.<String, String>} attrs A key/value Object (map) of the attributes to set.\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n\n\n    HtmlTag.prototype.setAttrs = function (attrs) {\n      Object.assign(this.getAttrs(), attrs);\n      return this;\n    };\n    /**\n     * Retrieves the attributes Object (map) for the HtmlTag.\n     *\n     * @return {Object.<String, String>} A key/value object of the attributes for the HtmlTag.\n     */\n\n\n    HtmlTag.prototype.getAttrs = function () {\n      return this.attrs || (this.attrs = {});\n    };\n    /**\n     * Sets the provided `cssClass`, overwriting any current CSS classes on the HtmlTag.\n     *\n     * @param {String} cssClass One or more space-separated CSS classes to set (overwrite).\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n\n\n    HtmlTag.prototype.setClass = function (cssClass) {\n      return this.setAttr('class', cssClass);\n    };\n    /**\n     * Convenience method to add one or more CSS classes to the HtmlTag. Will not add duplicate CSS classes.\n     *\n     * @param {String} cssClass One or more space-separated CSS classes to add.\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n\n\n    HtmlTag.prototype.addClass = function (cssClass) {\n      var classAttr = this.getClass(),\n          whitespaceRegex = this.whitespaceRegex,\n          classes = !classAttr ? [] : classAttr.split(whitespaceRegex),\n          newClasses = cssClass.split(whitespaceRegex),\n          newClass;\n\n      while (newClass = newClasses.shift()) {\n        if (indexOf(classes, newClass) === -1) {\n          classes.push(newClass);\n        }\n      }\n\n      this.getAttrs()['class'] = classes.join(\" \");\n      return this;\n    };\n    /**\n     * Convenience method to remove one or more CSS classes from the HtmlTag.\n     *\n     * @param {String} cssClass One or more space-separated CSS classes to remove.\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n\n\n    HtmlTag.prototype.removeClass = function (cssClass) {\n      var classAttr = this.getClass(),\n          whitespaceRegex = this.whitespaceRegex,\n          classes = !classAttr ? [] : classAttr.split(whitespaceRegex),\n          removeClasses = cssClass.split(whitespaceRegex),\n          removeClass;\n\n      while (classes.length && (removeClass = removeClasses.shift())) {\n        var idx = indexOf(classes, removeClass);\n\n        if (idx !== -1) {\n          classes.splice(idx, 1);\n        }\n      }\n\n      this.getAttrs()['class'] = classes.join(\" \");\n      return this;\n    };\n    /**\n     * Convenience method to retrieve the CSS class(es) for the HtmlTag, which will each be separated by spaces when\n     * there are multiple.\n     *\n     * @return {String}\n     */\n\n\n    HtmlTag.prototype.getClass = function () {\n      return this.getAttrs()['class'] || \"\";\n    };\n    /**\n     * Convenience method to check if the tag has a CSS class or not.\n     *\n     * @param {String} cssClass The CSS class to check for.\n     * @return {Boolean} `true` if the HtmlTag has the CSS class, `false` otherwise.\n     */\n\n\n    HtmlTag.prototype.hasClass = function (cssClass) {\n      return (' ' + this.getClass() + ' ').indexOf(' ' + cssClass + ' ') !== -1;\n    };\n    /**\n     * Sets the inner HTML for the tag.\n     *\n     * @param {String} html The inner HTML to set.\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n\n\n    HtmlTag.prototype.setInnerHTML = function (html) {\n      this.innerHTML = html;\n      return this;\n    };\n    /**\n     * Backwards compatibility method name.\n     *\n     * @param {String} html The inner HTML to set.\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n\n\n    HtmlTag.prototype.setInnerHtml = function (html) {\n      return this.setInnerHTML(html);\n    };\n    /**\n     * Retrieves the inner HTML for the tag.\n     *\n     * @return {String}\n     */\n\n\n    HtmlTag.prototype.getInnerHTML = function () {\n      return this.innerHTML || \"\";\n    };\n    /**\n     * Backward compatibility method name.\n     *\n     * @return {String}\n     */\n\n\n    HtmlTag.prototype.getInnerHtml = function () {\n      return this.getInnerHTML();\n    };\n    /**\n     * Override of superclass method used to generate the HTML string for the tag.\n     *\n     * @return {String}\n     */\n\n\n    HtmlTag.prototype.toAnchorString = function () {\n      var tagName = this.getTagName(),\n          attrsStr = this.buildAttrsStr();\n      attrsStr = attrsStr ? ' ' + attrsStr : ''; // prepend a space if there are actually attributes\n\n      return ['<', tagName, attrsStr, '>', this.getInnerHtml(), '</', tagName, '>'].join(\"\");\n    };\n    /**\n     * Support method for {@link #toAnchorString}, returns the string space-separated key=\"value\" pairs, used to populate\n     * the stringified HtmlTag.\n     *\n     * @protected\n     * @return {String} Example return: `attr1=\"value1\" attr2=\"value2\"`\n     */\n\n\n    HtmlTag.prototype.buildAttrsStr = function () {\n      if (!this.attrs) return \"\"; // no `attrs` Object (map) has been set, return empty string\n\n      var attrs = this.getAttrs(),\n          attrsArr = [];\n\n      for (var prop in attrs) {\n        if (attrs.hasOwnProperty(prop)) {\n          attrsArr.push(prop + '=\"' + attrs[prop] + '\"');\n        }\n      }\n\n      return attrsArr.join(\" \");\n    };\n\n    return HtmlTag;\n  }();\n  /**\n   * Date: 2015-10-05\n   * Author: Kasper Søfren <soefritz@gmail.com> (https://github.com/kafoso)\n   *\n   * A truncation feature, where the ellipsis will be placed at a section within\n   * the URL making it still somewhat human readable.\n   *\n   * @param {String} url\t\t\t\t\t\t A URL.\n   * @param {Number} truncateLen\t\t The maximum length of the truncated output URL string.\n   * @param {String} ellipsisChars\t The characters to place within the url, e.g. \"...\".\n   * @return {String} The truncated URL.\n   */\n\n\n  function truncateSmart(url, truncateLen, ellipsisChars) {\n    var ellipsisLengthBeforeParsing;\n    var ellipsisLength;\n\n    if (ellipsisChars == null) {\n      ellipsisChars = '&hellip;';\n      ellipsisLength = 3;\n      ellipsisLengthBeforeParsing = 8;\n    } else {\n      ellipsisLength = ellipsisChars.length;\n      ellipsisLengthBeforeParsing = ellipsisChars.length;\n    }\n\n    var parse_url = function parse_url(url) {\n      var urlObj = {};\n      var urlSub = url;\n      var match = urlSub.match(/^([a-z]+):\\/\\//i);\n\n      if (match) {\n        urlObj.scheme = match[1];\n        urlSub = urlSub.substr(match[0].length);\n      }\n\n      match = urlSub.match(/^(.*?)(?=(\\?|#|\\/|$))/i);\n\n      if (match) {\n        urlObj.host = match[1];\n        urlSub = urlSub.substr(match[0].length);\n      }\n\n      match = urlSub.match(/^\\/(.*?)(?=(\\?|#|$))/i);\n\n      if (match) {\n        urlObj.path = match[1];\n        urlSub = urlSub.substr(match[0].length);\n      }\n\n      match = urlSub.match(/^\\?(.*?)(?=(#|$))/i);\n\n      if (match) {\n        urlObj.query = match[1];\n        urlSub = urlSub.substr(match[0].length);\n      }\n\n      match = urlSub.match(/^#(.*?)$/i);\n\n      if (match) {\n        urlObj.fragment = match[1]; //urlSub = urlSub.substr(match[0].length);  -- not used. Uncomment if adding another block.\n      }\n\n      return urlObj;\n    };\n\n    var buildUrl = function buildUrl(urlObj) {\n      var url = \"\";\n\n      if (urlObj.scheme && urlObj.host) {\n        url += urlObj.scheme + \"://\";\n      }\n\n      if (urlObj.host) {\n        url += urlObj.host;\n      }\n\n      if (urlObj.path) {\n        url += \"/\" + urlObj.path;\n      }\n\n      if (urlObj.query) {\n        url += \"?\" + urlObj.query;\n      }\n\n      if (urlObj.fragment) {\n        url += \"#\" + urlObj.fragment;\n      }\n\n      return url;\n    };\n\n    var buildSegment = function buildSegment(segment, remainingAvailableLength) {\n      var remainingAvailableLengthHalf = remainingAvailableLength / 2,\n          startOffset = Math.ceil(remainingAvailableLengthHalf),\n          endOffset = -1 * Math.floor(remainingAvailableLengthHalf),\n          end = \"\";\n\n      if (endOffset < 0) {\n        end = segment.substr(endOffset);\n      }\n\n      return segment.substr(0, startOffset) + ellipsisChars + end;\n    };\n\n    if (url.length <= truncateLen) {\n      return url;\n    }\n\n    var availableLength = truncateLen - ellipsisLength;\n    var urlObj = parse_url(url); // Clean up the URL\n\n    if (urlObj.query) {\n      var matchQuery = urlObj.query.match(/^(.*?)(?=(\\?|\\#))(.*?)$/i);\n\n      if (matchQuery) {\n        // Malformed URL; two or more \"?\". Removed any content behind the 2nd.\n        urlObj.query = urlObj.query.substr(0, matchQuery[1].length);\n        url = buildUrl(urlObj);\n      }\n    }\n\n    if (url.length <= truncateLen) {\n      return url;\n    }\n\n    if (urlObj.host) {\n      urlObj.host = urlObj.host.replace(/^www\\./, \"\");\n      url = buildUrl(urlObj);\n    }\n\n    if (url.length <= truncateLen) {\n      return url;\n    } // Process and build the URL\n\n\n    var str = \"\";\n\n    if (urlObj.host) {\n      str += urlObj.host;\n    }\n\n    if (str.length >= availableLength) {\n      if (urlObj.host.length == truncateLen) {\n        return (urlObj.host.substr(0, truncateLen - ellipsisLength) + ellipsisChars).substr(0, availableLength + ellipsisLengthBeforeParsing);\n      }\n\n      return buildSegment(str, availableLength).substr(0, availableLength + ellipsisLengthBeforeParsing);\n    }\n\n    var pathAndQuery = \"\";\n\n    if (urlObj.path) {\n      pathAndQuery += \"/\" + urlObj.path;\n    }\n\n    if (urlObj.query) {\n      pathAndQuery += \"?\" + urlObj.query;\n    }\n\n    if (pathAndQuery) {\n      if ((str + pathAndQuery).length >= availableLength) {\n        if ((str + pathAndQuery).length == truncateLen) {\n          return (str + pathAndQuery).substr(0, truncateLen);\n        }\n\n        var remainingAvailableLength = availableLength - str.length;\n        return (str + buildSegment(pathAndQuery, remainingAvailableLength)).substr(0, availableLength + ellipsisLengthBeforeParsing);\n      } else {\n        str += pathAndQuery;\n      }\n    }\n\n    if (urlObj.fragment) {\n      var fragment = \"#\" + urlObj.fragment;\n\n      if ((str + fragment).length >= availableLength) {\n        if ((str + fragment).length == truncateLen) {\n          return (str + fragment).substr(0, truncateLen);\n        }\n\n        var remainingAvailableLength2 = availableLength - str.length;\n        return (str + buildSegment(fragment, remainingAvailableLength2)).substr(0, availableLength + ellipsisLengthBeforeParsing);\n      } else {\n        str += fragment;\n      }\n    }\n\n    if (urlObj.scheme && urlObj.host) {\n      var scheme = urlObj.scheme + \"://\";\n\n      if ((str + scheme).length < availableLength) {\n        return (scheme + str).substr(0, truncateLen);\n      }\n    }\n\n    if (str.length <= truncateLen) {\n      return str;\n    }\n\n    var end = \"\";\n\n    if (availableLength > 0) {\n      end = str.substr(-1 * Math.floor(availableLength / 2));\n    }\n\n    return (str.substr(0, Math.ceil(availableLength / 2)) + ellipsisChars + end).substr(0, availableLength + ellipsisLengthBeforeParsing);\n  }\n  /**\n   * Date: 2015-10-05\n   * Author: Kasper Søfren <soefritz@gmail.com> (https://github.com/kafoso)\n   *\n   * A truncation feature, where the ellipsis will be placed in the dead-center of the URL.\n   *\n   * @param {String} url             A URL.\n   * @param {Number} truncateLen     The maximum length of the truncated output URL string.\n   * @param {String} ellipsisChars   The characters to place within the url, e.g. \"..\".\n   * @return {String} The truncated URL.\n   */\n\n\n  function truncateMiddle(url, truncateLen, ellipsisChars) {\n    if (url.length <= truncateLen) {\n      return url;\n    }\n\n    var ellipsisLengthBeforeParsing;\n    var ellipsisLength;\n\n    if (ellipsisChars == null) {\n      ellipsisChars = '&hellip;';\n      ellipsisLengthBeforeParsing = 8;\n      ellipsisLength = 3;\n    } else {\n      ellipsisLengthBeforeParsing = ellipsisChars.length;\n      ellipsisLength = ellipsisChars.length;\n    }\n\n    var availableLength = truncateLen - ellipsisLength;\n    var end = \"\";\n\n    if (availableLength > 0) {\n      end = url.substr(-1 * Math.floor(availableLength / 2));\n    }\n\n    return (url.substr(0, Math.ceil(availableLength / 2)) + ellipsisChars + end).substr(0, availableLength + ellipsisLengthBeforeParsing);\n  }\n  /**\n   * A truncation feature where the ellipsis will be placed at the end of the URL.\n   *\n   * @param {String} anchorText\n   * @param {Number} truncateLen The maximum length of the truncated output URL string.\n   * @param {String} ellipsisChars The characters to place within the url, e.g. \"..\".\n   * @return {String} The truncated URL.\n   */\n\n\n  function truncateEnd(anchorText, truncateLen, ellipsisChars) {\n    return ellipsis(anchorText, truncateLen, ellipsisChars);\n  }\n  /**\n   * @protected\n   * @class Autolinker.AnchorTagBuilder\n   * @extends Object\n   *\n   * Builds anchor (&lt;a&gt;) tags for the Autolinker utility when a match is\n   * found.\n   *\n   * Normally this class is instantiated, configured, and used internally by an\n   * {@link Autolinker} instance, but may actually be used indirectly in a\n   * {@link Autolinker#replaceFn replaceFn} to create {@link Autolinker.HtmlTag HtmlTag}\n   * instances which may be modified before returning from the\n   * {@link Autolinker#replaceFn replaceFn}. For example:\n   *\n   *     var html = Autolinker.link( \"Test google.com\", {\n   *         replaceFn : function( match ) {\n   *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance\n   *             tag.setAttr( 'rel', 'nofollow' );\n   *\n   *             return tag;\n   *         }\n   *     } );\n   *\n   *     // generated html:\n   *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n   */\n\n\n  var AnchorTagBuilder =\n  /** @class */\n  function () {\n    /**\n     * @method constructor\n     * @param {Object} [cfg] The configuration options for the AnchorTagBuilder instance, specified in an Object (map).\n     */\n    function AnchorTagBuilder(cfg) {\n      if (cfg === void 0) {\n        cfg = {};\n      }\n      /**\n       * @cfg {Boolean} newWindow\n       * @inheritdoc Autolinker#newWindow\n       */\n\n\n      this.newWindow = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {Object} truncate\n       * @inheritdoc Autolinker#truncate\n       */\n\n      this.truncate = {}; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {String} className\n       * @inheritdoc Autolinker#className\n       */\n\n      this.className = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      this.newWindow = cfg.newWindow || false;\n      this.truncate = cfg.truncate || {};\n      this.className = cfg.className || '';\n    }\n    /**\n     * Generates the actual anchor (&lt;a&gt;) tag to use in place of the\n     * matched text, via its `match` object.\n     *\n     * @param {Autolinker.match.Match} match The Match instance to generate an\n     *   anchor tag from.\n     * @return {Autolinker.HtmlTag} The HtmlTag instance for the anchor tag.\n     */\n\n\n    AnchorTagBuilder.prototype.build = function (match) {\n      return new HtmlTag({\n        tagName: 'a',\n        attrs: this.createAttrs(match),\n        innerHtml: this.processAnchorText(match.getAnchorText())\n      });\n    };\n    /**\n     * Creates the Object (map) of the HTML attributes for the anchor (&lt;a&gt;)\n     *   tag being generated.\n     *\n     * @protected\n     * @param {Autolinker.match.Match} match The Match instance to generate an\n     *   anchor tag from.\n     * @return {Object} A key/value Object (map) of the anchor tag's attributes.\n     */\n\n\n    AnchorTagBuilder.prototype.createAttrs = function (match) {\n      var attrs = {\n        'href': match.getAnchorHref() // we'll always have the `href` attribute\n\n      };\n      var cssClass = this.createCssClass(match);\n\n      if (cssClass) {\n        attrs['class'] = cssClass;\n      }\n\n      if (this.newWindow) {\n        attrs['target'] = \"_blank\";\n        attrs['rel'] = \"noopener noreferrer\"; // Issue #149. See https://mathiasbynens.github.io/rel-noopener/\n      }\n\n      if (this.truncate) {\n        if (this.truncate.length && this.truncate.length < match.getAnchorText().length) {\n          attrs['title'] = match.getAnchorHref();\n        }\n      }\n\n      return attrs;\n    };\n    /**\n     * Creates the CSS class that will be used for a given anchor tag, based on\n     * the `matchType` and the {@link #className} config.\n     *\n     * Example returns:\n     *\n     * - \"\"                                      // no {@link #className}\n     * - \"myLink myLink-url\"                     // url match\n     * - \"myLink myLink-email\"                   // email match\n     * - \"myLink myLink-phone\"                   // phone match\n     * - \"myLink myLink-hashtag\"                 // hashtag match\n     * - \"myLink myLink-mention myLink-twitter\"  // mention match with Twitter service\n     *\n     * @protected\n     * @param {Autolinker.match.Match} match The Match instance to generate an\n     *   anchor tag from.\n     * @return {String} The CSS class string for the link. Example return:\n     *   \"myLink myLink-url\". If no {@link #className} was configured, returns\n     *   an empty string.\n     */\n\n\n    AnchorTagBuilder.prototype.createCssClass = function (match) {\n      var className = this.className;\n\n      if (!className) {\n        return \"\";\n      } else {\n        var returnClasses = [className],\n            cssClassSuffixes = match.getCssClassSuffixes();\n\n        for (var i = 0, len = cssClassSuffixes.length; i < len; i++) {\n          returnClasses.push(className + '-' + cssClassSuffixes[i]);\n        }\n\n        return returnClasses.join(' ');\n      }\n    };\n    /**\n     * Processes the `anchorText` by truncating the text according to the\n     * {@link #truncate} config.\n     *\n     * @private\n     * @param {String} anchorText The anchor tag's text (i.e. what will be\n     *   displayed).\n     * @return {String} The processed `anchorText`.\n     */\n\n\n    AnchorTagBuilder.prototype.processAnchorText = function (anchorText) {\n      anchorText = this.doTruncate(anchorText);\n      return anchorText;\n    };\n    /**\n     * Performs the truncation of the `anchorText` based on the {@link #truncate}\n     * option. If the `anchorText` is longer than the length specified by the\n     * {@link #truncate} option, the truncation is performed based on the\n     * `location` property. See {@link #truncate} for details.\n     *\n     * @private\n     * @param {String} anchorText The anchor tag's text (i.e. what will be\n     *   displayed).\n     * @return {String} The truncated anchor text.\n     */\n\n\n    AnchorTagBuilder.prototype.doTruncate = function (anchorText) {\n      var truncate = this.truncate;\n      if (!truncate || !truncate.length) return anchorText;\n      var truncateLength = truncate.length,\n          truncateLocation = truncate.location;\n\n      if (truncateLocation === 'smart') {\n        return truncateSmart(anchorText, truncateLength);\n      } else if (truncateLocation === 'middle') {\n        return truncateMiddle(anchorText, truncateLength);\n      } else {\n        return truncateEnd(anchorText, truncateLength);\n      }\n    };\n\n    return AnchorTagBuilder;\n  }();\n  /**\n   * @abstract\n   * @class Autolinker.match.Match\n   *\n   * Represents a match found in an input string which should be Autolinked. A Match object is what is provided in a\n   * {@link Autolinker#replaceFn replaceFn}, and may be used to query for details about the match.\n   *\n   * For example:\n   *\n   *     var input = \"...\";  // string with URLs, Email Addresses, and Mentions (Twitter, Instagram, Soundcloud)\n   *\n   *     var linkedText = Autolinker.link( input, {\n   *         replaceFn : function( match ) {\n   *             console.log( \"href = \", match.getAnchorHref() );\n   *             console.log( \"text = \", match.getAnchorText() );\n   *\n   *             switch( match.getType() ) {\n   *                 case 'url' :\n   *                     console.log( \"url: \", match.getUrl() );\n   *\n   *                 case 'email' :\n   *                     console.log( \"email: \", match.getEmail() );\n   *\n   *                 case 'mention' :\n   *                     console.log( \"mention: \", match.getMention() );\n   *             }\n   *         }\n   *     } );\n   *\n   * See the {@link Autolinker} class for more details on using the {@link Autolinker#replaceFn replaceFn}.\n   */\n\n\n  var Match =\n  /** @class */\n  function () {\n    /**\n     * @member Autolinker.match.Match\n     * @method constructor\n     * @param {Object} cfg The configuration properties for the Match\n     *   instance, specified in an Object (map).\n     */\n    function Match(cfg) {\n      /**\n       * @cfg {Autolinker.AnchorTagBuilder} tagBuilder (required)\n       *\n       * Reference to the AnchorTagBuilder instance to use to generate an anchor\n       * tag for the Match.\n       */\n      this.__jsduckDummyDocProp = null; // property used just to get the above doc comment into the ES5 output and documentation generator\n\n      /**\n       * @cfg {String} matchedText (required)\n       *\n       * The original text that was matched by the {@link Autolinker.matcher.Matcher}.\n       */\n\n      this.matchedText = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {Number} offset (required)\n       *\n       * The offset of where the match was made in the input string.\n       */\n\n      this.offset = 0; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      this.tagBuilder = cfg.tagBuilder;\n      this.matchedText = cfg.matchedText;\n      this.offset = cfg.offset;\n    }\n    /**\n     * Returns the original text that was matched.\n     *\n     * @return {String}\n     */\n\n\n    Match.prototype.getMatchedText = function () {\n      return this.matchedText;\n    };\n    /**\n     * Sets the {@link #offset} of where the match was made in the input string.\n     *\n     * A {@link Autolinker.matcher.Matcher} will be fed only HTML text nodes,\n     * and will therefore set an original offset that is relative to the HTML\n     * text node itself. However, we want this offset to be relative to the full\n     * HTML input string, and thus if using {@link Autolinker#parse} (rather\n     * than calling a {@link Autolinker.matcher.Matcher} directly), then this\n     * offset is corrected after the Matcher itself has done its job.\n     *\n     * @param {Number} offset\n     */\n\n\n    Match.prototype.setOffset = function (offset) {\n      this.offset = offset;\n    };\n    /**\n     * Returns the offset of where the match was made in the input string. This\n     * is the 0-based index of the match.\n     *\n     * @return {Number}\n     */\n\n\n    Match.prototype.getOffset = function () {\n      return this.offset;\n    };\n    /**\n     * Returns the CSS class suffix(es) for this match.\n     *\n     * A CSS class suffix is appended to the {@link Autolinker#className} in\n     * the {@link Autolinker.AnchorTagBuilder} when a match is translated into\n     * an anchor tag.\n     *\n     * For example, if {@link Autolinker#className} was configured as 'myLink',\n     * and this method returns `[ 'url' ]`, the final class name of the element\n     * will become: 'myLink myLink-url'.\n     *\n     * The match may provide multiple CSS class suffixes to be appended to the\n     * {@link Autolinker#className} in order to facilitate better styling\n     * options for different match criteria. See {@link Autolinker.match.Mention}\n     * for an example.\n     *\n     * By default, this method returns a single array with the match's\n     * {@link #getType type} name, but may be overridden by subclasses.\n     *\n     * @return {String[]}\n     */\n\n\n    Match.prototype.getCssClassSuffixes = function () {\n      return [this.getType()];\n    };\n    /**\n     * Builds and returns an {@link Autolinker.HtmlTag} instance based on the\n     * Match.\n     *\n     * This can be used to easily generate anchor tags from matches, and either\n     * return their HTML string, or modify them before doing so.\n     *\n     * Example Usage:\n     *\n     *     var tag = match.buildTag();\n     *     tag.addClass( 'cordova-link' );\n     *     tag.setAttr( 'target', '_system' );\n     *\n     *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"cordova-link\" target=\"_system\">Google</a>\n     *\n     * Example Usage in {@link Autolinker#replaceFn}:\n     *\n     *     var html = Autolinker.link( \"Test google.com\", {\n     *         replaceFn : function( match ) {\n     *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance\n     *             tag.setAttr( 'rel', 'nofollow' );\n     *\n     *             return tag;\n     *         }\n     *     } );\n     *\n     *     // generated html:\n     *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n     */\n\n\n    Match.prototype.buildTag = function () {\n      return this.tagBuilder.build(this);\n    };\n\n    return Match;\n  }();\n  /*! *****************************************************************************\n  Copyright (c) Microsoft Corporation. All rights reserved.\n  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\n  this file except in compliance with the License. You may obtain a copy of the\n  License at http://www.apache.org/licenses/LICENSE-2.0\n   THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\n  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\n  MERCHANTABLITY OR NON-INFRINGEMENT.\n   See the Apache Version 2.0 License for specific language governing permissions\n  and limitations under the License.\n  ***************************************************************************** */\n\n  /* global Reflect, Promise */\n\n\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  function __extends(d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  }\n\n  var _assign = function __assign() {\n    _assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) {\n          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n      }\n\n      return t;\n    };\n\n    return _assign.apply(this, arguments);\n  };\n  /**\n   * @class Autolinker.match.Email\n   * @extends Autolinker.match.Match\n   *\n   * Represents a Email match found in an input string which should be Autolinked.\n   *\n   * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n   */\n\n\n  var EmailMatch =\n  /** @class */\n  function (_super) {\n    __extends(EmailMatch, _super);\n    /**\n     * @method constructor\n     * @param {Object} cfg The configuration properties for the Match\n     *   instance, specified in an Object (map).\n     */\n\n\n    function EmailMatch(cfg) {\n      var _this = _super.call(this, cfg) || this;\n      /**\n       * @cfg {String} email (required)\n       *\n       * The email address that was matched.\n       */\n\n\n      _this.email = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      _this.email = cfg.email;\n      return _this;\n    }\n    /**\n     * Returns a string name for the type of match that this class represents.\n     * For the case of EmailMatch, returns 'email'.\n     *\n     * @return {String}\n     */\n\n\n    EmailMatch.prototype.getType = function () {\n      return 'email';\n    };\n    /**\n     * Returns the email address that was matched.\n     *\n     * @return {String}\n     */\n\n\n    EmailMatch.prototype.getEmail = function () {\n      return this.email;\n    };\n    /**\n     * Returns the anchor href that should be generated for the match.\n     *\n     * @return {String}\n     */\n\n\n    EmailMatch.prototype.getAnchorHref = function () {\n      return 'mailto:' + this.email;\n    };\n    /**\n     * Returns the anchor text that should be generated for the match.\n     *\n     * @return {String}\n     */\n\n\n    EmailMatch.prototype.getAnchorText = function () {\n      return this.email;\n    };\n\n    return EmailMatch;\n  }(Match);\n  /**\n   * @class Autolinker.match.Hashtag\n   * @extends Autolinker.match.Match\n   *\n   * Represents a Hashtag match found in an input string which should be\n   * Autolinked.\n   *\n   * See this class's superclass ({@link Autolinker.match.Match}) for more\n   * details.\n   */\n\n\n  var HashtagMatch =\n  /** @class */\n  function (_super) {\n    __extends(HashtagMatch, _super);\n    /**\n     * @method constructor\n     * @param {Object} cfg The configuration properties for the Match\n     *   instance, specified in an Object (map).\n     */\n\n\n    function HashtagMatch(cfg) {\n      var _this = _super.call(this, cfg) || this;\n      /**\n       * @cfg {String} serviceName\n       *\n       * The service to point hashtag matches to. See {@link Autolinker#hashtag}\n       * for available values.\n       */\n\n\n      _this.serviceName = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {String} hashtag (required)\n       *\n       * The HashtagMatch that was matched, without the '#'.\n       */\n\n      _this.hashtag = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      _this.serviceName = cfg.serviceName;\n      _this.hashtag = cfg.hashtag;\n      return _this;\n    }\n    /**\n     * Returns a string name for the type of match that this class represents.\n     * For the case of HashtagMatch, returns 'hashtag'.\n     *\n     * @return {String}\n     */\n\n\n    HashtagMatch.prototype.getType = function () {\n      return 'hashtag';\n    };\n    /**\n     * Returns the configured {@link #serviceName} to point the HashtagMatch to.\n     * Ex: 'facebook', 'twitter'.\n     *\n     * @return {String}\n     */\n\n\n    HashtagMatch.prototype.getServiceName = function () {\n      return this.serviceName;\n    };\n    /**\n     * Returns the matched hashtag, without the '#' character.\n     *\n     * @return {String}\n     */\n\n\n    HashtagMatch.prototype.getHashtag = function () {\n      return this.hashtag;\n    };\n    /**\n     * Returns the anchor href that should be generated for the match.\n     *\n     * @return {String}\n     */\n\n\n    HashtagMatch.prototype.getAnchorHref = function () {\n      var serviceName = this.serviceName,\n          hashtag = this.hashtag;\n\n      switch (serviceName) {\n        case 'twitter':\n          return 'https://twitter.com/hashtag/' + hashtag;\n\n        case 'facebook':\n          return 'https://www.facebook.com/hashtag/' + hashtag;\n\n        case 'instagram':\n          return 'https://instagram.com/explore/tags/' + hashtag;\n\n        default:\n          // Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case.\n          throw new Error('Unknown service name to point hashtag to: ' + serviceName);\n      }\n    };\n    /**\n     * Returns the anchor text that should be generated for the match.\n     *\n     * @return {String}\n     */\n\n\n    HashtagMatch.prototype.getAnchorText = function () {\n      return '#' + this.hashtag;\n    };\n\n    return HashtagMatch;\n  }(Match);\n  /**\n   * @class Autolinker.match.Mention\n   * @extends Autolinker.match.Match\n   *\n   * Represents a Mention match found in an input string which should be Autolinked.\n   *\n   * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n   */\n\n\n  var MentionMatch =\n  /** @class */\n  function (_super) {\n    __extends(MentionMatch, _super);\n    /**\n     * @method constructor\n     * @param {Object} cfg The configuration properties for the Match\n     *   instance, specified in an Object (map).\n     */\n\n\n    function MentionMatch(cfg) {\n      var _this = _super.call(this, cfg) || this;\n      /**\n       * @cfg {String} serviceName\n       *\n       * The service to point mention matches to. See {@link Autolinker#mention}\n       * for available values.\n       */\n\n\n      _this.serviceName = 'twitter'; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {String} mention (required)\n       *\n       * The Mention that was matched, without the '@' character.\n       */\n\n      _this.mention = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      _this.mention = cfg.mention;\n      _this.serviceName = cfg.serviceName;\n      return _this;\n    }\n    /**\n     * Returns a string name for the type of match that this class represents.\n     * For the case of MentionMatch, returns 'mention'.\n     *\n     * @return {String}\n     */\n\n\n    MentionMatch.prototype.getType = function () {\n      return 'mention';\n    };\n    /**\n     * Returns the mention, without the '@' character.\n     *\n     * @return {String}\n     */\n\n\n    MentionMatch.prototype.getMention = function () {\n      return this.mention;\n    };\n    /**\n     * Returns the configured {@link #serviceName} to point the mention to.\n     * Ex: 'instagram', 'twitter', 'soundcloud'.\n     *\n     * @return {String}\n     */\n\n\n    MentionMatch.prototype.getServiceName = function () {\n      return this.serviceName;\n    };\n    /**\n     * Returns the anchor href that should be generated for the match.\n     *\n     * @return {String}\n     */\n\n\n    MentionMatch.prototype.getAnchorHref = function () {\n      switch (this.serviceName) {\n        case 'twitter':\n          return 'https://twitter.com/' + this.mention;\n\n        case 'instagram':\n          return 'https://instagram.com/' + this.mention;\n\n        case 'soundcloud':\n          return 'https://soundcloud.com/' + this.mention;\n\n        default:\n          // Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case.\n          throw new Error('Unknown service name to point mention to: ' + this.serviceName);\n      }\n    };\n    /**\n     * Returns the anchor text that should be generated for the match.\n     *\n     * @return {String}\n     */\n\n\n    MentionMatch.prototype.getAnchorText = function () {\n      return '@' + this.mention;\n    };\n    /**\n     * Returns the CSS class suffixes that should be used on a tag built with\n     * the match. See {@link Autolinker.match.Match#getCssClassSuffixes} for\n     * details.\n     *\n     * @return {String[]}\n     */\n\n\n    MentionMatch.prototype.getCssClassSuffixes = function () {\n      var cssClassSuffixes = _super.prototype.getCssClassSuffixes.call(this),\n          serviceName = this.getServiceName();\n\n      if (serviceName) {\n        cssClassSuffixes.push(serviceName);\n      }\n\n      return cssClassSuffixes;\n    };\n\n    return MentionMatch;\n  }(Match);\n  /**\n   * @class Autolinker.match.Phone\n   * @extends Autolinker.match.Match\n   *\n   * Represents a Phone number match found in an input string which should be\n   * Autolinked.\n   *\n   * See this class's superclass ({@link Autolinker.match.Match}) for more\n   * details.\n   */\n\n\n  var PhoneMatch =\n  /** @class */\n  function (_super) {\n    __extends(PhoneMatch, _super);\n    /**\n     * @method constructor\n     * @param {Object} cfg The configuration properties for the Match\n     *   instance, specified in an Object (map).\n     */\n\n\n    function PhoneMatch(cfg) {\n      var _this = _super.call(this, cfg) || this;\n      /**\n       * @protected\n       * @property {String} number (required)\n       *\n       * The phone number that was matched, without any delimiter characters.\n       *\n       * Note: This is a string to allow for prefixed 0's.\n       */\n\n\n      _this.number = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @protected\n       * @property  {Boolean} plusSign (required)\n       *\n       * `true` if the matched phone number started with a '+' sign. We'll include\n       * it in the `tel:` URL if so, as this is needed for international numbers.\n       *\n       * Ex: '+1 (123) 456 7879'\n       */\n\n      _this.plusSign = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      _this.number = cfg.number;\n      _this.plusSign = cfg.plusSign;\n      return _this;\n    }\n    /**\n     * Returns a string name for the type of match that this class represents.\n     * For the case of PhoneMatch, returns 'phone'.\n     *\n     * @return {String}\n     */\n\n\n    PhoneMatch.prototype.getType = function () {\n      return 'phone';\n    };\n    /**\n     * Returns the phone number that was matched as a string, without any\n     * delimiter characters.\n     *\n     * Note: This is a string to allow for prefixed 0's.\n     *\n     * @return {String}\n     */\n\n\n    PhoneMatch.prototype.getPhoneNumber = function () {\n      return this.number;\n    };\n    /**\n     * Alias of {@link #getPhoneNumber}, returns the phone number that was\n     * matched as a string, without any delimiter characters.\n     *\n     * Note: This is a string to allow for prefixed 0's.\n     *\n     * @return {String}\n     */\n\n\n    PhoneMatch.prototype.getNumber = function () {\n      return this.getPhoneNumber();\n    };\n    /**\n     * Returns the anchor href that should be generated for the match.\n     *\n     * @return {String}\n     */\n\n\n    PhoneMatch.prototype.getAnchorHref = function () {\n      return 'tel:' + (this.plusSign ? '+' : '') + this.number;\n    };\n    /**\n     * Returns the anchor text that should be generated for the match.\n     *\n     * @return {String}\n     */\n\n\n    PhoneMatch.prototype.getAnchorText = function () {\n      return this.matchedText;\n    };\n\n    return PhoneMatch;\n  }(Match);\n  /**\n   * @class Autolinker.match.Url\n   * @extends Autolinker.match.Match\n   *\n   * Represents a Url match found in an input string which should be Autolinked.\n   *\n   * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n   */\n\n\n  var UrlMatch =\n  /** @class */\n  function (_super) {\n    __extends(UrlMatch, _super);\n    /**\n     * @method constructor\n     * @param {Object} cfg The configuration properties for the Match\n     *   instance, specified in an Object (map).\n     */\n\n\n    function UrlMatch(cfg) {\n      var _this = _super.call(this, cfg) || this;\n      /**\n       * @cfg {String} url (required)\n       *\n       * The url that was matched.\n       */\n\n\n      _this.url = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {\"scheme\"/\"www\"/\"tld\"} urlMatchType (required)\n       *\n       * The type of URL match that this class represents. This helps to determine\n       * if the match was made in the original text with a prefixed scheme (ex:\n       * 'http://www.google.com'), a prefixed 'www' (ex: 'www.google.com'), or\n       * was matched by a known top-level domain (ex: 'google.com').\n       */\n\n      _this.urlMatchType = 'scheme'; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {Boolean} protocolUrlMatch (required)\n       *\n       * `true` if the URL is a match which already has a protocol (i.e.\n       * 'http://'), `false` if the match was from a 'www' or known TLD match.\n       */\n\n      _this.protocolUrlMatch = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {Boolean} protocolRelativeMatch (required)\n       *\n       * `true` if the URL is a protocol-relative match. A protocol-relative match\n       * is a URL that starts with '//', and will be either http:// or https://\n       * based on the protocol that the site is loaded under.\n       */\n\n      _this.protocolRelativeMatch = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {Object} stripPrefix (required)\n       *\n       * The Object form of {@link Autolinker#cfg-stripPrefix}.\n       */\n\n      _this.stripPrefix = {\n        scheme: true,\n        www: true\n      }; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {Boolean} stripTrailingSlash (required)\n       * @inheritdoc Autolinker#cfg-stripTrailingSlash\n       */\n\n      _this.stripTrailingSlash = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {Boolean} decodePercentEncoding (required)\n       * @inheritdoc Autolinker#cfg-decodePercentEncoding\n       */\n\n      _this.decodePercentEncoding = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @private\n       * @property {RegExp} schemePrefixRegex\n       *\n       * A regular expression used to remove the 'http://' or 'https://' from\n       * URLs.\n       */\n\n      _this.schemePrefixRegex = /^(https?:\\/\\/)?/i;\n      /**\n       * @private\n       * @property {RegExp} wwwPrefixRegex\n       *\n       * A regular expression used to remove the 'www.' from URLs.\n       */\n\n      _this.wwwPrefixRegex = /^(https?:\\/\\/)?(www\\.)?/i;\n      /**\n       * @private\n       * @property {RegExp} protocolRelativeRegex\n       *\n       * The regular expression used to remove the protocol-relative '//' from the {@link #url} string, for purposes\n       * of {@link #getAnchorText}. A protocol-relative URL is, for example, \"//yahoo.com\"\n       */\n\n      _this.protocolRelativeRegex = /^\\/\\//;\n      /**\n       * @private\n       * @property {Boolean} protocolPrepended\n       *\n       * Will be set to `true` if the 'http://' protocol has been prepended to the {@link #url} (because the\n       * {@link #url} did not have a protocol)\n       */\n\n      _this.protocolPrepended = false;\n      _this.urlMatchType = cfg.urlMatchType;\n      _this.url = cfg.url;\n      _this.protocolUrlMatch = cfg.protocolUrlMatch;\n      _this.protocolRelativeMatch = cfg.protocolRelativeMatch;\n      _this.stripPrefix = cfg.stripPrefix;\n      _this.stripTrailingSlash = cfg.stripTrailingSlash;\n      _this.decodePercentEncoding = cfg.decodePercentEncoding;\n      return _this;\n    }\n    /**\n     * Returns a string name for the type of match that this class represents.\n     * For the case of UrlMatch, returns 'url'.\n     *\n     * @return {String}\n     */\n\n\n    UrlMatch.prototype.getType = function () {\n      return 'url';\n    };\n    /**\n     * Returns a string name for the type of URL match that this class\n     * represents.\n     *\n     * This helps to determine if the match was made in the original text with a\n     * prefixed scheme (ex: 'http://www.google.com'), a prefixed 'www' (ex:\n     * 'www.google.com'), or was matched by a known top-level domain (ex:\n     * 'google.com').\n     *\n     * @return {\"scheme\"/\"www\"/\"tld\"}\n     */\n\n\n    UrlMatch.prototype.getUrlMatchType = function () {\n      return this.urlMatchType;\n    };\n    /**\n     * Returns the url that was matched, assuming the protocol to be 'http://' if the original\n     * match was missing a protocol.\n     *\n     * @return {String}\n     */\n\n\n    UrlMatch.prototype.getUrl = function () {\n      var url = this.url; // if the url string doesn't begin with a protocol, assume 'http://'\n\n      if (!this.protocolRelativeMatch && !this.protocolUrlMatch && !this.protocolPrepended) {\n        url = this.url = 'http://' + url;\n        this.protocolPrepended = true;\n      }\n\n      return url;\n    };\n    /**\n     * Returns the anchor href that should be generated for the match.\n     *\n     * @return {String}\n     */\n\n\n    UrlMatch.prototype.getAnchorHref = function () {\n      var url = this.getUrl();\n      return url.replace(/&amp;/g, '&'); // any &amp;'s in the URL should be converted back to '&' if they were displayed as &amp; in the source html\n    };\n    /**\n     * Returns the anchor text that should be generated for the match.\n     *\n     * @return {String}\n     */\n\n\n    UrlMatch.prototype.getAnchorText = function () {\n      var anchorText = this.getMatchedText();\n\n      if (this.protocolRelativeMatch) {\n        // Strip off any protocol-relative '//' from the anchor text\n        anchorText = this.stripProtocolRelativePrefix(anchorText);\n      }\n\n      if (this.stripPrefix.scheme) {\n        anchorText = this.stripSchemePrefix(anchorText);\n      }\n\n      if (this.stripPrefix.www) {\n        anchorText = this.stripWwwPrefix(anchorText);\n      }\n\n      if (this.stripTrailingSlash) {\n        anchorText = this.removeTrailingSlash(anchorText); // remove trailing slash, if there is one\n      }\n\n      if (this.decodePercentEncoding) {\n        anchorText = this.removePercentEncoding(anchorText);\n      }\n\n      return anchorText;\n    }; // ---------------------------------------\n    // Utility Functionality\n\n    /**\n     * Strips the scheme prefix (such as \"http://\" or \"https://\") from the given\n     * `url`.\n     *\n     * @private\n     * @param {String} url The text of the anchor that is being generated, for\n     *   which to strip off the url scheme.\n     * @return {String} The `url`, with the scheme stripped.\n     */\n\n\n    UrlMatch.prototype.stripSchemePrefix = function (url) {\n      return url.replace(this.schemePrefixRegex, '');\n    };\n    /**\n     * Strips the 'www' prefix from the given `url`.\n     *\n     * @private\n     * @param {String} url The text of the anchor that is being generated, for\n     *   which to strip off the 'www' if it exists.\n     * @return {String} The `url`, with the 'www' stripped.\n     */\n\n\n    UrlMatch.prototype.stripWwwPrefix = function (url) {\n      return url.replace(this.wwwPrefixRegex, '$1'); // leave any scheme ($1), it one exists\n    };\n    /**\n     * Strips any protocol-relative '//' from the anchor text.\n     *\n     * @private\n     * @param {String} text The text of the anchor that is being generated, for which to strip off the\n     *   protocol-relative prefix (such as stripping off \"//\")\n     * @return {String} The `anchorText`, with the protocol-relative prefix stripped.\n     */\n\n\n    UrlMatch.prototype.stripProtocolRelativePrefix = function (text) {\n      return text.replace(this.protocolRelativeRegex, '');\n    };\n    /**\n     * Removes any trailing slash from the given `anchorText`, in preparation for the text to be displayed.\n     *\n     * @private\n     * @param {String} anchorText The text of the anchor that is being generated, for which to remove any trailing\n     *   slash ('/') that may exist.\n     * @return {String} The `anchorText`, with the trailing slash removed.\n     */\n\n\n    UrlMatch.prototype.removeTrailingSlash = function (anchorText) {\n      if (anchorText.charAt(anchorText.length - 1) === '/') {\n        anchorText = anchorText.slice(0, -1);\n      }\n\n      return anchorText;\n    };\n    /**\n     * Decodes percent-encoded characters from the given `anchorText`, in\n     * preparation for the text to be displayed.\n     *\n     * @private\n     * @param {String} anchorText The text of the anchor that is being\n     *   generated, for which to decode any percent-encoded characters.\n     * @return {String} The `anchorText`, with the percent-encoded characters\n     *   decoded.\n     */\n\n\n    UrlMatch.prototype.removePercentEncoding = function (anchorText) {\n      // First, convert a few of the known % encodings to the corresponding\n      // HTML entities that could accidentally be interpretted as special\n      // HTML characters\n      var preProcessedEntityAnchorText = anchorText.replace(/%22/gi, '&quot;') // \" char\n      .replace(/%26/gi, '&amp;') // & char\n      .replace(/%27/gi, '&#39;') // ' char\n      .replace(/%3C/gi, '&lt;') // < char\n      .replace(/%3E/gi, '&gt;'); // > char\n\n      try {\n        // Now attempt to decode the rest of the anchor text\n        return decodeURIComponent(preProcessedEntityAnchorText);\n      } catch (e) {\n        // Invalid % escape sequence in the anchor text\n        return preProcessedEntityAnchorText;\n      }\n    };\n\n    return UrlMatch;\n  }(Match);\n  /**\n   * @abstract\n   * @class Autolinker.matcher.Matcher\n   *\n   * An abstract class and interface for individual matchers to find matches in\n   * an input string with linkified versions of them.\n   *\n   * Note that Matchers do not take HTML into account - they must be fed the text\n   * nodes of any HTML string, which is handled by {@link Autolinker#parse}.\n   */\n\n\n  var Matcher =\n  /** @class */\n  function () {\n    /**\n     * @method constructor\n     * @param {Object} cfg The configuration properties for the Matcher\n     *   instance, specified in an Object (map).\n     */\n    function Matcher(cfg) {\n      /**\n       * @cfg {Autolinker.AnchorTagBuilder} tagBuilder (required)\n       *\n       * Reference to the AnchorTagBuilder instance to use to generate HTML tags\n       * for {@link Autolinker.match.Match Matches}.\n       */\n      this.__jsduckDummyDocProp = null; // property used just to get the above doc comment into the ES5 output and documentation generator\n\n      this.tagBuilder = cfg.tagBuilder;\n    }\n\n    return Matcher;\n  }();\n  /*\n   * This file builds and stores a library of the common regular expressions used\n   * by the Autolinker utility.\n   *\n   * Other regular expressions may exist ad-hoc, but these are generally the\n   * regular expressions that are shared between source files.\n   */\n\n  /**\n   * Regular expression to match upper and lowercase ASCII letters\n   */\n\n\n  var letterRe = /[A-Za-z]/;\n  /**\n   * Regular expression to match ASCII digits\n   */\n\n  var digitRe = /[0-9]/;\n  /**\n   * Regular expression to match whitespace\n   */\n\n  var whitespaceRe = /\\s/;\n  /**\n   * Regular expression to match quote characters\n   */\n\n  var quoteRe = /['\"]/;\n  /**\n   * Regular expression to match the range of ASCII control characters (0-31), and\n   * the backspace char (127)\n   */\n\n  var controlCharsRe = /[\\x00-\\x1F\\x7F]/;\n  /**\n   * The string form of a regular expression that would match all of the\n   * alphabetic (\"letter\") chars in the unicode character set when placed in a\n   * RegExp character class (`[]`). This includes all international alphabetic\n   * characters.\n   *\n   * These would be the characters matched by unicode regex engines `\\p{L}`\n   * escape (\"all letters\").\n   *\n   * Taken from the XRegExp library: http://xregexp.com/ (thanks @https://github.com/slevithan)\n   * Specifically: http://xregexp.com/v/3.2.0/xregexp-all.js, the 'Letter'\n   *   regex's bmp\n   *\n   * VERY IMPORTANT: This set of characters is defined inside of a Regular\n   *   Expression literal rather than a string literal to prevent UglifyJS from\n   *   compressing the unicode escape sequences into their actual unicode\n   *   characters. If Uglify compresses these into the unicode characters\n   *   themselves, this results in the error \"Range out of order in character\n   *   class\" when these characters are used inside of a Regular Expression\n   *   character class (`[]`). See usages of this const. Alternatively, we can set\n   *   the UglifyJS option `ascii_only` to true for the build, but that doesn't\n   *   help others who are pulling in Autolinker into their own build and running\n   *   UglifyJS themselves.\n   */\n\n  var alphaCharsStr = /A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC/.source; // see note in above variable description\n\n  /**\n   * The string form of a regular expression that would match all emoji characters\n   * Source: https://www.regextester.com/106421\n   */\n\n  var emojiStr = /\\u00a9\\u00ae\\u2000-\\u3300\\ud83c\\ud000-\\udfff\\ud83d\\ud000-\\udfff\\ud83e\\ud000-\\udfff/.source;\n  /**\n   * The string form of a regular expression that would match all of the\n   * combining mark characters in the unicode character set when placed in a\n   * RegExp character class (`[]`).\n   *\n   * These would be the characters matched by unicode regex engines `\\p{M}`\n   * escape (\"all marks\").\n   *\n   * Taken from the XRegExp library: http://xregexp.com/ (thanks @https://github.com/slevithan)\n   * Specifically: http://xregexp.com/v/3.2.0/xregexp-all.js, the 'Mark'\n   *   regex's bmp\n   *\n   * VERY IMPORTANT: This set of characters is defined inside of a Regular\n   *   Expression literal rather than a string literal to prevent UglifyJS from\n   *   compressing the unicode escape sequences into their actual unicode\n   *   characters. If Uglify compresses these into the unicode characters\n   *   themselves, this results in the error \"Range out of order in character\n   *   class\" when these characters are used inside of a Regular Expression\n   *   character class (`[]`). See usages of this const. Alternatively, we can set\n   *   the UglifyJS option `ascii_only` to true for the build, but that doesn't\n   *   help others who are pulling in Autolinker into their own build and running\n   *   UglifyJS themselves.\n   */\n\n  var marksStr = /\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D4-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D01-\\u0D03\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ABE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFB-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F/.source; // see note in above variable description\n\n  /**\n   * The string form of a regular expression that would match all of the\n   * alphabetic (\"letter\") chars, emoji, and combining marks in the unicode character set\n   * when placed in a RegExp character class (`[]`). This includes all\n   * international alphabetic characters.\n   *\n   * These would be the characters matched by unicode regex engines `\\p{L}\\p{M}`\n   * escapes and emoji characters.\n   */\n\n  var alphaCharsAndMarksStr = alphaCharsStr + emojiStr + marksStr;\n  /**\n   * The string form of a regular expression that would match all of the\n   * decimal number chars in the unicode character set when placed in a RegExp\n   * character class (`[]`).\n   *\n   * These would be the characters matched by unicode regex engines `\\p{Nd}`\n   * escape (\"all decimal numbers\")\n   *\n   * Taken from the XRegExp library: http://xregexp.com/ (thanks @https://github.com/slevithan)\n   * Specifically: http://xregexp.com/v/3.2.0/xregexp-all.js, the 'Decimal_Number'\n   *   regex's bmp\n   *\n   * VERY IMPORTANT: This set of characters is defined inside of a Regular\n   *   Expression literal rather than a string literal to prevent UglifyJS from\n   *   compressing the unicode escape sequences into their actual unicode\n   *   characters. If Uglify compresses these into the unicode characters\n   *   themselves, this results in the error \"Range out of order in character\n   *   class\" when these characters are used inside of a Regular Expression\n   *   character class (`[]`). See usages of this const. Alternatively, we can set\n   *   the UglifyJS option `ascii_only` to true for the build, but that doesn't\n   *   help others who are pulling in Autolinker into their own build and running\n   *   UglifyJS themselves.\n   */\n\n  var decimalNumbersStr = /0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19/.source; // see note in above variable description\n\n  /**\n   * The string form of a regular expression that would match all of the\n   * letters and decimal number chars in the unicode character set when placed in\n   * a RegExp character class (`[]`).\n   *\n   * These would be the characters matched by unicode regex engines\n   * `[\\p{L}\\p{Nd}]` escape (\"all letters and decimal numbers\")\n   */\n\n  var alphaNumericCharsStr = alphaCharsAndMarksStr + decimalNumbersStr;\n  /**\n   * The string form of a regular expression that would match all of the\n   * letters, combining marks, and decimal number chars in the unicode character\n   * set when placed in a RegExp character class (`[]`).\n   *\n   * These would be the characters matched by unicode regex engines\n   * `[\\p{L}\\p{M}\\p{Nd}]` escape (\"all letters, combining marks, and decimal\n   * numbers\")\n   */\n\n  var alphaNumericAndMarksCharsStr = alphaCharsAndMarksStr + decimalNumbersStr; // Simplified IP regular expression\n\n  var ipStr = '(?:[' + decimalNumbersStr + ']{1,3}\\\\.){3}[' + decimalNumbersStr + ']{1,3}'; // Protected domain label which do not allow \"-\" character on the beginning and the end of a single label\n\n  var domainLabelStr = '[' + alphaNumericAndMarksCharsStr + '](?:[' + alphaNumericAndMarksCharsStr + '\\\\-]{0,61}[' + alphaNumericAndMarksCharsStr + '])?';\n\n  var getDomainLabelStr = function getDomainLabelStr(group) {\n    return '(?=(' + domainLabelStr + '))\\\\' + group;\n  };\n  /**\n   * A function to match domain names of a URL or email address.\n   * Ex: 'google', 'yahoo', 'some-other-company', etc.\n   */\n\n\n  var getDomainNameStr = function getDomainNameStr(group) {\n    return '(?:' + getDomainLabelStr(group) + '(?:\\\\.' + getDomainLabelStr(group + 1) + '){0,126}|' + ipStr + ')';\n  };\n  /**\n   * A regular expression that is simply the character class of the characters\n   * that may be used in a domain name, minus the '-' or '.'\n   */\n\n\n  var domainNameCharRegex = new RegExp(\"[\" + alphaNumericAndMarksCharsStr + \"]\"); // NOTE: THIS IS A GENERATED FILE\n  // To update with the latest TLD list, run `npm run update-tld-regex` or `yarn update-tld-regex` (depending on which you have installed)\n\n  var tldRegex = /(?:xn--vermgensberatung-pwb|xn--vermgensberater-ctb|xn--clchc0ea0b2g2a9gcd|xn--w4r85el8fhu5dnra|northwesternmutual|travelersinsurance|vermögensberatung|xn--3oq18vl8pn36a|xn--5su34j936bgsg|xn--bck1b9a5dre4c|xn--mgbai9azgqp6j|xn--mgberp4a5d4ar|xn--xkc2dl3a5ee0h|vermögensberater|xn--fzys8d69uvgm|xn--mgba7c0bbn0a|xn--xkc2al3hye2a|americanexpress|kerryproperties|sandvikcoromant|xn--i1b6b1a6a2e|xn--kcrx77d1x4a|xn--lgbbat1ad8j|xn--mgba3a4f16a|xn--mgbaakc7dvf|xn--mgbc0a9azcg|xn--nqv7fs00ema|afamilycompany|americanfamily|bananarepublic|cancerresearch|cookingchannel|kerrylogistics|weatherchannel|xn--54b7fta0cc|xn--6qq986b3xl|xn--80aqecdr1a|xn--b4w605ferd|xn--fiq228c5hs|xn--h2breg3eve|xn--jlq61u9w7b|xn--mgba3a3ejt|xn--mgbaam7a8h|xn--mgbayh7gpa|xn--mgbb9fbpob|xn--mgbbh1a71e|xn--mgbca7dzdo|xn--mgbi4ecexp|xn--mgbx4cd0ab|xn--rvc1e0am3e|international|lifeinsurance|spreadbetting|travelchannel|wolterskluwer|xn--eckvdtc9d|xn--fpcrj9c3d|xn--fzc2c9e2c|xn--h2brj9c8c|xn--tiq49xqyj|xn--yfro4i67o|xn--ygbi2ammx|construction|lplfinancial|scholarships|versicherung|xn--3e0b707e|xn--45br5cyl|xn--80adxhks|xn--80asehdb|xn--8y0a063a|xn--gckr3f0f|xn--mgb9awbf|xn--mgbab2bd|xn--mgbgu82a|xn--mgbpl2fh|xn--mgbt3dhd|xn--mk1bu44c|xn--ngbc5azd|xn--ngbe9e0a|xn--ogbpf8fl|xn--qcka1pmc|accountants|barclaycard|blackfriday|blockbuster|bridgestone|calvinklein|contractors|creditunion|engineering|enterprises|foodnetwork|investments|kerryhotels|lamborghini|motorcycles|olayangroup|photography|playstation|productions|progressive|redumbrella|rightathome|williamhill|xn--11b4c3d|xn--1ck2e1b|xn--1qqw23a|xn--2scrj9c|xn--3bst00m|xn--3ds443g|xn--3hcrj9c|xn--42c2d9a|xn--45brj9c|xn--55qw42g|xn--6frz82g|xn--80ao21a|xn--9krt00a|xn--cck2b3b|xn--czr694b|xn--d1acj3b|xn--efvy88h|xn--estv75g|xn--fct429k|xn--fjq720a|xn--flw351e|xn--g2xx48c|xn--gecrj9c|xn--gk3at1e|xn--h2brj9c|xn--hxt814e|xn--imr513n|xn--j6w193g|xn--jvr189m|xn--kprw13d|xn--kpry57d|xn--kpu716f|xn--mgbbh1a|xn--mgbtx2b|xn--mix891f|xn--nyqy26a|xn--otu796d|xn--pbt977c|xn--pgbs0dh|xn--q9jyb4c|xn--rhqv96g|xn--rovu88b|xn--s9brj9c|xn--ses554g|xn--t60b56a|xn--vuq861b|xn--w4rs40l|xn--xhq521b|xn--zfr164b|சிங்கப்பூர்|accountant|apartments|associates|basketball|bnpparibas|boehringer|capitalone|consulting|creditcard|cuisinella|eurovision|extraspace|foundation|healthcare|immobilien|industries|management|mitsubishi|nationwide|newholland|nextdirect|onyourside|properties|protection|prudential|realestate|republican|restaurant|schaeffler|swiftcover|tatamotors|technology|telefonica|university|vistaprint|vlaanderen|volkswagen|xn--30rr7y|xn--3pxu8k|xn--45q11c|xn--4gbrim|xn--55qx5d|xn--5tzm5g|xn--80aswg|xn--90a3ac|xn--9dbq2a|xn--9et52u|xn--c2br7g|xn--cg4bki|xn--czrs0t|xn--czru2d|xn--fiq64b|xn--fiqs8s|xn--fiqz9s|xn--io0a7i|xn--kput3i|xn--mxtq1m|xn--o3cw4h|xn--pssy2u|xn--unup4y|xn--wgbh1c|xn--wgbl6a|xn--y9a3aq|accenture|alfaromeo|allfinanz|amsterdam|analytics|aquarelle|barcelona|bloomberg|christmas|community|directory|education|equipment|fairwinds|financial|firestone|fresenius|frontdoor|fujixerox|furniture|goldpoint|hisamitsu|homedepot|homegoods|homesense|honeywell|institute|insurance|kuokgroup|ladbrokes|lancaster|landrover|lifestyle|marketing|marshalls|melbourne|microsoft|panasonic|passagens|pramerica|richardli|scjohnson|shangrila|solutions|statebank|statefarm|stockholm|travelers|vacations|xn--90ais|xn--c1avg|xn--d1alf|xn--e1a4c|xn--fhbei|xn--j1aef|xn--j1amh|xn--l1acc|xn--ngbrx|xn--nqv7f|xn--p1acf|xn--tckwe|xn--vhquv|yodobashi|abudhabi|airforce|allstate|attorney|barclays|barefoot|bargains|baseball|boutique|bradesco|broadway|brussels|budapest|builders|business|capetown|catering|catholic|chrysler|cipriani|cityeats|cleaning|clinique|clothing|commbank|computer|delivery|deloitte|democrat|diamonds|discount|discover|download|engineer|ericsson|esurance|etisalat|everbank|exchange|feedback|fidelity|firmdale|football|frontier|goodyear|grainger|graphics|guardian|hdfcbank|helsinki|holdings|hospital|infiniti|ipiranga|istanbul|jpmorgan|lighting|lundbeck|marriott|maserati|mckinsey|memorial|merckmsd|mortgage|movistar|observer|partners|pharmacy|pictures|plumbing|property|redstone|reliance|saarland|samsclub|security|services|shopping|showtime|softbank|software|stcgroup|supplies|symantec|training|uconnect|vanguard|ventures|verisign|woodside|xn--90ae|xn--node|xn--p1ai|xn--qxam|yokohama|السعودية|abogado|academy|agakhan|alibaba|android|athleta|auction|audible|auspost|avianca|banamex|bauhaus|bentley|bestbuy|booking|brother|bugatti|capital|caravan|careers|cartier|channel|charity|chintai|citadel|clubmed|college|cologne|comcast|company|compare|contact|cooking|corsica|country|coupons|courses|cricket|cruises|dentist|digital|domains|exposed|express|farmers|fashion|ferrari|ferrero|finance|fishing|fitness|flights|florist|flowers|forsale|frogans|fujitsu|gallery|genting|godaddy|grocery|guitars|hamburg|hangout|hitachi|holiday|hosting|hoteles|hotmail|hyundai|iselect|ismaili|jewelry|juniper|kitchen|komatsu|lacaixa|lancome|lanxess|lasalle|latrobe|leclerc|liaison|limited|lincoln|markets|metlife|monster|netbank|netflix|network|neustar|okinawa|oldnavy|organic|origins|philips|pioneer|politie|realtor|recipes|rentals|reviews|rexroth|samsung|sandvik|schmidt|schwarz|science|shiksha|shriram|singles|staples|starhub|storage|support|surgery|systems|temasek|theater|theatre|tickets|tiffany|toshiba|trading|walmart|wanggou|watches|weather|website|wedding|whoswho|windows|winners|xfinity|yamaxun|youtube|zuerich|католик|اتصالات|الجزائر|العليان|پاکستان|كاثوليك|موبايلي|இந்தியா|abarth|abbott|abbvie|active|africa|agency|airbus|airtel|alipay|alsace|alstom|anquan|aramco|author|bayern|beauty|berlin|bharti|blanco|bostik|boston|broker|camera|career|caseih|casino|center|chanel|chrome|church|circle|claims|clinic|coffee|comsec|condos|coupon|credit|cruise|dating|datsun|dealer|degree|dental|design|direct|doctor|dunlop|dupont|durban|emerck|energy|estate|events|expert|family|flickr|futbol|gallup|garden|george|giving|global|google|gratis|health|hermes|hiphop|hockey|hotels|hughes|imamat|insure|intuit|jaguar|joburg|juegos|kaufen|kinder|kindle|kosher|lancia|latino|lawyer|lefrak|living|locker|london|luxury|madrid|maison|makeup|market|mattel|mobile|mobily|monash|mormon|moscow|museum|mutual|nagoya|natura|nissan|nissay|norton|nowruz|office|olayan|online|oracle|orange|otsuka|pfizer|photos|physio|piaget|pictet|quebec|racing|realty|reisen|repair|report|review|rocher|rogers|ryukyu|safety|sakura|sanofi|school|schule|search|secure|select|shouji|soccer|social|stream|studio|supply|suzuki|swatch|sydney|taipei|taobao|target|tattoo|tennis|tienda|tjmaxx|tkmaxx|toyota|travel|unicom|viajes|viking|villas|virgin|vision|voting|voyage|vuelos|walter|warman|webcam|xihuan|yachts|yandex|zappos|москва|онлайн|ابوظبي|ارامكو|الاردن|المغرب|امارات|فلسطين|مليسيا|भारतम्|இலங்கை|ファッション|actor|adult|aetna|amfam|amica|apple|archi|audio|autos|azure|baidu|beats|bible|bingo|black|boats|bosch|build|canon|cards|chase|cheap|cisco|citic|click|cloud|coach|codes|crown|cymru|dabur|dance|deals|delta|dodge|drive|dubai|earth|edeka|email|epost|epson|faith|fedex|final|forex|forum|gallo|games|gifts|gives|glade|glass|globo|gmail|green|gripe|group|gucci|guide|homes|honda|horse|house|hyatt|ikano|intel|irish|iveco|jetzt|koeln|kyoto|lamer|lease|legal|lexus|lilly|linde|lipsy|lixil|loans|locus|lotte|lotto|lupin|macys|mango|media|miami|money|mopar|movie|nadex|nexus|nikon|ninja|nokia|nowtv|omega|osaka|paris|parts|party|phone|photo|pizza|place|poker|praxi|press|prime|promo|quest|radio|rehab|reise|ricoh|rocks|rodeo|rugby|salon|sener|seven|sharp|shell|shoes|skype|sling|smart|smile|solar|space|sport|stada|store|study|style|sucks|swiss|tatar|tires|tirol|tmall|today|tokyo|tools|toray|total|tours|trade|trust|tunes|tushu|ubank|vegas|video|vodka|volvo|wales|watch|weber|weibo|works|world|xerox|yahoo|zippo|ایران|بازار|بھارت|سودان|سورية|همراه|भारोत|संगठन|বাংলা|భారత్|ഭാരതം|嘉里大酒店|aarp|able|adac|aero|aigo|akdn|ally|amex|arab|army|arpa|arte|asda|asia|audi|auto|baby|band|bank|bbva|beer|best|bike|bing|blog|blue|bofa|bond|book|buzz|cafe|call|camp|care|cars|casa|case|cash|cbre|cern|chat|citi|city|club|cool|coop|cyou|data|date|dclk|deal|dell|desi|diet|dish|docs|doha|duck|duns|dvag|erni|fage|fail|fans|farm|fast|fiat|fido|film|fire|fish|flir|food|ford|free|fund|game|gbiz|gent|ggee|gift|gmbh|gold|golf|goog|guge|guru|hair|haus|hdfc|help|here|hgtv|host|hsbc|icbc|ieee|imdb|immo|info|itau|java|jeep|jobs|jprs|kddi|kiwi|kpmg|kred|land|lego|lgbt|lidl|life|like|limo|link|live|loan|loft|love|ltda|luxe|maif|meet|meme|menu|mini|mint|mobi|moda|moto|name|navy|news|next|nico|nike|ollo|open|page|pars|pccw|pics|ping|pink|play|plus|pohl|porn|post|prod|prof|qpon|raid|read|reit|rent|rest|rich|rmit|room|rsvp|ruhr|safe|sale|sarl|save|saxo|scor|scot|seat|seek|sexy|shaw|shia|shop|show|silk|sina|site|skin|sncf|sohu|song|sony|spot|star|surf|talk|taxi|team|tech|teva|tiaa|tips|town|toys|tube|vana|visa|viva|vivo|vote|voto|wang|weir|wien|wiki|wine|work|xbox|yoga|zara|zero|zone|дети|сайт|بارت|بيتك|ڀارت|تونس|شبكة|عراق|عمان|موقع|भारत|ভারত|ভাৰত|ਭਾਰਤ|ભારત|ଭାରତ|ಭಾರತ|ලංකා|グーグル|クラウド|ポイント|大众汽车|组织机构|電訊盈科|香格里拉|aaa|abb|abc|aco|ads|aeg|afl|aig|anz|aol|app|art|aws|axa|bar|bbc|bbt|bcg|bcn|bet|bid|bio|biz|bms|bmw|bnl|bom|boo|bot|box|buy|bzh|cab|cal|cam|car|cat|cba|cbn|cbs|ceb|ceo|cfa|cfd|com|crs|csc|dad|day|dds|dev|dhl|diy|dnp|dog|dot|dtv|dvr|eat|eco|edu|esq|eus|fan|fit|fly|foo|fox|frl|ftr|fun|fyi|gal|gap|gdn|gea|gle|gmo|gmx|goo|gop|got|gov|hbo|hiv|hkt|hot|how|ibm|ice|icu|ifm|inc|ing|ink|int|ist|itv|jcb|jcp|jio|jll|jmp|jnj|jot|joy|kfh|kia|kim|kpn|krd|lat|law|lds|llc|lol|lpl|ltd|man|map|mba|med|men|mil|mit|mlb|mls|mma|moe|moi|mom|mov|msd|mtn|mtr|nab|nba|nec|net|new|nfl|ngo|nhk|now|nra|nrw|ntt|nyc|obi|off|one|ong|onl|ooo|org|ott|ovh|pay|pet|phd|pid|pin|pnc|pro|pru|pub|pwc|qvc|red|ren|ril|rio|rip|run|rwe|sap|sas|sbi|sbs|sca|scb|ses|sew|sex|sfr|ski|sky|soy|srl|srt|stc|tab|tax|tci|tdk|tel|thd|tjx|top|trv|tui|tvs|ubs|uno|uol|ups|vet|vig|vin|vip|wed|win|wme|wow|wtc|wtf|xin|xxx|xyz|you|yun|zip|бел|ком|қаз|мкд|мон|орг|рус|срб|укр|հայ|קום|عرب|قطر|كوم|مصر|कॉम|नेट|คอม|ไทย|ストア|セール|みんな|中文网|天主教|我爱你|新加坡|淡马锡|诺基亚|飞利浦|ac|ad|ae|af|ag|ai|al|am|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cw|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|za|zm|zw|ελ|бг|ею|рф|გე|닷넷|닷컴|삼성|한국|コム|世界|中信|中国|中國|企业|佛山|信息|健康|八卦|公司|公益|台湾|台灣|商城|商店|商标|嘉里|在线|大拿|娱乐|家電|工行|广东|微博|慈善|手机|手表|招聘|政务|政府|新闻|时尚|書籍|机构|游戏|澳門|点看|珠宝|移动|网址|网店|网站|网络|联通|谷歌|购物|通販|集团|食品|餐厅|香港)/; // For debugging: search for other \"For debugging\" lines\n  // import CliTable from 'cli-table';\n\n  /**\n   * @class Autolinker.matcher.Email\n   * @extends Autolinker.matcher.Matcher\n   *\n   * Matcher to find email matches in an input string.\n   *\n   * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more details.\n   */\n\n  var EmailMatcher =\n  /** @class */\n  function (_super) {\n    __extends(EmailMatcher, _super);\n\n    function EmailMatcher() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      /**\n       * Valid characters that can be used in the \"local\" part of an email address,\n       * i.e. the \"name\" part of \"name@site.com\"\n       */\n\n\n      _this.localPartCharRegex = new RegExp(\"[\" + alphaNumericAndMarksCharsStr + \"!#$%&'*+/=?^_`{|}~-]\");\n      /**\n       * Stricter TLD regex which adds a beginning and end check to ensure\n       * the string is a valid TLD\n       */\n\n      _this.strictTldRegex = new RegExp(\"^\" + tldRegex.source + \"$\");\n      return _this;\n    }\n    /**\n     * @inheritdoc\n     */\n\n\n    EmailMatcher.prototype.parseMatches = function (text) {\n      var tagBuilder = this.tagBuilder,\n          localPartCharRegex = this.localPartCharRegex,\n          strictTldRegex = this.strictTldRegex,\n          matches = [],\n          len = text.length,\n          noCurrentEmailMatch = new CurrentEmailMatch(); // for matching a 'mailto:' prefix\n\n      var mailtoTransitions = {\n        'm': 'a',\n        'a': 'i',\n        'i': 'l',\n        'l': 't',\n        't': 'o',\n        'o': ':'\n      };\n      var charIdx = 0,\n          state = 0\n      /* NonEmailMatch */\n      ,\n          currentEmailMatch = noCurrentEmailMatch; // For debugging: search for other \"For debugging\" lines\n      // const table = new CliTable( {\n      // \thead: [ 'charIdx', 'char', 'state', 'charIdx', 'currentEmailAddress.idx', 'hasDomainDot' ]\n      // } );\n\n      while (charIdx < len) {\n        var char = text.charAt(charIdx); // For debugging: search for other \"For debugging\" lines\n        // table.push(\n        // \t[ charIdx, char, State[ state ], charIdx, currentEmailAddress.idx, currentEmailAddress.hasDomainDot ]\n        // );\n\n        switch (state) {\n          case 0\n          /* NonEmailMatch */\n          :\n            stateNonEmailAddress(char);\n            break;\n\n          case 1\n          /* Mailto */\n          :\n            stateMailTo(text.charAt(charIdx - 1), char);\n            break;\n\n          case 2\n          /* LocalPart */\n          :\n            stateLocalPart(char);\n            break;\n\n          case 3\n          /* LocalPartDot */\n          :\n            stateLocalPartDot(char);\n            break;\n\n          case 4\n          /* AtSign */\n          :\n            stateAtSign(char);\n            break;\n\n          case 5\n          /* DomainChar */\n          :\n            stateDomainChar(char);\n            break;\n\n          case 6\n          /* DomainHyphen */\n          :\n            stateDomainHyphen(char);\n            break;\n\n          case 7\n          /* DomainDot */\n          :\n            stateDomainDot(char);\n            break;\n\n          default:\n            throwUnhandledCaseError(state);\n        } // For debugging: search for other \"For debugging\" lines\n        // table.push(\n        // \t[ charIdx, char, State[ state ], charIdx, currentEmailAddress.idx, currentEmailAddress.hasDomainDot ]\n        // );\n\n\n        charIdx++;\n      } // Capture any valid match at the end of the string\n\n\n      captureMatchIfValidAndReset(); // For debugging: search for other \"For debugging\" lines\n      //console.log( '\\n' + table.toString() );\n\n      return matches; // Handles the state when we're not in an email address\n\n      function stateNonEmailAddress(char) {\n        if (char === 'm') {\n          beginEmailMatch(1\n          /* Mailto */\n          );\n        } else if (localPartCharRegex.test(char)) {\n          beginEmailMatch();\n        }\n      } // Handles if we're reading a 'mailto:' prefix on the string\n\n\n      function stateMailTo(prevChar, char) {\n        if (prevChar === ':') {\n          // We've reached the end of the 'mailto:' prefix\n          if (localPartCharRegex.test(char)) {\n            state = 2\n            /* LocalPart */\n            ;\n            currentEmailMatch = new CurrentEmailMatch(_assign({}, currentEmailMatch, {\n              hasMailtoPrefix: true\n            }));\n          } else {\n            // we've matched 'mailto:' but didn't get anything meaningful\n            // immediately afterwards (for example, we encountered a\n            // space character, or an '@' character which formed 'mailto:@'\n            resetToNonEmailMatchState();\n          }\n        } else if (mailtoTransitions[prevChar] === char) ;else if (localPartCharRegex.test(char)) {\n          // We we're reading a prefix of 'mailto:', but encountered a\n          // different character that didn't continue the prefix\n          state = 2\n          /* LocalPart */\n          ;\n        } else if (char === '.') {\n          // We we're reading a prefix of 'mailto:', but encountered a\n          // dot character\n          state = 3\n          /* LocalPartDot */\n          ;\n        } else if (char === '@') {\n          // We we're reading a prefix of 'mailto:', but encountered a\n          // an @ character\n          state = 4\n          /* AtSign */\n          ;\n        } else {\n          // not an email address character, return to \"NonEmailAddress\" state\n          resetToNonEmailMatchState();\n        }\n      } // Handles the state when we're currently in the \"local part\" of an\n      // email address (as opposed to the \"domain part\")\n\n\n      function stateLocalPart(char) {\n        if (char === '.') {\n          state = 3\n          /* LocalPartDot */\n          ;\n        } else if (char === '@') {\n          state = 4\n          /* AtSign */\n          ;\n        } else if (localPartCharRegex.test(char)) ;else {\n          // not an email address character, return to \"NonEmailAddress\" state\n          resetToNonEmailMatchState();\n        }\n      } // Handles the state where we've read\n\n\n      function stateLocalPartDot(char) {\n        if (char === '.') {\n          // We read a second '.' in a row, not a valid email address\n          // local part\n          resetToNonEmailMatchState();\n        } else if (char === '@') {\n          // We read the '@' character immediately after a dot ('.'), not\n          // an email address\n          resetToNonEmailMatchState();\n        } else if (localPartCharRegex.test(char)) {\n          state = 2\n          /* LocalPart */\n          ;\n        } else {\n          // Anything else, not an email address\n          resetToNonEmailMatchState();\n        }\n      }\n\n      function stateAtSign(char) {\n        if (domainNameCharRegex.test(char)) {\n          state = 5\n          /* DomainChar */\n          ;\n        } else {\n          // Anything else, not an email address\n          resetToNonEmailMatchState();\n        }\n      }\n\n      function stateDomainChar(char) {\n        if (char === '.') {\n          state = 7\n          /* DomainDot */\n          ;\n        } else if (char === '-') {\n          state = 6\n          /* DomainHyphen */\n          ;\n        } else if (domainNameCharRegex.test(char)) ;else {\n          // Anything else, we potentially matched if the criteria has\n          // been met\n          captureMatchIfValidAndReset();\n        }\n      }\n\n      function stateDomainHyphen(char) {\n        if (char === '-' || char === '.') {\n          // Not valid to have two hyphens (\"--\") or hypen+dot (\"-.\")\n          captureMatchIfValidAndReset();\n        } else if (domainNameCharRegex.test(char)) {\n          state = 5\n          /* DomainChar */\n          ;\n        } else {\n          // Anything else\n          captureMatchIfValidAndReset();\n        }\n      }\n\n      function stateDomainDot(char) {\n        if (char === '.' || char === '-') {\n          // not valid to have two dots (\"..\") or dot+hypen (\".-\")\n          captureMatchIfValidAndReset();\n        } else if (domainNameCharRegex.test(char)) {\n          state = 5\n          /* DomainChar */\n          ; // After having read a '.' and then a valid domain character,\n          // we now know that the domain part of the email is valid, and\n          // we have found at least a partial EmailMatch (however, the\n          // email address may have additional characters from this point)\n\n          currentEmailMatch = new CurrentEmailMatch(_assign({}, currentEmailMatch, {\n            hasDomainDot: true\n          }));\n        } else {\n          // Anything else\n          captureMatchIfValidAndReset();\n        }\n      }\n\n      function beginEmailMatch(newState) {\n        if (newState === void 0) {\n          newState = 2\n          /* LocalPart */\n          ;\n        }\n\n        state = newState;\n        currentEmailMatch = new CurrentEmailMatch({\n          idx: charIdx\n        });\n      }\n\n      function resetToNonEmailMatchState() {\n        state = 0\n        /* NonEmailMatch */\n        ;\n        currentEmailMatch = noCurrentEmailMatch;\n      }\n      /*\n       * Captures the current email address as an EmailMatch if it's valid,\n       * and resets the state to read another email address.\n       */\n\n\n      function captureMatchIfValidAndReset() {\n        if (currentEmailMatch.hasDomainDot) {\n          // we need at least one dot in the domain to be considered a valid email address\n          var matchedText = text.slice(currentEmailMatch.idx, charIdx); // If we read a '.' or '-' char that ended the email address\n          // (valid domain name characters, but only valid email address\n          // characters if they are followed by something else), strip\n          // it off now\n\n          if (/[-.]$/.test(matchedText)) {\n            matchedText = matchedText.slice(0, -1);\n          }\n\n          var emailAddress = currentEmailMatch.hasMailtoPrefix ? matchedText.slice('mailto:'.length) : matchedText; // if the email address has a valid TLD, add it to the list of matches\n\n          if (doesEmailHaveValidTld(emailAddress)) {\n            matches.push(new EmailMatch({\n              tagBuilder: tagBuilder,\n              matchedText: matchedText,\n              offset: currentEmailMatch.idx,\n              email: emailAddress\n            }));\n          }\n        }\n\n        resetToNonEmailMatchState();\n        /**\n         * Determines if the given email address has a valid TLD or not\n         * @param {string} emailAddress - email address\n         * @return {Boolean} - true is email have valid TLD, false otherwise\n         */\n\n        function doesEmailHaveValidTld(emailAddress) {\n          var emailAddressTld = emailAddress.split('.').pop() || '';\n          var emailAddressNormalized = emailAddressTld.toLowerCase();\n          var isValidTld = strictTldRegex.test(emailAddressNormalized);\n          return isValidTld;\n        }\n      }\n    };\n\n    return EmailMatcher;\n  }(Matcher);\n\n  var CurrentEmailMatch =\n  /** @class */\n  function () {\n    function CurrentEmailMatch(cfg) {\n      if (cfg === void 0) {\n        cfg = {};\n      }\n\n      this.idx = cfg.idx !== undefined ? cfg.idx : -1;\n      this.hasMailtoPrefix = !!cfg.hasMailtoPrefix;\n      this.hasDomainDot = !!cfg.hasDomainDot;\n    }\n\n    return CurrentEmailMatch;\n  }();\n  /**\n   * @private\n   * @class Autolinker.matcher.UrlMatchValidator\n   * @singleton\n   *\n   * Used by Autolinker to filter out false URL positives from the\n   * {@link Autolinker.matcher.Url UrlMatcher}.\n   *\n   * Due to the limitations of regular expressions (including the missing feature\n   * of look-behinds in JS regular expressions), we cannot always determine the\n   * validity of a given match. This class applies a bit of additional logic to\n   * filter out any false positives that have been matched by the\n   * {@link Autolinker.matcher.Url UrlMatcher}.\n   */\n\n\n  var UrlMatchValidator =\n  /** @class */\n  function () {\n    function UrlMatchValidator() {}\n    /**\n     * Determines if a given URL match found by the {@link Autolinker.matcher.Url UrlMatcher}\n     * is valid. Will return `false` for:\n     *\n     * 1) URL matches which do not have at least have one period ('.') in the\n     *    domain name (effectively skipping over matches like \"abc:def\").\n     *    However, URL matches with a protocol will be allowed (ex: 'http://localhost')\n     * 2) URL matches which do not have at least one word character in the\n     *    domain name (effectively skipping over matches like \"git:1.0\").\n     * 3) A protocol-relative url match (a URL beginning with '//') whose\n     *    previous character is a word character (effectively skipping over\n     *    strings like \"abc//google.com\")\n     *\n     * Otherwise, returns `true`.\n     *\n     * @param {String} urlMatch The matched URL, if there was one. Will be an\n     *   empty string if the match is not a URL match.\n     * @param {String} protocolUrlMatch The match URL string for a protocol\n     *   match. Ex: 'http://yahoo.com'. This is used to match something like\n     *   'http://localhost', where we won't double check that the domain name\n     *   has at least one '.' in it.\n     * @return {Boolean} `true` if the match given is valid and should be\n     *   processed, or `false` if the match is invalid and/or should just not be\n     *   processed.\n     */\n\n\n    UrlMatchValidator.isValid = function (urlMatch, protocolUrlMatch) {\n      if (protocolUrlMatch && !this.isValidUriScheme(protocolUrlMatch) || this.urlMatchDoesNotHaveProtocolOrDot(urlMatch, protocolUrlMatch) || // At least one period ('.') must exist in the URL match for us to consider it an actual URL, *unless* it was a full protocol match (like 'http://localhost')\n      this.urlMatchDoesNotHaveAtLeastOneWordChar(urlMatch, protocolUrlMatch) && // At least one letter character must exist in the domain name after a protocol match. Ex: skip over something like \"git:1.0\"\n      !this.isValidIpAddress(urlMatch) || // Except if it's an IP address\n      this.containsMultipleDots(urlMatch)) {\n        return false;\n      }\n\n      return true;\n    };\n\n    UrlMatchValidator.isValidIpAddress = function (uriSchemeMatch) {\n      var newRegex = new RegExp(this.hasFullProtocolRegex.source + this.ipRegex.source);\n      var uriScheme = uriSchemeMatch.match(newRegex);\n      return uriScheme !== null;\n    };\n\n    UrlMatchValidator.containsMultipleDots = function (urlMatch) {\n      var stringBeforeSlash = urlMatch;\n\n      if (this.hasFullProtocolRegex.test(urlMatch)) {\n        stringBeforeSlash = urlMatch.split('://')[1];\n      }\n\n      return stringBeforeSlash.split('/')[0].indexOf(\"..\") > -1;\n    };\n    /**\n     * Determines if the URI scheme is a valid scheme to be autolinked. Returns\n     * `false` if the scheme is 'javascript:' or 'vbscript:'\n     *\n     * @private\n     * @param {String} uriSchemeMatch The match URL string for a full URI scheme\n     *   match. Ex: 'http://yahoo.com' or 'mailto:a@a.com'.\n     * @return {Boolean} `true` if the scheme is a valid one, `false` otherwise.\n     */\n\n\n    UrlMatchValidator.isValidUriScheme = function (uriSchemeMatch) {\n      var uriSchemeMatchArr = uriSchemeMatch.match(this.uriSchemeRegex),\n          uriScheme = uriSchemeMatchArr && uriSchemeMatchArr[0].toLowerCase();\n      return uriScheme !== 'javascript:' && uriScheme !== 'vbscript:';\n    };\n    /**\n     * Determines if a URL match does not have either:\n     *\n     * a) a full protocol (i.e. 'http://'), or\n     * b) at least one dot ('.') in the domain name (for a non-full-protocol\n     *    match).\n     *\n     * Either situation is considered an invalid URL (ex: 'git:d' does not have\n     * either the '://' part, or at least one dot in the domain name. If the\n     * match was 'git:abc.com', we would consider this valid.)\n     *\n     * @private\n     * @param {String} urlMatch The matched URL, if there was one. Will be an\n     *   empty string if the match is not a URL match.\n     * @param {String} protocolUrlMatch The match URL string for a protocol\n     *   match. Ex: 'http://yahoo.com'. This is used to match something like\n     *   'http://localhost', where we won't double check that the domain name\n     *   has at least one '.' in it.\n     * @return {Boolean} `true` if the URL match does not have a full protocol,\n     *   or at least one dot ('.') in a non-full-protocol match.\n     */\n\n\n    UrlMatchValidator.urlMatchDoesNotHaveProtocolOrDot = function (urlMatch, protocolUrlMatch) {\n      return !!urlMatch && (!protocolUrlMatch || !this.hasFullProtocolRegex.test(protocolUrlMatch)) && urlMatch.indexOf('.') === -1;\n    };\n    /**\n     * Determines if a URL match does not have at least one word character after\n     * the protocol (i.e. in the domain name).\n     *\n     * At least one letter character must exist in the domain name after a\n     * protocol match. Ex: skip over something like \"git:1.0\"\n     *\n     * @private\n     * @param {String} urlMatch The matched URL, if there was one. Will be an\n     *   empty string if the match is not a URL match.\n     * @param {String} protocolUrlMatch The match URL string for a protocol\n     *   match. Ex: 'http://yahoo.com'. This is used to know whether or not we\n     *   have a protocol in the URL string, in order to check for a word\n     *   character after the protocol separator (':').\n     * @return {Boolean} `true` if the URL match does not have at least one word\n     *   character in it after the protocol, `false` otherwise.\n     */\n\n\n    UrlMatchValidator.urlMatchDoesNotHaveAtLeastOneWordChar = function (urlMatch, protocolUrlMatch) {\n      if (urlMatch && protocolUrlMatch) {\n        return !this.hasWordCharAfterProtocolRegex.test(urlMatch);\n      } else {\n        return false;\n      }\n    };\n    /**\n     * Regex to test for a full protocol, with the two trailing slashes. Ex: 'http://'\n     *\n     * @private\n     * @property {RegExp} hasFullProtocolRegex\n     */\n\n\n    UrlMatchValidator.hasFullProtocolRegex = /^[A-Za-z][-.+A-Za-z0-9]*:\\/\\//;\n    /**\n     * Regex to find the URI scheme, such as 'mailto:'.\n     *\n     * This is used to filter out 'javascript:' and 'vbscript:' schemes.\n     *\n     * @private\n     * @property {RegExp} uriSchemeRegex\n     */\n\n    UrlMatchValidator.uriSchemeRegex = /^[A-Za-z][-.+A-Za-z0-9]*:/;\n    /**\n     * Regex to determine if at least one word char exists after the protocol (i.e. after the ':')\n     *\n     * @private\n     * @property {RegExp} hasWordCharAfterProtocolRegex\n     */\n\n    UrlMatchValidator.hasWordCharAfterProtocolRegex = new RegExp(\":[^\\\\s]*?[\" + alphaCharsStr + \"]\");\n    /**\n     * Regex to determine if the string is a valid IP address\n     *\n     * @private\n     * @property {RegExp} ipRegex\n     */\n\n    UrlMatchValidator.ipRegex = /[0-9][0-9]?[0-9]?\\.[0-9][0-9]?[0-9]?\\.[0-9][0-9]?[0-9]?\\.[0-9][0-9]?[0-9]?(:[0-9]*)?\\/?$/;\n    return UrlMatchValidator;\n  }();\n  /**\n   * @class Autolinker.matcher.Url\n   * @extends Autolinker.matcher.Matcher\n   *\n   * Matcher to find URL matches in an input string.\n   *\n   * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more details.\n   */\n\n\n  var UrlMatcher =\n  /** @class */\n  function (_super) {\n    __extends(UrlMatcher, _super);\n    /**\n     * @method constructor\n     * @param {Object} cfg The configuration properties for the Match instance,\n     *   specified in an Object (map).\n     */\n\n\n    function UrlMatcher(cfg) {\n      var _this = _super.call(this, cfg) || this;\n      /**\n       * @cfg {Object} stripPrefix (required)\n       *\n       * The Object form of {@link Autolinker#cfg-stripPrefix}.\n       */\n\n\n      _this.stripPrefix = {\n        scheme: true,\n        www: true\n      }; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {Boolean} stripTrailingSlash (required)\n       * @inheritdoc Autolinker#stripTrailingSlash\n       */\n\n      _this.stripTrailingSlash = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {Boolean} decodePercentEncoding (required)\n       * @inheritdoc Autolinker#decodePercentEncoding\n       */\n\n      _this.decodePercentEncoding = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @protected\n       * @property {RegExp} matcherRegex\n       *\n       * The regular expression to match URLs with an optional scheme, port\n       * number, path, query string, and hash anchor.\n       *\n       * Example matches:\n       *\n       *     http://google.com\n       *     www.google.com\n       *     google.com/path/to/file?q1=1&q2=2#myAnchor\n       *\n       *\n       * This regular expression will have the following capturing groups:\n       *\n       * 1.  Group that matches a scheme-prefixed URL (i.e. 'http://google.com').\n       *     This is used to match scheme URLs with just a single word, such as\n       *     'http://localhost', where we won't double check that the domain name\n       *     has at least one dot ('.') in it.\n       * 2.  Group that matches a 'www.' prefixed URL. This is only matched if the\n       *     'www.' text was not prefixed by a scheme (i.e.: not prefixed by\n       *     'http://', 'ftp:', etc.)\n       * 3.  A protocol-relative ('//') match for the case of a 'www.' prefixed\n       *     URL. Will be an empty string if it is not a protocol-relative match.\n       *     We need to know the character before the '//' in order to determine\n       *     if it is a valid match or the // was in a string we don't want to\n       *     auto-link.\n       * 4.  Group that matches a known TLD (top level domain), when a scheme\n       *     or 'www.'-prefixed domain is not matched.\n       * 5.  A protocol-relative ('//') match for the case of a known TLD prefixed\n       *     URL. Will be an empty string if it is not a protocol-relative match.\n       *     See #3 for more info.\n       */\n\n      _this.matcherRegex = function () {\n        var schemeRegex = /(?:[A-Za-z][-.+A-Za-z0-9]{0,63}:(?![A-Za-z][-.+A-Za-z0-9]{0,63}:\\/\\/)(?!\\d+\\/?)(?:\\/\\/)?)/,\n            // match protocol, allow in format \"http://\" or \"mailto:\". However, do not match the first part of something like 'link:http://www.google.com' (i.e. don't match \"link:\"). Also, make sure we don't interpret 'google.com:8000' as if 'google.com' was a protocol here (i.e. ignore a trailing port number in this regex)\n        wwwRegex = /(?:www\\.)/,\n            // starting with 'www.'\n        // Allow optional path, query string, and hash anchor, not ending in the following characters: \"?!:,.;\"\n        // http://blog.codinghorror.com/the-problem-with-urls/\n        urlSuffixRegex = new RegExp('[/?#](?:[' + alphaNumericAndMarksCharsStr + \"\\\\-+&@#/%=~_()|'$*\\\\[\\\\]?!:,.;\\u2713]*[\" + alphaNumericAndMarksCharsStr + \"\\\\-+&@#/%=~_()|'$*\\\\[\\\\]\\u2713])?\");\n        return new RegExp(['(?:', '(', schemeRegex.source, getDomainNameStr(2), ')', '|', '(', '(//)?', wwwRegex.source, getDomainNameStr(6), ')', '|', '(', '(//)?', getDomainNameStr(10) + '\\\\.', tldRegex.source, '(?![-' + alphaNumericCharsStr + '])', ')', ')', '(?::[0-9]+)?', '(?:' + urlSuffixRegex.source + ')?' // match for path, query string, and/or hash anchor - optional\n        ].join(\"\"), 'gi');\n      }();\n      /**\n       * A regular expression to use to check the character before a protocol-relative\n       * URL match. We don't want to match a protocol-relative URL if it is part\n       * of another word.\n       *\n       * For example, we want to match something like \"Go to: //google.com\",\n       * but we don't want to match something like \"abc//google.com\"\n       *\n       * This regular expression is used to test the character before the '//'.\n       *\n       * @protected\n       * @type {RegExp} wordCharRegExp\n       */\n\n\n      _this.wordCharRegExp = new RegExp('[' + alphaNumericAndMarksCharsStr + ']');\n      _this.stripPrefix = cfg.stripPrefix;\n      _this.stripTrailingSlash = cfg.stripTrailingSlash;\n      _this.decodePercentEncoding = cfg.decodePercentEncoding;\n      return _this;\n    }\n    /**\n     * @inheritdoc\n     */\n\n\n    UrlMatcher.prototype.parseMatches = function (text) {\n      var matcherRegex = this.matcherRegex,\n          stripPrefix = this.stripPrefix,\n          stripTrailingSlash = this.stripTrailingSlash,\n          decodePercentEncoding = this.decodePercentEncoding,\n          tagBuilder = this.tagBuilder,\n          matches = [],\n          match;\n\n      var _loop_1 = function _loop_1() {\n        var matchStr = match[0],\n            schemeUrlMatch = match[1],\n            wwwUrlMatch = match[4],\n            wwwProtocolRelativeMatch = match[5],\n            //tldUrlMatch = match[ 8 ],  -- not needed at the moment\n        tldProtocolRelativeMatch = match[9],\n            offset = match.index,\n            protocolRelativeMatch = wwwProtocolRelativeMatch || tldProtocolRelativeMatch,\n            prevChar = text.charAt(offset - 1);\n\n        if (!UrlMatchValidator.isValid(matchStr, schemeUrlMatch)) {\n          return \"continue\";\n        } // If the match is preceded by an '@' character, then it is either\n        // an email address or a username. Skip these types of matches.\n\n\n        if (offset > 0 && prevChar === '@') {\n          return \"continue\";\n        } // If it's a protocol-relative '//' match, but the character before the '//'\n        // was a word character (i.e. a letter/number), then we found the '//' in the\n        // middle of another word (such as \"asdf//asdf.com\"). In this case, skip the\n        // match.\n\n\n        if (offset > 0 && protocolRelativeMatch && this_1.wordCharRegExp.test(prevChar)) {\n          return \"continue\";\n        } // If the URL ends with a question mark, don't include the question\n        // mark as part of the URL. We'll assume the question mark was the\n        // end of a sentence, such as: \"Going to google.com?\"\n\n\n        if (/\\?$/.test(matchStr)) {\n          matchStr = matchStr.substr(0, matchStr.length - 1);\n        } // Handle a closing parenthesis or square bracket at the end of the\n        // match, and exclude it if there is not a matching open parenthesis\n        // or square bracket in the match itself.\n\n\n        if (this_1.matchHasUnbalancedClosingParen(matchStr)) {\n          matchStr = matchStr.substr(0, matchStr.length - 1); // remove the trailing \")\"\n        } else {\n          // Handle an invalid character after the TLD\n          var pos = this_1.matchHasInvalidCharAfterTld(matchStr, schemeUrlMatch);\n\n          if (pos > -1) {\n            matchStr = matchStr.substr(0, pos); // remove the trailing invalid chars\n          }\n        } // The autolinker accepts many characters in a url's scheme (like `fake://test.com`).\n        // However, in cases where a URL is missing whitespace before an obvious link,\n        // (for example: `nowhitespacehttp://www.test.com`), we only want the match to start\n        // at the http:// part. We will check if the match contains a common scheme and then\n        // shift the match to start from there.\n\n\n        var foundCommonScheme = ['http://', 'https://'].find(function (commonScheme) {\n          return !!schemeUrlMatch && schemeUrlMatch.indexOf(commonScheme) !== -1;\n        });\n\n        if (foundCommonScheme) {\n          // If we found an overmatched URL, we want to find the index\n          // of where the match should start and shift the match to\n          // start from the beginning of the common scheme\n          var indexOfSchemeStart = matchStr.indexOf(foundCommonScheme);\n          matchStr = matchStr.substr(indexOfSchemeStart);\n          schemeUrlMatch = schemeUrlMatch.substr(indexOfSchemeStart);\n          offset = offset + indexOfSchemeStart;\n        }\n\n        var urlMatchType = schemeUrlMatch ? 'scheme' : wwwUrlMatch ? 'www' : 'tld',\n            protocolUrlMatch = !!schemeUrlMatch;\n        matches.push(new UrlMatch({\n          tagBuilder: tagBuilder,\n          matchedText: matchStr,\n          offset: offset,\n          urlMatchType: urlMatchType,\n          url: matchStr,\n          protocolUrlMatch: protocolUrlMatch,\n          protocolRelativeMatch: !!protocolRelativeMatch,\n          stripPrefix: stripPrefix,\n          stripTrailingSlash: stripTrailingSlash,\n          decodePercentEncoding: decodePercentEncoding\n        }));\n      };\n\n      var this_1 = this;\n\n      while ((match = matcherRegex.exec(text)) !== null) {\n        _loop_1();\n      }\n\n      return matches;\n    };\n    /**\n     * Determines if a match found has an unmatched closing parenthesis or\n     * square bracket. If so, the parenthesis or square bracket will be removed\n     * from the match itself, and appended after the generated anchor tag.\n     *\n     * A match may have an extra closing parenthesis at the end of the match\n     * because the regular expression must include parenthesis for URLs such as\n     * \"wikipedia.com/something_(disambiguation)\", which should be auto-linked.\n     *\n     * However, an extra parenthesis *will* be included when the URL itself is\n     * wrapped in parenthesis, such as in the case of:\n     *     \"(wikipedia.com/something_(disambiguation))\"\n     * In this case, the last closing parenthesis should *not* be part of the\n     * URL itself, and this method will return `true`.\n     *\n     * For square brackets in URLs such as in PHP arrays, the same behavior as\n     * parenthesis discussed above should happen:\n     *     \"[http://www.example.com/foo.php?bar[]=1&bar[]=2&bar[]=3]\"\n     * The closing square bracket should not be part of the URL itself, and this\n     * method will return `true`.\n     *\n     * @protected\n     * @param {String} matchStr The full match string from the {@link #matcherRegex}.\n     * @return {Boolean} `true` if there is an unbalanced closing parenthesis or\n     *   square bracket at the end of the `matchStr`, `false` otherwise.\n     */\n\n\n    UrlMatcher.prototype.matchHasUnbalancedClosingParen = function (matchStr) {\n      var endChar = matchStr.charAt(matchStr.length - 1);\n      var startChar;\n\n      if (endChar === ')') {\n        startChar = '(';\n      } else if (endChar === ']') {\n        startChar = '[';\n      } else {\n        return false; // not a close parenthesis or square bracket\n      } // Find if there are the same number of open braces as close braces in\n      // the URL string, minus the last character (which we have already\n      // determined to be either ')' or ']'\n\n\n      var numOpenBraces = 0;\n\n      for (var i = 0, len = matchStr.length - 1; i < len; i++) {\n        var char = matchStr.charAt(i);\n\n        if (char === startChar) {\n          numOpenBraces++;\n        } else if (char === endChar) {\n          numOpenBraces = Math.max(numOpenBraces - 1, 0);\n        }\n      } // If the number of open braces matches the number of close braces in\n      // the URL minus the last character, then the match has *unbalanced*\n      // braces because of the last character. Example of unbalanced braces\n      // from the regex match:\n      //     \"http://example.com?a[]=1]\"\n\n\n      if (numOpenBraces === 0) {\n        return true;\n      }\n\n      return false;\n    };\n    /**\n     * Determine if there's an invalid character after the TLD in a URL. Valid\n     * characters after TLD are ':/?#'. Exclude scheme matched URLs from this\n     * check.\n     *\n     * @protected\n     * @param {String} urlMatch The matched URL, if there was one. Will be an\n     *   empty string if the match is not a URL match.\n     * @param {String} schemeUrlMatch The match URL string for a scheme\n     *   match. Ex: 'http://yahoo.com'. This is used to match something like\n     *   'http://localhost', where we won't double check that the domain name\n     *   has at least one '.' in it.\n     * @return {Number} the position where the invalid character was found. If\n     *   no such character was found, returns -1\n     */\n\n\n    UrlMatcher.prototype.matchHasInvalidCharAfterTld = function (urlMatch, schemeUrlMatch) {\n      if (!urlMatch) {\n        return -1;\n      }\n\n      var offset = 0;\n\n      if (schemeUrlMatch) {\n        offset = urlMatch.indexOf(':');\n        urlMatch = urlMatch.slice(offset);\n      }\n\n      var re = new RegExp(\"^((.?\\/\\/)?[-.\" + alphaNumericAndMarksCharsStr + \"]*[-\" + alphaNumericAndMarksCharsStr + \"]\\\\.[-\" + alphaNumericAndMarksCharsStr + \"]+)\");\n      var res = re.exec(urlMatch);\n\n      if (res === null) {\n        return -1;\n      }\n\n      offset += res[1].length;\n      urlMatch = urlMatch.slice(res[1].length);\n\n      if (/^[^-.A-Za-z0-9:\\/?#]/.test(urlMatch)) {\n        return offset;\n      }\n\n      return -1;\n    };\n\n    return UrlMatcher;\n  }(Matcher);\n  /**\n   * @class Autolinker.matcher.Hashtag\n   * @extends Autolinker.matcher.Matcher\n   *\n   * Matcher to find HashtagMatch matches in an input string.\n   */\n\n\n  var HashtagMatcher =\n  /** @class */\n  function (_super) {\n    __extends(HashtagMatcher, _super);\n    /**\n     * @method constructor\n     * @param {Object} cfg The configuration properties for the Match instance,\n     *   specified in an Object (map).\n     */\n\n\n    function HashtagMatcher(cfg) {\n      var _this = _super.call(this, cfg) || this;\n      /**\n       * @cfg {String} serviceName\n       *\n       * The service to point hashtag matches to. See {@link Autolinker#hashtag}\n       * for available values.\n       */\n\n\n      _this.serviceName = 'twitter'; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * The regular expression to match Hashtags. Example match:\n       *\n       *     #asdf\n       *\n       * @protected\n       * @property {RegExp} matcherRegex\n       */\n\n      _this.matcherRegex = new RegExp(\"#[_\" + alphaNumericAndMarksCharsStr + \"]{1,139}(?![_\" + alphaNumericAndMarksCharsStr + \"])\", 'g'); // lookahead used to make sure we don't match something above 139 characters\n\n      /**\n       * The regular expression to use to check the character before a username match to\n       * make sure we didn't accidentally match an email address.\n       *\n       * For example, the string \"asdf@asdf.com\" should not match \"@asdf\" as a username.\n       *\n       * @protected\n       * @property {RegExp} nonWordCharRegex\n       */\n\n      _this.nonWordCharRegex = new RegExp('[^' + alphaNumericAndMarksCharsStr + ']');\n      _this.serviceName = cfg.serviceName;\n      return _this;\n    }\n    /**\n     * @inheritdoc\n     */\n\n\n    HashtagMatcher.prototype.parseMatches = function (text) {\n      var matcherRegex = this.matcherRegex,\n          nonWordCharRegex = this.nonWordCharRegex,\n          serviceName = this.serviceName,\n          tagBuilder = this.tagBuilder,\n          matches = [],\n          match;\n\n      while ((match = matcherRegex.exec(text)) !== null) {\n        var offset = match.index,\n            prevChar = text.charAt(offset - 1); // If we found the match at the beginning of the string, or we found the match\n        // and there is a whitespace char in front of it (meaning it is not a '#' char\n        // in the middle of a word), then it is a hashtag match.\n\n        if (offset === 0 || nonWordCharRegex.test(prevChar)) {\n          var matchedText = match[0],\n              hashtag = match[0].slice(1); // strip off the '#' character at the beginning\n\n          matches.push(new HashtagMatch({\n            tagBuilder: tagBuilder,\n            matchedText: matchedText,\n            offset: offset,\n            serviceName: serviceName,\n            hashtag: hashtag\n          }));\n        }\n      }\n\n      return matches;\n    };\n\n    return HashtagMatcher;\n  }(Matcher);\n  /**\n   * @class Autolinker.matcher.Phone\n   * @extends Autolinker.matcher.Matcher\n   *\n   * Matcher to find Phone number matches in an input string.\n   *\n   * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more\n   * details.\n   */\n\n\n  var PhoneMatcher =\n  /** @class */\n  function (_super) {\n    __extends(PhoneMatcher, _super);\n\n    function PhoneMatcher() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      /**\n       * The regular expression to match Phone numbers. Example match:\n       *\n       *     (123) 456-7890\n       *\n       * This regular expression has the following capturing groups:\n       *\n       * 1 or 2. The prefixed '+' sign, if there is one.\n       *\n       * @protected\n       * @property {RegExp} matcherRegex\n       */\n\n\n      _this.matcherRegex = /(?:(?:(?:(\\+)?\\d{1,3}[-\\040.]?)?\\(?\\d{3}\\)?[-\\040.]?\\d{3}[-\\040.]?\\d{4})|(?:(\\+)(?:9[976]\\d|8[987530]\\d|6[987]\\d|5[90]\\d|42\\d|3[875]\\d|2[98654321]\\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)[-\\040.]?(?:\\d[-\\040.]?){6,12}\\d+))([,;]+[0-9]+#?)*/g;\n      return _this;\n    } // ex: (123) 456-7890, 123 456 7890, 123-456-7890, +18004441234,,;,10226420346#,\n    // +1 (800) 444 1234, 10226420346#, 1-800-444-1234,1022,64,20346#\n\n    /**\n     * @inheritdoc\n     */\n\n\n    PhoneMatcher.prototype.parseMatches = function (text) {\n      var matcherRegex = this.matcherRegex,\n          tagBuilder = this.tagBuilder,\n          matches = [],\n          match;\n\n      while ((match = matcherRegex.exec(text)) !== null) {\n        // Remove non-numeric values from phone number string\n        var matchedText = match[0],\n            cleanNumber = matchedText.replace(/[^0-9,;#]/g, ''),\n            // strip out non-digit characters exclude comma semicolon and #\n        plusSign = !!(match[1] || match[2]),\n            // match[ 1 ] or match[ 2 ] is the prefixed plus sign, if there is one\n        before = match.index == 0 ? '' : text.substr(match.index - 1, 1),\n            after = text.substr(match.index + matchedText.length, 1),\n            contextClear = !before.match(/\\d/) && !after.match(/\\d/);\n\n        if (this.testMatch(match[3]) && this.testMatch(matchedText) && contextClear) {\n          matches.push(new PhoneMatch({\n            tagBuilder: tagBuilder,\n            matchedText: matchedText,\n            offset: match.index,\n            number: cleanNumber,\n            plusSign: plusSign\n          }));\n        }\n      }\n\n      return matches;\n    };\n\n    PhoneMatcher.prototype.testMatch = function (text) {\n      return /\\D/.test(text);\n    };\n\n    return PhoneMatcher;\n  }(Matcher);\n  /**\n   * @class Autolinker.matcher.Mention\n   * @extends Autolinker.matcher.Matcher\n   *\n   * Matcher to find/replace username matches in an input string.\n   */\n\n\n  var MentionMatcher =\n  /** @class */\n  function (_super) {\n    __extends(MentionMatcher, _super);\n    /**\n     * @method constructor\n     * @param {Object} cfg The configuration properties for the Match instance,\n     *   specified in an Object (map).\n     */\n\n\n    function MentionMatcher(cfg) {\n      var _this = _super.call(this, cfg) || this;\n      /**\n       * @cfg {'twitter'/'instagram'/'soundcloud'} protected\n       *\n       * The name of service to link @mentions to.\n       *\n       * Valid values are: 'twitter', 'instagram', or 'soundcloud'\n       */\n\n\n      _this.serviceName = 'twitter'; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * Hash of regular expression to match username handles. Example match:\n       *\n       *     @asdf\n       *\n       * @private\n       * @property {Object} matcherRegexes\n       */\n\n      _this.matcherRegexes = {\n        'twitter': new RegExp(\"@[_\" + alphaNumericAndMarksCharsStr + \"]{1,50}(?![_\" + alphaNumericAndMarksCharsStr + \"])\", 'g'),\n        'instagram': new RegExp(\"@[_.\" + alphaNumericAndMarksCharsStr + \"]{1,30}(?![_\" + alphaNumericAndMarksCharsStr + \"])\", 'g'),\n        'soundcloud': new RegExp(\"@[-_.\" + alphaNumericAndMarksCharsStr + \"]{1,50}(?![-_\" + alphaNumericAndMarksCharsStr + \"])\", 'g') // lookahead used to make sure we don't match something above 50 characters\n\n      };\n      /**\n       * The regular expression to use to check the character before a username match to\n       * make sure we didn't accidentally match an email address.\n       *\n       * For example, the string \"asdf@asdf.com\" should not match \"@asdf\" as a username.\n       *\n       * @private\n       * @property {RegExp} nonWordCharRegex\n       */\n\n      _this.nonWordCharRegex = new RegExp('[^' + alphaNumericAndMarksCharsStr + ']');\n      _this.serviceName = cfg.serviceName;\n      return _this;\n    }\n    /**\n     * @inheritdoc\n     */\n\n\n    MentionMatcher.prototype.parseMatches = function (text) {\n      var serviceName = this.serviceName,\n          matcherRegex = this.matcherRegexes[this.serviceName],\n          nonWordCharRegex = this.nonWordCharRegex,\n          tagBuilder = this.tagBuilder,\n          matches = [],\n          match;\n\n      if (!matcherRegex) {\n        return matches;\n      }\n\n      while ((match = matcherRegex.exec(text)) !== null) {\n        var offset = match.index,\n            prevChar = text.charAt(offset - 1); // If we found the match at the beginning of the string, or we found the match\n        // and there is a whitespace char in front of it (meaning it is not an email\n        // address), then it is a username match.\n\n        if (offset === 0 || nonWordCharRegex.test(prevChar)) {\n          var matchedText = match[0].replace(/\\.+$/g, ''),\n              // strip off trailing .\n          mention = matchedText.slice(1); // strip off the '@' character at the beginning\n\n          matches.push(new MentionMatch({\n            tagBuilder: tagBuilder,\n            matchedText: matchedText,\n            offset: offset,\n            serviceName: serviceName,\n            mention: mention\n          }));\n        }\n      }\n\n      return matches;\n    };\n\n    return MentionMatcher;\n  }(Matcher); // For debugging: search for other \"For debugging\" lines\n  // import CliTable from 'cli-table';\n\n  /**\n   * Parses an HTML string, calling the callbacks to notify of tags and text.\n   *\n   * ## History\n   *\n   * This file previously used a regular expression to find html tags in the input\n   * text. Unfortunately, we ran into a bunch of catastrophic backtracking issues\n   * with certain input text, causing Autolinker to either hang or just take a\n   * really long time to parse the string.\n   *\n   * The current code is intended to be a O(n) algorithm that walks through\n   * the string in one pass, and tries to be as cheap as possible. We don't need\n   * to implement the full HTML spec, but rather simply determine where the string\n   * looks like an HTML tag, and where it looks like text (so that we can autolink\n   * that).\n   *\n   * This state machine parser is intended just to be a simple but performant\n   * parser of HTML for the subset of requirements we have. We simply need to:\n   *\n   * 1. Determine where HTML tags are\n   * 2. Determine the tag name (Autolinker specifically only cares about <a>,\n   *    <script>, and <style> tags, so as not to link any text within them)\n   *\n   * We don't need to:\n   *\n   * 1. Create a parse tree\n   * 2. Auto-close tags with invalid markup\n   * 3. etc.\n   *\n   * The other intention behind this is that we didn't want to add external\n   * dependencies on the Autolinker utility which would increase its size. For\n   * instance, adding htmlparser2 adds 125kb to the minified output file,\n   * increasing its final size from 47kb to 172kb (at the time of writing). It\n   * also doesn't work exactly correctly, treating the string \"<3 blah blah blah\"\n   * as an HTML tag.\n   *\n   * Reference for HTML spec:\n   *\n   *     https://www.w3.org/TR/html51/syntax.html#sec-tokenization\n   *\n   * @param {String} html The HTML to parse\n   * @param {Object} callbacks\n   * @param {Function} callbacks.onOpenTag Callback function to call when an open\n   *   tag is parsed. Called with the tagName as its argument.\n   * @param {Function} callbacks.onCloseTag Callback function to call when a close\n   *   tag is parsed. Called with the tagName as its argument. If a self-closing\n   *   tag is found, `onCloseTag` is called immediately after `onOpenTag`.\n   * @param {Function} callbacks.onText Callback function to call when text (i.e\n   *   not an HTML tag) is parsed. Called with the text (string) as its first\n   *   argument, and offset (number) into the string as its second.\n   */\n\n\n  function parseHtml(html, _a) {\n    var onOpenTag = _a.onOpenTag,\n        onCloseTag = _a.onCloseTag,\n        onText = _a.onText,\n        onComment = _a.onComment,\n        onDoctype = _a.onDoctype;\n    var noCurrentTag = new CurrentTag();\n    var charIdx = 0,\n        len = html.length,\n        state = 0\n    /* Data */\n    ,\n        currentDataIdx = 0,\n        // where the current data start index is\n    currentTag = noCurrentTag; // describes the current tag that is being read\n    // For debugging: search for other \"For debugging\" lines\n    // const table = new CliTable( {\n    // \thead: [ 'charIdx', 'char', 'state', 'currentDataIdx', 'currentOpenTagIdx', 'tag.type' ]\n    // } );\n\n    while (charIdx < len) {\n      var char = html.charAt(charIdx); // For debugging: search for other \"For debugging\" lines\n      // ALSO: Temporarily remove the 'const' keyword on the State enum\n      // table.push(\n      // \t[ charIdx, char, State[ state ], currentDataIdx, currentTag.idx, currentTag.idx === -1 ? '' : currentTag.type ]\n      // );\n\n      switch (state) {\n        case 0\n        /* Data */\n        :\n          stateData(char);\n          break;\n\n        case 1\n        /* TagOpen */\n        :\n          stateTagOpen(char);\n          break;\n\n        case 2\n        /* EndTagOpen */\n        :\n          stateEndTagOpen(char);\n          break;\n\n        case 3\n        /* TagName */\n        :\n          stateTagName(char);\n          break;\n\n        case 4\n        /* BeforeAttributeName */\n        :\n          stateBeforeAttributeName(char);\n          break;\n\n        case 5\n        /* AttributeName */\n        :\n          stateAttributeName(char);\n          break;\n\n        case 6\n        /* AfterAttributeName */\n        :\n          stateAfterAttributeName(char);\n          break;\n\n        case 7\n        /* BeforeAttributeValue */\n        :\n          stateBeforeAttributeValue(char);\n          break;\n\n        case 8\n        /* AttributeValueDoubleQuoted */\n        :\n          stateAttributeValueDoubleQuoted(char);\n          break;\n\n        case 9\n        /* AttributeValueSingleQuoted */\n        :\n          stateAttributeValueSingleQuoted(char);\n          break;\n\n        case 10\n        /* AttributeValueUnquoted */\n        :\n          stateAttributeValueUnquoted(char);\n          break;\n\n        case 11\n        /* AfterAttributeValueQuoted */\n        :\n          stateAfterAttributeValueQuoted(char);\n          break;\n\n        case 12\n        /* SelfClosingStartTag */\n        :\n          stateSelfClosingStartTag(char);\n          break;\n\n        case 13\n        /* MarkupDeclarationOpenState */\n        :\n          stateMarkupDeclarationOpen(char);\n          break;\n\n        case 14\n        /* CommentStart */\n        :\n          stateCommentStart(char);\n          break;\n\n        case 15\n        /* CommentStartDash */\n        :\n          stateCommentStartDash(char);\n          break;\n\n        case 16\n        /* Comment */\n        :\n          stateComment(char);\n          break;\n\n        case 17\n        /* CommentEndDash */\n        :\n          stateCommentEndDash(char);\n          break;\n\n        case 18\n        /* CommentEnd */\n        :\n          stateCommentEnd(char);\n          break;\n\n        case 19\n        /* CommentEndBang */\n        :\n          stateCommentEndBang(char);\n          break;\n\n        case 20\n        /* Doctype */\n        :\n          stateDoctype(char);\n          break;\n\n        default:\n          throwUnhandledCaseError(state);\n      } // For debugging: search for other \"For debugging\" lines\n      // ALSO: Temporarily remove the 'const' keyword on the State enum\n      // table.push(\n      // \t[ charIdx, char, State[ state ], currentDataIdx, currentTag.idx, currentTag.idx === -1 ? '' : currentTag.type ]\n      // );\n\n\n      charIdx++;\n    }\n\n    if (currentDataIdx < charIdx) {\n      emitText();\n    } // For debugging: search for other \"For debugging\" lines\n    // console.log( '\\n' + table.toString() );\n    // Called when non-tags are being read (i.e. the text around HTML †ags)\n    // https://www.w3.org/TR/html51/syntax.html#data-state\n\n\n    function stateData(char) {\n      if (char === '<') {\n        startNewTag();\n      }\n    } // Called after a '<' is read from the Data state\n    // https://www.w3.org/TR/html51/syntax.html#tag-open-state\n\n\n    function stateTagOpen(char) {\n      if (char === '!') {\n        state = 13\n        /* MarkupDeclarationOpenState */\n        ;\n      } else if (char === '/') {\n        state = 2\n        /* EndTagOpen */\n        ;\n        currentTag = new CurrentTag(_assign({}, currentTag, {\n          isClosing: true\n        }));\n      } else if (char === '<') {\n        // start of another tag (ignore the previous, incomplete one)\n        startNewTag();\n      } else if (letterRe.test(char)) {\n        // tag name start (and no '/' read)\n        state = 3\n        /* TagName */\n        ;\n        currentTag = new CurrentTag(_assign({}, currentTag, {\n          isOpening: true\n        }));\n      } else {\n        // Any other\n        state = 0\n        /* Data */\n        ;\n        currentTag = noCurrentTag;\n      }\n    } // After a '<x', '</x' sequence is read (where 'x' is a letter character),\n    // this is to continue reading the tag name\n    // https://www.w3.org/TR/html51/syntax.html#tag-name-state\n\n\n    function stateTagName(char) {\n      if (whitespaceRe.test(char)) {\n        currentTag = new CurrentTag(_assign({}, currentTag, {\n          name: captureTagName()\n        }));\n        state = 4\n        /* BeforeAttributeName */\n        ;\n      } else if (char === '<') {\n        // start of another tag (ignore the previous, incomplete one)\n        startNewTag();\n      } else if (char === '/') {\n        currentTag = new CurrentTag(_assign({}, currentTag, {\n          name: captureTagName()\n        }));\n        state = 12\n        /* SelfClosingStartTag */\n        ;\n      } else if (char === '>') {\n        currentTag = new CurrentTag(_assign({}, currentTag, {\n          name: captureTagName()\n        }));\n        emitTagAndPreviousTextNode(); // resets to Data state as well\n      } else if (!letterRe.test(char) && !digitRe.test(char) && char !== ':') {\n        // Anything else that does not form an html tag. Note: the colon\n        // character is accepted for XML namespaced tags\n        resetToDataState();\n      }\n    } // Called after the '/' is read from a '</' sequence\n    // https://www.w3.org/TR/html51/syntax.html#end-tag-open-state\n\n\n    function stateEndTagOpen(char) {\n      if (char === '>') {\n        // parse error. Encountered \"</>\". Skip it without treating as a tag\n        resetToDataState();\n      } else if (letterRe.test(char)) {\n        state = 3\n        /* TagName */\n        ;\n      } else {\n        // some other non-tag-like character, don't treat this as a tag\n        resetToDataState();\n      }\n    } // https://www.w3.org/TR/html51/syntax.html#before-attribute-name-state\n\n\n    function stateBeforeAttributeName(char) {\n      if (whitespaceRe.test(char)) ;else if (char === '/') {\n        state = 12\n        /* SelfClosingStartTag */\n        ;\n      } else if (char === '>') {\n        emitTagAndPreviousTextNode(); // resets to Data state as well\n      } else if (char === '<') {\n        // start of another tag (ignore the previous, incomplete one)\n        startNewTag();\n      } else if (char === \"=\" || quoteRe.test(char) || controlCharsRe.test(char)) {\n        // \"Parse error\" characters that, according to the spec, should be\n        // appended to the attribute name, but we'll treat these characters\n        // as not forming a real HTML tag\n        resetToDataState();\n      } else {\n        // Any other char, start of a new attribute name\n        state = 5\n        /* AttributeName */\n        ;\n      }\n    } // https://www.w3.org/TR/html51/syntax.html#attribute-name-state\n\n\n    function stateAttributeName(char) {\n      if (whitespaceRe.test(char)) {\n        state = 6\n        /* AfterAttributeName */\n        ;\n      } else if (char === '/') {\n        state = 12\n        /* SelfClosingStartTag */\n        ;\n      } else if (char === '=') {\n        state = 7\n        /* BeforeAttributeValue */\n        ;\n      } else if (char === '>') {\n        emitTagAndPreviousTextNode(); // resets to Data state as well\n      } else if (char === '<') {\n        // start of another tag (ignore the previous, incomplete one)\n        startNewTag();\n      } else if (quoteRe.test(char)) {\n        // \"Parse error\" characters that, according to the spec, should be\n        // appended to the attribute name, but we'll treat these characters\n        // as not forming a real HTML tag\n        resetToDataState();\n      }\n    } // https://www.w3.org/TR/html51/syntax.html#after-attribute-name-state\n\n\n    function stateAfterAttributeName(char) {\n      if (whitespaceRe.test(char)) ;else if (char === '/') {\n        state = 12\n        /* SelfClosingStartTag */\n        ;\n      } else if (char === '=') {\n        state = 7\n        /* BeforeAttributeValue */\n        ;\n      } else if (char === '>') {\n        emitTagAndPreviousTextNode();\n      } else if (char === '<') {\n        // start of another tag (ignore the previous, incomplete one)\n        startNewTag();\n      } else if (quoteRe.test(char)) {\n        // \"Parse error\" characters that, according to the spec, should be\n        // appended to the attribute name, but we'll treat these characters\n        // as not forming a real HTML tag\n        resetToDataState();\n      } else {\n        // Any other character, start a new attribute in the current tag\n        state = 5\n        /* AttributeName */\n        ;\n      }\n    } // https://www.w3.org/TR/html51/syntax.html#before-attribute-value-state\n\n\n    function stateBeforeAttributeValue(char) {\n      if (whitespaceRe.test(char)) ;else if (char === \"\\\"\") {\n        state = 8\n        /* AttributeValueDoubleQuoted */\n        ;\n      } else if (char === \"'\") {\n        state = 9\n        /* AttributeValueSingleQuoted */\n        ;\n      } else if (/[>=`]/.test(char)) {\n        // Invalid chars after an '=' for an attribute value, don't count\n        // the current tag as an HTML tag\n        resetToDataState();\n      } else if (char === '<') {\n        // start of another tag (ignore the previous, incomplete one)\n        startNewTag();\n      } else {\n        // Any other character, consider it an unquoted attribute value\n        state = 10\n        /* AttributeValueUnquoted */\n        ;\n      }\n    } // https://www.w3.org/TR/html51/syntax.html#attribute-value-double-quoted-state\n\n\n    function stateAttributeValueDoubleQuoted(char) {\n      if (char === \"\\\"\") {\n        // end the current double-quoted attribute\n        state = 11\n        /* AfterAttributeValueQuoted */\n        ;\n      }\n    } // https://www.w3.org/TR/html51/syntax.html#attribute-value-single-quoted-state\n\n\n    function stateAttributeValueSingleQuoted(char) {\n      if (char === \"'\") {\n        // end the current single-quoted attribute\n        state = 11\n        /* AfterAttributeValueQuoted */\n        ;\n      }\n    } // https://www.w3.org/TR/html51/syntax.html#attribute-value-unquoted-state\n\n\n    function stateAttributeValueUnquoted(char) {\n      if (whitespaceRe.test(char)) {\n        state = 4\n        /* BeforeAttributeName */\n        ;\n      } else if (char === '>') {\n        emitTagAndPreviousTextNode();\n      } else if (char === '<') {\n        // start of another tag (ignore the previous, incomplete one)\n        startNewTag();\n      }\n    } // https://www.w3.org/TR/html51/syntax.html#after-attribute-value-quoted-state\n\n\n    function stateAfterAttributeValueQuoted(char) {\n      if (whitespaceRe.test(char)) {\n        state = 4\n        /* BeforeAttributeName */\n        ;\n      } else if (char === '/') {\n        state = 12\n        /* SelfClosingStartTag */\n        ;\n      } else if (char === '>') {\n        emitTagAndPreviousTextNode();\n      } else if (char === '<') {\n        // start of another tag (ignore the previous, incomplete one)\n        startNewTag();\n      } else {\n        // Any other character, \"parse error\". Spec says to switch to the\n        // BeforeAttributeState and re-consume the character, as it may be\n        // the start of a new attribute name\n        state = 4\n        /* BeforeAttributeName */\n        ;\n        reconsumeCurrentCharacter();\n      }\n    } // A '/' has just been read in the current tag (presumably for '/>'), and\n    // this handles the next character\n    // https://www.w3.org/TR/html51/syntax.html#self-closing-start-tag-state\n\n\n    function stateSelfClosingStartTag(char) {\n      if (char === '>') {\n        currentTag = new CurrentTag(_assign({}, currentTag, {\n          isClosing: true\n        }));\n        emitTagAndPreviousTextNode(); // resets to Data state as well\n      } else {\n        state = 4\n        /* BeforeAttributeName */\n        ;\n      }\n    } // https://www.w3.org/TR/html51/syntax.html#markup-declaration-open-state\n    // (HTML Comments or !DOCTYPE)\n\n\n    function stateMarkupDeclarationOpen(char) {\n      if (html.substr(charIdx, 2) === '--') {\n        // html comment\n        charIdx += 2; // \"consume\" characters\n\n        currentTag = new CurrentTag(_assign({}, currentTag, {\n          type: 'comment'\n        }));\n        state = 14\n        /* CommentStart */\n        ;\n      } else if (html.substr(charIdx, 7).toUpperCase() === 'DOCTYPE') {\n        charIdx += 7; // \"consume\" characters\n\n        currentTag = new CurrentTag(_assign({}, currentTag, {\n          type: 'doctype'\n        }));\n        state = 20\n        /* Doctype */\n        ;\n      } else {\n        // At this point, the spec specifies that the state machine should\n        // enter the \"bogus comment\" state, in which case any character(s)\n        // after the '<!' that were read should become an HTML comment up\n        // until the first '>' that is read (or EOF). Instead, we'll assume\n        // that a user just typed '<!' as part of text data\n        resetToDataState();\n      }\n    } // Handles after the sequence '<!--' has been read\n    // https://www.w3.org/TR/html51/syntax.html#comment-start-state\n\n\n    function stateCommentStart(char) {\n      if (char === '-') {\n        // We've read the sequence '<!---' at this point (3 dashes)\n        state = 15\n        /* CommentStartDash */\n        ;\n      } else if (char === '>') {\n        // At this point, we'll assume the comment wasn't a real comment\n        // so we'll just emit it as data. We basically read the sequence\n        // '<!-->'\n        resetToDataState();\n      } else {\n        // Any other char, take it as part of the comment\n        state = 16\n        /* Comment */\n        ;\n      }\n    } // We've read the sequence '<!---' at this point (3 dashes)\n    // https://www.w3.org/TR/html51/syntax.html#comment-start-dash-state\n\n\n    function stateCommentStartDash(char) {\n      if (char === '-') {\n        // We've read '<!----' (4 dashes) at this point\n        state = 18\n        /* CommentEnd */\n        ;\n      } else if (char === '>') {\n        // At this point, we'll assume the comment wasn't a real comment\n        // so we'll just emit it as data. We basically read the sequence\n        // '<!--->'\n        resetToDataState();\n      } else {\n        // Anything else, take it as a valid comment\n        state = 16\n        /* Comment */\n        ;\n      }\n    } // Currently reading the comment's text (data)\n    // https://www.w3.org/TR/html51/syntax.html#comment-state\n\n\n    function stateComment(char) {\n      if (char === '-') {\n        state = 17\n        /* CommentEndDash */\n        ;\n      }\n    } // When we we've read the first dash inside a comment, it may signal the\n    // end of the comment if we read another dash\n    // https://www.w3.org/TR/html51/syntax.html#comment-end-dash-state\n\n\n    function stateCommentEndDash(char) {\n      if (char === '-') {\n        state = 18\n        /* CommentEnd */\n        ;\n      } else {\n        // Wasn't a dash, must still be part of the comment\n        state = 16\n        /* Comment */\n        ;\n      }\n    } // After we've read two dashes inside a comment, it may signal the end of\n    // the comment if we then read a '>' char\n    // https://www.w3.org/TR/html51/syntax.html#comment-end-state\n\n\n    function stateCommentEnd(char) {\n      if (char === '>') {\n        emitTagAndPreviousTextNode();\n      } else if (char === '!') {\n        state = 19\n        /* CommentEndBang */\n        ;\n      } else if (char === '-') ;else {\n        // Anything else, switch back to the comment state since we didn't\n        // read the full \"end comment\" sequence (i.e. '-->')\n        state = 16\n        /* Comment */\n        ;\n      }\n    } // We've read the sequence '--!' inside of a comment\n    // https://www.w3.org/TR/html51/syntax.html#comment-end-bang-state\n\n\n    function stateCommentEndBang(char) {\n      if (char === '-') {\n        // We read the sequence '--!-' inside of a comment. The last dash\n        // could signify that the comment is going to close\n        state = 17\n        /* CommentEndDash */\n        ;\n      } else if (char === '>') {\n        // End of comment with the sequence '--!>'\n        emitTagAndPreviousTextNode();\n      } else {\n        // The '--!' was not followed by a '>', continue reading the\n        // comment's text\n        state = 16\n        /* Comment */\n        ;\n      }\n    }\n    /**\n     * For DOCTYPES in particular, we don't care about the attributes. Just\n     * advance to the '>' character and emit the tag, unless we find a '<'\n     * character in which case we'll start a new tag.\n     *\n     * Example doctype tag:\n     *    <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n     *\n     * Actual spec: https://www.w3.org/TR/html51/syntax.html#doctype-state\n     */\n\n\n    function stateDoctype(char) {\n      if (char === '>') {\n        emitTagAndPreviousTextNode();\n      } else if (char === '<') {\n        startNewTag();\n      }\n    }\n    /**\n     * Resets the state back to the Data state, and removes the current tag.\n     *\n     * We'll generally run this function whenever a \"parse error\" is\n     * encountered, where the current tag that is being read no longer looks\n     * like a real HTML tag.\n     */\n\n\n    function resetToDataState() {\n      state = 0\n      /* Data */\n      ;\n      currentTag = noCurrentTag;\n    }\n    /**\n     * Starts a new HTML tag at the current index, ignoring any previous HTML\n     * tag that was being read.\n     *\n     * We'll generally run this function whenever we read a new '<' character,\n     * including when we read a '<' character inside of an HTML tag that we were\n     * previously reading.\n     */\n\n\n    function startNewTag() {\n      state = 1\n      /* TagOpen */\n      ;\n      currentTag = new CurrentTag({\n        idx: charIdx\n      });\n    }\n    /**\n     * Once we've decided to emit an open tag, that means we can also emit the\n     * text node before it.\n     */\n\n\n    function emitTagAndPreviousTextNode() {\n      var textBeforeTag = html.slice(currentDataIdx, currentTag.idx);\n\n      if (textBeforeTag) {\n        // the html tag was the first element in the html string, or two\n        // tags next to each other, in which case we should not emit a text\n        // node\n        onText(textBeforeTag, currentDataIdx);\n      }\n\n      if (currentTag.type === 'comment') {\n        onComment(currentTag.idx);\n      } else if (currentTag.type === 'doctype') {\n        onDoctype(currentTag.idx);\n      } else {\n        if (currentTag.isOpening) {\n          onOpenTag(currentTag.name, currentTag.idx);\n        }\n\n        if (currentTag.isClosing) {\n          // note: self-closing tags will emit both opening and closing\n          onCloseTag(currentTag.name, currentTag.idx);\n        }\n      } // Since we just emitted a tag, reset to the data state for the next char\n\n\n      resetToDataState();\n      currentDataIdx = charIdx + 1;\n    }\n\n    function emitText() {\n      var text = html.slice(currentDataIdx, charIdx);\n      onText(text, currentDataIdx);\n      currentDataIdx = charIdx + 1;\n    }\n    /**\n     * Captures the tag name from the start of the tag to the current character\n     * index, and converts it to lower case\n     */\n\n\n    function captureTagName() {\n      var startIdx = currentTag.idx + (currentTag.isClosing ? 2 : 1);\n      return html.slice(startIdx, charIdx).toLowerCase();\n    }\n    /**\n     * Causes the main loop to re-consume the current character, such as after\n     * encountering a \"parse error\" that changed state and needs to reconsume\n     * the same character in that new state.\n     */\n\n\n    function reconsumeCurrentCharacter() {\n      charIdx--;\n    }\n  }\n\n  var CurrentTag =\n  /** @class */\n  function () {\n    function CurrentTag(cfg) {\n      if (cfg === void 0) {\n        cfg = {};\n      }\n\n      this.idx = cfg.idx !== undefined ? cfg.idx : -1;\n      this.type = cfg.type || 'tag';\n      this.name = cfg.name || '';\n      this.isOpening = !!cfg.isOpening;\n      this.isClosing = !!cfg.isClosing;\n    }\n\n    return CurrentTag;\n  }();\n  /**\n   * @class Autolinker\n   * @extends Object\n   *\n   * Utility class used to process a given string of text, and wrap the matches in\n   * the appropriate anchor (&lt;a&gt;) tags to turn them into links.\n   *\n   * Any of the configuration options may be provided in an Object provided\n   * to the Autolinker constructor, which will configure how the {@link #link link()}\n   * method will process the links.\n   *\n   * For example:\n   *\n   *     var autolinker = new Autolinker( {\n   *         newWindow : false,\n   *         truncate  : 30\n   *     } );\n   *\n   *     var html = autolinker.link( \"Joe went to www.yahoo.com\" );\n   *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n   *\n   *\n   * The {@link #static-link static link()} method may also be used to inline\n   * options into a single call, which may be more convenient for one-off uses.\n   * For example:\n   *\n   *     var html = Autolinker.link( \"Joe went to www.yahoo.com\", {\n   *         newWindow : false,\n   *         truncate  : 30\n   *     } );\n   *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n   *\n   *\n   * ## Custom Replacements of Links\n   *\n   * If the configuration options do not provide enough flexibility, a {@link #replaceFn}\n   * may be provided to fully customize the output of Autolinker. This function is\n   * called once for each URL/Email/Phone#/Hashtag/Mention (Twitter, Instagram, Soundcloud)\n   * match that is encountered.\n   *\n   * For example:\n   *\n   *     var input = \"...\";  // string with URLs, Email Addresses, Phone #s, Hashtags, and Mentions (Twitter, Instagram, Soundcloud)\n   *\n   *     var linkedText = Autolinker.link( input, {\n   *         replaceFn : function( match ) {\n   *             console.log( \"href = \", match.getAnchorHref() );\n   *             console.log( \"text = \", match.getAnchorText() );\n   *\n   *             switch( match.getType() ) {\n   *                 case 'url' :\n   *                     console.log( \"url: \", match.getUrl() );\n   *\n   *                     if( match.getUrl().indexOf( 'mysite.com' ) === -1 ) {\n   *                         var tag = match.buildTag();  // returns an `Autolinker.HtmlTag` instance, which provides mutator methods for easy changes\n   *                         tag.setAttr( 'rel', 'nofollow' );\n   *                         tag.addClass( 'external-link' );\n   *\n   *                         return tag;\n   *\n   *                     } else {\n   *                         return true;  // let Autolinker perform its normal anchor tag replacement\n   *                     }\n   *\n   *                 case 'email' :\n   *                     var email = match.getEmail();\n   *                     console.log( \"email: \", email );\n   *\n   *                     if( email === \"my@own.address\" ) {\n   *                         return false;  // don't auto-link this particular email address; leave as-is\n   *                     } else {\n   *                         return;  // no return value will have Autolinker perform its normal anchor tag replacement (same as returning `true`)\n   *                     }\n   *\n   *                 case 'phone' :\n   *                     var phoneNumber = match.getPhoneNumber();\n   *                     console.log( phoneNumber );\n   *\n   *                     return '<a href=\"http://newplace.to.link.phone.numbers.to/\">' + phoneNumber + '</a>';\n   *\n   *                 case 'hashtag' :\n   *                     var hashtag = match.getHashtag();\n   *                     console.log( hashtag );\n   *\n   *                     return '<a href=\"http://newplace.to.link.hashtag.handles.to/\">' + hashtag + '</a>';\n   *\n   *                 case 'mention' :\n   *                     var mention = match.getMention();\n   *                     console.log( mention );\n   *\n   *                     return '<a href=\"http://newplace.to.link.mention.to/\">' + mention + '</a>';\n   *             }\n   *         }\n   *     } );\n   *\n   *\n   * The function may return the following values:\n   *\n   * - `true` (Boolean): Allow Autolinker to replace the match as it normally\n   *   would.\n   * - `false` (Boolean): Do not replace the current match at all - leave as-is.\n   * - Any String: If a string is returned from the function, the string will be\n   *   used directly as the replacement HTML for the match.\n   * - An {@link Autolinker.HtmlTag} instance, which can be used to build/modify\n   *   an HTML tag before writing out its HTML text.\n   */\n\n\n  var Autolinker =\n  /** @class */\n  function () {\n    /**\n     * @method constructor\n     * @param {Object} [cfg] The configuration options for the Autolinker instance,\n     *   specified in an Object (map).\n     */\n    function Autolinker(cfg) {\n      if (cfg === void 0) {\n        cfg = {};\n      }\n      /**\n       * The Autolinker version number exposed on the instance itself.\n       *\n       * Ex: 0.25.1\n       */\n\n\n      this.version = Autolinker.version;\n      /**\n       * @cfg {Boolean/Object} [urls]\n       *\n       * `true` if URLs should be automatically linked, `false` if they should not\n       * be. Defaults to `true`.\n       *\n       * Examples:\n       *\n       *     urls: true\n       *\n       *     // or\n       *\n       *     urls: {\n       *         schemeMatches : true,\n       *         wwwMatches    : true,\n       *         tldMatches    : true\n       *     }\n       *\n       * As shown above, this option also accepts an Object form with 3 properties\n       * to allow for more customization of what exactly gets linked. All default\n       * to `true`:\n       *\n       * @cfg {Boolean} [urls.schemeMatches] `true` to match URLs found prefixed\n       *   with a scheme, i.e. `http://google.com`, or `other+scheme://google.com`,\n       *   `false` to prevent these types of matches.\n       * @cfg {Boolean} [urls.wwwMatches] `true` to match urls found prefixed with\n       *   `'www.'`, i.e. `www.google.com`. `false` to prevent these types of\n       *   matches. Note that if the URL had a prefixed scheme, and\n       *   `schemeMatches` is true, it will still be linked.\n       * @cfg {Boolean} [urls.tldMatches] `true` to match URLs with known top\n       *   level domains (.com, .net, etc.) that are not prefixed with a scheme or\n       *   `'www.'`. This option attempts to match anything that looks like a URL\n       *   in the given text. Ex: `google.com`, `asdf.org/?page=1`, etc. `false`\n       *   to prevent these types of matches.\n       */\n\n      this.urls = {}; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {Boolean} [email=true]\n       *\n       * `true` if email addresses should be automatically linked, `false` if they\n       * should not be.\n       */\n\n      this.email = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {Boolean} [phone=true]\n       *\n       * `true` if Phone numbers (\"(555)555-5555\") should be automatically linked,\n       * `false` if they should not be.\n       */\n\n      this.phone = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {Boolean/String} [hashtag=false]\n       *\n       * A string for the service name to have hashtags (ex: \"#myHashtag\")\n       * auto-linked to. The currently-supported values are:\n       *\n       * - 'twitter'\n       * - 'facebook'\n       * - 'instagram'\n       *\n       * Pass `false` to skip auto-linking of hashtags.\n       */\n\n      this.hashtag = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {String/Boolean} [mention=false]\n       *\n       * A string for the service name to have mentions (ex: \"@myuser\")\n       * auto-linked to. The currently supported values are:\n       *\n       * - 'twitter'\n       * - 'instagram'\n       * - 'soundcloud'\n       *\n       * Defaults to `false` to skip auto-linking of mentions.\n       */\n\n      this.mention = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {Boolean} [newWindow=true]\n       *\n       * `true` if the links should open in a new window, `false` otherwise.\n       */\n\n      this.newWindow = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {Boolean/Object} [stripPrefix=true]\n       *\n       * `true` if 'http://' (or 'https://') and/or the 'www.' should be stripped\n       * from the beginning of URL links' text, `false` otherwise. Defaults to\n       * `true`.\n       *\n       * Examples:\n       *\n       *     stripPrefix: true\n       *\n       *     // or\n       *\n       *     stripPrefix: {\n       *         scheme : true,\n       *         www    : true\n       *     }\n       *\n       * As shown above, this option also accepts an Object form with 2 properties\n       * to allow for more customization of what exactly is prevented from being\n       * displayed. Both default to `true`:\n       *\n       * @cfg {Boolean} [stripPrefix.scheme] `true` to prevent the scheme part of\n       *   a URL match from being displayed to the user. Example:\n       *   `'http://google.com'` will be displayed as `'google.com'`. `false` to\n       *   not strip the scheme. NOTE: Only an `'http://'` or `'https://'` scheme\n       *   will be removed, so as not to remove a potentially dangerous scheme\n       *   (such as `'file://'` or `'javascript:'`)\n       * @cfg {Boolean} [stripPrefix.www] www (Boolean): `true` to prevent the\n       *   `'www.'` part of a URL match from being displayed to the user. Ex:\n       *   `'www.google.com'` will be displayed as `'google.com'`. `false` to not\n       *   strip the `'www'`.\n       */\n\n      this.stripPrefix = {\n        scheme: true,\n        www: true\n      }; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {Boolean} [stripTrailingSlash=true]\n       *\n       * `true` to remove the trailing slash from URL matches, `false` to keep\n       *  the trailing slash.\n       *\n       *  Example when `true`: `http://google.com/` will be displayed as\n       *  `http://google.com`.\n       */\n\n      this.stripTrailingSlash = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {Boolean} [decodePercentEncoding=true]\n       *\n       * `true` to decode percent-encoded characters in URL matches, `false` to keep\n       *  the percent-encoded characters.\n       *\n       *  Example when `true`: `https://en.wikipedia.org/wiki/San_Jos%C3%A9` will\n       *  be displayed as `https://en.wikipedia.org/wiki/San_José`.\n       */\n\n      this.decodePercentEncoding = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {Number/Object} [truncate=0]\n       *\n       * ## Number Form\n       *\n       * A number for how many characters matched text should be truncated to\n       * inside the text of a link. If the matched text is over this number of\n       * characters, it will be truncated to this length by adding a two period\n       * ellipsis ('..') to the end of the string.\n       *\n       * For example: A url like 'http://www.yahoo.com/some/long/path/to/a/file'\n       * truncated to 25 characters might look something like this:\n       * 'yahoo.com/some/long/pat..'\n       *\n       * Example Usage:\n       *\n       *     truncate: 25\n       *\n       *\n       *  Defaults to `0` for \"no truncation.\"\n       *\n       *\n       * ## Object Form\n       *\n       * An Object may also be provided with two properties: `length` (Number) and\n       * `location` (String). `location` may be one of the following: 'end'\n       * (default), 'middle', or 'smart'.\n       *\n       * Example Usage:\n       *\n       *     truncate: { length: 25, location: 'middle' }\n       *\n       * @cfg {Number} [truncate.length=0] How many characters to allow before\n       *   truncation will occur. Defaults to `0` for \"no truncation.\"\n       * @cfg {\"end\"/\"middle\"/\"smart\"} [truncate.location=\"end\"]\n       *\n       * - 'end' (default): will truncate up to the number of characters, and then\n       *   add an ellipsis at the end. Ex: 'yahoo.com/some/long/pat..'\n       * - 'middle': will truncate and add the ellipsis in the middle. Ex:\n       *   'yahoo.com/s..th/to/a/file'\n       * - 'smart': for URLs where the algorithm attempts to strip out unnecessary\n       *   parts first (such as the 'www.', then URL scheme, hash, etc.),\n       *   attempting to make the URL human-readable before looking for a good\n       *   point to insert the ellipsis if it is still too long. Ex:\n       *   'yahoo.com/some..to/a/file'. For more details, see\n       *   {@link Autolinker.truncate.TruncateSmart}.\n       */\n\n      this.truncate = {\n        length: 0,\n        location: 'end'\n      }; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {String} className\n       *\n       * A CSS class name to add to the generated links. This class will be added\n       * to all links, as well as this class plus match suffixes for styling\n       * url/email/phone/hashtag/mention links differently.\n       *\n       * For example, if this config is provided as \"myLink\", then:\n       *\n       * - URL links will have the CSS classes: \"myLink myLink-url\"\n       * - Email links will have the CSS classes: \"myLink myLink-email\", and\n       * - Phone links will have the CSS classes: \"myLink myLink-phone\"\n       * - Hashtag links will have the CSS classes: \"myLink myLink-hashtag\"\n       * - Mention links will have the CSS classes: \"myLink myLink-mention myLink-[type]\"\n       *   where [type] is either \"instagram\", \"twitter\" or \"soundcloud\"\n       */\n\n      this.className = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {Function} replaceFn\n       *\n       * A function to individually process each match found in the input string.\n       *\n       * See the class's description for usage.\n       *\n       * The `replaceFn` can be called with a different context object (`this`\n       * reference) using the {@link #context} cfg.\n       *\n       * This function is called with the following parameter:\n       *\n       * @cfg {Autolinker.match.Match} replaceFn.match The Match instance which\n       *   can be used to retrieve information about the match that the `replaceFn`\n       *   is currently processing. See {@link Autolinker.match.Match} subclasses\n       *   for details.\n       */\n\n      this.replaceFn = null; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @cfg {Object} context\n       *\n       * The context object (`this` reference) to call the `replaceFn` with.\n       *\n       * Defaults to this Autolinker instance.\n       */\n\n      this.context = undefined; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n      /**\n       * @private\n       * @property {Autolinker.matcher.Matcher[]} matchers\n       *\n       * The {@link Autolinker.matcher.Matcher} instances for this Autolinker\n       * instance.\n       *\n       * This is lazily created in {@link #getMatchers}.\n       */\n\n      this.matchers = null;\n      /**\n       * @private\n       * @property {Autolinker.AnchorTagBuilder} tagBuilder\n       *\n       * The AnchorTagBuilder instance used to build match replacement anchor tags.\n       * Note: this is lazily instantiated in the {@link #getTagBuilder} method.\n       */\n\n      this.tagBuilder = null; // Note: when `this.something` is used in the rhs of these assignments,\n      //       it refers to the default values set above the constructor\n\n      this.urls = this.normalizeUrlsCfg(cfg.urls);\n      this.email = typeof cfg.email === 'boolean' ? cfg.email : this.email;\n      this.phone = typeof cfg.phone === 'boolean' ? cfg.phone : this.phone;\n      this.hashtag = cfg.hashtag || this.hashtag;\n      this.mention = cfg.mention || this.mention;\n      this.newWindow = typeof cfg.newWindow === 'boolean' ? cfg.newWindow : this.newWindow;\n      this.stripPrefix = this.normalizeStripPrefixCfg(cfg.stripPrefix);\n      this.stripTrailingSlash = typeof cfg.stripTrailingSlash === 'boolean' ? cfg.stripTrailingSlash : this.stripTrailingSlash;\n      this.decodePercentEncoding = typeof cfg.decodePercentEncoding === 'boolean' ? cfg.decodePercentEncoding : this.decodePercentEncoding; // Validate the value of the `mention` cfg\n\n      var mention = this.mention;\n\n      if (mention !== false && mention !== 'twitter' && mention !== 'instagram' && mention !== 'soundcloud') {\n        throw new Error(\"invalid `mention` cfg - see docs\");\n      } // Validate the value of the `hashtag` cfg\n\n\n      var hashtag = this.hashtag;\n\n      if (hashtag !== false && hashtag !== 'twitter' && hashtag !== 'facebook' && hashtag !== 'instagram') {\n        throw new Error(\"invalid `hashtag` cfg - see docs\");\n      }\n\n      this.truncate = this.normalizeTruncateCfg(cfg.truncate);\n      this.className = cfg.className || this.className;\n      this.replaceFn = cfg.replaceFn || this.replaceFn;\n      this.context = cfg.context || this;\n    }\n    /**\n     * Automatically links URLs, Email addresses, Phone Numbers, Twitter handles,\n     * Hashtags, and Mentions found in the given chunk of HTML. Does not link URLs\n     * found within HTML tags.\n     *\n     * For instance, if given the text: `You should go to http://www.yahoo.com`,\n     * then the result will be `You should go to &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n     *\n     * Example:\n     *\n     *     var linkedText = Autolinker.link( \"Go to google.com\", { newWindow: false } );\n     *     // Produces: \"Go to <a href=\"http://google.com\">google.com</a>\"\n     *\n     * @static\n     * @param {String} textOrHtml The HTML or text to find matches within (depending\n     *   on if the {@link #urls}, {@link #email}, {@link #phone}, {@link #mention},\n     *   {@link #hashtag}, and {@link #mention} options are enabled).\n     * @param {Object} [options] Any of the configuration options for the Autolinker\n     *   class, specified in an Object (map). See the class description for an\n     *   example call.\n     * @return {String} The HTML text, with matches automatically linked.\n     */\n\n\n    Autolinker.link = function (textOrHtml, options) {\n      var autolinker = new Autolinker(options);\n      return autolinker.link(textOrHtml);\n    };\n    /**\n     * Parses the input `textOrHtml` looking for URLs, email addresses, phone\n     * numbers, username handles, and hashtags (depending on the configuration\n     * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n     * objects describing those matches (without making any replacements).\n     *\n     * Note that if parsing multiple pieces of text, it is slightly more efficient\n     * to create an Autolinker instance, and use the instance-level {@link #parse}\n     * method.\n     *\n     * Example:\n     *\n     *     var matches = Autolinker.parse( \"Hello google.com, I am asdf@asdf.com\", {\n     *         urls: true,\n     *         email: true\n     *     } );\n     *\n     *     console.log( matches.length );           // 2\n     *     console.log( matches[ 0 ].getType() );   // 'url'\n     *     console.log( matches[ 0 ].getUrl() );    // 'google.com'\n     *     console.log( matches[ 1 ].getType() );   // 'email'\n     *     console.log( matches[ 1 ].getEmail() );  // 'asdf@asdf.com'\n     *\n     * @static\n     * @param {String} textOrHtml The HTML or text to find matches within\n     *   (depending on if the {@link #urls}, {@link #email}, {@link #phone},\n     *   {@link #hashtag}, and {@link #mention} options are enabled).\n     * @param {Object} [options] Any of the configuration options for the Autolinker\n     *   class, specified in an Object (map). See the class description for an\n     *   example call.\n     * @return {Autolinker.match.Match[]} The array of Matches found in the\n     *   given input `textOrHtml`.\n     */\n\n\n    Autolinker.parse = function (textOrHtml, options) {\n      var autolinker = new Autolinker(options);\n      return autolinker.parse(textOrHtml);\n    };\n    /**\n     * Normalizes the {@link #urls} config into an Object with 3 properties:\n     * `schemeMatches`, `wwwMatches`, and `tldMatches`, all Booleans.\n     *\n     * See {@link #urls} config for details.\n     *\n     * @private\n     * @param {Boolean/Object} urls\n     * @return {Object}\n     */\n\n\n    Autolinker.prototype.normalizeUrlsCfg = function (urls) {\n      if (urls == null) urls = true; // default to `true`\n\n      if (typeof urls === 'boolean') {\n        return {\n          schemeMatches: urls,\n          wwwMatches: urls,\n          tldMatches: urls\n        };\n      } else {\n        // object form\n        return {\n          schemeMatches: typeof urls.schemeMatches === 'boolean' ? urls.schemeMatches : true,\n          wwwMatches: typeof urls.wwwMatches === 'boolean' ? urls.wwwMatches : true,\n          tldMatches: typeof urls.tldMatches === 'boolean' ? urls.tldMatches : true\n        };\n      }\n    };\n    /**\n     * Normalizes the {@link #stripPrefix} config into an Object with 2\n     * properties: `scheme`, and `www` - both Booleans.\n     *\n     * See {@link #stripPrefix} config for details.\n     *\n     * @private\n     * @param {Boolean/Object} stripPrefix\n     * @return {Object}\n     */\n\n\n    Autolinker.prototype.normalizeStripPrefixCfg = function (stripPrefix) {\n      if (stripPrefix == null) stripPrefix = true; // default to `true`\n\n      if (typeof stripPrefix === 'boolean') {\n        return {\n          scheme: stripPrefix,\n          www: stripPrefix\n        };\n      } else {\n        // object form\n        return {\n          scheme: typeof stripPrefix.scheme === 'boolean' ? stripPrefix.scheme : true,\n          www: typeof stripPrefix.www === 'boolean' ? stripPrefix.www : true\n        };\n      }\n    };\n    /**\n     * Normalizes the {@link #truncate} config into an Object with 2 properties:\n     * `length` (Number), and `location` (String).\n     *\n     * See {@link #truncate} config for details.\n     *\n     * @private\n     * @param {Number/Object} truncate\n     * @return {Object}\n     */\n\n\n    Autolinker.prototype.normalizeTruncateCfg = function (truncate) {\n      if (typeof truncate === 'number') {\n        return {\n          length: truncate,\n          location: 'end'\n        };\n      } else {\n        // object, or undefined/null\n        return defaults(truncate || {}, {\n          length: Number.POSITIVE_INFINITY,\n          location: 'end'\n        });\n      }\n    };\n    /**\n     * Parses the input `textOrHtml` looking for URLs, email addresses, phone\n     * numbers, username handles, and hashtags (depending on the configuration\n     * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n     * objects describing those matches (without making any replacements).\n     *\n     * This method is used by the {@link #link} method, but can also be used to\n     * simply do parsing of the input in order to discover what kinds of links\n     * there are and how many.\n     *\n     * Example usage:\n     *\n     *     var autolinker = new Autolinker( {\n     *         urls: true,\n     *         email: true\n     *     } );\n     *\n     *     var matches = autolinker.parse( \"Hello google.com, I am asdf@asdf.com\" );\n     *\n     *     console.log( matches.length );           // 2\n     *     console.log( matches[ 0 ].getType() );   // 'url'\n     *     console.log( matches[ 0 ].getUrl() );    // 'google.com'\n     *     console.log( matches[ 1 ].getType() );   // 'email'\n     *     console.log( matches[ 1 ].getEmail() );  // 'asdf@asdf.com'\n     *\n     * @param {String} textOrHtml The HTML or text to find matches within\n     *   (depending on if the {@link #urls}, {@link #email}, {@link #phone},\n     *   {@link #hashtag}, and {@link #mention} options are enabled).\n     * @return {Autolinker.match.Match[]} The array of Matches found in the\n     *   given input `textOrHtml`.\n     */\n\n\n    Autolinker.prototype.parse = function (textOrHtml) {\n      var _this = this;\n\n      var skipTagNames = ['a', 'style', 'script'],\n          skipTagsStackCount = 0,\n          // used to only Autolink text outside of anchor/script/style tags. We don't want to autolink something that is already linked inside of an <a> tag, for instance\n      matches = []; // Find all matches within the `textOrHtml` (but not matches that are\n      // already nested within <a>, <style> and <script> tags)\n\n      parseHtml(textOrHtml, {\n        onOpenTag: function onOpenTag(tagName) {\n          if (skipTagNames.indexOf(tagName) >= 0) {\n            skipTagsStackCount++;\n          }\n        },\n        onText: function onText(text, offset) {\n          // Only process text nodes that are not within an <a>, <style> or <script> tag\n          if (skipTagsStackCount === 0) {\n            // \"Walk around\" common HTML entities. An '&nbsp;' (for example)\n            // could be at the end of a URL, but we don't want to\n            // include the trailing '&' in the URL. See issue #76\n            // TODO: Handle HTML entities separately in parseHtml() and\n            // don't emit them as \"text\" except for &amp; entities\n            var htmlCharacterEntitiesRegex = /(&nbsp;|&#160;|&lt;|&#60;|&gt;|&#62;|&quot;|&#34;|&#39;)/gi;\n            var textSplit = splitAndCapture(text, htmlCharacterEntitiesRegex);\n            var currentOffset_1 = offset;\n            textSplit.forEach(function (splitText, i) {\n              // even number matches are text, odd numbers are html entities\n              if (i % 2 === 0) {\n                var textNodeMatches = _this.parseText(splitText, currentOffset_1);\n\n                matches.push.apply(matches, textNodeMatches);\n              }\n\n              currentOffset_1 += splitText.length;\n            });\n          }\n        },\n        onCloseTag: function onCloseTag(tagName) {\n          if (skipTagNames.indexOf(tagName) >= 0) {\n            skipTagsStackCount = Math.max(skipTagsStackCount - 1, 0); // attempt to handle extraneous </a> tags by making sure the stack count never goes below 0\n          }\n        },\n        onComment: function onComment(offset) {},\n        onDoctype: function onDoctype(offset) {}\n      }); // After we have found all matches, remove subsequent matches that\n      // overlap with a previous match. This can happen for instance with URLs,\n      // where the url 'google.com/#link' would match '#link' as a hashtag.\n\n      matches = this.compactMatches(matches); // And finally, remove matches for match types that have been turned\n      // off. We needed to have all match types turned on initially so that\n      // things like hashtags could be filtered out if they were really just\n      // part of a URL match (for instance, as a named anchor).\n\n      matches = this.removeUnwantedMatches(matches);\n      return matches;\n    };\n    /**\n     * After we have found all matches, we need to remove matches that overlap\n     * with a previous match. This can happen for instance with URLs, where the\n     * url 'google.com/#link' would match '#link' as a hashtag. Because the\n     * '#link' part is contained in a larger match that comes before the HashTag\n     * match, we'll remove the HashTag match.\n     *\n     * @private\n     * @param {Autolinker.match.Match[]} matches\n     * @return {Autolinker.match.Match[]}\n     */\n\n\n    Autolinker.prototype.compactMatches = function (matches) {\n      // First, the matches need to be sorted in order of offset\n      matches.sort(function (a, b) {\n        return a.getOffset() - b.getOffset();\n      });\n\n      for (var i = 0; i < matches.length - 1; i++) {\n        var match = matches[i],\n            offset = match.getOffset(),\n            matchedTextLength = match.getMatchedText().length,\n            endIdx = offset + matchedTextLength;\n\n        if (i + 1 < matches.length) {\n          // Remove subsequent matches that equal offset with current match\n          if (matches[i + 1].getOffset() === offset) {\n            var removeIdx = matches[i + 1].getMatchedText().length > matchedTextLength ? i : i + 1;\n            matches.splice(removeIdx, 1);\n            continue;\n          } // Remove subsequent matches that overlap with the current match\n\n\n          if (matches[i + 1].getOffset() < endIdx) {\n            matches.splice(i + 1, 1);\n          }\n        }\n      }\n\n      return matches;\n    };\n    /**\n     * Removes matches for matchers that were turned off in the options. For\n     * example, if {@link #hashtag hashtags} were not to be matched, we'll\n     * remove them from the `matches` array here.\n     *\n     * Note: we *must* use all Matchers on the input string, and then filter\n     * them out later. For example, if the options were `{ url: false, hashtag: true }`,\n     * we wouldn't want to match the text '#link' as a HashTag inside of the text\n     * 'google.com/#link'. The way the algorithm works is that we match the full\n     * URL first (which prevents the accidental HashTag match), and then we'll\n     * simply throw away the URL match.\n     *\n     * @private\n     * @param {Autolinker.match.Match[]} matches The array of matches to remove\n     *   the unwanted matches from. Note: this array is mutated for the\n     *   removals.\n     * @return {Autolinker.match.Match[]} The mutated input `matches` array.\n     */\n\n\n    Autolinker.prototype.removeUnwantedMatches = function (matches) {\n      if (!this.hashtag) remove(matches, function (match) {\n        return match.getType() === 'hashtag';\n      });\n      if (!this.email) remove(matches, function (match) {\n        return match.getType() === 'email';\n      });\n      if (!this.phone) remove(matches, function (match) {\n        return match.getType() === 'phone';\n      });\n      if (!this.mention) remove(matches, function (match) {\n        return match.getType() === 'mention';\n      });\n\n      if (!this.urls.schemeMatches) {\n        remove(matches, function (m) {\n          return m.getType() === 'url' && m.getUrlMatchType() === 'scheme';\n        });\n      }\n\n      if (!this.urls.wwwMatches) {\n        remove(matches, function (m) {\n          return m.getType() === 'url' && m.getUrlMatchType() === 'www';\n        });\n      }\n\n      if (!this.urls.tldMatches) {\n        remove(matches, function (m) {\n          return m.getType() === 'url' && m.getUrlMatchType() === 'tld';\n        });\n      }\n\n      return matches;\n    };\n    /**\n     * Parses the input `text` looking for URLs, email addresses, phone\n     * numbers, username handles, and hashtags (depending on the configuration\n     * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n     * objects describing those matches.\n     *\n     * This method processes a **non-HTML string**, and is used to parse and\n     * match within the text nodes of an HTML string. This method is used\n     * internally by {@link #parse}.\n     *\n     * @private\n     * @param {String} text The text to find matches within (depending on if the\n     *   {@link #urls}, {@link #email}, {@link #phone},\n     *   {@link #hashtag}, and {@link #mention} options are enabled). This must be a non-HTML string.\n     * @param {Number} [offset=0] The offset of the text node within the\n     *   original string. This is used when parsing with the {@link #parse}\n     *   method to generate correct offsets within the {@link Autolinker.match.Match}\n     *   instances, but may be omitted if calling this method publicly.\n     * @return {Autolinker.match.Match[]} The array of Matches found in the\n     *   given input `text`.\n     */\n\n\n    Autolinker.prototype.parseText = function (text, offset) {\n      if (offset === void 0) {\n        offset = 0;\n      }\n\n      offset = offset || 0;\n      var matchers = this.getMatchers(),\n          matches = [];\n\n      for (var i = 0, numMatchers = matchers.length; i < numMatchers; i++) {\n        var textMatches = matchers[i].parseMatches(text); // Correct the offset of each of the matches. They are originally\n        // the offset of the match within the provided text node, but we\n        // need to correct them to be relative to the original HTML input\n        // string (i.e. the one provided to #parse).\n\n        for (var j = 0, numTextMatches = textMatches.length; j < numTextMatches; j++) {\n          textMatches[j].setOffset(offset + textMatches[j].getOffset());\n        }\n\n        matches.push.apply(matches, textMatches);\n      }\n\n      return matches;\n    };\n    /**\n     * Automatically links URLs, Email addresses, Phone numbers, Hashtags,\n     * and Mentions (Twitter, Instagram, Soundcloud) found in the given chunk of HTML. Does not link\n     * URLs found within HTML tags.\n     *\n     * For instance, if given the text: `You should go to http://www.yahoo.com`,\n     * then the result will be `You should go to\n     * &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n     *\n     * This method finds the text around any HTML elements in the input\n     * `textOrHtml`, which will be the text that is processed. Any original HTML\n     * elements will be left as-is, as well as the text that is already wrapped\n     * in anchor (&lt;a&gt;) tags.\n     *\n     * @param {String} textOrHtml The HTML or text to autolink matches within\n     *   (depending on if the {@link #urls}, {@link #email}, {@link #phone}, {@link #hashtag}, and {@link #mention} options are enabled).\n     * @return {String} The HTML, with matches automatically linked.\n     */\n\n\n    Autolinker.prototype.link = function (textOrHtml) {\n      if (!textOrHtml) {\n        return \"\";\n      } // handle `null` and `undefined`\n\n\n      var matches = this.parse(textOrHtml),\n          newHtml = [],\n          lastIndex = 0;\n\n      for (var i = 0, len = matches.length; i < len; i++) {\n        var match = matches[i];\n        newHtml.push(textOrHtml.substring(lastIndex, match.getOffset()));\n        newHtml.push(this.createMatchReturnVal(match));\n        lastIndex = match.getOffset() + match.getMatchedText().length;\n      }\n\n      newHtml.push(textOrHtml.substring(lastIndex)); // handle the text after the last match\n\n      return newHtml.join('');\n    };\n    /**\n     * Creates the return string value for a given match in the input string.\n     *\n     * This method handles the {@link #replaceFn}, if one was provided.\n     *\n     * @private\n     * @param {Autolinker.match.Match} match The Match object that represents\n     *   the match.\n     * @return {String} The string that the `match` should be replaced with.\n     *   This is usually the anchor tag string, but may be the `matchStr` itself\n     *   if the match is not to be replaced.\n     */\n\n\n    Autolinker.prototype.createMatchReturnVal = function (match) {\n      // Handle a custom `replaceFn` being provided\n      var replaceFnResult;\n\n      if (this.replaceFn) {\n        replaceFnResult = this.replaceFn.call(this.context, match); // Autolinker instance is the context\n      }\n\n      if (typeof replaceFnResult === 'string') {\n        return replaceFnResult; // `replaceFn` returned a string, use that\n      } else if (replaceFnResult === false) {\n        return match.getMatchedText(); // no replacement for the match\n      } else if (replaceFnResult instanceof HtmlTag) {\n        return replaceFnResult.toAnchorString();\n      } else {\n        // replaceFnResult === true, or no/unknown return value from function\n        // Perform Autolinker's default anchor tag generation\n        var anchorTag = match.buildTag(); // returns an Autolinker.HtmlTag instance\n\n        return anchorTag.toAnchorString();\n      }\n    };\n    /**\n     * Lazily instantiates and returns the {@link Autolinker.matcher.Matcher}\n     * instances for this Autolinker instance.\n     *\n     * @private\n     * @return {Autolinker.matcher.Matcher[]}\n     */\n\n\n    Autolinker.prototype.getMatchers = function () {\n      if (!this.matchers) {\n        var tagBuilder = this.getTagBuilder();\n        var matchers = [new HashtagMatcher({\n          tagBuilder: tagBuilder,\n          serviceName: this.hashtag\n        }), new EmailMatcher({\n          tagBuilder: tagBuilder\n        }), new PhoneMatcher({\n          tagBuilder: tagBuilder\n        }), new MentionMatcher({\n          tagBuilder: tagBuilder,\n          serviceName: this.mention\n        }), new UrlMatcher({\n          tagBuilder: tagBuilder,\n          stripPrefix: this.stripPrefix,\n          stripTrailingSlash: this.stripTrailingSlash,\n          decodePercentEncoding: this.decodePercentEncoding\n        })];\n        return this.matchers = matchers;\n      } else {\n        return this.matchers;\n      }\n    };\n    /**\n     * Returns the {@link #tagBuilder} instance for this Autolinker instance,\n     * lazily instantiating it if it does not yet exist.\n     *\n     * @private\n     * @return {Autolinker.AnchorTagBuilder}\n     */\n\n\n    Autolinker.prototype.getTagBuilder = function () {\n      var tagBuilder = this.tagBuilder;\n\n      if (!tagBuilder) {\n        tagBuilder = this.tagBuilder = new AnchorTagBuilder({\n          newWindow: this.newWindow,\n          truncate: this.truncate,\n          className: this.className\n        });\n      }\n\n      return tagBuilder;\n    };\n    /**\n     * @static\n     * @property {String} version\n     *\n     * The Autolinker version number in the form major.minor.patch\n     *\n     * Ex: 0.25.1\n     */\n\n\n    Autolinker.version = '3.11.0';\n    /**\n     * For backwards compatibility with Autolinker 1.x, the AnchorTagBuilder\n     * class is provided as a static on the Autolinker class.\n     */\n\n    Autolinker.AnchorTagBuilder = AnchorTagBuilder;\n    /**\n     * For backwards compatibility with Autolinker 1.x, the HtmlTag class is\n     * provided as a static on the Autolinker class.\n     */\n\n    Autolinker.HtmlTag = HtmlTag;\n    /**\n     * For backwards compatibility with Autolinker 1.x, the Matcher classes are\n     * provided as statics on the Autolinker class.\n     */\n\n    Autolinker.matcher = {\n      Email: EmailMatcher,\n      Hashtag: HashtagMatcher,\n      Matcher: Matcher,\n      Mention: MentionMatcher,\n      Phone: PhoneMatcher,\n      Url: UrlMatcher\n    };\n    /**\n     * For backwards compatibility with Autolinker 1.x, the Match classes are\n     * provided as statics on the Autolinker class.\n     */\n\n    Autolinker.match = {\n      Email: EmailMatch,\n      Hashtag: HashtagMatch,\n      Match: Match,\n      Mention: MentionMatch,\n      Phone: PhoneMatch,\n      Url: UrlMatch\n    };\n    return Autolinker;\n  }();\n\n  return Autolinker;\n});\n\nexport default tmp.Autolinker;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/ThirdParty/Autolinker.js"],"names":["tmp","global","factory","Autolinker","defaults","dest","src","prop","hasOwnProperty","undefined","ellipsis","str","truncateLen","ellipsisChars","ellipsisLength","length","substring","indexOf","arr","element","Array","prototype","i","len","remove","fn","splice","splitAndCapture","splitRegex","Error","result","lastIdx","match","exec","push","index","throwUnhandledCaseError","theValue","HtmlTag","cfg","tagName","attrs","innerHTML","whitespaceRegex","innerHtml","setTagName","getTagName","setAttr","attrName","attrValue","tagAttrs","getAttrs","getAttr","setAttrs","Object","assign","setClass","cssClass","addClass","classAttr","getClass","classes","split","newClasses","newClass","shift","join","removeClass","removeClasses","idx","hasClass","setInnerHTML","html","setInnerHtml","getInnerHTML","getInnerHtml","toAnchorString","attrsStr","buildAttrsStr","attrsArr","truncateSmart","url","ellipsisLengthBeforeParsing","parse_url","urlObj","urlSub","scheme","substr","host","path","query","fragment","buildUrl","buildSegment","segment","remainingAvailableLength","remainingAvailableLengthHalf","startOffset","Math","ceil","endOffset","floor","end","availableLength","matchQuery","replace","pathAndQuery","remainingAvailableLength2","truncateMiddle","truncateEnd","anchorText","AnchorTagBuilder","newWindow","truncate","className","build","createAttrs","processAnchorText","getAnchorText","getAnchorHref","createCssClass","returnClasses","cssClassSuffixes","getCssClassSuffixes","doTruncate","truncateLength","truncateLocation","location","Match","__jsduckDummyDocProp","matchedText","offset","tagBuilder","getMatchedText","setOffset","getOffset","getType","buildTag","extendStatics","d","b","setPrototypeOf","__proto__","p","__extends","__","constructor","create","__assign","t","s","n","arguments","call","apply","EmailMatch","_super","_this","email","getEmail","HashtagMatch","serviceName","hashtag","getServiceName","getHashtag","MentionMatch","mention","getMention","PhoneMatch","number","plusSign","getPhoneNumber","getNumber","UrlMatch","urlMatchType","protocolUrlMatch","protocolRelativeMatch","stripPrefix","www","stripTrailingSlash","decodePercentEncoding","schemePrefixRegex","wwwPrefixRegex","protocolRelativeRegex","protocolPrepended","getUrlMatchType","getUrl","stripProtocolRelativePrefix","stripSchemePrefix","stripWwwPrefix","removeTrailingSlash","removePercentEncoding","text","charAt","slice","preProcessedEntityAnchorText","decodeURIComponent","e","Matcher","letterRe","digitRe","whitespaceRe","quoteRe","controlCharsRe","alphaCharsStr","source","emojiStr","marksStr","alphaCharsAndMarksStr","decimalNumbersStr","alphaNumericCharsStr","alphaNumericAndMarksCharsStr","ipStr","domainLabelStr","getDomainLabelStr","group","getDomainNameStr","domainNameCharRegex","RegExp","tldRegex","EmailMatcher","localPartCharRegex","strictTldRegex","parseMatches","matches","noCurrentEmailMatch","CurrentEmailMatch","mailtoTransitions","charIdx","state","currentEmailMatch","char","stateNonEmailAddress","stateMailTo","stateLocalPart","stateLocalPartDot","stateAtSign","stateDomainChar","stateDomainHyphen","stateDomainDot","captureMatchIfValidAndReset","beginEmailMatch","test","prevChar","hasMailtoPrefix","resetToNonEmailMatchState","hasDomainDot","newState","emailAddress","doesEmailHaveValidTld","emailAddressTld","pop","emailAddressNormalized","toLowerCase","isValidTld","UrlMatchValidator","isValid","urlMatch","isValidUriScheme","urlMatchDoesNotHaveProtocolOrDot","urlMatchDoesNotHaveAtLeastOneWordChar","isValidIpAddress","containsMultipleDots","uriSchemeMatch","newRegex","hasFullProtocolRegex","ipRegex","uriScheme","stringBeforeSlash","uriSchemeMatchArr","uriSchemeRegex","hasWordCharAfterProtocolRegex","UrlMatcher","matcherRegex","schemeRegex","wwwRegex","urlSuffixRegex","wordCharRegExp","_loop_1","matchStr","schemeUrlMatch","wwwUrlMatch","wwwProtocolRelativeMatch","tldProtocolRelativeMatch","this_1","matchHasUnbalancedClosingParen","pos","matchHasInvalidCharAfterTld","foundCommonScheme","find","commonScheme","indexOfSchemeStart","endChar","startChar","numOpenBraces","max","re","res","HashtagMatcher","nonWordCharRegex","PhoneMatcher","cleanNumber","before","after","contextClear","testMatch","MentionMatcher","matcherRegexes","parseHtml","_a","onOpenTag","onCloseTag","onText","onComment","onDoctype","noCurrentTag","CurrentTag","currentDataIdx","currentTag","stateData","stateTagOpen","stateEndTagOpen","stateTagName","stateBeforeAttributeName","stateAttributeName","stateAfterAttributeName","stateBeforeAttributeValue","stateAttributeValueDoubleQuoted","stateAttributeValueSingleQuoted","stateAttributeValueUnquoted","stateAfterAttributeValueQuoted","stateSelfClosingStartTag","stateMarkupDeclarationOpen","stateCommentStart","stateCommentStartDash","stateComment","stateCommentEndDash","stateCommentEnd","stateCommentEndBang","stateDoctype","emitText","startNewTag","isClosing","isOpening","name","captureTagName","emitTagAndPreviousTextNode","resetToDataState","reconsumeCurrentCharacter","type","toUpperCase","textBeforeTag","startIdx","version","urls","phone","replaceFn","context","matchers","normalizeUrlsCfg","normalizeStripPrefixCfg","normalizeTruncateCfg","link","textOrHtml","options","autolinker","parse","schemeMatches","wwwMatches","tldMatches","Number","POSITIVE_INFINITY","skipTagNames","skipTagsStackCount","htmlCharacterEntitiesRegex","textSplit","currentOffset_1","forEach","splitText","textNodeMatches","parseText","compactMatches","removeUnwantedMatches","sort","a","matchedTextLength","endIdx","removeIdx","m","getMatchers","numMatchers","textMatches","j","numTextMatches","newHtml","lastIndex","createMatchReturnVal","replaceFnResult","anchorTag","getTagBuilder","matcher","Email","Hashtag","Mention","Phone","Url"],"mappings":"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","sourcesContent":["var tmp = {};\n\n/*!\n * Autolinker.js\n * 3.11.0\n *\n * Copyright(c) 2019 Gregory Jacobs <greg@greg-jacobs.com>\n * MIT License\n *\n * https://github.com/gregjacobs/Autolinker.js\n */\n(function (global, factory) {\n    global.Autolinker = factory();\n}(tmp, function () { 'use strict';\n\n    /**\n     * Assigns (shallow copies) the properties of `src` onto `dest`, if the\n     * corresponding property on `dest` === `undefined`.\n     *\n     * @param {Object} dest The destination object.\n     * @param {Object} src The source object.\n     * @return {Object} The destination object (`dest`)\n     */\n    function defaults(dest, src) {\n        for (var prop in src) {\n            if (src.hasOwnProperty(prop) && dest[prop] === undefined) {\n                dest[prop] = src[prop];\n            }\n        }\n        return dest;\n    }\n    /**\n     * Truncates the `str` at `len - ellipsisChars.length`, and adds the `ellipsisChars` to the\n     * end of the string (by default, two periods: '..'). If the `str` length does not exceed\n     * `len`, the string will be returned unchanged.\n     *\n     * @param {String} str The string to truncate and add an ellipsis to.\n     * @param {Number} truncateLen The length to truncate the string at.\n     * @param {String} [ellipsisChars=...] The ellipsis character(s) to add to the end of `str`\n     *   when truncated. Defaults to '...'\n     */\n    function ellipsis(str, truncateLen, ellipsisChars) {\n        var ellipsisLength;\n        if (str.length > truncateLen) {\n            if (ellipsisChars == null) {\n                ellipsisChars = '&hellip;';\n                ellipsisLength = 3;\n            }\n            else {\n                ellipsisLength = ellipsisChars.length;\n            }\n            str = str.substring(0, truncateLen - ellipsisLength) + ellipsisChars;\n        }\n        return str;\n    }\n    /**\n     * Supports `Array.prototype.indexOf()` functionality for old IE (IE8 and below).\n     *\n     * @param {Array} arr The array to find an element of.\n     * @param {*} element The element to find in the array, and return the index of.\n     * @return {Number} The index of the `element`, or -1 if it was not found.\n     */\n    function indexOf(arr, element) {\n        if (Array.prototype.indexOf) {\n            return arr.indexOf(element);\n        }\n        else {\n            for (var i = 0, len = arr.length; i < len; i++) {\n                if (arr[i] === element)\n                    return i;\n            }\n            return -1;\n        }\n    }\n    /**\n     * Removes array elements based on a filtering function. Mutates the input\n     * array.\n     *\n     * Using this instead of the ES5 Array.prototype.filter() function, to allow\n     * Autolinker compatibility with IE8, and also to prevent creating many new\n     * arrays in memory for filtering.\n     *\n     * @param {Array} arr The array to remove elements from. This array is\n     *   mutated.\n     * @param {Function} fn A function which should return `true` to\n     *   remove an element.\n     * @return {Array} The mutated input `arr`.\n     */\n    function remove(arr, fn) {\n        for (var i = arr.length - 1; i >= 0; i--) {\n            if (fn(arr[i]) === true) {\n                arr.splice(i, 1);\n            }\n        }\n    }\n    /**\n     * Performs the functionality of what modern browsers do when `String.prototype.split()` is called\n     * with a regular expression that contains capturing parenthesis.\n     *\n     * For example:\n     *\n     *     // Modern browsers:\n     *     \"a,b,c\".split( /(,)/ );  // --> [ 'a', ',', 'b', ',', 'c' ]\n     *\n     *     // Old IE (including IE8):\n     *     \"a,b,c\".split( /(,)/ );  // --> [ 'a', 'b', 'c' ]\n     *\n     * This method emulates the functionality of modern browsers for the old IE case.\n     *\n     * @param {String} str The string to split.\n     * @param {RegExp} splitRegex The regular expression to split the input `str` on. The splitting\n     *   character(s) will be spliced into the array, as in the \"modern browsers\" example in the\n     *   description of this method.\n     *   Note #1: the supplied regular expression **must** have the 'g' flag specified.\n     *   Note #2: for simplicity's sake, the regular expression does not need\n     *   to contain capturing parenthesis - it will be assumed that any match has them.\n     * @return {String[]} The split array of strings, with the splitting character(s) included.\n     */\n    function splitAndCapture(str, splitRegex) {\n        if (!splitRegex.global)\n            throw new Error(\"`splitRegex` must have the 'g' flag set\");\n        var result = [], lastIdx = 0, match;\n        while (match = splitRegex.exec(str)) {\n            result.push(str.substring(lastIdx, match.index));\n            result.push(match[0]); // push the splitting char(s)\n            lastIdx = match.index + match[0].length;\n        }\n        result.push(str.substring(lastIdx));\n        return result;\n    }\n    /**\n     * Function that should never be called but is used to check that every\n     * enum value is handled using TypeScript's 'never' type.\n     */\n    function throwUnhandledCaseError(theValue) {\n        throw new Error(\"Unhandled case for value: '\" + theValue + \"'\");\n    }\n\n    /**\n     * @class Autolinker.HtmlTag\n     * @extends Object\n     *\n     * Represents an HTML tag, which can be used to easily build/modify HTML tags programmatically.\n     *\n     * Autolinker uses this abstraction to create HTML tags, and then write them out as strings. You may also use\n     * this class in your code, especially within a {@link Autolinker#replaceFn replaceFn}.\n     *\n     * ## Examples\n     *\n     * Example instantiation:\n     *\n     *     var tag = new Autolinker.HtmlTag( {\n     *         tagName : 'a',\n     *         attrs   : { 'href': 'http://google.com', 'class': 'external-link' },\n     *         innerHtml : 'Google'\n     *     } );\n     *\n     *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n     *\n     *     // Individual accessor methods\n     *     tag.getTagName();                 // 'a'\n     *     tag.getAttr( 'href' );            // 'http://google.com'\n     *     tag.hasClass( 'external-link' );  // true\n     *\n     *\n     * Using mutator methods (which may be used in combination with instantiation config properties):\n     *\n     *     var tag = new Autolinker.HtmlTag();\n     *     tag.setTagName( 'a' );\n     *     tag.setAttr( 'href', 'http://google.com' );\n     *     tag.addClass( 'external-link' );\n     *     tag.setInnerHtml( 'Google' );\n     *\n     *     tag.getTagName();                 // 'a'\n     *     tag.getAttr( 'href' );            // 'http://google.com'\n     *     tag.hasClass( 'external-link' );  // true\n     *\n     *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n     *\n     *\n     * ## Example use within a {@link Autolinker#replaceFn replaceFn}\n     *\n     *     var html = Autolinker.link( \"Test google.com\", {\n     *         replaceFn : function( match ) {\n     *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance, configured with the Match's href and anchor text\n     *             tag.setAttr( 'rel', 'nofollow' );\n     *\n     *             return tag;\n     *         }\n     *     } );\n     *\n     *     // generated html:\n     *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n     *\n     *\n     * ## Example use with a new tag for the replacement\n     *\n     *     var html = Autolinker.link( \"Test google.com\", {\n     *         replaceFn : function( match ) {\n     *             var tag = new Autolinker.HtmlTag( {\n     *                 tagName : 'button',\n     *                 attrs   : { 'title': 'Load URL: ' + match.getAnchorHref() },\n     *                 innerHtml : 'Load URL: ' + match.getAnchorText()\n     *             } );\n     *\n     *             return tag;\n     *         }\n     *     } );\n     *\n     *     // generated html:\n     *     //   Test <button title=\"Load URL: http://google.com\">Load URL: google.com</button>\n     */\n    var HtmlTag = /** @class */ (function () {\n        /**\n         * @method constructor\n         * @param {Object} [cfg] The configuration properties for this class, in an Object (map)\n         */\n        function HtmlTag(cfg) {\n            if (cfg === void 0) { cfg = {}; }\n            /**\n             * @cfg {String} tagName\n             *\n             * The tag name. Ex: 'a', 'button', etc.\n             *\n             * Not required at instantiation time, but should be set using {@link #setTagName} before {@link #toAnchorString}\n             * is executed.\n             */\n            this.tagName = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {Object.<String, String>} attrs\n             *\n             * An key/value Object (map) of attributes to create the tag with. The keys are the attribute names, and the\n             * values are the attribute values.\n             */\n            this.attrs = {}; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {String} innerHTML\n             *\n             * The inner HTML for the tag.\n             */\n            this.innerHTML = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @protected\n             * @property {RegExp} whitespaceRegex\n             *\n             * Regular expression used to match whitespace in a string of CSS classes.\n             */\n            this.whitespaceRegex = /\\s+/; // default value just to get the above doc comment in the ES5 output and documentation generator\n            this.tagName = cfg.tagName || '';\n            this.attrs = cfg.attrs || {};\n            this.innerHTML = cfg.innerHtml || cfg.innerHTML || ''; // accept either the camelCased form or the fully capitalized acronym as in the DOM\n        }\n        /**\n         * Sets the tag name that will be used to generate the tag with.\n         *\n         * @param {String} tagName\n         * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n         */\n        HtmlTag.prototype.setTagName = function (tagName) {\n            this.tagName = tagName;\n            return this;\n        };\n        /**\n         * Retrieves the tag name.\n         *\n         * @return {String}\n         */\n        HtmlTag.prototype.getTagName = function () {\n            return this.tagName || '';\n        };\n        /**\n         * Sets an attribute on the HtmlTag.\n         *\n         * @param {String} attrName The attribute name to set.\n         * @param {String} attrValue The attribute value to set.\n         * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n         */\n        HtmlTag.prototype.setAttr = function (attrName, attrValue) {\n            var tagAttrs = this.getAttrs();\n            tagAttrs[attrName] = attrValue;\n            return this;\n        };\n        /**\n         * Retrieves an attribute from the HtmlTag. If the attribute does not exist, returns `undefined`.\n         *\n         * @param {String} attrName The attribute name to retrieve.\n         * @return {String} The attribute's value, or `undefined` if it does not exist on the HtmlTag.\n         */\n        HtmlTag.prototype.getAttr = function (attrName) {\n            return this.getAttrs()[attrName];\n        };\n        /**\n         * Sets one or more attributes on the HtmlTag.\n         *\n         * @param {Object.<String, String>} attrs A key/value Object (map) of the attributes to set.\n         * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n         */\n        HtmlTag.prototype.setAttrs = function (attrs) {\n            Object.assign(this.getAttrs(), attrs);\n            return this;\n        };\n        /**\n         * Retrieves the attributes Object (map) for the HtmlTag.\n         *\n         * @return {Object.<String, String>} A key/value object of the attributes for the HtmlTag.\n         */\n        HtmlTag.prototype.getAttrs = function () {\n            return this.attrs || (this.attrs = {});\n        };\n        /**\n         * Sets the provided `cssClass`, overwriting any current CSS classes on the HtmlTag.\n         *\n         * @param {String} cssClass One or more space-separated CSS classes to set (overwrite).\n         * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n         */\n        HtmlTag.prototype.setClass = function (cssClass) {\n            return this.setAttr('class', cssClass);\n        };\n        /**\n         * Convenience method to add one or more CSS classes to the HtmlTag. Will not add duplicate CSS classes.\n         *\n         * @param {String} cssClass One or more space-separated CSS classes to add.\n         * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n         */\n        HtmlTag.prototype.addClass = function (cssClass) {\n            var classAttr = this.getClass(), whitespaceRegex = this.whitespaceRegex, classes = (!classAttr) ? [] : classAttr.split(whitespaceRegex), newClasses = cssClass.split(whitespaceRegex), newClass;\n            while (newClass = newClasses.shift()) {\n                if (indexOf(classes, newClass) === -1) {\n                    classes.push(newClass);\n                }\n            }\n            this.getAttrs()['class'] = classes.join(\" \");\n            return this;\n        };\n        /**\n         * Convenience method to remove one or more CSS classes from the HtmlTag.\n         *\n         * @param {String} cssClass One or more space-separated CSS classes to remove.\n         * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n         */\n        HtmlTag.prototype.removeClass = function (cssClass) {\n            var classAttr = this.getClass(), whitespaceRegex = this.whitespaceRegex, classes = (!classAttr) ? [] : classAttr.split(whitespaceRegex), removeClasses = cssClass.split(whitespaceRegex), removeClass;\n            while (classes.length && (removeClass = removeClasses.shift())) {\n                var idx = indexOf(classes, removeClass);\n                if (idx !== -1) {\n                    classes.splice(idx, 1);\n                }\n            }\n            this.getAttrs()['class'] = classes.join(\" \");\n            return this;\n        };\n        /**\n         * Convenience method to retrieve the CSS class(es) for the HtmlTag, which will each be separated by spaces when\n         * there are multiple.\n         *\n         * @return {String}\n         */\n        HtmlTag.prototype.getClass = function () {\n            return this.getAttrs()['class'] || \"\";\n        };\n        /**\n         * Convenience method to check if the tag has a CSS class or not.\n         *\n         * @param {String} cssClass The CSS class to check for.\n         * @return {Boolean} `true` if the HtmlTag has the CSS class, `false` otherwise.\n         */\n        HtmlTag.prototype.hasClass = function (cssClass) {\n            return (' ' + this.getClass() + ' ').indexOf(' ' + cssClass + ' ') !== -1;\n        };\n        /**\n         * Sets the inner HTML for the tag.\n         *\n         * @param {String} html The inner HTML to set.\n         * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n         */\n        HtmlTag.prototype.setInnerHTML = function (html) {\n            this.innerHTML = html;\n            return this;\n        };\n        /**\n         * Backwards compatibility method name.\n         *\n         * @param {String} html The inner HTML to set.\n         * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n         */\n        HtmlTag.prototype.setInnerHtml = function (html) {\n            return this.setInnerHTML(html);\n        };\n        /**\n         * Retrieves the inner HTML for the tag.\n         *\n         * @return {String}\n         */\n        HtmlTag.prototype.getInnerHTML = function () {\n            return this.innerHTML || \"\";\n        };\n        /**\n         * Backward compatibility method name.\n         *\n         * @return {String}\n         */\n        HtmlTag.prototype.getInnerHtml = function () {\n            return this.getInnerHTML();\n        };\n        /**\n         * Override of superclass method used to generate the HTML string for the tag.\n         *\n         * @return {String}\n         */\n        HtmlTag.prototype.toAnchorString = function () {\n            var tagName = this.getTagName(), attrsStr = this.buildAttrsStr();\n            attrsStr = (attrsStr) ? ' ' + attrsStr : ''; // prepend a space if there are actually attributes\n            return ['<', tagName, attrsStr, '>', this.getInnerHtml(), '</', tagName, '>'].join(\"\");\n        };\n        /**\n         * Support method for {@link #toAnchorString}, returns the string space-separated key=\"value\" pairs, used to populate\n         * the stringified HtmlTag.\n         *\n         * @protected\n         * @return {String} Example return: `attr1=\"value1\" attr2=\"value2\"`\n         */\n        HtmlTag.prototype.buildAttrsStr = function () {\n            if (!this.attrs)\n                return \"\"; // no `attrs` Object (map) has been set, return empty string\n            var attrs = this.getAttrs(), attrsArr = [];\n            for (var prop in attrs) {\n                if (attrs.hasOwnProperty(prop)) {\n                    attrsArr.push(prop + '=\"' + attrs[prop] + '\"');\n                }\n            }\n            return attrsArr.join(\" \");\n        };\n        return HtmlTag;\n    }());\n\n    /**\n     * Date: 2015-10-05\n     * Author: Kasper Søfren <soefritz@gmail.com> (https://github.com/kafoso)\n     *\n     * A truncation feature, where the ellipsis will be placed at a section within\n     * the URL making it still somewhat human readable.\n     *\n     * @param {String} url\t\t\t\t\t\t A URL.\n     * @param {Number} truncateLen\t\t The maximum length of the truncated output URL string.\n     * @param {String} ellipsisChars\t The characters to place within the url, e.g. \"...\".\n     * @return {String} The truncated URL.\n     */\n    function truncateSmart(url, truncateLen, ellipsisChars) {\n        var ellipsisLengthBeforeParsing;\n        var ellipsisLength;\n        if (ellipsisChars == null) {\n            ellipsisChars = '&hellip;';\n            ellipsisLength = 3;\n            ellipsisLengthBeforeParsing = 8;\n        }\n        else {\n            ellipsisLength = ellipsisChars.length;\n            ellipsisLengthBeforeParsing = ellipsisChars.length;\n        }\n        var parse_url = function (url) {\n            var urlObj = {};\n            var urlSub = url;\n            var match = urlSub.match(/^([a-z]+):\\/\\//i);\n            if (match) {\n                urlObj.scheme = match[1];\n                urlSub = urlSub.substr(match[0].length);\n            }\n            match = urlSub.match(/^(.*?)(?=(\\?|#|\\/|$))/i);\n            if (match) {\n                urlObj.host = match[1];\n                urlSub = urlSub.substr(match[0].length);\n            }\n            match = urlSub.match(/^\\/(.*?)(?=(\\?|#|$))/i);\n            if (match) {\n                urlObj.path = match[1];\n                urlSub = urlSub.substr(match[0].length);\n            }\n            match = urlSub.match(/^\\?(.*?)(?=(#|$))/i);\n            if (match) {\n                urlObj.query = match[1];\n                urlSub = urlSub.substr(match[0].length);\n            }\n            match = urlSub.match(/^#(.*?)$/i);\n            if (match) {\n                urlObj.fragment = match[1];\n                //urlSub = urlSub.substr(match[0].length);  -- not used. Uncomment if adding another block.\n            }\n            return urlObj;\n        };\n        var buildUrl = function (urlObj) {\n            var url = \"\";\n            if (urlObj.scheme && urlObj.host) {\n                url += urlObj.scheme + \"://\";\n            }\n            if (urlObj.host) {\n                url += urlObj.host;\n            }\n            if (urlObj.path) {\n                url += \"/\" + urlObj.path;\n            }\n            if (urlObj.query) {\n                url += \"?\" + urlObj.query;\n            }\n            if (urlObj.fragment) {\n                url += \"#\" + urlObj.fragment;\n            }\n            return url;\n        };\n        var buildSegment = function (segment, remainingAvailableLength) {\n            var remainingAvailableLengthHalf = remainingAvailableLength / 2, startOffset = Math.ceil(remainingAvailableLengthHalf), endOffset = (-1) * Math.floor(remainingAvailableLengthHalf), end = \"\";\n            if (endOffset < 0) {\n                end = segment.substr(endOffset);\n            }\n            return segment.substr(0, startOffset) + ellipsisChars + end;\n        };\n        if (url.length <= truncateLen) {\n            return url;\n        }\n        var availableLength = truncateLen - ellipsisLength;\n        var urlObj = parse_url(url);\n        // Clean up the URL\n        if (urlObj.query) {\n            var matchQuery = urlObj.query.match(/^(.*?)(?=(\\?|\\#))(.*?)$/i);\n            if (matchQuery) {\n                // Malformed URL; two or more \"?\". Removed any content behind the 2nd.\n                urlObj.query = urlObj.query.substr(0, matchQuery[1].length);\n                url = buildUrl(urlObj);\n            }\n        }\n        if (url.length <= truncateLen) {\n            return url;\n        }\n        if (urlObj.host) {\n            urlObj.host = urlObj.host.replace(/^www\\./, \"\");\n            url = buildUrl(urlObj);\n        }\n        if (url.length <= truncateLen) {\n            return url;\n        }\n        // Process and build the URL\n        var str = \"\";\n        if (urlObj.host) {\n            str += urlObj.host;\n        }\n        if (str.length >= availableLength) {\n            if (urlObj.host.length == truncateLen) {\n                return (urlObj.host.substr(0, (truncateLen - ellipsisLength)) + ellipsisChars).substr(0, availableLength + ellipsisLengthBeforeParsing);\n            }\n            return buildSegment(str, availableLength).substr(0, availableLength + ellipsisLengthBeforeParsing);\n        }\n        var pathAndQuery = \"\";\n        if (urlObj.path) {\n            pathAndQuery += \"/\" + urlObj.path;\n        }\n        if (urlObj.query) {\n            pathAndQuery += \"?\" + urlObj.query;\n        }\n        if (pathAndQuery) {\n            if ((str + pathAndQuery).length >= availableLength) {\n                if ((str + pathAndQuery).length == truncateLen) {\n                    return (str + pathAndQuery).substr(0, truncateLen);\n                }\n                var remainingAvailableLength = availableLength - str.length;\n                return (str + buildSegment(pathAndQuery, remainingAvailableLength)).substr(0, availableLength + ellipsisLengthBeforeParsing);\n            }\n            else {\n                str += pathAndQuery;\n            }\n        }\n        if (urlObj.fragment) {\n            var fragment = \"#\" + urlObj.fragment;\n            if ((str + fragment).length >= availableLength) {\n                if ((str + fragment).length == truncateLen) {\n                    return (str + fragment).substr(0, truncateLen);\n                }\n                var remainingAvailableLength2 = availableLength - str.length;\n                return (str + buildSegment(fragment, remainingAvailableLength2)).substr(0, availableLength + ellipsisLengthBeforeParsing);\n            }\n            else {\n                str += fragment;\n            }\n        }\n        if (urlObj.scheme && urlObj.host) {\n            var scheme = urlObj.scheme + \"://\";\n            if ((str + scheme).length < availableLength) {\n                return (scheme + str).substr(0, truncateLen);\n            }\n        }\n        if (str.length <= truncateLen) {\n            return str;\n        }\n        var end = \"\";\n        if (availableLength > 0) {\n            end = str.substr((-1) * Math.floor(availableLength / 2));\n        }\n        return (str.substr(0, Math.ceil(availableLength / 2)) + ellipsisChars + end).substr(0, availableLength + ellipsisLengthBeforeParsing);\n    }\n\n    /**\n     * Date: 2015-10-05\n     * Author: Kasper Søfren <soefritz@gmail.com> (https://github.com/kafoso)\n     *\n     * A truncation feature, where the ellipsis will be placed in the dead-center of the URL.\n     *\n     * @param {String} url             A URL.\n     * @param {Number} truncateLen     The maximum length of the truncated output URL string.\n     * @param {String} ellipsisChars   The characters to place within the url, e.g. \"..\".\n     * @return {String} The truncated URL.\n     */\n    function truncateMiddle(url, truncateLen, ellipsisChars) {\n        if (url.length <= truncateLen) {\n            return url;\n        }\n        var ellipsisLengthBeforeParsing;\n        var ellipsisLength;\n        if (ellipsisChars == null) {\n            ellipsisChars = '&hellip;';\n            ellipsisLengthBeforeParsing = 8;\n            ellipsisLength = 3;\n        }\n        else {\n            ellipsisLengthBeforeParsing = ellipsisChars.length;\n            ellipsisLength = ellipsisChars.length;\n        }\n        var availableLength = truncateLen - ellipsisLength;\n        var end = \"\";\n        if (availableLength > 0) {\n            end = url.substr((-1) * Math.floor(availableLength / 2));\n        }\n        return (url.substr(0, Math.ceil(availableLength / 2)) + ellipsisChars + end).substr(0, availableLength + ellipsisLengthBeforeParsing);\n    }\n\n    /**\n     * A truncation feature where the ellipsis will be placed at the end of the URL.\n     *\n     * @param {String} anchorText\n     * @param {Number} truncateLen The maximum length of the truncated output URL string.\n     * @param {String} ellipsisChars The characters to place within the url, e.g. \"..\".\n     * @return {String} The truncated URL.\n     */\n    function truncateEnd(anchorText, truncateLen, ellipsisChars) {\n        return ellipsis(anchorText, truncateLen, ellipsisChars);\n    }\n\n    /**\n     * @protected\n     * @class Autolinker.AnchorTagBuilder\n     * @extends Object\n     *\n     * Builds anchor (&lt;a&gt;) tags for the Autolinker utility when a match is\n     * found.\n     *\n     * Normally this class is instantiated, configured, and used internally by an\n     * {@link Autolinker} instance, but may actually be used indirectly in a\n     * {@link Autolinker#replaceFn replaceFn} to create {@link Autolinker.HtmlTag HtmlTag}\n     * instances which may be modified before returning from the\n     * {@link Autolinker#replaceFn replaceFn}. For example:\n     *\n     *     var html = Autolinker.link( \"Test google.com\", {\n     *         replaceFn : function( match ) {\n     *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance\n     *             tag.setAttr( 'rel', 'nofollow' );\n     *\n     *             return tag;\n     *         }\n     *     } );\n     *\n     *     // generated html:\n     *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n     */\n    var AnchorTagBuilder = /** @class */ (function () {\n        /**\n         * @method constructor\n         * @param {Object} [cfg] The configuration options for the AnchorTagBuilder instance, specified in an Object (map).\n         */\n        function AnchorTagBuilder(cfg) {\n            if (cfg === void 0) { cfg = {}; }\n            /**\n             * @cfg {Boolean} newWindow\n             * @inheritdoc Autolinker#newWindow\n             */\n            this.newWindow = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {Object} truncate\n             * @inheritdoc Autolinker#truncate\n             */\n            this.truncate = {}; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {String} className\n             * @inheritdoc Autolinker#className\n             */\n            this.className = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n            this.newWindow = cfg.newWindow || false;\n            this.truncate = cfg.truncate || {};\n            this.className = cfg.className || '';\n        }\n        /**\n         * Generates the actual anchor (&lt;a&gt;) tag to use in place of the\n         * matched text, via its `match` object.\n         *\n         * @param {Autolinker.match.Match} match The Match instance to generate an\n         *   anchor tag from.\n         * @return {Autolinker.HtmlTag} The HtmlTag instance for the anchor tag.\n         */\n        AnchorTagBuilder.prototype.build = function (match) {\n            return new HtmlTag({\n                tagName: 'a',\n                attrs: this.createAttrs(match),\n                innerHtml: this.processAnchorText(match.getAnchorText())\n            });\n        };\n        /**\n         * Creates the Object (map) of the HTML attributes for the anchor (&lt;a&gt;)\n         *   tag being generated.\n         *\n         * @protected\n         * @param {Autolinker.match.Match} match The Match instance to generate an\n         *   anchor tag from.\n         * @return {Object} A key/value Object (map) of the anchor tag's attributes.\n         */\n        AnchorTagBuilder.prototype.createAttrs = function (match) {\n            var attrs = {\n                'href': match.getAnchorHref() // we'll always have the `href` attribute\n            };\n            var cssClass = this.createCssClass(match);\n            if (cssClass) {\n                attrs['class'] = cssClass;\n            }\n            if (this.newWindow) {\n                attrs['target'] = \"_blank\";\n                attrs['rel'] = \"noopener noreferrer\"; // Issue #149. See https://mathiasbynens.github.io/rel-noopener/\n            }\n            if (this.truncate) {\n                if (this.truncate.length && this.truncate.length < match.getAnchorText().length) {\n                    attrs['title'] = match.getAnchorHref();\n                }\n            }\n            return attrs;\n        };\n        /**\n         * Creates the CSS class that will be used for a given anchor tag, based on\n         * the `matchType` and the {@link #className} config.\n         *\n         * Example returns:\n         *\n         * - \"\"                                      // no {@link #className}\n         * - \"myLink myLink-url\"                     // url match\n         * - \"myLink myLink-email\"                   // email match\n         * - \"myLink myLink-phone\"                   // phone match\n         * - \"myLink myLink-hashtag\"                 // hashtag match\n         * - \"myLink myLink-mention myLink-twitter\"  // mention match with Twitter service\n         *\n         * @protected\n         * @param {Autolinker.match.Match} match The Match instance to generate an\n         *   anchor tag from.\n         * @return {String} The CSS class string for the link. Example return:\n         *   \"myLink myLink-url\". If no {@link #className} was configured, returns\n         *   an empty string.\n         */\n        AnchorTagBuilder.prototype.createCssClass = function (match) {\n            var className = this.className;\n            if (!className) {\n                return \"\";\n            }\n            else {\n                var returnClasses = [className], cssClassSuffixes = match.getCssClassSuffixes();\n                for (var i = 0, len = cssClassSuffixes.length; i < len; i++) {\n                    returnClasses.push(className + '-' + cssClassSuffixes[i]);\n                }\n                return returnClasses.join(' ');\n            }\n        };\n        /**\n         * Processes the `anchorText` by truncating the text according to the\n         * {@link #truncate} config.\n         *\n         * @private\n         * @param {String} anchorText The anchor tag's text (i.e. what will be\n         *   displayed).\n         * @return {String} The processed `anchorText`.\n         */\n        AnchorTagBuilder.prototype.processAnchorText = function (anchorText) {\n            anchorText = this.doTruncate(anchorText);\n            return anchorText;\n        };\n        /**\n         * Performs the truncation of the `anchorText` based on the {@link #truncate}\n         * option. If the `anchorText` is longer than the length specified by the\n         * {@link #truncate} option, the truncation is performed based on the\n         * `location` property. See {@link #truncate} for details.\n         *\n         * @private\n         * @param {String} anchorText The anchor tag's text (i.e. what will be\n         *   displayed).\n         * @return {String} The truncated anchor text.\n         */\n        AnchorTagBuilder.prototype.doTruncate = function (anchorText) {\n            var truncate = this.truncate;\n            if (!truncate || !truncate.length)\n                return anchorText;\n            var truncateLength = truncate.length, truncateLocation = truncate.location;\n            if (truncateLocation === 'smart') {\n                return truncateSmart(anchorText, truncateLength);\n            }\n            else if (truncateLocation === 'middle') {\n                return truncateMiddle(anchorText, truncateLength);\n            }\n            else {\n                return truncateEnd(anchorText, truncateLength);\n            }\n        };\n        return AnchorTagBuilder;\n    }());\n\n    /**\n     * @abstract\n     * @class Autolinker.match.Match\n     *\n     * Represents a match found in an input string which should be Autolinked. A Match object is what is provided in a\n     * {@link Autolinker#replaceFn replaceFn}, and may be used to query for details about the match.\n     *\n     * For example:\n     *\n     *     var input = \"...\";  // string with URLs, Email Addresses, and Mentions (Twitter, Instagram, Soundcloud)\n     *\n     *     var linkedText = Autolinker.link( input, {\n     *         replaceFn : function( match ) {\n     *             console.log( \"href = \", match.getAnchorHref() );\n     *             console.log( \"text = \", match.getAnchorText() );\n     *\n     *             switch( match.getType() ) {\n     *                 case 'url' :\n     *                     console.log( \"url: \", match.getUrl() );\n     *\n     *                 case 'email' :\n     *                     console.log( \"email: \", match.getEmail() );\n     *\n     *                 case 'mention' :\n     *                     console.log( \"mention: \", match.getMention() );\n     *             }\n     *         }\n     *     } );\n     *\n     * See the {@link Autolinker} class for more details on using the {@link Autolinker#replaceFn replaceFn}.\n     */\n    var Match = /** @class */ (function () {\n        /**\n         * @member Autolinker.match.Match\n         * @method constructor\n         * @param {Object} cfg The configuration properties for the Match\n         *   instance, specified in an Object (map).\n         */\n        function Match(cfg) {\n            /**\n             * @cfg {Autolinker.AnchorTagBuilder} tagBuilder (required)\n             *\n             * Reference to the AnchorTagBuilder instance to use to generate an anchor\n             * tag for the Match.\n             */\n            this.__jsduckDummyDocProp = null; // property used just to get the above doc comment into the ES5 output and documentation generator\n            /**\n             * @cfg {String} matchedText (required)\n             *\n             * The original text that was matched by the {@link Autolinker.matcher.Matcher}.\n             */\n            this.matchedText = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {Number} offset (required)\n             *\n             * The offset of where the match was made in the input string.\n             */\n            this.offset = 0; // default value just to get the above doc comment in the ES5 output and documentation generator\n            this.tagBuilder = cfg.tagBuilder;\n            this.matchedText = cfg.matchedText;\n            this.offset = cfg.offset;\n        }\n        /**\n         * Returns the original text that was matched.\n         *\n         * @return {String}\n         */\n        Match.prototype.getMatchedText = function () {\n            return this.matchedText;\n        };\n        /**\n         * Sets the {@link #offset} of where the match was made in the input string.\n         *\n         * A {@link Autolinker.matcher.Matcher} will be fed only HTML text nodes,\n         * and will therefore set an original offset that is relative to the HTML\n         * text node itself. However, we want this offset to be relative to the full\n         * HTML input string, and thus if using {@link Autolinker#parse} (rather\n         * than calling a {@link Autolinker.matcher.Matcher} directly), then this\n         * offset is corrected after the Matcher itself has done its job.\n         *\n         * @param {Number} offset\n         */\n        Match.prototype.setOffset = function (offset) {\n            this.offset = offset;\n        };\n        /**\n         * Returns the offset of where the match was made in the input string. This\n         * is the 0-based index of the match.\n         *\n         * @return {Number}\n         */\n        Match.prototype.getOffset = function () {\n            return this.offset;\n        };\n        /**\n         * Returns the CSS class suffix(es) for this match.\n         *\n         * A CSS class suffix is appended to the {@link Autolinker#className} in\n         * the {@link Autolinker.AnchorTagBuilder} when a match is translated into\n         * an anchor tag.\n         *\n         * For example, if {@link Autolinker#className} was configured as 'myLink',\n         * and this method returns `[ 'url' ]`, the final class name of the element\n         * will become: 'myLink myLink-url'.\n         *\n         * The match may provide multiple CSS class suffixes to be appended to the\n         * {@link Autolinker#className} in order to facilitate better styling\n         * options for different match criteria. See {@link Autolinker.match.Mention}\n         * for an example.\n         *\n         * By default, this method returns a single array with the match's\n         * {@link #getType type} name, but may be overridden by subclasses.\n         *\n         * @return {String[]}\n         */\n        Match.prototype.getCssClassSuffixes = function () {\n            return [this.getType()];\n        };\n        /**\n         * Builds and returns an {@link Autolinker.HtmlTag} instance based on the\n         * Match.\n         *\n         * This can be used to easily generate anchor tags from matches, and either\n         * return their HTML string, or modify them before doing so.\n         *\n         * Example Usage:\n         *\n         *     var tag = match.buildTag();\n         *     tag.addClass( 'cordova-link' );\n         *     tag.setAttr( 'target', '_system' );\n         *\n         *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"cordova-link\" target=\"_system\">Google</a>\n         *\n         * Example Usage in {@link Autolinker#replaceFn}:\n         *\n         *     var html = Autolinker.link( \"Test google.com\", {\n         *         replaceFn : function( match ) {\n         *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance\n         *             tag.setAttr( 'rel', 'nofollow' );\n         *\n         *             return tag;\n         *         }\n         *     } );\n         *\n         *     // generated html:\n         *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n         */\n        Match.prototype.buildTag = function () {\n            return this.tagBuilder.build(this);\n        };\n        return Match;\n    }());\n\n    /*! *****************************************************************************\n    Copyright (c) Microsoft Corporation. All rights reserved.\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\n    this file except in compliance with the License. You may obtain a copy of the\n    License at http://www.apache.org/licenses/LICENSE-2.0\n\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\n    MERCHANTABLITY OR NON-INFRINGEMENT.\n\n    See the Apache Version 2.0 License for specific language governing permissions\n    and limitations under the License.\n    ***************************************************************************** */\n    /* global Reflect, Promise */\n\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n\n    function __extends(d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    }\n\n    var __assign = function() {\n        __assign = Object.assign || function __assign(t) {\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\n                s = arguments[i];\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n            }\n            return t;\n        };\n        return __assign.apply(this, arguments);\n    };\n\n    /**\n     * @class Autolinker.match.Email\n     * @extends Autolinker.match.Match\n     *\n     * Represents a Email match found in an input string which should be Autolinked.\n     *\n     * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n     */\n    var EmailMatch = /** @class */ (function (_super) {\n        __extends(EmailMatch, _super);\n        /**\n         * @method constructor\n         * @param {Object} cfg The configuration properties for the Match\n         *   instance, specified in an Object (map).\n         */\n        function EmailMatch(cfg) {\n            var _this = _super.call(this, cfg) || this;\n            /**\n             * @cfg {String} email (required)\n             *\n             * The email address that was matched.\n             */\n            _this.email = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n            _this.email = cfg.email;\n            return _this;\n        }\n        /**\n         * Returns a string name for the type of match that this class represents.\n         * For the case of EmailMatch, returns 'email'.\n         *\n         * @return {String}\n         */\n        EmailMatch.prototype.getType = function () {\n            return 'email';\n        };\n        /**\n         * Returns the email address that was matched.\n         *\n         * @return {String}\n         */\n        EmailMatch.prototype.getEmail = function () {\n            return this.email;\n        };\n        /**\n         * Returns the anchor href that should be generated for the match.\n         *\n         * @return {String}\n         */\n        EmailMatch.prototype.getAnchorHref = function () {\n            return 'mailto:' + this.email;\n        };\n        /**\n         * Returns the anchor text that should be generated for the match.\n         *\n         * @return {String}\n         */\n        EmailMatch.prototype.getAnchorText = function () {\n            return this.email;\n        };\n        return EmailMatch;\n    }(Match));\n\n    /**\n     * @class Autolinker.match.Hashtag\n     * @extends Autolinker.match.Match\n     *\n     * Represents a Hashtag match found in an input string which should be\n     * Autolinked.\n     *\n     * See this class's superclass ({@link Autolinker.match.Match}) for more\n     * details.\n     */\n    var HashtagMatch = /** @class */ (function (_super) {\n        __extends(HashtagMatch, _super);\n        /**\n         * @method constructor\n         * @param {Object} cfg The configuration properties for the Match\n         *   instance, specified in an Object (map).\n         */\n        function HashtagMatch(cfg) {\n            var _this = _super.call(this, cfg) || this;\n            /**\n             * @cfg {String} serviceName\n             *\n             * The service to point hashtag matches to. See {@link Autolinker#hashtag}\n             * for available values.\n             */\n            _this.serviceName = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {String} hashtag (required)\n             *\n             * The HashtagMatch that was matched, without the '#'.\n             */\n            _this.hashtag = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n            _this.serviceName = cfg.serviceName;\n            _this.hashtag = cfg.hashtag;\n            return _this;\n        }\n        /**\n         * Returns a string name for the type of match that this class represents.\n         * For the case of HashtagMatch, returns 'hashtag'.\n         *\n         * @return {String}\n         */\n        HashtagMatch.prototype.getType = function () {\n            return 'hashtag';\n        };\n        /**\n         * Returns the configured {@link #serviceName} to point the HashtagMatch to.\n         * Ex: 'facebook', 'twitter'.\n         *\n         * @return {String}\n         */\n        HashtagMatch.prototype.getServiceName = function () {\n            return this.serviceName;\n        };\n        /**\n         * Returns the matched hashtag, without the '#' character.\n         *\n         * @return {String}\n         */\n        HashtagMatch.prototype.getHashtag = function () {\n            return this.hashtag;\n        };\n        /**\n         * Returns the anchor href that should be generated for the match.\n         *\n         * @return {String}\n         */\n        HashtagMatch.prototype.getAnchorHref = function () {\n            var serviceName = this.serviceName, hashtag = this.hashtag;\n            switch (serviceName) {\n                case 'twitter':\n                    return 'https://twitter.com/hashtag/' + hashtag;\n                case 'facebook':\n                    return 'https://www.facebook.com/hashtag/' + hashtag;\n                case 'instagram':\n                    return 'https://instagram.com/explore/tags/' + hashtag;\n                default: // Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case.\n                    throw new Error('Unknown service name to point hashtag to: ' + serviceName);\n            }\n        };\n        /**\n         * Returns the anchor text that should be generated for the match.\n         *\n         * @return {String}\n         */\n        HashtagMatch.prototype.getAnchorText = function () {\n            return '#' + this.hashtag;\n        };\n        return HashtagMatch;\n    }(Match));\n\n    /**\n     * @class Autolinker.match.Mention\n     * @extends Autolinker.match.Match\n     *\n     * Represents a Mention match found in an input string which should be Autolinked.\n     *\n     * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n     */\n    var MentionMatch = /** @class */ (function (_super) {\n        __extends(MentionMatch, _super);\n        /**\n         * @method constructor\n         * @param {Object} cfg The configuration properties for the Match\n         *   instance, specified in an Object (map).\n         */\n        function MentionMatch(cfg) {\n            var _this = _super.call(this, cfg) || this;\n            /**\n             * @cfg {String} serviceName\n             *\n             * The service to point mention matches to. See {@link Autolinker#mention}\n             * for available values.\n             */\n            _this.serviceName = 'twitter'; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {String} mention (required)\n             *\n             * The Mention that was matched, without the '@' character.\n             */\n            _this.mention = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n            _this.mention = cfg.mention;\n            _this.serviceName = cfg.serviceName;\n            return _this;\n        }\n        /**\n         * Returns a string name for the type of match that this class represents.\n         * For the case of MentionMatch, returns 'mention'.\n         *\n         * @return {String}\n         */\n        MentionMatch.prototype.getType = function () {\n            return 'mention';\n        };\n        /**\n         * Returns the mention, without the '@' character.\n         *\n         * @return {String}\n         */\n        MentionMatch.prototype.getMention = function () {\n            return this.mention;\n        };\n        /**\n         * Returns the configured {@link #serviceName} to point the mention to.\n         * Ex: 'instagram', 'twitter', 'soundcloud'.\n         *\n         * @return {String}\n         */\n        MentionMatch.prototype.getServiceName = function () {\n            return this.serviceName;\n        };\n        /**\n         * Returns the anchor href that should be generated for the match.\n         *\n         * @return {String}\n         */\n        MentionMatch.prototype.getAnchorHref = function () {\n            switch (this.serviceName) {\n                case 'twitter':\n                    return 'https://twitter.com/' + this.mention;\n                case 'instagram':\n                    return 'https://instagram.com/' + this.mention;\n                case 'soundcloud':\n                    return 'https://soundcloud.com/' + this.mention;\n                default: // Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case.\n                    throw new Error('Unknown service name to point mention to: ' + this.serviceName);\n            }\n        };\n        /**\n         * Returns the anchor text that should be generated for the match.\n         *\n         * @return {String}\n         */\n        MentionMatch.prototype.getAnchorText = function () {\n            return '@' + this.mention;\n        };\n        /**\n         * Returns the CSS class suffixes that should be used on a tag built with\n         * the match. See {@link Autolinker.match.Match#getCssClassSuffixes} for\n         * details.\n         *\n         * @return {String[]}\n         */\n        MentionMatch.prototype.getCssClassSuffixes = function () {\n            var cssClassSuffixes = _super.prototype.getCssClassSuffixes.call(this), serviceName = this.getServiceName();\n            if (serviceName) {\n                cssClassSuffixes.push(serviceName);\n            }\n            return cssClassSuffixes;\n        };\n        return MentionMatch;\n    }(Match));\n\n    /**\n     * @class Autolinker.match.Phone\n     * @extends Autolinker.match.Match\n     *\n     * Represents a Phone number match found in an input string which should be\n     * Autolinked.\n     *\n     * See this class's superclass ({@link Autolinker.match.Match}) for more\n     * details.\n     */\n    var PhoneMatch = /** @class */ (function (_super) {\n        __extends(PhoneMatch, _super);\n        /**\n         * @method constructor\n         * @param {Object} cfg The configuration properties for the Match\n         *   instance, specified in an Object (map).\n         */\n        function PhoneMatch(cfg) {\n            var _this = _super.call(this, cfg) || this;\n            /**\n             * @protected\n             * @property {String} number (required)\n             *\n             * The phone number that was matched, without any delimiter characters.\n             *\n             * Note: This is a string to allow for prefixed 0's.\n             */\n            _this.number = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @protected\n             * @property  {Boolean} plusSign (required)\n             *\n             * `true` if the matched phone number started with a '+' sign. We'll include\n             * it in the `tel:` URL if so, as this is needed for international numbers.\n             *\n             * Ex: '+1 (123) 456 7879'\n             */\n            _this.plusSign = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n            _this.number = cfg.number;\n            _this.plusSign = cfg.plusSign;\n            return _this;\n        }\n        /**\n         * Returns a string name for the type of match that this class represents.\n         * For the case of PhoneMatch, returns 'phone'.\n         *\n         * @return {String}\n         */\n        PhoneMatch.prototype.getType = function () {\n            return 'phone';\n        };\n        /**\n         * Returns the phone number that was matched as a string, without any\n         * delimiter characters.\n         *\n         * Note: This is a string to allow for prefixed 0's.\n         *\n         * @return {String}\n         */\n        PhoneMatch.prototype.getPhoneNumber = function () {\n            return this.number;\n        };\n        /**\n         * Alias of {@link #getPhoneNumber}, returns the phone number that was\n         * matched as a string, without any delimiter characters.\n         *\n         * Note: This is a string to allow for prefixed 0's.\n         *\n         * @return {String}\n         */\n        PhoneMatch.prototype.getNumber = function () {\n            return this.getPhoneNumber();\n        };\n        /**\n         * Returns the anchor href that should be generated for the match.\n         *\n         * @return {String}\n         */\n        PhoneMatch.prototype.getAnchorHref = function () {\n            return 'tel:' + (this.plusSign ? '+' : '') + this.number;\n        };\n        /**\n         * Returns the anchor text that should be generated for the match.\n         *\n         * @return {String}\n         */\n        PhoneMatch.prototype.getAnchorText = function () {\n            return this.matchedText;\n        };\n        return PhoneMatch;\n    }(Match));\n\n    /**\n     * @class Autolinker.match.Url\n     * @extends Autolinker.match.Match\n     *\n     * Represents a Url match found in an input string which should be Autolinked.\n     *\n     * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n     */\n    var UrlMatch = /** @class */ (function (_super) {\n        __extends(UrlMatch, _super);\n        /**\n         * @method constructor\n         * @param {Object} cfg The configuration properties for the Match\n         *   instance, specified in an Object (map).\n         */\n        function UrlMatch(cfg) {\n            var _this = _super.call(this, cfg) || this;\n            /**\n             * @cfg {String} url (required)\n             *\n             * The url that was matched.\n             */\n            _this.url = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {\"scheme\"/\"www\"/\"tld\"} urlMatchType (required)\n             *\n             * The type of URL match that this class represents. This helps to determine\n             * if the match was made in the original text with a prefixed scheme (ex:\n             * 'http://www.google.com'), a prefixed 'www' (ex: 'www.google.com'), or\n             * was matched by a known top-level domain (ex: 'google.com').\n             */\n            _this.urlMatchType = 'scheme'; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {Boolean} protocolUrlMatch (required)\n             *\n             * `true` if the URL is a match which already has a protocol (i.e.\n             * 'http://'), `false` if the match was from a 'www' or known TLD match.\n             */\n            _this.protocolUrlMatch = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {Boolean} protocolRelativeMatch (required)\n             *\n             * `true` if the URL is a protocol-relative match. A protocol-relative match\n             * is a URL that starts with '//', and will be either http:// or https://\n             * based on the protocol that the site is loaded under.\n             */\n            _this.protocolRelativeMatch = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {Object} stripPrefix (required)\n             *\n             * The Object form of {@link Autolinker#cfg-stripPrefix}.\n             */\n            _this.stripPrefix = { scheme: true, www: true }; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {Boolean} stripTrailingSlash (required)\n             * @inheritdoc Autolinker#cfg-stripTrailingSlash\n             */\n            _this.stripTrailingSlash = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {Boolean} decodePercentEncoding (required)\n             * @inheritdoc Autolinker#cfg-decodePercentEncoding\n             */\n            _this.decodePercentEncoding = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @private\n             * @property {RegExp} schemePrefixRegex\n             *\n             * A regular expression used to remove the 'http://' or 'https://' from\n             * URLs.\n             */\n            _this.schemePrefixRegex = /^(https?:\\/\\/)?/i;\n            /**\n             * @private\n             * @property {RegExp} wwwPrefixRegex\n             *\n             * A regular expression used to remove the 'www.' from URLs.\n             */\n            _this.wwwPrefixRegex = /^(https?:\\/\\/)?(www\\.)?/i;\n            /**\n             * @private\n             * @property {RegExp} protocolRelativeRegex\n             *\n             * The regular expression used to remove the protocol-relative '//' from the {@link #url} string, for purposes\n             * of {@link #getAnchorText}. A protocol-relative URL is, for example, \"//yahoo.com\"\n             */\n            _this.protocolRelativeRegex = /^\\/\\//;\n            /**\n             * @private\n             * @property {Boolean} protocolPrepended\n             *\n             * Will be set to `true` if the 'http://' protocol has been prepended to the {@link #url} (because the\n             * {@link #url} did not have a protocol)\n             */\n            _this.protocolPrepended = false;\n            _this.urlMatchType = cfg.urlMatchType;\n            _this.url = cfg.url;\n            _this.protocolUrlMatch = cfg.protocolUrlMatch;\n            _this.protocolRelativeMatch = cfg.protocolRelativeMatch;\n            _this.stripPrefix = cfg.stripPrefix;\n            _this.stripTrailingSlash = cfg.stripTrailingSlash;\n            _this.decodePercentEncoding = cfg.decodePercentEncoding;\n            return _this;\n        }\n        /**\n         * Returns a string name for the type of match that this class represents.\n         * For the case of UrlMatch, returns 'url'.\n         *\n         * @return {String}\n         */\n        UrlMatch.prototype.getType = function () {\n            return 'url';\n        };\n        /**\n         * Returns a string name for the type of URL match that this class\n         * represents.\n         *\n         * This helps to determine if the match was made in the original text with a\n         * prefixed scheme (ex: 'http://www.google.com'), a prefixed 'www' (ex:\n         * 'www.google.com'), or was matched by a known top-level domain (ex:\n         * 'google.com').\n         *\n         * @return {\"scheme\"/\"www\"/\"tld\"}\n         */\n        UrlMatch.prototype.getUrlMatchType = function () {\n            return this.urlMatchType;\n        };\n        /**\n         * Returns the url that was matched, assuming the protocol to be 'http://' if the original\n         * match was missing a protocol.\n         *\n         * @return {String}\n         */\n        UrlMatch.prototype.getUrl = function () {\n            var url = this.url;\n            // if the url string doesn't begin with a protocol, assume 'http://'\n            if (!this.protocolRelativeMatch && !this.protocolUrlMatch && !this.protocolPrepended) {\n                url = this.url = 'http://' + url;\n                this.protocolPrepended = true;\n            }\n            return url;\n        };\n        /**\n         * Returns the anchor href that should be generated for the match.\n         *\n         * @return {String}\n         */\n        UrlMatch.prototype.getAnchorHref = function () {\n            var url = this.getUrl();\n            return url.replace(/&amp;/g, '&'); // any &amp;'s in the URL should be converted back to '&' if they were displayed as &amp; in the source html\n        };\n        /**\n         * Returns the anchor text that should be generated for the match.\n         *\n         * @return {String}\n         */\n        UrlMatch.prototype.getAnchorText = function () {\n            var anchorText = this.getMatchedText();\n            if (this.protocolRelativeMatch) {\n                // Strip off any protocol-relative '//' from the anchor text\n                anchorText = this.stripProtocolRelativePrefix(anchorText);\n            }\n            if (this.stripPrefix.scheme) {\n                anchorText = this.stripSchemePrefix(anchorText);\n            }\n            if (this.stripPrefix.www) {\n                anchorText = this.stripWwwPrefix(anchorText);\n            }\n            if (this.stripTrailingSlash) {\n                anchorText = this.removeTrailingSlash(anchorText); // remove trailing slash, if there is one\n            }\n            if (this.decodePercentEncoding) {\n                anchorText = this.removePercentEncoding(anchorText);\n            }\n            return anchorText;\n        };\n        // ---------------------------------------\n        // Utility Functionality\n        /**\n         * Strips the scheme prefix (such as \"http://\" or \"https://\") from the given\n         * `url`.\n         *\n         * @private\n         * @param {String} url The text of the anchor that is being generated, for\n         *   which to strip off the url scheme.\n         * @return {String} The `url`, with the scheme stripped.\n         */\n        UrlMatch.prototype.stripSchemePrefix = function (url) {\n            return url.replace(this.schemePrefixRegex, '');\n        };\n        /**\n         * Strips the 'www' prefix from the given `url`.\n         *\n         * @private\n         * @param {String} url The text of the anchor that is being generated, for\n         *   which to strip off the 'www' if it exists.\n         * @return {String} The `url`, with the 'www' stripped.\n         */\n        UrlMatch.prototype.stripWwwPrefix = function (url) {\n            return url.replace(this.wwwPrefixRegex, '$1'); // leave any scheme ($1), it one exists\n        };\n        /**\n         * Strips any protocol-relative '//' from the anchor text.\n         *\n         * @private\n         * @param {String} text The text of the anchor that is being generated, for which to strip off the\n         *   protocol-relative prefix (such as stripping off \"//\")\n         * @return {String} The `anchorText`, with the protocol-relative prefix stripped.\n         */\n        UrlMatch.prototype.stripProtocolRelativePrefix = function (text) {\n            return text.replace(this.protocolRelativeRegex, '');\n        };\n        /**\n         * Removes any trailing slash from the given `anchorText`, in preparation for the text to be displayed.\n         *\n         * @private\n         * @param {String} anchorText The text of the anchor that is being generated, for which to remove any trailing\n         *   slash ('/') that may exist.\n         * @return {String} The `anchorText`, with the trailing slash removed.\n         */\n        UrlMatch.prototype.removeTrailingSlash = function (anchorText) {\n            if (anchorText.charAt(anchorText.length - 1) === '/') {\n                anchorText = anchorText.slice(0, -1);\n            }\n            return anchorText;\n        };\n        /**\n         * Decodes percent-encoded characters from the given `anchorText`, in\n         * preparation for the text to be displayed.\n         *\n         * @private\n         * @param {String} anchorText The text of the anchor that is being\n         *   generated, for which to decode any percent-encoded characters.\n         * @return {String} The `anchorText`, with the percent-encoded characters\n         *   decoded.\n         */\n        UrlMatch.prototype.removePercentEncoding = function (anchorText) {\n            // First, convert a few of the known % encodings to the corresponding\n            // HTML entities that could accidentally be interpretted as special\n            // HTML characters\n            var preProcessedEntityAnchorText = anchorText\n                .replace(/%22/gi, '&quot;') // \" char\n                .replace(/%26/gi, '&amp;') // & char\n                .replace(/%27/gi, '&#39;') // ' char\n                .replace(/%3C/gi, '&lt;') // < char\n                .replace(/%3E/gi, '&gt;'); // > char\n            try {\n                // Now attempt to decode the rest of the anchor text\n                return decodeURIComponent(preProcessedEntityAnchorText);\n            }\n            catch (e) { // Invalid % escape sequence in the anchor text\n                return preProcessedEntityAnchorText;\n            }\n        };\n        return UrlMatch;\n    }(Match));\n\n    /**\n     * @abstract\n     * @class Autolinker.matcher.Matcher\n     *\n     * An abstract class and interface for individual matchers to find matches in\n     * an input string with linkified versions of them.\n     *\n     * Note that Matchers do not take HTML into account - they must be fed the text\n     * nodes of any HTML string, which is handled by {@link Autolinker#parse}.\n     */\n    var Matcher = /** @class */ (function () {\n        /**\n         * @method constructor\n         * @param {Object} cfg The configuration properties for the Matcher\n         *   instance, specified in an Object (map).\n         */\n        function Matcher(cfg) {\n            /**\n             * @cfg {Autolinker.AnchorTagBuilder} tagBuilder (required)\n             *\n             * Reference to the AnchorTagBuilder instance to use to generate HTML tags\n             * for {@link Autolinker.match.Match Matches}.\n             */\n            this.__jsduckDummyDocProp = null; // property used just to get the above doc comment into the ES5 output and documentation generator\n            this.tagBuilder = cfg.tagBuilder;\n        }\n        return Matcher;\n    }());\n\n    /*\n     * This file builds and stores a library of the common regular expressions used\n     * by the Autolinker utility.\n     *\n     * Other regular expressions may exist ad-hoc, but these are generally the\n     * regular expressions that are shared between source files.\n     */\n    /**\n     * Regular expression to match upper and lowercase ASCII letters\n     */\n    var letterRe = /[A-Za-z]/;\n    /**\n     * Regular expression to match ASCII digits\n     */\n    var digitRe = /[0-9]/;\n    /**\n     * Regular expression to match whitespace\n     */\n    var whitespaceRe = /\\s/;\n    /**\n     * Regular expression to match quote characters\n     */\n    var quoteRe = /['\"]/;\n    /**\n     * Regular expression to match the range of ASCII control characters (0-31), and\n     * the backspace char (127)\n     */\n    var controlCharsRe = /[\\x00-\\x1F\\x7F]/;\n    /**\n     * The string form of a regular expression that would match all of the\n     * alphabetic (\"letter\") chars in the unicode character set when placed in a\n     * RegExp character class (`[]`). This includes all international alphabetic\n     * characters.\n     *\n     * These would be the characters matched by unicode regex engines `\\p{L}`\n     * escape (\"all letters\").\n     *\n     * Taken from the XRegExp library: http://xregexp.com/ (thanks @https://github.com/slevithan)\n     * Specifically: http://xregexp.com/v/3.2.0/xregexp-all.js, the 'Letter'\n     *   regex's bmp\n     *\n     * VERY IMPORTANT: This set of characters is defined inside of a Regular\n     *   Expression literal rather than a string literal to prevent UglifyJS from\n     *   compressing the unicode escape sequences into their actual unicode\n     *   characters. If Uglify compresses these into the unicode characters\n     *   themselves, this results in the error \"Range out of order in character\n     *   class\" when these characters are used inside of a Regular Expression\n     *   character class (`[]`). See usages of this const. Alternatively, we can set\n     *   the UglifyJS option `ascii_only` to true for the build, but that doesn't\n     *   help others who are pulling in Autolinker into their own build and running\n     *   UglifyJS themselves.\n     */\n    var alphaCharsStr = /A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC/\n        .source; // see note in above variable description\n    /**\n     * The string form of a regular expression that would match all emoji characters\n     * Source: https://www.regextester.com/106421\n     */\n    var emojiStr = /\\u00a9\\u00ae\\u2000-\\u3300\\ud83c\\ud000-\\udfff\\ud83d\\ud000-\\udfff\\ud83e\\ud000-\\udfff/\n        .source;\n    /**\n     * The string form of a regular expression that would match all of the\n     * combining mark characters in the unicode character set when placed in a\n     * RegExp character class (`[]`).\n     *\n     * These would be the characters matched by unicode regex engines `\\p{M}`\n     * escape (\"all marks\").\n     *\n     * Taken from the XRegExp library: http://xregexp.com/ (thanks @https://github.com/slevithan)\n     * Specifically: http://xregexp.com/v/3.2.0/xregexp-all.js, the 'Mark'\n     *   regex's bmp\n     *\n     * VERY IMPORTANT: This set of characters is defined inside of a Regular\n     *   Expression literal rather than a string literal to prevent UglifyJS from\n     *   compressing the unicode escape sequences into their actual unicode\n     *   characters. If Uglify compresses these into the unicode characters\n     *   themselves, this results in the error \"Range out of order in character\n     *   class\" when these characters are used inside of a Regular Expression\n     *   character class (`[]`). See usages of this const. Alternatively, we can set\n     *   the UglifyJS option `ascii_only` to true for the build, but that doesn't\n     *   help others who are pulling in Autolinker into their own build and running\n     *   UglifyJS themselves.\n     */\n    var marksStr = /\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D4-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D01-\\u0D03\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ABE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFB-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F/\n        .source; // see note in above variable description\n    /**\n     * The string form of a regular expression that would match all of the\n     * alphabetic (\"letter\") chars, emoji, and combining marks in the unicode character set\n     * when placed in a RegExp character class (`[]`). This includes all\n     * international alphabetic characters.\n     *\n     * These would be the characters matched by unicode regex engines `\\p{L}\\p{M}`\n     * escapes and emoji characters.\n     */\n    var alphaCharsAndMarksStr = alphaCharsStr + emojiStr + marksStr;\n    /**\n     * The string form of a regular expression that would match all of the\n     * decimal number chars in the unicode character set when placed in a RegExp\n     * character class (`[]`).\n     *\n     * These would be the characters matched by unicode regex engines `\\p{Nd}`\n     * escape (\"all decimal numbers\")\n     *\n     * Taken from the XRegExp library: http://xregexp.com/ (thanks @https://github.com/slevithan)\n     * Specifically: http://xregexp.com/v/3.2.0/xregexp-all.js, the 'Decimal_Number'\n     *   regex's bmp\n     *\n     * VERY IMPORTANT: This set of characters is defined inside of a Regular\n     *   Expression literal rather than a string literal to prevent UglifyJS from\n     *   compressing the unicode escape sequences into their actual unicode\n     *   characters. If Uglify compresses these into the unicode characters\n     *   themselves, this results in the error \"Range out of order in character\n     *   class\" when these characters are used inside of a Regular Expression\n     *   character class (`[]`). See usages of this const. Alternatively, we can set\n     *   the UglifyJS option `ascii_only` to true for the build, but that doesn't\n     *   help others who are pulling in Autolinker into their own build and running\n     *   UglifyJS themselves.\n     */\n    var decimalNumbersStr = /0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19/\n        .source; // see note in above variable description\n    /**\n     * The string form of a regular expression that would match all of the\n     * letters and decimal number chars in the unicode character set when placed in\n     * a RegExp character class (`[]`).\n     *\n     * These would be the characters matched by unicode regex engines\n     * `[\\p{L}\\p{Nd}]` escape (\"all letters and decimal numbers\")\n     */\n    var alphaNumericCharsStr = alphaCharsAndMarksStr + decimalNumbersStr;\n    /**\n     * The string form of a regular expression that would match all of the\n     * letters, combining marks, and decimal number chars in the unicode character\n     * set when placed in a RegExp character class (`[]`).\n     *\n     * These would be the characters matched by unicode regex engines\n     * `[\\p{L}\\p{M}\\p{Nd}]` escape (\"all letters, combining marks, and decimal\n     * numbers\")\n     */\n    var alphaNumericAndMarksCharsStr = alphaCharsAndMarksStr + decimalNumbersStr;\n    // Simplified IP regular expression\n    var ipStr = '(?:[' + decimalNumbersStr + ']{1,3}\\\\.){3}[' + decimalNumbersStr + ']{1,3}';\n    // Protected domain label which do not allow \"-\" character on the beginning and the end of a single label\n    var domainLabelStr = '[' + alphaNumericAndMarksCharsStr + '](?:[' + alphaNumericAndMarksCharsStr + '\\\\-]{0,61}[' + alphaNumericAndMarksCharsStr + '])?';\n    var getDomainLabelStr = function (group) {\n        return '(?=(' + domainLabelStr + '))\\\\' + group;\n    };\n    /**\n     * A function to match domain names of a URL or email address.\n     * Ex: 'google', 'yahoo', 'some-other-company', etc.\n     */\n    var getDomainNameStr = function (group) {\n        return '(?:' + getDomainLabelStr(group) + '(?:\\\\.' + getDomainLabelStr(group + 1) + '){0,126}|' + ipStr + ')';\n    };\n    /**\n     * A regular expression that is simply the character class of the characters\n     * that may be used in a domain name, minus the '-' or '.'\n     */\n    var domainNameCharRegex = new RegExp(\"[\" + alphaNumericAndMarksCharsStr + \"]\");\n\n    // NOTE: THIS IS A GENERATED FILE\n    // To update with the latest TLD list, run `npm run update-tld-regex` or `yarn update-tld-regex` (depending on which you have installed)\n    var tldRegex = /(?:xn--vermgensberatung-pwb|xn--vermgensberater-ctb|xn--clchc0ea0b2g2a9gcd|xn--w4r85el8fhu5dnra|northwesternmutual|travelersinsurance|vermögensberatung|xn--3oq18vl8pn36a|xn--5su34j936bgsg|xn--bck1b9a5dre4c|xn--mgbai9azgqp6j|xn--mgberp4a5d4ar|xn--xkc2dl3a5ee0h|vermögensberater|xn--fzys8d69uvgm|xn--mgba7c0bbn0a|xn--xkc2al3hye2a|americanexpress|kerryproperties|sandvikcoromant|xn--i1b6b1a6a2e|xn--kcrx77d1x4a|xn--lgbbat1ad8j|xn--mgba3a4f16a|xn--mgbaakc7dvf|xn--mgbc0a9azcg|xn--nqv7fs00ema|afamilycompany|americanfamily|bananarepublic|cancerresearch|cookingchannel|kerrylogistics|weatherchannel|xn--54b7fta0cc|xn--6qq986b3xl|xn--80aqecdr1a|xn--b4w605ferd|xn--fiq228c5hs|xn--h2breg3eve|xn--jlq61u9w7b|xn--mgba3a3ejt|xn--mgbaam7a8h|xn--mgbayh7gpa|xn--mgbb9fbpob|xn--mgbbh1a71e|xn--mgbca7dzdo|xn--mgbi4ecexp|xn--mgbx4cd0ab|xn--rvc1e0am3e|international|lifeinsurance|spreadbetting|travelchannel|wolterskluwer|xn--eckvdtc9d|xn--fpcrj9c3d|xn--fzc2c9e2c|xn--h2brj9c8c|xn--tiq49xqyj|xn--yfro4i67o|xn--ygbi2ammx|construction|lplfinancial|scholarships|versicherung|xn--3e0b707e|xn--45br5cyl|xn--80adxhks|xn--80asehdb|xn--8y0a063a|xn--gckr3f0f|xn--mgb9awbf|xn--mgbab2bd|xn--mgbgu82a|xn--mgbpl2fh|xn--mgbt3dhd|xn--mk1bu44c|xn--ngbc5azd|xn--ngbe9e0a|xn--ogbpf8fl|xn--qcka1pmc|accountants|barclaycard|blackfriday|blockbuster|bridgestone|calvinklein|contractors|creditunion|engineering|enterprises|foodnetwork|investments|kerryhotels|lamborghini|motorcycles|olayangroup|photography|playstation|productions|progressive|redumbrella|rightathome|williamhill|xn--11b4c3d|xn--1ck2e1b|xn--1qqw23a|xn--2scrj9c|xn--3bst00m|xn--3ds443g|xn--3hcrj9c|xn--42c2d9a|xn--45brj9c|xn--55qw42g|xn--6frz82g|xn--80ao21a|xn--9krt00a|xn--cck2b3b|xn--czr694b|xn--d1acj3b|xn--efvy88h|xn--estv75g|xn--fct429k|xn--fjq720a|xn--flw351e|xn--g2xx48c|xn--gecrj9c|xn--gk3at1e|xn--h2brj9c|xn--hxt814e|xn--imr513n|xn--j6w193g|xn--jvr189m|xn--kprw13d|xn--kpry57d|xn--kpu716f|xn--mgbbh1a|xn--mgbtx2b|xn--mix891f|xn--nyqy26a|xn--otu796d|xn--pbt977c|xn--pgbs0dh|xn--q9jyb4c|xn--rhqv96g|xn--rovu88b|xn--s9brj9c|xn--ses554g|xn--t60b56a|xn--vuq861b|xn--w4rs40l|xn--xhq521b|xn--zfr164b|சிங்கப்பூர்|accountant|apartments|associates|basketball|bnpparibas|boehringer|capitalone|consulting|creditcard|cuisinella|eurovision|extraspace|foundation|healthcare|immobilien|industries|management|mitsubishi|nationwide|newholland|nextdirect|onyourside|properties|protection|prudential|realestate|republican|restaurant|schaeffler|swiftcover|tatamotors|technology|telefonica|university|vistaprint|vlaanderen|volkswagen|xn--30rr7y|xn--3pxu8k|xn--45q11c|xn--4gbrim|xn--55qx5d|xn--5tzm5g|xn--80aswg|xn--90a3ac|xn--9dbq2a|xn--9et52u|xn--c2br7g|xn--cg4bki|xn--czrs0t|xn--czru2d|xn--fiq64b|xn--fiqs8s|xn--fiqz9s|xn--io0a7i|xn--kput3i|xn--mxtq1m|xn--o3cw4h|xn--pssy2u|xn--unup4y|xn--wgbh1c|xn--wgbl6a|xn--y9a3aq|accenture|alfaromeo|allfinanz|amsterdam|analytics|aquarelle|barcelona|bloomberg|christmas|community|directory|education|equipment|fairwinds|financial|firestone|fresenius|frontdoor|fujixerox|furniture|goldpoint|hisamitsu|homedepot|homegoods|homesense|honeywell|institute|insurance|kuokgroup|ladbrokes|lancaster|landrover|lifestyle|marketing|marshalls|melbourne|microsoft|panasonic|passagens|pramerica|richardli|scjohnson|shangrila|solutions|statebank|statefarm|stockholm|travelers|vacations|xn--90ais|xn--c1avg|xn--d1alf|xn--e1a4c|xn--fhbei|xn--j1aef|xn--j1amh|xn--l1acc|xn--ngbrx|xn--nqv7f|xn--p1acf|xn--tckwe|xn--vhquv|yodobashi|abudhabi|airforce|allstate|attorney|barclays|barefoot|bargains|baseball|boutique|bradesco|broadway|brussels|budapest|builders|business|capetown|catering|catholic|chrysler|cipriani|cityeats|cleaning|clinique|clothing|commbank|computer|delivery|deloitte|democrat|diamonds|discount|discover|download|engineer|ericsson|esurance|etisalat|everbank|exchange|feedback|fidelity|firmdale|football|frontier|goodyear|grainger|graphics|guardian|hdfcbank|helsinki|holdings|hospital|infiniti|ipiranga|istanbul|jpmorgan|lighting|lundbeck|marriott|maserati|mckinsey|memorial|merckmsd|mortgage|movistar|observer|partners|pharmacy|pictures|plumbing|property|redstone|reliance|saarland|samsclub|security|services|shopping|showtime|softbank|software|stcgroup|supplies|symantec|training|uconnect|vanguard|ventures|verisign|woodside|xn--90ae|xn--node|xn--p1ai|xn--qxam|yokohama|السعودية|abogado|academy|agakhan|alibaba|android|athleta|auction|audible|auspost|avianca|banamex|bauhaus|bentley|bestbuy|booking|brother|bugatti|capital|caravan|careers|cartier|channel|charity|chintai|citadel|clubmed|college|cologne|comcast|company|compare|contact|cooking|corsica|country|coupons|courses|cricket|cruises|dentist|digital|domains|exposed|express|farmers|fashion|ferrari|ferrero|finance|fishing|fitness|flights|florist|flowers|forsale|frogans|fujitsu|gallery|genting|godaddy|grocery|guitars|hamburg|hangout|hitachi|holiday|hosting|hoteles|hotmail|hyundai|iselect|ismaili|jewelry|juniper|kitchen|komatsu|lacaixa|lancome|lanxess|lasalle|latrobe|leclerc|liaison|limited|lincoln|markets|metlife|monster|netbank|netflix|network|neustar|okinawa|oldnavy|organic|origins|philips|pioneer|politie|realtor|recipes|rentals|reviews|rexroth|samsung|sandvik|schmidt|schwarz|science|shiksha|shriram|singles|staples|starhub|storage|support|surgery|systems|temasek|theater|theatre|tickets|tiffany|toshiba|trading|walmart|wanggou|watches|weather|website|wedding|whoswho|windows|winners|xfinity|yamaxun|youtube|zuerich|католик|اتصالات|الجزائر|العليان|پاکستان|كاثوليك|موبايلي|இந்தியா|abarth|abbott|abbvie|active|africa|agency|airbus|airtel|alipay|alsace|alstom|anquan|aramco|author|bayern|beauty|berlin|bharti|blanco|bostik|boston|broker|camera|career|caseih|casino|center|chanel|chrome|church|circle|claims|clinic|coffee|comsec|condos|coupon|credit|cruise|dating|datsun|dealer|degree|dental|design|direct|doctor|dunlop|dupont|durban|emerck|energy|estate|events|expert|family|flickr|futbol|gallup|garden|george|giving|global|google|gratis|health|hermes|hiphop|hockey|hotels|hughes|imamat|insure|intuit|jaguar|joburg|juegos|kaufen|kinder|kindle|kosher|lancia|latino|lawyer|lefrak|living|locker|london|luxury|madrid|maison|makeup|market|mattel|mobile|mobily|monash|mormon|moscow|museum|mutual|nagoya|natura|nissan|nissay|norton|nowruz|office|olayan|online|oracle|orange|otsuka|pfizer|photos|physio|piaget|pictet|quebec|racing|realty|reisen|repair|report|review|rocher|rogers|ryukyu|safety|sakura|sanofi|school|schule|search|secure|select|shouji|soccer|social|stream|studio|supply|suzuki|swatch|sydney|taipei|taobao|target|tattoo|tennis|tienda|tjmaxx|tkmaxx|toyota|travel|unicom|viajes|viking|villas|virgin|vision|voting|voyage|vuelos|walter|warman|webcam|xihuan|yachts|yandex|zappos|москва|онлайн|ابوظبي|ارامكو|الاردن|المغرب|امارات|فلسطين|مليسيا|भारतम्|இலங்கை|ファッション|actor|adult|aetna|amfam|amica|apple|archi|audio|autos|azure|baidu|beats|bible|bingo|black|boats|bosch|build|canon|cards|chase|cheap|cisco|citic|click|cloud|coach|codes|crown|cymru|dabur|dance|deals|delta|dodge|drive|dubai|earth|edeka|email|epost|epson|faith|fedex|final|forex|forum|gallo|games|gifts|gives|glade|glass|globo|gmail|green|gripe|group|gucci|guide|homes|honda|horse|house|hyatt|ikano|intel|irish|iveco|jetzt|koeln|kyoto|lamer|lease|legal|lexus|lilly|linde|lipsy|lixil|loans|locus|lotte|lotto|lupin|macys|mango|media|miami|money|mopar|movie|nadex|nexus|nikon|ninja|nokia|nowtv|omega|osaka|paris|parts|party|phone|photo|pizza|place|poker|praxi|press|prime|promo|quest|radio|rehab|reise|ricoh|rocks|rodeo|rugby|salon|sener|seven|sharp|shell|shoes|skype|sling|smart|smile|solar|space|sport|stada|store|study|style|sucks|swiss|tatar|tires|tirol|tmall|today|tokyo|tools|toray|total|tours|trade|trust|tunes|tushu|ubank|vegas|video|vodka|volvo|wales|watch|weber|weibo|works|world|xerox|yahoo|zippo|ایران|بازار|بھارت|سودان|سورية|همراه|भारोत|संगठन|বাংলা|భారత్|ഭാരതം|嘉里大酒店|aarp|able|adac|aero|aigo|akdn|ally|amex|arab|army|arpa|arte|asda|asia|audi|auto|baby|band|bank|bbva|beer|best|bike|bing|blog|blue|bofa|bond|book|buzz|cafe|call|camp|care|cars|casa|case|cash|cbre|cern|chat|citi|city|club|cool|coop|cyou|data|date|dclk|deal|dell|desi|diet|dish|docs|doha|duck|duns|dvag|erni|fage|fail|fans|farm|fast|fiat|fido|film|fire|fish|flir|food|ford|free|fund|game|gbiz|gent|ggee|gift|gmbh|gold|golf|goog|guge|guru|hair|haus|hdfc|help|here|hgtv|host|hsbc|icbc|ieee|imdb|immo|info|itau|java|jeep|jobs|jprs|kddi|kiwi|kpmg|kred|land|lego|lgbt|lidl|life|like|limo|link|live|loan|loft|love|ltda|luxe|maif|meet|meme|menu|mini|mint|mobi|moda|moto|name|navy|news|next|nico|nike|ollo|open|page|pars|pccw|pics|ping|pink|play|plus|pohl|porn|post|prod|prof|qpon|raid|read|reit|rent|rest|rich|rmit|room|rsvp|ruhr|safe|sale|sarl|save|saxo|scor|scot|seat|seek|sexy|shaw|shia|shop|show|silk|sina|site|skin|sncf|sohu|song|sony|spot|star|surf|talk|taxi|team|tech|teva|tiaa|tips|town|toys|tube|vana|visa|viva|vivo|vote|voto|wang|weir|wien|wiki|wine|work|xbox|yoga|zara|zero|zone|дети|сайт|بارت|بيتك|ڀارت|تونس|شبكة|عراق|عمان|موقع|भारत|ভারত|ভাৰত|ਭਾਰਤ|ભારત|ଭାରତ|ಭಾರತ|ලංකා|グーグル|クラウド|ポイント|大众汽车|组织机构|電訊盈科|香格里拉|aaa|abb|abc|aco|ads|aeg|afl|aig|anz|aol|app|art|aws|axa|bar|bbc|bbt|bcg|bcn|bet|bid|bio|biz|bms|bmw|bnl|bom|boo|bot|box|buy|bzh|cab|cal|cam|car|cat|cba|cbn|cbs|ceb|ceo|cfa|cfd|com|crs|csc|dad|day|dds|dev|dhl|diy|dnp|dog|dot|dtv|dvr|eat|eco|edu|esq|eus|fan|fit|fly|foo|fox|frl|ftr|fun|fyi|gal|gap|gdn|gea|gle|gmo|gmx|goo|gop|got|gov|hbo|hiv|hkt|hot|how|ibm|ice|icu|ifm|inc|ing|ink|int|ist|itv|jcb|jcp|jio|jll|jmp|jnj|jot|joy|kfh|kia|kim|kpn|krd|lat|law|lds|llc|lol|lpl|ltd|man|map|mba|med|men|mil|mit|mlb|mls|mma|moe|moi|mom|mov|msd|mtn|mtr|nab|nba|nec|net|new|nfl|ngo|nhk|now|nra|nrw|ntt|nyc|obi|off|one|ong|onl|ooo|org|ott|ovh|pay|pet|phd|pid|pin|pnc|pro|pru|pub|pwc|qvc|red|ren|ril|rio|rip|run|rwe|sap|sas|sbi|sbs|sca|scb|ses|sew|sex|sfr|ski|sky|soy|srl|srt|stc|tab|tax|tci|tdk|tel|thd|tjx|top|trv|tui|tvs|ubs|uno|uol|ups|vet|vig|vin|vip|wed|win|wme|wow|wtc|wtf|xin|xxx|xyz|you|yun|zip|бел|ком|қаз|мкд|мон|орг|рус|срб|укр|հայ|קום|عرب|قطر|كوم|مصر|कॉम|नेट|คอม|ไทย|ストア|セール|みんな|中文网|天主教|我爱你|新加坡|淡马锡|诺基亚|飞利浦|ac|ad|ae|af|ag|ai|al|am|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cw|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|za|zm|zw|ελ|бг|ею|рф|გე|닷넷|닷컴|삼성|한국|コム|世界|中信|中国|中國|企业|佛山|信息|健康|八卦|公司|公益|台湾|台灣|商城|商店|商标|嘉里|在线|大拿|娱乐|家電|工行|广东|微博|慈善|手机|手表|招聘|政务|政府|新闻|时尚|書籍|机构|游戏|澳門|点看|珠宝|移动|网址|网店|网站|网络|联通|谷歌|购物|通販|集团|食品|餐厅|香港)/;\n\n    // For debugging: search for other \"For debugging\" lines\n    // import CliTable from 'cli-table';\n    /**\n     * @class Autolinker.matcher.Email\n     * @extends Autolinker.matcher.Matcher\n     *\n     * Matcher to find email matches in an input string.\n     *\n     * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more details.\n     */\n    var EmailMatcher = /** @class */ (function (_super) {\n        __extends(EmailMatcher, _super);\n        function EmailMatcher() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            /**\n             * Valid characters that can be used in the \"local\" part of an email address,\n             * i.e. the \"name\" part of \"name@site.com\"\n             */\n            _this.localPartCharRegex = new RegExp(\"[\" + alphaNumericAndMarksCharsStr + \"!#$%&'*+/=?^_`{|}~-]\");\n            /**\n             * Stricter TLD regex which adds a beginning and end check to ensure\n             * the string is a valid TLD\n             */\n            _this.strictTldRegex = new RegExp(\"^\" + tldRegex.source + \"$\");\n            return _this;\n        }\n        /**\n         * @inheritdoc\n         */\n        EmailMatcher.prototype.parseMatches = function (text) {\n            var tagBuilder = this.tagBuilder, localPartCharRegex = this.localPartCharRegex, strictTldRegex = this.strictTldRegex, matches = [], len = text.length, noCurrentEmailMatch = new CurrentEmailMatch();\n            // for matching a 'mailto:' prefix\n            var mailtoTransitions = {\n                'm': 'a',\n                'a': 'i',\n                'i': 'l',\n                'l': 't',\n                't': 'o',\n                'o': ':',\n            };\n            var charIdx = 0, state = 0 /* NonEmailMatch */, currentEmailMatch = noCurrentEmailMatch;\n            // For debugging: search for other \"For debugging\" lines\n            // const table = new CliTable( {\n            // \thead: [ 'charIdx', 'char', 'state', 'charIdx', 'currentEmailAddress.idx', 'hasDomainDot' ]\n            // } );\n            while (charIdx < len) {\n                var char = text.charAt(charIdx);\n                // For debugging: search for other \"For debugging\" lines\n                // table.push(\n                // \t[ charIdx, char, State[ state ], charIdx, currentEmailAddress.idx, currentEmailAddress.hasDomainDot ]\n                // );\n                switch (state) {\n                    case 0 /* NonEmailMatch */:\n                        stateNonEmailAddress(char);\n                        break;\n                    case 1 /* Mailto */:\n                        stateMailTo(text.charAt(charIdx - 1), char);\n                        break;\n                    case 2 /* LocalPart */:\n                        stateLocalPart(char);\n                        break;\n                    case 3 /* LocalPartDot */:\n                        stateLocalPartDot(char);\n                        break;\n                    case 4 /* AtSign */:\n                        stateAtSign(char);\n                        break;\n                    case 5 /* DomainChar */:\n                        stateDomainChar(char);\n                        break;\n                    case 6 /* DomainHyphen */:\n                        stateDomainHyphen(char);\n                        break;\n                    case 7 /* DomainDot */:\n                        stateDomainDot(char);\n                        break;\n                    default:\n                        throwUnhandledCaseError(state);\n                }\n                // For debugging: search for other \"For debugging\" lines\n                // table.push(\n                // \t[ charIdx, char, State[ state ], charIdx, currentEmailAddress.idx, currentEmailAddress.hasDomainDot ]\n                // );\n                charIdx++;\n            }\n            // Capture any valid match at the end of the string\n            captureMatchIfValidAndReset();\n            // For debugging: search for other \"For debugging\" lines\n            //console.log( '\\n' + table.toString() );\n            return matches;\n            // Handles the state when we're not in an email address\n            function stateNonEmailAddress(char) {\n                if (char === 'm') {\n                    beginEmailMatch(1 /* Mailto */);\n                }\n                else if (localPartCharRegex.test(char)) {\n                    beginEmailMatch();\n                }\n            }\n            // Handles if we're reading a 'mailto:' prefix on the string\n            function stateMailTo(prevChar, char) {\n                if (prevChar === ':') {\n                    // We've reached the end of the 'mailto:' prefix\n                    if (localPartCharRegex.test(char)) {\n                        state = 2 /* LocalPart */;\n                        currentEmailMatch = new CurrentEmailMatch(__assign({}, currentEmailMatch, { hasMailtoPrefix: true }));\n                    }\n                    else {\n                        // we've matched 'mailto:' but didn't get anything meaningful\n                        // immediately afterwards (for example, we encountered a\n                        // space character, or an '@' character which formed 'mailto:@'\n                        resetToNonEmailMatchState();\n                    }\n                }\n                else if (mailtoTransitions[prevChar] === char) ;\n                else if (localPartCharRegex.test(char)) {\n                    // We we're reading a prefix of 'mailto:', but encountered a\n                    // different character that didn't continue the prefix\n                    state = 2 /* LocalPart */;\n                }\n                else if (char === '.') {\n                    // We we're reading a prefix of 'mailto:', but encountered a\n                    // dot character\n                    state = 3 /* LocalPartDot */;\n                }\n                else if (char === '@') {\n                    // We we're reading a prefix of 'mailto:', but encountered a\n                    // an @ character\n                    state = 4 /* AtSign */;\n                }\n                else {\n                    // not an email address character, return to \"NonEmailAddress\" state\n                    resetToNonEmailMatchState();\n                }\n            }\n            // Handles the state when we're currently in the \"local part\" of an\n            // email address (as opposed to the \"domain part\")\n            function stateLocalPart(char) {\n                if (char === '.') {\n                    state = 3 /* LocalPartDot */;\n                }\n                else if (char === '@') {\n                    state = 4 /* AtSign */;\n                }\n                else if (localPartCharRegex.test(char)) ;\n                else {\n                    // not an email address character, return to \"NonEmailAddress\" state\n                    resetToNonEmailMatchState();\n                }\n            }\n            // Handles the state where we've read\n            function stateLocalPartDot(char) {\n                if (char === '.') {\n                    // We read a second '.' in a row, not a valid email address\n                    // local part\n                    resetToNonEmailMatchState();\n                }\n                else if (char === '@') {\n                    // We read the '@' character immediately after a dot ('.'), not\n                    // an email address\n                    resetToNonEmailMatchState();\n                }\n                else if (localPartCharRegex.test(char)) {\n                    state = 2 /* LocalPart */;\n                }\n                else {\n                    // Anything else, not an email address\n                    resetToNonEmailMatchState();\n                }\n            }\n            function stateAtSign(char) {\n                if (domainNameCharRegex.test(char)) {\n                    state = 5 /* DomainChar */;\n                }\n                else {\n                    // Anything else, not an email address\n                    resetToNonEmailMatchState();\n                }\n            }\n            function stateDomainChar(char) {\n                if (char === '.') {\n                    state = 7 /* DomainDot */;\n                }\n                else if (char === '-') {\n                    state = 6 /* DomainHyphen */;\n                }\n                else if (domainNameCharRegex.test(char)) ;\n                else {\n                    // Anything else, we potentially matched if the criteria has\n                    // been met\n                    captureMatchIfValidAndReset();\n                }\n            }\n            function stateDomainHyphen(char) {\n                if (char === '-' || char === '.') {\n                    // Not valid to have two hyphens (\"--\") or hypen+dot (\"-.\")\n                    captureMatchIfValidAndReset();\n                }\n                else if (domainNameCharRegex.test(char)) {\n                    state = 5 /* DomainChar */;\n                }\n                else {\n                    // Anything else\n                    captureMatchIfValidAndReset();\n                }\n            }\n            function stateDomainDot(char) {\n                if (char === '.' || char === '-') {\n                    // not valid to have two dots (\"..\") or dot+hypen (\".-\")\n                    captureMatchIfValidAndReset();\n                }\n                else if (domainNameCharRegex.test(char)) {\n                    state = 5 /* DomainChar */;\n                    // After having read a '.' and then a valid domain character,\n                    // we now know that the domain part of the email is valid, and\n                    // we have found at least a partial EmailMatch (however, the\n                    // email address may have additional characters from this point)\n                    currentEmailMatch = new CurrentEmailMatch(__assign({}, currentEmailMatch, { hasDomainDot: true }));\n                }\n                else {\n                    // Anything else\n                    captureMatchIfValidAndReset();\n                }\n            }\n            function beginEmailMatch(newState) {\n                if (newState === void 0) { newState = 2 /* LocalPart */; }\n                state = newState;\n                currentEmailMatch = new CurrentEmailMatch({ idx: charIdx });\n            }\n            function resetToNonEmailMatchState() {\n                state = 0 /* NonEmailMatch */;\n                currentEmailMatch = noCurrentEmailMatch;\n            }\n            /*\n             * Captures the current email address as an EmailMatch if it's valid,\n             * and resets the state to read another email address.\n             */\n            function captureMatchIfValidAndReset() {\n                if (currentEmailMatch.hasDomainDot) { // we need at least one dot in the domain to be considered a valid email address\n                    var matchedText = text.slice(currentEmailMatch.idx, charIdx);\n                    // If we read a '.' or '-' char that ended the email address\n                    // (valid domain name characters, but only valid email address\n                    // characters if they are followed by something else), strip\n                    // it off now\n                    if (/[-.]$/.test(matchedText)) {\n                        matchedText = matchedText.slice(0, -1);\n                    }\n                    var emailAddress = currentEmailMatch.hasMailtoPrefix\n                        ? matchedText.slice('mailto:'.length)\n                        : matchedText;\n                    // if the email address has a valid TLD, add it to the list of matches\n                    if (doesEmailHaveValidTld(emailAddress)) {\n                        matches.push(new EmailMatch({\n                            tagBuilder: tagBuilder,\n                            matchedText: matchedText,\n                            offset: currentEmailMatch.idx,\n                            email: emailAddress\n                        }));\n                    }\n                }\n                resetToNonEmailMatchState();\n                /**\n                 * Determines if the given email address has a valid TLD or not\n                 * @param {string} emailAddress - email address\n                 * @return {Boolean} - true is email have valid TLD, false otherwise\n                 */\n                function doesEmailHaveValidTld(emailAddress) {\n                    var emailAddressTld = emailAddress.split('.').pop() || '';\n                    var emailAddressNormalized = emailAddressTld.toLowerCase();\n                    var isValidTld = strictTldRegex.test(emailAddressNormalized);\n                    return isValidTld;\n                }\n            }\n        };\n        return EmailMatcher;\n    }(Matcher));\n    var CurrentEmailMatch = /** @class */ (function () {\n        function CurrentEmailMatch(cfg) {\n            if (cfg === void 0) { cfg = {}; }\n            this.idx = cfg.idx !== undefined ? cfg.idx : -1;\n            this.hasMailtoPrefix = !!cfg.hasMailtoPrefix;\n            this.hasDomainDot = !!cfg.hasDomainDot;\n        }\n        return CurrentEmailMatch;\n    }());\n\n    /**\n     * @private\n     * @class Autolinker.matcher.UrlMatchValidator\n     * @singleton\n     *\n     * Used by Autolinker to filter out false URL positives from the\n     * {@link Autolinker.matcher.Url UrlMatcher}.\n     *\n     * Due to the limitations of regular expressions (including the missing feature\n     * of look-behinds in JS regular expressions), we cannot always determine the\n     * validity of a given match. This class applies a bit of additional logic to\n     * filter out any false positives that have been matched by the\n     * {@link Autolinker.matcher.Url UrlMatcher}.\n     */\n    var UrlMatchValidator = /** @class */ (function () {\n        function UrlMatchValidator() {\n        }\n        /**\n         * Determines if a given URL match found by the {@link Autolinker.matcher.Url UrlMatcher}\n         * is valid. Will return `false` for:\n         *\n         * 1) URL matches which do not have at least have one period ('.') in the\n         *    domain name (effectively skipping over matches like \"abc:def\").\n         *    However, URL matches with a protocol will be allowed (ex: 'http://localhost')\n         * 2) URL matches which do not have at least one word character in the\n         *    domain name (effectively skipping over matches like \"git:1.0\").\n         * 3) A protocol-relative url match (a URL beginning with '//') whose\n         *    previous character is a word character (effectively skipping over\n         *    strings like \"abc//google.com\")\n         *\n         * Otherwise, returns `true`.\n         *\n         * @param {String} urlMatch The matched URL, if there was one. Will be an\n         *   empty string if the match is not a URL match.\n         * @param {String} protocolUrlMatch The match URL string for a protocol\n         *   match. Ex: 'http://yahoo.com'. This is used to match something like\n         *   'http://localhost', where we won't double check that the domain name\n         *   has at least one '.' in it.\n         * @return {Boolean} `true` if the match given is valid and should be\n         *   processed, or `false` if the match is invalid and/or should just not be\n         *   processed.\n         */\n        UrlMatchValidator.isValid = function (urlMatch, protocolUrlMatch) {\n            if ((protocolUrlMatch && !this.isValidUriScheme(protocolUrlMatch)) ||\n                this.urlMatchDoesNotHaveProtocolOrDot(urlMatch, protocolUrlMatch) || // At least one period ('.') must exist in the URL match for us to consider it an actual URL, *unless* it was a full protocol match (like 'http://localhost')\n                (this.urlMatchDoesNotHaveAtLeastOneWordChar(urlMatch, protocolUrlMatch) && // At least one letter character must exist in the domain name after a protocol match. Ex: skip over something like \"git:1.0\"\n                    !this.isValidIpAddress(urlMatch)) || // Except if it's an IP address\n                this.containsMultipleDots(urlMatch)) {\n                return false;\n            }\n            return true;\n        };\n        UrlMatchValidator.isValidIpAddress = function (uriSchemeMatch) {\n            var newRegex = new RegExp(this.hasFullProtocolRegex.source + this.ipRegex.source);\n            var uriScheme = uriSchemeMatch.match(newRegex);\n            return uriScheme !== null;\n        };\n        UrlMatchValidator.containsMultipleDots = function (urlMatch) {\n            var stringBeforeSlash = urlMatch;\n            if (this.hasFullProtocolRegex.test(urlMatch)) {\n                stringBeforeSlash = urlMatch.split('://')[1];\n            }\n            return stringBeforeSlash.split('/')[0].indexOf(\"..\") > -1;\n        };\n        /**\n         * Determines if the URI scheme is a valid scheme to be autolinked. Returns\n         * `false` if the scheme is 'javascript:' or 'vbscript:'\n         *\n         * @private\n         * @param {String} uriSchemeMatch The match URL string for a full URI scheme\n         *   match. Ex: 'http://yahoo.com' or 'mailto:a@a.com'.\n         * @return {Boolean} `true` if the scheme is a valid one, `false` otherwise.\n         */\n        UrlMatchValidator.isValidUriScheme = function (uriSchemeMatch) {\n            var uriSchemeMatchArr = uriSchemeMatch.match(this.uriSchemeRegex), uriScheme = uriSchemeMatchArr && uriSchemeMatchArr[0].toLowerCase();\n            return (uriScheme !== 'javascript:' && uriScheme !== 'vbscript:');\n        };\n        /**\n         * Determines if a URL match does not have either:\n         *\n         * a) a full protocol (i.e. 'http://'), or\n         * b) at least one dot ('.') in the domain name (for a non-full-protocol\n         *    match).\n         *\n         * Either situation is considered an invalid URL (ex: 'git:d' does not have\n         * either the '://' part, or at least one dot in the domain name. If the\n         * match was 'git:abc.com', we would consider this valid.)\n         *\n         * @private\n         * @param {String} urlMatch The matched URL, if there was one. Will be an\n         *   empty string if the match is not a URL match.\n         * @param {String} protocolUrlMatch The match URL string for a protocol\n         *   match. Ex: 'http://yahoo.com'. This is used to match something like\n         *   'http://localhost', where we won't double check that the domain name\n         *   has at least one '.' in it.\n         * @return {Boolean} `true` if the URL match does not have a full protocol,\n         *   or at least one dot ('.') in a non-full-protocol match.\n         */\n        UrlMatchValidator.urlMatchDoesNotHaveProtocolOrDot = function (urlMatch, protocolUrlMatch) {\n            return (!!urlMatch && (!protocolUrlMatch || !this.hasFullProtocolRegex.test(protocolUrlMatch)) && urlMatch.indexOf('.') === -1);\n        };\n        /**\n         * Determines if a URL match does not have at least one word character after\n         * the protocol (i.e. in the domain name).\n         *\n         * At least one letter character must exist in the domain name after a\n         * protocol match. Ex: skip over something like \"git:1.0\"\n         *\n         * @private\n         * @param {String} urlMatch The matched URL, if there was one. Will be an\n         *   empty string if the match is not a URL match.\n         * @param {String} protocolUrlMatch The match URL string for a protocol\n         *   match. Ex: 'http://yahoo.com'. This is used to know whether or not we\n         *   have a protocol in the URL string, in order to check for a word\n         *   character after the protocol separator (':').\n         * @return {Boolean} `true` if the URL match does not have at least one word\n         *   character in it after the protocol, `false` otherwise.\n         */\n        UrlMatchValidator.urlMatchDoesNotHaveAtLeastOneWordChar = function (urlMatch, protocolUrlMatch) {\n            if (urlMatch && protocolUrlMatch) {\n                return !this.hasWordCharAfterProtocolRegex.test(urlMatch);\n            }\n            else {\n                return false;\n            }\n        };\n        /**\n         * Regex to test for a full protocol, with the two trailing slashes. Ex: 'http://'\n         *\n         * @private\n         * @property {RegExp} hasFullProtocolRegex\n         */\n        UrlMatchValidator.hasFullProtocolRegex = /^[A-Za-z][-.+A-Za-z0-9]*:\\/\\//;\n        /**\n         * Regex to find the URI scheme, such as 'mailto:'.\n         *\n         * This is used to filter out 'javascript:' and 'vbscript:' schemes.\n         *\n         * @private\n         * @property {RegExp} uriSchemeRegex\n         */\n        UrlMatchValidator.uriSchemeRegex = /^[A-Za-z][-.+A-Za-z0-9]*:/;\n        /**\n         * Regex to determine if at least one word char exists after the protocol (i.e. after the ':')\n         *\n         * @private\n         * @property {RegExp} hasWordCharAfterProtocolRegex\n         */\n        UrlMatchValidator.hasWordCharAfterProtocolRegex = new RegExp(\":[^\\\\s]*?[\" + alphaCharsStr + \"]\");\n        /**\n         * Regex to determine if the string is a valid IP address\n         *\n         * @private\n         * @property {RegExp} ipRegex\n         */\n        UrlMatchValidator.ipRegex = /[0-9][0-9]?[0-9]?\\.[0-9][0-9]?[0-9]?\\.[0-9][0-9]?[0-9]?\\.[0-9][0-9]?[0-9]?(:[0-9]*)?\\/?$/;\n        return UrlMatchValidator;\n    }());\n\n    /**\n     * @class Autolinker.matcher.Url\n     * @extends Autolinker.matcher.Matcher\n     *\n     * Matcher to find URL matches in an input string.\n     *\n     * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more details.\n     */\n    var UrlMatcher = /** @class */ (function (_super) {\n        __extends(UrlMatcher, _super);\n        /**\n         * @method constructor\n         * @param {Object} cfg The configuration properties for the Match instance,\n         *   specified in an Object (map).\n         */\n        function UrlMatcher(cfg) {\n            var _this = _super.call(this, cfg) || this;\n            /**\n             * @cfg {Object} stripPrefix (required)\n             *\n             * The Object form of {@link Autolinker#cfg-stripPrefix}.\n             */\n            _this.stripPrefix = { scheme: true, www: true }; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {Boolean} stripTrailingSlash (required)\n             * @inheritdoc Autolinker#stripTrailingSlash\n             */\n            _this.stripTrailingSlash = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {Boolean} decodePercentEncoding (required)\n             * @inheritdoc Autolinker#decodePercentEncoding\n             */\n            _this.decodePercentEncoding = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @protected\n             * @property {RegExp} matcherRegex\n             *\n             * The regular expression to match URLs with an optional scheme, port\n             * number, path, query string, and hash anchor.\n             *\n             * Example matches:\n             *\n             *     http://google.com\n             *     www.google.com\n             *     google.com/path/to/file?q1=1&q2=2#myAnchor\n             *\n             *\n             * This regular expression will have the following capturing groups:\n             *\n             * 1.  Group that matches a scheme-prefixed URL (i.e. 'http://google.com').\n             *     This is used to match scheme URLs with just a single word, such as\n             *     'http://localhost', where we won't double check that the domain name\n             *     has at least one dot ('.') in it.\n             * 2.  Group that matches a 'www.' prefixed URL. This is only matched if the\n             *     'www.' text was not prefixed by a scheme (i.e.: not prefixed by\n             *     'http://', 'ftp:', etc.)\n             * 3.  A protocol-relative ('//') match for the case of a 'www.' prefixed\n             *     URL. Will be an empty string if it is not a protocol-relative match.\n             *     We need to know the character before the '//' in order to determine\n             *     if it is a valid match or the // was in a string we don't want to\n             *     auto-link.\n             * 4.  Group that matches a known TLD (top level domain), when a scheme\n             *     or 'www.'-prefixed domain is not matched.\n             * 5.  A protocol-relative ('//') match for the case of a known TLD prefixed\n             *     URL. Will be an empty string if it is not a protocol-relative match.\n             *     See #3 for more info.\n             */\n            _this.matcherRegex = (function () {\n                var schemeRegex = /(?:[A-Za-z][-.+A-Za-z0-9]{0,63}:(?![A-Za-z][-.+A-Za-z0-9]{0,63}:\\/\\/)(?!\\d+\\/?)(?:\\/\\/)?)/, // match protocol, allow in format \"http://\" or \"mailto:\". However, do not match the first part of something like 'link:http://www.google.com' (i.e. don't match \"link:\"). Also, make sure we don't interpret 'google.com:8000' as if 'google.com' was a protocol here (i.e. ignore a trailing port number in this regex)\n                wwwRegex = /(?:www\\.)/, // starting with 'www.'\n                // Allow optional path, query string, and hash anchor, not ending in the following characters: \"?!:,.;\"\n                // http://blog.codinghorror.com/the-problem-with-urls/\n                urlSuffixRegex = new RegExp('[/?#](?:[' + alphaNumericAndMarksCharsStr + '\\\\-+&@#/%=~_()|\\'$*\\\\[\\\\]?!:,.;\\u2713]*[' + alphaNumericAndMarksCharsStr + '\\\\-+&@#/%=~_()|\\'$*\\\\[\\\\]\\u2713])?');\n                return new RegExp([\n                    '(?:',\n                    '(',\n                    schemeRegex.source,\n                    getDomainNameStr(2),\n                    ')',\n                    '|',\n                    '(',\n                    '(//)?',\n                    wwwRegex.source,\n                    getDomainNameStr(6),\n                    ')',\n                    '|',\n                    '(',\n                    '(//)?',\n                    getDomainNameStr(10) + '\\\\.',\n                    tldRegex.source,\n                    '(?![-' + alphaNumericCharsStr + '])',\n                    ')',\n                    ')',\n                    '(?::[0-9]+)?',\n                    '(?:' + urlSuffixRegex.source + ')?' // match for path, query string, and/or hash anchor - optional\n                ].join(\"\"), 'gi');\n            })();\n            /**\n             * A regular expression to use to check the character before a protocol-relative\n             * URL match. We don't want to match a protocol-relative URL if it is part\n             * of another word.\n             *\n             * For example, we want to match something like \"Go to: //google.com\",\n             * but we don't want to match something like \"abc//google.com\"\n             *\n             * This regular expression is used to test the character before the '//'.\n             *\n             * @protected\n             * @type {RegExp} wordCharRegExp\n             */\n            _this.wordCharRegExp = new RegExp('[' + alphaNumericAndMarksCharsStr + ']');\n            _this.stripPrefix = cfg.stripPrefix;\n            _this.stripTrailingSlash = cfg.stripTrailingSlash;\n            _this.decodePercentEncoding = cfg.decodePercentEncoding;\n            return _this;\n        }\n        /**\n         * @inheritdoc\n         */\n        UrlMatcher.prototype.parseMatches = function (text) {\n            var matcherRegex = this.matcherRegex, stripPrefix = this.stripPrefix, stripTrailingSlash = this.stripTrailingSlash, decodePercentEncoding = this.decodePercentEncoding, tagBuilder = this.tagBuilder, matches = [], match;\n            var _loop_1 = function () {\n                var matchStr = match[0], schemeUrlMatch = match[1], wwwUrlMatch = match[4], wwwProtocolRelativeMatch = match[5],\n                //tldUrlMatch = match[ 8 ],  -- not needed at the moment\n                tldProtocolRelativeMatch = match[9], offset = match.index, protocolRelativeMatch = wwwProtocolRelativeMatch || tldProtocolRelativeMatch, prevChar = text.charAt(offset - 1);\n                if (!UrlMatchValidator.isValid(matchStr, schemeUrlMatch)) {\n                    return \"continue\";\n                }\n                // If the match is preceded by an '@' character, then it is either\n                // an email address or a username. Skip these types of matches.\n                if (offset > 0 && prevChar === '@') {\n                    return \"continue\";\n                }\n                // If it's a protocol-relative '//' match, but the character before the '//'\n                // was a word character (i.e. a letter/number), then we found the '//' in the\n                // middle of another word (such as \"asdf//asdf.com\"). In this case, skip the\n                // match.\n                if (offset > 0 && protocolRelativeMatch && this_1.wordCharRegExp.test(prevChar)) {\n                    return \"continue\";\n                }\n                // If the URL ends with a question mark, don't include the question\n                // mark as part of the URL. We'll assume the question mark was the\n                // end of a sentence, such as: \"Going to google.com?\"\n                if (/\\?$/.test(matchStr)) {\n                    matchStr = matchStr.substr(0, matchStr.length - 1);\n                }\n                // Handle a closing parenthesis or square bracket at the end of the\n                // match, and exclude it if there is not a matching open parenthesis\n                // or square bracket in the match itself.\n                if (this_1.matchHasUnbalancedClosingParen(matchStr)) {\n                    matchStr = matchStr.substr(0, matchStr.length - 1); // remove the trailing \")\"\n                }\n                else {\n                    // Handle an invalid character after the TLD\n                    var pos = this_1.matchHasInvalidCharAfterTld(matchStr, schemeUrlMatch);\n                    if (pos > -1) {\n                        matchStr = matchStr.substr(0, pos); // remove the trailing invalid chars\n                    }\n                }\n                // The autolinker accepts many characters in a url's scheme (like `fake://test.com`).\n                // However, in cases where a URL is missing whitespace before an obvious link,\n                // (for example: `nowhitespacehttp://www.test.com`), we only want the match to start\n                // at the http:// part. We will check if the match contains a common scheme and then\n                // shift the match to start from there.\n                var foundCommonScheme = ['http://', 'https://'].find(function (commonScheme) { return !!schemeUrlMatch && schemeUrlMatch.indexOf(commonScheme) !== -1; });\n                if (foundCommonScheme) {\n                    // If we found an overmatched URL, we want to find the index\n                    // of where the match should start and shift the match to\n                    // start from the beginning of the common scheme\n                    var indexOfSchemeStart = matchStr.indexOf(foundCommonScheme);\n                    matchStr = matchStr.substr(indexOfSchemeStart);\n                    schemeUrlMatch = schemeUrlMatch.substr(indexOfSchemeStart);\n                    offset = offset + indexOfSchemeStart;\n                }\n                var urlMatchType = schemeUrlMatch ? 'scheme' : (wwwUrlMatch ? 'www' : 'tld'), protocolUrlMatch = !!schemeUrlMatch;\n                matches.push(new UrlMatch({\n                    tagBuilder: tagBuilder,\n                    matchedText: matchStr,\n                    offset: offset,\n                    urlMatchType: urlMatchType,\n                    url: matchStr,\n                    protocolUrlMatch: protocolUrlMatch,\n                    protocolRelativeMatch: !!protocolRelativeMatch,\n                    stripPrefix: stripPrefix,\n                    stripTrailingSlash: stripTrailingSlash,\n                    decodePercentEncoding: decodePercentEncoding,\n                }));\n            };\n            var this_1 = this;\n            while ((match = matcherRegex.exec(text)) !== null) {\n                _loop_1();\n            }\n            return matches;\n        };\n        /**\n         * Determines if a match found has an unmatched closing parenthesis or\n         * square bracket. If so, the parenthesis or square bracket will be removed\n         * from the match itself, and appended after the generated anchor tag.\n         *\n         * A match may have an extra closing parenthesis at the end of the match\n         * because the regular expression must include parenthesis for URLs such as\n         * \"wikipedia.com/something_(disambiguation)\", which should be auto-linked.\n         *\n         * However, an extra parenthesis *will* be included when the URL itself is\n         * wrapped in parenthesis, such as in the case of:\n         *     \"(wikipedia.com/something_(disambiguation))\"\n         * In this case, the last closing parenthesis should *not* be part of the\n         * URL itself, and this method will return `true`.\n         *\n         * For square brackets in URLs such as in PHP arrays, the same behavior as\n         * parenthesis discussed above should happen:\n         *     \"[http://www.example.com/foo.php?bar[]=1&bar[]=2&bar[]=3]\"\n         * The closing square bracket should not be part of the URL itself, and this\n         * method will return `true`.\n         *\n         * @protected\n         * @param {String} matchStr The full match string from the {@link #matcherRegex}.\n         * @return {Boolean} `true` if there is an unbalanced closing parenthesis or\n         *   square bracket at the end of the `matchStr`, `false` otherwise.\n         */\n        UrlMatcher.prototype.matchHasUnbalancedClosingParen = function (matchStr) {\n            var endChar = matchStr.charAt(matchStr.length - 1);\n            var startChar;\n            if (endChar === ')') {\n                startChar = '(';\n            }\n            else if (endChar === ']') {\n                startChar = '[';\n            }\n            else {\n                return false; // not a close parenthesis or square bracket\n            }\n            // Find if there are the same number of open braces as close braces in\n            // the URL string, minus the last character (which we have already\n            // determined to be either ')' or ']'\n            var numOpenBraces = 0;\n            for (var i = 0, len = matchStr.length - 1; i < len; i++) {\n                var char = matchStr.charAt(i);\n                if (char === startChar) {\n                    numOpenBraces++;\n                }\n                else if (char === endChar) {\n                    numOpenBraces = Math.max(numOpenBraces - 1, 0);\n                }\n            }\n            // If the number of open braces matches the number of close braces in\n            // the URL minus the last character, then the match has *unbalanced*\n            // braces because of the last character. Example of unbalanced braces\n            // from the regex match:\n            //     \"http://example.com?a[]=1]\"\n            if (numOpenBraces === 0) {\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Determine if there's an invalid character after the TLD in a URL. Valid\n         * characters after TLD are ':/?#'. Exclude scheme matched URLs from this\n         * check.\n         *\n         * @protected\n         * @param {String} urlMatch The matched URL, if there was one. Will be an\n         *   empty string if the match is not a URL match.\n         * @param {String} schemeUrlMatch The match URL string for a scheme\n         *   match. Ex: 'http://yahoo.com'. This is used to match something like\n         *   'http://localhost', where we won't double check that the domain name\n         *   has at least one '.' in it.\n         * @return {Number} the position where the invalid character was found. If\n         *   no such character was found, returns -1\n         */\n        UrlMatcher.prototype.matchHasInvalidCharAfterTld = function (urlMatch, schemeUrlMatch) {\n            if (!urlMatch) {\n                return -1;\n            }\n            var offset = 0;\n            if (schemeUrlMatch) {\n                offset = urlMatch.indexOf(':');\n                urlMatch = urlMatch.slice(offset);\n            }\n            var re = new RegExp(\"^((.?\\/\\/)?[-.\" + alphaNumericAndMarksCharsStr + \"]*[-\" + alphaNumericAndMarksCharsStr + \"]\\\\.[-\" + alphaNumericAndMarksCharsStr + \"]+)\");\n            var res = re.exec(urlMatch);\n            if (res === null) {\n                return -1;\n            }\n            offset += res[1].length;\n            urlMatch = urlMatch.slice(res[1].length);\n            if (/^[^-.A-Za-z0-9:\\/?#]/.test(urlMatch)) {\n                return offset;\n            }\n            return -1;\n        };\n        return UrlMatcher;\n    }(Matcher));\n\n    /**\n     * @class Autolinker.matcher.Hashtag\n     * @extends Autolinker.matcher.Matcher\n     *\n     * Matcher to find HashtagMatch matches in an input string.\n     */\n    var HashtagMatcher = /** @class */ (function (_super) {\n        __extends(HashtagMatcher, _super);\n        /**\n         * @method constructor\n         * @param {Object} cfg The configuration properties for the Match instance,\n         *   specified in an Object (map).\n         */\n        function HashtagMatcher(cfg) {\n            var _this = _super.call(this, cfg) || this;\n            /**\n             * @cfg {String} serviceName\n             *\n             * The service to point hashtag matches to. See {@link Autolinker#hashtag}\n             * for available values.\n             */\n            _this.serviceName = 'twitter'; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * The regular expression to match Hashtags. Example match:\n             *\n             *     #asdf\n             *\n             * @protected\n             * @property {RegExp} matcherRegex\n             */\n            _this.matcherRegex = new RegExp(\"#[_\" + alphaNumericAndMarksCharsStr + \"]{1,139}(?![_\" + alphaNumericAndMarksCharsStr + \"])\", 'g'); // lookahead used to make sure we don't match something above 139 characters\n            /**\n             * The regular expression to use to check the character before a username match to\n             * make sure we didn't accidentally match an email address.\n             *\n             * For example, the string \"asdf@asdf.com\" should not match \"@asdf\" as a username.\n             *\n             * @protected\n             * @property {RegExp} nonWordCharRegex\n             */\n            _this.nonWordCharRegex = new RegExp('[^' + alphaNumericAndMarksCharsStr + ']');\n            _this.serviceName = cfg.serviceName;\n            return _this;\n        }\n        /**\n         * @inheritdoc\n         */\n        HashtagMatcher.prototype.parseMatches = function (text) {\n            var matcherRegex = this.matcherRegex, nonWordCharRegex = this.nonWordCharRegex, serviceName = this.serviceName, tagBuilder = this.tagBuilder, matches = [], match;\n            while ((match = matcherRegex.exec(text)) !== null) {\n                var offset = match.index, prevChar = text.charAt(offset - 1);\n                // If we found the match at the beginning of the string, or we found the match\n                // and there is a whitespace char in front of it (meaning it is not a '#' char\n                // in the middle of a word), then it is a hashtag match.\n                if (offset === 0 || nonWordCharRegex.test(prevChar)) {\n                    var matchedText = match[0], hashtag = match[0].slice(1); // strip off the '#' character at the beginning\n                    matches.push(new HashtagMatch({\n                        tagBuilder: tagBuilder,\n                        matchedText: matchedText,\n                        offset: offset,\n                        serviceName: serviceName,\n                        hashtag: hashtag\n                    }));\n                }\n            }\n            return matches;\n        };\n        return HashtagMatcher;\n    }(Matcher));\n\n    /**\n     * @class Autolinker.matcher.Phone\n     * @extends Autolinker.matcher.Matcher\n     *\n     * Matcher to find Phone number matches in an input string.\n     *\n     * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more\n     * details.\n     */\n    var PhoneMatcher = /** @class */ (function (_super) {\n        __extends(PhoneMatcher, _super);\n        function PhoneMatcher() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            /**\n             * The regular expression to match Phone numbers. Example match:\n             *\n             *     (123) 456-7890\n             *\n             * This regular expression has the following capturing groups:\n             *\n             * 1 or 2. The prefixed '+' sign, if there is one.\n             *\n             * @protected\n             * @property {RegExp} matcherRegex\n             */\n            _this.matcherRegex = /(?:(?:(?:(\\+)?\\d{1,3}[-\\040.]?)?\\(?\\d{3}\\)?[-\\040.]?\\d{3}[-\\040.]?\\d{4})|(?:(\\+)(?:9[976]\\d|8[987530]\\d|6[987]\\d|5[90]\\d|42\\d|3[875]\\d|2[98654321]\\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)[-\\040.]?(?:\\d[-\\040.]?){6,12}\\d+))([,;]+[0-9]+#?)*/g;\n            return _this;\n        }\n        // ex: (123) 456-7890, 123 456 7890, 123-456-7890, +18004441234,,;,10226420346#,\n        // +1 (800) 444 1234, 10226420346#, 1-800-444-1234,1022,64,20346#\n        /**\n         * @inheritdoc\n         */\n        PhoneMatcher.prototype.parseMatches = function (text) {\n            var matcherRegex = this.matcherRegex, tagBuilder = this.tagBuilder, matches = [], match;\n            while ((match = matcherRegex.exec(text)) !== null) {\n                // Remove non-numeric values from phone number string\n                var matchedText = match[0], cleanNumber = matchedText.replace(/[^0-9,;#]/g, ''), // strip out non-digit characters exclude comma semicolon and #\n                plusSign = !!(match[1] || match[2]), // match[ 1 ] or match[ 2 ] is the prefixed plus sign, if there is one\n                before = match.index == 0 ? '' : text.substr(match.index - 1, 1), after = text.substr(match.index + matchedText.length, 1), contextClear = !before.match(/\\d/) && !after.match(/\\d/);\n                if (this.testMatch(match[3]) && this.testMatch(matchedText) && contextClear) {\n                    matches.push(new PhoneMatch({\n                        tagBuilder: tagBuilder,\n                        matchedText: matchedText,\n                        offset: match.index,\n                        number: cleanNumber,\n                        plusSign: plusSign\n                    }));\n                }\n            }\n            return matches;\n        };\n        PhoneMatcher.prototype.testMatch = function (text) {\n            return /\\D/.test(text);\n        };\n        return PhoneMatcher;\n    }(Matcher));\n\n    /**\n     * @class Autolinker.matcher.Mention\n     * @extends Autolinker.matcher.Matcher\n     *\n     * Matcher to find/replace username matches in an input string.\n     */\n    var MentionMatcher = /** @class */ (function (_super) {\n        __extends(MentionMatcher, _super);\n        /**\n         * @method constructor\n         * @param {Object} cfg The configuration properties for the Match instance,\n         *   specified in an Object (map).\n         */\n        function MentionMatcher(cfg) {\n            var _this = _super.call(this, cfg) || this;\n            /**\n             * @cfg {'twitter'/'instagram'/'soundcloud'} protected\n             *\n             * The name of service to link @mentions to.\n             *\n             * Valid values are: 'twitter', 'instagram', or 'soundcloud'\n             */\n            _this.serviceName = 'twitter'; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * Hash of regular expression to match username handles. Example match:\n             *\n             *     @asdf\n             *\n             * @private\n             * @property {Object} matcherRegexes\n             */\n            _this.matcherRegexes = {\n                'twitter': new RegExp(\"@[_\" + alphaNumericAndMarksCharsStr + \"]{1,50}(?![_\" + alphaNumericAndMarksCharsStr + \"])\", 'g'),\n                'instagram': new RegExp(\"@[_.\" + alphaNumericAndMarksCharsStr + \"]{1,30}(?![_\" + alphaNumericAndMarksCharsStr + \"])\", 'g'),\n                'soundcloud': new RegExp(\"@[-_.\" + alphaNumericAndMarksCharsStr + \"]{1,50}(?![-_\" + alphaNumericAndMarksCharsStr + \"])\", 'g') // lookahead used to make sure we don't match something above 50 characters\n            };\n            /**\n             * The regular expression to use to check the character before a username match to\n             * make sure we didn't accidentally match an email address.\n             *\n             * For example, the string \"asdf@asdf.com\" should not match \"@asdf\" as a username.\n             *\n             * @private\n             * @property {RegExp} nonWordCharRegex\n             */\n            _this.nonWordCharRegex = new RegExp('[^' + alphaNumericAndMarksCharsStr + ']');\n            _this.serviceName = cfg.serviceName;\n            return _this;\n        }\n        /**\n         * @inheritdoc\n         */\n        MentionMatcher.prototype.parseMatches = function (text) {\n            var serviceName = this.serviceName, matcherRegex = this.matcherRegexes[this.serviceName], nonWordCharRegex = this.nonWordCharRegex, tagBuilder = this.tagBuilder, matches = [], match;\n            if (!matcherRegex) {\n                return matches;\n            }\n            while ((match = matcherRegex.exec(text)) !== null) {\n                var offset = match.index, prevChar = text.charAt(offset - 1);\n                // If we found the match at the beginning of the string, or we found the match\n                // and there is a whitespace char in front of it (meaning it is not an email\n                // address), then it is a username match.\n                if (offset === 0 || nonWordCharRegex.test(prevChar)) {\n                    var matchedText = match[0].replace(/\\.+$/g, ''), // strip off trailing .\n                    mention = matchedText.slice(1); // strip off the '@' character at the beginning\n                    matches.push(new MentionMatch({\n                        tagBuilder: tagBuilder,\n                        matchedText: matchedText,\n                        offset: offset,\n                        serviceName: serviceName,\n                        mention: mention\n                    }));\n                }\n            }\n            return matches;\n        };\n        return MentionMatcher;\n    }(Matcher));\n\n    // For debugging: search for other \"For debugging\" lines\n    // import CliTable from 'cli-table';\n    /**\n     * Parses an HTML string, calling the callbacks to notify of tags and text.\n     *\n     * ## History\n     *\n     * This file previously used a regular expression to find html tags in the input\n     * text. Unfortunately, we ran into a bunch of catastrophic backtracking issues\n     * with certain input text, causing Autolinker to either hang or just take a\n     * really long time to parse the string.\n     *\n     * The current code is intended to be a O(n) algorithm that walks through\n     * the string in one pass, and tries to be as cheap as possible. We don't need\n     * to implement the full HTML spec, but rather simply determine where the string\n     * looks like an HTML tag, and where it looks like text (so that we can autolink\n     * that).\n     *\n     * This state machine parser is intended just to be a simple but performant\n     * parser of HTML for the subset of requirements we have. We simply need to:\n     *\n     * 1. Determine where HTML tags are\n     * 2. Determine the tag name (Autolinker specifically only cares about <a>,\n     *    <script>, and <style> tags, so as not to link any text within them)\n     *\n     * We don't need to:\n     *\n     * 1. Create a parse tree\n     * 2. Auto-close tags with invalid markup\n     * 3. etc.\n     *\n     * The other intention behind this is that we didn't want to add external\n     * dependencies on the Autolinker utility which would increase its size. For\n     * instance, adding htmlparser2 adds 125kb to the minified output file,\n     * increasing its final size from 47kb to 172kb (at the time of writing). It\n     * also doesn't work exactly correctly, treating the string \"<3 blah blah blah\"\n     * as an HTML tag.\n     *\n     * Reference for HTML spec:\n     *\n     *     https://www.w3.org/TR/html51/syntax.html#sec-tokenization\n     *\n     * @param {String} html The HTML to parse\n     * @param {Object} callbacks\n     * @param {Function} callbacks.onOpenTag Callback function to call when an open\n     *   tag is parsed. Called with the tagName as its argument.\n     * @param {Function} callbacks.onCloseTag Callback function to call when a close\n     *   tag is parsed. Called with the tagName as its argument. If a self-closing\n     *   tag is found, `onCloseTag` is called immediately after `onOpenTag`.\n     * @param {Function} callbacks.onText Callback function to call when text (i.e\n     *   not an HTML tag) is parsed. Called with the text (string) as its first\n     *   argument, and offset (number) into the string as its second.\n     */\n    function parseHtml(html, _a) {\n        var onOpenTag = _a.onOpenTag, onCloseTag = _a.onCloseTag, onText = _a.onText, onComment = _a.onComment, onDoctype = _a.onDoctype;\n        var noCurrentTag = new CurrentTag();\n        var charIdx = 0, len = html.length, state = 0 /* Data */, currentDataIdx = 0, // where the current data start index is\n        currentTag = noCurrentTag; // describes the current tag that is being read\n        // For debugging: search for other \"For debugging\" lines\n        // const table = new CliTable( {\n        // \thead: [ 'charIdx', 'char', 'state', 'currentDataIdx', 'currentOpenTagIdx', 'tag.type' ]\n        // } );\n        while (charIdx < len) {\n            var char = html.charAt(charIdx);\n            // For debugging: search for other \"For debugging\" lines\n            // ALSO: Temporarily remove the 'const' keyword on the State enum\n            // table.push(\n            // \t[ charIdx, char, State[ state ], currentDataIdx, currentTag.idx, currentTag.idx === -1 ? '' : currentTag.type ]\n            // );\n            switch (state) {\n                case 0 /* Data */:\n                    stateData(char);\n                    break;\n                case 1 /* TagOpen */:\n                    stateTagOpen(char);\n                    break;\n                case 2 /* EndTagOpen */:\n                    stateEndTagOpen(char);\n                    break;\n                case 3 /* TagName */:\n                    stateTagName(char);\n                    break;\n                case 4 /* BeforeAttributeName */:\n                    stateBeforeAttributeName(char);\n                    break;\n                case 5 /* AttributeName */:\n                    stateAttributeName(char);\n                    break;\n                case 6 /* AfterAttributeName */:\n                    stateAfterAttributeName(char);\n                    break;\n                case 7 /* BeforeAttributeValue */:\n                    stateBeforeAttributeValue(char);\n                    break;\n                case 8 /* AttributeValueDoubleQuoted */:\n                    stateAttributeValueDoubleQuoted(char);\n                    break;\n                case 9 /* AttributeValueSingleQuoted */:\n                    stateAttributeValueSingleQuoted(char);\n                    break;\n                case 10 /* AttributeValueUnquoted */:\n                    stateAttributeValueUnquoted(char);\n                    break;\n                case 11 /* AfterAttributeValueQuoted */:\n                    stateAfterAttributeValueQuoted(char);\n                    break;\n                case 12 /* SelfClosingStartTag */:\n                    stateSelfClosingStartTag(char);\n                    break;\n                case 13 /* MarkupDeclarationOpenState */:\n                    stateMarkupDeclarationOpen(char);\n                    break;\n                case 14 /* CommentStart */:\n                    stateCommentStart(char);\n                    break;\n                case 15 /* CommentStartDash */:\n                    stateCommentStartDash(char);\n                    break;\n                case 16 /* Comment */:\n                    stateComment(char);\n                    break;\n                case 17 /* CommentEndDash */:\n                    stateCommentEndDash(char);\n                    break;\n                case 18 /* CommentEnd */:\n                    stateCommentEnd(char);\n                    break;\n                case 19 /* CommentEndBang */:\n                    stateCommentEndBang(char);\n                    break;\n                case 20 /* Doctype */:\n                    stateDoctype(char);\n                    break;\n                default:\n                    throwUnhandledCaseError(state);\n            }\n            // For debugging: search for other \"For debugging\" lines\n            // ALSO: Temporarily remove the 'const' keyword on the State enum\n            // table.push(\n            // \t[ charIdx, char, State[ state ], currentDataIdx, currentTag.idx, currentTag.idx === -1 ? '' : currentTag.type ]\n            // );\n            charIdx++;\n        }\n        if (currentDataIdx < charIdx) {\n            emitText();\n        }\n        // For debugging: search for other \"For debugging\" lines\n        // console.log( '\\n' + table.toString() );\n        // Called when non-tags are being read (i.e. the text around HTML †ags)\n        // https://www.w3.org/TR/html51/syntax.html#data-state\n        function stateData(char) {\n            if (char === '<') {\n                startNewTag();\n            }\n        }\n        // Called after a '<' is read from the Data state\n        // https://www.w3.org/TR/html51/syntax.html#tag-open-state\n        function stateTagOpen(char) {\n            if (char === '!') {\n                state = 13 /* MarkupDeclarationOpenState */;\n            }\n            else if (char === '/') {\n                state = 2 /* EndTagOpen */;\n                currentTag = new CurrentTag(__assign({}, currentTag, { isClosing: true }));\n            }\n            else if (char === '<') {\n                // start of another tag (ignore the previous, incomplete one)\n                startNewTag();\n            }\n            else if (letterRe.test(char)) {\n                // tag name start (and no '/' read)\n                state = 3 /* TagName */;\n                currentTag = new CurrentTag(__assign({}, currentTag, { isOpening: true }));\n            }\n            else {\n                // Any other\n                state = 0 /* Data */;\n                currentTag = noCurrentTag;\n            }\n        }\n        // After a '<x', '</x' sequence is read (where 'x' is a letter character),\n        // this is to continue reading the tag name\n        // https://www.w3.org/TR/html51/syntax.html#tag-name-state\n        function stateTagName(char) {\n            if (whitespaceRe.test(char)) {\n                currentTag = new CurrentTag(__assign({}, currentTag, { name: captureTagName() }));\n                state = 4 /* BeforeAttributeName */;\n            }\n            else if (char === '<') {\n                // start of another tag (ignore the previous, incomplete one)\n                startNewTag();\n            }\n            else if (char === '/') {\n                currentTag = new CurrentTag(__assign({}, currentTag, { name: captureTagName() }));\n                state = 12 /* SelfClosingStartTag */;\n            }\n            else if (char === '>') {\n                currentTag = new CurrentTag(__assign({}, currentTag, { name: captureTagName() }));\n                emitTagAndPreviousTextNode(); // resets to Data state as well\n            }\n            else if (!letterRe.test(char) && !digitRe.test(char) && char !== ':') {\n                // Anything else that does not form an html tag. Note: the colon\n                // character is accepted for XML namespaced tags\n                resetToDataState();\n            }\n        }\n        // Called after the '/' is read from a '</' sequence\n        // https://www.w3.org/TR/html51/syntax.html#end-tag-open-state\n        function stateEndTagOpen(char) {\n            if (char === '>') { // parse error. Encountered \"</>\". Skip it without treating as a tag\n                resetToDataState();\n            }\n            else if (letterRe.test(char)) {\n                state = 3 /* TagName */;\n            }\n            else {\n                // some other non-tag-like character, don't treat this as a tag\n                resetToDataState();\n            }\n        }\n        // https://www.w3.org/TR/html51/syntax.html#before-attribute-name-state\n        function stateBeforeAttributeName(char) {\n            if (whitespaceRe.test(char)) ;\n            else if (char === '/') {\n                state = 12 /* SelfClosingStartTag */;\n            }\n            else if (char === '>') {\n                emitTagAndPreviousTextNode(); // resets to Data state as well\n            }\n            else if (char === '<') {\n                // start of another tag (ignore the previous, incomplete one)\n                startNewTag();\n            }\n            else if (char === \"=\" || quoteRe.test(char) || controlCharsRe.test(char)) {\n                // \"Parse error\" characters that, according to the spec, should be\n                // appended to the attribute name, but we'll treat these characters\n                // as not forming a real HTML tag\n                resetToDataState();\n            }\n            else {\n                // Any other char, start of a new attribute name\n                state = 5 /* AttributeName */;\n            }\n        }\n        // https://www.w3.org/TR/html51/syntax.html#attribute-name-state\n        function stateAttributeName(char) {\n            if (whitespaceRe.test(char)) {\n                state = 6 /* AfterAttributeName */;\n            }\n            else if (char === '/') {\n                state = 12 /* SelfClosingStartTag */;\n            }\n            else if (char === '=') {\n                state = 7 /* BeforeAttributeValue */;\n            }\n            else if (char === '>') {\n                emitTagAndPreviousTextNode(); // resets to Data state as well\n            }\n            else if (char === '<') {\n                // start of another tag (ignore the previous, incomplete one)\n                startNewTag();\n            }\n            else if (quoteRe.test(char)) {\n                // \"Parse error\" characters that, according to the spec, should be\n                // appended to the attribute name, but we'll treat these characters\n                // as not forming a real HTML tag\n                resetToDataState();\n            }\n        }\n        // https://www.w3.org/TR/html51/syntax.html#after-attribute-name-state\n        function stateAfterAttributeName(char) {\n            if (whitespaceRe.test(char)) ;\n            else if (char === '/') {\n                state = 12 /* SelfClosingStartTag */;\n            }\n            else if (char === '=') {\n                state = 7 /* BeforeAttributeValue */;\n            }\n            else if (char === '>') {\n                emitTagAndPreviousTextNode();\n            }\n            else if (char === '<') {\n                // start of another tag (ignore the previous, incomplete one)\n                startNewTag();\n            }\n            else if (quoteRe.test(char)) {\n                // \"Parse error\" characters that, according to the spec, should be\n                // appended to the attribute name, but we'll treat these characters\n                // as not forming a real HTML tag\n                resetToDataState();\n            }\n            else {\n                // Any other character, start a new attribute in the current tag\n                state = 5 /* AttributeName */;\n            }\n        }\n        // https://www.w3.org/TR/html51/syntax.html#before-attribute-value-state\n        function stateBeforeAttributeValue(char) {\n            if (whitespaceRe.test(char)) ;\n            else if (char === \"\\\"\") {\n                state = 8 /* AttributeValueDoubleQuoted */;\n            }\n            else if (char === \"'\") {\n                state = 9 /* AttributeValueSingleQuoted */;\n            }\n            else if (/[>=`]/.test(char)) {\n                // Invalid chars after an '=' for an attribute value, don't count\n                // the current tag as an HTML tag\n                resetToDataState();\n            }\n            else if (char === '<') {\n                // start of another tag (ignore the previous, incomplete one)\n                startNewTag();\n            }\n            else {\n                // Any other character, consider it an unquoted attribute value\n                state = 10 /* AttributeValueUnquoted */;\n            }\n        }\n        // https://www.w3.org/TR/html51/syntax.html#attribute-value-double-quoted-state\n        function stateAttributeValueDoubleQuoted(char) {\n            if (char === \"\\\"\") { // end the current double-quoted attribute\n                state = 11 /* AfterAttributeValueQuoted */;\n            }\n        }\n        // https://www.w3.org/TR/html51/syntax.html#attribute-value-single-quoted-state\n        function stateAttributeValueSingleQuoted(char) {\n            if (char === \"'\") { // end the current single-quoted attribute\n                state = 11 /* AfterAttributeValueQuoted */;\n            }\n        }\n        // https://www.w3.org/TR/html51/syntax.html#attribute-value-unquoted-state\n        function stateAttributeValueUnquoted(char) {\n            if (whitespaceRe.test(char)) {\n                state = 4 /* BeforeAttributeName */;\n            }\n            else if (char === '>') {\n                emitTagAndPreviousTextNode();\n            }\n            else if (char === '<') {\n                // start of another tag (ignore the previous, incomplete one)\n                startNewTag();\n            }\n        }\n        // https://www.w3.org/TR/html51/syntax.html#after-attribute-value-quoted-state\n        function stateAfterAttributeValueQuoted(char) {\n            if (whitespaceRe.test(char)) {\n                state = 4 /* BeforeAttributeName */;\n            }\n            else if (char === '/') {\n                state = 12 /* SelfClosingStartTag */;\n            }\n            else if (char === '>') {\n                emitTagAndPreviousTextNode();\n            }\n            else if (char === '<') {\n                // start of another tag (ignore the previous, incomplete one)\n                startNewTag();\n            }\n            else {\n                // Any other character, \"parse error\". Spec says to switch to the\n                // BeforeAttributeState and re-consume the character, as it may be\n                // the start of a new attribute name\n                state = 4 /* BeforeAttributeName */;\n                reconsumeCurrentCharacter();\n            }\n        }\n        // A '/' has just been read in the current tag (presumably for '/>'), and\n        // this handles the next character\n        // https://www.w3.org/TR/html51/syntax.html#self-closing-start-tag-state\n        function stateSelfClosingStartTag(char) {\n            if (char === '>') {\n                currentTag = new CurrentTag(__assign({}, currentTag, { isClosing: true }));\n                emitTagAndPreviousTextNode(); // resets to Data state as well\n            }\n            else {\n                state = 4 /* BeforeAttributeName */;\n            }\n        }\n        // https://www.w3.org/TR/html51/syntax.html#markup-declaration-open-state\n        // (HTML Comments or !DOCTYPE)\n        function stateMarkupDeclarationOpen(char) {\n            if (html.substr(charIdx, 2) === '--') { // html comment\n                charIdx += 2; // \"consume\" characters\n                currentTag = new CurrentTag(__assign({}, currentTag, { type: 'comment' }));\n                state = 14 /* CommentStart */;\n            }\n            else if (html.substr(charIdx, 7).toUpperCase() === 'DOCTYPE') {\n                charIdx += 7; // \"consume\" characters\n                currentTag = new CurrentTag(__assign({}, currentTag, { type: 'doctype' }));\n                state = 20 /* Doctype */;\n            }\n            else {\n                // At this point, the spec specifies that the state machine should\n                // enter the \"bogus comment\" state, in which case any character(s)\n                // after the '<!' that were read should become an HTML comment up\n                // until the first '>' that is read (or EOF). Instead, we'll assume\n                // that a user just typed '<!' as part of text data\n                resetToDataState();\n            }\n        }\n        // Handles after the sequence '<!--' has been read\n        // https://www.w3.org/TR/html51/syntax.html#comment-start-state\n        function stateCommentStart(char) {\n            if (char === '-') {\n                // We've read the sequence '<!---' at this point (3 dashes)\n                state = 15 /* CommentStartDash */;\n            }\n            else if (char === '>') {\n                // At this point, we'll assume the comment wasn't a real comment\n                // so we'll just emit it as data. We basically read the sequence\n                // '<!-->'\n                resetToDataState();\n            }\n            else {\n                // Any other char, take it as part of the comment\n                state = 16 /* Comment */;\n            }\n        }\n        // We've read the sequence '<!---' at this point (3 dashes)\n        // https://www.w3.org/TR/html51/syntax.html#comment-start-dash-state\n        function stateCommentStartDash(char) {\n            if (char === '-') {\n                // We've read '<!----' (4 dashes) at this point\n                state = 18 /* CommentEnd */;\n            }\n            else if (char === '>') {\n                // At this point, we'll assume the comment wasn't a real comment\n                // so we'll just emit it as data. We basically read the sequence\n                // '<!--->'\n                resetToDataState();\n            }\n            else {\n                // Anything else, take it as a valid comment\n                state = 16 /* Comment */;\n            }\n        }\n        // Currently reading the comment's text (data)\n        // https://www.w3.org/TR/html51/syntax.html#comment-state\n        function stateComment(char) {\n            if (char === '-') {\n                state = 17 /* CommentEndDash */;\n            }\n        }\n        // When we we've read the first dash inside a comment, it may signal the\n        // end of the comment if we read another dash\n        // https://www.w3.org/TR/html51/syntax.html#comment-end-dash-state\n        function stateCommentEndDash(char) {\n            if (char === '-') {\n                state = 18 /* CommentEnd */;\n            }\n            else {\n                // Wasn't a dash, must still be part of the comment\n                state = 16 /* Comment */;\n            }\n        }\n        // After we've read two dashes inside a comment, it may signal the end of\n        // the comment if we then read a '>' char\n        // https://www.w3.org/TR/html51/syntax.html#comment-end-state\n        function stateCommentEnd(char) {\n            if (char === '>') {\n                emitTagAndPreviousTextNode();\n            }\n            else if (char === '!') {\n                state = 19 /* CommentEndBang */;\n            }\n            else if (char === '-') ;\n            else {\n                // Anything else, switch back to the comment state since we didn't\n                // read the full \"end comment\" sequence (i.e. '-->')\n                state = 16 /* Comment */;\n            }\n        }\n        // We've read the sequence '--!' inside of a comment\n        // https://www.w3.org/TR/html51/syntax.html#comment-end-bang-state\n        function stateCommentEndBang(char) {\n            if (char === '-') {\n                // We read the sequence '--!-' inside of a comment. The last dash\n                // could signify that the comment is going to close\n                state = 17 /* CommentEndDash */;\n            }\n            else if (char === '>') {\n                // End of comment with the sequence '--!>'\n                emitTagAndPreviousTextNode();\n            }\n            else {\n                // The '--!' was not followed by a '>', continue reading the\n                // comment's text\n                state = 16 /* Comment */;\n            }\n        }\n        /**\n         * For DOCTYPES in particular, we don't care about the attributes. Just\n         * advance to the '>' character and emit the tag, unless we find a '<'\n         * character in which case we'll start a new tag.\n         *\n         * Example doctype tag:\n         *    <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n         *\n         * Actual spec: https://www.w3.org/TR/html51/syntax.html#doctype-state\n         */\n        function stateDoctype(char) {\n            if (char === '>') {\n                emitTagAndPreviousTextNode();\n            }\n            else if (char === '<') {\n                startNewTag();\n            }\n        }\n        /**\n         * Resets the state back to the Data state, and removes the current tag.\n         *\n         * We'll generally run this function whenever a \"parse error\" is\n         * encountered, where the current tag that is being read no longer looks\n         * like a real HTML tag.\n         */\n        function resetToDataState() {\n            state = 0 /* Data */;\n            currentTag = noCurrentTag;\n        }\n        /**\n         * Starts a new HTML tag at the current index, ignoring any previous HTML\n         * tag that was being read.\n         *\n         * We'll generally run this function whenever we read a new '<' character,\n         * including when we read a '<' character inside of an HTML tag that we were\n         * previously reading.\n         */\n        function startNewTag() {\n            state = 1 /* TagOpen */;\n            currentTag = new CurrentTag({ idx: charIdx });\n        }\n        /**\n         * Once we've decided to emit an open tag, that means we can also emit the\n         * text node before it.\n         */\n        function emitTagAndPreviousTextNode() {\n            var textBeforeTag = html.slice(currentDataIdx, currentTag.idx);\n            if (textBeforeTag) {\n                // the html tag was the first element in the html string, or two\n                // tags next to each other, in which case we should not emit a text\n                // node\n                onText(textBeforeTag, currentDataIdx);\n            }\n            if (currentTag.type === 'comment') {\n                onComment(currentTag.idx);\n            }\n            else if (currentTag.type === 'doctype') {\n                onDoctype(currentTag.idx);\n            }\n            else {\n                if (currentTag.isOpening) {\n                    onOpenTag(currentTag.name, currentTag.idx);\n                }\n                if (currentTag.isClosing) { // note: self-closing tags will emit both opening and closing\n                    onCloseTag(currentTag.name, currentTag.idx);\n                }\n            }\n            // Since we just emitted a tag, reset to the data state for the next char\n            resetToDataState();\n            currentDataIdx = charIdx + 1;\n        }\n        function emitText() {\n            var text = html.slice(currentDataIdx, charIdx);\n            onText(text, currentDataIdx);\n            currentDataIdx = charIdx + 1;\n        }\n        /**\n         * Captures the tag name from the start of the tag to the current character\n         * index, and converts it to lower case\n         */\n        function captureTagName() {\n            var startIdx = currentTag.idx + (currentTag.isClosing ? 2 : 1);\n            return html.slice(startIdx, charIdx).toLowerCase();\n        }\n        /**\n         * Causes the main loop to re-consume the current character, such as after\n         * encountering a \"parse error\" that changed state and needs to reconsume\n         * the same character in that new state.\n         */\n        function reconsumeCurrentCharacter() {\n            charIdx--;\n        }\n    }\n    var CurrentTag = /** @class */ (function () {\n        function CurrentTag(cfg) {\n            if (cfg === void 0) { cfg = {}; }\n            this.idx = cfg.idx !== undefined ? cfg.idx : -1;\n            this.type = cfg.type || 'tag';\n            this.name = cfg.name || '';\n            this.isOpening = !!cfg.isOpening;\n            this.isClosing = !!cfg.isClosing;\n        }\n        return CurrentTag;\n    }());\n\n    /**\n     * @class Autolinker\n     * @extends Object\n     *\n     * Utility class used to process a given string of text, and wrap the matches in\n     * the appropriate anchor (&lt;a&gt;) tags to turn them into links.\n     *\n     * Any of the configuration options may be provided in an Object provided\n     * to the Autolinker constructor, which will configure how the {@link #link link()}\n     * method will process the links.\n     *\n     * For example:\n     *\n     *     var autolinker = new Autolinker( {\n     *         newWindow : false,\n     *         truncate  : 30\n     *     } );\n     *\n     *     var html = autolinker.link( \"Joe went to www.yahoo.com\" );\n     *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n     *\n     *\n     * The {@link #static-link static link()} method may also be used to inline\n     * options into a single call, which may be more convenient for one-off uses.\n     * For example:\n     *\n     *     var html = Autolinker.link( \"Joe went to www.yahoo.com\", {\n     *         newWindow : false,\n     *         truncate  : 30\n     *     } );\n     *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n     *\n     *\n     * ## Custom Replacements of Links\n     *\n     * If the configuration options do not provide enough flexibility, a {@link #replaceFn}\n     * may be provided to fully customize the output of Autolinker. This function is\n     * called once for each URL/Email/Phone#/Hashtag/Mention (Twitter, Instagram, Soundcloud)\n     * match that is encountered.\n     *\n     * For example:\n     *\n     *     var input = \"...\";  // string with URLs, Email Addresses, Phone #s, Hashtags, and Mentions (Twitter, Instagram, Soundcloud)\n     *\n     *     var linkedText = Autolinker.link( input, {\n     *         replaceFn : function( match ) {\n     *             console.log( \"href = \", match.getAnchorHref() );\n     *             console.log( \"text = \", match.getAnchorText() );\n     *\n     *             switch( match.getType() ) {\n     *                 case 'url' :\n     *                     console.log( \"url: \", match.getUrl() );\n     *\n     *                     if( match.getUrl().indexOf( 'mysite.com' ) === -1 ) {\n     *                         var tag = match.buildTag();  // returns an `Autolinker.HtmlTag` instance, which provides mutator methods for easy changes\n     *                         tag.setAttr( 'rel', 'nofollow' );\n     *                         tag.addClass( 'external-link' );\n     *\n     *                         return tag;\n     *\n     *                     } else {\n     *                         return true;  // let Autolinker perform its normal anchor tag replacement\n     *                     }\n     *\n     *                 case 'email' :\n     *                     var email = match.getEmail();\n     *                     console.log( \"email: \", email );\n     *\n     *                     if( email === \"my@own.address\" ) {\n     *                         return false;  // don't auto-link this particular email address; leave as-is\n     *                     } else {\n     *                         return;  // no return value will have Autolinker perform its normal anchor tag replacement (same as returning `true`)\n     *                     }\n     *\n     *                 case 'phone' :\n     *                     var phoneNumber = match.getPhoneNumber();\n     *                     console.log( phoneNumber );\n     *\n     *                     return '<a href=\"http://newplace.to.link.phone.numbers.to/\">' + phoneNumber + '</a>';\n     *\n     *                 case 'hashtag' :\n     *                     var hashtag = match.getHashtag();\n     *                     console.log( hashtag );\n     *\n     *                     return '<a href=\"http://newplace.to.link.hashtag.handles.to/\">' + hashtag + '</a>';\n     *\n     *                 case 'mention' :\n     *                     var mention = match.getMention();\n     *                     console.log( mention );\n     *\n     *                     return '<a href=\"http://newplace.to.link.mention.to/\">' + mention + '</a>';\n     *             }\n     *         }\n     *     } );\n     *\n     *\n     * The function may return the following values:\n     *\n     * - `true` (Boolean): Allow Autolinker to replace the match as it normally\n     *   would.\n     * - `false` (Boolean): Do not replace the current match at all - leave as-is.\n     * - Any String: If a string is returned from the function, the string will be\n     *   used directly as the replacement HTML for the match.\n     * - An {@link Autolinker.HtmlTag} instance, which can be used to build/modify\n     *   an HTML tag before writing out its HTML text.\n     */\n    var Autolinker = /** @class */ (function () {\n        /**\n         * @method constructor\n         * @param {Object} [cfg] The configuration options for the Autolinker instance,\n         *   specified in an Object (map).\n         */\n        function Autolinker(cfg) {\n            if (cfg === void 0) { cfg = {}; }\n            /**\n             * The Autolinker version number exposed on the instance itself.\n             *\n             * Ex: 0.25.1\n             */\n            this.version = Autolinker.version;\n            /**\n             * @cfg {Boolean/Object} [urls]\n             *\n             * `true` if URLs should be automatically linked, `false` if they should not\n             * be. Defaults to `true`.\n             *\n             * Examples:\n             *\n             *     urls: true\n             *\n             *     // or\n             *\n             *     urls: {\n             *         schemeMatches : true,\n             *         wwwMatches    : true,\n             *         tldMatches    : true\n             *     }\n             *\n             * As shown above, this option also accepts an Object form with 3 properties\n             * to allow for more customization of what exactly gets linked. All default\n             * to `true`:\n             *\n             * @cfg {Boolean} [urls.schemeMatches] `true` to match URLs found prefixed\n             *   with a scheme, i.e. `http://google.com`, or `other+scheme://google.com`,\n             *   `false` to prevent these types of matches.\n             * @cfg {Boolean} [urls.wwwMatches] `true` to match urls found prefixed with\n             *   `'www.'`, i.e. `www.google.com`. `false` to prevent these types of\n             *   matches. Note that if the URL had a prefixed scheme, and\n             *   `schemeMatches` is true, it will still be linked.\n             * @cfg {Boolean} [urls.tldMatches] `true` to match URLs with known top\n             *   level domains (.com, .net, etc.) that are not prefixed with a scheme or\n             *   `'www.'`. This option attempts to match anything that looks like a URL\n             *   in the given text. Ex: `google.com`, `asdf.org/?page=1`, etc. `false`\n             *   to prevent these types of matches.\n             */\n            this.urls = {}; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {Boolean} [email=true]\n             *\n             * `true` if email addresses should be automatically linked, `false` if they\n             * should not be.\n             */\n            this.email = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {Boolean} [phone=true]\n             *\n             * `true` if Phone numbers (\"(555)555-5555\") should be automatically linked,\n             * `false` if they should not be.\n             */\n            this.phone = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {Boolean/String} [hashtag=false]\n             *\n             * A string for the service name to have hashtags (ex: \"#myHashtag\")\n             * auto-linked to. The currently-supported values are:\n             *\n             * - 'twitter'\n             * - 'facebook'\n             * - 'instagram'\n             *\n             * Pass `false` to skip auto-linking of hashtags.\n             */\n            this.hashtag = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {String/Boolean} [mention=false]\n             *\n             * A string for the service name to have mentions (ex: \"@myuser\")\n             * auto-linked to. The currently supported values are:\n             *\n             * - 'twitter'\n             * - 'instagram'\n             * - 'soundcloud'\n             *\n             * Defaults to `false` to skip auto-linking of mentions.\n             */\n            this.mention = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {Boolean} [newWindow=true]\n             *\n             * `true` if the links should open in a new window, `false` otherwise.\n             */\n            this.newWindow = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {Boolean/Object} [stripPrefix=true]\n             *\n             * `true` if 'http://' (or 'https://') and/or the 'www.' should be stripped\n             * from the beginning of URL links' text, `false` otherwise. Defaults to\n             * `true`.\n             *\n             * Examples:\n             *\n             *     stripPrefix: true\n             *\n             *     // or\n             *\n             *     stripPrefix: {\n             *         scheme : true,\n             *         www    : true\n             *     }\n             *\n             * As shown above, this option also accepts an Object form with 2 properties\n             * to allow for more customization of what exactly is prevented from being\n             * displayed. Both default to `true`:\n             *\n             * @cfg {Boolean} [stripPrefix.scheme] `true` to prevent the scheme part of\n             *   a URL match from being displayed to the user. Example:\n             *   `'http://google.com'` will be displayed as `'google.com'`. `false` to\n             *   not strip the scheme. NOTE: Only an `'http://'` or `'https://'` scheme\n             *   will be removed, so as not to remove a potentially dangerous scheme\n             *   (such as `'file://'` or `'javascript:'`)\n             * @cfg {Boolean} [stripPrefix.www] www (Boolean): `true` to prevent the\n             *   `'www.'` part of a URL match from being displayed to the user. Ex:\n             *   `'www.google.com'` will be displayed as `'google.com'`. `false` to not\n             *   strip the `'www'`.\n             */\n            this.stripPrefix = { scheme: true, www: true }; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {Boolean} [stripTrailingSlash=true]\n             *\n             * `true` to remove the trailing slash from URL matches, `false` to keep\n             *  the trailing slash.\n             *\n             *  Example when `true`: `http://google.com/` will be displayed as\n             *  `http://google.com`.\n             */\n            this.stripTrailingSlash = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {Boolean} [decodePercentEncoding=true]\n             *\n             * `true` to decode percent-encoded characters in URL matches, `false` to keep\n             *  the percent-encoded characters.\n             *\n             *  Example when `true`: `https://en.wikipedia.org/wiki/San_Jos%C3%A9` will\n             *  be displayed as `https://en.wikipedia.org/wiki/San_José`.\n             */\n            this.decodePercentEncoding = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {Number/Object} [truncate=0]\n             *\n             * ## Number Form\n             *\n             * A number for how many characters matched text should be truncated to\n             * inside the text of a link. If the matched text is over this number of\n             * characters, it will be truncated to this length by adding a two period\n             * ellipsis ('..') to the end of the string.\n             *\n             * For example: A url like 'http://www.yahoo.com/some/long/path/to/a/file'\n             * truncated to 25 characters might look something like this:\n             * 'yahoo.com/some/long/pat..'\n             *\n             * Example Usage:\n             *\n             *     truncate: 25\n             *\n             *\n             *  Defaults to `0` for \"no truncation.\"\n             *\n             *\n             * ## Object Form\n             *\n             * An Object may also be provided with two properties: `length` (Number) and\n             * `location` (String). `location` may be one of the following: 'end'\n             * (default), 'middle', or 'smart'.\n             *\n             * Example Usage:\n             *\n             *     truncate: { length: 25, location: 'middle' }\n             *\n             * @cfg {Number} [truncate.length=0] How many characters to allow before\n             *   truncation will occur. Defaults to `0` for \"no truncation.\"\n             * @cfg {\"end\"/\"middle\"/\"smart\"} [truncate.location=\"end\"]\n             *\n             * - 'end' (default): will truncate up to the number of characters, and then\n             *   add an ellipsis at the end. Ex: 'yahoo.com/some/long/pat..'\n             * - 'middle': will truncate and add the ellipsis in the middle. Ex:\n             *   'yahoo.com/s..th/to/a/file'\n             * - 'smart': for URLs where the algorithm attempts to strip out unnecessary\n             *   parts first (such as the 'www.', then URL scheme, hash, etc.),\n             *   attempting to make the URL human-readable before looking for a good\n             *   point to insert the ellipsis if it is still too long. Ex:\n             *   'yahoo.com/some..to/a/file'. For more details, see\n             *   {@link Autolinker.truncate.TruncateSmart}.\n             */\n            this.truncate = { length: 0, location: 'end' }; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {String} className\n             *\n             * A CSS class name to add to the generated links. This class will be added\n             * to all links, as well as this class plus match suffixes for styling\n             * url/email/phone/hashtag/mention links differently.\n             *\n             * For example, if this config is provided as \"myLink\", then:\n             *\n             * - URL links will have the CSS classes: \"myLink myLink-url\"\n             * - Email links will have the CSS classes: \"myLink myLink-email\", and\n             * - Phone links will have the CSS classes: \"myLink myLink-phone\"\n             * - Hashtag links will have the CSS classes: \"myLink myLink-hashtag\"\n             * - Mention links will have the CSS classes: \"myLink myLink-mention myLink-[type]\"\n             *   where [type] is either \"instagram\", \"twitter\" or \"soundcloud\"\n             */\n            this.className = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {Function} replaceFn\n             *\n             * A function to individually process each match found in the input string.\n             *\n             * See the class's description for usage.\n             *\n             * The `replaceFn` can be called with a different context object (`this`\n             * reference) using the {@link #context} cfg.\n             *\n             * This function is called with the following parameter:\n             *\n             * @cfg {Autolinker.match.Match} replaceFn.match The Match instance which\n             *   can be used to retrieve information about the match that the `replaceFn`\n             *   is currently processing. See {@link Autolinker.match.Match} subclasses\n             *   for details.\n             */\n            this.replaceFn = null; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @cfg {Object} context\n             *\n             * The context object (`this` reference) to call the `replaceFn` with.\n             *\n             * Defaults to this Autolinker instance.\n             */\n            this.context = undefined; // default value just to get the above doc comment in the ES5 output and documentation generator\n            /**\n             * @private\n             * @property {Autolinker.matcher.Matcher[]} matchers\n             *\n             * The {@link Autolinker.matcher.Matcher} instances for this Autolinker\n             * instance.\n             *\n             * This is lazily created in {@link #getMatchers}.\n             */\n            this.matchers = null;\n            /**\n             * @private\n             * @property {Autolinker.AnchorTagBuilder} tagBuilder\n             *\n             * The AnchorTagBuilder instance used to build match replacement anchor tags.\n             * Note: this is lazily instantiated in the {@link #getTagBuilder} method.\n             */\n            this.tagBuilder = null;\n            // Note: when `this.something` is used in the rhs of these assignments,\n            //       it refers to the default values set above the constructor\n            this.urls = this.normalizeUrlsCfg(cfg.urls);\n            this.email = typeof cfg.email === 'boolean' ? cfg.email : this.email;\n            this.phone = typeof cfg.phone === 'boolean' ? cfg.phone : this.phone;\n            this.hashtag = cfg.hashtag || this.hashtag;\n            this.mention = cfg.mention || this.mention;\n            this.newWindow = typeof cfg.newWindow === 'boolean' ? cfg.newWindow : this.newWindow;\n            this.stripPrefix = this.normalizeStripPrefixCfg(cfg.stripPrefix);\n            this.stripTrailingSlash = typeof cfg.stripTrailingSlash === 'boolean' ? cfg.stripTrailingSlash : this.stripTrailingSlash;\n            this.decodePercentEncoding = typeof cfg.decodePercentEncoding === 'boolean' ? cfg.decodePercentEncoding : this.decodePercentEncoding;\n            // Validate the value of the `mention` cfg\n            var mention = this.mention;\n            if (mention !== false && mention !== 'twitter' && mention !== 'instagram' && mention !== 'soundcloud') {\n                throw new Error(\"invalid `mention` cfg - see docs\");\n            }\n            // Validate the value of the `hashtag` cfg\n            var hashtag = this.hashtag;\n            if (hashtag !== false && hashtag !== 'twitter' && hashtag !== 'facebook' && hashtag !== 'instagram') {\n                throw new Error(\"invalid `hashtag` cfg - see docs\");\n            }\n            this.truncate = this.normalizeTruncateCfg(cfg.truncate);\n            this.className = cfg.className || this.className;\n            this.replaceFn = cfg.replaceFn || this.replaceFn;\n            this.context = cfg.context || this;\n        }\n        /**\n         * Automatically links URLs, Email addresses, Phone Numbers, Twitter handles,\n         * Hashtags, and Mentions found in the given chunk of HTML. Does not link URLs\n         * found within HTML tags.\n         *\n         * For instance, if given the text: `You should go to http://www.yahoo.com`,\n         * then the result will be `You should go to &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n         *\n         * Example:\n         *\n         *     var linkedText = Autolinker.link( \"Go to google.com\", { newWindow: false } );\n         *     // Produces: \"Go to <a href=\"http://google.com\">google.com</a>\"\n         *\n         * @static\n         * @param {String} textOrHtml The HTML or text to find matches within (depending\n         *   on if the {@link #urls}, {@link #email}, {@link #phone}, {@link #mention},\n         *   {@link #hashtag}, and {@link #mention} options are enabled).\n         * @param {Object} [options] Any of the configuration options for the Autolinker\n         *   class, specified in an Object (map). See the class description for an\n         *   example call.\n         * @return {String} The HTML text, with matches automatically linked.\n         */\n        Autolinker.link = function (textOrHtml, options) {\n            var autolinker = new Autolinker(options);\n            return autolinker.link(textOrHtml);\n        };\n        /**\n         * Parses the input `textOrHtml` looking for URLs, email addresses, phone\n         * numbers, username handles, and hashtags (depending on the configuration\n         * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n         * objects describing those matches (without making any replacements).\n         *\n         * Note that if parsing multiple pieces of text, it is slightly more efficient\n         * to create an Autolinker instance, and use the instance-level {@link #parse}\n         * method.\n         *\n         * Example:\n         *\n         *     var matches = Autolinker.parse( \"Hello google.com, I am asdf@asdf.com\", {\n         *         urls: true,\n         *         email: true\n         *     } );\n         *\n         *     console.log( matches.length );           // 2\n         *     console.log( matches[ 0 ].getType() );   // 'url'\n         *     console.log( matches[ 0 ].getUrl() );    // 'google.com'\n         *     console.log( matches[ 1 ].getType() );   // 'email'\n         *     console.log( matches[ 1 ].getEmail() );  // 'asdf@asdf.com'\n         *\n         * @static\n         * @param {String} textOrHtml The HTML or text to find matches within\n         *   (depending on if the {@link #urls}, {@link #email}, {@link #phone},\n         *   {@link #hashtag}, and {@link #mention} options are enabled).\n         * @param {Object} [options] Any of the configuration options for the Autolinker\n         *   class, specified in an Object (map). See the class description for an\n         *   example call.\n         * @return {Autolinker.match.Match[]} The array of Matches found in the\n         *   given input `textOrHtml`.\n         */\n        Autolinker.parse = function (textOrHtml, options) {\n            var autolinker = new Autolinker(options);\n            return autolinker.parse(textOrHtml);\n        };\n        /**\n         * Normalizes the {@link #urls} config into an Object with 3 properties:\n         * `schemeMatches`, `wwwMatches`, and `tldMatches`, all Booleans.\n         *\n         * See {@link #urls} config for details.\n         *\n         * @private\n         * @param {Boolean/Object} urls\n         * @return {Object}\n         */\n        Autolinker.prototype.normalizeUrlsCfg = function (urls) {\n            if (urls == null)\n                urls = true; // default to `true`\n            if (typeof urls === 'boolean') {\n                return { schemeMatches: urls, wwwMatches: urls, tldMatches: urls };\n            }\n            else { // object form\n                return {\n                    schemeMatches: typeof urls.schemeMatches === 'boolean' ? urls.schemeMatches : true,\n                    wwwMatches: typeof urls.wwwMatches === 'boolean' ? urls.wwwMatches : true,\n                    tldMatches: typeof urls.tldMatches === 'boolean' ? urls.tldMatches : true\n                };\n            }\n        };\n        /**\n         * Normalizes the {@link #stripPrefix} config into an Object with 2\n         * properties: `scheme`, and `www` - both Booleans.\n         *\n         * See {@link #stripPrefix} config for details.\n         *\n         * @private\n         * @param {Boolean/Object} stripPrefix\n         * @return {Object}\n         */\n        Autolinker.prototype.normalizeStripPrefixCfg = function (stripPrefix) {\n            if (stripPrefix == null)\n                stripPrefix = true; // default to `true`\n            if (typeof stripPrefix === 'boolean') {\n                return { scheme: stripPrefix, www: stripPrefix };\n            }\n            else { // object form\n                return {\n                    scheme: typeof stripPrefix.scheme === 'boolean' ? stripPrefix.scheme : true,\n                    www: typeof stripPrefix.www === 'boolean' ? stripPrefix.www : true\n                };\n            }\n        };\n        /**\n         * Normalizes the {@link #truncate} config into an Object with 2 properties:\n         * `length` (Number), and `location` (String).\n         *\n         * See {@link #truncate} config for details.\n         *\n         * @private\n         * @param {Number/Object} truncate\n         * @return {Object}\n         */\n        Autolinker.prototype.normalizeTruncateCfg = function (truncate) {\n            if (typeof truncate === 'number') {\n                return { length: truncate, location: 'end' };\n            }\n            else { // object, or undefined/null\n                return defaults(truncate || {}, {\n                    length: Number.POSITIVE_INFINITY,\n                    location: 'end'\n                });\n            }\n        };\n        /**\n         * Parses the input `textOrHtml` looking for URLs, email addresses, phone\n         * numbers, username handles, and hashtags (depending on the configuration\n         * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n         * objects describing those matches (without making any replacements).\n         *\n         * This method is used by the {@link #link} method, but can also be used to\n         * simply do parsing of the input in order to discover what kinds of links\n         * there are and how many.\n         *\n         * Example usage:\n         *\n         *     var autolinker = new Autolinker( {\n         *         urls: true,\n         *         email: true\n         *     } );\n         *\n         *     var matches = autolinker.parse( \"Hello google.com, I am asdf@asdf.com\" );\n         *\n         *     console.log( matches.length );           // 2\n         *     console.log( matches[ 0 ].getType() );   // 'url'\n         *     console.log( matches[ 0 ].getUrl() );    // 'google.com'\n         *     console.log( matches[ 1 ].getType() );   // 'email'\n         *     console.log( matches[ 1 ].getEmail() );  // 'asdf@asdf.com'\n         *\n         * @param {String} textOrHtml The HTML or text to find matches within\n         *   (depending on if the {@link #urls}, {@link #email}, {@link #phone},\n         *   {@link #hashtag}, and {@link #mention} options are enabled).\n         * @return {Autolinker.match.Match[]} The array of Matches found in the\n         *   given input `textOrHtml`.\n         */\n        Autolinker.prototype.parse = function (textOrHtml) {\n            var _this = this;\n            var skipTagNames = ['a', 'style', 'script'], skipTagsStackCount = 0, // used to only Autolink text outside of anchor/script/style tags. We don't want to autolink something that is already linked inside of an <a> tag, for instance\n            matches = [];\n            // Find all matches within the `textOrHtml` (but not matches that are\n            // already nested within <a>, <style> and <script> tags)\n            parseHtml(textOrHtml, {\n                onOpenTag: function (tagName) {\n                    if (skipTagNames.indexOf(tagName) >= 0) {\n                        skipTagsStackCount++;\n                    }\n                },\n                onText: function (text, offset) {\n                    // Only process text nodes that are not within an <a>, <style> or <script> tag\n                    if (skipTagsStackCount === 0) {\n                        // \"Walk around\" common HTML entities. An '&nbsp;' (for example)\n                        // could be at the end of a URL, but we don't want to\n                        // include the trailing '&' in the URL. See issue #76\n                        // TODO: Handle HTML entities separately in parseHtml() and\n                        // don't emit them as \"text\" except for &amp; entities\n                        var htmlCharacterEntitiesRegex = /(&nbsp;|&#160;|&lt;|&#60;|&gt;|&#62;|&quot;|&#34;|&#39;)/gi;\n                        var textSplit = splitAndCapture(text, htmlCharacterEntitiesRegex);\n                        var currentOffset_1 = offset;\n                        textSplit.forEach(function (splitText, i) {\n                            // even number matches are text, odd numbers are html entities\n                            if (i % 2 === 0) {\n                                var textNodeMatches = _this.parseText(splitText, currentOffset_1);\n                                matches.push.apply(matches, textNodeMatches);\n                            }\n                            currentOffset_1 += splitText.length;\n                        });\n                    }\n                },\n                onCloseTag: function (tagName) {\n                    if (skipTagNames.indexOf(tagName) >= 0) {\n                        skipTagsStackCount = Math.max(skipTagsStackCount - 1, 0); // attempt to handle extraneous </a> tags by making sure the stack count never goes below 0\n                    }\n                },\n                onComment: function (offset) { },\n                onDoctype: function (offset) { },\n            });\n            // After we have found all matches, remove subsequent matches that\n            // overlap with a previous match. This can happen for instance with URLs,\n            // where the url 'google.com/#link' would match '#link' as a hashtag.\n            matches = this.compactMatches(matches);\n            // And finally, remove matches for match types that have been turned\n            // off. We needed to have all match types turned on initially so that\n            // things like hashtags could be filtered out if they were really just\n            // part of a URL match (for instance, as a named anchor).\n            matches = this.removeUnwantedMatches(matches);\n            return matches;\n        };\n        /**\n         * After we have found all matches, we need to remove matches that overlap\n         * with a previous match. This can happen for instance with URLs, where the\n         * url 'google.com/#link' would match '#link' as a hashtag. Because the\n         * '#link' part is contained in a larger match that comes before the HashTag\n         * match, we'll remove the HashTag match.\n         *\n         * @private\n         * @param {Autolinker.match.Match[]} matches\n         * @return {Autolinker.match.Match[]}\n         */\n        Autolinker.prototype.compactMatches = function (matches) {\n            // First, the matches need to be sorted in order of offset\n            matches.sort(function (a, b) { return a.getOffset() - b.getOffset(); });\n            for (var i = 0; i < matches.length - 1; i++) {\n                var match = matches[i], offset = match.getOffset(), matchedTextLength = match.getMatchedText().length, endIdx = offset + matchedTextLength;\n                if (i + 1 < matches.length) {\n                    // Remove subsequent matches that equal offset with current match\n                    if (matches[i + 1].getOffset() === offset) {\n                        var removeIdx = matches[i + 1].getMatchedText().length > matchedTextLength ? i : i + 1;\n                        matches.splice(removeIdx, 1);\n                        continue;\n                    }\n                    // Remove subsequent matches that overlap with the current match\n                    if (matches[i + 1].getOffset() < endIdx) {\n                        matches.splice(i + 1, 1);\n                    }\n                }\n            }\n            return matches;\n        };\n        /**\n         * Removes matches for matchers that were turned off in the options. For\n         * example, if {@link #hashtag hashtags} were not to be matched, we'll\n         * remove them from the `matches` array here.\n         *\n         * Note: we *must* use all Matchers on the input string, and then filter\n         * them out later. For example, if the options were `{ url: false, hashtag: true }`,\n         * we wouldn't want to match the text '#link' as a HashTag inside of the text\n         * 'google.com/#link'. The way the algorithm works is that we match the full\n         * URL first (which prevents the accidental HashTag match), and then we'll\n         * simply throw away the URL match.\n         *\n         * @private\n         * @param {Autolinker.match.Match[]} matches The array of matches to remove\n         *   the unwanted matches from. Note: this array is mutated for the\n         *   removals.\n         * @return {Autolinker.match.Match[]} The mutated input `matches` array.\n         */\n        Autolinker.prototype.removeUnwantedMatches = function (matches) {\n            if (!this.hashtag)\n                remove(matches, function (match) { return match.getType() === 'hashtag'; });\n            if (!this.email)\n                remove(matches, function (match) { return match.getType() === 'email'; });\n            if (!this.phone)\n                remove(matches, function (match) { return match.getType() === 'phone'; });\n            if (!this.mention)\n                remove(matches, function (match) { return match.getType() === 'mention'; });\n            if (!this.urls.schemeMatches) {\n                remove(matches, function (m) { return m.getType() === 'url' && m.getUrlMatchType() === 'scheme'; });\n            }\n            if (!this.urls.wwwMatches) {\n                remove(matches, function (m) { return m.getType() === 'url' && m.getUrlMatchType() === 'www'; });\n            }\n            if (!this.urls.tldMatches) {\n                remove(matches, function (m) { return m.getType() === 'url' && m.getUrlMatchType() === 'tld'; });\n            }\n            return matches;\n        };\n        /**\n         * Parses the input `text` looking for URLs, email addresses, phone\n         * numbers, username handles, and hashtags (depending on the configuration\n         * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n         * objects describing those matches.\n         *\n         * This method processes a **non-HTML string**, and is used to parse and\n         * match within the text nodes of an HTML string. This method is used\n         * internally by {@link #parse}.\n         *\n         * @private\n         * @param {String} text The text to find matches within (depending on if the\n         *   {@link #urls}, {@link #email}, {@link #phone},\n         *   {@link #hashtag}, and {@link #mention} options are enabled). This must be a non-HTML string.\n         * @param {Number} [offset=0] The offset of the text node within the\n         *   original string. This is used when parsing with the {@link #parse}\n         *   method to generate correct offsets within the {@link Autolinker.match.Match}\n         *   instances, but may be omitted if calling this method publicly.\n         * @return {Autolinker.match.Match[]} The array of Matches found in the\n         *   given input `text`.\n         */\n        Autolinker.prototype.parseText = function (text, offset) {\n            if (offset === void 0) { offset = 0; }\n            offset = offset || 0;\n            var matchers = this.getMatchers(), matches = [];\n            for (var i = 0, numMatchers = matchers.length; i < numMatchers; i++) {\n                var textMatches = matchers[i].parseMatches(text);\n                // Correct the offset of each of the matches. They are originally\n                // the offset of the match within the provided text node, but we\n                // need to correct them to be relative to the original HTML input\n                // string (i.e. the one provided to #parse).\n                for (var j = 0, numTextMatches = textMatches.length; j < numTextMatches; j++) {\n                    textMatches[j].setOffset(offset + textMatches[j].getOffset());\n                }\n                matches.push.apply(matches, textMatches);\n            }\n            return matches;\n        };\n        /**\n         * Automatically links URLs, Email addresses, Phone numbers, Hashtags,\n         * and Mentions (Twitter, Instagram, Soundcloud) found in the given chunk of HTML. Does not link\n         * URLs found within HTML tags.\n         *\n         * For instance, if given the text: `You should go to http://www.yahoo.com`,\n         * then the result will be `You should go to\n         * &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n         *\n         * This method finds the text around any HTML elements in the input\n         * `textOrHtml`, which will be the text that is processed. Any original HTML\n         * elements will be left as-is, as well as the text that is already wrapped\n         * in anchor (&lt;a&gt;) tags.\n         *\n         * @param {String} textOrHtml The HTML or text to autolink matches within\n         *   (depending on if the {@link #urls}, {@link #email}, {@link #phone}, {@link #hashtag}, and {@link #mention} options are enabled).\n         * @return {String} The HTML, with matches automatically linked.\n         */\n        Autolinker.prototype.link = function (textOrHtml) {\n            if (!textOrHtml) {\n                return \"\";\n            } // handle `null` and `undefined`\n            var matches = this.parse(textOrHtml), newHtml = [], lastIndex = 0;\n            for (var i = 0, len = matches.length; i < len; i++) {\n                var match = matches[i];\n                newHtml.push(textOrHtml.substring(lastIndex, match.getOffset()));\n                newHtml.push(this.createMatchReturnVal(match));\n                lastIndex = match.getOffset() + match.getMatchedText().length;\n            }\n            newHtml.push(textOrHtml.substring(lastIndex)); // handle the text after the last match\n            return newHtml.join('');\n        };\n        /**\n         * Creates the return string value for a given match in the input string.\n         *\n         * This method handles the {@link #replaceFn}, if one was provided.\n         *\n         * @private\n         * @param {Autolinker.match.Match} match The Match object that represents\n         *   the match.\n         * @return {String} The string that the `match` should be replaced with.\n         *   This is usually the anchor tag string, but may be the `matchStr` itself\n         *   if the match is not to be replaced.\n         */\n        Autolinker.prototype.createMatchReturnVal = function (match) {\n            // Handle a custom `replaceFn` being provided\n            var replaceFnResult;\n            if (this.replaceFn) {\n                replaceFnResult = this.replaceFn.call(this.context, match); // Autolinker instance is the context\n            }\n            if (typeof replaceFnResult === 'string') {\n                return replaceFnResult; // `replaceFn` returned a string, use that\n            }\n            else if (replaceFnResult === false) {\n                return match.getMatchedText(); // no replacement for the match\n            }\n            else if (replaceFnResult instanceof HtmlTag) {\n                return replaceFnResult.toAnchorString();\n            }\n            else { // replaceFnResult === true, or no/unknown return value from function\n                // Perform Autolinker's default anchor tag generation\n                var anchorTag = match.buildTag(); // returns an Autolinker.HtmlTag instance\n                return anchorTag.toAnchorString();\n            }\n        };\n        /**\n         * Lazily instantiates and returns the {@link Autolinker.matcher.Matcher}\n         * instances for this Autolinker instance.\n         *\n         * @private\n         * @return {Autolinker.matcher.Matcher[]}\n         */\n        Autolinker.prototype.getMatchers = function () {\n            if (!this.matchers) {\n                var tagBuilder = this.getTagBuilder();\n                var matchers = [\n                    new HashtagMatcher({ tagBuilder: tagBuilder, serviceName: this.hashtag }),\n                    new EmailMatcher({ tagBuilder: tagBuilder }),\n                    new PhoneMatcher({ tagBuilder: tagBuilder }),\n                    new MentionMatcher({ tagBuilder: tagBuilder, serviceName: this.mention }),\n                    new UrlMatcher({ tagBuilder: tagBuilder, stripPrefix: this.stripPrefix, stripTrailingSlash: this.stripTrailingSlash, decodePercentEncoding: this.decodePercentEncoding })\n                ];\n                return (this.matchers = matchers);\n            }\n            else {\n                return this.matchers;\n            }\n        };\n        /**\n         * Returns the {@link #tagBuilder} instance for this Autolinker instance,\n         * lazily instantiating it if it does not yet exist.\n         *\n         * @private\n         * @return {Autolinker.AnchorTagBuilder}\n         */\n        Autolinker.prototype.getTagBuilder = function () {\n            var tagBuilder = this.tagBuilder;\n            if (!tagBuilder) {\n                tagBuilder = this.tagBuilder = new AnchorTagBuilder({\n                    newWindow: this.newWindow,\n                    truncate: this.truncate,\n                    className: this.className\n                });\n            }\n            return tagBuilder;\n        };\n        /**\n         * @static\n         * @property {String} version\n         *\n         * The Autolinker version number in the form major.minor.patch\n         *\n         * Ex: 0.25.1\n         */\n        Autolinker.version = '3.11.0';\n        /**\n         * For backwards compatibility with Autolinker 1.x, the AnchorTagBuilder\n         * class is provided as a static on the Autolinker class.\n         */\n        Autolinker.AnchorTagBuilder = AnchorTagBuilder;\n        /**\n         * For backwards compatibility with Autolinker 1.x, the HtmlTag class is\n         * provided as a static on the Autolinker class.\n         */\n        Autolinker.HtmlTag = HtmlTag;\n        /**\n         * For backwards compatibility with Autolinker 1.x, the Matcher classes are\n         * provided as statics on the Autolinker class.\n         */\n        Autolinker.matcher = {\n            Email: EmailMatcher,\n            Hashtag: HashtagMatcher,\n            Matcher: Matcher,\n            Mention: MentionMatcher,\n            Phone: PhoneMatcher,\n            Url: UrlMatcher\n        };\n        /**\n         * For backwards compatibility with Autolinker 1.x, the Match classes are\n         * provided as statics on the Autolinker class.\n         */\n        Autolinker.match = {\n            Email: EmailMatch,\n            Hashtag: HashtagMatch,\n            Match: Match,\n            Mention: MentionMatch,\n            Phone: PhoneMatch,\n            Url: UrlMatch\n        };\n        return Autolinker;\n    }());\n\n    return Autolinker;\n\n}));\n\n\n//# sourceMappingURL=Autolinker.js.map\n\nexport default tmp.Autolinker;\n"]},"metadata":{},"sourceType":"module"}