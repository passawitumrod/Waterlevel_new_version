{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Check from \"../Core/Check.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport WebGLConstants from \"../Core/WebGLConstants.js\";\nimport ContextLimits from \"./ContextLimits.js\";\nimport MipmapHint from \"./MipmapHint.js\";\nimport PixelDatatype from \"./PixelDatatype.js\";\nimport Sampler from \"./Sampler.js\";\nimport TextureMagnificationFilter from \"./TextureMagnificationFilter.js\";\nimport TextureMinificationFilter from \"./TextureMinificationFilter.js\";\n/**\n * @private\n */\n\nfunction Texture(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT); //>>includeStart('debug', pragmas.debug);\n\n  Check.defined(\"options.context\", options.context); //>>includeEnd('debug');\n\n  var context = options.context;\n  var width = options.width;\n  var height = options.height;\n  var source = options.source;\n\n  if (defined(source)) {\n    if (!defined(width)) {\n      width = defaultValue(source.videoWidth, source.width);\n    }\n\n    if (!defined(height)) {\n      height = defaultValue(source.videoHeight, source.height);\n    }\n  }\n\n  var pixelFormat = defaultValue(options.pixelFormat, PixelFormat.RGBA);\n  var pixelDatatype = defaultValue(options.pixelDatatype, PixelDatatype.UNSIGNED_BYTE);\n  var internalFormat = pixelFormat;\n  var isCompressed = PixelFormat.isCompressedFormat(internalFormat);\n\n  if (context.webgl2) {\n    if (pixelFormat === PixelFormat.DEPTH_STENCIL) {\n      internalFormat = WebGLConstants.DEPTH24_STENCIL8;\n    } else if (pixelFormat === PixelFormat.DEPTH_COMPONENT) {\n      if (pixelDatatype === PixelDatatype.UNSIGNED_SHORT) {\n        internalFormat = WebGLConstants.DEPTH_COMPONENT16;\n      } else if (pixelDatatype === PixelDatatype.UNSIGNED_INT) {\n        internalFormat = WebGLConstants.DEPTH_COMPONENT24;\n      }\n    }\n\n    if (pixelDatatype === PixelDatatype.FLOAT) {\n      switch (pixelFormat) {\n        case PixelFormat.RGBA:\n          internalFormat = WebGLConstants.RGBA32F;\n          break;\n\n        case PixelFormat.RGB:\n          internalFormat = WebGLConstants.RGB32F;\n          break;\n\n        case PixelFormat.RG:\n          internalFormat = WebGLConstants.RG32F;\n          break;\n\n        case PixelFormat.R:\n          internalFormat = WebGLConstants.R32F;\n          break;\n      }\n    } else if (pixelDatatype === PixelDatatype.HALF_FLOAT) {\n      switch (pixelFormat) {\n        case PixelFormat.RGBA:\n          internalFormat = WebGLConstants.RGBA16F;\n          break;\n\n        case PixelFormat.RGB:\n          internalFormat = WebGLConstants.RGB16F;\n          break;\n\n        case PixelFormat.RG:\n          internalFormat = WebGLConstants.RG16F;\n          break;\n\n        case PixelFormat.R:\n          internalFormat = WebGLConstants.R16F;\n          break;\n      }\n    }\n  } //>>includeStart('debug', pragmas.debug);\n\n\n  if (!defined(width) || !defined(height)) {\n    throw new DeveloperError(\"options requires a source field to create an initialized texture or width and height fields to create a blank texture.\");\n  }\n\n  Check.typeOf.number.greaterThan(\"width\", width, 0);\n\n  if (width > ContextLimits.maximumTextureSize) {\n    throw new DeveloperError(\"Width must be less than or equal to the maximum texture size (\" + ContextLimits.maximumTextureSize + \").  Check maximumTextureSize.\");\n  }\n\n  Check.typeOf.number.greaterThan(\"height\", height, 0);\n\n  if (height > ContextLimits.maximumTextureSize) {\n    throw new DeveloperError(\"Height must be less than or equal to the maximum texture size (\" + ContextLimits.maximumTextureSize + \").  Check maximumTextureSize.\");\n  }\n\n  if (!PixelFormat.validate(pixelFormat)) {\n    throw new DeveloperError(\"Invalid options.pixelFormat.\");\n  }\n\n  if (!isCompressed && !PixelDatatype.validate(pixelDatatype)) {\n    throw new DeveloperError(\"Invalid options.pixelDatatype.\");\n  }\n\n  if (pixelFormat === PixelFormat.DEPTH_COMPONENT && pixelDatatype !== PixelDatatype.UNSIGNED_SHORT && pixelDatatype !== PixelDatatype.UNSIGNED_INT) {\n    throw new DeveloperError(\"When options.pixelFormat is DEPTH_COMPONENT, options.pixelDatatype must be UNSIGNED_SHORT or UNSIGNED_INT.\");\n  }\n\n  if (pixelFormat === PixelFormat.DEPTH_STENCIL && pixelDatatype !== PixelDatatype.UNSIGNED_INT_24_8) {\n    throw new DeveloperError(\"When options.pixelFormat is DEPTH_STENCIL, options.pixelDatatype must be UNSIGNED_INT_24_8.\");\n  }\n\n  if (pixelDatatype === PixelDatatype.FLOAT && !context.floatingPointTexture) {\n    throw new DeveloperError(\"When options.pixelDatatype is FLOAT, this WebGL implementation must support the OES_texture_float extension.  Check context.floatingPointTexture.\");\n  }\n\n  if (pixelDatatype === PixelDatatype.HALF_FLOAT && !context.halfFloatingPointTexture) {\n    throw new DeveloperError(\"When options.pixelDatatype is HALF_FLOAT, this WebGL implementation must support the OES_texture_half_float extension. Check context.halfFloatingPointTexture.\");\n  }\n\n  if (PixelFormat.isDepthFormat(pixelFormat)) {\n    if (defined(source)) {\n      throw new DeveloperError(\"When options.pixelFormat is DEPTH_COMPONENT or DEPTH_STENCIL, source cannot be provided.\");\n    }\n\n    if (!context.depthTexture) {\n      throw new DeveloperError(\"When options.pixelFormat is DEPTH_COMPONENT or DEPTH_STENCIL, this WebGL implementation must support WEBGL_depth_texture.  Check context.depthTexture.\");\n    }\n  }\n\n  if (isCompressed) {\n    if (!defined(source) || !defined(source.arrayBufferView)) {\n      throw new DeveloperError(\"When options.pixelFormat is compressed, options.source.arrayBufferView must be defined.\");\n    }\n\n    if (PixelFormat.isDXTFormat(internalFormat) && !context.s3tc) {\n      throw new DeveloperError(\"When options.pixelFormat is S3TC compressed, this WebGL implementation must support the WEBGL_texture_compression_s3tc extension. Check context.s3tc.\");\n    } else if (PixelFormat.isPVRTCFormat(internalFormat) && !context.pvrtc) {\n      throw new DeveloperError(\"When options.pixelFormat is PVRTC compressed, this WebGL implementation must support the WEBGL_texture_compression_pvrtc extension. Check context.pvrtc.\");\n    } else if (PixelFormat.isETC1Format(internalFormat) && !context.etc1) {\n      throw new DeveloperError(\"When options.pixelFormat is ETC1 compressed, this WebGL implementation must support the WEBGL_texture_compression_etc1 extension. Check context.etc1.\");\n    }\n\n    if (PixelFormat.compressedTextureSizeInBytes(internalFormat, width, height) !== source.arrayBufferView.byteLength) {\n      throw new DeveloperError(\"The byte length of the array buffer is invalid for the compressed texture with the given width and height.\");\n    }\n  } //>>includeEnd('debug');\n  // Use premultiplied alpha for opaque textures should perform better on Chrome:\n  // http://media.tojicode.com/webglCamp4/#20\n\n\n  var preMultiplyAlpha = options.preMultiplyAlpha || pixelFormat === PixelFormat.RGB || pixelFormat === PixelFormat.LUMINANCE;\n  var flipY = defaultValue(options.flipY, true);\n  var initialized = true;\n  var gl = context._gl;\n  var textureTarget = gl.TEXTURE_2D;\n  var texture = gl.createTexture();\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(textureTarget, texture);\n  var unpackAlignment = 4;\n\n  if (defined(source) && defined(source.arrayBufferView) && !isCompressed) {\n    unpackAlignment = PixelFormat.alignmentInBytes(pixelFormat, pixelDatatype, width);\n  }\n\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n\n  if (defined(source)) {\n    if (defined(source.arrayBufferView)) {\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false); // Source: typed array\n\n      var arrayBufferView = source.arrayBufferView;\n\n      if (isCompressed) {\n        gl.compressedTexImage2D(textureTarget, 0, internalFormat, width, height, 0, arrayBufferView);\n      } else {\n        if (flipY) {\n          arrayBufferView = PixelFormat.flipY(arrayBufferView, pixelFormat, pixelDatatype, width, height);\n        }\n\n        gl.texImage2D(textureTarget, 0, internalFormat, width, height, 0, pixelFormat, pixelDatatype, arrayBufferView);\n\n        if (defined(source.mipLevels)) {\n          var mipWidth = width;\n          var mipHeight = height;\n\n          for (var i = 0; i < source.mipLevels.length; ++i) {\n            mipWidth = Math.floor(mipWidth / 2) | 0;\n\n            if (mipWidth < 1) {\n              mipWidth = 1;\n            }\n\n            mipHeight = Math.floor(mipHeight / 2) | 0;\n\n            if (mipHeight < 1) {\n              mipHeight = 1;\n            }\n\n            gl.texImage2D(textureTarget, i + 1, internalFormat, mipWidth, mipHeight, 0, pixelFormat, pixelDatatype, source.mipLevels[i]);\n          }\n        }\n      }\n    } else if (defined(source.framebuffer)) {\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false); // Source: framebuffer\n\n      if (source.framebuffer !== context.defaultFramebuffer) {\n        source.framebuffer._bind();\n      }\n\n      gl.copyTexImage2D(textureTarget, 0, internalFormat, source.xOffset, source.yOffset, width, height, 0);\n\n      if (source.framebuffer !== context.defaultFramebuffer) {\n        source.framebuffer._unBind();\n      }\n    } else {\n      // Only valid for DOM-Element uploads\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, preMultiplyAlpha);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY); // Source: ImageData, HTMLImageElement, HTMLCanvasElement, or HTMLVideoElement\n\n      gl.texImage2D(textureTarget, 0, internalFormat, pixelFormat, pixelDatatype, source);\n    }\n  } else {\n    gl.texImage2D(textureTarget, 0, internalFormat, width, height, 0, pixelFormat, pixelDatatype, null);\n    initialized = false;\n  }\n\n  gl.bindTexture(textureTarget, null);\n  var sizeInBytes;\n\n  if (isCompressed) {\n    sizeInBytes = PixelFormat.compressedTextureSizeInBytes(pixelFormat, width, height);\n  } else {\n    sizeInBytes = PixelFormat.textureSizeInBytes(pixelFormat, pixelDatatype, width, height);\n  }\n\n  this._id = createGuid();\n  this._context = context;\n  this._textureFilterAnisotropic = context._textureFilterAnisotropic;\n  this._textureTarget = textureTarget;\n  this._texture = texture;\n  this._pixelFormat = pixelFormat;\n  this._pixelDatatype = pixelDatatype;\n  this._width = width;\n  this._height = height;\n  this._dimensions = new Cartesian2(width, height);\n  this._hasMipmap = false;\n  this._sizeInBytes = sizeInBytes;\n  this._preMultiplyAlpha = preMultiplyAlpha;\n  this._flipY = flipY;\n  this._initialized = initialized;\n  this._sampler = undefined;\n  this.sampler = defined(options.sampler) ? options.sampler : new Sampler();\n}\n/**\n * This function is identical to using the Texture constructor except that it can be\n * replaced with a mock/spy in tests.\n * @private\n */\n\n\nTexture.create = function (options) {\n  return new Texture(options);\n};\n/**\n * Creates a texture, and copies a subimage of the framebuffer to it.  When called without arguments,\n * the texture is the same width and height as the framebuffer and contains its contents.\n *\n * @param {Object} options Object with the following properties:\n * @param {Context} options.context The context in which the Texture gets created.\n * @param {PixelFormat} [options.pixelFormat=PixelFormat.RGB] The texture's internal pixel format.\n * @param {Number} [options.framebufferXOffset=0] An offset in the x direction in the framebuffer where copying begins from.\n * @param {Number} [options.framebufferYOffset=0] An offset in the y direction in the framebuffer where copying begins from.\n * @param {Number} [options.width=canvas.clientWidth] The width of the texture in texels.\n * @param {Number} [options.height=canvas.clientHeight] The height of the texture in texels.\n * @param {Framebuffer} [options.framebuffer=defaultFramebuffer] The framebuffer from which to create the texture.  If this\n *        parameter is not specified, the default framebuffer is used.\n * @returns {Texture} A texture with contents from the framebuffer.\n *\n * @exception {DeveloperError} Invalid pixelFormat.\n * @exception {DeveloperError} pixelFormat cannot be DEPTH_COMPONENT, DEPTH_STENCIL or a compressed format.\n * @exception {DeveloperError} framebufferXOffset must be greater than or equal to zero.\n * @exception {DeveloperError} framebufferYOffset must be greater than or equal to zero.\n * @exception {DeveloperError} framebufferXOffset + width must be less than or equal to canvas.clientWidth.\n * @exception {DeveloperError} framebufferYOffset + height must be less than or equal to canvas.clientHeight.\n *\n *\n * @example\n * // Create a texture with the contents of the framebuffer.\n * var t = Texture.fromFramebuffer({\n *     context : context\n * });\n *\n * @see Sampler\n *\n * @private\n */\n\n\nTexture.fromFramebuffer = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT); //>>includeStart('debug', pragmas.debug);\n\n  Check.defined(\"options.context\", options.context); //>>includeEnd('debug');\n\n  var context = options.context;\n  var gl = context._gl;\n  var pixelFormat = defaultValue(options.pixelFormat, PixelFormat.RGB);\n  var framebufferXOffset = defaultValue(options.framebufferXOffset, 0);\n  var framebufferYOffset = defaultValue(options.framebufferYOffset, 0);\n  var width = defaultValue(options.width, gl.drawingBufferWidth);\n  var height = defaultValue(options.height, gl.drawingBufferHeight);\n  var framebuffer = options.framebuffer; //>>includeStart('debug', pragmas.debug);\n\n  if (!PixelFormat.validate(pixelFormat)) {\n    throw new DeveloperError(\"Invalid pixelFormat.\");\n  }\n\n  if (PixelFormat.isDepthFormat(pixelFormat) || PixelFormat.isCompressedFormat(pixelFormat)) {\n    throw new DeveloperError(\"pixelFormat cannot be DEPTH_COMPONENT, DEPTH_STENCIL or a compressed format.\");\n  }\n\n  Check.defined(\"options.context\", options.context);\n  Check.typeOf.number.greaterThanOrEquals(\"framebufferXOffset\", framebufferXOffset, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"framebufferYOffset\", framebufferYOffset, 0);\n\n  if (framebufferXOffset + width > gl.drawingBufferWidth) {\n    throw new DeveloperError(\"framebufferXOffset + width must be less than or equal to drawingBufferWidth\");\n  }\n\n  if (framebufferYOffset + height > gl.drawingBufferHeight) {\n    throw new DeveloperError(\"framebufferYOffset + height must be less than or equal to drawingBufferHeight.\");\n  } //>>includeEnd('debug');\n\n\n  var texture = new Texture({\n    context: context,\n    width: width,\n    height: height,\n    pixelFormat: pixelFormat,\n    source: {\n      framebuffer: defined(framebuffer) ? framebuffer : context.defaultFramebuffer,\n      xOffset: framebufferXOffset,\n      yOffset: framebufferYOffset,\n      width: width,\n      height: height\n    }\n  });\n  return texture;\n};\n\nObject.defineProperties(Texture.prototype, {\n  /**\n   * A unique id for the texture\n   * @memberof Texture.prototype\n   * @type {String}\n   * @readonly\n   * @private\n   */\n  id: {\n    get: function get() {\n      return this._id;\n    }\n  },\n\n  /**\n   * The sampler to use when sampling this texture.\n   * Create a sampler by calling {@link Sampler}.  If this\n   * parameter is not specified, a default sampler is used.  The default sampler clamps texture\n   * coordinates in both directions, uses linear filtering for both magnification and minification,\n   * and uses a maximum anisotropy of 1.0.\n   * @memberof Texture.prototype\n   * @type {Object}\n   */\n  sampler: {\n    get: function get() {\n      return this._sampler;\n    },\n    set: function set(sampler) {\n      var minificationFilter = sampler.minificationFilter;\n      var magnificationFilter = sampler.magnificationFilter;\n      var mipmap = minificationFilter === TextureMinificationFilter.NEAREST_MIPMAP_NEAREST || minificationFilter === TextureMinificationFilter.NEAREST_MIPMAP_LINEAR || minificationFilter === TextureMinificationFilter.LINEAR_MIPMAP_NEAREST || minificationFilter === TextureMinificationFilter.LINEAR_MIPMAP_LINEAR;\n      var context = this._context;\n      var pixelDatatype = this._pixelDatatype; // float textures only support nearest filtering unless the linear extensions are supported, so override the sampler's settings\n\n      if (pixelDatatype === PixelDatatype.FLOAT && !context.textureFloatLinear || pixelDatatype === PixelDatatype.HALF_FLOAT && !context.textureHalfFloatLinear) {\n        minificationFilter = mipmap ? TextureMinificationFilter.NEAREST_MIPMAP_NEAREST : TextureMinificationFilter.NEAREST;\n        magnificationFilter = TextureMagnificationFilter.NEAREST;\n      }\n\n      var gl = context._gl;\n      var target = this._textureTarget;\n      gl.activeTexture(gl.TEXTURE0);\n      gl.bindTexture(target, this._texture);\n      gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, minificationFilter);\n      gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, magnificationFilter);\n      gl.texParameteri(target, gl.TEXTURE_WRAP_S, sampler.wrapS);\n      gl.texParameteri(target, gl.TEXTURE_WRAP_T, sampler.wrapT);\n\n      if (defined(this._textureFilterAnisotropic)) {\n        gl.texParameteri(target, this._textureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT, sampler.maximumAnisotropy);\n      }\n\n      gl.bindTexture(target, null);\n      this._sampler = sampler;\n    }\n  },\n  pixelFormat: {\n    get: function get() {\n      return this._pixelFormat;\n    }\n  },\n  pixelDatatype: {\n    get: function get() {\n      return this._pixelDatatype;\n    }\n  },\n  dimensions: {\n    get: function get() {\n      return this._dimensions;\n    }\n  },\n  preMultiplyAlpha: {\n    get: function get() {\n      return this._preMultiplyAlpha;\n    }\n  },\n  flipY: {\n    get: function get() {\n      return this._flipY;\n    }\n  },\n  width: {\n    get: function get() {\n      return this._width;\n    }\n  },\n  height: {\n    get: function get() {\n      return this._height;\n    }\n  },\n  sizeInBytes: {\n    get: function get() {\n      if (this._hasMipmap) {\n        return Math.floor(this._sizeInBytes * 4 / 3);\n      }\n\n      return this._sizeInBytes;\n    }\n  },\n  _target: {\n    get: function get() {\n      return this._textureTarget;\n    }\n  }\n});\n/**\n * Copy new image data into this texture, from a source {@link ImageData}, {@link Image}, {@link Canvas}, or {@link Video}.\n * or an object with width, height, and arrayBufferView properties.\n *\n * @param {Object} source The source {@link ImageData}, {@link Image}, {@link Canvas}, or {@link Video},\n *                        or an object with width, height, and arrayBufferView properties.\n * @param {Number} [xOffset=0] The offset in the x direction within the texture to copy into.\n * @param {Number} [yOffset=0] The offset in the y direction within the texture to copy into.\n *\n * @exception {DeveloperError} Cannot call copyFrom when the texture pixel format is DEPTH_COMPONENT or DEPTH_STENCIL.\n * @exception {DeveloperError} Cannot call copyFrom with a compressed texture pixel format.\n * @exception {DeveloperError} xOffset must be greater than or equal to zero.\n * @exception {DeveloperError} yOffset must be greater than or equal to zero.\n * @exception {DeveloperError} xOffset + source.width must be less than or equal to width.\n * @exception {DeveloperError} yOffset + source.height must be less than or equal to height.\n * @exception {DeveloperError} This texture was destroyed, i.e., destroy() was called.\n *\n * @example\n * texture.copyFrom({\n *   width : 1,\n *   height : 1,\n *   arrayBufferView : new Uint8Array([255, 0, 0, 255])\n * });\n */\n\nTexture.prototype.copyFrom = function (source, xOffset, yOffset) {\n  xOffset = defaultValue(xOffset, 0);\n  yOffset = defaultValue(yOffset, 0); //>>includeStart('debug', pragmas.debug);\n\n  Check.defined(\"source\", source);\n\n  if (PixelFormat.isDepthFormat(this._pixelFormat)) {\n    throw new DeveloperError(\"Cannot call copyFrom when the texture pixel format is DEPTH_COMPONENT or DEPTH_STENCIL.\");\n  }\n\n  if (PixelFormat.isCompressedFormat(this._pixelFormat)) {\n    throw new DeveloperError(\"Cannot call copyFrom with a compressed texture pixel format.\");\n  }\n\n  Check.typeOf.number.greaterThanOrEquals(\"xOffset\", xOffset, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"yOffset\", yOffset, 0);\n  Check.typeOf.number.lessThanOrEquals(\"xOffset + source.width\", xOffset + source.width, this._width);\n  Check.typeOf.number.lessThanOrEquals(\"yOffset + source.height\", yOffset + source.height, this._height); //>>includeEnd('debug');\n\n  var gl = this._context._gl;\n  var target = this._textureTarget;\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(target, this._texture);\n  var width = source.width;\n  var height = source.height;\n  var arrayBufferView = source.arrayBufferView;\n  var textureWidth = this._width;\n  var textureHeight = this._height;\n  var pixelFormat = this._pixelFormat;\n  var pixelDatatype = this._pixelDatatype;\n  var preMultiplyAlpha = this._preMultiplyAlpha;\n  var flipY = this._flipY;\n  var unpackAlignment = 4;\n\n  if (defined(arrayBufferView)) {\n    unpackAlignment = PixelFormat.alignmentInBytes(pixelFormat, pixelDatatype, width);\n  }\n\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n  var uploaded = false;\n\n  if (!this._initialized) {\n    if (xOffset === 0 && yOffset === 0 && width === textureWidth && height === textureHeight) {\n      // initialize the entire texture\n      if (defined(arrayBufferView)) {\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        if (flipY) {\n          arrayBufferView = PixelFormat.flipY(arrayBufferView, pixelFormat, pixelDatatype, textureWidth, textureHeight);\n        }\n\n        gl.texImage2D(target, 0, pixelFormat, textureWidth, textureHeight, 0, pixelFormat, pixelDatatype, arrayBufferView);\n      } else {\n        // Only valid for DOM-Element uploads\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, preMultiplyAlpha);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\n        gl.texImage2D(target, 0, pixelFormat, pixelFormat, pixelDatatype, source);\n      }\n\n      uploaded = true;\n    } else {\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false); // initialize the entire texture to zero\n\n      var bufferView = PixelFormat.createTypedArray(pixelFormat, pixelDatatype, textureWidth, textureHeight);\n      gl.texImage2D(target, 0, pixelFormat, textureWidth, textureHeight, 0, pixelFormat, pixelDatatype, bufferView);\n    }\n\n    this._initialized = true;\n  }\n\n  if (!uploaded) {\n    if (defined(arrayBufferView)) {\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\n      if (flipY) {\n        arrayBufferView = PixelFormat.flipY(arrayBufferView, pixelFormat, pixelDatatype, width, height);\n      }\n\n      gl.texSubImage2D(target, 0, xOffset, yOffset, width, height, pixelFormat, pixelDatatype, arrayBufferView);\n    } else {\n      // Only valid for DOM-Element uploads\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, preMultiplyAlpha);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\n      gl.texSubImage2D(target, 0, xOffset, yOffset, pixelFormat, pixelDatatype, source);\n    }\n  }\n\n  gl.bindTexture(target, null);\n};\n/**\n * @param {Number} [xOffset=0] The offset in the x direction within the texture to copy into.\n * @param {Number} [yOffset=0] The offset in the y direction within the texture to copy into.\n * @param {Number} [framebufferXOffset=0] optional\n * @param {Number} [framebufferYOffset=0] optional\n * @param {Number} [width=width] optional\n * @param {Number} [height=height] optional\n *\n * @exception {DeveloperError} Cannot call copyFromFramebuffer when the texture pixel format is DEPTH_COMPONENT or DEPTH_STENCIL.\n * @exception {DeveloperError} Cannot call copyFromFramebuffer when the texture pixel data type is FLOAT.\n * @exception {DeveloperError} Cannot call copyFromFramebuffer when the texture pixel data type is HALF_FLOAT.\n * @exception {DeveloperError} Cannot call copyFrom with a compressed texture pixel format.\n * @exception {DeveloperError} This texture was destroyed, i.e., destroy() was called.\n * @exception {DeveloperError} xOffset must be greater than or equal to zero.\n * @exception {DeveloperError} yOffset must be greater than or equal to zero.\n * @exception {DeveloperError} framebufferXOffset must be greater than or equal to zero.\n * @exception {DeveloperError} framebufferYOffset must be greater than or equal to zero.\n * @exception {DeveloperError} xOffset + width must be less than or equal to width.\n * @exception {DeveloperError} yOffset + height must be less than or equal to height.\n */\n\n\nTexture.prototype.copyFromFramebuffer = function (xOffset, yOffset, framebufferXOffset, framebufferYOffset, width, height) {\n  xOffset = defaultValue(xOffset, 0);\n  yOffset = defaultValue(yOffset, 0);\n  framebufferXOffset = defaultValue(framebufferXOffset, 0);\n  framebufferYOffset = defaultValue(framebufferYOffset, 0);\n  width = defaultValue(width, this._width);\n  height = defaultValue(height, this._height); //>>includeStart('debug', pragmas.debug);\n\n  if (PixelFormat.isDepthFormat(this._pixelFormat)) {\n    throw new DeveloperError(\"Cannot call copyFromFramebuffer when the texture pixel format is DEPTH_COMPONENT or DEPTH_STENCIL.\");\n  }\n\n  if (this._pixelDatatype === PixelDatatype.FLOAT) {\n    throw new DeveloperError(\"Cannot call copyFromFramebuffer when the texture pixel data type is FLOAT.\");\n  }\n\n  if (this._pixelDatatype === PixelDatatype.HALF_FLOAT) {\n    throw new DeveloperError(\"Cannot call copyFromFramebuffer when the texture pixel data type is HALF_FLOAT.\");\n  }\n\n  if (PixelFormat.isCompressedFormat(this._pixelFormat)) {\n    throw new DeveloperError(\"Cannot call copyFrom with a compressed texture pixel format.\");\n  }\n\n  Check.typeOf.number.greaterThanOrEquals(\"xOffset\", xOffset, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"yOffset\", yOffset, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"framebufferXOffset\", framebufferXOffset, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"framebufferYOffset\", framebufferYOffset, 0);\n  Check.typeOf.number.lessThanOrEquals(\"xOffset + width\", xOffset + width, this._width);\n  Check.typeOf.number.lessThanOrEquals(\"yOffset + height\", yOffset + height, this._height); //>>includeEnd('debug');\n\n  var gl = this._context._gl;\n  var target = this._textureTarget;\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(target, this._texture);\n  gl.copyTexSubImage2D(target, 0, xOffset, yOffset, framebufferXOffset, framebufferYOffset, width, height);\n  gl.bindTexture(target, null);\n  this._initialized = true;\n};\n/**\n * @param {MipmapHint} [hint=MipmapHint.DONT_CARE] optional.\n *\n * @exception {DeveloperError} Cannot call generateMipmap when the texture pixel format is DEPTH_COMPONENT or DEPTH_STENCIL.\n * @exception {DeveloperError} Cannot call generateMipmap when the texture pixel format is a compressed format.\n * @exception {DeveloperError} hint is invalid.\n * @exception {DeveloperError} This texture's width must be a power of two to call generateMipmap().\n * @exception {DeveloperError} This texture's height must be a power of two to call generateMipmap().\n * @exception {DeveloperError} This texture was destroyed, i.e., destroy() was called.\n */\n\n\nTexture.prototype.generateMipmap = function (hint) {\n  hint = defaultValue(hint, MipmapHint.DONT_CARE); //>>includeStart('debug', pragmas.debug);\n\n  if (PixelFormat.isDepthFormat(this._pixelFormat)) {\n    throw new DeveloperError(\"Cannot call generateMipmap when the texture pixel format is DEPTH_COMPONENT or DEPTH_STENCIL.\");\n  }\n\n  if (PixelFormat.isCompressedFormat(this._pixelFormat)) {\n    throw new DeveloperError(\"Cannot call generateMipmap with a compressed pixel format.\");\n  }\n\n  if (this._width > 1 && !CesiumMath.isPowerOfTwo(this._width)) {\n    throw new DeveloperError(\"width must be a power of two to call generateMipmap().\");\n  }\n\n  if (this._height > 1 && !CesiumMath.isPowerOfTwo(this._height)) {\n    throw new DeveloperError(\"height must be a power of two to call generateMipmap().\");\n  }\n\n  if (!MipmapHint.validate(hint)) {\n    throw new DeveloperError(\"hint is invalid.\");\n  } //>>includeEnd('debug');\n\n\n  this._hasMipmap = true;\n  var gl = this._context._gl;\n  var target = this._textureTarget;\n  gl.hint(gl.GENERATE_MIPMAP_HINT, hint);\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(target, this._texture);\n  gl.generateMipmap(target);\n  gl.bindTexture(target, null);\n};\n\nTexture.prototype.isDestroyed = function () {\n  return false;\n};\n\nTexture.prototype.destroy = function () {\n  this._context._gl.deleteTexture(this._texture);\n\n  return destroyObject(this);\n};\n\nexport default Texture;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Renderer/Texture.js"],"names":["Cartesian2","Check","createGuid","defaultValue","defined","destroyObject","DeveloperError","CesiumMath","PixelFormat","WebGLConstants","ContextLimits","MipmapHint","PixelDatatype","Sampler","TextureMagnificationFilter","TextureMinificationFilter","Texture","options","EMPTY_OBJECT","context","width","height","source","videoWidth","videoHeight","pixelFormat","RGBA","pixelDatatype","UNSIGNED_BYTE","internalFormat","isCompressed","isCompressedFormat","webgl2","DEPTH_STENCIL","DEPTH24_STENCIL8","DEPTH_COMPONENT","UNSIGNED_SHORT","DEPTH_COMPONENT16","UNSIGNED_INT","DEPTH_COMPONENT24","FLOAT","RGBA32F","RGB","RGB32F","RG","RG32F","R","R32F","HALF_FLOAT","RGBA16F","RGB16F","RG16F","R16F","typeOf","number","greaterThan","maximumTextureSize","validate","UNSIGNED_INT_24_8","floatingPointTexture","halfFloatingPointTexture","isDepthFormat","depthTexture","arrayBufferView","isDXTFormat","s3tc","isPVRTCFormat","pvrtc","isETC1Format","etc1","compressedTextureSizeInBytes","byteLength","preMultiplyAlpha","LUMINANCE","flipY","initialized","gl","_gl","textureTarget","TEXTURE_2D","texture","createTexture","activeTexture","TEXTURE0","bindTexture","unpackAlignment","alignmentInBytes","pixelStorei","UNPACK_ALIGNMENT","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_FLIP_Y_WEBGL","compressedTexImage2D","texImage2D","mipLevels","mipWidth","mipHeight","i","length","Math","floor","framebuffer","defaultFramebuffer","_bind","copyTexImage2D","xOffset","yOffset","_unBind","sizeInBytes","textureSizeInBytes","_id","_context","_textureFilterAnisotropic","_textureTarget","_texture","_pixelFormat","_pixelDatatype","_width","_height","_dimensions","_hasMipmap","_sizeInBytes","_preMultiplyAlpha","_flipY","_initialized","_sampler","undefined","sampler","create","fromFramebuffer","framebufferXOffset","framebufferYOffset","drawingBufferWidth","drawingBufferHeight","greaterThanOrEquals","Object","defineProperties","prototype","id","get","set","minificationFilter","magnificationFilter","mipmap","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","textureFloatLinear","textureHalfFloatLinear","NEAREST","target","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","wrapS","TEXTURE_WRAP_T","wrapT","TEXTURE_MAX_ANISOTROPY_EXT","maximumAnisotropy","dimensions","_target","copyFrom","lessThanOrEquals","textureWidth","textureHeight","uploaded","bufferView","createTypedArray","texSubImage2D","copyFromFramebuffer","copyTexSubImage2D","generateMipmap","hint","DONT_CARE","isPowerOfTwo","GENERATE_MIPMAP_HINT","isDestroyed","destroy","deleteTexture"],"mappings":"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","sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Check from \"../Core/Check.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport WebGLConstants from \"../Core/WebGLConstants.js\";\nimport ContextLimits from \"./ContextLimits.js\";\nimport MipmapHint from \"./MipmapHint.js\";\nimport PixelDatatype from \"./PixelDatatype.js\";\nimport Sampler from \"./Sampler.js\";\nimport TextureMagnificationFilter from \"./TextureMagnificationFilter.js\";\nimport TextureMinificationFilter from \"./TextureMinificationFilter.js\";\n\n/**\n * @private\n */\nfunction Texture(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.context\", options.context);\n  //>>includeEnd('debug');\n\n  var context = options.context;\n  var width = options.width;\n  var height = options.height;\n  var source = options.source;\n\n  if (defined(source)) {\n    if (!defined(width)) {\n      width = defaultValue(source.videoWidth, source.width);\n    }\n    if (!defined(height)) {\n      height = defaultValue(source.videoHeight, source.height);\n    }\n  }\n\n  var pixelFormat = defaultValue(options.pixelFormat, PixelFormat.RGBA);\n  var pixelDatatype = defaultValue(\n    options.pixelDatatype,\n    PixelDatatype.UNSIGNED_BYTE\n  );\n  var internalFormat = pixelFormat;\n\n  var isCompressed = PixelFormat.isCompressedFormat(internalFormat);\n\n  if (context.webgl2) {\n    if (pixelFormat === PixelFormat.DEPTH_STENCIL) {\n      internalFormat = WebGLConstants.DEPTH24_STENCIL8;\n    } else if (pixelFormat === PixelFormat.DEPTH_COMPONENT) {\n      if (pixelDatatype === PixelDatatype.UNSIGNED_SHORT) {\n        internalFormat = WebGLConstants.DEPTH_COMPONENT16;\n      } else if (pixelDatatype === PixelDatatype.UNSIGNED_INT) {\n        internalFormat = WebGLConstants.DEPTH_COMPONENT24;\n      }\n    }\n\n    if (pixelDatatype === PixelDatatype.FLOAT) {\n      switch (pixelFormat) {\n        case PixelFormat.RGBA:\n          internalFormat = WebGLConstants.RGBA32F;\n          break;\n        case PixelFormat.RGB:\n          internalFormat = WebGLConstants.RGB32F;\n          break;\n        case PixelFormat.RG:\n          internalFormat = WebGLConstants.RG32F;\n          break;\n        case PixelFormat.R:\n          internalFormat = WebGLConstants.R32F;\n          break;\n      }\n    } else if (pixelDatatype === PixelDatatype.HALF_FLOAT) {\n      switch (pixelFormat) {\n        case PixelFormat.RGBA:\n          internalFormat = WebGLConstants.RGBA16F;\n          break;\n        case PixelFormat.RGB:\n          internalFormat = WebGLConstants.RGB16F;\n          break;\n        case PixelFormat.RG:\n          internalFormat = WebGLConstants.RG16F;\n          break;\n        case PixelFormat.R:\n          internalFormat = WebGLConstants.R16F;\n          break;\n      }\n    }\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(width) || !defined(height)) {\n    throw new DeveloperError(\n      \"options requires a source field to create an initialized texture or width and height fields to create a blank texture.\"\n    );\n  }\n\n  Check.typeOf.number.greaterThan(\"width\", width, 0);\n\n  if (width > ContextLimits.maximumTextureSize) {\n    throw new DeveloperError(\n      \"Width must be less than or equal to the maximum texture size (\" +\n        ContextLimits.maximumTextureSize +\n        \").  Check maximumTextureSize.\"\n    );\n  }\n\n  Check.typeOf.number.greaterThan(\"height\", height, 0);\n\n  if (height > ContextLimits.maximumTextureSize) {\n    throw new DeveloperError(\n      \"Height must be less than or equal to the maximum texture size (\" +\n        ContextLimits.maximumTextureSize +\n        \").  Check maximumTextureSize.\"\n    );\n  }\n\n  if (!PixelFormat.validate(pixelFormat)) {\n    throw new DeveloperError(\"Invalid options.pixelFormat.\");\n  }\n\n  if (!isCompressed && !PixelDatatype.validate(pixelDatatype)) {\n    throw new DeveloperError(\"Invalid options.pixelDatatype.\");\n  }\n\n  if (\n    pixelFormat === PixelFormat.DEPTH_COMPONENT &&\n    pixelDatatype !== PixelDatatype.UNSIGNED_SHORT &&\n    pixelDatatype !== PixelDatatype.UNSIGNED_INT\n  ) {\n    throw new DeveloperError(\n      \"When options.pixelFormat is DEPTH_COMPONENT, options.pixelDatatype must be UNSIGNED_SHORT or UNSIGNED_INT.\"\n    );\n  }\n\n  if (\n    pixelFormat === PixelFormat.DEPTH_STENCIL &&\n    pixelDatatype !== PixelDatatype.UNSIGNED_INT_24_8\n  ) {\n    throw new DeveloperError(\n      \"When options.pixelFormat is DEPTH_STENCIL, options.pixelDatatype must be UNSIGNED_INT_24_8.\"\n    );\n  }\n\n  if (pixelDatatype === PixelDatatype.FLOAT && !context.floatingPointTexture) {\n    throw new DeveloperError(\n      \"When options.pixelDatatype is FLOAT, this WebGL implementation must support the OES_texture_float extension.  Check context.floatingPointTexture.\"\n    );\n  }\n\n  if (\n    pixelDatatype === PixelDatatype.HALF_FLOAT &&\n    !context.halfFloatingPointTexture\n  ) {\n    throw new DeveloperError(\n      \"When options.pixelDatatype is HALF_FLOAT, this WebGL implementation must support the OES_texture_half_float extension. Check context.halfFloatingPointTexture.\"\n    );\n  }\n\n  if (PixelFormat.isDepthFormat(pixelFormat)) {\n    if (defined(source)) {\n      throw new DeveloperError(\n        \"When options.pixelFormat is DEPTH_COMPONENT or DEPTH_STENCIL, source cannot be provided.\"\n      );\n    }\n\n    if (!context.depthTexture) {\n      throw new DeveloperError(\n        \"When options.pixelFormat is DEPTH_COMPONENT or DEPTH_STENCIL, this WebGL implementation must support WEBGL_depth_texture.  Check context.depthTexture.\"\n      );\n    }\n  }\n\n  if (isCompressed) {\n    if (!defined(source) || !defined(source.arrayBufferView)) {\n      throw new DeveloperError(\n        \"When options.pixelFormat is compressed, options.source.arrayBufferView must be defined.\"\n      );\n    }\n\n    if (PixelFormat.isDXTFormat(internalFormat) && !context.s3tc) {\n      throw new DeveloperError(\n        \"When options.pixelFormat is S3TC compressed, this WebGL implementation must support the WEBGL_texture_compression_s3tc extension. Check context.s3tc.\"\n      );\n    } else if (PixelFormat.isPVRTCFormat(internalFormat) && !context.pvrtc) {\n      throw new DeveloperError(\n        \"When options.pixelFormat is PVRTC compressed, this WebGL implementation must support the WEBGL_texture_compression_pvrtc extension. Check context.pvrtc.\"\n      );\n    } else if (PixelFormat.isETC1Format(internalFormat) && !context.etc1) {\n      throw new DeveloperError(\n        \"When options.pixelFormat is ETC1 compressed, this WebGL implementation must support the WEBGL_texture_compression_etc1 extension. Check context.etc1.\"\n      );\n    }\n\n    if (\n      PixelFormat.compressedTextureSizeInBytes(\n        internalFormat,\n        width,\n        height\n      ) !== source.arrayBufferView.byteLength\n    ) {\n      throw new DeveloperError(\n        \"The byte length of the array buffer is invalid for the compressed texture with the given width and height.\"\n      );\n    }\n  }\n  //>>includeEnd('debug');\n\n  // Use premultiplied alpha for opaque textures should perform better on Chrome:\n  // http://media.tojicode.com/webglCamp4/#20\n  var preMultiplyAlpha =\n    options.preMultiplyAlpha ||\n    pixelFormat === PixelFormat.RGB ||\n    pixelFormat === PixelFormat.LUMINANCE;\n  var flipY = defaultValue(options.flipY, true);\n\n  var initialized = true;\n\n  var gl = context._gl;\n  var textureTarget = gl.TEXTURE_2D;\n  var texture = gl.createTexture();\n\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(textureTarget, texture);\n\n  var unpackAlignment = 4;\n  if (defined(source) && defined(source.arrayBufferView) && !isCompressed) {\n    unpackAlignment = PixelFormat.alignmentInBytes(\n      pixelFormat,\n      pixelDatatype,\n      width\n    );\n  }\n\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n\n  if (defined(source)) {\n    if (defined(source.arrayBufferView)) {\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\n      // Source: typed array\n      var arrayBufferView = source.arrayBufferView;\n      if (isCompressed) {\n        gl.compressedTexImage2D(\n          textureTarget,\n          0,\n          internalFormat,\n          width,\n          height,\n          0,\n          arrayBufferView\n        );\n      } else {\n        if (flipY) {\n          arrayBufferView = PixelFormat.flipY(\n            arrayBufferView,\n            pixelFormat,\n            pixelDatatype,\n            width,\n            height\n          );\n        }\n        gl.texImage2D(\n          textureTarget,\n          0,\n          internalFormat,\n          width,\n          height,\n          0,\n          pixelFormat,\n          pixelDatatype,\n          arrayBufferView\n        );\n\n        if (defined(source.mipLevels)) {\n          var mipWidth = width;\n          var mipHeight = height;\n          for (var i = 0; i < source.mipLevels.length; ++i) {\n            mipWidth = Math.floor(mipWidth / 2) | 0;\n            if (mipWidth < 1) {\n              mipWidth = 1;\n            }\n            mipHeight = Math.floor(mipHeight / 2) | 0;\n            if (mipHeight < 1) {\n              mipHeight = 1;\n            }\n            gl.texImage2D(\n              textureTarget,\n              i + 1,\n              internalFormat,\n              mipWidth,\n              mipHeight,\n              0,\n              pixelFormat,\n              pixelDatatype,\n              source.mipLevels[i]\n            );\n          }\n        }\n      }\n    } else if (defined(source.framebuffer)) {\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\n      // Source: framebuffer\n      if (source.framebuffer !== context.defaultFramebuffer) {\n        source.framebuffer._bind();\n      }\n\n      gl.copyTexImage2D(\n        textureTarget,\n        0,\n        internalFormat,\n        source.xOffset,\n        source.yOffset,\n        width,\n        height,\n        0\n      );\n\n      if (source.framebuffer !== context.defaultFramebuffer) {\n        source.framebuffer._unBind();\n      }\n    } else {\n      // Only valid for DOM-Element uploads\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, preMultiplyAlpha);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\n\n      // Source: ImageData, HTMLImageElement, HTMLCanvasElement, or HTMLVideoElement\n      gl.texImage2D(\n        textureTarget,\n        0,\n        internalFormat,\n        pixelFormat,\n        pixelDatatype,\n        source\n      );\n    }\n  } else {\n    gl.texImage2D(\n      textureTarget,\n      0,\n      internalFormat,\n      width,\n      height,\n      0,\n      pixelFormat,\n      pixelDatatype,\n      null\n    );\n    initialized = false;\n  }\n  gl.bindTexture(textureTarget, null);\n\n  var sizeInBytes;\n  if (isCompressed) {\n    sizeInBytes = PixelFormat.compressedTextureSizeInBytes(\n      pixelFormat,\n      width,\n      height\n    );\n  } else {\n    sizeInBytes = PixelFormat.textureSizeInBytes(\n      pixelFormat,\n      pixelDatatype,\n      width,\n      height\n    );\n  }\n\n  this._id = createGuid();\n  this._context = context;\n  this._textureFilterAnisotropic = context._textureFilterAnisotropic;\n  this._textureTarget = textureTarget;\n  this._texture = texture;\n  this._pixelFormat = pixelFormat;\n  this._pixelDatatype = pixelDatatype;\n  this._width = width;\n  this._height = height;\n  this._dimensions = new Cartesian2(width, height);\n  this._hasMipmap = false;\n  this._sizeInBytes = sizeInBytes;\n  this._preMultiplyAlpha = preMultiplyAlpha;\n  this._flipY = flipY;\n  this._initialized = initialized;\n  this._sampler = undefined;\n\n  this.sampler = defined(options.sampler) ? options.sampler : new Sampler();\n}\n\n/**\n * This function is identical to using the Texture constructor except that it can be\n * replaced with a mock/spy in tests.\n * @private\n */\nTexture.create = function (options) {\n  return new Texture(options);\n};\n\n/**\n * Creates a texture, and copies a subimage of the framebuffer to it.  When called without arguments,\n * the texture is the same width and height as the framebuffer and contains its contents.\n *\n * @param {Object} options Object with the following properties:\n * @param {Context} options.context The context in which the Texture gets created.\n * @param {PixelFormat} [options.pixelFormat=PixelFormat.RGB] The texture's internal pixel format.\n * @param {Number} [options.framebufferXOffset=0] An offset in the x direction in the framebuffer where copying begins from.\n * @param {Number} [options.framebufferYOffset=0] An offset in the y direction in the framebuffer where copying begins from.\n * @param {Number} [options.width=canvas.clientWidth] The width of the texture in texels.\n * @param {Number} [options.height=canvas.clientHeight] The height of the texture in texels.\n * @param {Framebuffer} [options.framebuffer=defaultFramebuffer] The framebuffer from which to create the texture.  If this\n *        parameter is not specified, the default framebuffer is used.\n * @returns {Texture} A texture with contents from the framebuffer.\n *\n * @exception {DeveloperError} Invalid pixelFormat.\n * @exception {DeveloperError} pixelFormat cannot be DEPTH_COMPONENT, DEPTH_STENCIL or a compressed format.\n * @exception {DeveloperError} framebufferXOffset must be greater than or equal to zero.\n * @exception {DeveloperError} framebufferYOffset must be greater than or equal to zero.\n * @exception {DeveloperError} framebufferXOffset + width must be less than or equal to canvas.clientWidth.\n * @exception {DeveloperError} framebufferYOffset + height must be less than or equal to canvas.clientHeight.\n *\n *\n * @example\n * // Create a texture with the contents of the framebuffer.\n * var t = Texture.fromFramebuffer({\n *     context : context\n * });\n *\n * @see Sampler\n *\n * @private\n */\nTexture.fromFramebuffer = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.context\", options.context);\n  //>>includeEnd('debug');\n\n  var context = options.context;\n  var gl = context._gl;\n\n  var pixelFormat = defaultValue(options.pixelFormat, PixelFormat.RGB);\n  var framebufferXOffset = defaultValue(options.framebufferXOffset, 0);\n  var framebufferYOffset = defaultValue(options.framebufferYOffset, 0);\n  var width = defaultValue(options.width, gl.drawingBufferWidth);\n  var height = defaultValue(options.height, gl.drawingBufferHeight);\n  var framebuffer = options.framebuffer;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!PixelFormat.validate(pixelFormat)) {\n    throw new DeveloperError(\"Invalid pixelFormat.\");\n  }\n  if (\n    PixelFormat.isDepthFormat(pixelFormat) ||\n    PixelFormat.isCompressedFormat(pixelFormat)\n  ) {\n    throw new DeveloperError(\n      \"pixelFormat cannot be DEPTH_COMPONENT, DEPTH_STENCIL or a compressed format.\"\n    );\n  }\n  Check.defined(\"options.context\", options.context);\n  Check.typeOf.number.greaterThanOrEquals(\n    \"framebufferXOffset\",\n    framebufferXOffset,\n    0\n  );\n  Check.typeOf.number.greaterThanOrEquals(\n    \"framebufferYOffset\",\n    framebufferYOffset,\n    0\n  );\n  if (framebufferXOffset + width > gl.drawingBufferWidth) {\n    throw new DeveloperError(\n      \"framebufferXOffset + width must be less than or equal to drawingBufferWidth\"\n    );\n  }\n  if (framebufferYOffset + height > gl.drawingBufferHeight) {\n    throw new DeveloperError(\n      \"framebufferYOffset + height must be less than or equal to drawingBufferHeight.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var texture = new Texture({\n    context: context,\n    width: width,\n    height: height,\n    pixelFormat: pixelFormat,\n    source: {\n      framebuffer: defined(framebuffer)\n        ? framebuffer\n        : context.defaultFramebuffer,\n      xOffset: framebufferXOffset,\n      yOffset: framebufferYOffset,\n      width: width,\n      height: height,\n    },\n  });\n\n  return texture;\n};\n\nObject.defineProperties(Texture.prototype, {\n  /**\n   * A unique id for the texture\n   * @memberof Texture.prototype\n   * @type {String}\n   * @readonly\n   * @private\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n  /**\n   * The sampler to use when sampling this texture.\n   * Create a sampler by calling {@link Sampler}.  If this\n   * parameter is not specified, a default sampler is used.  The default sampler clamps texture\n   * coordinates in both directions, uses linear filtering for both magnification and minification,\n   * and uses a maximum anisotropy of 1.0.\n   * @memberof Texture.prototype\n   * @type {Object}\n   */\n  sampler: {\n    get: function () {\n      return this._sampler;\n    },\n    set: function (sampler) {\n      var minificationFilter = sampler.minificationFilter;\n      var magnificationFilter = sampler.magnificationFilter;\n\n      var mipmap =\n        minificationFilter ===\n          TextureMinificationFilter.NEAREST_MIPMAP_NEAREST ||\n        minificationFilter ===\n          TextureMinificationFilter.NEAREST_MIPMAP_LINEAR ||\n        minificationFilter ===\n          TextureMinificationFilter.LINEAR_MIPMAP_NEAREST ||\n        minificationFilter === TextureMinificationFilter.LINEAR_MIPMAP_LINEAR;\n\n      var context = this._context;\n      var pixelDatatype = this._pixelDatatype;\n\n      // float textures only support nearest filtering unless the linear extensions are supported, so override the sampler's settings\n      if (\n        (pixelDatatype === PixelDatatype.FLOAT &&\n          !context.textureFloatLinear) ||\n        (pixelDatatype === PixelDatatype.HALF_FLOAT &&\n          !context.textureHalfFloatLinear)\n      ) {\n        minificationFilter = mipmap\n          ? TextureMinificationFilter.NEAREST_MIPMAP_NEAREST\n          : TextureMinificationFilter.NEAREST;\n        magnificationFilter = TextureMagnificationFilter.NEAREST;\n      }\n\n      var gl = context._gl;\n      var target = this._textureTarget;\n\n      gl.activeTexture(gl.TEXTURE0);\n      gl.bindTexture(target, this._texture);\n      gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, minificationFilter);\n      gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, magnificationFilter);\n      gl.texParameteri(target, gl.TEXTURE_WRAP_S, sampler.wrapS);\n      gl.texParameteri(target, gl.TEXTURE_WRAP_T, sampler.wrapT);\n      if (defined(this._textureFilterAnisotropic)) {\n        gl.texParameteri(\n          target,\n          this._textureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT,\n          sampler.maximumAnisotropy\n        );\n      }\n      gl.bindTexture(target, null);\n\n      this._sampler = sampler;\n    },\n  },\n  pixelFormat: {\n    get: function () {\n      return this._pixelFormat;\n    },\n  },\n  pixelDatatype: {\n    get: function () {\n      return this._pixelDatatype;\n    },\n  },\n  dimensions: {\n    get: function () {\n      return this._dimensions;\n    },\n  },\n  preMultiplyAlpha: {\n    get: function () {\n      return this._preMultiplyAlpha;\n    },\n  },\n  flipY: {\n    get: function () {\n      return this._flipY;\n    },\n  },\n  width: {\n    get: function () {\n      return this._width;\n    },\n  },\n  height: {\n    get: function () {\n      return this._height;\n    },\n  },\n  sizeInBytes: {\n    get: function () {\n      if (this._hasMipmap) {\n        return Math.floor((this._sizeInBytes * 4) / 3);\n      }\n      return this._sizeInBytes;\n    },\n  },\n  _target: {\n    get: function () {\n      return this._textureTarget;\n    },\n  },\n});\n\n/**\n * Copy new image data into this texture, from a source {@link ImageData}, {@link Image}, {@link Canvas}, or {@link Video}.\n * or an object with width, height, and arrayBufferView properties.\n *\n * @param {Object} source The source {@link ImageData}, {@link Image}, {@link Canvas}, or {@link Video},\n *                        or an object with width, height, and arrayBufferView properties.\n * @param {Number} [xOffset=0] The offset in the x direction within the texture to copy into.\n * @param {Number} [yOffset=0] The offset in the y direction within the texture to copy into.\n *\n * @exception {DeveloperError} Cannot call copyFrom when the texture pixel format is DEPTH_COMPONENT or DEPTH_STENCIL.\n * @exception {DeveloperError} Cannot call copyFrom with a compressed texture pixel format.\n * @exception {DeveloperError} xOffset must be greater than or equal to zero.\n * @exception {DeveloperError} yOffset must be greater than or equal to zero.\n * @exception {DeveloperError} xOffset + source.width must be less than or equal to width.\n * @exception {DeveloperError} yOffset + source.height must be less than or equal to height.\n * @exception {DeveloperError} This texture was destroyed, i.e., destroy() was called.\n *\n * @example\n * texture.copyFrom({\n *   width : 1,\n *   height : 1,\n *   arrayBufferView : new Uint8Array([255, 0, 0, 255])\n * });\n */\nTexture.prototype.copyFrom = function (source, xOffset, yOffset) {\n  xOffset = defaultValue(xOffset, 0);\n  yOffset = defaultValue(yOffset, 0);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"source\", source);\n  if (PixelFormat.isDepthFormat(this._pixelFormat)) {\n    throw new DeveloperError(\n      \"Cannot call copyFrom when the texture pixel format is DEPTH_COMPONENT or DEPTH_STENCIL.\"\n    );\n  }\n  if (PixelFormat.isCompressedFormat(this._pixelFormat)) {\n    throw new DeveloperError(\n      \"Cannot call copyFrom with a compressed texture pixel format.\"\n    );\n  }\n  Check.typeOf.number.greaterThanOrEquals(\"xOffset\", xOffset, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"yOffset\", yOffset, 0);\n  Check.typeOf.number.lessThanOrEquals(\n    \"xOffset + source.width\",\n    xOffset + source.width,\n    this._width\n  );\n  Check.typeOf.number.lessThanOrEquals(\n    \"yOffset + source.height\",\n    yOffset + source.height,\n    this._height\n  );\n  //>>includeEnd('debug');\n\n  var gl = this._context._gl;\n  var target = this._textureTarget;\n\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(target, this._texture);\n\n  var width = source.width;\n  var height = source.height;\n  var arrayBufferView = source.arrayBufferView;\n\n  var textureWidth = this._width;\n  var textureHeight = this._height;\n  var pixelFormat = this._pixelFormat;\n  var pixelDatatype = this._pixelDatatype;\n\n  var preMultiplyAlpha = this._preMultiplyAlpha;\n  var flipY = this._flipY;\n\n  var unpackAlignment = 4;\n  if (defined(arrayBufferView)) {\n    unpackAlignment = PixelFormat.alignmentInBytes(\n      pixelFormat,\n      pixelDatatype,\n      width\n    );\n  }\n\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n\n  var uploaded = false;\n  if (!this._initialized) {\n    if (\n      xOffset === 0 &&\n      yOffset === 0 &&\n      width === textureWidth &&\n      height === textureHeight\n    ) {\n      // initialize the entire texture\n      if (defined(arrayBufferView)) {\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        if (flipY) {\n          arrayBufferView = PixelFormat.flipY(\n            arrayBufferView,\n            pixelFormat,\n            pixelDatatype,\n            textureWidth,\n            textureHeight\n          );\n        }\n        gl.texImage2D(\n          target,\n          0,\n          pixelFormat,\n          textureWidth,\n          textureHeight,\n          0,\n          pixelFormat,\n          pixelDatatype,\n          arrayBufferView\n        );\n      } else {\n        // Only valid for DOM-Element uploads\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, preMultiplyAlpha);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\n\n        gl.texImage2D(\n          target,\n          0,\n          pixelFormat,\n          pixelFormat,\n          pixelDatatype,\n          source\n        );\n      }\n      uploaded = true;\n    } else {\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\n      // initialize the entire texture to zero\n      var bufferView = PixelFormat.createTypedArray(\n        pixelFormat,\n        pixelDatatype,\n        textureWidth,\n        textureHeight\n      );\n      gl.texImage2D(\n        target,\n        0,\n        pixelFormat,\n        textureWidth,\n        textureHeight,\n        0,\n        pixelFormat,\n        pixelDatatype,\n        bufferView\n      );\n    }\n    this._initialized = true;\n  }\n\n  if (!uploaded) {\n    if (defined(arrayBufferView)) {\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\n      if (flipY) {\n        arrayBufferView = PixelFormat.flipY(\n          arrayBufferView,\n          pixelFormat,\n          pixelDatatype,\n          width,\n          height\n        );\n      }\n      gl.texSubImage2D(\n        target,\n        0,\n        xOffset,\n        yOffset,\n        width,\n        height,\n        pixelFormat,\n        pixelDatatype,\n        arrayBufferView\n      );\n    } else {\n      // Only valid for DOM-Element uploads\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, preMultiplyAlpha);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\n\n      gl.texSubImage2D(\n        target,\n        0,\n        xOffset,\n        yOffset,\n        pixelFormat,\n        pixelDatatype,\n        source\n      );\n    }\n  }\n\n  gl.bindTexture(target, null);\n};\n\n/**\n * @param {Number} [xOffset=0] The offset in the x direction within the texture to copy into.\n * @param {Number} [yOffset=0] The offset in the y direction within the texture to copy into.\n * @param {Number} [framebufferXOffset=0] optional\n * @param {Number} [framebufferYOffset=0] optional\n * @param {Number} [width=width] optional\n * @param {Number} [height=height] optional\n *\n * @exception {DeveloperError} Cannot call copyFromFramebuffer when the texture pixel format is DEPTH_COMPONENT or DEPTH_STENCIL.\n * @exception {DeveloperError} Cannot call copyFromFramebuffer when the texture pixel data type is FLOAT.\n * @exception {DeveloperError} Cannot call copyFromFramebuffer when the texture pixel data type is HALF_FLOAT.\n * @exception {DeveloperError} Cannot call copyFrom with a compressed texture pixel format.\n * @exception {DeveloperError} This texture was destroyed, i.e., destroy() was called.\n * @exception {DeveloperError} xOffset must be greater than or equal to zero.\n * @exception {DeveloperError} yOffset must be greater than or equal to zero.\n * @exception {DeveloperError} framebufferXOffset must be greater than or equal to zero.\n * @exception {DeveloperError} framebufferYOffset must be greater than or equal to zero.\n * @exception {DeveloperError} xOffset + width must be less than or equal to width.\n * @exception {DeveloperError} yOffset + height must be less than or equal to height.\n */\nTexture.prototype.copyFromFramebuffer = function (\n  xOffset,\n  yOffset,\n  framebufferXOffset,\n  framebufferYOffset,\n  width,\n  height\n) {\n  xOffset = defaultValue(xOffset, 0);\n  yOffset = defaultValue(yOffset, 0);\n  framebufferXOffset = defaultValue(framebufferXOffset, 0);\n  framebufferYOffset = defaultValue(framebufferYOffset, 0);\n  width = defaultValue(width, this._width);\n  height = defaultValue(height, this._height);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (PixelFormat.isDepthFormat(this._pixelFormat)) {\n    throw new DeveloperError(\n      \"Cannot call copyFromFramebuffer when the texture pixel format is DEPTH_COMPONENT or DEPTH_STENCIL.\"\n    );\n  }\n  if (this._pixelDatatype === PixelDatatype.FLOAT) {\n    throw new DeveloperError(\n      \"Cannot call copyFromFramebuffer when the texture pixel data type is FLOAT.\"\n    );\n  }\n  if (this._pixelDatatype === PixelDatatype.HALF_FLOAT) {\n    throw new DeveloperError(\n      \"Cannot call copyFromFramebuffer when the texture pixel data type is HALF_FLOAT.\"\n    );\n  }\n  if (PixelFormat.isCompressedFormat(this._pixelFormat)) {\n    throw new DeveloperError(\n      \"Cannot call copyFrom with a compressed texture pixel format.\"\n    );\n  }\n\n  Check.typeOf.number.greaterThanOrEquals(\"xOffset\", xOffset, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"yOffset\", yOffset, 0);\n  Check.typeOf.number.greaterThanOrEquals(\n    \"framebufferXOffset\",\n    framebufferXOffset,\n    0\n  );\n  Check.typeOf.number.greaterThanOrEquals(\n    \"framebufferYOffset\",\n    framebufferYOffset,\n    0\n  );\n  Check.typeOf.number.lessThanOrEquals(\n    \"xOffset + width\",\n    xOffset + width,\n    this._width\n  );\n  Check.typeOf.number.lessThanOrEquals(\n    \"yOffset + height\",\n    yOffset + height,\n    this._height\n  );\n  //>>includeEnd('debug');\n\n  var gl = this._context._gl;\n  var target = this._textureTarget;\n\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(target, this._texture);\n  gl.copyTexSubImage2D(\n    target,\n    0,\n    xOffset,\n    yOffset,\n    framebufferXOffset,\n    framebufferYOffset,\n    width,\n    height\n  );\n  gl.bindTexture(target, null);\n  this._initialized = true;\n};\n\n/**\n * @param {MipmapHint} [hint=MipmapHint.DONT_CARE] optional.\n *\n * @exception {DeveloperError} Cannot call generateMipmap when the texture pixel format is DEPTH_COMPONENT or DEPTH_STENCIL.\n * @exception {DeveloperError} Cannot call generateMipmap when the texture pixel format is a compressed format.\n * @exception {DeveloperError} hint is invalid.\n * @exception {DeveloperError} This texture's width must be a power of two to call generateMipmap().\n * @exception {DeveloperError} This texture's height must be a power of two to call generateMipmap().\n * @exception {DeveloperError} This texture was destroyed, i.e., destroy() was called.\n */\nTexture.prototype.generateMipmap = function (hint) {\n  hint = defaultValue(hint, MipmapHint.DONT_CARE);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (PixelFormat.isDepthFormat(this._pixelFormat)) {\n    throw new DeveloperError(\n      \"Cannot call generateMipmap when the texture pixel format is DEPTH_COMPONENT or DEPTH_STENCIL.\"\n    );\n  }\n  if (PixelFormat.isCompressedFormat(this._pixelFormat)) {\n    throw new DeveloperError(\n      \"Cannot call generateMipmap with a compressed pixel format.\"\n    );\n  }\n  if (this._width > 1 && !CesiumMath.isPowerOfTwo(this._width)) {\n    throw new DeveloperError(\n      \"width must be a power of two to call generateMipmap().\"\n    );\n  }\n  if (this._height > 1 && !CesiumMath.isPowerOfTwo(this._height)) {\n    throw new DeveloperError(\n      \"height must be a power of two to call generateMipmap().\"\n    );\n  }\n  if (!MipmapHint.validate(hint)) {\n    throw new DeveloperError(\"hint is invalid.\");\n  }\n  //>>includeEnd('debug');\n\n  this._hasMipmap = true;\n\n  var gl = this._context._gl;\n  var target = this._textureTarget;\n\n  gl.hint(gl.GENERATE_MIPMAP_HINT, hint);\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(target, this._texture);\n  gl.generateMipmap(target);\n  gl.bindTexture(target, null);\n};\n\nTexture.prototype.isDestroyed = function () {\n  return false;\n};\n\nTexture.prototype.destroy = function () {\n  this._context._gl.deleteTexture(this._texture);\n  return destroyObject(this);\n};\nexport default Texture;\n"]},"metadata":{},"sourceType":"module"}