{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport CesiumMath from \"../Core/Math.js\";\nvar defaultDimensions = new Cartesian3(1.0, 1.0, 1.0);\n/**\n * A ParticleEmitter that emits particles within a box.\n * Particles will be positioned randomly within the box and have initial velocities emanating from the center of the box.\n *\n * @alias BoxEmitter\n * @constructor\n *\n * @param {Cartesian3} dimensions The width, height and depth dimensions of the box.\n */\n\nfunction BoxEmitter(dimensions) {\n  dimensions = defaultValue(dimensions, defaultDimensions); //>>includeStart('debug', pragmas.debug);\n\n  Check.defined(\"dimensions\", dimensions);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.x\", dimensions.x, 0.0);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.y\", dimensions.y, 0.0);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.z\", dimensions.z, 0.0); //>>includeEnd('debug');\n\n  this._dimensions = Cartesian3.clone(dimensions);\n}\n\nObject.defineProperties(BoxEmitter.prototype, {\n  /**\n   * The width, height and depth dimensions of the box in meters.\n   * @memberof BoxEmitter.prototype\n   * @type {Cartesian3}\n   * @default new Cartesian3(1.0, 1.0, 1.0)\n   */\n  dimensions: {\n    get: function () {\n      return this._dimensions;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      Check.typeOf.number.greaterThanOrEquals(\"value.x\", value.x, 0.0);\n      Check.typeOf.number.greaterThanOrEquals(\"value.y\", value.y, 0.0);\n      Check.typeOf.number.greaterThanOrEquals(\"value.z\", value.z, 0.0); //>>includeEnd('debug');\n\n      Cartesian3.clone(value, this._dimensions);\n    }\n  }\n});\nvar scratchHalfDim = new Cartesian3();\n/**\n * Initializes the given {Particle} by setting it's position and velocity.\n *\n * @private\n * @param {Particle} particle The particle to initialize.\n */\n\nBoxEmitter.prototype.emit = function (particle) {\n  var dim = this._dimensions;\n  var halfDim = Cartesian3.multiplyByScalar(dim, 0.5, scratchHalfDim);\n  var x = CesiumMath.randomBetween(-halfDim.x, halfDim.x);\n  var y = CesiumMath.randomBetween(-halfDim.y, halfDim.y);\n  var z = CesiumMath.randomBetween(-halfDim.z, halfDim.z);\n  particle.position = Cartesian3.fromElements(x, y, z, particle.position);\n  particle.velocity = Cartesian3.normalize(particle.position, particle.velocity);\n};\n\nexport default BoxEmitter;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/BoxEmitter.js"],"names":["Cartesian3","Check","defaultValue","CesiumMath","defaultDimensions","BoxEmitter","dimensions","defined","typeOf","number","greaterThanOrEquals","x","y","z","_dimensions","clone","Object","defineProperties","prototype","get","set","value","scratchHalfDim","emit","particle","dim","halfDim","multiplyByScalar","randomBetween","position","fromElements","velocity","normalize"],"mappings":"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","sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport CesiumMath from \"../Core/Math.js\";\n\nvar defaultDimensions = new Cartesian3(1.0, 1.0, 1.0);\n\n/**\n * A ParticleEmitter that emits particles within a box.\n * Particles will be positioned randomly within the box and have initial velocities emanating from the center of the box.\n *\n * @alias BoxEmitter\n * @constructor\n *\n * @param {Cartesian3} dimensions The width, height and depth dimensions of the box.\n */\nfunction BoxEmitter(dimensions) {\n  dimensions = defaultValue(dimensions, defaultDimensions);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"dimensions\", dimensions);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.x\", dimensions.x, 0.0);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.y\", dimensions.y, 0.0);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.z\", dimensions.z, 0.0);\n  //>>includeEnd('debug');\n\n  this._dimensions = Cartesian3.clone(dimensions);\n}\n\nObject.defineProperties(BoxEmitter.prototype, {\n  /**\n   * The width, height and depth dimensions of the box in meters.\n   * @memberof BoxEmitter.prototype\n   * @type {Cartesian3}\n   * @default new Cartesian3(1.0, 1.0, 1.0)\n   */\n  dimensions: {\n    get: function () {\n      return this._dimensions;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      Check.typeOf.number.greaterThanOrEquals(\"value.x\", value.x, 0.0);\n      Check.typeOf.number.greaterThanOrEquals(\"value.y\", value.y, 0.0);\n      Check.typeOf.number.greaterThanOrEquals(\"value.z\", value.z, 0.0);\n      //>>includeEnd('debug');\n      Cartesian3.clone(value, this._dimensions);\n    },\n  },\n});\n\nvar scratchHalfDim = new Cartesian3();\n\n/**\n * Initializes the given {Particle} by setting it's position and velocity.\n *\n * @private\n * @param {Particle} particle The particle to initialize.\n */\nBoxEmitter.prototype.emit = function (particle) {\n  var dim = this._dimensions;\n  var halfDim = Cartesian3.multiplyByScalar(dim, 0.5, scratchHalfDim);\n\n  var x = CesiumMath.randomBetween(-halfDim.x, halfDim.x);\n  var y = CesiumMath.randomBetween(-halfDim.y, halfDim.y);\n  var z = CesiumMath.randomBetween(-halfDim.z, halfDim.z);\n\n  particle.position = Cartesian3.fromElements(x, y, z, particle.position);\n  particle.velocity = Cartesian3.normalize(\n    particle.position,\n    particle.velocity\n  );\n};\nexport default BoxEmitter;\n"]},"metadata":{},"sourceType":"module"}