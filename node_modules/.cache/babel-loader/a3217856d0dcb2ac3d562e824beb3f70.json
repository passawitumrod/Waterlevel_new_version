{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport Event from \"../Core/Event.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport oneTimeWarning from \"../Core/oneTimeWarning.js\";\nimport ClassificationType from \"../Scene/ClassificationType.js\";\nimport ShadowMode from \"../Scene/ShadowMode.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport Entity from \"./Entity.js\";\nimport Property from \"./Property.js\";\nvar defaultMaterial = new ColorMaterialProperty(Color.WHITE);\nvar defaultShow = new ConstantProperty(true);\nvar defaultFill = new ConstantProperty(true);\nvar defaultOutline = new ConstantProperty(false);\nvar defaultOutlineColor = new ConstantProperty(Color.BLACK);\nvar defaultShadows = new ConstantProperty(ShadowMode.DISABLED);\nvar defaultDistanceDisplayCondition = new ConstantProperty(new DistanceDisplayCondition());\nvar defaultClassificationType = new ConstantProperty(ClassificationType.BOTH);\n/**\n * An abstract class for updating geometry entities.\n * @alias GeometryUpdater\n * @constructor\n *\n * @param {Object} options An object with the following properties:\n * @param {Entity} options.entity The entity containing the geometry to be visualized.\n * @param {Scene} options.scene The scene where visualization is taking place.\n * @param {Object} options.geometryOptions Options for the geometry\n * @param {String} options.geometryPropertyName The geometry property name\n * @param {String[]} options.observedPropertyNames The entity properties this geometry cares about\n */\n\nfunction GeometryUpdater(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.entity\", options.entity);\n  Check.defined(\"options.scene\", options.scene);\n  Check.defined(\"options.geometryOptions\", options.geometryOptions);\n  Check.defined(\"options.geometryPropertyName\", options.geometryPropertyName);\n  Check.defined(\"options.observedPropertyNames\", options.observedPropertyNames); //>>includeEnd('debug');\n\n  var entity = options.entity;\n  var geometryPropertyName = options.geometryPropertyName;\n  this._entity = entity;\n  this._scene = options.scene;\n  this._fillEnabled = false;\n  this._isClosed = false;\n  this._onTerrain = false;\n  this._dynamic = false;\n  this._outlineEnabled = false;\n  this._geometryChanged = new Event();\n  this._showProperty = undefined;\n  this._materialProperty = undefined;\n  this._showOutlineProperty = undefined;\n  this._outlineColorProperty = undefined;\n  this._outlineWidth = 1.0;\n  this._shadowsProperty = undefined;\n  this._distanceDisplayConditionProperty = undefined;\n  this._classificationTypeProperty = undefined;\n  this._options = options.geometryOptions;\n  this._geometryPropertyName = geometryPropertyName;\n  this._id = geometryPropertyName + \"-\" + entity.id;\n  this._observedPropertyNames = options.observedPropertyNames;\n  this._supportsMaterialsforEntitiesOnTerrain = Entity.supportsMaterialsforEntitiesOnTerrain(options.scene);\n}\n\nObject.defineProperties(GeometryUpdater.prototype, {\n  /**\n   * Gets the unique ID associated with this updater\n   * @memberof GeometryUpdater.prototype\n   * @type {String}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    }\n  },\n\n  /**\n   * Gets the entity associated with this geometry.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Entity}\n   * @readonly\n   */\n  entity: {\n    get: function () {\n      return this._entity;\n    }\n  },\n\n  /**\n   * Gets a value indicating if the geometry has a fill component.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  fillEnabled: {\n    get: function () {\n      return this._fillEnabled;\n    }\n  },\n\n  /**\n   * Gets a value indicating if fill visibility varies with simulation time.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  hasConstantFill: {\n    get: function () {\n      return !this._fillEnabled || !defined(this._entity.availability) && Property.isConstant(this._showProperty) && Property.isConstant(this._fillProperty);\n    }\n  },\n\n  /**\n   * Gets the material property used to fill the geometry.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {MaterialProperty}\n   * @readonly\n   */\n  fillMaterialProperty: {\n    get: function () {\n      return this._materialProperty;\n    }\n  },\n\n  /**\n   * Gets a value indicating if the geometry has an outline component.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  outlineEnabled: {\n    get: function () {\n      return this._outlineEnabled;\n    }\n  },\n\n  /**\n   * Gets a value indicating if the geometry has an outline component.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  hasConstantOutline: {\n    get: function () {\n      return !this._outlineEnabled || !defined(this._entity.availability) && Property.isConstant(this._showProperty) && Property.isConstant(this._showOutlineProperty);\n    }\n  },\n\n  /**\n   * Gets the {@link Color} property for the geometry outline.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  outlineColorProperty: {\n    get: function () {\n      return this._outlineColorProperty;\n    }\n  },\n\n  /**\n   * Gets the constant with of the geometry outline, in pixels.\n   * This value is only valid if isDynamic is false.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  outlineWidth: {\n    get: function () {\n      return this._outlineWidth;\n    }\n  },\n\n  /**\n   * Gets the property specifying whether the geometry\n   * casts or receives shadows from light sources.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  shadowsProperty: {\n    get: function () {\n      return this._shadowsProperty;\n    }\n  },\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this geometry will be displayed.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  distanceDisplayConditionProperty: {\n    get: function () {\n      return this._distanceDisplayConditionProperty;\n    }\n  },\n\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying if this geometry will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  classificationTypeProperty: {\n    get: function () {\n      return this._classificationTypeProperty;\n    }\n  },\n\n  /**\n   * Gets a value indicating if the geometry is time-varying.\n   * If true, all visualization is delegated to a DynamicGeometryUpdater\n   * returned by GeometryUpdater#createDynamicUpdater.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isDynamic: {\n    get: function () {\n      return this._dynamic;\n    }\n  },\n\n  /**\n   * Gets a value indicating if the geometry is closed.\n   * This property is only valid for static geometry.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isClosed: {\n    get: function () {\n      return this._isClosed;\n    }\n  },\n\n  /**\n   * Gets a value indicating if the geometry should be drawn on terrain.\n   * @memberof EllipseGeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  onTerrain: {\n    get: function () {\n      return this._onTerrain;\n    }\n  },\n\n  /**\n   * Gets an event that is raised whenever the public properties\n   * of this updater change.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  geometryChanged: {\n    get: function () {\n      return this._geometryChanged;\n    }\n  }\n});\n/**\n * Checks if the geometry is outlined at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve visibility.\n * @returns {Boolean} true if geometry is outlined at the provided time, false otherwise.\n */\n\nGeometryUpdater.prototype.isOutlineVisible = function (time) {\n  var entity = this._entity;\n\n  var visible = this._outlineEnabled && entity.isAvailable(time) && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time);\n\n  return defaultValue(visible, false);\n};\n/**\n * Checks if the geometry is filled at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve visibility.\n * @returns {Boolean} true if geometry is filled at the provided time, false otherwise.\n */\n\n\nGeometryUpdater.prototype.isFilled = function (time) {\n  var entity = this._entity;\n\n  var visible = this._fillEnabled && entity.isAvailable(time) && this._showProperty.getValue(time) && this._fillProperty.getValue(time);\n\n  return defaultValue(visible, false);\n};\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @function\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\n\n\nGeometryUpdater.prototype.createFillGeometryInstance = DeveloperError.throwInstantiationError;\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @function\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\n\nGeometryUpdater.prototype.createOutlineGeometryInstance = DeveloperError.throwInstantiationError;\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\n\nGeometryUpdater.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys and resources used by the object.  Once an object is destroyed, it should not be used.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\n\n\nGeometryUpdater.prototype.destroy = function () {\n  destroyObject(this);\n};\n/**\n * @param {Entity} entity\n * @param {Object} geometry\n * @private\n */\n\n\nGeometryUpdater.prototype._isHidden = function (entity, geometry) {\n  var show = geometry.show;\n  return defined(show) && show.isConstant && !show.getValue(Iso8601.MINIMUM_VALUE);\n};\n/**\n * @param {Entity} entity\n * @param {Object} geometry\n * @private\n */\n\n\nGeometryUpdater.prototype._isOnTerrain = function (entity, geometry) {\n  return false;\n};\n/**\n * @param {GeometryOptions} options\n * @private\n */\n\n\nGeometryUpdater.prototype._getIsClosed = function (options) {\n  return true;\n};\n/**\n * @param {Entity} entity\n * @param {Object} geometry\n * @private\n */\n\n\nGeometryUpdater.prototype._isDynamic = DeveloperError.throwInstantiationError;\n/**\n * @param {Entity} entity\n * @param {Object} geometry\n * @private\n */\n\nGeometryUpdater.prototype._setStaticOptions = DeveloperError.throwInstantiationError;\n/**\n * @param {Entity} entity\n * @param {String} propertyName\n * @param {*} newValue\n * @param {*} oldValue\n * @private\n */\n\nGeometryUpdater.prototype._onEntityPropertyChanged = function (entity, propertyName, newValue, oldValue) {\n  if (this._observedPropertyNames.indexOf(propertyName) === -1) {\n    return;\n  }\n\n  var geometry = this._entity[this._geometryPropertyName];\n\n  if (!defined(geometry)) {\n    if (this._fillEnabled || this._outlineEnabled) {\n      this._fillEnabled = false;\n      this._outlineEnabled = false;\n\n      this._geometryChanged.raiseEvent(this);\n    }\n\n    return;\n  }\n\n  var fillProperty = geometry.fill;\n  var fillEnabled = defined(fillProperty) && fillProperty.isConstant ? fillProperty.getValue(Iso8601.MINIMUM_VALUE) : true;\n  var outlineProperty = geometry.outline;\n  var outlineEnabled = defined(outlineProperty);\n\n  if (outlineEnabled && outlineProperty.isConstant) {\n    outlineEnabled = outlineProperty.getValue(Iso8601.MINIMUM_VALUE);\n  }\n\n  if (!fillEnabled && !outlineEnabled) {\n    if (this._fillEnabled || this._outlineEnabled) {\n      this._fillEnabled = false;\n      this._outlineEnabled = false;\n\n      this._geometryChanged.raiseEvent(this);\n    }\n\n    return;\n  }\n\n  var show = geometry.show;\n\n  if (this._isHidden(entity, geometry)) {\n    if (this._fillEnabled || this._outlineEnabled) {\n      this._fillEnabled = false;\n      this._outlineEnabled = false;\n\n      this._geometryChanged.raiseEvent(this);\n    }\n\n    return;\n  }\n\n  this._materialProperty = defaultValue(geometry.material, defaultMaterial);\n  this._fillProperty = defaultValue(fillProperty, defaultFill);\n  this._showProperty = defaultValue(show, defaultShow);\n  this._showOutlineProperty = defaultValue(geometry.outline, defaultOutline);\n  this._outlineColorProperty = outlineEnabled ? defaultValue(geometry.outlineColor, defaultOutlineColor) : undefined;\n  this._shadowsProperty = defaultValue(geometry.shadows, defaultShadows);\n  this._distanceDisplayConditionProperty = defaultValue(geometry.distanceDisplayCondition, defaultDistanceDisplayCondition);\n  this._classificationTypeProperty = defaultValue(geometry.classificationType, defaultClassificationType);\n  this._fillEnabled = fillEnabled;\n  var onTerrain = this._isOnTerrain(entity, geometry) && (this._supportsMaterialsforEntitiesOnTerrain || this._materialProperty instanceof ColorMaterialProperty);\n\n  if (outlineEnabled && onTerrain) {\n    oneTimeWarning(oneTimeWarning.geometryOutlines);\n    outlineEnabled = false;\n  }\n\n  this._onTerrain = onTerrain;\n  this._outlineEnabled = outlineEnabled;\n\n  if (this._isDynamic(entity, geometry)) {\n    if (!this._dynamic) {\n      this._dynamic = true;\n\n      this._geometryChanged.raiseEvent(this);\n    }\n  } else {\n    this._setStaticOptions(entity, geometry);\n\n    this._isClosed = this._getIsClosed(this._options);\n    var outlineWidth = geometry.outlineWidth;\n    this._outlineWidth = defined(outlineWidth) ? outlineWidth.getValue(Iso8601.MINIMUM_VALUE) : 1.0;\n    this._dynamic = false;\n\n    this._geometryChanged.raiseEvent(this);\n  }\n};\n/**\n * Creates the dynamic updater to be used when GeometryUpdater#isDynamic is true.\n *\n * @param {PrimitiveCollection} primitives The primitive collection to use.\n * @param {PrimitiveCollection} [groundPrimitives] The primitive collection to use for ground primitives.\n *\n * @returns {DynamicGeometryUpdater} The dynamic updater used to update the geometry each frame.\n *\n * @exception {DeveloperError} This instance does not represent dynamic geometry.\n */\n\n\nGeometryUpdater.prototype.createDynamicUpdater = function (primitives, groundPrimitives) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"primitives\", primitives);\n  Check.defined(\"groundPrimitives\", groundPrimitives);\n\n  if (!this._dynamic) {\n    throw new DeveloperError(\"This instance does not represent dynamic geometry.\");\n  } //>>includeEnd('debug');\n\n\n  return new this.constructor.DynamicGeometryUpdater(this, primitives, groundPrimitives);\n};\n\nexport default GeometryUpdater;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/DataSources/GeometryUpdater.js"],"names":["Check","Color","defaultValue","defined","destroyObject","DeveloperError","DistanceDisplayCondition","Event","Iso8601","oneTimeWarning","ClassificationType","ShadowMode","ColorMaterialProperty","ConstantProperty","Entity","Property","defaultMaterial","WHITE","defaultShow","defaultFill","defaultOutline","defaultOutlineColor","BLACK","defaultShadows","DISABLED","defaultDistanceDisplayCondition","defaultClassificationType","BOTH","GeometryUpdater","options","entity","scene","geometryOptions","geometryPropertyName","observedPropertyNames","_entity","_scene","_fillEnabled","_isClosed","_onTerrain","_dynamic","_outlineEnabled","_geometryChanged","_showProperty","undefined","_materialProperty","_showOutlineProperty","_outlineColorProperty","_outlineWidth","_shadowsProperty","_distanceDisplayConditionProperty","_classificationTypeProperty","_options","_geometryPropertyName","_id","id","_observedPropertyNames","_supportsMaterialsforEntitiesOnTerrain","supportsMaterialsforEntitiesOnTerrain","Object","defineProperties","prototype","get","fillEnabled","hasConstantFill","availability","isConstant","_fillProperty","fillMaterialProperty","outlineEnabled","hasConstantOutline","outlineColorProperty","outlineWidth","shadowsProperty","distanceDisplayConditionProperty","classificationTypeProperty","isDynamic","isClosed","onTerrain","geometryChanged","isOutlineVisible","time","visible","isAvailable","getValue","isFilled","createFillGeometryInstance","throwInstantiationError","createOutlineGeometryInstance","isDestroyed","destroy","_isHidden","geometry","show","MINIMUM_VALUE","_isOnTerrain","_getIsClosed","_isDynamic","_setStaticOptions","_onEntityPropertyChanged","propertyName","newValue","oldValue","indexOf","raiseEvent","fillProperty","fill","outlineProperty","outline","material","outlineColor","shadows","distanceDisplayCondition","classificationType","geometryOutlines","createDynamicUpdater","primitives","groundPrimitives","constructor","DynamicGeometryUpdater"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,wBAAP,MAAqC,qCAArC;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,qBAAP,MAAkC,4BAAlC;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA,IAAIC,eAAe,GAAG,IAAIJ,qBAAJ,CAA0BX,KAAK,CAACgB,KAAhC,CAAtB;AACA,IAAIC,WAAW,GAAG,IAAIL,gBAAJ,CAAqB,IAArB,CAAlB;AACA,IAAIM,WAAW,GAAG,IAAIN,gBAAJ,CAAqB,IAArB,CAAlB;AACA,IAAIO,cAAc,GAAG,IAAIP,gBAAJ,CAAqB,KAArB,CAArB;AACA,IAAIQ,mBAAmB,GAAG,IAAIR,gBAAJ,CAAqBZ,KAAK,CAACqB,KAA3B,CAA1B;AACA,IAAIC,cAAc,GAAG,IAAIV,gBAAJ,CAAqBF,UAAU,CAACa,QAAhC,CAArB;AACA,IAAIC,+BAA+B,GAAG,IAAIZ,gBAAJ,CACpC,IAAIP,wBAAJ,EADoC,CAAtC;AAGA,IAAIoB,yBAAyB,GAAG,IAAIb,gBAAJ,CAAqBH,kBAAkB,CAACiB,IAAxC,CAAhC;AAEA;;;;;;;;;;;;;AAYA,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AAChC;AACA7B,EAAAA,KAAK,CAACG,OAAN,CAAc,gBAAd,EAAgC0B,OAAO,CAACC,MAAxC;AACA9B,EAAAA,KAAK,CAACG,OAAN,CAAc,eAAd,EAA+B0B,OAAO,CAACE,KAAvC;AACA/B,EAAAA,KAAK,CAACG,OAAN,CAAc,yBAAd,EAAyC0B,OAAO,CAACG,eAAjD;AACAhC,EAAAA,KAAK,CAACG,OAAN,CAAc,8BAAd,EAA8C0B,OAAO,CAACI,oBAAtD;AACAjC,EAAAA,KAAK,CAACG,OAAN,CAAc,+BAAd,EAA+C0B,OAAO,CAACK,qBAAvD,EANgC,CAOhC;;AAEA,MAAIJ,MAAM,GAAGD,OAAO,CAACC,MAArB;AACA,MAAIG,oBAAoB,GAAGJ,OAAO,CAACI,oBAAnC;AAEA,OAAKE,OAAL,GAAeL,MAAf;AACA,OAAKM,MAAL,GAAcP,OAAO,CAACE,KAAtB;AACA,OAAKM,YAAL,GAAoB,KAApB;AACA,OAAKC,SAAL,GAAiB,KAAjB;AACA,OAAKC,UAAL,GAAkB,KAAlB;AACA,OAAKC,QAAL,GAAgB,KAAhB;AACA,OAAKC,eAAL,GAAuB,KAAvB;AACA,OAAKC,gBAAL,GAAwB,IAAInC,KAAJ,EAAxB;AACA,OAAKoC,aAAL,GAAqBC,SAArB;AACA,OAAKC,iBAAL,GAAyBD,SAAzB;AACA,OAAKE,oBAAL,GAA4BF,SAA5B;AACA,OAAKG,qBAAL,GAA6BH,SAA7B;AACA,OAAKI,aAAL,GAAqB,GAArB;AACA,OAAKC,gBAAL,GAAwBL,SAAxB;AACA,OAAKM,iCAAL,GAAyCN,SAAzC;AACA,OAAKO,2BAAL,GAAmCP,SAAnC;AACA,OAAKQ,QAAL,GAAgBvB,OAAO,CAACG,eAAxB;AACA,OAAKqB,qBAAL,GAA6BpB,oBAA7B;AACA,OAAKqB,GAAL,GAAWrB,oBAAoB,GAAG,GAAvB,GAA6BH,MAAM,CAACyB,EAA/C;AACA,OAAKC,sBAAL,GAA8B3B,OAAO,CAACK,qBAAtC;AACA,OAAKuB,sCAAL,GAA8C3C,MAAM,CAAC4C,qCAAP,CAC5C7B,OAAO,CAACE,KADoC,CAA9C;AAGD;;AAED4B,MAAM,CAACC,gBAAP,CAAwBhC,eAAe,CAACiC,SAAxC,EAAmD;AACjD;;;;;;AAMAN,EAAAA,EAAE,EAAE;AACFO,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKR,GAAZ;AACD;AAHC,GAP6C;;AAYjD;;;;;;;AAOAxB,EAAAA,MAAM,EAAE;AACNgC,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAK3B,OAAZ;AACD;AAHK,GAnByC;;AAwBjD;;;;;;;AAOA4B,EAAAA,WAAW,EAAE;AACXD,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKzB,YAAZ;AACD;AAHU,GA/BoC;;AAoCjD;;;;;;;AAOA2B,EAAAA,eAAe,EAAE;AACfF,IAAAA,GAAG,EAAE,YAAY;AACf,aACE,CAAC,KAAKzB,YAAN,IACC,CAAClC,OAAO,CAAC,KAAKgC,OAAL,CAAa8B,YAAd,CAAR,IACClD,QAAQ,CAACmD,UAAT,CAAoB,KAAKvB,aAAzB,CADD,IAEC5B,QAAQ,CAACmD,UAAT,CAAoB,KAAKC,aAAzB,CAJJ;AAMD;AARc,GA3CgC;;AAqDjD;;;;;;;AAOAC,EAAAA,oBAAoB,EAAE;AACpBN,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKjB,iBAAZ;AACD;AAHmB,GA5D2B;;AAiEjD;;;;;;;AAOAwB,EAAAA,cAAc,EAAE;AACdP,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKrB,eAAZ;AACD;AAHa,GAxEiC;;AA6EjD;;;;;;;AAOA6B,EAAAA,kBAAkB,EAAE;AAClBR,IAAAA,GAAG,EAAE,YAAY;AACf,aACE,CAAC,KAAKrB,eAAN,IACC,CAACtC,OAAO,CAAC,KAAKgC,OAAL,CAAa8B,YAAd,CAAR,IACClD,QAAQ,CAACmD,UAAT,CAAoB,KAAKvB,aAAzB,CADD,IAEC5B,QAAQ,CAACmD,UAAT,CAAoB,KAAKpB,oBAAzB,CAJJ;AAMD;AARiB,GApF6B;;AA8FjD;;;;;;;AAOAyB,EAAAA,oBAAoB,EAAE;AACpBT,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKf,qBAAZ;AACD;AAHmB,GArG2B;;AA0GjD;;;;;;;;AAQAyB,EAAAA,YAAY,EAAE;AACZV,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKd,aAAZ;AACD;AAHW,GAlHmC;;AAuHjD;;;;;;;;AAQAyB,EAAAA,eAAe,EAAE;AACfX,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKb,gBAAZ;AACD;AAHc,GA/HgC;;AAoIjD;;;;;;;AAOAyB,EAAAA,gCAAgC,EAAE;AAChCZ,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKZ,iCAAZ;AACD;AAH+B,GA3Ie;;AAgJjD;;;;;;;AAOAyB,EAAAA,0BAA0B,EAAE;AAC1Bb,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKX,2BAAZ;AACD;AAHyB,GAvJqB;;AA4JjD;;;;;;;;;AASAyB,EAAAA,SAAS,EAAE;AACTd,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKtB,QAAZ;AACD;AAHQ,GArKsC;;AA0KjD;;;;;;;;AAQAqC,EAAAA,QAAQ,EAAE;AACRf,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKxB,SAAZ;AACD;AAHO,GAlLuC;;AAuLjD;;;;;;;AAOAwC,EAAAA,SAAS,EAAE;AACThB,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKvB,UAAZ;AACD;AAHQ,GA9LsC;;AAmMjD;;;;;;;;AAQAwC,EAAAA,eAAe,EAAE;AACfjB,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKpB,gBAAZ;AACD;AAHc;AA3MgC,CAAnD;AAkNA;;;;;;;AAMAd,eAAe,CAACiC,SAAhB,CAA0BmB,gBAA1B,GAA6C,UAAUC,IAAV,EAAgB;AAC3D,MAAInD,MAAM,GAAG,KAAKK,OAAlB;;AACA,MAAI+C,OAAO,GACT,KAAKzC,eAAL,IACAX,MAAM,CAACqD,WAAP,CAAmBF,IAAnB,CADA,IAEA,KAAKtC,aAAL,CAAmByC,QAAnB,CAA4BH,IAA5B,CAFA,IAGA,KAAKnC,oBAAL,CAA0BsC,QAA1B,CAAmCH,IAAnC,CAJF;;AAKA,SAAO/E,YAAY,CAACgF,OAAD,EAAU,KAAV,CAAnB;AACD,CARD;AAUA;;;;;;;;AAMAtD,eAAe,CAACiC,SAAhB,CAA0BwB,QAA1B,GAAqC,UAAUJ,IAAV,EAAgB;AACnD,MAAInD,MAAM,GAAG,KAAKK,OAAlB;;AACA,MAAI+C,OAAO,GACT,KAAK7C,YAAL,IACAP,MAAM,CAACqD,WAAP,CAAmBF,IAAnB,CADA,IAEA,KAAKtC,aAAL,CAAmByC,QAAnB,CAA4BH,IAA5B,CAFA,IAGA,KAAKd,aAAL,CAAmBiB,QAAnB,CAA4BH,IAA5B,CAJF;;AAKA,SAAO/E,YAAY,CAACgF,OAAD,EAAU,KAAV,CAAnB;AACD,CARD;AAUA;;;;;;;;;;;AASAtD,eAAe,CAACiC,SAAhB,CAA0ByB,0BAA1B,GACEjF,cAAc,CAACkF,uBADjB;AAGA;;;;;;;;;;AASA3D,eAAe,CAACiC,SAAhB,CAA0B2B,6BAA1B,GACEnF,cAAc,CAACkF,uBADjB;AAGA;;;;;;AAKA3D,eAAe,CAACiC,SAAhB,CAA0B4B,WAA1B,GAAwC,YAAY;AAClD,SAAO,KAAP;AACD,CAFD;AAIA;;;;;;;AAKA7D,eAAe,CAACiC,SAAhB,CAA0B6B,OAA1B,GAAoC,YAAY;AAC9CtF,EAAAA,aAAa,CAAC,IAAD,CAAb;AACD,CAFD;AAGA;;;;;;;AAKAwB,eAAe,CAACiC,SAAhB,CAA0B8B,SAA1B,GAAsC,UAAU7D,MAAV,EAAkB8D,QAAlB,EAA4B;AAChE,MAAIC,IAAI,GAAGD,QAAQ,CAACC,IAApB;AACA,SACE1F,OAAO,CAAC0F,IAAD,CAAP,IAAiBA,IAAI,CAAC3B,UAAtB,IAAoC,CAAC2B,IAAI,CAACT,QAAL,CAAc5E,OAAO,CAACsF,aAAtB,CADvC;AAGD,CALD;AAOA;;;;;;;AAKAlE,eAAe,CAACiC,SAAhB,CAA0BkC,YAA1B,GAAyC,UAAUjE,MAAV,EAAkB8D,QAAlB,EAA4B;AACnE,SAAO,KAAP;AACD,CAFD;AAIA;;;;;;AAIAhE,eAAe,CAACiC,SAAhB,CAA0BmC,YAA1B,GAAyC,UAAUnE,OAAV,EAAmB;AAC1D,SAAO,IAAP;AACD,CAFD;AAIA;;;;;;;AAKAD,eAAe,CAACiC,SAAhB,CAA0BoC,UAA1B,GAAuC5F,cAAc,CAACkF,uBAAtD;AAEA;;;;;;AAKA3D,eAAe,CAACiC,SAAhB,CAA0BqC,iBAA1B,GACE7F,cAAc,CAACkF,uBADjB;AAGA;;;;;;;;AAOA3D,eAAe,CAACiC,SAAhB,CAA0BsC,wBAA1B,GAAqD,UACnDrE,MADmD,EAEnDsE,YAFmD,EAGnDC,QAHmD,EAInDC,QAJmD,EAKnD;AACA,MAAI,KAAK9C,sBAAL,CAA4B+C,OAA5B,CAAoCH,YAApC,MAAsD,CAAC,CAA3D,EAA8D;AAC5D;AACD;;AAED,MAAIR,QAAQ,GAAG,KAAKzD,OAAL,CAAa,KAAKkB,qBAAlB,CAAf;;AAEA,MAAI,CAAClD,OAAO,CAACyF,QAAD,CAAZ,EAAwB;AACtB,QAAI,KAAKvD,YAAL,IAAqB,KAAKI,eAA9B,EAA+C;AAC7C,WAAKJ,YAAL,GAAoB,KAApB;AACA,WAAKI,eAAL,GAAuB,KAAvB;;AACA,WAAKC,gBAAL,CAAsB8D,UAAtB,CAAiC,IAAjC;AACD;;AACD;AACD;;AAED,MAAIC,YAAY,GAAGb,QAAQ,CAACc,IAA5B;AACA,MAAI3C,WAAW,GACb5D,OAAO,CAACsG,YAAD,CAAP,IAAyBA,YAAY,CAACvC,UAAtC,GACIuC,YAAY,CAACrB,QAAb,CAAsB5E,OAAO,CAACsF,aAA9B,CADJ,GAEI,IAHN;AAKA,MAAIa,eAAe,GAAGf,QAAQ,CAACgB,OAA/B;AACA,MAAIvC,cAAc,GAAGlE,OAAO,CAACwG,eAAD,CAA5B;;AACA,MAAItC,cAAc,IAAIsC,eAAe,CAACzC,UAAtC,EAAkD;AAChDG,IAAAA,cAAc,GAAGsC,eAAe,CAACvB,QAAhB,CAAyB5E,OAAO,CAACsF,aAAjC,CAAjB;AACD;;AAED,MAAI,CAAC/B,WAAD,IAAgB,CAACM,cAArB,EAAqC;AACnC,QAAI,KAAKhC,YAAL,IAAqB,KAAKI,eAA9B,EAA+C;AAC7C,WAAKJ,YAAL,GAAoB,KAApB;AACA,WAAKI,eAAL,GAAuB,KAAvB;;AACA,WAAKC,gBAAL,CAAsB8D,UAAtB,CAAiC,IAAjC;AACD;;AACD;AACD;;AAED,MAAIX,IAAI,GAAGD,QAAQ,CAACC,IAApB;;AACA,MAAI,KAAKF,SAAL,CAAe7D,MAAf,EAAuB8D,QAAvB,CAAJ,EAAsC;AACpC,QAAI,KAAKvD,YAAL,IAAqB,KAAKI,eAA9B,EAA+C;AAC7C,WAAKJ,YAAL,GAAoB,KAApB;AACA,WAAKI,eAAL,GAAuB,KAAvB;;AACA,WAAKC,gBAAL,CAAsB8D,UAAtB,CAAiC,IAAjC;AACD;;AACD;AACD;;AAED,OAAK3D,iBAAL,GAAyB3C,YAAY,CAAC0F,QAAQ,CAACiB,QAAV,EAAoB7F,eAApB,CAArC;AACA,OAAKmD,aAAL,GAAqBjE,YAAY,CAACuG,YAAD,EAAetF,WAAf,CAAjC;AACA,OAAKwB,aAAL,GAAqBzC,YAAY,CAAC2F,IAAD,EAAO3E,WAAP,CAAjC;AACA,OAAK4B,oBAAL,GAA4B5C,YAAY,CAAC0F,QAAQ,CAACgB,OAAV,EAAmBxF,cAAnB,CAAxC;AACA,OAAK2B,qBAAL,GAA6BsB,cAAc,GACvCnE,YAAY,CAAC0F,QAAQ,CAACkB,YAAV,EAAwBzF,mBAAxB,CAD2B,GAEvCuB,SAFJ;AAGA,OAAKK,gBAAL,GAAwB/C,YAAY,CAAC0F,QAAQ,CAACmB,OAAV,EAAmBxF,cAAnB,CAApC;AACA,OAAK2B,iCAAL,GAAyChD,YAAY,CACnD0F,QAAQ,CAACoB,wBAD0C,EAEnDvF,+BAFmD,CAArD;AAIA,OAAK0B,2BAAL,GAAmCjD,YAAY,CAC7C0F,QAAQ,CAACqB,kBADoC,EAE7CvF,yBAF6C,CAA/C;AAKA,OAAKW,YAAL,GAAoB0B,WAApB;AAEA,MAAIe,SAAS,GACX,KAAKiB,YAAL,CAAkBjE,MAAlB,EAA0B8D,QAA1B,MACC,KAAKnC,sCAAL,IACC,KAAKZ,iBAAL,YAAkCjC,qBAFpC,CADF;;AAKA,MAAIyD,cAAc,IAAIS,SAAtB,EAAiC;AAC/BrE,IAAAA,cAAc,CAACA,cAAc,CAACyG,gBAAhB,CAAd;AACA7C,IAAAA,cAAc,GAAG,KAAjB;AACD;;AAED,OAAK9B,UAAL,GAAkBuC,SAAlB;AACA,OAAKrC,eAAL,GAAuB4B,cAAvB;;AAEA,MAAI,KAAK4B,UAAL,CAAgBnE,MAAhB,EAAwB8D,QAAxB,CAAJ,EAAuC;AACrC,QAAI,CAAC,KAAKpD,QAAV,EAAoB;AAClB,WAAKA,QAAL,GAAgB,IAAhB;;AACA,WAAKE,gBAAL,CAAsB8D,UAAtB,CAAiC,IAAjC;AACD;AACF,GALD,MAKO;AACL,SAAKN,iBAAL,CAAuBpE,MAAvB,EAA+B8D,QAA/B;;AACA,SAAKtD,SAAL,GAAiB,KAAK0D,YAAL,CAAkB,KAAK5C,QAAvB,CAAjB;AACA,QAAIoB,YAAY,GAAGoB,QAAQ,CAACpB,YAA5B;AACA,SAAKxB,aAAL,GAAqB7C,OAAO,CAACqE,YAAD,CAAP,GACjBA,YAAY,CAACY,QAAb,CAAsB5E,OAAO,CAACsF,aAA9B,CADiB,GAEjB,GAFJ;AAGA,SAAKtD,QAAL,GAAgB,KAAhB;;AACA,SAAKE,gBAAL,CAAsB8D,UAAtB,CAAiC,IAAjC;AACD;AACF,CAnGD;AAqGA;;;;;;;;;;;;AAUA5E,eAAe,CAACiC,SAAhB,CAA0BsD,oBAA1B,GAAiD,UAC/CC,UAD+C,EAE/CC,gBAF+C,EAG/C;AACA;AACArH,EAAAA,KAAK,CAACG,OAAN,CAAc,YAAd,EAA4BiH,UAA5B;AACApH,EAAAA,KAAK,CAACG,OAAN,CAAc,kBAAd,EAAkCkH,gBAAlC;;AAEA,MAAI,CAAC,KAAK7E,QAAV,EAAoB;AAClB,UAAM,IAAInC,cAAJ,CACJ,oDADI,CAAN;AAGD,GATD,CAUA;;;AAEA,SAAO,IAAI,KAAKiH,WAAL,CAAiBC,sBAArB,CACL,IADK,EAELH,UAFK,EAGLC,gBAHK,CAAP;AAKD,CApBD;;AAqBA,eAAezF,eAAf","sourcesContent":["import Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport Event from \"../Core/Event.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport oneTimeWarning from \"../Core/oneTimeWarning.js\";\nimport ClassificationType from \"../Scene/ClassificationType.js\";\nimport ShadowMode from \"../Scene/ShadowMode.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport Entity from \"./Entity.js\";\nimport Property from \"./Property.js\";\n\nvar defaultMaterial = new ColorMaterialProperty(Color.WHITE);\nvar defaultShow = new ConstantProperty(true);\nvar defaultFill = new ConstantProperty(true);\nvar defaultOutline = new ConstantProperty(false);\nvar defaultOutlineColor = new ConstantProperty(Color.BLACK);\nvar defaultShadows = new ConstantProperty(ShadowMode.DISABLED);\nvar defaultDistanceDisplayCondition = new ConstantProperty(\n  new DistanceDisplayCondition()\n);\nvar defaultClassificationType = new ConstantProperty(ClassificationType.BOTH);\n\n/**\n * An abstract class for updating geometry entities.\n * @alias GeometryUpdater\n * @constructor\n *\n * @param {Object} options An object with the following properties:\n * @param {Entity} options.entity The entity containing the geometry to be visualized.\n * @param {Scene} options.scene The scene where visualization is taking place.\n * @param {Object} options.geometryOptions Options for the geometry\n * @param {String} options.geometryPropertyName The geometry property name\n * @param {String[]} options.observedPropertyNames The entity properties this geometry cares about\n */\nfunction GeometryUpdater(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.entity\", options.entity);\n  Check.defined(\"options.scene\", options.scene);\n  Check.defined(\"options.geometryOptions\", options.geometryOptions);\n  Check.defined(\"options.geometryPropertyName\", options.geometryPropertyName);\n  Check.defined(\"options.observedPropertyNames\", options.observedPropertyNames);\n  //>>includeEnd('debug');\n\n  var entity = options.entity;\n  var geometryPropertyName = options.geometryPropertyName;\n\n  this._entity = entity;\n  this._scene = options.scene;\n  this._fillEnabled = false;\n  this._isClosed = false;\n  this._onTerrain = false;\n  this._dynamic = false;\n  this._outlineEnabled = false;\n  this._geometryChanged = new Event();\n  this._showProperty = undefined;\n  this._materialProperty = undefined;\n  this._showOutlineProperty = undefined;\n  this._outlineColorProperty = undefined;\n  this._outlineWidth = 1.0;\n  this._shadowsProperty = undefined;\n  this._distanceDisplayConditionProperty = undefined;\n  this._classificationTypeProperty = undefined;\n  this._options = options.geometryOptions;\n  this._geometryPropertyName = geometryPropertyName;\n  this._id = geometryPropertyName + \"-\" + entity.id;\n  this._observedPropertyNames = options.observedPropertyNames;\n  this._supportsMaterialsforEntitiesOnTerrain = Entity.supportsMaterialsforEntitiesOnTerrain(\n    options.scene\n  );\n}\n\nObject.defineProperties(GeometryUpdater.prototype, {\n  /**\n   * Gets the unique ID associated with this updater\n   * @memberof GeometryUpdater.prototype\n   * @type {String}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n  /**\n   * Gets the entity associated with this geometry.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Entity}\n   * @readonly\n   */\n  entity: {\n    get: function () {\n      return this._entity;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry has a fill component.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  fillEnabled: {\n    get: function () {\n      return this._fillEnabled;\n    },\n  },\n  /**\n   * Gets a value indicating if fill visibility varies with simulation time.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  hasConstantFill: {\n    get: function () {\n      return (\n        !this._fillEnabled ||\n        (!defined(this._entity.availability) &&\n          Property.isConstant(this._showProperty) &&\n          Property.isConstant(this._fillProperty))\n      );\n    },\n  },\n  /**\n   * Gets the material property used to fill the geometry.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {MaterialProperty}\n   * @readonly\n   */\n  fillMaterialProperty: {\n    get: function () {\n      return this._materialProperty;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry has an outline component.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  outlineEnabled: {\n    get: function () {\n      return this._outlineEnabled;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry has an outline component.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  hasConstantOutline: {\n    get: function () {\n      return (\n        !this._outlineEnabled ||\n        (!defined(this._entity.availability) &&\n          Property.isConstant(this._showProperty) &&\n          Property.isConstant(this._showOutlineProperty))\n      );\n    },\n  },\n  /**\n   * Gets the {@link Color} property for the geometry outline.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  outlineColorProperty: {\n    get: function () {\n      return this._outlineColorProperty;\n    },\n  },\n  /**\n   * Gets the constant with of the geometry outline, in pixels.\n   * This value is only valid if isDynamic is false.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  outlineWidth: {\n    get: function () {\n      return this._outlineWidth;\n    },\n  },\n  /**\n   * Gets the property specifying whether the geometry\n   * casts or receives shadows from light sources.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  shadowsProperty: {\n    get: function () {\n      return this._shadowsProperty;\n    },\n  },\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this geometry will be displayed.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  distanceDisplayConditionProperty: {\n    get: function () {\n      return this._distanceDisplayConditionProperty;\n    },\n  },\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying if this geometry will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  classificationTypeProperty: {\n    get: function () {\n      return this._classificationTypeProperty;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry is time-varying.\n   * If true, all visualization is delegated to a DynamicGeometryUpdater\n   * returned by GeometryUpdater#createDynamicUpdater.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isDynamic: {\n    get: function () {\n      return this._dynamic;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry is closed.\n   * This property is only valid for static geometry.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isClosed: {\n    get: function () {\n      return this._isClosed;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry should be drawn on terrain.\n   * @memberof EllipseGeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  onTerrain: {\n    get: function () {\n      return this._onTerrain;\n    },\n  },\n  /**\n   * Gets an event that is raised whenever the public properties\n   * of this updater change.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  geometryChanged: {\n    get: function () {\n      return this._geometryChanged;\n    },\n  },\n});\n\n/**\n * Checks if the geometry is outlined at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve visibility.\n * @returns {Boolean} true if geometry is outlined at the provided time, false otherwise.\n */\nGeometryUpdater.prototype.isOutlineVisible = function (time) {\n  var entity = this._entity;\n  var visible =\n    this._outlineEnabled &&\n    entity.isAvailable(time) &&\n    this._showProperty.getValue(time) &&\n    this._showOutlineProperty.getValue(time);\n  return defaultValue(visible, false);\n};\n\n/**\n * Checks if the geometry is filled at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve visibility.\n * @returns {Boolean} true if geometry is filled at the provided time, false otherwise.\n */\nGeometryUpdater.prototype.isFilled = function (time) {\n  var entity = this._entity;\n  var visible =\n    this._fillEnabled &&\n    entity.isAvailable(time) &&\n    this._showProperty.getValue(time) &&\n    this._fillProperty.getValue(time);\n  return defaultValue(visible, false);\n};\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @function\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nGeometryUpdater.prototype.createFillGeometryInstance =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @function\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nGeometryUpdater.prototype.createOutlineGeometryInstance =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\nGeometryUpdater.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys and resources used by the object.  Once an object is destroyed, it should not be used.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nGeometryUpdater.prototype.destroy = function () {\n  destroyObject(this);\n};\n/**\n * @param {Entity} entity\n * @param {Object} geometry\n * @private\n */\nGeometryUpdater.prototype._isHidden = function (entity, geometry) {\n  var show = geometry.show;\n  return (\n    defined(show) && show.isConstant && !show.getValue(Iso8601.MINIMUM_VALUE)\n  );\n};\n\n/**\n * @param {Entity} entity\n * @param {Object} geometry\n * @private\n */\nGeometryUpdater.prototype._isOnTerrain = function (entity, geometry) {\n  return false;\n};\n\n/**\n * @param {GeometryOptions} options\n * @private\n */\nGeometryUpdater.prototype._getIsClosed = function (options) {\n  return true;\n};\n\n/**\n * @param {Entity} entity\n * @param {Object} geometry\n * @private\n */\nGeometryUpdater.prototype._isDynamic = DeveloperError.throwInstantiationError;\n\n/**\n * @param {Entity} entity\n * @param {Object} geometry\n * @private\n */\nGeometryUpdater.prototype._setStaticOptions =\n  DeveloperError.throwInstantiationError;\n\n/**\n * @param {Entity} entity\n * @param {String} propertyName\n * @param {*} newValue\n * @param {*} oldValue\n * @private\n */\nGeometryUpdater.prototype._onEntityPropertyChanged = function (\n  entity,\n  propertyName,\n  newValue,\n  oldValue\n) {\n  if (this._observedPropertyNames.indexOf(propertyName) === -1) {\n    return;\n  }\n\n  var geometry = this._entity[this._geometryPropertyName];\n\n  if (!defined(geometry)) {\n    if (this._fillEnabled || this._outlineEnabled) {\n      this._fillEnabled = false;\n      this._outlineEnabled = false;\n      this._geometryChanged.raiseEvent(this);\n    }\n    return;\n  }\n\n  var fillProperty = geometry.fill;\n  var fillEnabled =\n    defined(fillProperty) && fillProperty.isConstant\n      ? fillProperty.getValue(Iso8601.MINIMUM_VALUE)\n      : true;\n\n  var outlineProperty = geometry.outline;\n  var outlineEnabled = defined(outlineProperty);\n  if (outlineEnabled && outlineProperty.isConstant) {\n    outlineEnabled = outlineProperty.getValue(Iso8601.MINIMUM_VALUE);\n  }\n\n  if (!fillEnabled && !outlineEnabled) {\n    if (this._fillEnabled || this._outlineEnabled) {\n      this._fillEnabled = false;\n      this._outlineEnabled = false;\n      this._geometryChanged.raiseEvent(this);\n    }\n    return;\n  }\n\n  var show = geometry.show;\n  if (this._isHidden(entity, geometry)) {\n    if (this._fillEnabled || this._outlineEnabled) {\n      this._fillEnabled = false;\n      this._outlineEnabled = false;\n      this._geometryChanged.raiseEvent(this);\n    }\n    return;\n  }\n\n  this._materialProperty = defaultValue(geometry.material, defaultMaterial);\n  this._fillProperty = defaultValue(fillProperty, defaultFill);\n  this._showProperty = defaultValue(show, defaultShow);\n  this._showOutlineProperty = defaultValue(geometry.outline, defaultOutline);\n  this._outlineColorProperty = outlineEnabled\n    ? defaultValue(geometry.outlineColor, defaultOutlineColor)\n    : undefined;\n  this._shadowsProperty = defaultValue(geometry.shadows, defaultShadows);\n  this._distanceDisplayConditionProperty = defaultValue(\n    geometry.distanceDisplayCondition,\n    defaultDistanceDisplayCondition\n  );\n  this._classificationTypeProperty = defaultValue(\n    geometry.classificationType,\n    defaultClassificationType\n  );\n\n  this._fillEnabled = fillEnabled;\n\n  var onTerrain =\n    this._isOnTerrain(entity, geometry) &&\n    (this._supportsMaterialsforEntitiesOnTerrain ||\n      this._materialProperty instanceof ColorMaterialProperty);\n\n  if (outlineEnabled && onTerrain) {\n    oneTimeWarning(oneTimeWarning.geometryOutlines);\n    outlineEnabled = false;\n  }\n\n  this._onTerrain = onTerrain;\n  this._outlineEnabled = outlineEnabled;\n\n  if (this._isDynamic(entity, geometry)) {\n    if (!this._dynamic) {\n      this._dynamic = true;\n      this._geometryChanged.raiseEvent(this);\n    }\n  } else {\n    this._setStaticOptions(entity, geometry);\n    this._isClosed = this._getIsClosed(this._options);\n    var outlineWidth = geometry.outlineWidth;\n    this._outlineWidth = defined(outlineWidth)\n      ? outlineWidth.getValue(Iso8601.MINIMUM_VALUE)\n      : 1.0;\n    this._dynamic = false;\n    this._geometryChanged.raiseEvent(this);\n  }\n};\n\n/**\n * Creates the dynamic updater to be used when GeometryUpdater#isDynamic is true.\n *\n * @param {PrimitiveCollection} primitives The primitive collection to use.\n * @param {PrimitiveCollection} [groundPrimitives] The primitive collection to use for ground primitives.\n *\n * @returns {DynamicGeometryUpdater} The dynamic updater used to update the geometry each frame.\n *\n * @exception {DeveloperError} This instance does not represent dynamic geometry.\n */\nGeometryUpdater.prototype.createDynamicUpdater = function (\n  primitives,\n  groundPrimitives\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"primitives\", primitives);\n  Check.defined(\"groundPrimitives\", groundPrimitives);\n\n  if (!this._dynamic) {\n    throw new DeveloperError(\n      \"This instance does not represent dynamic geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  return new this.constructor.DynamicGeometryUpdater(\n    this,\n    primitives,\n    groundPrimitives\n  );\n};\nexport default GeometryUpdater;\n"]},"metadata":{},"sourceType":"module"}