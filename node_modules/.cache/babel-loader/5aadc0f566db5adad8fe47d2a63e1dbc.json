{"ast":null,"code":"import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Resource from \"../Core/Resource.js\";\nimport Cesium3DTileset from \"../Scene/Cesium3DTileset.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\nvar modelMatrixScratch = new Matrix4();\n/**\n * A {@link Visualizer} which maps {@link Entity#tileset} to a {@link Cesium3DTileset}.\n * @alias Cesium3DTilesetVisualizer\n * @constructor\n *\n * @param {Scene} scene The scene the primitives will be rendered in.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n */\n\nfunction Cesium3DTilesetVisualizer(scene, entityCollection) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n\n  if (!defined(entityCollection)) {\n    throw new DeveloperError(\"entityCollection is required.\");\n  } //>>includeEnd('debug');\n\n\n  entityCollection.collectionChanged.addEventListener(Cesium3DTilesetVisualizer.prototype._onCollectionChanged, this);\n  this._scene = scene;\n  this._primitives = scene.primitives;\n  this._entityCollection = entityCollection;\n  this._tilesetHash = {};\n  this._entitiesToVisualize = new AssociativeArray();\n\n  this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n}\n/**\n * Updates models created this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {Boolean} This function always returns true.\n */\n\n\nCesium3DTilesetVisualizer.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  } //>>includeEnd('debug');\n\n\n  var entities = this._entitiesToVisualize.values;\n  var tilesetHash = this._tilesetHash;\n  var primitives = this._primitives;\n\n  for (var i = 0, len = entities.length; i < len; i++) {\n    var entity = entities[i];\n    var tilesetGraphics = entity._tileset;\n    var resource;\n    var tilesetData = tilesetHash[entity.id];\n    var show = entity.isShowing && entity.isAvailable(time) && Property.getValueOrDefault(tilesetGraphics._show, time, true);\n    var modelMatrix;\n\n    if (show) {\n      modelMatrix = entity.computeModelMatrix(time, modelMatrixScratch);\n      resource = Resource.createIfNeeded(Property.getValueOrUndefined(tilesetGraphics._uri, time));\n    }\n\n    if (!show) {\n      if (defined(tilesetData)) {\n        tilesetData.tilesetPrimitive.show = false;\n      }\n\n      continue;\n    }\n\n    var tileset = defined(tilesetData) ? tilesetData.tilesetPrimitive : undefined;\n\n    if (!defined(tileset) || resource.url !== tilesetData.url) {\n      if (defined(tileset)) {\n        primitives.removeAndDestroy(tileset);\n        delete tilesetHash[entity.id];\n      }\n\n      tileset = new Cesium3DTileset({\n        url: resource\n      });\n      tileset.id = entity;\n      primitives.add(tileset);\n      tilesetData = {\n        tilesetPrimitive: tileset,\n        url: resource.url,\n        loadFail: false\n      };\n      tilesetHash[entity.id] = tilesetData;\n      checkLoad(tileset, entity, tilesetHash);\n    }\n\n    tileset.show = true;\n\n    if (defined(modelMatrix)) {\n      tileset.modelMatrix = modelMatrix;\n    }\n\n    tileset.maximumScreenSpaceError = Property.getValueOrDefault(tilesetGraphics.maximumScreenSpaceError, time, tileset.maximumScreenSpaceError);\n  }\n\n  return true;\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\n\n\nCesium3DTilesetVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Removes and destroys all primitives created by this instance.\n */\n\n\nCesium3DTilesetVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(Cesium3DTilesetVisualizer.prototype._onCollectionChanged, this);\n\n  var entities = this._entitiesToVisualize.values;\n  var tilesetHash = this._tilesetHash;\n  var primitives = this._primitives;\n\n  for (var i = entities.length - 1; i > -1; i--) {\n    removeTileset(this, entities[i], tilesetHash, primitives);\n  }\n\n  return destroyObject(this);\n};\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\n\n\nCesium3DTilesetVisualizer.prototype.getBoundingSphere = function (entity, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required.\");\n  }\n\n  if (!defined(result)) {\n    throw new DeveloperError(\"result is required.\");\n  } //>>includeEnd('debug');\n\n\n  var tilesetData = this._tilesetHash[entity.id];\n\n  if (!defined(tilesetData) || tilesetData.loadFail) {\n    return BoundingSphereState.FAILED;\n  }\n\n  var primitive = tilesetData.tilesetPrimitive;\n\n  if (!defined(primitive) || !primitive.show) {\n    return BoundingSphereState.FAILED;\n  }\n\n  if (!primitive.ready) {\n    return BoundingSphereState.PENDING;\n  }\n\n  BoundingSphere.clone(primitive.boundingSphere, result);\n  return BoundingSphereState.DONE;\n};\n/**\n * @private\n */\n\n\nCesium3DTilesetVisualizer.prototype._onCollectionChanged = function (entityCollection, added, removed, changed) {\n  var i;\n  var entity;\n  var entities = this._entitiesToVisualize;\n  var tilesetHash = this._tilesetHash;\n  var primitives = this._primitives;\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n\n    if (defined(entity._tileset)) {\n      entities.set(entity.id, entity);\n    }\n  }\n\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n\n    if (defined(entity._tileset)) {\n      entities.set(entity.id, entity);\n    } else {\n      removeTileset(this, entity, tilesetHash, primitives);\n      entities.remove(entity.id);\n    }\n  }\n\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    removeTileset(this, entity, tilesetHash, primitives);\n    entities.remove(entity.id);\n  }\n};\n\nfunction removeTileset(visualizer, entity, tilesetHash, primitives) {\n  var tilesetData = tilesetHash[entity.id];\n\n  if (defined(tilesetData)) {\n    primitives.removeAndDestroy(tilesetData.tilesetPrimitive);\n    delete tilesetHash[entity.id];\n  }\n}\n\nfunction checkLoad(primitive, entity, tilesetHash) {\n  primitive.readyPromise.otherwise(function (error) {\n    console.error(error);\n    tilesetHash[entity.id].loadFail = true;\n  });\n}\n\nexport default Cesium3DTilesetVisualizer;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/DataSources/Cesium3DTilesetVisualizer.js"],"names":["AssociativeArray","BoundingSphere","defined","destroyObject","DeveloperError","Matrix4","Resource","Cesium3DTileset","BoundingSphereState","Property","modelMatrixScratch","Cesium3DTilesetVisualizer","scene","entityCollection","collectionChanged","addEventListener","prototype","_onCollectionChanged","_scene","_primitives","primitives","_entityCollection","_tilesetHash","_entitiesToVisualize","values","update","time","entities","tilesetHash","i","len","length","entity","tilesetGraphics","_tileset","resource","tilesetData","id","show","isShowing","isAvailable","getValueOrDefault","_show","modelMatrix","computeModelMatrix","createIfNeeded","getValueOrUndefined","_uri","tilesetPrimitive","tileset","undefined","url","removeAndDestroy","add","loadFail","checkLoad","maximumScreenSpaceError","isDestroyed","destroy","removeEventListener","removeTileset","getBoundingSphere","result","FAILED","primitive","ready","PENDING","clone","boundingSphere","DONE","added","removed","changed","set","remove","visualizer","readyPromise","otherwise","error","console"],"mappings":"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","sourcesContent":["import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Resource from \"../Core/Resource.js\";\nimport Cesium3DTileset from \"../Scene/Cesium3DTileset.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\n\nvar modelMatrixScratch = new Matrix4();\n\n/**\n * A {@link Visualizer} which maps {@link Entity#tileset} to a {@link Cesium3DTileset}.\n * @alias Cesium3DTilesetVisualizer\n * @constructor\n *\n * @param {Scene} scene The scene the primitives will be rendered in.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n */\nfunction Cesium3DTilesetVisualizer(scene, entityCollection) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  if (!defined(entityCollection)) {\n    throw new DeveloperError(\"entityCollection is required.\");\n  }\n  //>>includeEnd('debug');\n\n  entityCollection.collectionChanged.addEventListener(\n    Cesium3DTilesetVisualizer.prototype._onCollectionChanged,\n    this\n  );\n\n  this._scene = scene;\n  this._primitives = scene.primitives;\n  this._entityCollection = entityCollection;\n  this._tilesetHash = {};\n  this._entitiesToVisualize = new AssociativeArray();\n  this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n}\n\n/**\n * Updates models created this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {Boolean} This function always returns true.\n */\nCesium3DTilesetVisualizer.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var entities = this._entitiesToVisualize.values;\n  var tilesetHash = this._tilesetHash;\n  var primitives = this._primitives;\n\n  for (var i = 0, len = entities.length; i < len; i++) {\n    var entity = entities[i];\n    var tilesetGraphics = entity._tileset;\n\n    var resource;\n    var tilesetData = tilesetHash[entity.id];\n    var show =\n      entity.isShowing &&\n      entity.isAvailable(time) &&\n      Property.getValueOrDefault(tilesetGraphics._show, time, true);\n\n    var modelMatrix;\n    if (show) {\n      modelMatrix = entity.computeModelMatrix(time, modelMatrixScratch);\n      resource = Resource.createIfNeeded(\n        Property.getValueOrUndefined(tilesetGraphics._uri, time)\n      );\n    }\n\n    if (!show) {\n      if (defined(tilesetData)) {\n        tilesetData.tilesetPrimitive.show = false;\n      }\n      continue;\n    }\n\n    var tileset = defined(tilesetData)\n      ? tilesetData.tilesetPrimitive\n      : undefined;\n    if (!defined(tileset) || resource.url !== tilesetData.url) {\n      if (defined(tileset)) {\n        primitives.removeAndDestroy(tileset);\n        delete tilesetHash[entity.id];\n      }\n      tileset = new Cesium3DTileset({\n        url: resource,\n      });\n      tileset.id = entity;\n      primitives.add(tileset);\n\n      tilesetData = {\n        tilesetPrimitive: tileset,\n        url: resource.url,\n        loadFail: false,\n      };\n      tilesetHash[entity.id] = tilesetData;\n\n      checkLoad(tileset, entity, tilesetHash);\n    }\n\n    tileset.show = true;\n    if (defined(modelMatrix)) {\n      tileset.modelMatrix = modelMatrix;\n    }\n    tileset.maximumScreenSpaceError = Property.getValueOrDefault(\n      tilesetGraphics.maximumScreenSpaceError,\n      time,\n      tileset.maximumScreenSpaceError\n    );\n  }\n\n  return true;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\nCesium3DTilesetVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Removes and destroys all primitives created by this instance.\n */\nCesium3DTilesetVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(\n    Cesium3DTilesetVisualizer.prototype._onCollectionChanged,\n    this\n  );\n  var entities = this._entitiesToVisualize.values;\n  var tilesetHash = this._tilesetHash;\n  var primitives = this._primitives;\n  for (var i = entities.length - 1; i > -1; i--) {\n    removeTileset(this, entities[i], tilesetHash, primitives);\n  }\n  return destroyObject(this);\n};\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nCesium3DTilesetVisualizer.prototype.getBoundingSphere = function (\n  entity,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required.\");\n  }\n  if (!defined(result)) {\n    throw new DeveloperError(\"result is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var tilesetData = this._tilesetHash[entity.id];\n  if (!defined(tilesetData) || tilesetData.loadFail) {\n    return BoundingSphereState.FAILED;\n  }\n\n  var primitive = tilesetData.tilesetPrimitive;\n  if (!defined(primitive) || !primitive.show) {\n    return BoundingSphereState.FAILED;\n  }\n\n  if (!primitive.ready) {\n    return BoundingSphereState.PENDING;\n  }\n\n  BoundingSphere.clone(primitive.boundingSphere, result);\n\n  return BoundingSphereState.DONE;\n};\n\n/**\n * @private\n */\nCesium3DTilesetVisualizer.prototype._onCollectionChanged = function (\n  entityCollection,\n  added,\n  removed,\n  changed\n) {\n  var i;\n  var entity;\n  var entities = this._entitiesToVisualize;\n  var tilesetHash = this._tilesetHash;\n  var primitives = this._primitives;\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n    if (defined(entity._tileset)) {\n      entities.set(entity.id, entity);\n    }\n  }\n\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n    if (defined(entity._tileset)) {\n      entities.set(entity.id, entity);\n    } else {\n      removeTileset(this, entity, tilesetHash, primitives);\n      entities.remove(entity.id);\n    }\n  }\n\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    removeTileset(this, entity, tilesetHash, primitives);\n    entities.remove(entity.id);\n  }\n};\n\nfunction removeTileset(visualizer, entity, tilesetHash, primitives) {\n  var tilesetData = tilesetHash[entity.id];\n  if (defined(tilesetData)) {\n    primitives.removeAndDestroy(tilesetData.tilesetPrimitive);\n    delete tilesetHash[entity.id];\n  }\n}\n\nfunction checkLoad(primitive, entity, tilesetHash) {\n  primitive.readyPromise.otherwise(function (error) {\n    console.error(error);\n    tilesetHash[entity.id].loadFail = true;\n  });\n}\nexport default Cesium3DTilesetVisualizer;\n"]},"metadata":{},"sourceType":"module"}