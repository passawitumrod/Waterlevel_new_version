{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport VertexFormat from \"../Core/VertexFormat.js\";\nimport EllipsoidSurfaceAppearanceFS from \"../Shaders/Appearances/EllipsoidSurfaceAppearanceFS.js\";\nimport EllipsoidSurfaceAppearanceVS from \"../Shaders/Appearances/EllipsoidSurfaceAppearanceVS.js\";\nimport Appearance from \"./Appearance.js\";\nimport Material from \"./Material.js\";\n/**\n * An appearance for geometry on the surface of the ellipsoid like {@link PolygonGeometry}\n * and {@link RectangleGeometry}, which supports all materials like {@link MaterialAppearance}\n * with {@link MaterialAppearance.MaterialSupport.ALL}.  However, this appearance requires\n * fewer vertex attributes since the fragment shader can procedurally compute <code>normal</code>,\n * <code>tangent</code>, and <code>bitangent</code>.\n *\n * @alias EllipsoidSurfaceAppearance\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.flat=false] When <code>true</code>, flat shading is used in the fragment shader, which means lighting is not taking into account.\n * @param {Boolean} [options.faceForward=options.aboveGround] When <code>true</code>, the fragment shader flips the surface normal as needed to ensure that the normal faces the viewer to avoid dark spots.  This is useful when both sides of a geometry should be shaded like {@link WallGeometry}.\n * @param {Boolean} [options.translucent=true] When <code>true</code>, the geometry is expected to appear translucent so {@link EllipsoidSurfaceAppearance#renderState} has alpha blending enabled.\n * @param {Boolean} [options.aboveGround=false] When <code>true</code>, the geometry is expected to be on the ellipsoid's surface - not at a constant height above it - so {@link EllipsoidSurfaceAppearance#renderState} has backface culling enabled.\n * @param {Material} [options.material=Material.ColorType] The material used to determine the fragment color.\n * @param {String} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n * @param {String} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n * @param {RenderState} [options.renderState] Optional render state to override the default render state.\n *\n * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n *\n * @example\n * var primitive = new Cesium.Primitive({\n *   geometryInstances : new Cesium.GeometryInstance({\n *     geometry : new Cesium.PolygonGeometry({\n *       vertexFormat : Cesium.EllipsoidSurfaceAppearance.VERTEX_FORMAT,\n *       // ...\n *     })\n *   }),\n *   appearance : new Cesium.EllipsoidSurfaceAppearance({\n *     material : Cesium.Material.fromType('Stripe')\n *   })\n * });\n */\n\nfunction EllipsoidSurfaceAppearance(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var translucent = defaultValue(options.translucent, true);\n  var aboveGround = defaultValue(options.aboveGround, false);\n  /**\n   * The material used to determine the fragment color.  Unlike other {@link EllipsoidSurfaceAppearance}\n   * properties, this is not read-only, so an appearance's material can change on the fly.\n   *\n   * @type Material\n   *\n   * @default {@link Material.ColorType}\n   *\n   * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n   */\n\n  this.material = defined(options.material) ? options.material : Material.fromType(Material.ColorType);\n  /**\n   * When <code>true</code>, the geometry is expected to appear translucent.\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n\n  this.translucent = defaultValue(options.translucent, true);\n  this._vertexShaderSource = defaultValue(options.vertexShaderSource, EllipsoidSurfaceAppearanceVS);\n  this._fragmentShaderSource = defaultValue(options.fragmentShaderSource, EllipsoidSurfaceAppearanceFS);\n  this._renderState = Appearance.getDefaultRenderState(translucent, !aboveGround, options.renderState);\n  this._closed = false; // Non-derived members\n\n  this._flat = defaultValue(options.flat, false);\n  this._faceForward = defaultValue(options.faceForward, aboveGround);\n  this._aboveGround = aboveGround;\n}\n\nObject.defineProperties(EllipsoidSurfaceAppearance.prototype, {\n  /**\n   * The GLSL source code for the vertex shader.\n   *\n   * @memberof EllipsoidSurfaceAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  vertexShaderSource: {\n    get: function () {\n      return this._vertexShaderSource;\n    }\n  },\n\n  /**\n   * The GLSL source code for the fragment shader.  The full fragment shader\n   * source is built procedurally taking into account {@link EllipsoidSurfaceAppearance#material},\n   * {@link EllipsoidSurfaceAppearance#flat}, and {@link EllipsoidSurfaceAppearance#faceForward}.\n   * Use {@link EllipsoidSurfaceAppearance#getFragmentShaderSource} to get the full source.\n   *\n   * @memberof EllipsoidSurfaceAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  fragmentShaderSource: {\n    get: function () {\n      return this._fragmentShaderSource;\n    }\n  },\n\n  /**\n   * The WebGL fixed-function state to use when rendering the geometry.\n   * <p>\n   * The render state can be explicitly defined when constructing a {@link EllipsoidSurfaceAppearance}\n   * instance, or it is set implicitly via {@link EllipsoidSurfaceAppearance#translucent}\n   * and {@link EllipsoidSurfaceAppearance#aboveGround}.\n   * </p>\n   *\n   * @memberof EllipsoidSurfaceAppearance.prototype\n   *\n   * @type {Object}\n   * @readonly\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    }\n  },\n\n  /**\n   * When <code>true</code>, the geometry is expected to be closed so\n   * {@link EllipsoidSurfaceAppearance#renderState} has backface culling enabled.\n   * If the viewer enters the geometry, it will not be visible.\n   *\n   * @memberof EllipsoidSurfaceAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  closed: {\n    get: function () {\n      return this._closed;\n    }\n  },\n\n  /**\n   * The {@link VertexFormat} that this appearance instance is compatible with.\n   * A geometry can have more vertex attributes and still be compatible - at a\n   * potential performance cost - but it can't have less.\n   *\n   * @memberof EllipsoidSurfaceAppearance.prototype\n   *\n   * @type VertexFormat\n   * @readonly\n   *\n   * @default {@link EllipsoidSurfaceAppearance.VERTEX_FORMAT}\n   */\n  vertexFormat: {\n    get: function () {\n      return EllipsoidSurfaceAppearance.VERTEX_FORMAT;\n    }\n  },\n\n  /**\n   * When <code>true</code>, flat shading is used in the fragment shader,\n   * which means lighting is not taking into account.\n   *\n   * @memberof EllipsoidSurfaceAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  flat: {\n    get: function () {\n      return this._flat;\n    }\n  },\n\n  /**\n   * When <code>true</code>, the fragment shader flips the surface normal\n   * as needed to ensure that the normal faces the viewer to avoid\n   * dark spots.  This is useful when both sides of a geometry should be\n   * shaded like {@link WallGeometry}.\n   *\n   * @memberof EllipsoidSurfaceAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  faceForward: {\n    get: function () {\n      return this._faceForward;\n    }\n  },\n\n  /**\n   * When <code>true</code>, the geometry is expected to be on the ellipsoid's\n   * surface - not at a constant height above it - so {@link EllipsoidSurfaceAppearance#renderState}\n   * has backface culling enabled.\n   *\n   *\n   * @memberof EllipsoidSurfaceAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  aboveGround: {\n    get: function () {\n      return this._aboveGround;\n    }\n  }\n});\n/**\n * The {@link VertexFormat} that all {@link EllipsoidSurfaceAppearance} instances\n * are compatible with, which requires only <code>position</code> and <code>st</code>\n * attributes.  Other attributes are procedurally computed in the fragment shader.\n *\n * @type VertexFormat\n *\n * @constant\n */\n\nEllipsoidSurfaceAppearance.VERTEX_FORMAT = VertexFormat.POSITION_AND_ST;\n/**\n * Procedurally creates the full GLSL fragment shader source.  For {@link EllipsoidSurfaceAppearance},\n * this is derived from {@link EllipsoidSurfaceAppearance#fragmentShaderSource}, {@link EllipsoidSurfaceAppearance#flat},\n * and {@link EllipsoidSurfaceAppearance#faceForward}.\n *\n * @function\n *\n * @returns {String} The full GLSL fragment shader source.\n */\n\nEllipsoidSurfaceAppearance.prototype.getFragmentShaderSource = Appearance.prototype.getFragmentShaderSource;\n/**\n * Determines if the geometry is translucent based on {@link EllipsoidSurfaceAppearance#translucent} and {@link Material#isTranslucent}.\n *\n * @function\n *\n * @returns {Boolean} <code>true</code> if the appearance is translucent.\n */\n\nEllipsoidSurfaceAppearance.prototype.isTranslucent = Appearance.prototype.isTranslucent;\n/**\n * Creates a render state.  This is not the final render state instance; instead,\n * it can contain a subset of render state properties identical to the render state\n * created in the context.\n *\n * @function\n *\n * @returns {Object} The render state.\n */\n\nEllipsoidSurfaceAppearance.prototype.getRenderState = Appearance.prototype.getRenderState;\nexport default EllipsoidSurfaceAppearance;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/EllipsoidSurfaceAppearance.js"],"names":["defaultValue","defined","VertexFormat","EllipsoidSurfaceAppearanceFS","EllipsoidSurfaceAppearanceVS","Appearance","Material","EllipsoidSurfaceAppearance","options","EMPTY_OBJECT","translucent","aboveGround","material","fromType","ColorType","_vertexShaderSource","vertexShaderSource","_fragmentShaderSource","fragmentShaderSource","_renderState","getDefaultRenderState","renderState","_closed","_flat","flat","_faceForward","faceForward","_aboveGround","Object","defineProperties","prototype","get","closed","vertexFormat","VERTEX_FORMAT","POSITION_AND_ST","getFragmentShaderSource","isTranslucent","getRenderState"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport VertexFormat from \"../Core/VertexFormat.js\";\nimport EllipsoidSurfaceAppearanceFS from \"../Shaders/Appearances/EllipsoidSurfaceAppearanceFS.js\";\nimport EllipsoidSurfaceAppearanceVS from \"../Shaders/Appearances/EllipsoidSurfaceAppearanceVS.js\";\nimport Appearance from \"./Appearance.js\";\nimport Material from \"./Material.js\";\n\n/**\n * An appearance for geometry on the surface of the ellipsoid like {@link PolygonGeometry}\n * and {@link RectangleGeometry}, which supports all materials like {@link MaterialAppearance}\n * with {@link MaterialAppearance.MaterialSupport.ALL}.  However, this appearance requires\n * fewer vertex attributes since the fragment shader can procedurally compute <code>normal</code>,\n * <code>tangent</code>, and <code>bitangent</code>.\n *\n * @alias EllipsoidSurfaceAppearance\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.flat=false] When <code>true</code>, flat shading is used in the fragment shader, which means lighting is not taking into account.\n * @param {Boolean} [options.faceForward=options.aboveGround] When <code>true</code>, the fragment shader flips the surface normal as needed to ensure that the normal faces the viewer to avoid dark spots.  This is useful when both sides of a geometry should be shaded like {@link WallGeometry}.\n * @param {Boolean} [options.translucent=true] When <code>true</code>, the geometry is expected to appear translucent so {@link EllipsoidSurfaceAppearance#renderState} has alpha blending enabled.\n * @param {Boolean} [options.aboveGround=false] When <code>true</code>, the geometry is expected to be on the ellipsoid's surface - not at a constant height above it - so {@link EllipsoidSurfaceAppearance#renderState} has backface culling enabled.\n * @param {Material} [options.material=Material.ColorType] The material used to determine the fragment color.\n * @param {String} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n * @param {String} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n * @param {RenderState} [options.renderState] Optional render state to override the default render state.\n *\n * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n *\n * @example\n * var primitive = new Cesium.Primitive({\n *   geometryInstances : new Cesium.GeometryInstance({\n *     geometry : new Cesium.PolygonGeometry({\n *       vertexFormat : Cesium.EllipsoidSurfaceAppearance.VERTEX_FORMAT,\n *       // ...\n *     })\n *   }),\n *   appearance : new Cesium.EllipsoidSurfaceAppearance({\n *     material : Cesium.Material.fromType('Stripe')\n *   })\n * });\n */\nfunction EllipsoidSurfaceAppearance(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var translucent = defaultValue(options.translucent, true);\n  var aboveGround = defaultValue(options.aboveGround, false);\n\n  /**\n   * The material used to determine the fragment color.  Unlike other {@link EllipsoidSurfaceAppearance}\n   * properties, this is not read-only, so an appearance's material can change on the fly.\n   *\n   * @type Material\n   *\n   * @default {@link Material.ColorType}\n   *\n   * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n   */\n  this.material = defined(options.material)\n    ? options.material\n    : Material.fromType(Material.ColorType);\n\n  /**\n   * When <code>true</code>, the geometry is expected to appear translucent.\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  this.translucent = defaultValue(options.translucent, true);\n\n  this._vertexShaderSource = defaultValue(\n    options.vertexShaderSource,\n    EllipsoidSurfaceAppearanceVS\n  );\n  this._fragmentShaderSource = defaultValue(\n    options.fragmentShaderSource,\n    EllipsoidSurfaceAppearanceFS\n  );\n  this._renderState = Appearance.getDefaultRenderState(\n    translucent,\n    !aboveGround,\n    options.renderState\n  );\n  this._closed = false;\n\n  // Non-derived members\n\n  this._flat = defaultValue(options.flat, false);\n  this._faceForward = defaultValue(options.faceForward, aboveGround);\n  this._aboveGround = aboveGround;\n}\n\nObject.defineProperties(EllipsoidSurfaceAppearance.prototype, {\n  /**\n   * The GLSL source code for the vertex shader.\n   *\n   * @memberof EllipsoidSurfaceAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  vertexShaderSource: {\n    get: function () {\n      return this._vertexShaderSource;\n    },\n  },\n\n  /**\n   * The GLSL source code for the fragment shader.  The full fragment shader\n   * source is built procedurally taking into account {@link EllipsoidSurfaceAppearance#material},\n   * {@link EllipsoidSurfaceAppearance#flat}, and {@link EllipsoidSurfaceAppearance#faceForward}.\n   * Use {@link EllipsoidSurfaceAppearance#getFragmentShaderSource} to get the full source.\n   *\n   * @memberof EllipsoidSurfaceAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  fragmentShaderSource: {\n    get: function () {\n      return this._fragmentShaderSource;\n    },\n  },\n\n  /**\n   * The WebGL fixed-function state to use when rendering the geometry.\n   * <p>\n   * The render state can be explicitly defined when constructing a {@link EllipsoidSurfaceAppearance}\n   * instance, or it is set implicitly via {@link EllipsoidSurfaceAppearance#translucent}\n   * and {@link EllipsoidSurfaceAppearance#aboveGround}.\n   * </p>\n   *\n   * @memberof EllipsoidSurfaceAppearance.prototype\n   *\n   * @type {Object}\n   * @readonly\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the geometry is expected to be closed so\n   * {@link EllipsoidSurfaceAppearance#renderState} has backface culling enabled.\n   * If the viewer enters the geometry, it will not be visible.\n   *\n   * @memberof EllipsoidSurfaceAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  closed: {\n    get: function () {\n      return this._closed;\n    },\n  },\n\n  /**\n   * The {@link VertexFormat} that this appearance instance is compatible with.\n   * A geometry can have more vertex attributes and still be compatible - at a\n   * potential performance cost - but it can't have less.\n   *\n   * @memberof EllipsoidSurfaceAppearance.prototype\n   *\n   * @type VertexFormat\n   * @readonly\n   *\n   * @default {@link EllipsoidSurfaceAppearance.VERTEX_FORMAT}\n   */\n  vertexFormat: {\n    get: function () {\n      return EllipsoidSurfaceAppearance.VERTEX_FORMAT;\n    },\n  },\n\n  /**\n   * When <code>true</code>, flat shading is used in the fragment shader,\n   * which means lighting is not taking into account.\n   *\n   * @memberof EllipsoidSurfaceAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  flat: {\n    get: function () {\n      return this._flat;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the fragment shader flips the surface normal\n   * as needed to ensure that the normal faces the viewer to avoid\n   * dark spots.  This is useful when both sides of a geometry should be\n   * shaded like {@link WallGeometry}.\n   *\n   * @memberof EllipsoidSurfaceAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  faceForward: {\n    get: function () {\n      return this._faceForward;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the geometry is expected to be on the ellipsoid's\n   * surface - not at a constant height above it - so {@link EllipsoidSurfaceAppearance#renderState}\n   * has backface culling enabled.\n   *\n   *\n   * @memberof EllipsoidSurfaceAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  aboveGround: {\n    get: function () {\n      return this._aboveGround;\n    },\n  },\n});\n\n/**\n * The {@link VertexFormat} that all {@link EllipsoidSurfaceAppearance} instances\n * are compatible with, which requires only <code>position</code> and <code>st</code>\n * attributes.  Other attributes are procedurally computed in the fragment shader.\n *\n * @type VertexFormat\n *\n * @constant\n */\nEllipsoidSurfaceAppearance.VERTEX_FORMAT = VertexFormat.POSITION_AND_ST;\n\n/**\n * Procedurally creates the full GLSL fragment shader source.  For {@link EllipsoidSurfaceAppearance},\n * this is derived from {@link EllipsoidSurfaceAppearance#fragmentShaderSource}, {@link EllipsoidSurfaceAppearance#flat},\n * and {@link EllipsoidSurfaceAppearance#faceForward}.\n *\n * @function\n *\n * @returns {String} The full GLSL fragment shader source.\n */\nEllipsoidSurfaceAppearance.prototype.getFragmentShaderSource =\n  Appearance.prototype.getFragmentShaderSource;\n\n/**\n * Determines if the geometry is translucent based on {@link EllipsoidSurfaceAppearance#translucent} and {@link Material#isTranslucent}.\n *\n * @function\n *\n * @returns {Boolean} <code>true</code> if the appearance is translucent.\n */\nEllipsoidSurfaceAppearance.prototype.isTranslucent =\n  Appearance.prototype.isTranslucent;\n\n/**\n * Creates a render state.  This is not the final render state instance; instead,\n * it can contain a subset of render state properties identical to the render state\n * created in the context.\n *\n * @function\n *\n * @returns {Object} The render state.\n */\nEllipsoidSurfaceAppearance.prototype.getRenderState =\n  Appearance.prototype.getRenderState;\nexport default EllipsoidSurfaceAppearance;\n"]},"metadata":{},"sourceType":"module"}