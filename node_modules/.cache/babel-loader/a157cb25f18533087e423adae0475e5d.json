{"ast":null,"code":"import Clock from \"../Core/Clock.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport createRawPropertyDescriptor from \"./createRawPropertyDescriptor.js\";\n/**\n * Represents desired clock settings for a particular {@link DataSource}.  These settings may be applied\n * to the {@link Clock} when the DataSource is loaded.\n *\n * @alias DataSourceClock\n * @constructor\n */\n\nfunction DataSourceClock() {\n  this._definitionChanged = new Event();\n  this._startTime = undefined;\n  this._stopTime = undefined;\n  this._currentTime = undefined;\n  this._clockRange = undefined;\n  this._clockStep = undefined;\n  this._multiplier = undefined;\n}\n\nObject.defineProperties(DataSourceClock.prototype, {\n  /**\n   * Gets the event that is raised whenever a new property is assigned.\n   * @memberof DataSourceClock.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function get() {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the desired start time of the clock.\n   * See {@link Clock#startTime}.\n   * @memberof DataSourceClock.prototype\n   * @type {JulianDate}\n   */\n  startTime: createRawPropertyDescriptor(\"startTime\"),\n\n  /**\n   * Gets or sets the desired stop time of the clock.\n   * See {@link Clock#stopTime}.\n   * @memberof DataSourceClock.prototype\n   * @type {JulianDate}\n   */\n  stopTime: createRawPropertyDescriptor(\"stopTime\"),\n\n  /**\n   * Gets or sets the desired current time when this data source is loaded.\n   * See {@link Clock#currentTime}.\n   * @memberof DataSourceClock.prototype\n   * @type {JulianDate}\n   */\n  currentTime: createRawPropertyDescriptor(\"currentTime\"),\n\n  /**\n   * Gets or sets the desired clock range setting.\n   * See {@link Clock#clockRange}.\n   * @memberof DataSourceClock.prototype\n   * @type {ClockRange}\n   */\n  clockRange: createRawPropertyDescriptor(\"clockRange\"),\n\n  /**\n   * Gets or sets the desired clock step setting.\n   * See {@link Clock#clockStep}.\n   * @memberof DataSourceClock.prototype\n   * @type {ClockStep}\n   */\n  clockStep: createRawPropertyDescriptor(\"clockStep\"),\n\n  /**\n   * Gets or sets the desired clock multiplier.\n   * See {@link Clock#multiplier}.\n   * @memberof DataSourceClock.prototype\n   * @type {Number}\n   */\n  multiplier: createRawPropertyDescriptor(\"multiplier\")\n});\n/**\n * Duplicates a DataSourceClock instance.\n *\n * @param {DataSourceClock} [result] The object onto which to store the result.\n * @returns {DataSourceClock} The modified result parameter or a new instance if one was not provided.\n */\n\nDataSourceClock.prototype.clone = function (result) {\n  if (!defined(result)) {\n    result = new DataSourceClock();\n  }\n\n  result.startTime = this.startTime;\n  result.stopTime = this.stopTime;\n  result.currentTime = this.currentTime;\n  result.clockRange = this.clockRange;\n  result.clockStep = this.clockStep;\n  result.multiplier = this.multiplier;\n  return result;\n};\n/**\n * Returns true if this DataSourceClock is equivalent to the other\n *\n * @param {DataSourceClock} other The other DataSourceClock to compare to.\n * @returns {Boolean} <code>true</code> if the DataSourceClocks are equal; otherwise, <code>false</code>.\n */\n\n\nDataSourceClock.prototype.equals = function (other) {\n  return this === other || defined(other) && JulianDate.equals(this.startTime, other.startTime) && JulianDate.equals(this.stopTime, other.stopTime) && JulianDate.equals(this.currentTime, other.currentTime) && this.clockRange === other.clockRange && this.clockStep === other.clockStep && this.multiplier === other.multiplier;\n};\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {DataSourceClock} source The object to be merged into this object.\n */\n\n\nDataSourceClock.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  } //>>includeEnd('debug');\n\n\n  this.startTime = defaultValue(this.startTime, source.startTime);\n  this.stopTime = defaultValue(this.stopTime, source.stopTime);\n  this.currentTime = defaultValue(this.currentTime, source.currentTime);\n  this.clockRange = defaultValue(this.clockRange, source.clockRange);\n  this.clockStep = defaultValue(this.clockStep, source.clockStep);\n  this.multiplier = defaultValue(this.multiplier, source.multiplier);\n};\n/**\n * Gets the value of this clock instance as a {@link Clock} object.\n *\n * @returns {Clock} The modified result parameter or a new instance if one was not provided.\n */\n\n\nDataSourceClock.prototype.getValue = function (result) {\n  if (!defined(result)) {\n    result = new Clock();\n  }\n\n  result.startTime = defaultValue(this.startTime, result.startTime);\n  result.stopTime = defaultValue(this.stopTime, result.stopTime);\n  result.currentTime = defaultValue(this.currentTime, result.currentTime);\n  result.clockRange = defaultValue(this.clockRange, result.clockRange);\n  result.multiplier = defaultValue(this.multiplier, result.multiplier);\n  result.clockStep = defaultValue(this.clockStep, result.clockStep);\n  return result;\n};\n\nexport default DataSourceClock;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/DataSourceClock.js"],"names":["Clock","defaultValue","defined","DeveloperError","Event","JulianDate","createRawPropertyDescriptor","DataSourceClock","_definitionChanged","_startTime","undefined","_stopTime","_currentTime","_clockRange","_clockStep","_multiplier","Object","defineProperties","prototype","definitionChanged","get","startTime","stopTime","currentTime","clockRange","clockStep","multiplier","clone","result","equals","other","merge","source","getValue"],"mappings":"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","sourcesContent":["import Clock from \"../Core/Clock.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport createRawPropertyDescriptor from \"./createRawPropertyDescriptor.js\";\n\n/**\n * Represents desired clock settings for a particular {@link DataSource}.  These settings may be applied\n * to the {@link Clock} when the DataSource is loaded.\n *\n * @alias DataSourceClock\n * @constructor\n */\nfunction DataSourceClock() {\n  this._definitionChanged = new Event();\n  this._startTime = undefined;\n  this._stopTime = undefined;\n  this._currentTime = undefined;\n  this._clockRange = undefined;\n  this._clockStep = undefined;\n  this._multiplier = undefined;\n}\n\nObject.defineProperties(DataSourceClock.prototype, {\n  /**\n   * Gets the event that is raised whenever a new property is assigned.\n   * @memberof DataSourceClock.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the desired start time of the clock.\n   * See {@link Clock#startTime}.\n   * @memberof DataSourceClock.prototype\n   * @type {JulianDate}\n   */\n  startTime: createRawPropertyDescriptor(\"startTime\"),\n\n  /**\n   * Gets or sets the desired stop time of the clock.\n   * See {@link Clock#stopTime}.\n   * @memberof DataSourceClock.prototype\n   * @type {JulianDate}\n   */\n  stopTime: createRawPropertyDescriptor(\"stopTime\"),\n\n  /**\n   * Gets or sets the desired current time when this data source is loaded.\n   * See {@link Clock#currentTime}.\n   * @memberof DataSourceClock.prototype\n   * @type {JulianDate}\n   */\n  currentTime: createRawPropertyDescriptor(\"currentTime\"),\n\n  /**\n   * Gets or sets the desired clock range setting.\n   * See {@link Clock#clockRange}.\n   * @memberof DataSourceClock.prototype\n   * @type {ClockRange}\n   */\n  clockRange: createRawPropertyDescriptor(\"clockRange\"),\n\n  /**\n   * Gets or sets the desired clock step setting.\n   * See {@link Clock#clockStep}.\n   * @memberof DataSourceClock.prototype\n   * @type {ClockStep}\n   */\n  clockStep: createRawPropertyDescriptor(\"clockStep\"),\n\n  /**\n   * Gets or sets the desired clock multiplier.\n   * See {@link Clock#multiplier}.\n   * @memberof DataSourceClock.prototype\n   * @type {Number}\n   */\n  multiplier: createRawPropertyDescriptor(\"multiplier\"),\n});\n\n/**\n * Duplicates a DataSourceClock instance.\n *\n * @param {DataSourceClock} [result] The object onto which to store the result.\n * @returns {DataSourceClock} The modified result parameter or a new instance if one was not provided.\n */\nDataSourceClock.prototype.clone = function (result) {\n  if (!defined(result)) {\n    result = new DataSourceClock();\n  }\n  result.startTime = this.startTime;\n  result.stopTime = this.stopTime;\n  result.currentTime = this.currentTime;\n  result.clockRange = this.clockRange;\n  result.clockStep = this.clockStep;\n  result.multiplier = this.multiplier;\n  return result;\n};\n\n/**\n * Returns true if this DataSourceClock is equivalent to the other\n *\n * @param {DataSourceClock} other The other DataSourceClock to compare to.\n * @returns {Boolean} <code>true</code> if the DataSourceClocks are equal; otherwise, <code>false</code>.\n */\nDataSourceClock.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (defined(other) &&\n      JulianDate.equals(this.startTime, other.startTime) &&\n      JulianDate.equals(this.stopTime, other.stopTime) &&\n      JulianDate.equals(this.currentTime, other.currentTime) &&\n      this.clockRange === other.clockRange &&\n      this.clockStep === other.clockStep &&\n      this.multiplier === other.multiplier)\n  );\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {DataSourceClock} source The object to be merged into this object.\n */\nDataSourceClock.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.startTime = defaultValue(this.startTime, source.startTime);\n  this.stopTime = defaultValue(this.stopTime, source.stopTime);\n  this.currentTime = defaultValue(this.currentTime, source.currentTime);\n  this.clockRange = defaultValue(this.clockRange, source.clockRange);\n  this.clockStep = defaultValue(this.clockStep, source.clockStep);\n  this.multiplier = defaultValue(this.multiplier, source.multiplier);\n};\n\n/**\n * Gets the value of this clock instance as a {@link Clock} object.\n *\n * @returns {Clock} The modified result parameter or a new instance if one was not provided.\n */\nDataSourceClock.prototype.getValue = function (result) {\n  if (!defined(result)) {\n    result = new Clock();\n  }\n  result.startTime = defaultValue(this.startTime, result.startTime);\n  result.stopTime = defaultValue(this.stopTime, result.stopTime);\n  result.currentTime = defaultValue(this.currentTime, result.currentTime);\n  result.clockRange = defaultValue(this.clockRange, result.clockRange);\n  result.multiplier = defaultValue(this.multiplier, result.multiplier);\n  result.clockStep = defaultValue(this.clockStep, result.clockStep);\n  return result;\n};\nexport default DataSourceClock;\n"]},"metadata":{},"sourceType":"module"}