{"ast":null,"code":"import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\nimport OrthographicOffCenterFrustum from \"./OrthographicOffCenterFrustum.js\";\n/**\n * The viewing frustum is defined by 6 planes.\n * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\n * define the unit vector normal to the plane, and the w component is the distance of the\n * plane from the origin/camera position.\n *\n * @alias OrthographicFrustum\n * @constructor\n *\n * @param {Object} [options] An object with the following properties:\n * @param {Number} [options.width] The width of the frustum in meters.\n * @param {Number} [options.aspectRatio] The aspect ratio of the frustum's width to it's height.\n * @param {Number} [options.near=1.0] The distance of the near plane.\n * @param {Number} [options.far=500000000.0] The distance of the far plane.\n *\n * @example\n * var maxRadii = ellipsoid.maximumRadius;\n *\n * var frustum = new Cesium.OrthographicFrustum();\n * frustum.near = 0.01 * maxRadii;\n * frustum.far = 50.0 * maxRadii;\n */\n\nfunction OrthographicFrustum(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._offCenterFrustum = new OrthographicOffCenterFrustum();\n  /**\n   * The horizontal width of the frustum in meters.\n   * @type {Number}\n   * @default undefined\n   */\n\n  this.width = options.width;\n  this._width = undefined;\n  /**\n   * The aspect ratio of the frustum's width to it's height.\n   * @type {Number}\n   * @default undefined\n   */\n\n  this.aspectRatio = options.aspectRatio;\n  this._aspectRatio = undefined;\n  /**\n   * The distance of the near plane.\n   * @type {Number}\n   * @default 1.0\n   */\n\n  this.near = defaultValue(options.near, 1.0);\n  this._near = this.near;\n  /**\n   * The distance of the far plane.\n   * @type {Number}\n   * @default 500000000.0;\n   */\n\n  this.far = defaultValue(options.far, 500000000.0);\n  this._far = this.far;\n}\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\n\n\nOrthographicFrustum.packedLength = 4;\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {OrthographicFrustum} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\n\nOrthographicFrustum.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array); //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  array[startingIndex++] = value.width;\n  array[startingIndex++] = value.aspectRatio;\n  array[startingIndex++] = value.near;\n  array[startingIndex] = value.far;\n  return array;\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {OrthographicFrustum} [result] The object into which to store the result.\n * @returns {OrthographicFrustum} The modified result parameter or a new OrthographicFrustum instance if one was not provided.\n */\n\n\nOrthographicFrustum.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array); //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  if (!defined(result)) {\n    result = new OrthographicFrustum();\n  }\n\n  result.width = array[startingIndex++];\n  result.aspectRatio = array[startingIndex++];\n  result.near = array[startingIndex++];\n  result.far = array[startingIndex];\n  return result;\n};\n\nfunction update(frustum) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(frustum.width) || !defined(frustum.aspectRatio) || !defined(frustum.near) || !defined(frustum.far)) {\n    throw new DeveloperError(\"width, aspectRatio, near, or far parameters are not set.\");\n  } //>>includeEnd('debug');\n\n\n  var f = frustum._offCenterFrustum;\n\n  if (frustum.width !== frustum._width || frustum.aspectRatio !== frustum._aspectRatio || frustum.near !== frustum._near || frustum.far !== frustum._far) {\n    //>>includeStart('debug', pragmas.debug);\n    if (frustum.aspectRatio < 0) {\n      throw new DeveloperError(\"aspectRatio must be positive.\");\n    }\n\n    if (frustum.near < 0 || frustum.near > frustum.far) {\n      throw new DeveloperError(\"near must be greater than zero and less than far.\");\n    } //>>includeEnd('debug');\n\n\n    frustum._aspectRatio = frustum.aspectRatio;\n    frustum._width = frustum.width;\n    frustum._near = frustum.near;\n    frustum._far = frustum.far;\n    var ratio = 1.0 / frustum.aspectRatio;\n    f.right = frustum.width * 0.5;\n    f.left = -f.right;\n    f.top = ratio * f.right;\n    f.bottom = -f.top;\n    f.near = frustum.near;\n    f.far = frustum.far;\n  }\n}\n\nObject.defineProperties(OrthographicFrustum.prototype, {\n  /**\n   * Gets the orthographic projection matrix computed from the view frustum.\n   * @memberof OrthographicFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   */\n  projectionMatrix: {\n    get: function get() {\n      update(this);\n      return this._offCenterFrustum.projectionMatrix;\n    }\n  }\n});\n/**\n * Creates a culling volume for this frustum.\n *\n * @param {Cartesian3} position The eye position.\n * @param {Cartesian3} direction The view direction.\n * @param {Cartesian3} up The up direction.\n * @returns {CullingVolume} A culling volume at the given position and orientation.\n *\n * @example\n * // Check if a bounding volume intersects the frustum.\n * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n * var intersect = cullingVolume.computeVisibility(boundingVolume);\n */\n\nOrthographicFrustum.prototype.computeCullingVolume = function (position, direction, up) {\n  update(this);\n  return this._offCenterFrustum.computeCullingVolume(position, direction, up);\n};\n/**\n * Returns the pixel's width and height in meters.\n *\n * @param {Number} drawingBufferWidth The width of the drawing buffer.\n * @param {Number} drawingBufferHeight The height of the drawing buffer.\n * @param {Number} distance The distance to the near plane in meters.\n * @param {Number} pixelRatio The scaling factor from pixel space to coordinate space.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\n *\n * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n * @exception {DeveloperError} pixelRatio must be greater than zero.\n *\n * @example\n * // Example 1\n * // Get the width and height of a pixel.\n * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 0.0, scene.pixelRatio, new Cesium.Cartesian2());\n */\n\n\nOrthographicFrustum.prototype.getPixelDimensions = function (drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result) {\n  update(this);\n  return this._offCenterFrustum.getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result);\n};\n/**\n * Returns a duplicate of a OrthographicFrustum instance.\n *\n * @param {OrthographicFrustum} [result] The object onto which to store the result.\n * @returns {OrthographicFrustum} The modified result parameter or a new OrthographicFrustum instance if one was not provided.\n */\n\n\nOrthographicFrustum.prototype.clone = function (result) {\n  if (!defined(result)) {\n    result = new OrthographicFrustum();\n  }\n\n  result.aspectRatio = this.aspectRatio;\n  result.width = this.width;\n  result.near = this.near;\n  result.far = this.far; // force update of clone to compute matrices\n\n  result._aspectRatio = undefined;\n  result._width = undefined;\n  result._near = undefined;\n  result._far = undefined;\n\n  this._offCenterFrustum.clone(result._offCenterFrustum);\n\n  return result;\n};\n/**\n * Compares the provided OrthographicFrustum componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {OrthographicFrustum} [other] The right hand side OrthographicFrustum.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\n\n\nOrthographicFrustum.prototype.equals = function (other) {\n  if (!defined(other) || !(other instanceof OrthographicFrustum)) {\n    return false;\n  }\n\n  update(this);\n  update(other);\n  return this.width === other.width && this.aspectRatio === other.aspectRatio && this._offCenterFrustum.equals(other._offCenterFrustum);\n};\n/**\n * Compares the provided OrthographicFrustum componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {OrthographicFrustum} other The right hand side OrthographicFrustum.\n * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\n */\n\n\nOrthographicFrustum.prototype.equalsEpsilon = function (other, relativeEpsilon, absoluteEpsilon) {\n  if (!defined(other) || !(other instanceof OrthographicFrustum)) {\n    return false;\n  }\n\n  update(this);\n  update(other);\n  return CesiumMath.equalsEpsilon(this.width, other.width, relativeEpsilon, absoluteEpsilon) && CesiumMath.equalsEpsilon(this.aspectRatio, other.aspectRatio, relativeEpsilon, absoluteEpsilon) && this._offCenterFrustum.equalsEpsilon(other._offCenterFrustum, relativeEpsilon, absoluteEpsilon);\n};\n\nexport default OrthographicFrustum;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/OrthographicFrustum.js"],"names":["Check","defaultValue","defined","DeveloperError","CesiumMath","OrthographicOffCenterFrustum","OrthographicFrustum","options","EMPTY_OBJECT","_offCenterFrustum","width","_width","undefined","aspectRatio","_aspectRatio","near","_near","far","_far","packedLength","pack","value","array","startingIndex","typeOf","object","unpack","result","update","frustum","f","ratio","right","left","top","bottom","Object","defineProperties","prototype","projectionMatrix","get","computeCullingVolume","position","direction","up","getPixelDimensions","drawingBufferWidth","drawingBufferHeight","distance","pixelRatio","clone","equals","other","equalsEpsilon","relativeEpsilon","absoluteEpsilon"],"mappings":"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","sourcesContent":["import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\nimport OrthographicOffCenterFrustum from \"./OrthographicOffCenterFrustum.js\";\n\n/**\n * The viewing frustum is defined by 6 planes.\n * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\n * define the unit vector normal to the plane, and the w component is the distance of the\n * plane from the origin/camera position.\n *\n * @alias OrthographicFrustum\n * @constructor\n *\n * @param {Object} [options] An object with the following properties:\n * @param {Number} [options.width] The width of the frustum in meters.\n * @param {Number} [options.aspectRatio] The aspect ratio of the frustum's width to it's height.\n * @param {Number} [options.near=1.0] The distance of the near plane.\n * @param {Number} [options.far=500000000.0] The distance of the far plane.\n *\n * @example\n * var maxRadii = ellipsoid.maximumRadius;\n *\n * var frustum = new Cesium.OrthographicFrustum();\n * frustum.near = 0.01 * maxRadii;\n * frustum.far = 50.0 * maxRadii;\n */\nfunction OrthographicFrustum(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._offCenterFrustum = new OrthographicOffCenterFrustum();\n\n  /**\n   * The horizontal width of the frustum in meters.\n   * @type {Number}\n   * @default undefined\n   */\n  this.width = options.width;\n  this._width = undefined;\n\n  /**\n   * The aspect ratio of the frustum's width to it's height.\n   * @type {Number}\n   * @default undefined\n   */\n  this.aspectRatio = options.aspectRatio;\n  this._aspectRatio = undefined;\n\n  /**\n   * The distance of the near plane.\n   * @type {Number}\n   * @default 1.0\n   */\n  this.near = defaultValue(options.near, 1.0);\n  this._near = this.near;\n\n  /**\n   * The distance of the far plane.\n   * @type {Number}\n   * @default 500000000.0;\n   */\n  this.far = defaultValue(options.far, 500000000.0);\n  this._far = this.far;\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nOrthographicFrustum.packedLength = 4;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {OrthographicFrustum} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nOrthographicFrustum.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  array[startingIndex++] = value.width;\n  array[startingIndex++] = value.aspectRatio;\n  array[startingIndex++] = value.near;\n  array[startingIndex] = value.far;\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {OrthographicFrustum} [result] The object into which to store the result.\n * @returns {OrthographicFrustum} The modified result parameter or a new OrthographicFrustum instance if one was not provided.\n */\nOrthographicFrustum.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  if (!defined(result)) {\n    result = new OrthographicFrustum();\n  }\n\n  result.width = array[startingIndex++];\n  result.aspectRatio = array[startingIndex++];\n  result.near = array[startingIndex++];\n  result.far = array[startingIndex];\n\n  return result;\n};\n\nfunction update(frustum) {\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    !defined(frustum.width) ||\n    !defined(frustum.aspectRatio) ||\n    !defined(frustum.near) ||\n    !defined(frustum.far)\n  ) {\n    throw new DeveloperError(\n      \"width, aspectRatio, near, or far parameters are not set.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var f = frustum._offCenterFrustum;\n\n  if (\n    frustum.width !== frustum._width ||\n    frustum.aspectRatio !== frustum._aspectRatio ||\n    frustum.near !== frustum._near ||\n    frustum.far !== frustum._far\n  ) {\n    //>>includeStart('debug', pragmas.debug);\n    if (frustum.aspectRatio < 0) {\n      throw new DeveloperError(\"aspectRatio must be positive.\");\n    }\n    if (frustum.near < 0 || frustum.near > frustum.far) {\n      throw new DeveloperError(\n        \"near must be greater than zero and less than far.\"\n      );\n    }\n    //>>includeEnd('debug');\n\n    frustum._aspectRatio = frustum.aspectRatio;\n    frustum._width = frustum.width;\n    frustum._near = frustum.near;\n    frustum._far = frustum.far;\n\n    var ratio = 1.0 / frustum.aspectRatio;\n    f.right = frustum.width * 0.5;\n    f.left = -f.right;\n    f.top = ratio * f.right;\n    f.bottom = -f.top;\n    f.near = frustum.near;\n    f.far = frustum.far;\n  }\n}\n\nObject.defineProperties(OrthographicFrustum.prototype, {\n  /**\n   * Gets the orthographic projection matrix computed from the view frustum.\n   * @memberof OrthographicFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   */\n  projectionMatrix: {\n    get: function () {\n      update(this);\n      return this._offCenterFrustum.projectionMatrix;\n    },\n  },\n});\n\n/**\n * Creates a culling volume for this frustum.\n *\n * @param {Cartesian3} position The eye position.\n * @param {Cartesian3} direction The view direction.\n * @param {Cartesian3} up The up direction.\n * @returns {CullingVolume} A culling volume at the given position and orientation.\n *\n * @example\n * // Check if a bounding volume intersects the frustum.\n * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n * var intersect = cullingVolume.computeVisibility(boundingVolume);\n */\nOrthographicFrustum.prototype.computeCullingVolume = function (\n  position,\n  direction,\n  up\n) {\n  update(this);\n  return this._offCenterFrustum.computeCullingVolume(position, direction, up);\n};\n\n/**\n * Returns the pixel's width and height in meters.\n *\n * @param {Number} drawingBufferWidth The width of the drawing buffer.\n * @param {Number} drawingBufferHeight The height of the drawing buffer.\n * @param {Number} distance The distance to the near plane in meters.\n * @param {Number} pixelRatio The scaling factor from pixel space to coordinate space.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\n *\n * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n * @exception {DeveloperError} pixelRatio must be greater than zero.\n *\n * @example\n * // Example 1\n * // Get the width and height of a pixel.\n * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 0.0, scene.pixelRatio, new Cesium.Cartesian2());\n */\nOrthographicFrustum.prototype.getPixelDimensions = function (\n  drawingBufferWidth,\n  drawingBufferHeight,\n  distance,\n  pixelRatio,\n  result\n) {\n  update(this);\n  return this._offCenterFrustum.getPixelDimensions(\n    drawingBufferWidth,\n    drawingBufferHeight,\n    distance,\n    pixelRatio,\n    result\n  );\n};\n\n/**\n * Returns a duplicate of a OrthographicFrustum instance.\n *\n * @param {OrthographicFrustum} [result] The object onto which to store the result.\n * @returns {OrthographicFrustum} The modified result parameter or a new OrthographicFrustum instance if one was not provided.\n */\nOrthographicFrustum.prototype.clone = function (result) {\n  if (!defined(result)) {\n    result = new OrthographicFrustum();\n  }\n\n  result.aspectRatio = this.aspectRatio;\n  result.width = this.width;\n  result.near = this.near;\n  result.far = this.far;\n\n  // force update of clone to compute matrices\n  result._aspectRatio = undefined;\n  result._width = undefined;\n  result._near = undefined;\n  result._far = undefined;\n\n  this._offCenterFrustum.clone(result._offCenterFrustum);\n\n  return result;\n};\n\n/**\n * Compares the provided OrthographicFrustum componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {OrthographicFrustum} [other] The right hand side OrthographicFrustum.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nOrthographicFrustum.prototype.equals = function (other) {\n  if (!defined(other) || !(other instanceof OrthographicFrustum)) {\n    return false;\n  }\n\n  update(this);\n  update(other);\n\n  return (\n    this.width === other.width &&\n    this.aspectRatio === other.aspectRatio &&\n    this._offCenterFrustum.equals(other._offCenterFrustum)\n  );\n};\n\n/**\n * Compares the provided OrthographicFrustum componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {OrthographicFrustum} other The right hand side OrthographicFrustum.\n * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\n */\nOrthographicFrustum.prototype.equalsEpsilon = function (\n  other,\n  relativeEpsilon,\n  absoluteEpsilon\n) {\n  if (!defined(other) || !(other instanceof OrthographicFrustum)) {\n    return false;\n  }\n\n  update(this);\n  update(other);\n\n  return (\n    CesiumMath.equalsEpsilon(\n      this.width,\n      other.width,\n      relativeEpsilon,\n      absoluteEpsilon\n    ) &&\n    CesiumMath.equalsEpsilon(\n      this.aspectRatio,\n      other.aspectRatio,\n      relativeEpsilon,\n      absoluteEpsilon\n    ) &&\n    this._offCenterFrustum.equalsEpsilon(\n      other._offCenterFrustum,\n      relativeEpsilon,\n      absoluteEpsilon\n    )\n  );\n};\nexport default OrthographicFrustum;\n"]},"metadata":{},"sourceType":"module"}