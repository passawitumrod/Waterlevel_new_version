{"ast":null,"code":"import defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\n/**\n * @alias KmlTour\n * @constructor\n *\n * @param {String} name name parsed from KML\n * @param {String} id id parsed from KML\n * @param {Array} playlist array with KMLTourFlyTos, KMLTourWaits and KMLTourSoundCues\n */\n\nfunction KmlTour(name, id) {\n  /**\n   * Id of kml gx:Tour entry\n   * @type String\n   */\n  this.id = id;\n  /**\n   * Tour name\n   * @type String\n   */\n\n  this.name = name;\n  /**\n   * Index of current entry from playlist\n   * @type Number\n   */\n\n  this.playlistIndex = 0;\n  /**\n   * Array of playlist entries\n   * @type Array\n   */\n\n  this.playlist = [];\n  /**\n   * Event will be called when tour starts to play,\n   * before any playlist entry starts to play.\n   * @type Event\n   */\n\n  this.tourStart = new Event();\n  /**\n   * Event will be called when all playlist entries are\n   * played, or tour playback being canceled.\n   *\n   * If tour playback was terminated, event callback will\n   * be called with terminated=true parameter.\n   * @type Event\n   */\n\n  this.tourEnd = new Event();\n  /**\n   * Event will be called when entry from playlist starts to play.\n   *\n   * Event callback will be called with curent entry as first parameter.\n   * @type Event\n   */\n\n  this.entryStart = new Event();\n  /**\n   * Event will be called when entry from playlist ends to play.\n   *\n   * Event callback will be called with following parameters:\n   * 1. entry - entry\n   * 2. terminated - true if playback was terminated by calling {@link KmlTour#stop}\n   * @type Event\n   */\n\n  this.entryEnd = new Event();\n  this._activeEntries = [];\n}\n/**\n * Add entry to this tour playlist.\n *\n * @param {KmlTourFlyTo|KmlTourWait} entry an entry to add to the playlist.\n */\n\n\nKmlTour.prototype.addPlaylistEntry = function (entry) {\n  this.playlist.push(entry);\n};\n/**\n * Play this tour.\n *\n * @param {Viewer} viewer viewer widget.\n * @param {Object} [cameraOptions] these options will be merged with {@link Camera#flyTo}\n * options for FlyTo playlist entries.\n */\n\n\nKmlTour.prototype.play = function (viewer, cameraOptions) {\n  this.tourStart.raiseEvent();\n  var tour = this;\n  playEntry.call(this, viewer, cameraOptions, function (terminated) {\n    tour.playlistIndex = 0; // Stop nonblocking entries\n\n    if (!terminated) {\n      cancelAllEntries(tour._activeEntries);\n    }\n\n    tour.tourEnd.raiseEvent(terminated);\n  });\n};\n/**\n * Stop curently playing tour.\n */\n\n\nKmlTour.prototype.stop = function () {\n  cancelAllEntries(this._activeEntries);\n}; // Stop all activeEntries.\n\n\nfunction cancelAllEntries(activeEntries) {\n  for (var entry = activeEntries.pop(); entry !== undefined; entry = activeEntries.pop()) {\n    entry.stop();\n  }\n} // Play playlist entry.\n// This function is called recursevly with playNext and iterates over all entries from playlist.\n\n\nfunction playEntry(viewer, cameraOptions, allDone) {\n  var entry = this.playlist[this.playlistIndex];\n\n  if (entry) {\n    var _playNext = playNext.bind(this, viewer, cameraOptions, allDone);\n\n    this._activeEntries.push(entry);\n\n    this.entryStart.raiseEvent(entry);\n\n    if (entry.blocking) {\n      entry.play(_playNext, viewer.scene.camera, cameraOptions);\n    } else {\n      var tour = this;\n      entry.play(function () {\n        tour.entryEnd.raiseEvent(entry);\n\n        var indx = tour._activeEntries.indexOf(entry);\n\n        if (indx >= 0) {\n          tour._activeEntries.splice(indx, 1);\n        }\n      });\n\n      _playNext(viewer, cameraOptions, allDone);\n    }\n  } else if (defined(allDone)) {\n    allDone(false);\n  }\n} // Increment playlistIndex and call playEntry if terminated isn't true.\n\n\nfunction playNext(viewer, cameraOptions, allDone, terminated) {\n  var entry = this.playlist[this.playlistIndex];\n  this.entryEnd.raiseEvent(entry, terminated);\n\n  if (terminated) {\n    allDone(terminated);\n  } else {\n    var indx = this._activeEntries.indexOf(entry);\n\n    if (indx >= 0) {\n      this._activeEntries.splice(indx, 1);\n    }\n\n    this.playlistIndex++;\n    playEntry.call(this, viewer, cameraOptions, allDone);\n  }\n}\n\nexport default KmlTour;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/DataSources/KmlTour.js"],"names":["defined","Event","KmlTour","name","id","playlistIndex","playlist","tourStart","tourEnd","entryStart","entryEnd","_activeEntries","prototype","addPlaylistEntry","entry","push","play","viewer","cameraOptions","raiseEvent","tour","playEntry","call","terminated","cancelAllEntries","stop","activeEntries","pop","undefined","allDone","_playNext","playNext","bind","blocking","scene","camera","indx","indexOf","splice"],"mappings":"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","sourcesContent":["import defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\n/**\n * @alias KmlTour\n * @constructor\n *\n * @param {String} name name parsed from KML\n * @param {String} id id parsed from KML\n * @param {Array} playlist array with KMLTourFlyTos, KMLTourWaits and KMLTourSoundCues\n */\nfunction KmlTour(name, id) {\n  /**\n   * Id of kml gx:Tour entry\n   * @type String\n   */\n  this.id = id;\n  /**\n   * Tour name\n   * @type String\n   */\n  this.name = name;\n  /**\n   * Index of current entry from playlist\n   * @type Number\n   */\n  this.playlistIndex = 0;\n  /**\n   * Array of playlist entries\n   * @type Array\n   */\n  this.playlist = [];\n  /**\n   * Event will be called when tour starts to play,\n   * before any playlist entry starts to play.\n   * @type Event\n   */\n  this.tourStart = new Event();\n  /**\n   * Event will be called when all playlist entries are\n   * played, or tour playback being canceled.\n   *\n   * If tour playback was terminated, event callback will\n   * be called with terminated=true parameter.\n   * @type Event\n   */\n  this.tourEnd = new Event();\n  /**\n   * Event will be called when entry from playlist starts to play.\n   *\n   * Event callback will be called with curent entry as first parameter.\n   * @type Event\n   */\n  this.entryStart = new Event();\n  /**\n   * Event will be called when entry from playlist ends to play.\n   *\n   * Event callback will be called with following parameters:\n   * 1. entry - entry\n   * 2. terminated - true if playback was terminated by calling {@link KmlTour#stop}\n   * @type Event\n   */\n  this.entryEnd = new Event();\n\n  this._activeEntries = [];\n}\n\n/**\n * Add entry to this tour playlist.\n *\n * @param {KmlTourFlyTo|KmlTourWait} entry an entry to add to the playlist.\n */\nKmlTour.prototype.addPlaylistEntry = function (entry) {\n  this.playlist.push(entry);\n};\n\n/**\n * Play this tour.\n *\n * @param {Viewer} viewer viewer widget.\n * @param {Object} [cameraOptions] these options will be merged with {@link Camera#flyTo}\n * options for FlyTo playlist entries.\n */\nKmlTour.prototype.play = function (viewer, cameraOptions) {\n  this.tourStart.raiseEvent();\n\n  var tour = this;\n  playEntry.call(this, viewer, cameraOptions, function (terminated) {\n    tour.playlistIndex = 0;\n    // Stop nonblocking entries\n    if (!terminated) {\n      cancelAllEntries(tour._activeEntries);\n    }\n    tour.tourEnd.raiseEvent(terminated);\n  });\n};\n\n/**\n * Stop curently playing tour.\n */\nKmlTour.prototype.stop = function () {\n  cancelAllEntries(this._activeEntries);\n};\n\n// Stop all activeEntries.\nfunction cancelAllEntries(activeEntries) {\n  for (\n    var entry = activeEntries.pop();\n    entry !== undefined;\n    entry = activeEntries.pop()\n  ) {\n    entry.stop();\n  }\n}\n\n// Play playlist entry.\n// This function is called recursevly with playNext and iterates over all entries from playlist.\nfunction playEntry(viewer, cameraOptions, allDone) {\n  var entry = this.playlist[this.playlistIndex];\n  if (entry) {\n    var _playNext = playNext.bind(this, viewer, cameraOptions, allDone);\n    this._activeEntries.push(entry);\n    this.entryStart.raiseEvent(entry);\n    if (entry.blocking) {\n      entry.play(_playNext, viewer.scene.camera, cameraOptions);\n    } else {\n      var tour = this;\n      entry.play(function () {\n        tour.entryEnd.raiseEvent(entry);\n        var indx = tour._activeEntries.indexOf(entry);\n        if (indx >= 0) {\n          tour._activeEntries.splice(indx, 1);\n        }\n      });\n      _playNext(viewer, cameraOptions, allDone);\n    }\n  } else if (defined(allDone)) {\n    allDone(false);\n  }\n}\n\n// Increment playlistIndex and call playEntry if terminated isn't true.\nfunction playNext(viewer, cameraOptions, allDone, terminated) {\n  var entry = this.playlist[this.playlistIndex];\n  this.entryEnd.raiseEvent(entry, terminated);\n\n  if (terminated) {\n    allDone(terminated);\n  } else {\n    var indx = this._activeEntries.indexOf(entry);\n    if (indx >= 0) {\n      this._activeEntries.splice(indx, 1);\n    }\n    this.playlistIndex++;\n    playEntry.call(this, viewer, cameraOptions, allDone);\n  }\n}\nexport default KmlTour;\n"]},"metadata":{},"sourceType":"module"}