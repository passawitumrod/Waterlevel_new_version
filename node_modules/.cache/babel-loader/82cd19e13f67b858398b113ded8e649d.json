{"ast":null,"code":"import defined from \"./defined.js\";\n/**\n * Constructs an exception object that is thrown due to an error that can occur at runtime, e.g.,\n * out of memory, could not compile shader, etc.  If a function may throw this\n * exception, the calling code should be prepared to catch it.\n * <br /><br />\n * On the other hand, a {@link DeveloperError} indicates an exception due\n * to a developer error, e.g., invalid argument, that usually indicates a bug in the\n * calling code.\n *\n * @alias RuntimeError\n * @constructor\n * @extends Error\n *\n * @param {String} [message] The error message for this exception.\n *\n * @see DeveloperError\n */\n\nfunction RuntimeError(message) {\n  /**\n   * 'RuntimeError' indicating that this exception was thrown due to a runtime error.\n   * @type {String}\n   * @readonly\n   */\n  this.name = \"RuntimeError\";\n  /**\n   * The explanation for why this exception was thrown.\n   * @type {String}\n   * @readonly\n   */\n\n  this.message = message; //Browsers such as IE don't have a stack property until you actually throw the error.\n\n  var stack;\n\n  try {\n    throw new Error();\n  } catch (e) {\n    stack = e.stack;\n  }\n  /**\n   * The stack trace of this exception, if available.\n   * @type {String}\n   * @readonly\n   */\n\n\n  this.stack = stack;\n}\n\nif (defined(Object.create)) {\n  RuntimeError.prototype = Object.create(Error.prototype);\n  RuntimeError.prototype.constructor = RuntimeError;\n}\n\nRuntimeError.prototype.toString = function () {\n  var str = this.name + \": \" + this.message;\n\n  if (defined(this.stack)) {\n    str += \"\\n\" + this.stack.toString();\n  }\n\n  return str;\n};\n\nexport default RuntimeError;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/RuntimeError.js"],"names":["defined","RuntimeError","message","name","stack","Error","e","Object","create","prototype","constructor","toString","str"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,cAApB;AAEA;;;;;;;;;;;;;;;;;;AAiBA,SAASC,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B;;;;;AAKA,OAAKC,IAAL,GAAY,cAAZ;AAEA;;;;;;AAKA,OAAKD,OAAL,GAAeA,OAAf,CAb6B,CAe7B;;AACA,MAAIE,KAAJ;;AACA,MAAI;AACF,UAAM,IAAIC,KAAJ,EAAN;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACVF,IAAAA,KAAK,GAAGE,CAAC,CAACF,KAAV;AACD;AAED;;;;;;;AAKA,OAAKA,KAAL,GAAaA,KAAb;AACD;;AAED,IAAIJ,OAAO,CAACO,MAAM,CAACC,MAAR,CAAX,EAA4B;AAC1BP,EAAAA,YAAY,CAACQ,SAAb,GAAyBF,MAAM,CAACC,MAAP,CAAcH,KAAK,CAACI,SAApB,CAAzB;AACAR,EAAAA,YAAY,CAACQ,SAAb,CAAuBC,WAAvB,GAAqCT,YAArC;AACD;;AAEDA,YAAY,CAACQ,SAAb,CAAuBE,QAAvB,GAAkC,YAAY;AAC5C,MAAIC,GAAG,GAAG,KAAKT,IAAL,GAAY,IAAZ,GAAmB,KAAKD,OAAlC;;AAEA,MAAIF,OAAO,CAAC,KAAKI,KAAN,CAAX,EAAyB;AACvBQ,IAAAA,GAAG,IAAI,OAAO,KAAKR,KAAL,CAAWO,QAAX,EAAd;AACD;;AAED,SAAOC,GAAP;AACD,CARD;;AASA,eAAeX,YAAf","sourcesContent":["import defined from \"./defined.js\";\n\n/**\n * Constructs an exception object that is thrown due to an error that can occur at runtime, e.g.,\n * out of memory, could not compile shader, etc.  If a function may throw this\n * exception, the calling code should be prepared to catch it.\n * <br /><br />\n * On the other hand, a {@link DeveloperError} indicates an exception due\n * to a developer error, e.g., invalid argument, that usually indicates a bug in the\n * calling code.\n *\n * @alias RuntimeError\n * @constructor\n * @extends Error\n *\n * @param {String} [message] The error message for this exception.\n *\n * @see DeveloperError\n */\nfunction RuntimeError(message) {\n  /**\n   * 'RuntimeError' indicating that this exception was thrown due to a runtime error.\n   * @type {String}\n   * @readonly\n   */\n  this.name = \"RuntimeError\";\n\n  /**\n   * The explanation for why this exception was thrown.\n   * @type {String}\n   * @readonly\n   */\n  this.message = message;\n\n  //Browsers such as IE don't have a stack property until you actually throw the error.\n  var stack;\n  try {\n    throw new Error();\n  } catch (e) {\n    stack = e.stack;\n  }\n\n  /**\n   * The stack trace of this exception, if available.\n   * @type {String}\n   * @readonly\n   */\n  this.stack = stack;\n}\n\nif (defined(Object.create)) {\n  RuntimeError.prototype = Object.create(Error.prototype);\n  RuntimeError.prototype.constructor = RuntimeError;\n}\n\nRuntimeError.prototype.toString = function () {\n  var str = this.name + \": \" + this.message;\n\n  if (defined(this.stack)) {\n    str += \"\\n\" + this.stack.toString();\n  }\n\n  return str;\n};\nexport default RuntimeError;\n"]},"metadata":{},"sourceType":"module"}