{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport PixelDatatype from \"./PixelDatatype.js\";\n/**\n * @private\n */\n\nfunction CubeMapFace(gl, texture, textureTarget, targetFace, pixelFormat, pixelDatatype, size, preMultiplyAlpha, flipY, initialized) {\n  this._gl = gl;\n  this._texture = texture;\n  this._textureTarget = textureTarget;\n  this._targetFace = targetFace;\n  this._pixelFormat = pixelFormat;\n  this._pixelDatatype = pixelDatatype;\n  this._size = size;\n  this._preMultiplyAlpha = preMultiplyAlpha;\n  this._flipY = flipY;\n  this._initialized = initialized;\n}\n\nObject.defineProperties(CubeMapFace.prototype, {\n  pixelFormat: {\n    get: function () {\n      return this._pixelFormat;\n    }\n  },\n  pixelDatatype: {\n    get: function () {\n      return this._pixelDatatype;\n    }\n  },\n  _target: {\n    get: function () {\n      return this._targetFace;\n    }\n  }\n});\n/**\n * Copies texels from the source to the cubemap's face.\n *\n * @param {Object} source The source ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement, or an object with a width, height, and typed array as shown in the example.\n * @param {Number} [xOffset=0] An offset in the x direction in the cubemap where copying begins.\n * @param {Number} [yOffset=0] An offset in the y direction in the cubemap where copying begins.\n *\n * @exception {DeveloperError} xOffset must be greater than or equal to zero.\n * @exception {DeveloperError} yOffset must be greater than or equal to zero.\n * @exception {DeveloperError} xOffset + source.width must be less than or equal to width.\n * @exception {DeveloperError} yOffset + source.height must be less than or equal to height.\n * @exception {DeveloperError} This CubeMap was destroyed, i.e., destroy() was called.\n *\n * @example\n * // Create a cubemap with 1x1 faces, and make the +x face red.\n * var cubeMap = new CubeMap({\n *   context : context\n *   width : 1,\n *   height : 1\n * });\n * cubeMap.positiveX.copyFrom({\n *   width : 1,\n *   height : 1,\n *   arrayBufferView : new Uint8Array([255, 0, 0, 255])\n * });\n */\n\nCubeMapFace.prototype.copyFrom = function (source, xOffset, yOffset) {\n  xOffset = defaultValue(xOffset, 0);\n  yOffset = defaultValue(yOffset, 0); //>>includeStart('debug', pragmas.debug);\n\n  Check.defined(\"source\", source);\n  Check.typeOf.number.greaterThanOrEquals(\"xOffset\", xOffset, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"yOffset\", yOffset, 0);\n\n  if (xOffset + source.width > this._size) {\n    throw new DeveloperError(\"xOffset + source.width must be less than or equal to width.\");\n  }\n\n  if (yOffset + source.height > this._size) {\n    throw new DeveloperError(\"yOffset + source.height must be less than or equal to height.\");\n  } //>>includeEnd('debug');\n\n\n  var gl = this._gl;\n  var target = this._textureTarget;\n  var targetFace = this._targetFace;\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(target, this._texture);\n  var width = source.width;\n  var height = source.height;\n  var arrayBufferView = source.arrayBufferView;\n  var size = this._size;\n  var pixelFormat = this._pixelFormat;\n  var pixelDatatype = this._pixelDatatype;\n  var preMultiplyAlpha = this._preMultiplyAlpha;\n  var flipY = this._flipY;\n  var unpackAlignment = 4;\n\n  if (defined(arrayBufferView)) {\n    unpackAlignment = PixelFormat.alignmentInBytes(pixelFormat, pixelDatatype, width);\n  }\n\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n  var uploaded = false;\n\n  if (!this._initialized) {\n    if (xOffset === 0 && yOffset === 0 && width === size && height === size) {\n      // initialize the entire texture\n      if (defined(arrayBufferView)) {\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        if (flipY) {\n          arrayBufferView = PixelFormat.flipY(arrayBufferView, pixelFormat, pixelDatatype, size, size);\n        }\n\n        gl.texImage2D(targetFace, 0, pixelFormat, size, size, 0, pixelFormat, pixelDatatype, arrayBufferView);\n      } else {\n        // Only valid for DOM-Element uploads\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, preMultiplyAlpha);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\n        gl.texImage2D(targetFace, 0, pixelFormat, pixelFormat, pixelDatatype, source);\n      }\n\n      uploaded = true;\n    } else {\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false); // initialize the entire texture to zero\n\n      var bufferView = PixelFormat.createTypedArray(pixelFormat, pixelDatatype, size, size);\n      gl.texImage2D(targetFace, 0, pixelFormat, size, size, 0, pixelFormat, pixelDatatype, bufferView);\n    }\n\n    this._initialized = true;\n  }\n\n  if (!uploaded) {\n    if (defined(arrayBufferView)) {\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\n      if (flipY) {\n        arrayBufferView = PixelFormat.flipY(arrayBufferView, pixelFormat, pixelDatatype, width, height);\n      }\n\n      gl.texSubImage2D(targetFace, 0, xOffset, yOffset, width, height, pixelFormat, pixelDatatype, arrayBufferView);\n    } else {\n      // Only valid for DOM-Element uploads\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, preMultiplyAlpha);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY); // Source: ImageData, HTMLImageElement, HTMLCanvasElement, or HTMLVideoElement\n\n      gl.texSubImage2D(targetFace, 0, xOffset, yOffset, pixelFormat, pixelDatatype, source);\n    }\n  }\n\n  gl.bindTexture(target, null);\n};\n/**\n * Copies texels from the framebuffer to the cubemap's face.\n *\n * @param {Number} [xOffset=0] An offset in the x direction in the cubemap where copying begins.\n * @param {Number} [yOffset=0] An offset in the y direction in the cubemap where copying begins.\n * @param {Number} [framebufferXOffset=0] An offset in the x direction in the framebuffer where copying begins from.\n * @param {Number} [framebufferYOffset=0] An offset in the y direction in the framebuffer where copying begins from.\n * @param {Number} [width=CubeMap's width] The width of the subimage to copy.\n * @param {Number} [height=CubeMap's height] The height of the subimage to copy.\n *\n * @exception {DeveloperError} Cannot call copyFromFramebuffer when the texture pixel data type is FLOAT.\n * @exception {DeveloperError} Cannot call copyFromFramebuffer when the texture pixel data type is HALF_FLOAT.\n * @exception {DeveloperError} This CubeMap was destroyed, i.e., destroy() was called.\n * @exception {DeveloperError} xOffset must be greater than or equal to zero.\n * @exception {DeveloperError} yOffset must be greater than or equal to zero.\n * @exception {DeveloperError} framebufferXOffset must be greater than or equal to zero.\n * @exception {DeveloperError} framebufferYOffset must be greater than or equal to zero.\n * @exception {DeveloperError} xOffset + source.width must be less than or equal to width.\n * @exception {DeveloperError} yOffset + source.height must be less than or equal to height.\n * @exception {DeveloperError} This CubeMap was destroyed, i.e., destroy() was called.\n *\n * @example\n * // Copy the framebuffer contents to the +x cube map face.\n * cubeMap.positiveX.copyFromFramebuffer();\n */\n\n\nCubeMapFace.prototype.copyFromFramebuffer = function (xOffset, yOffset, framebufferXOffset, framebufferYOffset, width, height) {\n  xOffset = defaultValue(xOffset, 0);\n  yOffset = defaultValue(yOffset, 0);\n  framebufferXOffset = defaultValue(framebufferXOffset, 0);\n  framebufferYOffset = defaultValue(framebufferYOffset, 0);\n  width = defaultValue(width, this._size);\n  height = defaultValue(height, this._size); //>>includeStart('debug', pragmas.debug);\n\n  Check.typeOf.number.greaterThanOrEquals(\"xOffset\", xOffset, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"yOffset\", yOffset, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"framebufferXOffset\", framebufferXOffset, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"framebufferYOffset\", framebufferYOffset, 0);\n\n  if (xOffset + width > this._size) {\n    throw new DeveloperError(\"xOffset + source.width must be less than or equal to width.\");\n  }\n\n  if (yOffset + height > this._size) {\n    throw new DeveloperError(\"yOffset + source.height must be less than or equal to height.\");\n  }\n\n  if (this._pixelDatatype === PixelDatatype.FLOAT) {\n    throw new DeveloperError(\"Cannot call copyFromFramebuffer when the texture pixel data type is FLOAT.\");\n  }\n\n  if (this._pixelDatatype === PixelDatatype.HALF_FLOAT) {\n    throw new DeveloperError(\"Cannot call copyFromFramebuffer when the texture pixel data type is HALF_FLOAT.\");\n  } //>>includeEnd('debug');\n\n\n  var gl = this._gl;\n  var target = this._textureTarget;\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(target, this._texture);\n  gl.copyTexSubImage2D(this._targetFace, 0, xOffset, yOffset, framebufferXOffset, framebufferYOffset, width, height);\n  gl.bindTexture(target, null);\n  this._initialized = true;\n};\n\nexport default CubeMapFace;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Renderer/CubeMapFace.js"],"names":["Check","defaultValue","defined","DeveloperError","PixelFormat","PixelDatatype","CubeMapFace","gl","texture","textureTarget","targetFace","pixelFormat","pixelDatatype","size","preMultiplyAlpha","flipY","initialized","_gl","_texture","_textureTarget","_targetFace","_pixelFormat","_pixelDatatype","_size","_preMultiplyAlpha","_flipY","_initialized","Object","defineProperties","prototype","get","_target","copyFrom","source","xOffset","yOffset","typeOf","number","greaterThanOrEquals","width","height","target","activeTexture","TEXTURE0","bindTexture","arrayBufferView","unpackAlignment","alignmentInBytes","pixelStorei","UNPACK_ALIGNMENT","uploaded","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_FLIP_Y_WEBGL","texImage2D","bufferView","createTypedArray","texSubImage2D","copyFromFramebuffer","framebufferXOffset","framebufferYOffset","FLOAT","HALF_FLOAT","copyTexSubImage2D"],"mappings":"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","sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport PixelDatatype from \"./PixelDatatype.js\";\n\n/**\n * @private\n */\nfunction CubeMapFace(\n  gl,\n  texture,\n  textureTarget,\n  targetFace,\n  pixelFormat,\n  pixelDatatype,\n  size,\n  preMultiplyAlpha,\n  flipY,\n  initialized\n) {\n  this._gl = gl;\n  this._texture = texture;\n  this._textureTarget = textureTarget;\n  this._targetFace = targetFace;\n  this._pixelFormat = pixelFormat;\n  this._pixelDatatype = pixelDatatype;\n  this._size = size;\n  this._preMultiplyAlpha = preMultiplyAlpha;\n  this._flipY = flipY;\n  this._initialized = initialized;\n}\n\nObject.defineProperties(CubeMapFace.prototype, {\n  pixelFormat: {\n    get: function () {\n      return this._pixelFormat;\n    },\n  },\n  pixelDatatype: {\n    get: function () {\n      return this._pixelDatatype;\n    },\n  },\n  _target: {\n    get: function () {\n      return this._targetFace;\n    },\n  },\n});\n\n/**\n * Copies texels from the source to the cubemap's face.\n *\n * @param {Object} source The source ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement, or an object with a width, height, and typed array as shown in the example.\n * @param {Number} [xOffset=0] An offset in the x direction in the cubemap where copying begins.\n * @param {Number} [yOffset=0] An offset in the y direction in the cubemap where copying begins.\n *\n * @exception {DeveloperError} xOffset must be greater than or equal to zero.\n * @exception {DeveloperError} yOffset must be greater than or equal to zero.\n * @exception {DeveloperError} xOffset + source.width must be less than or equal to width.\n * @exception {DeveloperError} yOffset + source.height must be less than or equal to height.\n * @exception {DeveloperError} This CubeMap was destroyed, i.e., destroy() was called.\n *\n * @example\n * // Create a cubemap with 1x1 faces, and make the +x face red.\n * var cubeMap = new CubeMap({\n *   context : context\n *   width : 1,\n *   height : 1\n * });\n * cubeMap.positiveX.copyFrom({\n *   width : 1,\n *   height : 1,\n *   arrayBufferView : new Uint8Array([255, 0, 0, 255])\n * });\n */\nCubeMapFace.prototype.copyFrom = function (source, xOffset, yOffset) {\n  xOffset = defaultValue(xOffset, 0);\n  yOffset = defaultValue(yOffset, 0);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"source\", source);\n  Check.typeOf.number.greaterThanOrEquals(\"xOffset\", xOffset, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"yOffset\", yOffset, 0);\n  if (xOffset + source.width > this._size) {\n    throw new DeveloperError(\n      \"xOffset + source.width must be less than or equal to width.\"\n    );\n  }\n  if (yOffset + source.height > this._size) {\n    throw new DeveloperError(\n      \"yOffset + source.height must be less than or equal to height.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var gl = this._gl;\n  var target = this._textureTarget;\n  var targetFace = this._targetFace;\n\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(target, this._texture);\n\n  var width = source.width;\n  var height = source.height;\n  var arrayBufferView = source.arrayBufferView;\n\n  var size = this._size;\n  var pixelFormat = this._pixelFormat;\n  var pixelDatatype = this._pixelDatatype;\n\n  var preMultiplyAlpha = this._preMultiplyAlpha;\n  var flipY = this._flipY;\n\n  var unpackAlignment = 4;\n  if (defined(arrayBufferView)) {\n    unpackAlignment = PixelFormat.alignmentInBytes(\n      pixelFormat,\n      pixelDatatype,\n      width\n    );\n  }\n\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n\n  var uploaded = false;\n  if (!this._initialized) {\n    if (xOffset === 0 && yOffset === 0 && width === size && height === size) {\n      // initialize the entire texture\n      if (defined(arrayBufferView)) {\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        if (flipY) {\n          arrayBufferView = PixelFormat.flipY(\n            arrayBufferView,\n            pixelFormat,\n            pixelDatatype,\n            size,\n            size\n          );\n        }\n        gl.texImage2D(\n          targetFace,\n          0,\n          pixelFormat,\n          size,\n          size,\n          0,\n          pixelFormat,\n          pixelDatatype,\n          arrayBufferView\n        );\n      } else {\n        // Only valid for DOM-Element uploads\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, preMultiplyAlpha);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\n\n        gl.texImage2D(\n          targetFace,\n          0,\n          pixelFormat,\n          pixelFormat,\n          pixelDatatype,\n          source\n        );\n      }\n      uploaded = true;\n    } else {\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\n      // initialize the entire texture to zero\n      var bufferView = PixelFormat.createTypedArray(\n        pixelFormat,\n        pixelDatatype,\n        size,\n        size\n      );\n      gl.texImage2D(\n        targetFace,\n        0,\n        pixelFormat,\n        size,\n        size,\n        0,\n        pixelFormat,\n        pixelDatatype,\n        bufferView\n      );\n    }\n    this._initialized = true;\n  }\n\n  if (!uploaded) {\n    if (defined(arrayBufferView)) {\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\n      if (flipY) {\n        arrayBufferView = PixelFormat.flipY(\n          arrayBufferView,\n          pixelFormat,\n          pixelDatatype,\n          width,\n          height\n        );\n      }\n      gl.texSubImage2D(\n        targetFace,\n        0,\n        xOffset,\n        yOffset,\n        width,\n        height,\n        pixelFormat,\n        pixelDatatype,\n        arrayBufferView\n      );\n    } else {\n      // Only valid for DOM-Element uploads\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, preMultiplyAlpha);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\n\n      // Source: ImageData, HTMLImageElement, HTMLCanvasElement, or HTMLVideoElement\n      gl.texSubImage2D(\n        targetFace,\n        0,\n        xOffset,\n        yOffset,\n        pixelFormat,\n        pixelDatatype,\n        source\n      );\n    }\n  }\n\n  gl.bindTexture(target, null);\n};\n\n/**\n * Copies texels from the framebuffer to the cubemap's face.\n *\n * @param {Number} [xOffset=0] An offset in the x direction in the cubemap where copying begins.\n * @param {Number} [yOffset=0] An offset in the y direction in the cubemap where copying begins.\n * @param {Number} [framebufferXOffset=0] An offset in the x direction in the framebuffer where copying begins from.\n * @param {Number} [framebufferYOffset=0] An offset in the y direction in the framebuffer where copying begins from.\n * @param {Number} [width=CubeMap's width] The width of the subimage to copy.\n * @param {Number} [height=CubeMap's height] The height of the subimage to copy.\n *\n * @exception {DeveloperError} Cannot call copyFromFramebuffer when the texture pixel data type is FLOAT.\n * @exception {DeveloperError} Cannot call copyFromFramebuffer when the texture pixel data type is HALF_FLOAT.\n * @exception {DeveloperError} This CubeMap was destroyed, i.e., destroy() was called.\n * @exception {DeveloperError} xOffset must be greater than or equal to zero.\n * @exception {DeveloperError} yOffset must be greater than or equal to zero.\n * @exception {DeveloperError} framebufferXOffset must be greater than or equal to zero.\n * @exception {DeveloperError} framebufferYOffset must be greater than or equal to zero.\n * @exception {DeveloperError} xOffset + source.width must be less than or equal to width.\n * @exception {DeveloperError} yOffset + source.height must be less than or equal to height.\n * @exception {DeveloperError} This CubeMap was destroyed, i.e., destroy() was called.\n *\n * @example\n * // Copy the framebuffer contents to the +x cube map face.\n * cubeMap.positiveX.copyFromFramebuffer();\n */\nCubeMapFace.prototype.copyFromFramebuffer = function (\n  xOffset,\n  yOffset,\n  framebufferXOffset,\n  framebufferYOffset,\n  width,\n  height\n) {\n  xOffset = defaultValue(xOffset, 0);\n  yOffset = defaultValue(yOffset, 0);\n  framebufferXOffset = defaultValue(framebufferXOffset, 0);\n  framebufferYOffset = defaultValue(framebufferYOffset, 0);\n  width = defaultValue(width, this._size);\n  height = defaultValue(height, this._size);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\"xOffset\", xOffset, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"yOffset\", yOffset, 0);\n  Check.typeOf.number.greaterThanOrEquals(\n    \"framebufferXOffset\",\n    framebufferXOffset,\n    0\n  );\n  Check.typeOf.number.greaterThanOrEquals(\n    \"framebufferYOffset\",\n    framebufferYOffset,\n    0\n  );\n  if (xOffset + width > this._size) {\n    throw new DeveloperError(\n      \"xOffset + source.width must be less than or equal to width.\"\n    );\n  }\n  if (yOffset + height > this._size) {\n    throw new DeveloperError(\n      \"yOffset + source.height must be less than or equal to height.\"\n    );\n  }\n  if (this._pixelDatatype === PixelDatatype.FLOAT) {\n    throw new DeveloperError(\n      \"Cannot call copyFromFramebuffer when the texture pixel data type is FLOAT.\"\n    );\n  }\n  if (this._pixelDatatype === PixelDatatype.HALF_FLOAT) {\n    throw new DeveloperError(\n      \"Cannot call copyFromFramebuffer when the texture pixel data type is HALF_FLOAT.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var gl = this._gl;\n  var target = this._textureTarget;\n\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(target, this._texture);\n  gl.copyTexSubImage2D(\n    this._targetFace,\n    0,\n    xOffset,\n    yOffset,\n    framebufferXOffset,\n    framebufferYOffset,\n    width,\n    height\n  );\n  gl.bindTexture(target, null);\n  this._initialized = true;\n};\nexport default CubeMapFace;\n"]},"metadata":{},"sourceType":"module"}