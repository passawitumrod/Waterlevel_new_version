{"ast":null,"code":"/**\n * Constants used by {@link Clock#tick} to determine behavior\n * when {@link Clock#startTime} or {@link Clock#stopTime} is reached.\n *\n * @exports ClockRange\n *\n * @see Clock\n * @see ClockStep\n */\nvar ClockRange = {\n  /**\n   * {@link Clock#tick} will always advances the clock in its current direction.\n   *\n   * @type {Number}\n   * @constant\n   */\n  UNBOUNDED: 0,\n\n  /**\n   * When {@link Clock#startTime} or {@link Clock#stopTime} is reached,\n   * {@link Clock#tick} will not advance {@link Clock#currentTime} any further.\n   *\n   * @type {Number}\n   * @constant\n   */\n  CLAMPED: 1,\n\n  /**\n   * When {@link Clock#stopTime} is reached, {@link Clock#tick} will advance\n   * {@link Clock#currentTime} to the opposite end of the interval.  When\n   * time is moving backwards, {@link Clock#tick} will not advance past\n   * {@link Clock#startTime}\n   *\n   * @type {Number}\n   * @constant\n   */\n  LOOP_STOP: 2\n};\nexport default Object.freeze(ClockRange);","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/ClockRange.js"],"names":["ClockRange","UNBOUNDED","CLAMPED","LOOP_STOP","Object","freeze"],"mappings":"AAAA;;;;;;;;;AASA,IAAIA,UAAU,GAAG;AACf;;;;;;AAMAC,EAAAA,SAAS,EAAE,CAPI;;AASf;;;;;;;AAOAC,EAAAA,OAAO,EAAE,CAhBM;;AAkBf;;;;;;;;;AASAC,EAAAA,SAAS,EAAE;AA3BI,CAAjB;AA6BA,eAAeC,MAAM,CAACC,MAAP,CAAcL,UAAd,CAAf","sourcesContent":["/**\n * Constants used by {@link Clock#tick} to determine behavior\n * when {@link Clock#startTime} or {@link Clock#stopTime} is reached.\n *\n * @exports ClockRange\n *\n * @see Clock\n * @see ClockStep\n */\nvar ClockRange = {\n  /**\n   * {@link Clock#tick} will always advances the clock in its current direction.\n   *\n   * @type {Number}\n   * @constant\n   */\n  UNBOUNDED: 0,\n\n  /**\n   * When {@link Clock#startTime} or {@link Clock#stopTime} is reached,\n   * {@link Clock#tick} will not advance {@link Clock#currentTime} any further.\n   *\n   * @type {Number}\n   * @constant\n   */\n  CLAMPED: 1,\n\n  /**\n   * When {@link Clock#stopTime} is reached, {@link Clock#tick} will advance\n   * {@link Clock#currentTime} to the opposite end of the interval.  When\n   * time is moving backwards, {@link Clock#tick} will not advance past\n   * {@link Clock#startTime}\n   *\n   * @type {Number}\n   * @constant\n   */\n  LOOP_STOP: 2,\n};\nexport default Object.freeze(ClockRange);\n"]},"metadata":{},"sourceType":"module"}