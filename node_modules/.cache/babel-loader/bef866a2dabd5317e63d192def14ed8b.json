{"ast":null,"code":"import defined from \"../Core/defined.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport sampleTerrainMostDetailed from \"../Core/sampleTerrainMostDetailed.js\";\nimport when from \"../ThirdParty/when.js\";\nimport SceneMode from \"./SceneMode.js\";\n/**\n * Computes the final camera location to view a rectangle adjusted for the current terrain.\n * If the terrain does not support availability, the height above the ellipsoid is used.\n *\n * @param {Rectangle} rectangle The rectangle being zoomed to.\n * @param {Scene} scene The scene being used.\n *\n * @returns {Cartographic} The optimal location to place the camera so that the entire rectangle is in view.\n *\n * @private\n */\n\nfunction computeFlyToLocationForRectangle(rectangle, scene) {\n  var terrainProvider = scene.terrainProvider;\n  var mapProjection = scene.mapProjection;\n  var ellipsoid = mapProjection.ellipsoid;\n  var positionWithoutTerrain;\n  var tmp = scene.camera.getRectangleCameraCoordinates(rectangle);\n\n  if (scene.mode === SceneMode.SCENE3D) {\n    positionWithoutTerrain = ellipsoid.cartesianToCartographic(tmp);\n  } else {\n    positionWithoutTerrain = mapProjection.unproject(tmp);\n  }\n\n  if (!defined(terrainProvider)) {\n    return when.resolve(positionWithoutTerrain);\n  }\n\n  return terrainProvider.readyPromise.then(function () {\n    var availability = terrainProvider.availability;\n\n    if (!defined(availability) || scene.mode === SceneMode.SCENE2D) {\n      return positionWithoutTerrain;\n    }\n\n    var cartographics = [Rectangle.center(rectangle), Rectangle.southeast(rectangle), Rectangle.southwest(rectangle), Rectangle.northeast(rectangle), Rectangle.northwest(rectangle)];\n    return computeFlyToLocationForRectangle._sampleTerrainMostDetailed(terrainProvider, cartographics).then(function (positionsOnTerrain) {\n      var maxHeight = positionsOnTerrain.reduce(function (currentMax, item) {\n        return Math.max(item.height, currentMax);\n      }, -Number.MAX_VALUE);\n      var finalPosition = positionWithoutTerrain;\n      finalPosition.height += maxHeight;\n      return finalPosition;\n    });\n  });\n} //Exposed for testing.\n\n\ncomputeFlyToLocationForRectangle._sampleTerrainMostDetailed = sampleTerrainMostDetailed;\nexport default computeFlyToLocationForRectangle;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/computeFlyToLocationForRectangle.js"],"names":["defined","Rectangle","sampleTerrainMostDetailed","when","SceneMode","computeFlyToLocationForRectangle","rectangle","scene","terrainProvider","mapProjection","ellipsoid","positionWithoutTerrain","tmp","camera","getRectangleCameraCoordinates","mode","SCENE3D","cartesianToCartographic","unproject","resolve","readyPromise","then","availability","SCENE2D","cartographics","center","southeast","southwest","northeast","northwest","_sampleTerrainMostDetailed","positionsOnTerrain","maxHeight","reduce","currentMax","item","Math","max","height","Number","MAX_VALUE","finalPosition"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,yBAAP,MAAsC,sCAAtC;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA;;;;;;;;;;;;AAWA,SAASC,gCAAT,CAA0CC,SAA1C,EAAqDC,KAArD,EAA4D;AAC1D,MAAIC,eAAe,GAAGD,KAAK,CAACC,eAA5B;AACA,MAAIC,aAAa,GAAGF,KAAK,CAACE,aAA1B;AACA,MAAIC,SAAS,GAAGD,aAAa,CAACC,SAA9B;AAEA,MAAIC,sBAAJ;AACA,MAAIC,GAAG,GAAGL,KAAK,CAACM,MAAN,CAAaC,6BAAb,CAA2CR,SAA3C,CAAV;;AACA,MAAIC,KAAK,CAACQ,IAAN,KAAeX,SAAS,CAACY,OAA7B,EAAsC;AACpCL,IAAAA,sBAAsB,GAAGD,SAAS,CAACO,uBAAV,CAAkCL,GAAlC,CAAzB;AACD,GAFD,MAEO;AACLD,IAAAA,sBAAsB,GAAGF,aAAa,CAACS,SAAd,CAAwBN,GAAxB,CAAzB;AACD;;AAED,MAAI,CAACZ,OAAO,CAACQ,eAAD,CAAZ,EAA+B;AAC7B,WAAOL,IAAI,CAACgB,OAAL,CAAaR,sBAAb,CAAP;AACD;;AAED,SAAOH,eAAe,CAACY,YAAhB,CAA6BC,IAA7B,CAAkC,YAAY;AACnD,QAAIC,YAAY,GAAGd,eAAe,CAACc,YAAnC;;AAEA,QAAI,CAACtB,OAAO,CAACsB,YAAD,CAAR,IAA0Bf,KAAK,CAACQ,IAAN,KAAeX,SAAS,CAACmB,OAAvD,EAAgE;AAC9D,aAAOZ,sBAAP;AACD;;AAED,QAAIa,aAAa,GAAG,CAClBvB,SAAS,CAACwB,MAAV,CAAiBnB,SAAjB,CADkB,EAElBL,SAAS,CAACyB,SAAV,CAAoBpB,SAApB,CAFkB,EAGlBL,SAAS,CAAC0B,SAAV,CAAoBrB,SAApB,CAHkB,EAIlBL,SAAS,CAAC2B,SAAV,CAAoBtB,SAApB,CAJkB,EAKlBL,SAAS,CAAC4B,SAAV,CAAoBvB,SAApB,CALkB,CAApB;AAQA,WAAOD,gCAAgC,CACpCyB,0BADI,CACuBtB,eADvB,EACwCgB,aADxC,EAEJH,IAFI,CAEC,UAAUU,kBAAV,EAA8B;AAClC,UAAIC,SAAS,GAAGD,kBAAkB,CAACE,MAAnB,CAA0B,UAAUC,UAAV,EAAsBC,IAAtB,EAA4B;AACpE,eAAOC,IAAI,CAACC,GAAL,CAASF,IAAI,CAACG,MAAd,EAAsBJ,UAAtB,CAAP;AACD,OAFe,EAEb,CAACK,MAAM,CAACC,SAFK,CAAhB;AAIA,UAAIC,aAAa,GAAG9B,sBAApB;AACA8B,MAAAA,aAAa,CAACH,MAAd,IAAwBN,SAAxB;AACA,aAAOS,aAAP;AACD,KAVI,CAAP;AAWD,GA1BM,CAAP;AA2BD,C,CAED;;;AACApC,gCAAgC,CAACyB,0BAAjC,GAA8D5B,yBAA9D;AACA,eAAeG,gCAAf","sourcesContent":["import defined from \"../Core/defined.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport sampleTerrainMostDetailed from \"../Core/sampleTerrainMostDetailed.js\";\nimport when from \"../ThirdParty/when.js\";\nimport SceneMode from \"./SceneMode.js\";\n\n/**\n * Computes the final camera location to view a rectangle adjusted for the current terrain.\n * If the terrain does not support availability, the height above the ellipsoid is used.\n *\n * @param {Rectangle} rectangle The rectangle being zoomed to.\n * @param {Scene} scene The scene being used.\n *\n * @returns {Cartographic} The optimal location to place the camera so that the entire rectangle is in view.\n *\n * @private\n */\nfunction computeFlyToLocationForRectangle(rectangle, scene) {\n  var terrainProvider = scene.terrainProvider;\n  var mapProjection = scene.mapProjection;\n  var ellipsoid = mapProjection.ellipsoid;\n\n  var positionWithoutTerrain;\n  var tmp = scene.camera.getRectangleCameraCoordinates(rectangle);\n  if (scene.mode === SceneMode.SCENE3D) {\n    positionWithoutTerrain = ellipsoid.cartesianToCartographic(tmp);\n  } else {\n    positionWithoutTerrain = mapProjection.unproject(tmp);\n  }\n\n  if (!defined(terrainProvider)) {\n    return when.resolve(positionWithoutTerrain);\n  }\n\n  return terrainProvider.readyPromise.then(function () {\n    var availability = terrainProvider.availability;\n\n    if (!defined(availability) || scene.mode === SceneMode.SCENE2D) {\n      return positionWithoutTerrain;\n    }\n\n    var cartographics = [\n      Rectangle.center(rectangle),\n      Rectangle.southeast(rectangle),\n      Rectangle.southwest(rectangle),\n      Rectangle.northeast(rectangle),\n      Rectangle.northwest(rectangle),\n    ];\n\n    return computeFlyToLocationForRectangle\n      ._sampleTerrainMostDetailed(terrainProvider, cartographics)\n      .then(function (positionsOnTerrain) {\n        var maxHeight = positionsOnTerrain.reduce(function (currentMax, item) {\n          return Math.max(item.height, currentMax);\n        }, -Number.MAX_VALUE);\n\n        var finalPosition = positionWithoutTerrain;\n        finalPosition.height += maxHeight;\n        return finalPosition;\n      });\n  });\n}\n\n//Exposed for testing.\ncomputeFlyToLocationForRectangle._sampleTerrainMostDetailed = sampleTerrainMostDetailed;\nexport default computeFlyToLocationForRectangle;\n"]},"metadata":{},"sourceType":"module"}