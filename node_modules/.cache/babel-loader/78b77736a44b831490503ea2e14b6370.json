{"ast":null,"code":"import BingMapsApi from \"../Core/BingMapsApi.js\";\nimport buildModuleUrl from \"../Core/buildModuleUrl.js\";\nimport Check from \"../Core/Check.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TileProviderError from \"../Core/TileProviderError.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport when from \"../ThirdParty/when.js\";\nimport BingMapsStyle from \"./BingMapsStyle.js\";\nimport DiscardEmptyTilePolicy from \"./DiscardEmptyTileImagePolicy.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\n/**\n * Provides tiled imagery using the Bing Maps Imagery REST API.\n *\n * @alias BingMapsImageryProvider\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource|String} options.url The url of the Bing Maps server hosting the imagery.\n * @param {String} [options.key] The Bing Maps key for your application, which can be\n *        created at {@link https://www.bingmapsportal.com/}.\n *        If this parameter is not provided, {@link BingMapsApi.defaultKey} is used, which is undefined by default.\n * @param {String} [options.tileProtocol] The protocol to use when loading tiles, e.g. 'http' or 'https'.\n *        By default, tiles are loaded using the same protocol as the page.\n * @param {BingMapsStyle} [options.mapStyle=BingMapsStyle.AERIAL] The type of Bing Maps imagery to load.\n * @param {String} [options.culture=''] The culture to use when requesting Bing Maps imagery. Not\n *        all cultures are supported. See {@link http://msdn.microsoft.com/en-us/library/hh441729.aspx}\n *        for information on the supported cultures.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n * @param {TileDiscardPolicy} [options.tileDiscardPolicy] The policy that determines if a tile\n *        is invalid and should be discarded.  By default, a {@link DiscardEmptyTileImagePolicy}\n *        will be used, with the expectation that the Bing Maps server will send a zero-length response for missing tiles.\n *        To ensure that no tiles are discarded, construct and pass a {@link NeverTileDiscardPolicy} for this parameter.\n *\n * @see ArcGisMapServerImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n *\n * @example\n * var bing = new Cesium.BingMapsImageryProvider({\n *     url : 'https://dev.virtualearth.net',\n *     key : 'get-yours-at-https://www.bingmapsportal.com/',\n *     mapStyle : Cesium.BingMapsStyle.AERIAL\n * });\n *\n * @see {@link http://msdn.microsoft.com/en-us/library/ff701713.aspx|Bing Maps REST Services}\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\n\nfunction BingMapsImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT); //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(options.url)) {\n    throw new DeveloperError(\"options.url is required.\");\n  } //>>includeEnd('debug');\n\n\n  this._key = BingMapsApi.getKey(options.key);\n  this._resource = Resource.createIfNeeded(options.url);\n\n  this._resource.appendForwardSlash();\n\n  this._tileProtocol = options.tileProtocol;\n  this._mapStyle = defaultValue(options.mapStyle, BingMapsStyle.AERIAL);\n  this._culture = defaultValue(options.culture, \"\");\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n\n  if (!defined(this._tileDiscardPolicy)) {\n    this._tileDiscardPolicy = new DiscardEmptyTilePolicy();\n  }\n\n  this._proxy = options.proxy;\n  this._credit = new Credit('<a href=\"http://www.bing.com\"><img src=\"' + BingMapsImageryProvider.logoUrl + '\" title=\"Bing Imagery\"/></a>');\n  /**\n   * The default {@link ImageryLayer#gamma} to use for imagery layers created for this provider.\n   * Changing this value after creating an {@link ImageryLayer} for this provider will have\n   * no effect.  Instead, set the layer's {@link ImageryLayer#gamma} property.\n   *\n   * @type {Number}\n   * @default 1.0\n   */\n\n  this.defaultGamma = 1.0;\n  this._tilingScheme = new WebMercatorTilingScheme({\n    numberOfLevelZeroTilesX: 2,\n    numberOfLevelZeroTilesY: 2,\n    ellipsoid: options.ellipsoid\n  });\n  this._tileWidth = undefined;\n  this._tileHeight = undefined;\n  this._maximumLevel = undefined;\n  this._imageUrlTemplate = undefined;\n  this._imageUrlSubdomains = undefined;\n  this._errorEvent = new Event();\n  this._ready = false;\n  this._readyPromise = when.defer();\n  var tileProtocol = this._tileProtocol; // For backward compatibility reasons, the tileProtocol may end with\n  // a `:`. Remove it.\n\n  if (defined(tileProtocol)) {\n    if (tileProtocol.length > 0 && tileProtocol[tileProtocol.length - 1] === \":\") {\n      tileProtocol = tileProtocol.substr(0, tileProtocol.length - 1);\n    }\n  } else {\n    // use http if the document's protocol is http, otherwise use https\n    var documentProtocol = document.location.protocol;\n    tileProtocol = documentProtocol === \"http:\" ? \"http\" : \"https\";\n  }\n\n  var metadataResource = this._resource.getDerivedResource({\n    url: \"REST/v1/Imagery/Metadata/\" + this._mapStyle,\n    queryParameters: {\n      incl: \"ImageryProviders\",\n      key: this._key,\n      uriScheme: tileProtocol\n    }\n  });\n\n  var that = this;\n  var metadataError;\n\n  function metadataSuccess(data) {\n    if (data.resourceSets.length !== 1) {\n      metadataFailure();\n      return;\n    }\n\n    var resource = data.resourceSets[0].resources[0];\n    that._tileWidth = resource.imageWidth;\n    that._tileHeight = resource.imageHeight;\n    that._maximumLevel = resource.zoomMax - 1;\n    that._imageUrlSubdomains = resource.imageUrlSubdomains;\n    that._imageUrlTemplate = resource.imageUrl;\n    var attributionList = that._attributionList = resource.imageryProviders;\n\n    if (!attributionList) {\n      attributionList = that._attributionList = [];\n    }\n\n    for (var attributionIndex = 0, attributionLength = attributionList.length; attributionIndex < attributionLength; ++attributionIndex) {\n      var attribution = attributionList[attributionIndex];\n\n      if (attribution.credit instanceof Credit) {\n        // If attribution.credit has already been created\n        // then we are using a cached value, which means\n        // none of the remaining processing needs to be done.\n        break;\n      }\n\n      attribution.credit = new Credit(attribution.attribution);\n      var coverageAreas = attribution.coverageAreas;\n\n      for (var areaIndex = 0, areaLength = attribution.coverageAreas.length; areaIndex < areaLength; ++areaIndex) {\n        var area = coverageAreas[areaIndex];\n        var bbox = area.bbox;\n        area.bbox = new Rectangle(CesiumMath.toRadians(bbox[1]), CesiumMath.toRadians(bbox[0]), CesiumMath.toRadians(bbox[3]), CesiumMath.toRadians(bbox[2]));\n      }\n    }\n\n    that._ready = true;\n\n    that._readyPromise.resolve(true);\n\n    TileProviderError.handleSuccess(metadataError);\n  }\n\n  function metadataFailure(e) {\n    var message = \"An error occurred while accessing \" + metadataResource.url + \".\";\n    metadataError = TileProviderError.handleError(metadataError, that, that._errorEvent, message, undefined, undefined, undefined, requestMetadata);\n\n    that._readyPromise.reject(new RuntimeError(message));\n  }\n\n  var cacheKey = metadataResource.url;\n\n  function requestMetadata() {\n    var promise = metadataResource.fetchJsonp(\"jsonp\");\n    BingMapsImageryProvider._metadataCache[cacheKey] = promise;\n    promise.then(metadataSuccess).otherwise(metadataFailure);\n  }\n\n  var promise = BingMapsImageryProvider._metadataCache[cacheKey];\n\n  if (defined(promise)) {\n    promise.then(metadataSuccess).otherwise(metadataFailure);\n  } else {\n    requestMetadata();\n  }\n}\n\nObject.defineProperties(BingMapsImageryProvider.prototype, {\n  /**\n   * Gets the name of the BingMaps server url hosting the imagery.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function get() {\n      return this._resource.url;\n    }\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function get() {\n      return this._resource.proxy;\n    }\n  },\n\n  /**\n   * Gets the Bing Maps key.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  key: {\n    get: function get() {\n      return this._key;\n    }\n  },\n\n  /**\n   * Gets the type of Bing Maps imagery to load.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {BingMapsStyle}\n   * @readonly\n   */\n  mapStyle: {\n    get: function get() {\n      return this._mapStyle;\n    }\n  },\n\n  /**\n   * The culture to use when requesting Bing Maps imagery. Not\n   * all cultures are supported. See {@link http://msdn.microsoft.com/en-us/library/hh441729.aspx}\n   * for information on the supported cultures.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  culture: {\n    get: function get() {\n      return this._culture;\n    }\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link BingMapsImageryProvider#ready} returns true.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function get() {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"tileWidth must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tileWidth;\n    }\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link BingMapsImageryProvider#ready} returns true.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function get() {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"tileHeight must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tileHeight;\n    }\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link BingMapsImageryProvider#ready} returns true.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function get() {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"maximumLevel must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._maximumLevel;\n    }\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link BingMapsImageryProvider#ready} returns true.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function get() {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"minimumLevel must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return 0;\n    }\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link BingMapsImageryProvider#ready} returns true.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function get() {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"tilingScheme must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tilingScheme;\n    }\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link BingMapsImageryProvider#ready} returns true.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function get() {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"rectangle must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tilingScheme.rectangle;\n    }\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link BingMapsImageryProvider#ready} returns true.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function get() {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"tileDiscardPolicy must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tileDiscardPolicy;\n    }\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function get() {\n      return this._errorEvent;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function get() {\n      return this._ready;\n    }\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function get() {\n      return this._readyPromise.promise;\n    }\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link BingMapsImageryProvider#ready} returns true.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function get() {\n      return this._credit;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  Setting this property to false reduces memory usage\n   * and texture upload time.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function get() {\n      return false;\n    }\n  }\n});\nvar rectangleScratch = new Rectangle();\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\n\nBingMapsImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this._ready) {\n    throw new DeveloperError(\"getTileCredits must not be called before the imagery provider is ready.\");\n  } //>>includeEnd('debug');\n\n\n  var rectangle = this._tilingScheme.tileXYToRectangle(x, y, level, rectangleScratch);\n\n  var result = getRectangleAttribution(this._attributionList, level, rectangle);\n  return result;\n};\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link BingMapsImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<Image|Canvas>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\n\n\nBingMapsImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this._ready) {\n    throw new DeveloperError(\"requestImage must not be called before the imagery provider is ready.\");\n  } //>>includeEnd('debug');\n\n\n  var promise = ImageryProvider.loadImage(this, buildImageResource(this, x, y, level, request));\n\n  if (defined(promise)) {\n    return promise.otherwise(function (error) {\n      // One cause of an error here is that the image we tried to load was zero-length.\n      // This isn't actually a problem, since it indicates that there is no tile.\n      // So, in that case we return the EMPTY_IMAGE sentinel value for later discarding.\n      if (defined(error.blob) && error.blob.size === 0) {\n        return DiscardEmptyTilePolicy.EMPTY_IMAGE;\n      }\n\n      return when.reject(error);\n    });\n  }\n\n  return undefined;\n};\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n */\n\n\nBingMapsImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  return undefined;\n};\n/**\n * Converts a tiles (x, y, level) position into a quadkey used to request an image\n * from a Bing Maps server.\n *\n * @param {Number} x The tile's x coordinate.\n * @param {Number} y The tile's y coordinate.\n * @param {Number} level The tile's zoom level.\n *\n * @see {@link http://msdn.microsoft.com/en-us/library/bb259689.aspx|Bing Maps Tile System}\n * @see BingMapsImageryProvider#quadKeyToTileXY\n */\n\n\nBingMapsImageryProvider.tileXYToQuadKey = function (x, y, level) {\n  var quadkey = \"\";\n\n  for (var i = level; i >= 0; --i) {\n    var bitmask = 1 << i;\n    var digit = 0;\n\n    if ((x & bitmask) !== 0) {\n      digit |= 1;\n    }\n\n    if ((y & bitmask) !== 0) {\n      digit |= 2;\n    }\n\n    quadkey += digit;\n  }\n\n  return quadkey;\n};\n/**\n * Converts a tile's quadkey used to request an image from a Bing Maps server into the\n * (x, y, level) position.\n *\n * @param {String} quadkey The tile's quad key\n *\n * @see {@link http://msdn.microsoft.com/en-us/library/bb259689.aspx|Bing Maps Tile System}\n * @see BingMapsImageryProvider#tileXYToQuadKey\n */\n\n\nBingMapsImageryProvider.quadKeyToTileXY = function (quadkey) {\n  var x = 0;\n  var y = 0;\n  var level = quadkey.length - 1;\n\n  for (var i = level; i >= 0; --i) {\n    var bitmask = 1 << i;\n    var digit = +quadkey[level - i];\n\n    if ((digit & 1) !== 0) {\n      x |= bitmask;\n    }\n\n    if ((digit & 2) !== 0) {\n      y |= bitmask;\n    }\n  }\n\n  return {\n    x: x,\n    y: y,\n    level: level\n  };\n};\n\nBingMapsImageryProvider._logoUrl = undefined;\nObject.defineProperties(BingMapsImageryProvider, {\n  /**\n   * Gets or sets the URL to the Bing logo for display in the credit.\n   * @memberof BingMapsImageryProvider\n   * @type {String}\n   */\n  logoUrl: {\n    get: function get() {\n      if (!defined(BingMapsImageryProvider._logoUrl)) {\n        BingMapsImageryProvider._logoUrl = buildModuleUrl(\"Assets/Images/bing_maps_credit.png\");\n      }\n\n      return BingMapsImageryProvider._logoUrl;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value); //>>includeEnd('debug');\n\n      BingMapsImageryProvider._logoUrl = value;\n    }\n  }\n});\n\nfunction buildImageResource(imageryProvider, x, y, level, request) {\n  var imageUrl = imageryProvider._imageUrlTemplate;\n  var subdomains = imageryProvider._imageUrlSubdomains;\n  var subdomainIndex = (x + y + level) % subdomains.length;\n  return imageryProvider._resource.getDerivedResource({\n    url: imageUrl,\n    request: request,\n    templateValues: {\n      quadkey: BingMapsImageryProvider.tileXYToQuadKey(x, y, level),\n      subdomain: subdomains[subdomainIndex],\n      culture: imageryProvider._culture\n    },\n    queryParameters: {\n      // this parameter tells the Bing servers to send a zero-length response\n      // instead of a placeholder image for missing tiles.\n      n: \"z\"\n    }\n  });\n}\n\nvar intersectionScratch = new Rectangle();\n\nfunction getRectangleAttribution(attributionList, level, rectangle) {\n  // Bing levels start at 1, while ours start at 0.\n  ++level;\n  var result = [];\n\n  for (var attributionIndex = 0, attributionLength = attributionList.length; attributionIndex < attributionLength; ++attributionIndex) {\n    var attribution = attributionList[attributionIndex];\n    var coverageAreas = attribution.coverageAreas;\n    var included = false;\n\n    for (var areaIndex = 0, areaLength = attribution.coverageAreas.length; !included && areaIndex < areaLength; ++areaIndex) {\n      var area = coverageAreas[areaIndex];\n\n      if (level >= area.zoomMin && level <= area.zoomMax) {\n        var intersection = Rectangle.intersection(rectangle, area.bbox, intersectionScratch);\n\n        if (defined(intersection)) {\n          included = true;\n        }\n      }\n    }\n\n    if (included) {\n      result.push(attribution.credit);\n    }\n  }\n\n  return result;\n} // Exposed for testing\n\n\nBingMapsImageryProvider._metadataCache = {};\nexport default BingMapsImageryProvider;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/BingMapsImageryProvider.js"],"names":["BingMapsApi","buildModuleUrl","Check","Credit","defaultValue","defined","DeveloperError","Event","CesiumMath","Rectangle","Resource","RuntimeError","TileProviderError","WebMercatorTilingScheme","when","BingMapsStyle","DiscardEmptyTilePolicy","ImageryProvider","BingMapsImageryProvider","options","EMPTY_OBJECT","url","_key","getKey","key","_resource","createIfNeeded","appendForwardSlash","_tileProtocol","tileProtocol","_mapStyle","mapStyle","AERIAL","_culture","culture","_tileDiscardPolicy","tileDiscardPolicy","_proxy","proxy","_credit","logoUrl","defaultGamma","_tilingScheme","numberOfLevelZeroTilesX","numberOfLevelZeroTilesY","ellipsoid","_tileWidth","undefined","_tileHeight","_maximumLevel","_imageUrlTemplate","_imageUrlSubdomains","_errorEvent","_ready","_readyPromise","defer","length","substr","documentProtocol","document","location","protocol","metadataResource","getDerivedResource","queryParameters","incl","uriScheme","that","metadataError","metadataSuccess","data","resourceSets","metadataFailure","resource","resources","imageWidth","imageHeight","zoomMax","imageUrlSubdomains","imageUrl","attributionList","_attributionList","imageryProviders","attributionIndex","attributionLength","attribution","credit","coverageAreas","areaIndex","areaLength","area","bbox","toRadians","resolve","handleSuccess","e","message","handleError","requestMetadata","reject","cacheKey","promise","fetchJsonp","_metadataCache","then","otherwise","Object","defineProperties","prototype","get","tileWidth","tileHeight","maximumLevel","minimumLevel","tilingScheme","rectangle","errorEvent","ready","readyPromise","hasAlphaChannel","rectangleScratch","getTileCredits","x","y","level","tileXYToRectangle","result","getRectangleAttribution","requestImage","request","loadImage","buildImageResource","error","blob","size","EMPTY_IMAGE","pickFeatures","longitude","latitude","tileXYToQuadKey","quadkey","i","bitmask","digit","quadKeyToTileXY","_logoUrl","set","value","imageryProvider","subdomains","subdomainIndex","templateValues","subdomain","n","intersectionScratch","included","zoomMin","intersection","push"],"mappings":"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","sourcesContent":["import BingMapsApi from \"../Core/BingMapsApi.js\";\nimport buildModuleUrl from \"../Core/buildModuleUrl.js\";\nimport Check from \"../Core/Check.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TileProviderError from \"../Core/TileProviderError.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport when from \"../ThirdParty/when.js\";\nimport BingMapsStyle from \"./BingMapsStyle.js\";\nimport DiscardEmptyTilePolicy from \"./DiscardEmptyTileImagePolicy.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\n\n/**\n * Provides tiled imagery using the Bing Maps Imagery REST API.\n *\n * @alias BingMapsImageryProvider\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource|String} options.url The url of the Bing Maps server hosting the imagery.\n * @param {String} [options.key] The Bing Maps key for your application, which can be\n *        created at {@link https://www.bingmapsportal.com/}.\n *        If this parameter is not provided, {@link BingMapsApi.defaultKey} is used, which is undefined by default.\n * @param {String} [options.tileProtocol] The protocol to use when loading tiles, e.g. 'http' or 'https'.\n *        By default, tiles are loaded using the same protocol as the page.\n * @param {BingMapsStyle} [options.mapStyle=BingMapsStyle.AERIAL] The type of Bing Maps imagery to load.\n * @param {String} [options.culture=''] The culture to use when requesting Bing Maps imagery. Not\n *        all cultures are supported. See {@link http://msdn.microsoft.com/en-us/library/hh441729.aspx}\n *        for information on the supported cultures.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n * @param {TileDiscardPolicy} [options.tileDiscardPolicy] The policy that determines if a tile\n *        is invalid and should be discarded.  By default, a {@link DiscardEmptyTileImagePolicy}\n *        will be used, with the expectation that the Bing Maps server will send a zero-length response for missing tiles.\n *        To ensure that no tiles are discarded, construct and pass a {@link NeverTileDiscardPolicy} for this parameter.\n *\n * @see ArcGisMapServerImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n *\n * @example\n * var bing = new Cesium.BingMapsImageryProvider({\n *     url : 'https://dev.virtualearth.net',\n *     key : 'get-yours-at-https://www.bingmapsportal.com/',\n *     mapStyle : Cesium.BingMapsStyle.AERIAL\n * });\n *\n * @see {@link http://msdn.microsoft.com/en-us/library/ff701713.aspx|Bing Maps REST Services}\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\nfunction BingMapsImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options.url)) {\n    throw new DeveloperError(\"options.url is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._key = BingMapsApi.getKey(options.key);\n  this._resource = Resource.createIfNeeded(options.url);\n  this._resource.appendForwardSlash();\n  this._tileProtocol = options.tileProtocol;\n  this._mapStyle = defaultValue(options.mapStyle, BingMapsStyle.AERIAL);\n  this._culture = defaultValue(options.culture, \"\");\n\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n  if (!defined(this._tileDiscardPolicy)) {\n    this._tileDiscardPolicy = new DiscardEmptyTilePolicy();\n  }\n\n  this._proxy = options.proxy;\n  this._credit = new Credit(\n    '<a href=\"http://www.bing.com\"><img src=\"' +\n      BingMapsImageryProvider.logoUrl +\n      '\" title=\"Bing Imagery\"/></a>'\n  );\n\n  /**\n   * The default {@link ImageryLayer#gamma} to use for imagery layers created for this provider.\n   * Changing this value after creating an {@link ImageryLayer} for this provider will have\n   * no effect.  Instead, set the layer's {@link ImageryLayer#gamma} property.\n   *\n   * @type {Number}\n   * @default 1.0\n   */\n  this.defaultGamma = 1.0;\n\n  this._tilingScheme = new WebMercatorTilingScheme({\n    numberOfLevelZeroTilesX: 2,\n    numberOfLevelZeroTilesY: 2,\n    ellipsoid: options.ellipsoid,\n  });\n\n  this._tileWidth = undefined;\n  this._tileHeight = undefined;\n  this._maximumLevel = undefined;\n  this._imageUrlTemplate = undefined;\n  this._imageUrlSubdomains = undefined;\n\n  this._errorEvent = new Event();\n\n  this._ready = false;\n  this._readyPromise = when.defer();\n\n  var tileProtocol = this._tileProtocol;\n\n  // For backward compatibility reasons, the tileProtocol may end with\n  // a `:`. Remove it.\n  if (defined(tileProtocol)) {\n    if (\n      tileProtocol.length > 0 &&\n      tileProtocol[tileProtocol.length - 1] === \":\"\n    ) {\n      tileProtocol = tileProtocol.substr(0, tileProtocol.length - 1);\n    }\n  } else {\n    // use http if the document's protocol is http, otherwise use https\n    var documentProtocol = document.location.protocol;\n    tileProtocol = documentProtocol === \"http:\" ? \"http\" : \"https\";\n  }\n\n  var metadataResource = this._resource.getDerivedResource({\n    url: \"REST/v1/Imagery/Metadata/\" + this._mapStyle,\n    queryParameters: {\n      incl: \"ImageryProviders\",\n      key: this._key,\n      uriScheme: tileProtocol,\n    },\n  });\n  var that = this;\n  var metadataError;\n\n  function metadataSuccess(data) {\n    if (data.resourceSets.length !== 1) {\n      metadataFailure();\n      return;\n    }\n    var resource = data.resourceSets[0].resources[0];\n\n    that._tileWidth = resource.imageWidth;\n    that._tileHeight = resource.imageHeight;\n    that._maximumLevel = resource.zoomMax - 1;\n    that._imageUrlSubdomains = resource.imageUrlSubdomains;\n    that._imageUrlTemplate = resource.imageUrl;\n\n    var attributionList = (that._attributionList = resource.imageryProviders);\n    if (!attributionList) {\n      attributionList = that._attributionList = [];\n    }\n\n    for (\n      var attributionIndex = 0, attributionLength = attributionList.length;\n      attributionIndex < attributionLength;\n      ++attributionIndex\n    ) {\n      var attribution = attributionList[attributionIndex];\n\n      if (attribution.credit instanceof Credit) {\n        // If attribution.credit has already been created\n        // then we are using a cached value, which means\n        // none of the remaining processing needs to be done.\n        break;\n      }\n\n      attribution.credit = new Credit(attribution.attribution);\n      var coverageAreas = attribution.coverageAreas;\n\n      for (\n        var areaIndex = 0, areaLength = attribution.coverageAreas.length;\n        areaIndex < areaLength;\n        ++areaIndex\n      ) {\n        var area = coverageAreas[areaIndex];\n        var bbox = area.bbox;\n        area.bbox = new Rectangle(\n          CesiumMath.toRadians(bbox[1]),\n          CesiumMath.toRadians(bbox[0]),\n          CesiumMath.toRadians(bbox[3]),\n          CesiumMath.toRadians(bbox[2])\n        );\n      }\n    }\n\n    that._ready = true;\n    that._readyPromise.resolve(true);\n    TileProviderError.handleSuccess(metadataError);\n  }\n\n  function metadataFailure(e) {\n    var message =\n      \"An error occurred while accessing \" + metadataResource.url + \".\";\n    metadataError = TileProviderError.handleError(\n      metadataError,\n      that,\n      that._errorEvent,\n      message,\n      undefined,\n      undefined,\n      undefined,\n      requestMetadata\n    );\n    that._readyPromise.reject(new RuntimeError(message));\n  }\n\n  var cacheKey = metadataResource.url;\n  function requestMetadata() {\n    var promise = metadataResource.fetchJsonp(\"jsonp\");\n    BingMapsImageryProvider._metadataCache[cacheKey] = promise;\n    promise.then(metadataSuccess).otherwise(metadataFailure);\n  }\n\n  var promise = BingMapsImageryProvider._metadataCache[cacheKey];\n  if (defined(promise)) {\n    promise.then(metadataSuccess).otherwise(metadataFailure);\n  } else {\n    requestMetadata();\n  }\n}\n\nObject.defineProperties(BingMapsImageryProvider.prototype, {\n  /**\n   * Gets the name of the BingMaps server url hosting the imagery.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource.url;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    },\n  },\n\n  /**\n   * Gets the Bing Maps key.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  key: {\n    get: function () {\n      return this._key;\n    },\n  },\n\n  /**\n   * Gets the type of Bing Maps imagery to load.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {BingMapsStyle}\n   * @readonly\n   */\n  mapStyle: {\n    get: function () {\n      return this._mapStyle;\n    },\n  },\n\n  /**\n   * The culture to use when requesting Bing Maps imagery. Not\n   * all cultures are supported. See {@link http://msdn.microsoft.com/en-us/library/hh441729.aspx}\n   * for information on the supported cultures.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  culture: {\n    get: function () {\n      return this._culture;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link BingMapsImageryProvider#ready} returns true.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tileWidth must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link BingMapsImageryProvider#ready} returns true.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tileHeight must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link BingMapsImageryProvider#ready} returns true.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"maximumLevel must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link BingMapsImageryProvider#ready} returns true.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"minimumLevel must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return 0;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link BingMapsImageryProvider#ready} returns true.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tilingScheme must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link BingMapsImageryProvider#ready} returns true.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"rectangle must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tilingScheme.rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link BingMapsImageryProvider#ready} returns true.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tileDiscardPolicy must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link BingMapsImageryProvider#ready} returns true.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  Setting this property to false reduces memory usage\n   * and texture upload time.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return false;\n    },\n  },\n});\n\nvar rectangleScratch = new Rectangle();\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\nBingMapsImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this._ready) {\n    throw new DeveloperError(\n      \"getTileCredits must not be called before the imagery provider is ready.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var rectangle = this._tilingScheme.tileXYToRectangle(\n    x,\n    y,\n    level,\n    rectangleScratch\n  );\n  var result = getRectangleAttribution(this._attributionList, level, rectangle);\n\n  return result;\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link BingMapsImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<Image|Canvas>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\nBingMapsImageryProvider.prototype.requestImage = function (\n  x,\n  y,\n  level,\n  request\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this._ready) {\n    throw new DeveloperError(\n      \"requestImage must not be called before the imagery provider is ready.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var promise = ImageryProvider.loadImage(\n    this,\n    buildImageResource(this, x, y, level, request)\n  );\n\n  if (defined(promise)) {\n    return promise.otherwise(function (error) {\n      // One cause of an error here is that the image we tried to load was zero-length.\n      // This isn't actually a problem, since it indicates that there is no tile.\n      // So, in that case we return the EMPTY_IMAGE sentinel value for later discarding.\n      if (defined(error.blob) && error.blob.size === 0) {\n        return DiscardEmptyTilePolicy.EMPTY_IMAGE;\n      }\n      return when.reject(error);\n    });\n  }\n\n  return undefined;\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n */\nBingMapsImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude\n) {\n  return undefined;\n};\n\n/**\n * Converts a tiles (x, y, level) position into a quadkey used to request an image\n * from a Bing Maps server.\n *\n * @param {Number} x The tile's x coordinate.\n * @param {Number} y The tile's y coordinate.\n * @param {Number} level The tile's zoom level.\n *\n * @see {@link http://msdn.microsoft.com/en-us/library/bb259689.aspx|Bing Maps Tile System}\n * @see BingMapsImageryProvider#quadKeyToTileXY\n */\nBingMapsImageryProvider.tileXYToQuadKey = function (x, y, level) {\n  var quadkey = \"\";\n  for (var i = level; i >= 0; --i) {\n    var bitmask = 1 << i;\n    var digit = 0;\n\n    if ((x & bitmask) !== 0) {\n      digit |= 1;\n    }\n\n    if ((y & bitmask) !== 0) {\n      digit |= 2;\n    }\n\n    quadkey += digit;\n  }\n  return quadkey;\n};\n\n/**\n * Converts a tile's quadkey used to request an image from a Bing Maps server into the\n * (x, y, level) position.\n *\n * @param {String} quadkey The tile's quad key\n *\n * @see {@link http://msdn.microsoft.com/en-us/library/bb259689.aspx|Bing Maps Tile System}\n * @see BingMapsImageryProvider#tileXYToQuadKey\n */\nBingMapsImageryProvider.quadKeyToTileXY = function (quadkey) {\n  var x = 0;\n  var y = 0;\n  var level = quadkey.length - 1;\n  for (var i = level; i >= 0; --i) {\n    var bitmask = 1 << i;\n    var digit = +quadkey[level - i];\n\n    if ((digit & 1) !== 0) {\n      x |= bitmask;\n    }\n\n    if ((digit & 2) !== 0) {\n      y |= bitmask;\n    }\n  }\n  return {\n    x: x,\n    y: y,\n    level: level,\n  };\n};\n\nBingMapsImageryProvider._logoUrl = undefined;\n\nObject.defineProperties(BingMapsImageryProvider, {\n  /**\n   * Gets or sets the URL to the Bing logo for display in the credit.\n   * @memberof BingMapsImageryProvider\n   * @type {String}\n   */\n  logoUrl: {\n    get: function () {\n      if (!defined(BingMapsImageryProvider._logoUrl)) {\n        BingMapsImageryProvider._logoUrl = buildModuleUrl(\n          \"Assets/Images/bing_maps_credit.png\"\n        );\n      }\n      return BingMapsImageryProvider._logoUrl;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n\n      BingMapsImageryProvider._logoUrl = value;\n    },\n  },\n});\n\nfunction buildImageResource(imageryProvider, x, y, level, request) {\n  var imageUrl = imageryProvider._imageUrlTemplate;\n\n  var subdomains = imageryProvider._imageUrlSubdomains;\n  var subdomainIndex = (x + y + level) % subdomains.length;\n\n  return imageryProvider._resource.getDerivedResource({\n    url: imageUrl,\n    request: request,\n    templateValues: {\n      quadkey: BingMapsImageryProvider.tileXYToQuadKey(x, y, level),\n      subdomain: subdomains[subdomainIndex],\n      culture: imageryProvider._culture,\n    },\n    queryParameters: {\n      // this parameter tells the Bing servers to send a zero-length response\n      // instead of a placeholder image for missing tiles.\n      n: \"z\",\n    },\n  });\n}\n\nvar intersectionScratch = new Rectangle();\n\nfunction getRectangleAttribution(attributionList, level, rectangle) {\n  // Bing levels start at 1, while ours start at 0.\n  ++level;\n\n  var result = [];\n\n  for (\n    var attributionIndex = 0, attributionLength = attributionList.length;\n    attributionIndex < attributionLength;\n    ++attributionIndex\n  ) {\n    var attribution = attributionList[attributionIndex];\n    var coverageAreas = attribution.coverageAreas;\n\n    var included = false;\n\n    for (\n      var areaIndex = 0, areaLength = attribution.coverageAreas.length;\n      !included && areaIndex < areaLength;\n      ++areaIndex\n    ) {\n      var area = coverageAreas[areaIndex];\n      if (level >= area.zoomMin && level <= area.zoomMax) {\n        var intersection = Rectangle.intersection(\n          rectangle,\n          area.bbox,\n          intersectionScratch\n        );\n        if (defined(intersection)) {\n          included = true;\n        }\n      }\n    }\n\n    if (included) {\n      result.push(attribution.credit);\n    }\n  }\n\n  return result;\n}\n\n// Exposed for testing\nBingMapsImageryProvider._metadataCache = {};\nexport default BingMapsImageryProvider;\n"]},"metadata":{},"sourceType":"module"}