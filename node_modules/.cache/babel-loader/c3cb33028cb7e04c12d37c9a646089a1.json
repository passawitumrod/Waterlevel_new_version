{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n/**\n * Describes a plane. The center position and orientation are determined by the containing {@link Entity}.\n *\n * @alias PlaneGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the plane.\n * @param {Property} [options.plane] A {@link Plane} Property specifying the normal and distance for the plane.\n * @param {Property} [options.dimensions] A {@link Cartesian2} Property specifying the width and height of the plane.\n * @param {Property} [options.fill=true] A boolean Property specifying whether the plane is filled with the provided material.\n * @param {MaterialProperty} [options.material=Color.WHITE] A Property specifying the material used to fill the plane.\n * @param {Property} [options.outline=false] A boolean Property specifying whether the plane is outlined.\n * @param {Property} [options.outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @param {Property} [options.outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @param {Property} [options.shadows=ShadowMode.DISABLED] An enum Property specifying whether the plane casts or receives shadows from light sources.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this plane will be displayed.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Plane.html|Cesium Sandcastle Plane Demo}\n */\n\nfunction PlaneGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._plane = undefined;\n  this._planeSubscription = undefined;\n  this._dimensions = undefined;\n  this._dimensionsSubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(PlaneGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof PlaneGraphics.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the plane.\n   * @memberof PlaneGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the {@link Plane} Property specifying the normal and distance of the plane.\n   *\n   * @memberof PlaneGraphics.prototype\n   * @type {Property}\n   */\n  plane: createPropertyDescriptor(\"plane\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the width and height of the plane.\n   *\n   * @memberof PlaneGraphics.prototype\n   * @type {Property}\n   */\n  dimensions: createPropertyDescriptor(\"dimensions\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the plane is filled with the provided material.\n   * @memberof PlaneGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the material used to fill the plane.\n   * @memberof PlaneGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the plane is outlined.\n   * @memberof PlaneGraphics.prototype\n   * @type {Property}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof PlaneGraphics.prototype\n   * @type {Property}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof PlaneGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the plane\n   * casts or receives shadows from light sources.\n   * @memberof PlaneGraphics.prototype\n   * @type {Property}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this plane will be displayed.\n   * @memberof PlaneGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\"distanceDisplayCondition\")\n});\n/**\n * Duplicates this instance.\n *\n * @param {PlaneGraphics} [result] The object onto which to store the result.\n * @returns {PlaneGraphics} The modified result parameter or a new instance if one was not provided.\n */\n\nPlaneGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new PlaneGraphics(this);\n  }\n\n  result.show = this.show;\n  result.plane = this.plane;\n  result.dimensions = this.dimensions;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  return result;\n};\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {PlaneGraphics} source The object to be merged into this object.\n */\n\n\nPlaneGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  } //>>includeEnd('debug');\n\n\n  this.show = defaultValue(this.show, source.show);\n  this.plane = defaultValue(this.plane, source.plane);\n  this.dimensions = defaultValue(this.dimensions, source.dimensions);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(this.distanceDisplayCondition, source.distanceDisplayCondition);\n};\n\nexport default PlaneGraphics;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/PlaneGraphics.js"],"names":["defaultValue","defined","DeveloperError","Event","createMaterialPropertyDescriptor","createPropertyDescriptor","PlaneGraphics","options","_definitionChanged","_show","undefined","_showSubscription","_plane","_planeSubscription","_dimensions","_dimensionsSubscription","_fill","_fillSubscription","_material","_materialSubscription","_outline","_outlineSubscription","_outlineColor","_outlineColorSubscription","_outlineWidth","_outlineWidthSubscription","_shadows","_shadowsSubscription","_distanceDisplayCondition","_distanceDisplayConditionSubscription","merge","EMPTY_OBJECT","Object","defineProperties","prototype","definitionChanged","get","show","plane","dimensions","fill","material","outline","outlineColor","outlineWidth","shadows","distanceDisplayCondition","clone","result","source"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * Describes a plane. The center position and orientation are determined by the containing {@link Entity}.\n *\n * @alias PlaneGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the plane.\n * @param {Property} [options.plane] A {@link Plane} Property specifying the normal and distance for the plane.\n * @param {Property} [options.dimensions] A {@link Cartesian2} Property specifying the width and height of the plane.\n * @param {Property} [options.fill=true] A boolean Property specifying whether the plane is filled with the provided material.\n * @param {MaterialProperty} [options.material=Color.WHITE] A Property specifying the material used to fill the plane.\n * @param {Property} [options.outline=false] A boolean Property specifying whether the plane is outlined.\n * @param {Property} [options.outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @param {Property} [options.outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @param {Property} [options.shadows=ShadowMode.DISABLED] An enum Property specifying whether the plane casts or receives shadows from light sources.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this plane will be displayed.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Plane.html|Cesium Sandcastle Plane Demo}\n */\nfunction PlaneGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._plane = undefined;\n  this._planeSubscription = undefined;\n  this._dimensions = undefined;\n  this._dimensionsSubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(PlaneGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof PlaneGraphics.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the plane.\n   * @memberof PlaneGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the {@link Plane} Property specifying the normal and distance of the plane.\n   *\n   * @memberof PlaneGraphics.prototype\n   * @type {Property}\n   */\n  plane: createPropertyDescriptor(\"plane\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the width and height of the plane.\n   *\n   * @memberof PlaneGraphics.prototype\n   * @type {Property}\n   */\n  dimensions: createPropertyDescriptor(\"dimensions\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the plane is filled with the provided material.\n   * @memberof PlaneGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the material used to fill the plane.\n   * @memberof PlaneGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the plane is outlined.\n   * @memberof PlaneGraphics.prototype\n   * @type {Property}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof PlaneGraphics.prototype\n   * @type {Property}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof PlaneGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the plane\n   * casts or receives shadows from light sources.\n   * @memberof PlaneGraphics.prototype\n   * @type {Property}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this plane will be displayed.\n   * @memberof PlaneGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {PlaneGraphics} [result] The object onto which to store the result.\n * @returns {PlaneGraphics} The modified result parameter or a new instance if one was not provided.\n */\nPlaneGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new PlaneGraphics(this);\n  }\n  result.show = this.show;\n  result.plane = this.plane;\n  result.dimensions = this.dimensions;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {PlaneGraphics} source The object to be merged into this object.\n */\nPlaneGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.plane = defaultValue(this.plane, source.plane);\n  this.dimensions = defaultValue(this.dimensions, source.dimensions);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n};\nexport default PlaneGraphics;\n"]},"metadata":{},"sourceType":"module"}