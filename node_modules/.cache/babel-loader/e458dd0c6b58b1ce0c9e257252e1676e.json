{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport getTimestamp from \"../Core/getTimestamp.js\";\nimport TimeConstants from \"../Core/TimeConstants.js\";\n/**\n * Monitors the frame rate (frames per second) in a {@link Scene} and raises an event if the frame rate is\n * lower than a threshold.  Later, if the frame rate returns to the required level, a separate event is raised.\n * To avoid creating multiple FrameRateMonitors for a single {@link Scene}, use {@link FrameRateMonitor.fromScene}\n * instead of constructing an instance explicitly.\n *\n * @alias FrameRateMonitor\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Scene} options.scene The Scene instance for which to monitor performance.\n * @param {Number} [options.samplingWindow=5.0] The length of the sliding window over which to compute the average frame rate, in seconds.\n * @param {Number} [options.quietPeriod=2.0] The length of time to wait at startup and each time the page becomes visible (i.e. when the user\n *        switches back to the tab) before starting to measure performance, in seconds.\n * @param {Number} [options.warmupPeriod=5.0] The length of the warmup period, in seconds.  During the warmup period, a separate\n *        (usually lower) frame rate is required.\n * @param {Number} [options.minimumFrameRateDuringWarmup=4] The minimum frames-per-second that are required for acceptable performance during\n *        the warmup period.  If the frame rate averages less than this during any samplingWindow during the warmupPeriod, the\n *        lowFrameRate event will be raised and the page will redirect to the redirectOnLowFrameRateUrl, if any.\n * @param {Number} [options.minimumFrameRateAfterWarmup=8] The minimum frames-per-second that are required for acceptable performance after\n *        the end of the warmup period.  If the frame rate averages less than this during any samplingWindow after the warmupPeriod, the\n *        lowFrameRate event will be raised and the page will redirect to the redirectOnLowFrameRateUrl, if any.\n */\n\nfunction FrameRateMonitor(options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options) || !defined(options.scene)) {\n    throw new DeveloperError(\"options.scene is required.\");\n  } //>>includeEnd('debug');\n\n\n  this._scene = options.scene;\n  /**\n   * Gets or sets the length of the sliding window over which to compute the average frame rate, in seconds.\n   * @type {Number}\n   */\n\n  this.samplingWindow = defaultValue(options.samplingWindow, FrameRateMonitor.defaultSettings.samplingWindow);\n  /**\n   * Gets or sets the length of time to wait at startup and each time the page becomes visible (i.e. when the user\n   * switches back to the tab) before starting to measure performance, in seconds.\n   * @type {Number}\n   */\n\n  this.quietPeriod = defaultValue(options.quietPeriod, FrameRateMonitor.defaultSettings.quietPeriod);\n  /**\n   * Gets or sets the length of the warmup period, in seconds.  During the warmup period, a separate\n   * (usually lower) frame rate is required.\n   * @type {Number}\n   */\n\n  this.warmupPeriod = defaultValue(options.warmupPeriod, FrameRateMonitor.defaultSettings.warmupPeriod);\n  /**\n   * Gets or sets the minimum frames-per-second that are required for acceptable performance during\n   * the warmup period.  If the frame rate averages less than this during any <code>samplingWindow</code> during the <code>warmupPeriod</code>, the\n   * <code>lowFrameRate</code> event will be raised and the page will redirect to the <code>redirectOnLowFrameRateUrl</code>, if any.\n   * @type {Number}\n   */\n\n  this.minimumFrameRateDuringWarmup = defaultValue(options.minimumFrameRateDuringWarmup, FrameRateMonitor.defaultSettings.minimumFrameRateDuringWarmup);\n  /**\n   * Gets or sets the minimum frames-per-second that are required for acceptable performance after\n   * the end of the warmup period.  If the frame rate averages less than this during any <code>samplingWindow</code> after the <code>warmupPeriod</code>, the\n   * <code>lowFrameRate</code> event will be raised and the page will redirect to the <code>redirectOnLowFrameRateUrl</code>, if any.\n   * @type {Number}\n   */\n\n  this.minimumFrameRateAfterWarmup = defaultValue(options.minimumFrameRateAfterWarmup, FrameRateMonitor.defaultSettings.minimumFrameRateAfterWarmup);\n  this._lowFrameRate = new Event();\n  this._nominalFrameRate = new Event();\n  this._frameTimes = [];\n  this._needsQuietPeriod = true;\n  this._quietPeriodEndTime = 0.0;\n  this._warmupPeriodEndTime = 0.0;\n  this._frameRateIsLow = false;\n  this._lastFramesPerSecond = undefined;\n  this._pauseCount = 0;\n  var that = this;\n  this._preUpdateRemoveListener = this._scene.preUpdate.addEventListener(function (scene, time) {\n    update(that, time);\n  });\n  this._hiddenPropertyName = document.hidden !== undefined ? \"hidden\" : document.mozHidden !== undefined ? \"mozHidden\" : document.msHidden !== undefined ? \"msHidden\" : document.webkitHidden !== undefined ? \"webkitHidden\" : undefined;\n  var visibilityChangeEventName = document.hidden !== undefined ? \"visibilitychange\" : document.mozHidden !== undefined ? \"mozvisibilitychange\" : document.msHidden !== undefined ? \"msvisibilitychange\" : document.webkitHidden !== undefined ? \"webkitvisibilitychange\" : undefined;\n\n  function visibilityChangeListener() {\n    visibilityChanged(that);\n  }\n\n  this._visibilityChangeRemoveListener = undefined;\n\n  if (defined(visibilityChangeEventName)) {\n    document.addEventListener(visibilityChangeEventName, visibilityChangeListener, false);\n\n    this._visibilityChangeRemoveListener = function () {\n      document.removeEventListener(visibilityChangeEventName, visibilityChangeListener, false);\n    };\n  }\n}\n/**\n * The default frame rate monitoring settings.  These settings are used when {@link FrameRateMonitor.fromScene}\n * needs to create a new frame rate monitor, and for any settings that are not passed to the\n * {@link FrameRateMonitor} constructor.\n *\n * @memberof FrameRateMonitor\n * @type {Object}\n */\n\n\nFrameRateMonitor.defaultSettings = {\n  samplingWindow: 5.0,\n  quietPeriod: 2.0,\n  warmupPeriod: 5.0,\n  minimumFrameRateDuringWarmup: 4,\n  minimumFrameRateAfterWarmup: 8\n};\n/**\n * Gets the {@link FrameRateMonitor} for a given scene.  If the scene does not yet have\n * a {@link FrameRateMonitor}, one is created with the {@link FrameRateMonitor.defaultSettings}.\n *\n * @param {Scene} scene The scene for which to get the {@link FrameRateMonitor}.\n * @returns {FrameRateMonitor} The scene's {@link FrameRateMonitor}.\n */\n\nFrameRateMonitor.fromScene = function (scene) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  } //>>includeEnd('debug');\n\n\n  if (!defined(scene._frameRateMonitor) || scene._frameRateMonitor.isDestroyed()) {\n    scene._frameRateMonitor = new FrameRateMonitor({\n      scene: scene\n    });\n  }\n\n  return scene._frameRateMonitor;\n};\n\nObject.defineProperties(FrameRateMonitor.prototype, {\n  /**\n   * Gets the {@link Scene} instance for which to monitor performance.\n   * @memberof FrameRateMonitor.prototype\n   * @type {Scene}\n   */\n  scene: {\n    get: function get() {\n      return this._scene;\n    }\n  },\n\n  /**\n   * Gets the event that is raised when a low frame rate is detected.  The function will be passed\n   * the {@link Scene} instance as its first parameter and the average number of frames per second\n   * over the sampling window as its second parameter.\n   * @memberof FrameRateMonitor.prototype\n   * @type {Event}\n   */\n  lowFrameRate: {\n    get: function get() {\n      return this._lowFrameRate;\n    }\n  },\n\n  /**\n   * Gets the event that is raised when the frame rate returns to a normal level after having been low.\n   * The function will be passed the {@link Scene} instance as its first parameter and the average\n   * number of frames per second over the sampling window as its second parameter.\n   * @memberof FrameRateMonitor.prototype\n   * @type {Event}\n   */\n  nominalFrameRate: {\n    get: function get() {\n      return this._nominalFrameRate;\n    }\n  },\n\n  /**\n   * Gets the most recently computed average frames-per-second over the last <code>samplingWindow</code>.\n   * This property may be undefined if the frame rate has not been computed.\n   * @memberof FrameRateMonitor.prototype\n   * @type {Number}\n   */\n  lastFramesPerSecond: {\n    get: function get() {\n      return this._lastFramesPerSecond;\n    }\n  }\n});\n/**\n * Pauses monitoring of the frame rate.  To resume monitoring, {@link FrameRateMonitor#unpause}\n * must be called once for each time this function is called.\n * @memberof FrameRateMonitor\n */\n\nFrameRateMonitor.prototype.pause = function () {\n  ++this._pauseCount;\n\n  if (this._pauseCount === 1) {\n    this._frameTimes.length = 0;\n    this._lastFramesPerSecond = undefined;\n  }\n};\n/**\n * Resumes monitoring of the frame rate.  If {@link FrameRateMonitor#pause} was called\n * multiple times, this function must be called the same number of times in order to\n * actually resume monitoring.\n * @memberof FrameRateMonitor\n */\n\n\nFrameRateMonitor.prototype.unpause = function () {\n  --this._pauseCount;\n\n  if (this._pauseCount <= 0) {\n    this._pauseCount = 0;\n    this._needsQuietPeriod = true;\n  }\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @memberof FrameRateMonitor\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see FrameRateMonitor#destroy\n */\n\n\nFrameRateMonitor.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Unsubscribes this instance from all events it is listening to.\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @memberof FrameRateMonitor\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see FrameRateMonitor#isDestroyed\n */\n\n\nFrameRateMonitor.prototype.destroy = function () {\n  this._preUpdateRemoveListener();\n\n  if (defined(this._visibilityChangeRemoveListener)) {\n    this._visibilityChangeRemoveListener();\n  }\n\n  return destroyObject(this);\n};\n\nfunction update(monitor, time) {\n  if (monitor._pauseCount > 0) {\n    return;\n  }\n\n  var timeStamp = getTimestamp();\n\n  if (monitor._needsQuietPeriod) {\n    monitor._needsQuietPeriod = false;\n    monitor._frameTimes.length = 0;\n    monitor._quietPeriodEndTime = timeStamp + monitor.quietPeriod / TimeConstants.SECONDS_PER_MILLISECOND;\n    monitor._warmupPeriodEndTime = monitor._quietPeriodEndTime + (monitor.warmupPeriod + monitor.samplingWindow) / TimeConstants.SECONDS_PER_MILLISECOND;\n  } else if (timeStamp >= monitor._quietPeriodEndTime) {\n    monitor._frameTimes.push(timeStamp);\n\n    var beginningOfWindow = timeStamp - monitor.samplingWindow / TimeConstants.SECONDS_PER_MILLISECOND;\n\n    if (monitor._frameTimes.length >= 2 && monitor._frameTimes[0] <= beginningOfWindow) {\n      while (monitor._frameTimes.length >= 2 && monitor._frameTimes[1] < beginningOfWindow) {\n        monitor._frameTimes.shift();\n      }\n\n      var averageTimeBetweenFrames = (timeStamp - monitor._frameTimes[0]) / (monitor._frameTimes.length - 1);\n      monitor._lastFramesPerSecond = 1000.0 / averageTimeBetweenFrames;\n      var maximumFrameTime = 1000.0 / (timeStamp > monitor._warmupPeriodEndTime ? monitor.minimumFrameRateAfterWarmup : monitor.minimumFrameRateDuringWarmup);\n\n      if (averageTimeBetweenFrames > maximumFrameTime) {\n        if (!monitor._frameRateIsLow) {\n          monitor._frameRateIsLow = true;\n          monitor._needsQuietPeriod = true;\n          monitor.lowFrameRate.raiseEvent(monitor.scene, monitor._lastFramesPerSecond);\n        }\n      } else if (monitor._frameRateIsLow) {\n        monitor._frameRateIsLow = false;\n        monitor._needsQuietPeriod = true;\n        monitor.nominalFrameRate.raiseEvent(monitor.scene, monitor._lastFramesPerSecond);\n      }\n    }\n  }\n}\n\nfunction visibilityChanged(monitor) {\n  if (document[monitor._hiddenPropertyName]) {\n    monitor.pause();\n  } else {\n    monitor.unpause();\n  }\n}\n\nexport default FrameRateMonitor;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/FrameRateMonitor.js"],"names":["defaultValue","defined","destroyObject","DeveloperError","Event","getTimestamp","TimeConstants","FrameRateMonitor","options","scene","_scene","samplingWindow","defaultSettings","quietPeriod","warmupPeriod","minimumFrameRateDuringWarmup","minimumFrameRateAfterWarmup","_lowFrameRate","_nominalFrameRate","_frameTimes","_needsQuietPeriod","_quietPeriodEndTime","_warmupPeriodEndTime","_frameRateIsLow","_lastFramesPerSecond","undefined","_pauseCount","that","_preUpdateRemoveListener","preUpdate","addEventListener","time","update","_hiddenPropertyName","document","hidden","mozHidden","msHidden","webkitHidden","visibilityChangeEventName","visibilityChangeListener","visibilityChanged","_visibilityChangeRemoveListener","removeEventListener","fromScene","_frameRateMonitor","isDestroyed","Object","defineProperties","prototype","get","lowFrameRate","nominalFrameRate","lastFramesPerSecond","pause","length","unpause","destroy","monitor","timeStamp","SECONDS_PER_MILLISECOND","push","beginningOfWindow","shift","averageTimeBetweenFrames","maximumFrameTime","raiseEvent"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport getTimestamp from \"../Core/getTimestamp.js\";\nimport TimeConstants from \"../Core/TimeConstants.js\";\n\n/**\n * Monitors the frame rate (frames per second) in a {@link Scene} and raises an event if the frame rate is\n * lower than a threshold.  Later, if the frame rate returns to the required level, a separate event is raised.\n * To avoid creating multiple FrameRateMonitors for a single {@link Scene}, use {@link FrameRateMonitor.fromScene}\n * instead of constructing an instance explicitly.\n *\n * @alias FrameRateMonitor\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Scene} options.scene The Scene instance for which to monitor performance.\n * @param {Number} [options.samplingWindow=5.0] The length of the sliding window over which to compute the average frame rate, in seconds.\n * @param {Number} [options.quietPeriod=2.0] The length of time to wait at startup and each time the page becomes visible (i.e. when the user\n *        switches back to the tab) before starting to measure performance, in seconds.\n * @param {Number} [options.warmupPeriod=5.0] The length of the warmup period, in seconds.  During the warmup period, a separate\n *        (usually lower) frame rate is required.\n * @param {Number} [options.minimumFrameRateDuringWarmup=4] The minimum frames-per-second that are required for acceptable performance during\n *        the warmup period.  If the frame rate averages less than this during any samplingWindow during the warmupPeriod, the\n *        lowFrameRate event will be raised and the page will redirect to the redirectOnLowFrameRateUrl, if any.\n * @param {Number} [options.minimumFrameRateAfterWarmup=8] The minimum frames-per-second that are required for acceptable performance after\n *        the end of the warmup period.  If the frame rate averages less than this during any samplingWindow after the warmupPeriod, the\n *        lowFrameRate event will be raised and the page will redirect to the redirectOnLowFrameRateUrl, if any.\n */\nfunction FrameRateMonitor(options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options) || !defined(options.scene)) {\n    throw new DeveloperError(\"options.scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._scene = options.scene;\n\n  /**\n   * Gets or sets the length of the sliding window over which to compute the average frame rate, in seconds.\n   * @type {Number}\n   */\n  this.samplingWindow = defaultValue(\n    options.samplingWindow,\n    FrameRateMonitor.defaultSettings.samplingWindow\n  );\n\n  /**\n   * Gets or sets the length of time to wait at startup and each time the page becomes visible (i.e. when the user\n   * switches back to the tab) before starting to measure performance, in seconds.\n   * @type {Number}\n   */\n  this.quietPeriod = defaultValue(\n    options.quietPeriod,\n    FrameRateMonitor.defaultSettings.quietPeriod\n  );\n\n  /**\n   * Gets or sets the length of the warmup period, in seconds.  During the warmup period, a separate\n   * (usually lower) frame rate is required.\n   * @type {Number}\n   */\n  this.warmupPeriod = defaultValue(\n    options.warmupPeriod,\n    FrameRateMonitor.defaultSettings.warmupPeriod\n  );\n\n  /**\n   * Gets or sets the minimum frames-per-second that are required for acceptable performance during\n   * the warmup period.  If the frame rate averages less than this during any <code>samplingWindow</code> during the <code>warmupPeriod</code>, the\n   * <code>lowFrameRate</code> event will be raised and the page will redirect to the <code>redirectOnLowFrameRateUrl</code>, if any.\n   * @type {Number}\n   */\n  this.minimumFrameRateDuringWarmup = defaultValue(\n    options.minimumFrameRateDuringWarmup,\n    FrameRateMonitor.defaultSettings.minimumFrameRateDuringWarmup\n  );\n\n  /**\n   * Gets or sets the minimum frames-per-second that are required for acceptable performance after\n   * the end of the warmup period.  If the frame rate averages less than this during any <code>samplingWindow</code> after the <code>warmupPeriod</code>, the\n   * <code>lowFrameRate</code> event will be raised and the page will redirect to the <code>redirectOnLowFrameRateUrl</code>, if any.\n   * @type {Number}\n   */\n  this.minimumFrameRateAfterWarmup = defaultValue(\n    options.minimumFrameRateAfterWarmup,\n    FrameRateMonitor.defaultSettings.minimumFrameRateAfterWarmup\n  );\n\n  this._lowFrameRate = new Event();\n  this._nominalFrameRate = new Event();\n\n  this._frameTimes = [];\n  this._needsQuietPeriod = true;\n  this._quietPeriodEndTime = 0.0;\n  this._warmupPeriodEndTime = 0.0;\n  this._frameRateIsLow = false;\n  this._lastFramesPerSecond = undefined;\n  this._pauseCount = 0;\n\n  var that = this;\n  this._preUpdateRemoveListener = this._scene.preUpdate.addEventListener(\n    function (scene, time) {\n      update(that, time);\n    }\n  );\n\n  this._hiddenPropertyName =\n    document.hidden !== undefined\n      ? \"hidden\"\n      : document.mozHidden !== undefined\n      ? \"mozHidden\"\n      : document.msHidden !== undefined\n      ? \"msHidden\"\n      : document.webkitHidden !== undefined\n      ? \"webkitHidden\"\n      : undefined;\n\n  var visibilityChangeEventName =\n    document.hidden !== undefined\n      ? \"visibilitychange\"\n      : document.mozHidden !== undefined\n      ? \"mozvisibilitychange\"\n      : document.msHidden !== undefined\n      ? \"msvisibilitychange\"\n      : document.webkitHidden !== undefined\n      ? \"webkitvisibilitychange\"\n      : undefined;\n\n  function visibilityChangeListener() {\n    visibilityChanged(that);\n  }\n\n  this._visibilityChangeRemoveListener = undefined;\n  if (defined(visibilityChangeEventName)) {\n    document.addEventListener(\n      visibilityChangeEventName,\n      visibilityChangeListener,\n      false\n    );\n\n    this._visibilityChangeRemoveListener = function () {\n      document.removeEventListener(\n        visibilityChangeEventName,\n        visibilityChangeListener,\n        false\n      );\n    };\n  }\n}\n\n/**\n * The default frame rate monitoring settings.  These settings are used when {@link FrameRateMonitor.fromScene}\n * needs to create a new frame rate monitor, and for any settings that are not passed to the\n * {@link FrameRateMonitor} constructor.\n *\n * @memberof FrameRateMonitor\n * @type {Object}\n */\nFrameRateMonitor.defaultSettings = {\n  samplingWindow: 5.0,\n  quietPeriod: 2.0,\n  warmupPeriod: 5.0,\n  minimumFrameRateDuringWarmup: 4,\n  minimumFrameRateAfterWarmup: 8,\n};\n\n/**\n * Gets the {@link FrameRateMonitor} for a given scene.  If the scene does not yet have\n * a {@link FrameRateMonitor}, one is created with the {@link FrameRateMonitor.defaultSettings}.\n *\n * @param {Scene} scene The scene for which to get the {@link FrameRateMonitor}.\n * @returns {FrameRateMonitor} The scene's {@link FrameRateMonitor}.\n */\nFrameRateMonitor.fromScene = function (scene) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (\n    !defined(scene._frameRateMonitor) ||\n    scene._frameRateMonitor.isDestroyed()\n  ) {\n    scene._frameRateMonitor = new FrameRateMonitor({\n      scene: scene,\n    });\n  }\n\n  return scene._frameRateMonitor;\n};\n\nObject.defineProperties(FrameRateMonitor.prototype, {\n  /**\n   * Gets the {@link Scene} instance for which to monitor performance.\n   * @memberof FrameRateMonitor.prototype\n   * @type {Scene}\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    },\n  },\n\n  /**\n   * Gets the event that is raised when a low frame rate is detected.  The function will be passed\n   * the {@link Scene} instance as its first parameter and the average number of frames per second\n   * over the sampling window as its second parameter.\n   * @memberof FrameRateMonitor.prototype\n   * @type {Event}\n   */\n  lowFrameRate: {\n    get: function () {\n      return this._lowFrameRate;\n    },\n  },\n\n  /**\n   * Gets the event that is raised when the frame rate returns to a normal level after having been low.\n   * The function will be passed the {@link Scene} instance as its first parameter and the average\n   * number of frames per second over the sampling window as its second parameter.\n   * @memberof FrameRateMonitor.prototype\n   * @type {Event}\n   */\n  nominalFrameRate: {\n    get: function () {\n      return this._nominalFrameRate;\n    },\n  },\n\n  /**\n   * Gets the most recently computed average frames-per-second over the last <code>samplingWindow</code>.\n   * This property may be undefined if the frame rate has not been computed.\n   * @memberof FrameRateMonitor.prototype\n   * @type {Number}\n   */\n  lastFramesPerSecond: {\n    get: function () {\n      return this._lastFramesPerSecond;\n    },\n  },\n});\n\n/**\n * Pauses monitoring of the frame rate.  To resume monitoring, {@link FrameRateMonitor#unpause}\n * must be called once for each time this function is called.\n * @memberof FrameRateMonitor\n */\nFrameRateMonitor.prototype.pause = function () {\n  ++this._pauseCount;\n  if (this._pauseCount === 1) {\n    this._frameTimes.length = 0;\n    this._lastFramesPerSecond = undefined;\n  }\n};\n\n/**\n * Resumes monitoring of the frame rate.  If {@link FrameRateMonitor#pause} was called\n * multiple times, this function must be called the same number of times in order to\n * actually resume monitoring.\n * @memberof FrameRateMonitor\n */\nFrameRateMonitor.prototype.unpause = function () {\n  --this._pauseCount;\n  if (this._pauseCount <= 0) {\n    this._pauseCount = 0;\n    this._needsQuietPeriod = true;\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @memberof FrameRateMonitor\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see FrameRateMonitor#destroy\n */\nFrameRateMonitor.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Unsubscribes this instance from all events it is listening to.\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @memberof FrameRateMonitor\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see FrameRateMonitor#isDestroyed\n */\nFrameRateMonitor.prototype.destroy = function () {\n  this._preUpdateRemoveListener();\n\n  if (defined(this._visibilityChangeRemoveListener)) {\n    this._visibilityChangeRemoveListener();\n  }\n\n  return destroyObject(this);\n};\n\nfunction update(monitor, time) {\n  if (monitor._pauseCount > 0) {\n    return;\n  }\n\n  var timeStamp = getTimestamp();\n\n  if (monitor._needsQuietPeriod) {\n    monitor._needsQuietPeriod = false;\n    monitor._frameTimes.length = 0;\n    monitor._quietPeriodEndTime =\n      timeStamp + monitor.quietPeriod / TimeConstants.SECONDS_PER_MILLISECOND;\n    monitor._warmupPeriodEndTime =\n      monitor._quietPeriodEndTime +\n      (monitor.warmupPeriod + monitor.samplingWindow) /\n        TimeConstants.SECONDS_PER_MILLISECOND;\n  } else if (timeStamp >= monitor._quietPeriodEndTime) {\n    monitor._frameTimes.push(timeStamp);\n\n    var beginningOfWindow =\n      timeStamp -\n      monitor.samplingWindow / TimeConstants.SECONDS_PER_MILLISECOND;\n\n    if (\n      monitor._frameTimes.length >= 2 &&\n      monitor._frameTimes[0] <= beginningOfWindow\n    ) {\n      while (\n        monitor._frameTimes.length >= 2 &&\n        monitor._frameTimes[1] < beginningOfWindow\n      ) {\n        monitor._frameTimes.shift();\n      }\n\n      var averageTimeBetweenFrames =\n        (timeStamp - monitor._frameTimes[0]) / (monitor._frameTimes.length - 1);\n\n      monitor._lastFramesPerSecond = 1000.0 / averageTimeBetweenFrames;\n\n      var maximumFrameTime =\n        1000.0 /\n        (timeStamp > monitor._warmupPeriodEndTime\n          ? monitor.minimumFrameRateAfterWarmup\n          : monitor.minimumFrameRateDuringWarmup);\n      if (averageTimeBetweenFrames > maximumFrameTime) {\n        if (!monitor._frameRateIsLow) {\n          monitor._frameRateIsLow = true;\n          monitor._needsQuietPeriod = true;\n          monitor.lowFrameRate.raiseEvent(\n            monitor.scene,\n            monitor._lastFramesPerSecond\n          );\n        }\n      } else if (monitor._frameRateIsLow) {\n        monitor._frameRateIsLow = false;\n        monitor._needsQuietPeriod = true;\n        monitor.nominalFrameRate.raiseEvent(\n          monitor.scene,\n          monitor._lastFramesPerSecond\n        );\n      }\n    }\n  }\n}\n\nfunction visibilityChanged(monitor) {\n  if (document[monitor._hiddenPropertyName]) {\n    monitor.pause();\n  } else {\n    monitor.unpause();\n  }\n}\nexport default FrameRateMonitor;\n"]},"metadata":{},"sourceType":"module"}