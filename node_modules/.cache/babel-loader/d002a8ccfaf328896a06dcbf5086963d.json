{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport combine from \"../Core/combine.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport IonResource from \"../Core/IonResource.js\";\nimport Cesium3DTileset from \"./Cesium3DTileset.js\";\nimport Cesium3DTileStyle from \"./Cesium3DTileStyle.js\";\n/**\n * Creates a {@link Cesium3DTileset} instance for the\n * {@link https://cesium.com/content/#cesium-osm-buildings|Cesium OSM Buildings}\n * tileset.\n *\n * @exports createOsmBuildings\n *\n * @param {Object} [options] Construction options. Any options allowed by the {@link Cesium3DTileset} constructor\n *        may be specified here. In addition to those, the following properties are supported:\n * @param {Color} [options.defaultColor=Color.WHITE] The default color to use for buildings\n *        that do not have a color. This parameter is ignored if `options.style` is specified.\n * @param {Cesium3DTileStyle} [options.style] The style to use with the tileset. If not\n *        specified, a default style is used which gives each building or building part a\n *        color inferred from its OpenStreetMap `tags`. If no color can be inferred,\n *        `options.defaultColor` is used.\n * @returns {Cesium3DTileset}\n *\n * @see Ion\n *\n * @example\n * // Create Cesium OSM Buildings with default styling\n * var viewer = new Cesium.Viewer('cesiumContainer');\n * viewer.scene.primitives.add(Cesium.createOsmBuildings());\n *\n * @example\n * // Create Cesium OSM Buildings with a custom style highlighting\n * // schools and hospitals.\n * viewer.scene.primitives.add(Cesium.createOsmBuildings({\n *   style: new Cesium.Cesium3DTileStyle({\n *     color: {\n *       conditions: [\n *         [\"${feature['building']} === 'hospital'\", \"color('#0000FF')\"],\n *         [\"${feature['building']} === 'school'\", \"color('#00FF00')\"],\n *         [true, \"color('#ffffff')\"]\n *       ]\n *     }\n *   })\n * }));\n */\n\nfunction createOsmBuildings(options) {\n  options = combine(options, {\n    url: IonResource.fromAssetId(96188)\n  });\n  var tileset = new Cesium3DTileset(options);\n  var style = options.style;\n\n  if (!defined(style)) {\n    var color = defaultValue(options.defaultColor, Color.WHITE).toCssColorString();\n    style = new Cesium3DTileStyle({\n      color: \"Boolean(${feature['cesium#color']}) ? color(${feature['cesium#color']}) : \" + color\n    });\n  }\n\n  tileset.style = style;\n  return tileset;\n}\n\nexport default createOsmBuildings;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/createOsmBuildings.js"],"names":["Color","combine","defaultValue","defined","IonResource","Cesium3DTileset","Cesium3DTileStyle","createOsmBuildings","options","url","fromAssetId","tileset","style","color","defaultColor","WHITE","toCssColorString"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,OAAOC,iBAAP,MAA8B,wBAA9B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,SAASC,kBAAT,CAA4BC,OAA5B,EAAqC;AACnCA,EAAAA,OAAO,GAAGP,OAAO,CAACO,OAAD,EAAU;AACzBC,IAAAA,GAAG,EAAEL,WAAW,CAACM,WAAZ,CAAwB,KAAxB;AADoB,GAAV,CAAjB;AAIA,MAAIC,OAAO,GAAG,IAAIN,eAAJ,CAAoBG,OAApB,CAAd;AAEA,MAAII,KAAK,GAAGJ,OAAO,CAACI,KAApB;;AAEA,MAAI,CAACT,OAAO,CAACS,KAAD,CAAZ,EAAqB;AACnB,QAAIC,KAAK,GAAGX,YAAY,CACtBM,OAAO,CAACM,YADc,EAEtBd,KAAK,CAACe,KAFgB,CAAZ,CAGVC,gBAHU,EAAZ;AAIAJ,IAAAA,KAAK,GAAG,IAAIN,iBAAJ,CAAsB;AAC5BO,MAAAA,KAAK,EACH,+EACAA;AAH0B,KAAtB,CAAR;AAKD;;AAEDF,EAAAA,OAAO,CAACC,KAAR,GAAgBA,KAAhB;AAEA,SAAOD,OAAP;AACD;;AAED,eAAeJ,kBAAf","sourcesContent":["import Color from \"../Core/Color.js\";\nimport combine from \"../Core/combine.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport IonResource from \"../Core/IonResource.js\";\nimport Cesium3DTileset from \"./Cesium3DTileset.js\";\nimport Cesium3DTileStyle from \"./Cesium3DTileStyle.js\";\n\n/**\n * Creates a {@link Cesium3DTileset} instance for the\n * {@link https://cesium.com/content/#cesium-osm-buildings|Cesium OSM Buildings}\n * tileset.\n *\n * @exports createOsmBuildings\n *\n * @param {Object} [options] Construction options. Any options allowed by the {@link Cesium3DTileset} constructor\n *        may be specified here. In addition to those, the following properties are supported:\n * @param {Color} [options.defaultColor=Color.WHITE] The default color to use for buildings\n *        that do not have a color. This parameter is ignored if `options.style` is specified.\n * @param {Cesium3DTileStyle} [options.style] The style to use with the tileset. If not\n *        specified, a default style is used which gives each building or building part a\n *        color inferred from its OpenStreetMap `tags`. If no color can be inferred,\n *        `options.defaultColor` is used.\n * @returns {Cesium3DTileset}\n *\n * @see Ion\n *\n * @example\n * // Create Cesium OSM Buildings with default styling\n * var viewer = new Cesium.Viewer('cesiumContainer');\n * viewer.scene.primitives.add(Cesium.createOsmBuildings());\n *\n * @example\n * // Create Cesium OSM Buildings with a custom style highlighting\n * // schools and hospitals.\n * viewer.scene.primitives.add(Cesium.createOsmBuildings({\n *   style: new Cesium.Cesium3DTileStyle({\n *     color: {\n *       conditions: [\n *         [\"${feature['building']} === 'hospital'\", \"color('#0000FF')\"],\n *         [\"${feature['building']} === 'school'\", \"color('#00FF00')\"],\n *         [true, \"color('#ffffff')\"]\n *       ]\n *     }\n *   })\n * }));\n */\nfunction createOsmBuildings(options) {\n  options = combine(options, {\n    url: IonResource.fromAssetId(96188),\n  });\n\n  var tileset = new Cesium3DTileset(options);\n\n  var style = options.style;\n\n  if (!defined(style)) {\n    var color = defaultValue(\n      options.defaultColor,\n      Color.WHITE\n    ).toCssColorString();\n    style = new Cesium3DTileStyle({\n      color:\n        \"Boolean(${feature['cesium#color']}) ? color(${feature['cesium#color']}) : \" +\n        color,\n    });\n  }\n\n  tileset.style = style;\n\n  return tileset;\n}\n\nexport default createOsmBuildings;\n"]},"metadata":{},"sourceType":"module"}