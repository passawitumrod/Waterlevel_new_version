{"ast":null,"code":"/**\n * Creates a {@link createBillboardPointCallback~CanvasFunction} that will create a canvas with a point.\n *\n * @param {Number} centerAlpha The alpha of the center of the point. The value must be in the range [0.0, 1.0].\n * @param {String} cssColor The CSS color string.\n * @param {String} cssOutlineColor The CSS color of the point outline.\n * @param {Number} cssOutlineWidth The width of the outline in pixels.\n * @param {Number} pixelSize The size of the point in pixels.\n * @return {createBillboardPointCallback~CanvasFunction} The function that will return a canvas with the point drawn on it.\n *\n * @private\n */\nfunction createBillboardPointCallback(centerAlpha, cssColor, cssOutlineColor, cssOutlineWidth, pixelSize) {\n  return function () {\n    var canvas = document.createElement(\"canvas\");\n    var length = pixelSize + 2 * cssOutlineWidth;\n    canvas.height = canvas.width = length;\n    var context2D = canvas.getContext(\"2d\");\n    context2D.clearRect(0, 0, length, length);\n\n    if (cssOutlineWidth !== 0) {\n      context2D.beginPath();\n      context2D.arc(length / 2, length / 2, length / 2, 0, 2 * Math.PI, true);\n      context2D.closePath();\n      context2D.fillStyle = cssOutlineColor;\n      context2D.fill(); // Punch a hole in the center if needed.\n\n      if (centerAlpha < 1.0) {\n        context2D.save();\n        context2D.globalCompositeOperation = \"destination-out\";\n        context2D.beginPath();\n        context2D.arc(length / 2, length / 2, pixelSize / 2, 0, 2 * Math.PI, true);\n        context2D.closePath();\n        context2D.fillStyle = \"black\";\n        context2D.fill();\n        context2D.restore();\n      }\n    }\n\n    context2D.beginPath();\n    context2D.arc(length / 2, length / 2, pixelSize / 2, 0, 2 * Math.PI, true);\n    context2D.closePath();\n    context2D.fillStyle = cssColor;\n    context2D.fill();\n    return canvas;\n  };\n}\n/**\n * A function that returns a canvas containing an image of a point.\n * @callback createBillboardPointCallback~CanvasFunction\n * @returns {HTMLCanvasElement} The result of the calculation.\n */\n\n\nexport default createBillboardPointCallback;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/createBillboardPointCallback.js"],"names":["createBillboardPointCallback","centerAlpha","cssColor","cssOutlineColor","cssOutlineWidth","pixelSize","canvas","document","createElement","length","height","width","context2D","getContext","clearRect","beginPath","arc","Math","PI","closePath","fillStyle","fill","save","globalCompositeOperation","restore"],"mappings":"AAAA;;;;;;;;;;;;AAYA,SAASA,4BAAT,CACEC,WADF,EAEEC,QAFF,EAGEC,eAHF,EAIEC,eAJF,EAKEC,SALF,EAME;AACA,SAAO,YAAY;AACjB,QAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AAEA,QAAIC,MAAM,GAAGJ,SAAS,GAAG,IAAID,eAA7B;AACAE,IAAAA,MAAM,CAACI,MAAP,GAAgBJ,MAAM,CAACK,KAAP,GAAeF,MAA/B;AAEA,QAAIG,SAAS,GAAGN,MAAM,CAACO,UAAP,CAAkB,IAAlB,CAAhB;AACAD,IAAAA,SAAS,CAACE,SAAV,CAAoB,CAApB,EAAuB,CAAvB,EAA0BL,MAA1B,EAAkCA,MAAlC;;AAEA,QAAIL,eAAe,KAAK,CAAxB,EAA2B;AACzBQ,MAAAA,SAAS,CAACG,SAAV;AACAH,MAAAA,SAAS,CAACI,GAAV,CAAcP,MAAM,GAAG,CAAvB,EAA0BA,MAAM,GAAG,CAAnC,EAAsCA,MAAM,GAAG,CAA/C,EAAkD,CAAlD,EAAqD,IAAIQ,IAAI,CAACC,EAA9D,EAAkE,IAAlE;AACAN,MAAAA,SAAS,CAACO,SAAV;AACAP,MAAAA,SAAS,CAACQ,SAAV,GAAsBjB,eAAtB;AACAS,MAAAA,SAAS,CAACS,IAAV,GALyB,CAMzB;;AACA,UAAIpB,WAAW,GAAG,GAAlB,EAAuB;AACrBW,QAAAA,SAAS,CAACU,IAAV;AACAV,QAAAA,SAAS,CAACW,wBAAV,GAAqC,iBAArC;AACAX,QAAAA,SAAS,CAACG,SAAV;AACAH,QAAAA,SAAS,CAACI,GAAV,CACEP,MAAM,GAAG,CADX,EAEEA,MAAM,GAAG,CAFX,EAGEJ,SAAS,GAAG,CAHd,EAIE,CAJF,EAKE,IAAIY,IAAI,CAACC,EALX,EAME,IANF;AAQAN,QAAAA,SAAS,CAACO,SAAV;AACAP,QAAAA,SAAS,CAACQ,SAAV,GAAsB,OAAtB;AACAR,QAAAA,SAAS,CAACS,IAAV;AACAT,QAAAA,SAAS,CAACY,OAAV;AACD;AACF;;AAEDZ,IAAAA,SAAS,CAACG,SAAV;AACAH,IAAAA,SAAS,CAACI,GAAV,CAAcP,MAAM,GAAG,CAAvB,EAA0BA,MAAM,GAAG,CAAnC,EAAsCJ,SAAS,GAAG,CAAlD,EAAqD,CAArD,EAAwD,IAAIY,IAAI,CAACC,EAAjE,EAAqE,IAArE;AACAN,IAAAA,SAAS,CAACO,SAAV;AACAP,IAAAA,SAAS,CAACQ,SAAV,GAAsBlB,QAAtB;AACAU,IAAAA,SAAS,CAACS,IAAV;AAEA,WAAOf,MAAP;AACD,GA1CD;AA2CD;AAED;;;;;;;AAKA,eAAeN,4BAAf","sourcesContent":["/**\n * Creates a {@link createBillboardPointCallback~CanvasFunction} that will create a canvas with a point.\n *\n * @param {Number} centerAlpha The alpha of the center of the point. The value must be in the range [0.0, 1.0].\n * @param {String} cssColor The CSS color string.\n * @param {String} cssOutlineColor The CSS color of the point outline.\n * @param {Number} cssOutlineWidth The width of the outline in pixels.\n * @param {Number} pixelSize The size of the point in pixels.\n * @return {createBillboardPointCallback~CanvasFunction} The function that will return a canvas with the point drawn on it.\n *\n * @private\n */\nfunction createBillboardPointCallback(\n  centerAlpha,\n  cssColor,\n  cssOutlineColor,\n  cssOutlineWidth,\n  pixelSize\n) {\n  return function () {\n    var canvas = document.createElement(\"canvas\");\n\n    var length = pixelSize + 2 * cssOutlineWidth;\n    canvas.height = canvas.width = length;\n\n    var context2D = canvas.getContext(\"2d\");\n    context2D.clearRect(0, 0, length, length);\n\n    if (cssOutlineWidth !== 0) {\n      context2D.beginPath();\n      context2D.arc(length / 2, length / 2, length / 2, 0, 2 * Math.PI, true);\n      context2D.closePath();\n      context2D.fillStyle = cssOutlineColor;\n      context2D.fill();\n      // Punch a hole in the center if needed.\n      if (centerAlpha < 1.0) {\n        context2D.save();\n        context2D.globalCompositeOperation = \"destination-out\";\n        context2D.beginPath();\n        context2D.arc(\n          length / 2,\n          length / 2,\n          pixelSize / 2,\n          0,\n          2 * Math.PI,\n          true\n        );\n        context2D.closePath();\n        context2D.fillStyle = \"black\";\n        context2D.fill();\n        context2D.restore();\n      }\n    }\n\n    context2D.beginPath();\n    context2D.arc(length / 2, length / 2, pixelSize / 2, 0, 2 * Math.PI, true);\n    context2D.closePath();\n    context2D.fillStyle = cssColor;\n    context2D.fill();\n\n    return canvas;\n  };\n}\n\n/**\n * A function that returns a canvas containing an image of a point.\n * @callback createBillboardPointCallback~CanvasFunction\n * @returns {HTMLCanvasElement} The result of the calculation.\n */\nexport default createBillboardPointCallback;\n"]},"metadata":{},"sourceType":"module"}