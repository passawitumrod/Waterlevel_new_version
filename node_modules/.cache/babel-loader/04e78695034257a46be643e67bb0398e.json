{"ast":null,"code":"import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport Property from \"./Property.js\";\n\nfunction resolve(that) {\n  var targetProperty = that._targetProperty;\n\n  if (!defined(targetProperty)) {\n    var targetEntity = that._targetEntity;\n\n    if (!defined(targetEntity)) {\n      targetEntity = that._targetCollection.getById(that._targetId);\n\n      if (!defined(targetEntity)) {\n        // target entity not found\n        that._targetEntity = that._targetProperty = undefined;\n        return;\n      } // target entity was found. listen for changes to entity definition\n\n\n      targetEntity.definitionChanged.addEventListener(ReferenceProperty.prototype._onTargetEntityDefinitionChanged, that);\n      that._targetEntity = targetEntity;\n    } // walk the list of property names and resolve properties\n\n\n    var targetPropertyNames = that._targetPropertyNames;\n    targetProperty = that._targetEntity;\n\n    for (var i = 0, len = targetPropertyNames.length; i < len && defined(targetProperty); ++i) {\n      targetProperty = targetProperty[targetPropertyNames[i]];\n    } // target property may or may not be defined, depending on if it was found\n\n\n    that._targetProperty = targetProperty;\n  }\n\n  return targetProperty;\n}\n/**\n * A {@link Property} which transparently links to another property on a provided object.\n *\n * @alias ReferenceProperty\n * @constructor\n *\n * @param {EntityCollection} targetCollection The entity collection which will be used to resolve the reference.\n * @param {String} targetId The id of the entity which is being referenced.\n * @param {String[]} targetPropertyNames The names of the property on the target entity which we will use.\n *\n * @example\n * var collection = new Cesium.EntityCollection();\n *\n * //Create a new entity and assign a billboard scale.\n * var object1 = new Cesium.Entity({id:'object1'});\n * object1.billboard = new Cesium.BillboardGraphics();\n * object1.billboard.scale = new Cesium.ConstantProperty(2.0);\n * collection.add(object1);\n *\n * //Create a second entity and reference the scale from the first one.\n * var object2 = new Cesium.Entity({id:'object2'});\n * object2.model = new Cesium.ModelGraphics();\n * object2.model.scale = new Cesium.ReferenceProperty(collection, 'object1', ['billboard', 'scale']);\n * collection.add(object2);\n *\n * //Create a third object, but use the fromString helper function.\n * var object3 = new Cesium.Entity({id:'object3'});\n * object3.billboard = new Cesium.BillboardGraphics();\n * object3.billboard.scale = Cesium.ReferenceProperty.fromString(collection, 'object1#billboard.scale');\n * collection.add(object3);\n *\n * //You can refer to an entity with a # or . in id and property names by escaping them.\n * var object4 = new Cesium.Entity({id:'#object.4'});\n * object4.billboard = new Cesium.BillboardGraphics();\n * object4.billboard.scale = new Cesium.ConstantProperty(2.0);\n * collection.add(object4);\n *\n * var object5 = new Cesium.Entity({id:'object5'});\n * object5.billboard = new Cesium.BillboardGraphics();\n * object5.billboard.scale = Cesium.ReferenceProperty.fromString(collection, '\\\\#object\\\\.4#billboard.scale');\n * collection.add(object5);\n */\n\n\nfunction ReferenceProperty(targetCollection, targetId, targetPropertyNames) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(targetCollection)) {\n    throw new DeveloperError(\"targetCollection is required.\");\n  }\n\n  if (!defined(targetId) || targetId === \"\") {\n    throw new DeveloperError(\"targetId is required.\");\n  }\n\n  if (!defined(targetPropertyNames) || targetPropertyNames.length === 0) {\n    throw new DeveloperError(\"targetPropertyNames is required.\");\n  }\n\n  for (var i = 0; i < targetPropertyNames.length; i++) {\n    var item = targetPropertyNames[i];\n\n    if (!defined(item) || item === \"\") {\n      throw new DeveloperError(\"reference contains invalid properties.\");\n    }\n  } //>>includeEnd('debug');\n\n\n  this._targetCollection = targetCollection;\n  this._targetId = targetId;\n  this._targetPropertyNames = targetPropertyNames;\n  this._targetProperty = undefined;\n  this._targetEntity = undefined;\n  this._definitionChanged = new Event();\n  targetCollection.collectionChanged.addEventListener(ReferenceProperty.prototype._onCollectionChanged, this);\n}\n\nObject.defineProperties(ReferenceProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * @memberof ReferenceProperty.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(resolve(this));\n    }\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever the referenced property's definition is changed.\n   * @memberof ReferenceProperty.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets the reference frame that the position is defined in.\n   * This property is only valid if the referenced property is a {@link PositionProperty}.\n   * @memberof ReferenceProperty.prototype\n   * @type {ReferenceFrame}\n   * @readonly\n   */\n  referenceFrame: {\n    get: function () {\n      var target = resolve(this);\n      return defined(target) ? target.referenceFrame : undefined;\n    }\n  },\n\n  /**\n   * Gets the id of the entity being referenced.\n   * @memberof ReferenceProperty.prototype\n   * @type {String}\n   * @readonly\n   */\n  targetId: {\n    get: function () {\n      return this._targetId;\n    }\n  },\n\n  /**\n   * Gets the collection containing the entity being referenced.\n   * @memberof ReferenceProperty.prototype\n   * @type {EntityCollection}\n   * @readonly\n   */\n  targetCollection: {\n    get: function () {\n      return this._targetCollection;\n    }\n  },\n\n  /**\n   * Gets the array of property names used to retrieve the referenced property.\n   * @memberof ReferenceProperty.prototype\n   * @type {String[]}\n   * @readonly\n   */\n  targetPropertyNames: {\n    get: function () {\n      return this._targetPropertyNames;\n    }\n  },\n\n  /**\n   * Gets the resolved instance of the underlying referenced property.\n   * @memberof ReferenceProperty.prototype\n   * @type {Property}\n   * @readonly\n   */\n  resolvedProperty: {\n    get: function () {\n      return resolve(this);\n    }\n  }\n});\n/**\n * Creates a new instance given the entity collection that will\n * be used to resolve it and a string indicating the target entity id and property.\n * The format of the string is \"objectId#foo.bar\", where # separates the id from\n * property path and . separates sub-properties.  If the reference identifier or\n * or any sub-properties contains a # . or \\ they must be escaped.\n *\n * @param {EntityCollection} targetCollection\n * @param {String} referenceString\n * @returns {ReferenceProperty} A new instance of ReferenceProperty.\n *\n * @exception {DeveloperError} invalid referenceString.\n */\n\nReferenceProperty.fromString = function (targetCollection, referenceString) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(targetCollection)) {\n    throw new DeveloperError(\"targetCollection is required.\");\n  }\n\n  if (!defined(referenceString)) {\n    throw new DeveloperError(\"referenceString is required.\");\n  } //>>includeEnd('debug');\n\n\n  var identifier;\n  var values = [];\n  var inIdentifier = true;\n  var isEscaped = false;\n  var token = \"\";\n\n  for (var i = 0; i < referenceString.length; ++i) {\n    var c = referenceString.charAt(i);\n\n    if (isEscaped) {\n      token += c;\n      isEscaped = false;\n    } else if (c === \"\\\\\") {\n      isEscaped = true;\n    } else if (inIdentifier && c === \"#\") {\n      identifier = token;\n      inIdentifier = false;\n      token = \"\";\n    } else if (!inIdentifier && c === \".\") {\n      values.push(token);\n      token = \"\";\n    } else {\n      token += c;\n    }\n  }\n\n  values.push(token);\n  return new ReferenceProperty(targetCollection, identifier, values);\n};\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\n\nReferenceProperty.prototype.getValue = function (time, result) {\n  var target = resolve(this);\n  return defined(target) ? target.getValue(time, result) : undefined;\n};\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n * This method is only valid if the property being referenced is a {@link PositionProperty}.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\n\nReferenceProperty.prototype.getValueInReferenceFrame = function (time, referenceFrame, result) {\n  var target = resolve(this);\n  return defined(target) ? target.getValueInReferenceFrame(time, referenceFrame, result) : undefined;\n};\n/**\n * Gets the {@link Material} type at the provided time.\n * This method is only valid if the property being referenced is a {@link MaterialProperty}.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\n\n\nReferenceProperty.prototype.getType = function (time) {\n  var target = resolve(this);\n  return defined(target) ? target.getType(time) : undefined;\n};\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nReferenceProperty.prototype.equals = function (other) {\n  if (this === other) {\n    return true;\n  }\n\n  var names = this._targetPropertyNames;\n  var otherNames = other._targetPropertyNames;\n\n  if (this._targetCollection !== other._targetCollection || //\n  this._targetId !== other._targetId || //\n  names.length !== otherNames.length) {\n    return false;\n  }\n\n  var length = this._targetPropertyNames.length;\n\n  for (var i = 0; i < length; i++) {\n    if (names[i] !== otherNames[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nReferenceProperty.prototype._onTargetEntityDefinitionChanged = function (targetEntity, name, value, oldValue) {\n  if (defined(this._targetProperty) && this._targetPropertyNames[0] === name) {\n    this._targetProperty = undefined;\n\n    this._definitionChanged.raiseEvent(this);\n  }\n};\n\nReferenceProperty.prototype._onCollectionChanged = function (collection, added, removed) {\n  var targetEntity = this._targetEntity;\n\n  if (defined(targetEntity) && removed.indexOf(targetEntity) !== -1) {\n    targetEntity.definitionChanged.removeEventListener(ReferenceProperty.prototype._onTargetEntityDefinitionChanged, this);\n    this._targetEntity = this._targetProperty = undefined;\n  } else if (!defined(targetEntity)) {\n    targetEntity = resolve(this);\n\n    if (defined(targetEntity)) {\n      this._definitionChanged.raiseEvent(this);\n    }\n  }\n};\n\nexport default ReferenceProperty;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/DataSources/ReferenceProperty.js"],"names":["defined","DeveloperError","Event","Property","resolve","that","targetProperty","_targetProperty","targetEntity","_targetEntity","_targetCollection","getById","_targetId","undefined","definitionChanged","addEventListener","ReferenceProperty","prototype","_onTargetEntityDefinitionChanged","targetPropertyNames","_targetPropertyNames","i","len","length","targetCollection","targetId","item","_definitionChanged","collectionChanged","_onCollectionChanged","Object","defineProperties","isConstant","get","referenceFrame","target","resolvedProperty","fromString","referenceString","identifier","values","inIdentifier","isEscaped","token","c","charAt","push","getValue","time","result","getValueInReferenceFrame","getType","equals","other","names","otherNames","name","value","oldValue","raiseEvent","collection","added","removed","indexOf","removeEventListener"],"mappings":"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","sourcesContent":["import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport Property from \"./Property.js\";\n\nfunction resolve(that) {\n  var targetProperty = that._targetProperty;\n\n  if (!defined(targetProperty)) {\n    var targetEntity = that._targetEntity;\n\n    if (!defined(targetEntity)) {\n      targetEntity = that._targetCollection.getById(that._targetId);\n\n      if (!defined(targetEntity)) {\n        // target entity not found\n        that._targetEntity = that._targetProperty = undefined;\n        return;\n      }\n\n      // target entity was found. listen for changes to entity definition\n      targetEntity.definitionChanged.addEventListener(\n        ReferenceProperty.prototype._onTargetEntityDefinitionChanged,\n        that\n      );\n      that._targetEntity = targetEntity;\n    }\n\n    // walk the list of property names and resolve properties\n    var targetPropertyNames = that._targetPropertyNames;\n    targetProperty = that._targetEntity;\n    for (\n      var i = 0, len = targetPropertyNames.length;\n      i < len && defined(targetProperty);\n      ++i\n    ) {\n      targetProperty = targetProperty[targetPropertyNames[i]];\n    }\n\n    // target property may or may not be defined, depending on if it was found\n    that._targetProperty = targetProperty;\n  }\n\n  return targetProperty;\n}\n\n/**\n * A {@link Property} which transparently links to another property on a provided object.\n *\n * @alias ReferenceProperty\n * @constructor\n *\n * @param {EntityCollection} targetCollection The entity collection which will be used to resolve the reference.\n * @param {String} targetId The id of the entity which is being referenced.\n * @param {String[]} targetPropertyNames The names of the property on the target entity which we will use.\n *\n * @example\n * var collection = new Cesium.EntityCollection();\n *\n * //Create a new entity and assign a billboard scale.\n * var object1 = new Cesium.Entity({id:'object1'});\n * object1.billboard = new Cesium.BillboardGraphics();\n * object1.billboard.scale = new Cesium.ConstantProperty(2.0);\n * collection.add(object1);\n *\n * //Create a second entity and reference the scale from the first one.\n * var object2 = new Cesium.Entity({id:'object2'});\n * object2.model = new Cesium.ModelGraphics();\n * object2.model.scale = new Cesium.ReferenceProperty(collection, 'object1', ['billboard', 'scale']);\n * collection.add(object2);\n *\n * //Create a third object, but use the fromString helper function.\n * var object3 = new Cesium.Entity({id:'object3'});\n * object3.billboard = new Cesium.BillboardGraphics();\n * object3.billboard.scale = Cesium.ReferenceProperty.fromString(collection, 'object1#billboard.scale');\n * collection.add(object3);\n *\n * //You can refer to an entity with a # or . in id and property names by escaping them.\n * var object4 = new Cesium.Entity({id:'#object.4'});\n * object4.billboard = new Cesium.BillboardGraphics();\n * object4.billboard.scale = new Cesium.ConstantProperty(2.0);\n * collection.add(object4);\n *\n * var object5 = new Cesium.Entity({id:'object5'});\n * object5.billboard = new Cesium.BillboardGraphics();\n * object5.billboard.scale = Cesium.ReferenceProperty.fromString(collection, '\\\\#object\\\\.4#billboard.scale');\n * collection.add(object5);\n */\nfunction ReferenceProperty(targetCollection, targetId, targetPropertyNames) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(targetCollection)) {\n    throw new DeveloperError(\"targetCollection is required.\");\n  }\n  if (!defined(targetId) || targetId === \"\") {\n    throw new DeveloperError(\"targetId is required.\");\n  }\n  if (!defined(targetPropertyNames) || targetPropertyNames.length === 0) {\n    throw new DeveloperError(\"targetPropertyNames is required.\");\n  }\n  for (var i = 0; i < targetPropertyNames.length; i++) {\n    var item = targetPropertyNames[i];\n    if (!defined(item) || item === \"\") {\n      throw new DeveloperError(\"reference contains invalid properties.\");\n    }\n  }\n  //>>includeEnd('debug');\n\n  this._targetCollection = targetCollection;\n  this._targetId = targetId;\n  this._targetPropertyNames = targetPropertyNames;\n  this._targetProperty = undefined;\n  this._targetEntity = undefined;\n  this._definitionChanged = new Event();\n\n  targetCollection.collectionChanged.addEventListener(\n    ReferenceProperty.prototype._onCollectionChanged,\n    this\n  );\n}\n\nObject.defineProperties(ReferenceProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * @memberof ReferenceProperty.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(resolve(this));\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever the referenced property's definition is changed.\n   * @memberof ReferenceProperty.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets the reference frame that the position is defined in.\n   * This property is only valid if the referenced property is a {@link PositionProperty}.\n   * @memberof ReferenceProperty.prototype\n   * @type {ReferenceFrame}\n   * @readonly\n   */\n  referenceFrame: {\n    get: function () {\n      var target = resolve(this);\n      return defined(target) ? target.referenceFrame : undefined;\n    },\n  },\n  /**\n   * Gets the id of the entity being referenced.\n   * @memberof ReferenceProperty.prototype\n   * @type {String}\n   * @readonly\n   */\n  targetId: {\n    get: function () {\n      return this._targetId;\n    },\n  },\n  /**\n   * Gets the collection containing the entity being referenced.\n   * @memberof ReferenceProperty.prototype\n   * @type {EntityCollection}\n   * @readonly\n   */\n  targetCollection: {\n    get: function () {\n      return this._targetCollection;\n    },\n  },\n  /**\n   * Gets the array of property names used to retrieve the referenced property.\n   * @memberof ReferenceProperty.prototype\n   * @type {String[]}\n   * @readonly\n   */\n  targetPropertyNames: {\n    get: function () {\n      return this._targetPropertyNames;\n    },\n  },\n  /**\n   * Gets the resolved instance of the underlying referenced property.\n   * @memberof ReferenceProperty.prototype\n   * @type {Property}\n   * @readonly\n   */\n  resolvedProperty: {\n    get: function () {\n      return resolve(this);\n    },\n  },\n});\n\n/**\n * Creates a new instance given the entity collection that will\n * be used to resolve it and a string indicating the target entity id and property.\n * The format of the string is \"objectId#foo.bar\", where # separates the id from\n * property path and . separates sub-properties.  If the reference identifier or\n * or any sub-properties contains a # . or \\ they must be escaped.\n *\n * @param {EntityCollection} targetCollection\n * @param {String} referenceString\n * @returns {ReferenceProperty} A new instance of ReferenceProperty.\n *\n * @exception {DeveloperError} invalid referenceString.\n */\nReferenceProperty.fromString = function (targetCollection, referenceString) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(targetCollection)) {\n    throw new DeveloperError(\"targetCollection is required.\");\n  }\n  if (!defined(referenceString)) {\n    throw new DeveloperError(\"referenceString is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var identifier;\n  var values = [];\n\n  var inIdentifier = true;\n  var isEscaped = false;\n  var token = \"\";\n  for (var i = 0; i < referenceString.length; ++i) {\n    var c = referenceString.charAt(i);\n\n    if (isEscaped) {\n      token += c;\n      isEscaped = false;\n    } else if (c === \"\\\\\") {\n      isEscaped = true;\n    } else if (inIdentifier && c === \"#\") {\n      identifier = token;\n      inIdentifier = false;\n      token = \"\";\n    } else if (!inIdentifier && c === \".\") {\n      values.push(token);\n      token = \"\";\n    } else {\n      token += c;\n    }\n  }\n  values.push(token);\n\n  return new ReferenceProperty(targetCollection, identifier, values);\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nReferenceProperty.prototype.getValue = function (time, result) {\n  var target = resolve(this);\n  return defined(target) ? target.getValue(time, result) : undefined;\n};\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n * This method is only valid if the property being referenced is a {@link PositionProperty}.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nReferenceProperty.prototype.getValueInReferenceFrame = function (\n  time,\n  referenceFrame,\n  result\n) {\n  var target = resolve(this);\n  return defined(target)\n    ? target.getValueInReferenceFrame(time, referenceFrame, result)\n    : undefined;\n};\n\n/**\n * Gets the {@link Material} type at the provided time.\n * This method is only valid if the property being referenced is a {@link MaterialProperty}.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nReferenceProperty.prototype.getType = function (time) {\n  var target = resolve(this);\n  return defined(target) ? target.getType(time) : undefined;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nReferenceProperty.prototype.equals = function (other) {\n  if (this === other) {\n    return true;\n  }\n\n  var names = this._targetPropertyNames;\n  var otherNames = other._targetPropertyNames;\n\n  if (\n    this._targetCollection !== other._targetCollection || //\n    this._targetId !== other._targetId || //\n    names.length !== otherNames.length\n  ) {\n    return false;\n  }\n\n  var length = this._targetPropertyNames.length;\n  for (var i = 0; i < length; i++) {\n    if (names[i] !== otherNames[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nReferenceProperty.prototype._onTargetEntityDefinitionChanged = function (\n  targetEntity,\n  name,\n  value,\n  oldValue\n) {\n  if (defined(this._targetProperty) && this._targetPropertyNames[0] === name) {\n    this._targetProperty = undefined;\n    this._definitionChanged.raiseEvent(this);\n  }\n};\n\nReferenceProperty.prototype._onCollectionChanged = function (\n  collection,\n  added,\n  removed\n) {\n  var targetEntity = this._targetEntity;\n  if (defined(targetEntity) && removed.indexOf(targetEntity) !== -1) {\n    targetEntity.definitionChanged.removeEventListener(\n      ReferenceProperty.prototype._onTargetEntityDefinitionChanged,\n      this\n    );\n    this._targetEntity = this._targetProperty = undefined;\n  } else if (!defined(targetEntity)) {\n    targetEntity = resolve(this);\n    if (defined(targetEntity)) {\n      this._definitionChanged.raiseEvent(this);\n    }\n  }\n};\nexport default ReferenceProperty;\n"]},"metadata":{},"sourceType":"module"}