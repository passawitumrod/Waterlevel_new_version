{"ast":null,"code":"import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\n/**\n * Merges two objects, copying their properties onto a new combined object. When two objects have the same\n * property, the value of the property on the first object is used.  If either object is undefined,\n * it will be treated as an empty object.\n *\n * @example\n * var object1 = {\n *     propOne : 1,\n *     propTwo : {\n *         value1 : 10\n *     }\n * }\n * var object2 = {\n *     propTwo : 2\n * }\n * var final = Cesium.combine(object1, object2);\n *\n * // final === {\n * //     propOne : 1,\n * //     propTwo : {\n * //         value1 : 10\n * //     }\n * // }\n *\n * @param {Object} [object1] The first object to merge.\n * @param {Object} [object2] The second object to merge.\n * @param {Boolean} [deep=false] Perform a recursive merge.\n * @returns {Object} The combined object containing all properties from both objects.\n *\n * @exports combine\n */\n\nfunction combine(object1, object2, deep) {\n  deep = defaultValue(deep, false);\n  var result = {};\n  var object1Defined = defined(object1);\n  var object2Defined = defined(object2);\n  var property;\n  var object1Value;\n  var object2Value;\n\n  if (object1Defined) {\n    for (property in object1) {\n      if (object1.hasOwnProperty(property)) {\n        object1Value = object1[property];\n\n        if (object2Defined && deep && typeof object1Value === \"object\" && object2.hasOwnProperty(property)) {\n          object2Value = object2[property];\n\n          if (typeof object2Value === \"object\") {\n            result[property] = combine(object1Value, object2Value, deep);\n          } else {\n            result[property] = object1Value;\n          }\n        } else {\n          result[property] = object1Value;\n        }\n      }\n    }\n  }\n\n  if (object2Defined) {\n    for (property in object2) {\n      if (object2.hasOwnProperty(property) && !result.hasOwnProperty(property)) {\n        object2Value = object2[property];\n        result[property] = object2Value;\n      }\n    }\n  }\n\n  return result;\n}\n\nexport default combine;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/combine.js"],"names":["defaultValue","defined","combine","object1","object2","deep","result","object1Defined","object2Defined","property","object1Value","object2Value","hasOwnProperty"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,cAApB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,SAASC,OAAT,CAAiBC,OAAjB,EAA0BC,OAA1B,EAAmCC,IAAnC,EAAyC;AACvCA,EAAAA,IAAI,GAAGL,YAAY,CAACK,IAAD,EAAO,KAAP,CAAnB;AAEA,MAAIC,MAAM,GAAG,EAAb;AAEA,MAAIC,cAAc,GAAGN,OAAO,CAACE,OAAD,CAA5B;AACA,MAAIK,cAAc,GAAGP,OAAO,CAACG,OAAD,CAA5B;AACA,MAAIK,QAAJ;AACA,MAAIC,YAAJ;AACA,MAAIC,YAAJ;;AACA,MAAIJ,cAAJ,EAAoB;AAClB,SAAKE,QAAL,IAAiBN,OAAjB,EAA0B;AACxB,UAAIA,OAAO,CAACS,cAAR,CAAuBH,QAAvB,CAAJ,EAAsC;AACpCC,QAAAA,YAAY,GAAGP,OAAO,CAACM,QAAD,CAAtB;;AACA,YACED,cAAc,IACdH,IADA,IAEA,OAAOK,YAAP,KAAwB,QAFxB,IAGAN,OAAO,CAACQ,cAAR,CAAuBH,QAAvB,CAJF,EAKE;AACAE,UAAAA,YAAY,GAAGP,OAAO,CAACK,QAAD,CAAtB;;AACA,cAAI,OAAOE,YAAP,KAAwB,QAA5B,EAAsC;AACpCL,YAAAA,MAAM,CAACG,QAAD,CAAN,GAAmBP,OAAO,CAACQ,YAAD,EAAeC,YAAf,EAA6BN,IAA7B,CAA1B;AACD,WAFD,MAEO;AACLC,YAAAA,MAAM,CAACG,QAAD,CAAN,GAAmBC,YAAnB;AACD;AACF,SAZD,MAYO;AACLJ,UAAAA,MAAM,CAACG,QAAD,CAAN,GAAmBC,YAAnB;AACD;AACF;AACF;AACF;;AACD,MAAIF,cAAJ,EAAoB;AAClB,SAAKC,QAAL,IAAiBL,OAAjB,EAA0B;AACxB,UACEA,OAAO,CAACQ,cAAR,CAAuBH,QAAvB,KACA,CAACH,MAAM,CAACM,cAAP,CAAsBH,QAAtB,CAFH,EAGE;AACAE,QAAAA,YAAY,GAAGP,OAAO,CAACK,QAAD,CAAtB;AACAH,QAAAA,MAAM,CAACG,QAAD,CAAN,GAAmBE,YAAnB;AACD;AACF;AACF;;AACD,SAAOL,MAAP;AACD;;AACD,eAAeJ,OAAf","sourcesContent":["import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\n\n/**\n * Merges two objects, copying their properties onto a new combined object. When two objects have the same\n * property, the value of the property on the first object is used.  If either object is undefined,\n * it will be treated as an empty object.\n *\n * @example\n * var object1 = {\n *     propOne : 1,\n *     propTwo : {\n *         value1 : 10\n *     }\n * }\n * var object2 = {\n *     propTwo : 2\n * }\n * var final = Cesium.combine(object1, object2);\n *\n * // final === {\n * //     propOne : 1,\n * //     propTwo : {\n * //         value1 : 10\n * //     }\n * // }\n *\n * @param {Object} [object1] The first object to merge.\n * @param {Object} [object2] The second object to merge.\n * @param {Boolean} [deep=false] Perform a recursive merge.\n * @returns {Object} The combined object containing all properties from both objects.\n *\n * @exports combine\n */\nfunction combine(object1, object2, deep) {\n  deep = defaultValue(deep, false);\n\n  var result = {};\n\n  var object1Defined = defined(object1);\n  var object2Defined = defined(object2);\n  var property;\n  var object1Value;\n  var object2Value;\n  if (object1Defined) {\n    for (property in object1) {\n      if (object1.hasOwnProperty(property)) {\n        object1Value = object1[property];\n        if (\n          object2Defined &&\n          deep &&\n          typeof object1Value === \"object\" &&\n          object2.hasOwnProperty(property)\n        ) {\n          object2Value = object2[property];\n          if (typeof object2Value === \"object\") {\n            result[property] = combine(object1Value, object2Value, deep);\n          } else {\n            result[property] = object1Value;\n          }\n        } else {\n          result[property] = object1Value;\n        }\n      }\n    }\n  }\n  if (object2Defined) {\n    for (property in object2) {\n      if (\n        object2.hasOwnProperty(property) &&\n        !result.hasOwnProperty(property)\n      ) {\n        object2Value = object2[property];\n        result[property] = object2Value;\n      }\n    }\n  }\n  return result;\n}\nexport default combine;\n"]},"metadata":{},"sourceType":"module"}