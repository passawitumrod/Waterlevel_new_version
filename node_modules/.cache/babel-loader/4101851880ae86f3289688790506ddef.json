{"ast":null,"code":"import knockout from \"../../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\n/**\n * The view model for {@link NavigationHelpButton}.\n * @alias NavigationHelpButtonViewModel\n * @constructor\n */\n\nfunction NavigationHelpButtonViewModel() {\n  /**\n   * Gets or sets whether the instructions are currently shown.  This property is observable.\n   * @type {Boolean}\n   * @default false\n   */\n  this.showInstructions = false;\n  var that = this;\n  this._command = createCommand(function () {\n    that.showInstructions = !that.showInstructions;\n  });\n  this._showClick = createCommand(function () {\n    that._touch = false;\n  });\n  this._showTouch = createCommand(function () {\n    that._touch = true;\n  });\n  this._touch = false;\n  /**\n   * Gets or sets the tooltip.  This property is observable.\n   *\n   * @type {String}\n   */\n\n  this.tooltip = \"Navigation Instructions\";\n  knockout.track(this, [\"tooltip\", \"showInstructions\", \"_touch\"]);\n}\n\nObject.defineProperties(NavigationHelpButtonViewModel.prototype, {\n  /**\n   * Gets the Command that is executed when the button is clicked.\n   * @memberof NavigationHelpButtonViewModel.prototype\n   *\n   * @type {Command}\n   */\n  command: {\n    get: function get() {\n      return this._command;\n    }\n  },\n\n  /**\n   * Gets the Command that is executed when the mouse instructions should be shown.\n   * @memberof NavigationHelpButtonViewModel.prototype\n   *\n   * @type {Command}\n   */\n  showClick: {\n    get: function get() {\n      return this._showClick;\n    }\n  },\n\n  /**\n   * Gets the Command that is executed when the touch instructions should be shown.\n   * @memberof NavigationHelpButtonViewModel.prototype\n   *\n   * @type {Command}\n   */\n  showTouch: {\n    get: function get() {\n      return this._showTouch;\n    }\n  }\n});\nexport default NavigationHelpButtonViewModel;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Widgets/NavigationHelpButton/NavigationHelpButtonViewModel.js"],"names":["knockout","createCommand","NavigationHelpButtonViewModel","showInstructions","that","_command","_showClick","_touch","_showTouch","tooltip","track","Object","defineProperties","prototype","command","get","showClick","showTouch"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,8BAArB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AAEA;;;;;;AAKA,SAASC,6BAAT,GAAyC;AACvC;;;;;AAKA,OAAKC,gBAAL,GAAwB,KAAxB;AAEA,MAAIC,IAAI,GAAG,IAAX;AACA,OAAKC,QAAL,GAAgBJ,aAAa,CAAC,YAAY;AACxCG,IAAAA,IAAI,CAACD,gBAAL,GAAwB,CAACC,IAAI,CAACD,gBAA9B;AACD,GAF4B,CAA7B;AAGA,OAAKG,UAAL,GAAkBL,aAAa,CAAC,YAAY;AAC1CG,IAAAA,IAAI,CAACG,MAAL,GAAc,KAAd;AACD,GAF8B,CAA/B;AAGA,OAAKC,UAAL,GAAkBP,aAAa,CAAC,YAAY;AAC1CG,IAAAA,IAAI,CAACG,MAAL,GAAc,IAAd;AACD,GAF8B,CAA/B;AAIA,OAAKA,MAAL,GAAc,KAAd;AAEA;;;;;;AAKA,OAAKE,OAAL,GAAe,yBAAf;AAEAT,EAAAA,QAAQ,CAACU,KAAT,CAAe,IAAf,EAAqB,CAAC,SAAD,EAAY,kBAAZ,EAAgC,QAAhC,CAArB;AACD;;AAEDC,MAAM,CAACC,gBAAP,CAAwBV,6BAA6B,CAACW,SAAtD,EAAiE;AAC/D;;;;;;AAMAC,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKV,QAAZ;AACD;AAHM,GAPsD;;AAa/D;;;;;;AAMAW,EAAAA,SAAS,EAAE;AACTD,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKT,UAAZ;AACD;AAHQ,GAnBoD;;AAyB/D;;;;;;AAMAW,EAAAA,SAAS,EAAE;AACTF,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKP,UAAZ;AACD;AAHQ;AA/BoD,CAAjE;AAqCA,eAAeN,6BAAf","sourcesContent":["import knockout from \"../../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\n\n/**\n * The view model for {@link NavigationHelpButton}.\n * @alias NavigationHelpButtonViewModel\n * @constructor\n */\nfunction NavigationHelpButtonViewModel() {\n  /**\n   * Gets or sets whether the instructions are currently shown.  This property is observable.\n   * @type {Boolean}\n   * @default false\n   */\n  this.showInstructions = false;\n\n  var that = this;\n  this._command = createCommand(function () {\n    that.showInstructions = !that.showInstructions;\n  });\n  this._showClick = createCommand(function () {\n    that._touch = false;\n  });\n  this._showTouch = createCommand(function () {\n    that._touch = true;\n  });\n\n  this._touch = false;\n\n  /**\n   * Gets or sets the tooltip.  This property is observable.\n   *\n   * @type {String}\n   */\n  this.tooltip = \"Navigation Instructions\";\n\n  knockout.track(this, [\"tooltip\", \"showInstructions\", \"_touch\"]);\n}\n\nObject.defineProperties(NavigationHelpButtonViewModel.prototype, {\n  /**\n   * Gets the Command that is executed when the button is clicked.\n   * @memberof NavigationHelpButtonViewModel.prototype\n   *\n   * @type {Command}\n   */\n  command: {\n    get: function () {\n      return this._command;\n    },\n  },\n\n  /**\n   * Gets the Command that is executed when the mouse instructions should be shown.\n   * @memberof NavigationHelpButtonViewModel.prototype\n   *\n   * @type {Command}\n   */\n  showClick: {\n    get: function () {\n      return this._showClick;\n    },\n  },\n\n  /**\n   * Gets the Command that is executed when the touch instructions should be shown.\n   * @memberof NavigationHelpButtonViewModel.prototype\n   *\n   * @type {Command}\n   */\n  showTouch: {\n    get: function () {\n      return this._showTouch;\n    },\n  },\n});\nexport default NavigationHelpButtonViewModel;\n"]},"metadata":{},"sourceType":"module"}