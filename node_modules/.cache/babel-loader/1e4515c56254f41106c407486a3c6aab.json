{"ast":null,"code":"import defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport destroyObject from \"../../Core/destroyObject.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport FrameRateMonitor from \"../../Scene/FrameRateMonitor.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\n/**\n * The view model for {@link PerformanceWatchdog}.\n *\n * @alias PerformanceWatchdogViewModel\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Scene} options.scene The Scene instance for which to monitor performance.\n * @param {String} [options.lowFrameRateMessage='This application appears to be performing poorly on your system.  Please try using a different web browser or updating your video drivers.'] The\n *        message to display when a low frame rate is detected.  The message is interpeted as HTML, so make sure\n *        it comes from a trusted source so that your application is not vulnerable to cross-site scripting attacks.\n */\n\nfunction PerformanceWatchdogViewModel(options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options) || !defined(options.scene)) {\n    throw new DeveloperError(\"options.scene is required.\");\n  } //>>includeEnd('debug');\n\n\n  this._scene = options.scene;\n  /**\n   * Gets or sets the message to display when a low frame rate is detected.  This string will be interpreted as HTML.\n   * @type {String}\n   */\n\n  this.lowFrameRateMessage = defaultValue(options.lowFrameRateMessage, \"This application appears to be performing poorly on your system.  Please try using a different web browser or updating your video drivers.\");\n  /**\n   * Gets or sets a value indicating whether the low frame rate message has previously been dismissed by the user.  If it has\n   * been dismissed, the message will not be redisplayed, no matter the frame rate.\n   * @type {Boolean}\n   */\n\n  this.lowFrameRateMessageDismissed = false;\n  /**\n   * Gets or sets a value indicating whether the low frame rate message is currently being displayed.\n   * @type {Boolean}\n   */\n\n  this.showingLowFrameRateMessage = false;\n  knockout.track(this, [\"lowFrameRateMessage\", \"lowFrameRateMessageDismissed\", \"showingLowFrameRateMessage\"]);\n  var that = this;\n  this._dismissMessage = createCommand(function () {\n    that.showingLowFrameRateMessage = false;\n    that.lowFrameRateMessageDismissed = true;\n  });\n  var monitor = FrameRateMonitor.fromScene(options.scene);\n  this._unsubscribeLowFrameRate = monitor.lowFrameRate.addEventListener(function () {\n    if (!that.lowFrameRateMessageDismissed) {\n      that.showingLowFrameRateMessage = true;\n    }\n  });\n  this._unsubscribeNominalFrameRate = monitor.nominalFrameRate.addEventListener(function () {\n    that.showingLowFrameRateMessage = false;\n  });\n}\n\nObject.defineProperties(PerformanceWatchdogViewModel.prototype, {\n  /**\n   * Gets the {@link Scene} instance for which to monitor performance.\n   * @memberof PerformanceWatchdogViewModel.prototype\n   * @type {Scene}\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    }\n  },\n\n  /**\n   * Gets a command that dismisses the low frame rate message.  Once it is dismissed, the message\n   * will not be redisplayed.\n   * @memberof PerformanceWatchdogViewModel.prototype\n   * @type {Command}\n   */\n  dismissMessage: {\n    get: function () {\n      return this._dismissMessage;\n    }\n  }\n});\n\nPerformanceWatchdogViewModel.prototype.destroy = function () {\n  this._unsubscribeLowFrameRate();\n\n  this._unsubscribeNominalFrameRate();\n\n  return destroyObject(this);\n};\n\nexport default PerformanceWatchdogViewModel;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Widgets/PerformanceWatchdog/PerformanceWatchdogViewModel.js"],"names":["defaultValue","defined","destroyObject","DeveloperError","FrameRateMonitor","knockout","createCommand","PerformanceWatchdogViewModel","options","scene","_scene","lowFrameRateMessage","lowFrameRateMessageDismissed","showingLowFrameRateMessage","track","that","_dismissMessage","monitor","fromScene","_unsubscribeLowFrameRate","lowFrameRate","addEventListener","_unsubscribeNominalFrameRate","nominalFrameRate","Object","defineProperties","prototype","get","dismissMessage","destroy"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,4BAAzB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AAEA;;;;;;;;;;;;;AAYA,SAASC,4BAAT,CAAsCC,OAAtC,EAA+C;AAC7C;AACA,MAAI,CAACP,OAAO,CAACO,OAAD,CAAR,IAAqB,CAACP,OAAO,CAACO,OAAO,CAACC,KAAT,CAAjC,EAAkD;AAChD,UAAM,IAAIN,cAAJ,CAAmB,4BAAnB,CAAN;AACD,GAJ4C,CAK7C;;;AAEA,OAAKO,MAAL,GAAcF,OAAO,CAACC,KAAtB;AAEA;;;;;AAIA,OAAKE,mBAAL,GAA2BX,YAAY,CACrCQ,OAAO,CAACG,mBAD6B,EAErC,4IAFqC,CAAvC;AAKA;;;;;;AAKA,OAAKC,4BAAL,GAAoC,KAApC;AAEA;;;;;AAIA,OAAKC,0BAAL,GAAkC,KAAlC;AAEAR,EAAAA,QAAQ,CAACS,KAAT,CAAe,IAAf,EAAqB,CACnB,qBADmB,EAEnB,8BAFmB,EAGnB,4BAHmB,CAArB;AAMA,MAAIC,IAAI,GAAG,IAAX;AACA,OAAKC,eAAL,GAAuBV,aAAa,CAAC,YAAY;AAC/CS,IAAAA,IAAI,CAACF,0BAAL,GAAkC,KAAlC;AACAE,IAAAA,IAAI,CAACH,4BAAL,GAAoC,IAApC;AACD,GAHmC,CAApC;AAKA,MAAIK,OAAO,GAAGb,gBAAgB,CAACc,SAAjB,CAA2BV,OAAO,CAACC,KAAnC,CAAd;AAEA,OAAKU,wBAAL,GAAgCF,OAAO,CAACG,YAAR,CAAqBC,gBAArB,CAC9B,YAAY;AACV,QAAI,CAACN,IAAI,CAACH,4BAAV,EAAwC;AACtCG,MAAAA,IAAI,CAACF,0BAAL,GAAkC,IAAlC;AACD;AACF,GAL6B,CAAhC;AAQA,OAAKS,4BAAL,GAAoCL,OAAO,CAACM,gBAAR,CAAyBF,gBAAzB,CAClC,YAAY;AACVN,IAAAA,IAAI,CAACF,0BAAL,GAAkC,KAAlC;AACD,GAHiC,CAApC;AAKD;;AAEDW,MAAM,CAACC,gBAAP,CAAwBlB,4BAA4B,CAACmB,SAArD,EAAgE;AAC9D;;;;;AAKAjB,EAAAA,KAAK,EAAE;AACLkB,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKjB,MAAZ;AACD;AAHI,GANuD;;AAY9D;;;;;;AAMAkB,EAAAA,cAAc,EAAE;AACdD,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKX,eAAZ;AACD;AAHa;AAlB8C,CAAhE;;AAyBAT,4BAA4B,CAACmB,SAA7B,CAAuCG,OAAvC,GAAiD,YAAY;AAC3D,OAAKV,wBAAL;;AACA,OAAKG,4BAAL;;AAEA,SAAOpB,aAAa,CAAC,IAAD,CAApB;AACD,CALD;;AAMA,eAAeK,4BAAf","sourcesContent":["import defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport destroyObject from \"../../Core/destroyObject.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport FrameRateMonitor from \"../../Scene/FrameRateMonitor.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\n\n/**\n * The view model for {@link PerformanceWatchdog}.\n *\n * @alias PerformanceWatchdogViewModel\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Scene} options.scene The Scene instance for which to monitor performance.\n * @param {String} [options.lowFrameRateMessage='This application appears to be performing poorly on your system.  Please try using a different web browser or updating your video drivers.'] The\n *        message to display when a low frame rate is detected.  The message is interpeted as HTML, so make sure\n *        it comes from a trusted source so that your application is not vulnerable to cross-site scripting attacks.\n */\nfunction PerformanceWatchdogViewModel(options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options) || !defined(options.scene)) {\n    throw new DeveloperError(\"options.scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._scene = options.scene;\n\n  /**\n   * Gets or sets the message to display when a low frame rate is detected.  This string will be interpreted as HTML.\n   * @type {String}\n   */\n  this.lowFrameRateMessage = defaultValue(\n    options.lowFrameRateMessage,\n    \"This application appears to be performing poorly on your system.  Please try using a different web browser or updating your video drivers.\"\n  );\n\n  /**\n   * Gets or sets a value indicating whether the low frame rate message has previously been dismissed by the user.  If it has\n   * been dismissed, the message will not be redisplayed, no matter the frame rate.\n   * @type {Boolean}\n   */\n  this.lowFrameRateMessageDismissed = false;\n\n  /**\n   * Gets or sets a value indicating whether the low frame rate message is currently being displayed.\n   * @type {Boolean}\n   */\n  this.showingLowFrameRateMessage = false;\n\n  knockout.track(this, [\n    \"lowFrameRateMessage\",\n    \"lowFrameRateMessageDismissed\",\n    \"showingLowFrameRateMessage\",\n  ]);\n\n  var that = this;\n  this._dismissMessage = createCommand(function () {\n    that.showingLowFrameRateMessage = false;\n    that.lowFrameRateMessageDismissed = true;\n  });\n\n  var monitor = FrameRateMonitor.fromScene(options.scene);\n\n  this._unsubscribeLowFrameRate = monitor.lowFrameRate.addEventListener(\n    function () {\n      if (!that.lowFrameRateMessageDismissed) {\n        that.showingLowFrameRateMessage = true;\n      }\n    }\n  );\n\n  this._unsubscribeNominalFrameRate = monitor.nominalFrameRate.addEventListener(\n    function () {\n      that.showingLowFrameRateMessage = false;\n    }\n  );\n}\n\nObject.defineProperties(PerformanceWatchdogViewModel.prototype, {\n  /**\n   * Gets the {@link Scene} instance for which to monitor performance.\n   * @memberof PerformanceWatchdogViewModel.prototype\n   * @type {Scene}\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    },\n  },\n\n  /**\n   * Gets a command that dismisses the low frame rate message.  Once it is dismissed, the message\n   * will not be redisplayed.\n   * @memberof PerformanceWatchdogViewModel.prototype\n   * @type {Command}\n   */\n  dismissMessage: {\n    get: function () {\n      return this._dismissMessage;\n    },\n  },\n});\n\nPerformanceWatchdogViewModel.prototype.destroy = function () {\n  this._unsubscribeLowFrameRate();\n  this._unsubscribeNominalFrameRate();\n\n  return destroyObject(this);\n};\nexport default PerformanceWatchdogViewModel;\n"]},"metadata":{},"sourceType":"module"}