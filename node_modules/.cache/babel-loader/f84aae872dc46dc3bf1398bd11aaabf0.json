{"ast":null,"code":"import Intersect from \"../Core/Intersect.js\";\nimport ManagedArray from \"../Core/ManagedArray.js\";\nimport Cesium3DTileRefine from \"./Cesium3DTileRefine.js\";\n/**\n * Traversal that loads all leaves that intersect the camera frustum.\n * Used to determine ray-tileset intersections during a pickFromRayMostDetailed call.\n *\n * @private\n */\n\nfunction Cesium3DTilesetMostDetailedTraversal() {}\n\nvar traversal = {\n  stack: new ManagedArray(),\n  stackMaximumLength: 0\n};\n\nCesium3DTilesetMostDetailedTraversal.selectTiles = function (tileset, frameState) {\n  tileset._selectedTiles.length = 0;\n  tileset._requestedTiles.length = 0;\n  tileset._hasMixedContent = false;\n  var ready = true;\n  var root = tileset.root;\n  root.updateVisibility(frameState);\n\n  if (!isVisible(root)) {\n    return ready;\n  }\n\n  var stack = traversal.stack;\n  stack.push(tileset.root);\n\n  while (stack.length > 0) {\n    traversal.stackMaximumLength = Math.max(traversal.stackMaximumLength, stack.length);\n    var tile = stack.pop();\n    var add = tile.refine === Cesium3DTileRefine.ADD;\n    var replace = tile.refine === Cesium3DTileRefine.REPLACE;\n    var traverse = canTraverse(tileset, tile);\n\n    if (traverse) {\n      updateAndPushChildren(tileset, tile, stack, frameState);\n    }\n\n    if (add || replace && !traverse) {\n      loadTile(tileset, tile);\n      touchTile(tileset, tile, frameState);\n      selectDesiredTile(tileset, tile, frameState);\n\n      if (!hasEmptyContent(tile) && !tile.contentAvailable) {\n        ready = false;\n      }\n    }\n\n    visitTile(tileset);\n  }\n\n  traversal.stack.trim(traversal.stackMaximumLength);\n  return ready;\n};\n\nfunction isVisible(tile) {\n  return tile._visible && tile._inRequestVolume;\n}\n\nfunction hasEmptyContent(tile) {\n  return tile.hasEmptyContent || tile.hasTilesetContent;\n}\n\nfunction hasUnloadedContent(tile) {\n  return !hasEmptyContent(tile) && tile.contentUnloaded;\n}\n\nfunction canTraverse(tileset, tile) {\n  if (tile.children.length === 0) {\n    return false;\n  }\n\n  if (tile.hasTilesetContent) {\n    // Traverse external tileset to visit its root tile\n    // Don't traverse if the subtree is expired because it will be destroyed\n    return !tile.contentExpired;\n  }\n\n  if (tile.hasEmptyContent) {\n    return true;\n  }\n\n  return true; // Keep traversing until a leave is hit\n}\n\nfunction updateAndPushChildren(tileset, tile, stack, frameState) {\n  var children = tile.children;\n  var length = children.length;\n\n  for (var i = 0; i < length; ++i) {\n    var child = children[i];\n    child.updateVisibility(frameState);\n\n    if (isVisible(child)) {\n      stack.push(child);\n    }\n  }\n}\n\nfunction loadTile(tileset, tile) {\n  if (hasUnloadedContent(tile) || tile.contentExpired) {\n    tile._priority = 0.0; // Highest priority\n\n    tileset._requestedTiles.push(tile);\n  }\n}\n\nfunction touchTile(tileset, tile, frameState) {\n  if (tile._touchedFrame === frameState.frameNumber) {\n    // Prevents another pass from touching the frame again\n    return;\n  }\n\n  tileset._cache.touch(tile);\n\n  tile._touchedFrame = frameState.frameNumber;\n}\n\nfunction visitTile(tileset) {\n  ++tileset.statistics.visited;\n}\n\nfunction selectDesiredTile(tileset, tile, frameState) {\n  if (tile.contentAvailable && tile.contentVisibility(frameState) !== Intersect.OUTSIDE) {\n    tileset._selectedTiles.push(tile);\n  }\n}\n\nexport default Cesium3DTilesetMostDetailedTraversal;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/Cesium3DTilesetMostDetailedTraversal.js"],"names":["Intersect","ManagedArray","Cesium3DTileRefine","Cesium3DTilesetMostDetailedTraversal","traversal","stack","stackMaximumLength","selectTiles","tileset","frameState","_selectedTiles","length","_requestedTiles","_hasMixedContent","ready","root","updateVisibility","isVisible","push","Math","max","tile","pop","add","refine","ADD","replace","REPLACE","traverse","canTraverse","updateAndPushChildren","loadTile","touchTile","selectDesiredTile","hasEmptyContent","contentAvailable","visitTile","trim","_visible","_inRequestVolume","hasTilesetContent","hasUnloadedContent","contentUnloaded","children","contentExpired","i","child","_priority","_touchedFrame","frameNumber","_cache","touch","statistics","visited","contentVisibility","OUTSIDE"],"mappings":"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","sourcesContent":["import Intersect from \"../Core/Intersect.js\";\nimport ManagedArray from \"../Core/ManagedArray.js\";\nimport Cesium3DTileRefine from \"./Cesium3DTileRefine.js\";\n\n/**\n * Traversal that loads all leaves that intersect the camera frustum.\n * Used to determine ray-tileset intersections during a pickFromRayMostDetailed call.\n *\n * @private\n */\nfunction Cesium3DTilesetMostDetailedTraversal() {}\n\nvar traversal = {\n  stack: new ManagedArray(),\n  stackMaximumLength: 0,\n};\n\nCesium3DTilesetMostDetailedTraversal.selectTiles = function (\n  tileset,\n  frameState\n) {\n  tileset._selectedTiles.length = 0;\n  tileset._requestedTiles.length = 0;\n  tileset._hasMixedContent = false;\n\n  var ready = true;\n\n  var root = tileset.root;\n  root.updateVisibility(frameState);\n\n  if (!isVisible(root)) {\n    return ready;\n  }\n\n  var stack = traversal.stack;\n  stack.push(tileset.root);\n\n  while (stack.length > 0) {\n    traversal.stackMaximumLength = Math.max(\n      traversal.stackMaximumLength,\n      stack.length\n    );\n\n    var tile = stack.pop();\n    var add = tile.refine === Cesium3DTileRefine.ADD;\n    var replace = tile.refine === Cesium3DTileRefine.REPLACE;\n    var traverse = canTraverse(tileset, tile);\n\n    if (traverse) {\n      updateAndPushChildren(tileset, tile, stack, frameState);\n    }\n\n    if (add || (replace && !traverse)) {\n      loadTile(tileset, tile);\n      touchTile(tileset, tile, frameState);\n      selectDesiredTile(tileset, tile, frameState);\n\n      if (!hasEmptyContent(tile) && !tile.contentAvailable) {\n        ready = false;\n      }\n    }\n\n    visitTile(tileset);\n  }\n\n  traversal.stack.trim(traversal.stackMaximumLength);\n\n  return ready;\n};\n\nfunction isVisible(tile) {\n  return tile._visible && tile._inRequestVolume;\n}\n\nfunction hasEmptyContent(tile) {\n  return tile.hasEmptyContent || tile.hasTilesetContent;\n}\n\nfunction hasUnloadedContent(tile) {\n  return !hasEmptyContent(tile) && tile.contentUnloaded;\n}\n\nfunction canTraverse(tileset, tile) {\n  if (tile.children.length === 0) {\n    return false;\n  }\n\n  if (tile.hasTilesetContent) {\n    // Traverse external tileset to visit its root tile\n    // Don't traverse if the subtree is expired because it will be destroyed\n    return !tile.contentExpired;\n  }\n\n  if (tile.hasEmptyContent) {\n    return true;\n  }\n\n  return true; // Keep traversing until a leave is hit\n}\n\nfunction updateAndPushChildren(tileset, tile, stack, frameState) {\n  var children = tile.children;\n  var length = children.length;\n\n  for (var i = 0; i < length; ++i) {\n    var child = children[i];\n    child.updateVisibility(frameState);\n    if (isVisible(child)) {\n      stack.push(child);\n    }\n  }\n}\n\nfunction loadTile(tileset, tile) {\n  if (hasUnloadedContent(tile) || tile.contentExpired) {\n    tile._priority = 0.0; // Highest priority\n    tileset._requestedTiles.push(tile);\n  }\n}\n\nfunction touchTile(tileset, tile, frameState) {\n  if (tile._touchedFrame === frameState.frameNumber) {\n    // Prevents another pass from touching the frame again\n    return;\n  }\n  tileset._cache.touch(tile);\n  tile._touchedFrame = frameState.frameNumber;\n}\n\nfunction visitTile(tileset) {\n  ++tileset.statistics.visited;\n}\n\nfunction selectDesiredTile(tileset, tile, frameState) {\n  if (\n    tile.contentAvailable &&\n    tile.contentVisibility(frameState) !== Intersect.OUTSIDE\n  ) {\n    tileset._selectedTiles.push(tile);\n  }\n}\nexport default Cesium3DTilesetMostDetailedTraversal;\n"]},"metadata":{},"sourceType":"module"}