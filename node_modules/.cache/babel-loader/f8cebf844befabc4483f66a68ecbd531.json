{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n/**\n * Describes a cylinder, truncated cone, or cone defined by a length, top radius, and bottom radius.\n * The center position and orientation are determined by the containing {@link Entity}.\n *\n * @alias CylinderGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the cylinder.\n * @param {Property} [options.length] A numeric Property specifying the length of the cylinder.\n * @param {Property} [options.topRadius] A numeric Property specifying the radius of the top of the cylinder.\n * @param {Property} [options.bottomRadius] A numeric Property specifying the radius of the bottom of the cylinder.\n * @param {Property} [options.heightReference=HeightReference.NONE] A Property specifying what the height from the entity position is relative to.\n * @param {Property} [options.fill=true] A boolean Property specifying whether the cylinder is filled with the provided material.\n * @param {MaterialProperty} [options.material=Color.WHITE] A Property specifying the material used to fill the cylinder.\n * @param {Property} [options.outline=false] A boolean Property specifying whether the cylinder is outlined.\n * @param {Property} [options.outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @param {Property} [options.outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @param {Property} [options.numberOfVerticalLines=16] A numeric Property specifying the number of vertical lines to draw along the perimeter for the outline.\n * @param {Property} [options.slices=128] The number of edges around the perimeter of the cylinder.\n * @param {Property} [options.shadows=ShadowMode.DISABLED] An enum Property specifying whether the cylinder casts or receives shadows from light sources.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this cylinder will be displayed.\n */\n\nfunction CylinderGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._length = undefined;\n  this._lengthSubscription = undefined;\n  this._topRadius = undefined;\n  this._topRadiusSubscription = undefined;\n  this._bottomRadius = undefined;\n  this._bottomRadiusSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._numberOfVerticalLines = undefined;\n  this._numberOfVerticalLinesSubscription = undefined;\n  this._slices = undefined;\n  this._slicesSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(CylinderGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof CylinderGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the cylinder.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the length of the cylinder.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   */\n  length: createPropertyDescriptor(\"length\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the radius of the top of the cylinder.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   */\n  topRadius: createPropertyDescriptor(\"topRadius\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the radius of the bottom of the cylinder.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   */\n  bottomRadius: createPropertyDescriptor(\"bottomRadius\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the cylinder is filled with the provided material.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the cylinder.\n   * @memberof CylinderGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the cylinder is outlined.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Gets or sets the Property specifying the number of vertical lines to draw along the perimeter for the outline.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   * @default 16\n   */\n  numberOfVerticalLines: createPropertyDescriptor(\"numberOfVerticalLines\"),\n\n  /**\n   * Gets or sets the Property specifying the number of edges around the perimeter of the cylinder.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   * @default 128\n   */\n  slices: createPropertyDescriptor(\"slices\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the cylinder\n   * casts or receives shadows from light sources.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this cylinder will be displayed.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\"distanceDisplayCondition\")\n});\n/**\n * Duplicates this instance.\n *\n * @param {CylinderGraphics} [result] The object onto which to store the result.\n * @returns {CylinderGraphics} The modified result parameter or a new instance if one was not provided.\n */\n\nCylinderGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new CylinderGraphics(this);\n  }\n\n  result.show = this.show;\n  result.length = this.length;\n  result.topRadius = this.topRadius;\n  result.bottomRadius = this.bottomRadius;\n  result.heightReference = this.heightReference;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.numberOfVerticalLines = this.numberOfVerticalLines;\n  result.slices = this.slices;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  return result;\n};\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {CylinderGraphics} source The object to be merged into this object.\n */\n\n\nCylinderGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  } //>>includeEnd('debug');\n\n\n  this.show = defaultValue(this.show, source.show);\n  this.length = defaultValue(this.length, source.length);\n  this.topRadius = defaultValue(this.topRadius, source.topRadius);\n  this.bottomRadius = defaultValue(this.bottomRadius, source.bottomRadius);\n  this.heightReference = defaultValue(this.heightReference, source.heightReference);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.numberOfVerticalLines = defaultValue(this.numberOfVerticalLines, source.numberOfVerticalLines);\n  this.slices = defaultValue(this.slices, source.slices);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(this.distanceDisplayCondition, source.distanceDisplayCondition);\n};\n\nexport default CylinderGraphics;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/CylinderGraphics.js"],"names":["defaultValue","defined","DeveloperError","Event","createMaterialPropertyDescriptor","createPropertyDescriptor","CylinderGraphics","options","_definitionChanged","_show","undefined","_showSubscription","_length","_lengthSubscription","_topRadius","_topRadiusSubscription","_bottomRadius","_bottomRadiusSubscription","_heightReference","_heightReferenceSubscription","_fill","_fillSubscription","_material","_materialSubscription","_outline","_outlineSubscription","_outlineColor","_outlineColorSubscription","_outlineWidth","_outlineWidthSubscription","_numberOfVerticalLines","_numberOfVerticalLinesSubscription","_slices","_slicesSubscription","_shadows","_shadowsSubscription","_distanceDisplayCondition","_distanceDisplayConditionSubscription","merge","EMPTY_OBJECT","Object","defineProperties","prototype","definitionChanged","get","show","length","topRadius","bottomRadius","heightReference","fill","material","outline","outlineColor","outlineWidth","numberOfVerticalLines","slices","shadows","distanceDisplayCondition","clone","result","source"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * Describes a cylinder, truncated cone, or cone defined by a length, top radius, and bottom radius.\n * The center position and orientation are determined by the containing {@link Entity}.\n *\n * @alias CylinderGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the cylinder.\n * @param {Property} [options.length] A numeric Property specifying the length of the cylinder.\n * @param {Property} [options.topRadius] A numeric Property specifying the radius of the top of the cylinder.\n * @param {Property} [options.bottomRadius] A numeric Property specifying the radius of the bottom of the cylinder.\n * @param {Property} [options.heightReference=HeightReference.NONE] A Property specifying what the height from the entity position is relative to.\n * @param {Property} [options.fill=true] A boolean Property specifying whether the cylinder is filled with the provided material.\n * @param {MaterialProperty} [options.material=Color.WHITE] A Property specifying the material used to fill the cylinder.\n * @param {Property} [options.outline=false] A boolean Property specifying whether the cylinder is outlined.\n * @param {Property} [options.outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @param {Property} [options.outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @param {Property} [options.numberOfVerticalLines=16] A numeric Property specifying the number of vertical lines to draw along the perimeter for the outline.\n * @param {Property} [options.slices=128] The number of edges around the perimeter of the cylinder.\n * @param {Property} [options.shadows=ShadowMode.DISABLED] An enum Property specifying whether the cylinder casts or receives shadows from light sources.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this cylinder will be displayed.\n */\nfunction CylinderGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._length = undefined;\n  this._lengthSubscription = undefined;\n  this._topRadius = undefined;\n  this._topRadiusSubscription = undefined;\n  this._bottomRadius = undefined;\n  this._bottomRadiusSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._numberOfVerticalLines = undefined;\n  this._numberOfVerticalLinesSubscription = undefined;\n  this._slices = undefined;\n  this._slicesSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(CylinderGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof CylinderGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the cylinder.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the length of the cylinder.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   */\n  length: createPropertyDescriptor(\"length\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the radius of the top of the cylinder.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   */\n  topRadius: createPropertyDescriptor(\"topRadius\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the radius of the bottom of the cylinder.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   */\n  bottomRadius: createPropertyDescriptor(\"bottomRadius\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the cylinder is filled with the provided material.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the cylinder.\n   * @memberof CylinderGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the cylinder is outlined.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Gets or sets the Property specifying the number of vertical lines to draw along the perimeter for the outline.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   * @default 16\n   */\n  numberOfVerticalLines: createPropertyDescriptor(\"numberOfVerticalLines\"),\n\n  /**\n   * Gets or sets the Property specifying the number of edges around the perimeter of the cylinder.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   * @default 128\n   */\n  slices: createPropertyDescriptor(\"slices\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the cylinder\n   * casts or receives shadows from light sources.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this cylinder will be displayed.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {CylinderGraphics} [result] The object onto which to store the result.\n * @returns {CylinderGraphics} The modified result parameter or a new instance if one was not provided.\n */\nCylinderGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new CylinderGraphics(this);\n  }\n  result.show = this.show;\n  result.length = this.length;\n  result.topRadius = this.topRadius;\n  result.bottomRadius = this.bottomRadius;\n  result.heightReference = this.heightReference;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.numberOfVerticalLines = this.numberOfVerticalLines;\n  result.slices = this.slices;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {CylinderGraphics} source The object to be merged into this object.\n */\nCylinderGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.length = defaultValue(this.length, source.length);\n  this.topRadius = defaultValue(this.topRadius, source.topRadius);\n  this.bottomRadius = defaultValue(this.bottomRadius, source.bottomRadius);\n  this.heightReference = defaultValue(\n    this.heightReference,\n    source.heightReference\n  );\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.numberOfVerticalLines = defaultValue(\n    this.numberOfVerticalLines,\n    source.numberOfVerticalLines\n  );\n  this.slices = defaultValue(this.slices, source.slices);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n};\nexport default CylinderGraphics;\n"]},"metadata":{},"sourceType":"module"}