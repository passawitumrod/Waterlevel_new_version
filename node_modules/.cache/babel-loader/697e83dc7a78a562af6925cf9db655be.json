{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n/**\n * Describes a polyline. The first two positions define a line segment,\n * and each additional position defines a line segment from the previous position. The segments\n * can be linear connected points, great arcs, or clamped to terrain.\n *\n * @alias PolylineGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the polyline.\n * @param {Property} [options.positions] A Property specifying the array of {@link Cartesian3} positions that define the line strip.\n * @param {Property} [options.width=1.0] A numeric Property specifying the width in pixels.\n * @param {Property} [options.granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the angular distance between each latitude and longitude if arcType is not ArcType.NONE.\n * @param {MaterialProperty} [options.material=Color.WHITE] A Property specifying the material used to draw the polyline.\n * @param {MaterialProperty} [options.depthFailMaterial] A property specifying the material used to draw the polyline when it is below the terrain.\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polyline segments must follow.\n * @param {Property} [options.clampToGround=false] A boolean Property specifying whether the Polyline should be clamped to the ground.\n * @param {Property} [options.shadows=ShadowMode.DISABLED] An enum Property specifying whether the polyline casts or receives shadows from light sources.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this polyline will be displayed.\n * @param {Property} [options.classificationType=ClassificationType.BOTH] An enum Property specifying whether this polyline will classify terrain, 3D Tiles, or both when on the ground.\n * @param {Property} [options.zIndex=0] A Property specifying the zIndex used for ordering ground geometry. Only has an effect if `clampToGround` is true and polylines on terrain is supported.\n *\n * @see Entity\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline.html|Cesium Sandcastle Polyline Demo}\n */\n\nfunction PolylineGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._positions = undefined;\n  this._positionsSubscription = undefined;\n  this._width = undefined;\n  this._widthSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._depthFailMaterial = undefined;\n  this._depthFailMaterialSubscription = undefined;\n  this._arcType = undefined;\n  this._arcTypeSubscription = undefined;\n  this._clampToGround = undefined;\n  this._clampToGroundSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._classificationType = undefined;\n  this._classificationTypeSubscription = undefined;\n  this._zIndex = undefined;\n  this._zIndexSubscription = undefined;\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(PolylineGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof PolylineGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the polyline.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the array of {@link Cartesian3}\n   * positions that define the line strip.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property}\n   */\n  positions: createPropertyDescriptor(\"positions\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width in pixels.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  width: createPropertyDescriptor(\"width\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the angular distance between each latitude and longitude if arcType is not ArcType.NONE and clampToGround is false.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property}\n   * @default Cesium.Math.RADIANS_PER_DEGREE\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to draw the polyline.\n   * @memberof PolylineGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to draw the polyline when it fails the depth test.\n   * <p>\n   * Requires the EXT_frag_depth WebGL extension to render properly. If the extension is not supported,\n   * there may be artifacts.\n   * </p>\n   * @memberof PolylineGraphics.prototype\n   * @type {MaterialProperty}\n   * @default undefined\n   */\n  depthFailMaterial: createMaterialPropertyDescriptor(\"depthFailMaterial\"),\n\n  /**\n   * Gets or sets the {@link ArcType} Property specifying whether the line segments should be great arcs, rhumb lines or linearly connected.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property}\n   * @default ArcType.GEODESIC\n   */\n  arcType: createPropertyDescriptor(\"arcType\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the polyline\n   * should be clamped to the ground.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property}\n   * @default false\n   */\n  clampToGround: createPropertyDescriptor(\"clampToGround\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the polyline\n   * casts or receives shadows from light sources.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this polyline will be displayed.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\"distanceDisplayCondition\"),\n\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying whether this polyline will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property}\n   * @default ClassificationType.BOTH\n   */\n  classificationType: createPropertyDescriptor(\"classificationType\"),\n\n  /**\n   * Gets or sets the zIndex Property specifying the ordering of the polyline. Only has an effect if `clampToGround` is true and polylines on terrain is supported.\n   * @memberof PolylineGraphics.prototype\n   * @type {ConstantProperty}\n   * @default 0\n   */\n  zIndex: createPropertyDescriptor(\"zIndex\")\n});\n/**\n * Duplicates this instance.\n *\n * @param {PolylineGraphics} [result] The object onto which to store the result.\n * @returns {PolylineGraphics} The modified result parameter or a new instance if one was not provided.\n */\n\nPolylineGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new PolylineGraphics(this);\n  }\n\n  result.show = this.show;\n  result.positions = this.positions;\n  result.width = this.width;\n  result.granularity = this.granularity;\n  result.material = this.material;\n  result.depthFailMaterial = this.depthFailMaterial;\n  result.arcType = this.arcType;\n  result.clampToGround = this.clampToGround;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.classificationType = this.classificationType;\n  result.zIndex = this.zIndex;\n  return result;\n};\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {PolylineGraphics} source The object to be merged into this object.\n */\n\n\nPolylineGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  } //>>includeEnd('debug');\n\n\n  this.show = defaultValue(this.show, source.show);\n  this.positions = defaultValue(this.positions, source.positions);\n  this.width = defaultValue(this.width, source.width);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.material = defaultValue(this.material, source.material);\n  this.depthFailMaterial = defaultValue(this.depthFailMaterial, source.depthFailMaterial);\n  this.arcType = defaultValue(this.arcType, source.arcType);\n  this.clampToGround = defaultValue(this.clampToGround, source.clampToGround);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(this.distanceDisplayCondition, source.distanceDisplayCondition);\n  this.classificationType = defaultValue(this.classificationType, source.classificationType);\n  this.zIndex = defaultValue(this.zIndex, source.zIndex);\n};\n\nexport default PolylineGraphics;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/DataSources/PolylineGraphics.js"],"names":["defaultValue","defined","DeveloperError","Event","createMaterialPropertyDescriptor","createPropertyDescriptor","PolylineGraphics","options","_definitionChanged","_show","undefined","_showSubscription","_positions","_positionsSubscription","_width","_widthSubscription","_granularity","_granularitySubscription","_material","_materialSubscription","_depthFailMaterial","_depthFailMaterialSubscription","_arcType","_arcTypeSubscription","_clampToGround","_clampToGroundSubscription","_shadows","_shadowsSubscription","_distanceDisplayCondition","_distanceDisplayConditionSubscription","_classificationType","_classificationTypeSubscription","_zIndex","_zIndexSubscription","merge","EMPTY_OBJECT","Object","defineProperties","prototype","definitionChanged","get","show","positions","width","granularity","material","depthFailMaterial","arcType","clampToGround","shadows","distanceDisplayCondition","classificationType","zIndex","clone","result","source"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * Describes a polyline. The first two positions define a line segment,\n * and each additional position defines a line segment from the previous position. The segments\n * can be linear connected points, great arcs, or clamped to terrain.\n *\n * @alias PolylineGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the polyline.\n * @param {Property} [options.positions] A Property specifying the array of {@link Cartesian3} positions that define the line strip.\n * @param {Property} [options.width=1.0] A numeric Property specifying the width in pixels.\n * @param {Property} [options.granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the angular distance between each latitude and longitude if arcType is not ArcType.NONE.\n * @param {MaterialProperty} [options.material=Color.WHITE] A Property specifying the material used to draw the polyline.\n * @param {MaterialProperty} [options.depthFailMaterial] A property specifying the material used to draw the polyline when it is below the terrain.\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polyline segments must follow.\n * @param {Property} [options.clampToGround=false] A boolean Property specifying whether the Polyline should be clamped to the ground.\n * @param {Property} [options.shadows=ShadowMode.DISABLED] An enum Property specifying whether the polyline casts or receives shadows from light sources.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this polyline will be displayed.\n * @param {Property} [options.classificationType=ClassificationType.BOTH] An enum Property specifying whether this polyline will classify terrain, 3D Tiles, or both when on the ground.\n * @param {Property} [options.zIndex=0] A Property specifying the zIndex used for ordering ground geometry. Only has an effect if `clampToGround` is true and polylines on terrain is supported.\n *\n * @see Entity\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline.html|Cesium Sandcastle Polyline Demo}\n */\nfunction PolylineGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._positions = undefined;\n  this._positionsSubscription = undefined;\n  this._width = undefined;\n  this._widthSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._depthFailMaterial = undefined;\n  this._depthFailMaterialSubscription = undefined;\n  this._arcType = undefined;\n  this._arcTypeSubscription = undefined;\n  this._clampToGround = undefined;\n  this._clampToGroundSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._classificationType = undefined;\n  this._classificationTypeSubscription = undefined;\n  this._zIndex = undefined;\n  this._zIndexSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(PolylineGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof PolylineGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the polyline.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the array of {@link Cartesian3}\n   * positions that define the line strip.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property}\n   */\n  positions: createPropertyDescriptor(\"positions\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width in pixels.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  width: createPropertyDescriptor(\"width\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the angular distance between each latitude and longitude if arcType is not ArcType.NONE and clampToGround is false.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property}\n   * @default Cesium.Math.RADIANS_PER_DEGREE\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to draw the polyline.\n   * @memberof PolylineGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to draw the polyline when it fails the depth test.\n   * <p>\n   * Requires the EXT_frag_depth WebGL extension to render properly. If the extension is not supported,\n   * there may be artifacts.\n   * </p>\n   * @memberof PolylineGraphics.prototype\n   * @type {MaterialProperty}\n   * @default undefined\n   */\n  depthFailMaterial: createMaterialPropertyDescriptor(\"depthFailMaterial\"),\n\n  /**\n   * Gets or sets the {@link ArcType} Property specifying whether the line segments should be great arcs, rhumb lines or linearly connected.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property}\n   * @default ArcType.GEODESIC\n   */\n  arcType: createPropertyDescriptor(\"arcType\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the polyline\n   * should be clamped to the ground.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property}\n   * @default false\n   */\n  clampToGround: createPropertyDescriptor(\"clampToGround\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the polyline\n   * casts or receives shadows from light sources.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this polyline will be displayed.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying whether this polyline will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property}\n   * @default ClassificationType.BOTH\n   */\n  classificationType: createPropertyDescriptor(\"classificationType\"),\n\n  /**\n   * Gets or sets the zIndex Property specifying the ordering of the polyline. Only has an effect if `clampToGround` is true and polylines on terrain is supported.\n   * @memberof PolylineGraphics.prototype\n   * @type {ConstantProperty}\n   * @default 0\n   */\n  zIndex: createPropertyDescriptor(\"zIndex\"),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {PolylineGraphics} [result] The object onto which to store the result.\n * @returns {PolylineGraphics} The modified result parameter or a new instance if one was not provided.\n */\nPolylineGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new PolylineGraphics(this);\n  }\n  result.show = this.show;\n  result.positions = this.positions;\n  result.width = this.width;\n  result.granularity = this.granularity;\n  result.material = this.material;\n  result.depthFailMaterial = this.depthFailMaterial;\n  result.arcType = this.arcType;\n  result.clampToGround = this.clampToGround;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.classificationType = this.classificationType;\n  result.zIndex = this.zIndex;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {PolylineGraphics} source The object to be merged into this object.\n */\nPolylineGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.positions = defaultValue(this.positions, source.positions);\n  this.width = defaultValue(this.width, source.width);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.material = defaultValue(this.material, source.material);\n  this.depthFailMaterial = defaultValue(\n    this.depthFailMaterial,\n    source.depthFailMaterial\n  );\n  this.arcType = defaultValue(this.arcType, source.arcType);\n  this.clampToGround = defaultValue(this.clampToGround, source.clampToGround);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n  this.classificationType = defaultValue(\n    this.classificationType,\n    source.classificationType\n  );\n  this.zIndex = defaultValue(this.zIndex, source.zIndex);\n};\nexport default PolylineGraphics;\n"]},"metadata":{},"sourceType":"module"}