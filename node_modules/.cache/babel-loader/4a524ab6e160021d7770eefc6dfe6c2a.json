{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n/**\n * A {@link Property} whose value is a key-value mapping of property names to the computed value of other properties.\n *\n * @alias PropertyBag\n * @constructor\n *\n * @param {Object} [value] An object, containing key-value mapping of property names to properties.\n * @param {Function} [createPropertyCallback] A function that will be called when the value of any of the properties in value are not a Property.\n */\n\nfunction PropertyBag(value, createPropertyCallback) {\n  this._propertyNames = [];\n  this._definitionChanged = new Event();\n\n  if (defined(value)) {\n    this.merge(value, createPropertyCallback);\n  }\n}\n\nObject.defineProperties(PropertyBag.prototype, {\n  /**\n   * Gets the names of all properties registered on this instance.\n   * @memberof PropertyBag.prototype\n   * @type {Array}\n   */\n  propertyNames: {\n    get: function get() {\n      return this._propertyNames;\n    }\n  },\n\n  /**\n   * Gets a value indicating if this property is constant.  This property\n   * is considered constant if all property items in this object are constant.\n   * @memberof PropertyBag.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function get() {\n      var propertyNames = this._propertyNames;\n\n      for (var i = 0, len = propertyNames.length; i < len; i++) {\n        if (!Property.isConstant(this[propertyNames[i]])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  },\n\n  /**\n   * Gets the event that is raised whenever the set of properties contained in this\n   * object changes, or one of the properties itself changes.\n   *\n   * @memberof PropertyBag.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function get() {\n      return this._definitionChanged;\n    }\n  }\n});\n/**\n * Determines if this object has defined a property with the given name.\n *\n * @param {String} propertyName The name of the property to check for.\n *\n * @returns {Boolean} True if this object has defined a property with the given name, false otherwise.\n */\n\nPropertyBag.prototype.hasProperty = function (propertyName) {\n  return this._propertyNames.indexOf(propertyName) !== -1;\n};\n\nfunction createConstantProperty(value) {\n  return new ConstantProperty(value);\n}\n/**\n * Adds a property to this object.\n *\n * @param {String} propertyName The name of the property to add.\n * @param {*} [value] The value of the new property, if provided.\n * @param {Function} [createPropertyCallback] A function that will be called when the value of this new property is set to a value that is not a Property.\n *\n * @exception {DeveloperError} \"propertyName\" is already a registered property.\n */\n\n\nPropertyBag.prototype.addProperty = function (propertyName, value, createPropertyCallback) {\n  var propertyNames = this._propertyNames; //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(propertyName)) {\n    throw new DeveloperError(\"propertyName is required.\");\n  }\n\n  if (propertyNames.indexOf(propertyName) !== -1) {\n    throw new DeveloperError(propertyName + \" is already a registered property.\");\n  } //>>includeEnd('debug');\n\n\n  propertyNames.push(propertyName);\n  Object.defineProperty(this, propertyName, createPropertyDescriptor(propertyName, true, defaultValue(createPropertyCallback, createConstantProperty)));\n\n  if (defined(value)) {\n    this[propertyName] = value;\n  }\n\n  this._definitionChanged.raiseEvent(this);\n};\n/**\n * Removed a property previously added with addProperty.\n *\n * @param {String} propertyName The name of the property to remove.\n *\n * @exception {DeveloperError} \"propertyName\" is not a registered property.\n */\n\n\nPropertyBag.prototype.removeProperty = function (propertyName) {\n  var propertyNames = this._propertyNames;\n  var index = propertyNames.indexOf(propertyName); //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(propertyName)) {\n    throw new DeveloperError(\"propertyName is required.\");\n  }\n\n  if (index === -1) {\n    throw new DeveloperError(propertyName + \" is not a registered property.\");\n  } //>>includeEnd('debug');\n\n\n  this._propertyNames.splice(index, 1);\n\n  delete this[propertyName];\n\n  this._definitionChanged.raiseEvent(this);\n};\n/**\n * Gets the value of this property.  Each contained property will be evaluated at the given time, and the overall\n * result will be an object, mapping property names to those values.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * Note that any properties in result which are not part of this PropertyBag will be left as-is.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\n\nPropertyBag.prototype.getValue = function (time, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  } //>>includeEnd('debug');\n\n\n  if (!defined(result)) {\n    result = {};\n  }\n\n  var propertyNames = this._propertyNames;\n\n  for (var i = 0, len = propertyNames.length; i < len; i++) {\n    var propertyName = propertyNames[i];\n    result[propertyName] = Property.getValueOrUndefined(this[propertyName], time, result[propertyName]);\n  }\n\n  return result;\n};\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {Object} source The object to be merged into this object.\n * @param {Function} [createPropertyCallback] A function that will be called when the value of any of the properties in value are not a Property.\n */\n\n\nPropertyBag.prototype.merge = function (source, createPropertyCallback) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  } //>>includeEnd('debug');\n\n\n  var propertyNames = this._propertyNames;\n  var sourcePropertyNames = defined(source._propertyNames) ? source._propertyNames : Object.keys(source);\n\n  for (var i = 0, len = sourcePropertyNames.length; i < len; i++) {\n    var name = sourcePropertyNames[i];\n    var targetProperty = this[name];\n    var sourceProperty = source[name]; //Custom properties that are registered on the source must also be added to this.\n\n    if (targetProperty === undefined && propertyNames.indexOf(name) === -1) {\n      this.addProperty(name, undefined, createPropertyCallback);\n    }\n\n    if (sourceProperty !== undefined) {\n      if (targetProperty !== undefined) {\n        if (defined(targetProperty) && defined(targetProperty.merge)) {\n          targetProperty.merge(sourceProperty);\n        }\n      } else if (defined(sourceProperty) && defined(sourceProperty.merge) && defined(sourceProperty.clone)) {\n        this[name] = sourceProperty.clone();\n      } else {\n        this[name] = sourceProperty;\n      }\n    }\n  }\n};\n\nfunction propertiesEqual(a, b) {\n  var aPropertyNames = a._propertyNames;\n  var bPropertyNames = b._propertyNames;\n  var len = aPropertyNames.length;\n\n  if (len !== bPropertyNames.length) {\n    return false;\n  }\n\n  for (var aIndex = 0; aIndex < len; ++aIndex) {\n    var name = aPropertyNames[aIndex];\n    var bIndex = bPropertyNames.indexOf(name);\n\n    if (bIndex === -1) {\n      return false;\n    }\n\n    if (!Property.equals(a[name], b[name])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nPropertyBag.prototype.equals = function (other) {\n  return this === other || //\n  other instanceof PropertyBag && //\n  propertiesEqual(this, other);\n};\n\nexport default PropertyBag;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/PropertyBag.js"],"names":["defaultValue","defined","DeveloperError","Event","ConstantProperty","createPropertyDescriptor","Property","PropertyBag","value","createPropertyCallback","_propertyNames","_definitionChanged","merge","Object","defineProperties","prototype","propertyNames","get","isConstant","i","len","length","definitionChanged","hasProperty","propertyName","indexOf","createConstantProperty","addProperty","push","defineProperty","raiseEvent","removeProperty","index","splice","getValue","time","result","getValueOrUndefined","source","sourcePropertyNames","keys","name","targetProperty","sourceProperty","undefined","clone","propertiesEqual","a","b","aPropertyNames","bPropertyNames","aIndex","bIndex","equals","other"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link Property} whose value is a key-value mapping of property names to the computed value of other properties.\n *\n * @alias PropertyBag\n * @constructor\n *\n * @param {Object} [value] An object, containing key-value mapping of property names to properties.\n * @param {Function} [createPropertyCallback] A function that will be called when the value of any of the properties in value are not a Property.\n */\nfunction PropertyBag(value, createPropertyCallback) {\n  this._propertyNames = [];\n  this._definitionChanged = new Event();\n\n  if (defined(value)) {\n    this.merge(value, createPropertyCallback);\n  }\n}\n\nObject.defineProperties(PropertyBag.prototype, {\n  /**\n   * Gets the names of all properties registered on this instance.\n   * @memberof PropertyBag.prototype\n   * @type {Array}\n   */\n  propertyNames: {\n    get: function () {\n      return this._propertyNames;\n    },\n  },\n  /**\n   * Gets a value indicating if this property is constant.  This property\n   * is considered constant if all property items in this object are constant.\n   * @memberof PropertyBag.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      var propertyNames = this._propertyNames;\n      for (var i = 0, len = propertyNames.length; i < len; i++) {\n        if (!Property.isConstant(this[propertyNames[i]])) {\n          return false;\n        }\n      }\n      return true;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the set of properties contained in this\n   * object changes, or one of the properties itself changes.\n   *\n   * @memberof PropertyBag.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n});\n\n/**\n * Determines if this object has defined a property with the given name.\n *\n * @param {String} propertyName The name of the property to check for.\n *\n * @returns {Boolean} True if this object has defined a property with the given name, false otherwise.\n */\nPropertyBag.prototype.hasProperty = function (propertyName) {\n  return this._propertyNames.indexOf(propertyName) !== -1;\n};\n\nfunction createConstantProperty(value) {\n  return new ConstantProperty(value);\n}\n\n/**\n * Adds a property to this object.\n *\n * @param {String} propertyName The name of the property to add.\n * @param {*} [value] The value of the new property, if provided.\n * @param {Function} [createPropertyCallback] A function that will be called when the value of this new property is set to a value that is not a Property.\n *\n * @exception {DeveloperError} \"propertyName\" is already a registered property.\n */\nPropertyBag.prototype.addProperty = function (\n  propertyName,\n  value,\n  createPropertyCallback\n) {\n  var propertyNames = this._propertyNames;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(propertyName)) {\n    throw new DeveloperError(\"propertyName is required.\");\n  }\n  if (propertyNames.indexOf(propertyName) !== -1) {\n    throw new DeveloperError(\n      propertyName + \" is already a registered property.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  propertyNames.push(propertyName);\n  Object.defineProperty(\n    this,\n    propertyName,\n    createPropertyDescriptor(\n      propertyName,\n      true,\n      defaultValue(createPropertyCallback, createConstantProperty)\n    )\n  );\n\n  if (defined(value)) {\n    this[propertyName] = value;\n  }\n\n  this._definitionChanged.raiseEvent(this);\n};\n\n/**\n * Removed a property previously added with addProperty.\n *\n * @param {String} propertyName The name of the property to remove.\n *\n * @exception {DeveloperError} \"propertyName\" is not a registered property.\n */\nPropertyBag.prototype.removeProperty = function (propertyName) {\n  var propertyNames = this._propertyNames;\n  var index = propertyNames.indexOf(propertyName);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(propertyName)) {\n    throw new DeveloperError(\"propertyName is required.\");\n  }\n  if (index === -1) {\n    throw new DeveloperError(propertyName + \" is not a registered property.\");\n  }\n  //>>includeEnd('debug');\n\n  this._propertyNames.splice(index, 1);\n  delete this[propertyName];\n\n  this._definitionChanged.raiseEvent(this);\n};\n\n/**\n * Gets the value of this property.  Each contained property will be evaluated at the given time, and the overall\n * result will be an object, mapping property names to those values.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * Note that any properties in result which are not part of this PropertyBag will be left as-is.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPropertyBag.prototype.getValue = function (time, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = {};\n  }\n\n  var propertyNames = this._propertyNames;\n  for (var i = 0, len = propertyNames.length; i < len; i++) {\n    var propertyName = propertyNames[i];\n    result[propertyName] = Property.getValueOrUndefined(\n      this[propertyName],\n      time,\n      result[propertyName]\n    );\n  }\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {Object} source The object to be merged into this object.\n * @param {Function} [createPropertyCallback] A function that will be called when the value of any of the properties in value are not a Property.\n */\nPropertyBag.prototype.merge = function (source, createPropertyCallback) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var propertyNames = this._propertyNames;\n  var sourcePropertyNames = defined(source._propertyNames)\n    ? source._propertyNames\n    : Object.keys(source);\n  for (var i = 0, len = sourcePropertyNames.length; i < len; i++) {\n    var name = sourcePropertyNames[i];\n\n    var targetProperty = this[name];\n    var sourceProperty = source[name];\n\n    //Custom properties that are registered on the source must also be added to this.\n    if (targetProperty === undefined && propertyNames.indexOf(name) === -1) {\n      this.addProperty(name, undefined, createPropertyCallback);\n    }\n\n    if (sourceProperty !== undefined) {\n      if (targetProperty !== undefined) {\n        if (defined(targetProperty) && defined(targetProperty.merge)) {\n          targetProperty.merge(sourceProperty);\n        }\n      } else if (\n        defined(sourceProperty) &&\n        defined(sourceProperty.merge) &&\n        defined(sourceProperty.clone)\n      ) {\n        this[name] = sourceProperty.clone();\n      } else {\n        this[name] = sourceProperty;\n      }\n    }\n  }\n};\n\nfunction propertiesEqual(a, b) {\n  var aPropertyNames = a._propertyNames;\n  var bPropertyNames = b._propertyNames;\n\n  var len = aPropertyNames.length;\n  if (len !== bPropertyNames.length) {\n    return false;\n  }\n\n  for (var aIndex = 0; aIndex < len; ++aIndex) {\n    var name = aPropertyNames[aIndex];\n    var bIndex = bPropertyNames.indexOf(name);\n    if (bIndex === -1) {\n      return false;\n    }\n    if (!Property.equals(a[name], b[name])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPropertyBag.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof PropertyBag && //\n      propertiesEqual(this, other))\n  );\n};\nexport default PropertyBag;\n"]},"metadata":{},"sourceType":"module"}