{"ast":null,"code":"import DeveloperError from \"../Core/DeveloperError.js\";\n/**\n * The content of a tile in a {@link Cesium3DTileset}.\n * <p>\n * Derived classes of this interface provide access to individual features in the tile.\n * Access derived objects through {@link Cesium3DTile#content}.\n * </p>\n * <p>\n * This type describes an interface and is not intended to be instantiated directly.\n * </p>\n *\n * @alias Cesium3DTileContent\n * @constructor\n */\n\nfunction Cesium3DTileContent(tileset, tile, url, arrayBuffer, byteOffset) {\n  /**\n   * Gets or sets if any feature's property changed.  Used to\n   * optimized applying a style when a feature's property changed.\n   * <p>\n   * This is used to implement the <code>Cesium3DTileContent</code> interface, but is\n   * not part of the public Cesium API.\n   * </p>\n   *\n   * @type {Boolean}\n   *\n   * @private\n   */\n  this.featurePropertiesDirty = false;\n}\n\nObject.defineProperties(Cesium3DTileContent.prototype, {\n  /**\n   * Gets the number of features in the tile.\n   *\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  featuresLength: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    }\n  },\n\n  /**\n   * Gets the number of points in the tile.\n   * <p>\n   * Only applicable for tiles with Point Cloud content. This is different than {@link Cesium3DTileContent#featuresLength} which\n   * equals the number of groups of points as distinguished by the <code>BATCH_ID</code> feature table semantic.\n   * </p>\n   *\n   * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/PointCloud#batched-points}\n   *\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  pointsLength: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    }\n  },\n\n  /**\n   * Gets the number of triangles in the tile.\n   *\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  trianglesLength: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    }\n  },\n\n  /**\n   * Gets the tile's geometry memory in bytes.\n   *\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  geometryByteLength: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    }\n  },\n\n  /**\n   * Gets the tile's texture memory in bytes.\n   *\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  texturesByteLength: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    }\n  },\n\n  /**\n   * Gets the amount of memory used by the batch table textures, in bytes.\n   *\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  batchTableByteLength: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    }\n  },\n\n  /**\n   * Gets the array of {@link Cesium3DTileContent} objects that represent the\n   * content a composite's inner tiles, which can also be composites.\n   *\n   * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/Composite}\n   *\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {Array}\n   * @readonly\n   */\n  innerContents: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    }\n  },\n\n  /**\n   * Gets the promise that will be resolved when the tile's content is ready to render.\n   *\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {Promise.<Cesium3DTileContent>}\n   * @readonly\n   */\n  readyPromise: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    }\n  },\n\n  /**\n   * Gets the tileset for this tile.\n   *\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {Cesium3DTileset}\n   * @readonly\n   */\n  tileset: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    }\n  },\n\n  /**\n   * Gets the tile containing this content.\n   *\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {Cesium3DTile}\n   * @readonly\n   */\n  tile: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    }\n  },\n\n  /**\n   * Gets the url of the tile's content.\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    }\n  },\n\n  /**\n   * Gets the batch table for this content.\n   * <p>\n   * This is used to implement the <code>Cesium3DTileContent</code> interface, but is\n   * not part of the public Cesium API.\n   * </p>\n   *\n   * @type {Cesium3DTileBatchTable}\n   * @readonly\n   *\n   * @private\n   */\n  batchTable: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    }\n  }\n});\n/**\n * Determines if the tile's batch table has a property.  If it does, each feature in\n * the tile will have the property.\n *\n * @param {Number} batchId The batchId for the feature.\n * @param {String} name The case-sensitive name of the property.\n * @returns {Boolean} <code>true</code> if the property exists; otherwise, <code>false</code>.\n */\n\nCesium3DTileContent.prototype.hasProperty = function (batchId, name) {\n  DeveloperError.throwInstantiationError();\n};\n/**\n * Returns the {@link Cesium3DTileFeature} object for the feature with the\n * given <code>batchId</code>.  This object is used to get and modify the\n * feature's properties.\n * <p>\n * Features in a tile are ordered by <code>batchId</code>, an index used to retrieve their metadata from the batch table.\n * </p>\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/BatchTable}.\n *\n * @param {Number} batchId The batchId for the feature.\n * @returns {Cesium3DTileFeature} The corresponding {@link Cesium3DTileFeature} object.\n *\n * @exception {DeveloperError} batchId must be between zero and {@link Cesium3DTileContent#featuresLength} - 1.\n */\n\n\nCesium3DTileContent.prototype.getFeature = function (batchId) {\n  DeveloperError.throwInstantiationError();\n};\n/**\n     * Called when {@link Cesium3DTileset#debugColorizeTiles} changes.\n     * <p>\n     * This is used to implement the <code>Cesium3DTileContent</code> interface, but is\n     * not part of the public Cesium API.\n     * </p>\n     *\n     * @param {Boolean} enabled Whether to enable or disable debug settings.\n     * @returns {Cesium3DTileFeature} The corresponding {@link Cesium3DTileFeature} object.\n\n     * @private\n     */\n\n\nCesium3DTileContent.prototype.applyDebugSettings = function (enabled, color) {\n  DeveloperError.throwInstantiationError();\n};\n/**\n * Apply a style to the content\n * <p>\n * This is used to implement the <code>Cesium3DTileContent</code> interface, but is\n * not part of the public Cesium API.\n * </p>\n *\n * @param {Cesium3DTileStyle} style The style.\n *\n * @private\n */\n\n\nCesium3DTileContent.prototype.applyStyle = function (style) {\n  DeveloperError.throwInstantiationError();\n};\n/**\n * Called by the tile during tileset traversal to get the draw commands needed to render this content.\n * When the tile's content is in the PROCESSING state, this creates WebGL resources to ultimately\n * move to the READY state.\n * <p>\n * This is used to implement the <code>Cesium3DTileContent</code> interface, but is\n * not part of the public Cesium API.\n * </p>\n *\n * @param {Cesium3DTileset} tileset The tileset containing this tile.\n * @param {FrameState} frameState The frame state.\n *\n * @private\n */\n\n\nCesium3DTileContent.prototype.update = function (tileset, frameState) {\n  DeveloperError.throwInstantiationError();\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * <p>\n * This is used to implement the <code>Cesium3DTileContent</code> interface, but is\n * not part of the public Cesium API.\n * </p>\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see Cesium3DTileContent#destroy\n *\n * @private\n */\n\n\nCesium3DTileContent.prototype.isDestroyed = function () {\n  DeveloperError.throwInstantiationError();\n};\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * <p>\n * This is used to implement the <code>Cesium3DTileContent</code> interface, but is\n * not part of the public Cesium API.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * content = content && content.destroy();\n *\n * @see Cesium3DTileContent#isDestroyed\n *\n * @private\n */\n\n\nCesium3DTileContent.prototype.destroy = function () {\n  DeveloperError.throwInstantiationError();\n};\n\nexport default Cesium3DTileContent;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/Cesium3DTileContent.js"],"names":["DeveloperError","Cesium3DTileContent","tileset","tile","url","arrayBuffer","byteOffset","featurePropertiesDirty","Object","defineProperties","prototype","featuresLength","get","throwInstantiationError","pointsLength","trianglesLength","geometryByteLength","texturesByteLength","batchTableByteLength","innerContents","readyPromise","batchTable","hasProperty","batchId","name","getFeature","applyDebugSettings","enabled","color","applyStyle","style","update","frameState","isDestroyed","destroy"],"mappings":"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","sourcesContent":["import DeveloperError from \"../Core/DeveloperError.js\";\n\n/**\n * The content of a tile in a {@link Cesium3DTileset}.\n * <p>\n * Derived classes of this interface provide access to individual features in the tile.\n * Access derived objects through {@link Cesium3DTile#content}.\n * </p>\n * <p>\n * This type describes an interface and is not intended to be instantiated directly.\n * </p>\n *\n * @alias Cesium3DTileContent\n * @constructor\n */\nfunction Cesium3DTileContent(tileset, tile, url, arrayBuffer, byteOffset) {\n  /**\n   * Gets or sets if any feature's property changed.  Used to\n   * optimized applying a style when a feature's property changed.\n   * <p>\n   * This is used to implement the <code>Cesium3DTileContent</code> interface, but is\n   * not part of the public Cesium API.\n   * </p>\n   *\n   * @type {Boolean}\n   *\n   * @private\n   */\n  this.featurePropertiesDirty = false;\n}\n\nObject.defineProperties(Cesium3DTileContent.prototype, {\n  /**\n   * Gets the number of features in the tile.\n   *\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  featuresLength: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    },\n  },\n\n  /**\n   * Gets the number of points in the tile.\n   * <p>\n   * Only applicable for tiles with Point Cloud content. This is different than {@link Cesium3DTileContent#featuresLength} which\n   * equals the number of groups of points as distinguished by the <code>BATCH_ID</code> feature table semantic.\n   * </p>\n   *\n   * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/PointCloud#batched-points}\n   *\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  pointsLength: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    },\n  },\n\n  /**\n   * Gets the number of triangles in the tile.\n   *\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  trianglesLength: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    },\n  },\n\n  /**\n   * Gets the tile's geometry memory in bytes.\n   *\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  geometryByteLength: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    },\n  },\n\n  /**\n   * Gets the tile's texture memory in bytes.\n   *\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  texturesByteLength: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    },\n  },\n\n  /**\n   * Gets the amount of memory used by the batch table textures, in bytes.\n   *\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  batchTableByteLength: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    },\n  },\n\n  /**\n   * Gets the array of {@link Cesium3DTileContent} objects that represent the\n   * content a composite's inner tiles, which can also be composites.\n   *\n   * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/Composite}\n   *\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {Array}\n   * @readonly\n   */\n  innerContents: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    },\n  },\n\n  /**\n   * Gets the promise that will be resolved when the tile's content is ready to render.\n   *\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {Promise.<Cesium3DTileContent>}\n   * @readonly\n   */\n  readyPromise: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    },\n  },\n\n  /**\n   * Gets the tileset for this tile.\n   *\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {Cesium3DTileset}\n   * @readonly\n   */\n  tileset: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    },\n  },\n\n  /**\n   * Gets the tile containing this content.\n   *\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {Cesium3DTile}\n   * @readonly\n   */\n  tile: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    },\n  },\n\n  /**\n   * Gets the url of the tile's content.\n   * @memberof Cesium3DTileContent.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    },\n  },\n\n  /**\n   * Gets the batch table for this content.\n   * <p>\n   * This is used to implement the <code>Cesium3DTileContent</code> interface, but is\n   * not part of the public Cesium API.\n   * </p>\n   *\n   * @type {Cesium3DTileBatchTable}\n   * @readonly\n   *\n   * @private\n   */\n  batchTable: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      DeveloperError.throwInstantiationError();\n    },\n  },\n});\n\n/**\n * Determines if the tile's batch table has a property.  If it does, each feature in\n * the tile will have the property.\n *\n * @param {Number} batchId The batchId for the feature.\n * @param {String} name The case-sensitive name of the property.\n * @returns {Boolean} <code>true</code> if the property exists; otherwise, <code>false</code>.\n */\nCesium3DTileContent.prototype.hasProperty = function (batchId, name) {\n  DeveloperError.throwInstantiationError();\n};\n\n/**\n * Returns the {@link Cesium3DTileFeature} object for the feature with the\n * given <code>batchId</code>.  This object is used to get and modify the\n * feature's properties.\n * <p>\n * Features in a tile are ordered by <code>batchId</code>, an index used to retrieve their metadata from the batch table.\n * </p>\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/BatchTable}.\n *\n * @param {Number} batchId The batchId for the feature.\n * @returns {Cesium3DTileFeature} The corresponding {@link Cesium3DTileFeature} object.\n *\n * @exception {DeveloperError} batchId must be between zero and {@link Cesium3DTileContent#featuresLength} - 1.\n */\nCesium3DTileContent.prototype.getFeature = function (batchId) {\n  DeveloperError.throwInstantiationError();\n};\n\n/**\n     * Called when {@link Cesium3DTileset#debugColorizeTiles} changes.\n     * <p>\n     * This is used to implement the <code>Cesium3DTileContent</code> interface, but is\n     * not part of the public Cesium API.\n     * </p>\n     *\n     * @param {Boolean} enabled Whether to enable or disable debug settings.\n     * @returns {Cesium3DTileFeature} The corresponding {@link Cesium3DTileFeature} object.\n\n     * @private\n     */\nCesium3DTileContent.prototype.applyDebugSettings = function (enabled, color) {\n  DeveloperError.throwInstantiationError();\n};\n\n/**\n * Apply a style to the content\n * <p>\n * This is used to implement the <code>Cesium3DTileContent</code> interface, but is\n * not part of the public Cesium API.\n * </p>\n *\n * @param {Cesium3DTileStyle} style The style.\n *\n * @private\n */\nCesium3DTileContent.prototype.applyStyle = function (style) {\n  DeveloperError.throwInstantiationError();\n};\n\n/**\n * Called by the tile during tileset traversal to get the draw commands needed to render this content.\n * When the tile's content is in the PROCESSING state, this creates WebGL resources to ultimately\n * move to the READY state.\n * <p>\n * This is used to implement the <code>Cesium3DTileContent</code> interface, but is\n * not part of the public Cesium API.\n * </p>\n *\n * @param {Cesium3DTileset} tileset The tileset containing this tile.\n * @param {FrameState} frameState The frame state.\n *\n * @private\n */\nCesium3DTileContent.prototype.update = function (tileset, frameState) {\n  DeveloperError.throwInstantiationError();\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * <p>\n * This is used to implement the <code>Cesium3DTileContent</code> interface, but is\n * not part of the public Cesium API.\n * </p>\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see Cesium3DTileContent#destroy\n *\n * @private\n */\nCesium3DTileContent.prototype.isDestroyed = function () {\n  DeveloperError.throwInstantiationError();\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * <p>\n * This is used to implement the <code>Cesium3DTileContent</code> interface, but is\n * not part of the public Cesium API.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * content = content && content.destroy();\n *\n * @see Cesium3DTileContent#isDestroyed\n *\n * @private\n */\nCesium3DTileContent.prototype.destroy = function () {\n  DeveloperError.throwInstantiationError();\n};\nexport default Cesium3DTileContent;\n"]},"metadata":{},"sourceType":"module"}