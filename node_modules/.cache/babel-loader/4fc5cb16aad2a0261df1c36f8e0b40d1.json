{"ast":null,"code":"import Check from \"./Check.js\";\n/**\n * Finds an item in a sorted array.\n *\n * @exports binarySearch\n * @param {Array} array The sorted array to search.\n * @param {*} itemToFind The item to find in the array.\n * @param {binarySearch~Comparator} comparator The function to use to compare the item to\n *        elements in the array.\n * @returns {Number} The index of <code>itemToFind</code> in the array, if it exists.  If <code>itemToFind</code>\n *        does not exist, the return value is a negative number which is the bitwise complement (~)\n *        of the index before which the itemToFind should be inserted in order to maintain the\n *        sorted order of the array.\n *\n * @example\n * // Create a comparator function to search through an array of numbers.\n * function comparator(a, b) {\n *     return a - b;\n * };\n * var numbers = [0, 2, 4, 6, 8];\n * var index = Cesium.binarySearch(numbers, 6, comparator); // 3\n */\n\nfunction binarySearch(array, itemToFind, comparator) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  Check.defined(\"itemToFind\", itemToFind);\n  Check.defined(\"comparator\", comparator); //>>includeEnd('debug');\n\n  var low = 0;\n  var high = array.length - 1;\n  var i;\n  var comparison;\n\n  while (low <= high) {\n    i = ~~((low + high) / 2);\n    comparison = comparator(array[i], itemToFind);\n\n    if (comparison < 0) {\n      low = i + 1;\n      continue;\n    }\n\n    if (comparison > 0) {\n      high = i - 1;\n      continue;\n    }\n\n    return i;\n  }\n\n  return ~(high + 1);\n}\n/**\n * A function used to compare two items while performing a binary search.\n * @callback binarySearch~Comparator\n *\n * @param {*} a An item in the array.\n * @param {*} b The item being searched for.\n * @returns {Number} Returns a negative value if <code>a</code> is less than <code>b</code>,\n *          a positive value if <code>a</code> is greater than <code>b</code>, or\n *          0 if <code>a</code> is equal to <code>b</code>.\n *\n * @example\n * function compareNumbers(a, b) {\n *     return a - b;\n * }\n */\n\n\nexport default binarySearch;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/binarySearch.js"],"names":["Check","binarySearch","array","itemToFind","comparator","defined","low","high","length","i","comparison"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AAEA;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,UAA7B,EAAyCC,UAAzC,EAAqD;AACnD;AACAJ,EAAAA,KAAK,CAACK,OAAN,CAAc,OAAd,EAAuBH,KAAvB;AACAF,EAAAA,KAAK,CAACK,OAAN,CAAc,YAAd,EAA4BF,UAA5B;AACAH,EAAAA,KAAK,CAACK,OAAN,CAAc,YAAd,EAA4BD,UAA5B,EAJmD,CAKnD;;AAEA,MAAIE,GAAG,GAAG,CAAV;AACA,MAAIC,IAAI,GAAGL,KAAK,CAACM,MAAN,GAAe,CAA1B;AACA,MAAIC,CAAJ;AACA,MAAIC,UAAJ;;AAEA,SAAOJ,GAAG,IAAIC,IAAd,EAAoB;AAClBE,IAAAA,CAAC,GAAG,CAAC,EAAE,CAACH,GAAG,GAAGC,IAAP,IAAe,CAAjB,CAAL;AACAG,IAAAA,UAAU,GAAGN,UAAU,CAACF,KAAK,CAACO,CAAD,CAAN,EAAWN,UAAX,CAAvB;;AACA,QAAIO,UAAU,GAAG,CAAjB,EAAoB;AAClBJ,MAAAA,GAAG,GAAGG,CAAC,GAAG,CAAV;AACA;AACD;;AACD,QAAIC,UAAU,GAAG,CAAjB,EAAoB;AAClBH,MAAAA,IAAI,GAAGE,CAAC,GAAG,CAAX;AACA;AACD;;AACD,WAAOA,CAAP;AACD;;AACD,SAAO,EAAEF,IAAI,GAAG,CAAT,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;AAeA,eAAeN,YAAf","sourcesContent":["import Check from \"./Check.js\";\n\n/**\n * Finds an item in a sorted array.\n *\n * @exports binarySearch\n * @param {Array} array The sorted array to search.\n * @param {*} itemToFind The item to find in the array.\n * @param {binarySearch~Comparator} comparator The function to use to compare the item to\n *        elements in the array.\n * @returns {Number} The index of <code>itemToFind</code> in the array, if it exists.  If <code>itemToFind</code>\n *        does not exist, the return value is a negative number which is the bitwise complement (~)\n *        of the index before which the itemToFind should be inserted in order to maintain the\n *        sorted order of the array.\n *\n * @example\n * // Create a comparator function to search through an array of numbers.\n * function comparator(a, b) {\n *     return a - b;\n * };\n * var numbers = [0, 2, 4, 6, 8];\n * var index = Cesium.binarySearch(numbers, 6, comparator); // 3\n */\nfunction binarySearch(array, itemToFind, comparator) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  Check.defined(\"itemToFind\", itemToFind);\n  Check.defined(\"comparator\", comparator);\n  //>>includeEnd('debug');\n\n  var low = 0;\n  var high = array.length - 1;\n  var i;\n  var comparison;\n\n  while (low <= high) {\n    i = ~~((low + high) / 2);\n    comparison = comparator(array[i], itemToFind);\n    if (comparison < 0) {\n      low = i + 1;\n      continue;\n    }\n    if (comparison > 0) {\n      high = i - 1;\n      continue;\n    }\n    return i;\n  }\n  return ~(high + 1);\n}\n\n/**\n * A function used to compare two items while performing a binary search.\n * @callback binarySearch~Comparator\n *\n * @param {*} a An item in the array.\n * @param {*} b The item being searched for.\n * @returns {Number} Returns a negative value if <code>a</code> is less than <code>b</code>,\n *          a positive value if <code>a</code> is greater than <code>b</code>, or\n *          0 if <code>a</code> is equal to <code>b</code>.\n *\n * @example\n * function compareNumbers(a, b) {\n *     return a - b;\n * }\n */\nexport default binarySearch;\n"]},"metadata":{},"sourceType":"module"}