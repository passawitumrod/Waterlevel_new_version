{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n/**\n * Describes a two dimensional wall defined as a line strip and optional maximum and minimum heights.\n * The wall conforms to the curvature of the globe and can be placed along the surface or at altitude.\n *\n * @alias WallGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the wall.\n * @param {Property} [options.positions] A Property specifying the array of {@link Cartesian3} positions which define the top of the wall.\n * @param {Property} [options.minimumHeights] A Property specifying an array of heights to be used for the bottom of the wall instead of the globe surface.\n * @param {Property} [options.maximumHeights] A Property specifying an array of heights to be used for the top of the wall instead of the height of each position.\n * @param {Property} [options.granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the angular distance between each latitude and longitude point.\n * @param {Property} [options.fill=true] A boolean Property specifying whether the wall is filled with the provided material.\n * @param {MaterialProperty} [options.material=Color.WHITE] A Property specifying the material used to fill the wall.\n * @param {Property} [options.outline=false] A boolean Property specifying whether the wall is outlined.\n * @param {Property} [options.outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @param {Property} [options.outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @param {Property} [options.shadows=ShadowMode.DISABLED] An enum Property specifying whether the wall casts or receives shadows from light sources.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this wall will be displayed.\n *\n * @see Entity\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Wall.html|Cesium Sandcastle Wall Demo}\n */\n\nfunction WallGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._positions = undefined;\n  this._positionsSubscription = undefined;\n  this._minimumHeights = undefined;\n  this._minimumHeightsSubscription = undefined;\n  this._maximumHeights = undefined;\n  this._maximumHeightsSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(WallGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof WallGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the wall.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the array of {@link Cartesian3} positions which define the top of the wall.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   */\n  positions: createPropertyDescriptor(\"positions\"),\n\n  /**\n   * Gets or sets the Property specifying an array of heights to be used for the bottom of the wall instead of the surface of the globe.\n   * If defined, the array must be the same length as {@link Wall#positions}.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   */\n  minimumHeights: createPropertyDescriptor(\"minimumHeights\"),\n\n  /**\n   * Gets or sets the Property specifying an array of heights to be used for the top of the wall instead of the height of each position.\n   * If defined, the array must be the same length as {@link Wall#positions}.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   */\n  maximumHeights: createPropertyDescriptor(\"maximumHeights\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the angular distance between points on the wall.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   * @default {CesiumMath.RADIANS_PER_DEGREE}\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the wall is filled with the provided material.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the wall.\n   * @memberof WallGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the wall is outlined.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the wall\n   * casts or receives shadows from light sources.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this wall will be displayed.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\"distanceDisplayCondition\")\n});\n/**\n * Duplicates this instance.\n *\n * @param {WallGraphics} [result] The object onto which to store the result.\n * @returns {WallGraphics} The modified result parameter or a new instance if one was not provided.\n */\n\nWallGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new WallGraphics(this);\n  }\n\n  result.show = this.show;\n  result.positions = this.positions;\n  result.minimumHeights = this.minimumHeights;\n  result.maximumHeights = this.maximumHeights;\n  result.granularity = this.granularity;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  return result;\n};\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {WallGraphics} source The object to be merged into this object.\n */\n\n\nWallGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  } //>>includeEnd('debug');\n\n\n  this.show = defaultValue(this.show, source.show);\n  this.positions = defaultValue(this.positions, source.positions);\n  this.minimumHeights = defaultValue(this.minimumHeights, source.minimumHeights);\n  this.maximumHeights = defaultValue(this.maximumHeights, source.maximumHeights);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(this.distanceDisplayCondition, source.distanceDisplayCondition);\n};\n\nexport default WallGraphics;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/WallGraphics.js"],"names":["defaultValue","defined","DeveloperError","Event","createMaterialPropertyDescriptor","createPropertyDescriptor","WallGraphics","options","_definitionChanged","_show","undefined","_showSubscription","_positions","_positionsSubscription","_minimumHeights","_minimumHeightsSubscription","_maximumHeights","_maximumHeightsSubscription","_granularity","_granularitySubscription","_fill","_fillSubscription","_material","_materialSubscription","_outline","_outlineSubscription","_outlineColor","_outlineColorSubscription","_outlineWidth","_outlineWidthSubscription","_shadows","_shadowsSubscription","_distanceDisplayCondition","_distanceDisplayConditionSubscription","merge","EMPTY_OBJECT","Object","defineProperties","prototype","definitionChanged","get","show","positions","minimumHeights","maximumHeights","granularity","fill","material","outline","outlineColor","outlineWidth","shadows","distanceDisplayCondition","clone","result","source"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * Describes a two dimensional wall defined as a line strip and optional maximum and minimum heights.\n * The wall conforms to the curvature of the globe and can be placed along the surface or at altitude.\n *\n * @alias WallGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the wall.\n * @param {Property} [options.positions] A Property specifying the array of {@link Cartesian3} positions which define the top of the wall.\n * @param {Property} [options.minimumHeights] A Property specifying an array of heights to be used for the bottom of the wall instead of the globe surface.\n * @param {Property} [options.maximumHeights] A Property specifying an array of heights to be used for the top of the wall instead of the height of each position.\n * @param {Property} [options.granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the angular distance between each latitude and longitude point.\n * @param {Property} [options.fill=true] A boolean Property specifying whether the wall is filled with the provided material.\n * @param {MaterialProperty} [options.material=Color.WHITE] A Property specifying the material used to fill the wall.\n * @param {Property} [options.outline=false] A boolean Property specifying whether the wall is outlined.\n * @param {Property} [options.outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @param {Property} [options.outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @param {Property} [options.shadows=ShadowMode.DISABLED] An enum Property specifying whether the wall casts or receives shadows from light sources.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this wall will be displayed.\n *\n * @see Entity\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Wall.html|Cesium Sandcastle Wall Demo}\n */\nfunction WallGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._positions = undefined;\n  this._positionsSubscription = undefined;\n  this._minimumHeights = undefined;\n  this._minimumHeightsSubscription = undefined;\n  this._maximumHeights = undefined;\n  this._maximumHeightsSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(WallGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof WallGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the wall.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the array of {@link Cartesian3} positions which define the top of the wall.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   */\n  positions: createPropertyDescriptor(\"positions\"),\n\n  /**\n   * Gets or sets the Property specifying an array of heights to be used for the bottom of the wall instead of the surface of the globe.\n   * If defined, the array must be the same length as {@link Wall#positions}.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   */\n  minimumHeights: createPropertyDescriptor(\"minimumHeights\"),\n\n  /**\n   * Gets or sets the Property specifying an array of heights to be used for the top of the wall instead of the height of each position.\n   * If defined, the array must be the same length as {@link Wall#positions}.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   */\n  maximumHeights: createPropertyDescriptor(\"maximumHeights\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the angular distance between points on the wall.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   * @default {CesiumMath.RADIANS_PER_DEGREE}\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the wall is filled with the provided material.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the wall.\n   * @memberof WallGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the wall is outlined.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the wall\n   * casts or receives shadows from light sources.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this wall will be displayed.\n   * @memberof WallGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {WallGraphics} [result] The object onto which to store the result.\n * @returns {WallGraphics} The modified result parameter or a new instance if one was not provided.\n */\nWallGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new WallGraphics(this);\n  }\n  result.show = this.show;\n  result.positions = this.positions;\n  result.minimumHeights = this.minimumHeights;\n  result.maximumHeights = this.maximumHeights;\n  result.granularity = this.granularity;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {WallGraphics} source The object to be merged into this object.\n */\nWallGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.positions = defaultValue(this.positions, source.positions);\n  this.minimumHeights = defaultValue(\n    this.minimumHeights,\n    source.minimumHeights\n  );\n  this.maximumHeights = defaultValue(\n    this.maximumHeights,\n    source.maximumHeights\n  );\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n};\nexport default WallGraphics;\n"]},"metadata":{},"sourceType":"module"}