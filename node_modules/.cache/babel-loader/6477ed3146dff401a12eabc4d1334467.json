{"ast":null,"code":"import Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\n/**\n * Value and type information for per-instance geometry attribute that determines the geometry instance offset\n *\n * @alias OffsetGeometryInstanceAttribute\n * @constructor\n *\n * @param {Number} [x=0] The x translation\n * @param {Number} [y=0] The y translation\n * @param {Number} [z=0] The z translation\n *\n * @private\n *\n * @see GeometryInstance\n * @see GeometryInstanceAttribute\n */\n\nfunction OffsetGeometryInstanceAttribute(x, y, z) {\n  x = defaultValue(x, 0);\n  y = defaultValue(y, 0);\n  z = defaultValue(z, 0);\n  /**\n   * The values for the attributes stored in a typed array.\n   *\n   * @type Float32Array\n   */\n\n  this.value = new Float32Array([x, y, z]);\n}\n\nObject.defineProperties(OffsetGeometryInstanceAttribute.prototype, {\n  /**\n   * The datatype of each component in the attribute, e.g., individual elements in\n   * {@link OffsetGeometryInstanceAttribute#value}.\n   *\n   * @memberof OffsetGeometryInstanceAttribute.prototype\n   *\n   * @type {ComponentDatatype}\n   * @readonly\n   *\n   * @default {@link ComponentDatatype.FLOAT}\n   */\n  componentDatatype: {\n    get: function () {\n      return ComponentDatatype.FLOAT;\n    }\n  },\n\n  /**\n   * The number of components in the attributes, i.e., {@link OffsetGeometryInstanceAttribute#value}.\n   *\n   * @memberof OffsetGeometryInstanceAttribute.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @default 3\n   */\n  componentsPerAttribute: {\n    get: function () {\n      return 3;\n    }\n  },\n\n  /**\n   * When <code>true</code> and <code>componentDatatype</code> is an integer format,\n   * indicate that the components should be mapped to the range [0, 1] (unsigned)\n   * or [-1, 1] (signed) when they are accessed as floating-point for rendering.\n   *\n   * @memberof OffsetGeometryInstanceAttribute.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  normalize: {\n    get: function () {\n      return false;\n    }\n  }\n});\n/**\n * Creates a new {@link OffsetGeometryInstanceAttribute} instance given the provided an enabled flag and {@link DistanceDisplayCondition}.\n *\n * @param {Cartesian3} offset The cartesian offset\n * @returns {OffsetGeometryInstanceAttribute} The new {@link OffsetGeometryInstanceAttribute} instance.\n */\n\nOffsetGeometryInstanceAttribute.fromCartesian3 = function (offset) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"offset\", offset); //>>includeEnd('debug');\n\n  return new OffsetGeometryInstanceAttribute(offset.x, offset.y, offset.z);\n};\n/**\n * Converts a distance display condition to a typed array that can be used to assign a distance display condition attribute.\n *\n * @param {Cartesian3} offset The cartesian offset\n * @param {Float32Array} [result] The array to store the result in, if undefined a new instance will be created.\n * @returns {Float32Array} The modified result parameter or a new instance if result was undefined.\n *\n * @example\n * var attributes = primitive.getGeometryInstanceAttributes('an id');\n * attributes.modelMatrix = Cesium.OffsetGeometryInstanceAttribute.toValue(modelMatrix, attributes.modelMatrix);\n */\n\n\nOffsetGeometryInstanceAttribute.toValue = function (offset, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"offset\", offset); //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Float32Array([offset.x, offset.y, offset.z]);\n  }\n\n  result[0] = offset.x;\n  result[1] = offset.y;\n  result[2] = offset.z;\n  return result;\n};\n\nexport default OffsetGeometryInstanceAttribute;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/OffsetGeometryInstanceAttribute.js"],"names":["Check","ComponentDatatype","defaultValue","defined","OffsetGeometryInstanceAttribute","x","y","z","value","Float32Array","Object","defineProperties","prototype","componentDatatype","get","FLOAT","componentsPerAttribute","normalize","fromCartesian3","offset","toValue","result"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,iBAAP,MAA8B,wBAA9B;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,cAApB;AAEA;;;;;;;;;;;;;;;;AAeA,SAASC,+BAAT,CAAyCC,CAAzC,EAA4CC,CAA5C,EAA+CC,CAA/C,EAAkD;AAChDF,EAAAA,CAAC,GAAGH,YAAY,CAACG,CAAD,EAAI,CAAJ,CAAhB;AACAC,EAAAA,CAAC,GAAGJ,YAAY,CAACI,CAAD,EAAI,CAAJ,CAAhB;AACAC,EAAAA,CAAC,GAAGL,YAAY,CAACK,CAAD,EAAI,CAAJ,CAAhB;AAEA;;;;;;AAKA,OAAKC,KAAL,GAAa,IAAIC,YAAJ,CAAiB,CAACJ,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAjB,CAAb;AACD;;AAEDG,MAAM,CAACC,gBAAP,CAAwBP,+BAA+B,CAACQ,SAAxD,EAAmE;AACjE;;;;;;;;;;;AAWAC,EAAAA,iBAAiB,EAAE;AACjBC,IAAAA,GAAG,EAAE,YAAY;AACf,aAAOb,iBAAiB,CAACc,KAAzB;AACD;AAHgB,GAZ8C;;AAkBjE;;;;;;;;;;AAUAC,EAAAA,sBAAsB,EAAE;AACtBF,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,CAAP;AACD;AAHqB,GA5ByC;;AAkCjE;;;;;;;;;;;;AAYAG,EAAAA,SAAS,EAAE;AACTH,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAP;AACD;AAHQ;AA9CsD,CAAnE;AAqDA;;;;;;;AAMAV,+BAA+B,CAACc,cAAhC,GAAiD,UAAUC,MAAV,EAAkB;AACjE;AACAnB,EAAAA,KAAK,CAACG,OAAN,CAAc,QAAd,EAAwBgB,MAAxB,EAFiE,CAGjE;;AAEA,SAAO,IAAIf,+BAAJ,CAAoCe,MAAM,CAACd,CAA3C,EAA8Cc,MAAM,CAACb,CAArD,EAAwDa,MAAM,CAACZ,CAA/D,CAAP;AACD,CAND;AAQA;;;;;;;;;;;;;AAWAH,+BAA+B,CAACgB,OAAhC,GAA0C,UAAUD,MAAV,EAAkBE,MAAlB,EAA0B;AAClE;AACArB,EAAAA,KAAK,CAACG,OAAN,CAAc,QAAd,EAAwBgB,MAAxB,EAFkE,CAGlE;;AAEA,MAAI,CAAChB,OAAO,CAACkB,MAAD,CAAZ,EAAsB;AACpBA,IAAAA,MAAM,GAAG,IAAIZ,YAAJ,CAAiB,CAACU,MAAM,CAACd,CAAR,EAAWc,MAAM,CAACb,CAAlB,EAAqBa,MAAM,CAACZ,CAA5B,CAAjB,CAAT;AACD;;AAEDc,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYF,MAAM,CAACd,CAAnB;AACAgB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYF,MAAM,CAACb,CAAnB;AACAe,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYF,MAAM,CAACZ,CAAnB;AACA,SAAOc,MAAP;AACD,CAbD;;AAcA,eAAejB,+BAAf","sourcesContent":["import Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\n\n/**\n * Value and type information for per-instance geometry attribute that determines the geometry instance offset\n *\n * @alias OffsetGeometryInstanceAttribute\n * @constructor\n *\n * @param {Number} [x=0] The x translation\n * @param {Number} [y=0] The y translation\n * @param {Number} [z=0] The z translation\n *\n * @private\n *\n * @see GeometryInstance\n * @see GeometryInstanceAttribute\n */\nfunction OffsetGeometryInstanceAttribute(x, y, z) {\n  x = defaultValue(x, 0);\n  y = defaultValue(y, 0);\n  z = defaultValue(z, 0);\n\n  /**\n   * The values for the attributes stored in a typed array.\n   *\n   * @type Float32Array\n   */\n  this.value = new Float32Array([x, y, z]);\n}\n\nObject.defineProperties(OffsetGeometryInstanceAttribute.prototype, {\n  /**\n   * The datatype of each component in the attribute, e.g., individual elements in\n   * {@link OffsetGeometryInstanceAttribute#value}.\n   *\n   * @memberof OffsetGeometryInstanceAttribute.prototype\n   *\n   * @type {ComponentDatatype}\n   * @readonly\n   *\n   * @default {@link ComponentDatatype.FLOAT}\n   */\n  componentDatatype: {\n    get: function () {\n      return ComponentDatatype.FLOAT;\n    },\n  },\n\n  /**\n   * The number of components in the attributes, i.e., {@link OffsetGeometryInstanceAttribute#value}.\n   *\n   * @memberof OffsetGeometryInstanceAttribute.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @default 3\n   */\n  componentsPerAttribute: {\n    get: function () {\n      return 3;\n    },\n  },\n\n  /**\n   * When <code>true</code> and <code>componentDatatype</code> is an integer format,\n   * indicate that the components should be mapped to the range [0, 1] (unsigned)\n   * or [-1, 1] (signed) when they are accessed as floating-point for rendering.\n   *\n   * @memberof OffsetGeometryInstanceAttribute.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  normalize: {\n    get: function () {\n      return false;\n    },\n  },\n});\n\n/**\n * Creates a new {@link OffsetGeometryInstanceAttribute} instance given the provided an enabled flag and {@link DistanceDisplayCondition}.\n *\n * @param {Cartesian3} offset The cartesian offset\n * @returns {OffsetGeometryInstanceAttribute} The new {@link OffsetGeometryInstanceAttribute} instance.\n */\nOffsetGeometryInstanceAttribute.fromCartesian3 = function (offset) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"offset\", offset);\n  //>>includeEnd('debug');\n\n  return new OffsetGeometryInstanceAttribute(offset.x, offset.y, offset.z);\n};\n\n/**\n * Converts a distance display condition to a typed array that can be used to assign a distance display condition attribute.\n *\n * @param {Cartesian3} offset The cartesian offset\n * @param {Float32Array} [result] The array to store the result in, if undefined a new instance will be created.\n * @returns {Float32Array} The modified result parameter or a new instance if result was undefined.\n *\n * @example\n * var attributes = primitive.getGeometryInstanceAttributes('an id');\n * attributes.modelMatrix = Cesium.OffsetGeometryInstanceAttribute.toValue(modelMatrix, attributes.modelMatrix);\n */\nOffsetGeometryInstanceAttribute.toValue = function (offset, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"offset\", offset);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Float32Array([offset.x, offset.y, offset.z]);\n  }\n\n  result[0] = offset.x;\n  result[1] = offset.y;\n  result[2] = offset.z;\n  return result;\n};\nexport default OffsetGeometryInstanceAttribute;\n"]},"metadata":{},"sourceType":"module"}