{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\n/**\n * Represents a command to the renderer for clearing a framebuffer.\n *\n * @private\n * @constructor\n */\n\nfunction ClearCommand(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  /**\n   * The value to clear the color buffer to.  When <code>undefined</code>, the color buffer is not cleared.\n   *\n   * @type {Color}\n   *\n   * @default undefined\n   */\n\n  this.color = options.color;\n  /**\n   * The value to clear the depth buffer to.  When <code>undefined</code>, the depth buffer is not cleared.\n   *\n   * @type {Number}\n   *\n   * @default undefined\n   */\n\n  this.depth = options.depth;\n  /**\n   * The value to clear the stencil buffer to.  When <code>undefined</code>, the stencil buffer is not cleared.\n   *\n   * @type {Number}\n   *\n   * @default undefined\n   */\n\n  this.stencil = options.stencil;\n  /**\n   * The render state to apply when executing the clear command.  The following states affect clearing:\n   * scissor test, color mask, depth mask, and stencil mask.  When the render state is\n   * <code>undefined</code>, the default render state is used.\n   *\n   * @type {RenderState}\n   *\n   * @default undefined\n   */\n\n  this.renderState = options.renderState;\n  /**\n   * The framebuffer to clear.\n   *\n   * @type {Framebuffer}\n   *\n   * @default undefined\n   */\n\n  this.framebuffer = options.framebuffer;\n  /**\n   * The object who created this command.  This is useful for debugging command\n   * execution; it allows you to see who created a command when you only have a\n   * reference to the command, and can be used to selectively execute commands\n   * with {@link Scene#debugCommandFilter}.\n   *\n   * @type {Object}\n   *\n   * @default undefined\n   *\n   * @see Scene#debugCommandFilter\n   */\n\n  this.owner = options.owner;\n  /**\n   * The pass in which to run this command.\n   *\n   * @type {Pass}\n   *\n   * @default undefined\n   */\n\n  this.pass = options.pass;\n}\n/**\n * Clears color to (0.0, 0.0, 0.0, 0.0); depth to 1.0; and stencil to 0.\n *\n * @type {ClearCommand}\n *\n * @constant\n */\n\n\nClearCommand.ALL = Object.freeze(new ClearCommand({\n  color: new Color(0.0, 0.0, 0.0, 0.0),\n  depth: 1.0,\n  stencil: 0.0\n}));\n\nClearCommand.prototype.execute = function (context, passState) {\n  context.clear(this, passState);\n};\n\nexport default ClearCommand;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Renderer/ClearCommand.js"],"names":["Color","defaultValue","ClearCommand","options","EMPTY_OBJECT","color","depth","stencil","renderState","framebuffer","owner","pass","ALL","Object","freeze","prototype","execute","context","passState","clear"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AAEA;;;;;;;AAMA,SAASC,YAAT,CAAsBC,OAAtB,EAA+B;AAC7BA,EAAAA,OAAO,GAAGF,YAAY,CAACE,OAAD,EAAUF,YAAY,CAACG,YAAvB,CAAtB;AAEA;;;;;;;;AAOA,OAAKC,KAAL,GAAaF,OAAO,CAACE,KAArB;AAEA;;;;;;;;AAOA,OAAKC,KAAL,GAAaH,OAAO,CAACG,KAArB;AAEA;;;;;;;;AAOA,OAAKC,OAAL,GAAeJ,OAAO,CAACI,OAAvB;AAEA;;;;;;;;;;AASA,OAAKC,WAAL,GAAmBL,OAAO,CAACK,WAA3B;AAEA;;;;;;;;AAOA,OAAKC,WAAL,GAAmBN,OAAO,CAACM,WAA3B;AAEA;;;;;;;;;;;;;AAYA,OAAKC,KAAL,GAAaP,OAAO,CAACO,KAArB;AAEA;;;;;;;;AAOA,OAAKC,IAAL,GAAYR,OAAO,CAACQ,IAApB;AACD;AAED;;;;;;;;;AAOAT,YAAY,CAACU,GAAb,GAAmBC,MAAM,CAACC,MAAP,CACjB,IAAIZ,YAAJ,CAAiB;AACfG,EAAAA,KAAK,EAAE,IAAIL,KAAJ,CAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,CADQ;AAEfM,EAAAA,KAAK,EAAE,GAFQ;AAGfC,EAAAA,OAAO,EAAE;AAHM,CAAjB,CADiB,CAAnB;;AAQAL,YAAY,CAACa,SAAb,CAAuBC,OAAvB,GAAiC,UAAUC,OAAV,EAAmBC,SAAnB,EAA8B;AAC7DD,EAAAA,OAAO,CAACE,KAAR,CAAc,IAAd,EAAoBD,SAApB;AACD,CAFD;;AAGA,eAAehB,YAAf","sourcesContent":["import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\n\n/**\n * Represents a command to the renderer for clearing a framebuffer.\n *\n * @private\n * @constructor\n */\nfunction ClearCommand(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  /**\n   * The value to clear the color buffer to.  When <code>undefined</code>, the color buffer is not cleared.\n   *\n   * @type {Color}\n   *\n   * @default undefined\n   */\n  this.color = options.color;\n\n  /**\n   * The value to clear the depth buffer to.  When <code>undefined</code>, the depth buffer is not cleared.\n   *\n   * @type {Number}\n   *\n   * @default undefined\n   */\n  this.depth = options.depth;\n\n  /**\n   * The value to clear the stencil buffer to.  When <code>undefined</code>, the stencil buffer is not cleared.\n   *\n   * @type {Number}\n   *\n   * @default undefined\n   */\n  this.stencil = options.stencil;\n\n  /**\n   * The render state to apply when executing the clear command.  The following states affect clearing:\n   * scissor test, color mask, depth mask, and stencil mask.  When the render state is\n   * <code>undefined</code>, the default render state is used.\n   *\n   * @type {RenderState}\n   *\n   * @default undefined\n   */\n  this.renderState = options.renderState;\n\n  /**\n   * The framebuffer to clear.\n   *\n   * @type {Framebuffer}\n   *\n   * @default undefined\n   */\n  this.framebuffer = options.framebuffer;\n\n  /**\n   * The object who created this command.  This is useful for debugging command\n   * execution; it allows you to see who created a command when you only have a\n   * reference to the command, and can be used to selectively execute commands\n   * with {@link Scene#debugCommandFilter}.\n   *\n   * @type {Object}\n   *\n   * @default undefined\n   *\n   * @see Scene#debugCommandFilter\n   */\n  this.owner = options.owner;\n\n  /**\n   * The pass in which to run this command.\n   *\n   * @type {Pass}\n   *\n   * @default undefined\n   */\n  this.pass = options.pass;\n}\n\n/**\n * Clears color to (0.0, 0.0, 0.0, 0.0); depth to 1.0; and stencil to 0.\n *\n * @type {ClearCommand}\n *\n * @constant\n */\nClearCommand.ALL = Object.freeze(\n  new ClearCommand({\n    color: new Color(0.0, 0.0, 0.0, 0.0),\n    depth: 1.0,\n    stencil: 0.0,\n  })\n);\n\nClearCommand.prototype.execute = function (context, passState) {\n  context.clear(this, passState);\n};\nexport default ClearCommand;\n"]},"metadata":{},"sourceType":"module"}