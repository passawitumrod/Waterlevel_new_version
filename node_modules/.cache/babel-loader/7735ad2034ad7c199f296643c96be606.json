{"ast":null,"code":"import ComponentDatatype from '../../Core/ComponentDatatype.js';\n/**\n * Returns a function to read and convert data from a DataView into an array.\n *\n * @param {Number} componentType Type to convert the data to.\n * @returns {ComponentReader} Function that reads and converts data.\n *\n * @private\n */\n\nfunction getComponentReader(componentType) {\n  switch (componentType) {\n    case ComponentDatatype.BYTE:\n      return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n        for (var i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getInt8(byteOffset + i * componentTypeByteLength);\n        }\n      };\n\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n        for (var i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getUint8(byteOffset + i * componentTypeByteLength);\n        }\n      };\n\n    case ComponentDatatype.SHORT:\n      return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n        for (var i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getInt16(byteOffset + i * componentTypeByteLength, true);\n        }\n      };\n\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n        for (var i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getUint16(byteOffset + i * componentTypeByteLength, true);\n        }\n      };\n\n    case ComponentDatatype.INT:\n      return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n        for (var i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getInt32(byteOffset + i * componentTypeByteLength, true);\n        }\n      };\n\n    case ComponentDatatype.UNSIGNED_INT:\n      return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n        for (var i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getUint32(byteOffset + i * componentTypeByteLength, true);\n        }\n      };\n\n    case ComponentDatatype.FLOAT:\n      return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n        for (var i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getFloat32(byteOffset + i * componentTypeByteLength, true);\n        }\n      };\n\n    case ComponentDatatype.DOUBLE:\n      return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n        for (var i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getFloat64(byteOffset + i * componentTypeByteLength, true);\n        }\n      };\n  }\n}\n/**\n * A callback function that logs messages.\n * @callback ComponentReader\n *\n * @param {DataView} dataView The data view to read from.\n * @param {Number} byteOffset The byte offset applied when reading from the data view.\n * @param {Number} numberOfComponents The number of components to read.\n * @param {Number} componentTypeByteLength The byte length of each component.\n * @param {Number} result An array storing the components that are read.\n */\n\n\nexport default getComponentReader;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/ThirdParty/GltfPipeline/getComponentReader.js"],"names":["ComponentDatatype","getComponentReader","componentType","BYTE","dataView","byteOffset","numberOfComponents","componentTypeByteLength","result","i","getInt8","UNSIGNED_BYTE","getUint8","SHORT","getInt16","UNSIGNED_SHORT","getUint16","INT","getInt32","UNSIGNED_INT","getUint32","FLOAT","getFloat32","DOUBLE","getFloat64"],"mappings":"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","sourcesContent":["import ComponentDatatype from '../../Core/ComponentDatatype.js'\n\n    /**\n     * Returns a function to read and convert data from a DataView into an array.\n     *\n     * @param {Number} componentType Type to convert the data to.\n     * @returns {ComponentReader} Function that reads and converts data.\n     *\n     * @private\n     */\n    function getComponentReader(componentType) {\n        switch (componentType) {\n            case ComponentDatatype.BYTE:\n                return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n                    for (var i = 0; i < numberOfComponents; ++i) {\n                        result[i] = dataView.getInt8(byteOffset + i * componentTypeByteLength);\n                    }\n                };\n            case ComponentDatatype.UNSIGNED_BYTE:\n                return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n                    for (var i = 0; i < numberOfComponents; ++i) {\n                        result[i] = dataView.getUint8(byteOffset + i * componentTypeByteLength);\n                    }\n                };\n            case ComponentDatatype.SHORT:\n                return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n                    for (var i = 0; i < numberOfComponents; ++i) {\n                        result[i] = dataView.getInt16(byteOffset + i * componentTypeByteLength, true);\n                    }\n                };\n            case ComponentDatatype.UNSIGNED_SHORT:\n                return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n                    for (var i = 0; i < numberOfComponents; ++i) {\n                        result[i] = dataView.getUint16(byteOffset + i * componentTypeByteLength, true);\n                    }\n                };\n            case ComponentDatatype.INT:\n                return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n                    for (var i = 0; i < numberOfComponents; ++i) {\n                        result[i] = dataView.getInt32(byteOffset + i * componentTypeByteLength, true);\n                    }\n                };\n            case ComponentDatatype.UNSIGNED_INT:\n                return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n                    for (var i = 0; i < numberOfComponents; ++i) {\n                        result[i] = dataView.getUint32(byteOffset + i * componentTypeByteLength, true);\n                    }\n                };\n            case ComponentDatatype.FLOAT:\n                return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n                    for (var i = 0; i < numberOfComponents; ++i) {\n                        result[i] = dataView.getFloat32(byteOffset + i * componentTypeByteLength, true);\n                    }\n                };\n            case ComponentDatatype.DOUBLE:\n                return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n                    for (var i = 0; i < numberOfComponents; ++i) {\n                        result[i] = dataView.getFloat64(byteOffset + i * componentTypeByteLength, true);\n                    }\n                };\n        }\n    }\n\n    /**\n     * A callback function that logs messages.\n     * @callback ComponentReader\n     *\n     * @param {DataView} dataView The data view to read from.\n     * @param {Number} byteOffset The byte offset applied when reading from the data view.\n     * @param {Number} numberOfComponents The number of components to read.\n     * @param {Number} componentTypeByteLength The byte length of each component.\n     * @param {Number} result An array storing the components that are read.\n     */\n\n    export default getComponentReader;\n"]},"metadata":{},"sourceType":"module"}