{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Quaternion from \"./Quaternion.js\";\nvar defaultScale = new Cartesian3(1.0, 1.0, 1.0);\nvar defaultTranslation = Cartesian3.ZERO;\nvar defaultRotation = Quaternion.IDENTITY;\n/**\n * An affine transformation defined by a translation, rotation, and scale.\n * @alias TranslationRotationScale\n * @constructor\n *\n * @param {Cartesian3} [translation=Cartesian3.ZERO] A {@link Cartesian3} specifying the (x, y, z) translation to apply to the node.\n * @param {Quaternion} [rotation=Quaternion.IDENTITY] A {@link Quaternion} specifying the (x, y, z, w) rotation to apply to the node.\n * @param {Cartesian3} [scale=new Cartesian3(1.0, 1.0, 1.0)] A {@link Cartesian3} specifying the (x, y, z) scaling to apply to the node.\n */\n\nfunction TranslationRotationScale(translation, rotation, scale) {\n  /**\n   * Gets or sets the (x, y, z) translation to apply to the node.\n   * @type {Cartesian3}\n   * @default Cartesian3.ZERO\n   */\n  this.translation = Cartesian3.clone(defaultValue(translation, defaultTranslation));\n  /**\n   * Gets or sets the (x, y, z, w) rotation to apply to the node.\n   * @type {Quaternion}\n   * @default Quaternion.IDENTITY\n   */\n\n  this.rotation = Quaternion.clone(defaultValue(rotation, defaultRotation));\n  /**\n   * Gets or sets the (x, y, z) scaling to apply to the node.\n   * @type {Cartesian3}\n   * @default new Cartesian3(1.0, 1.0, 1.0)\n   */\n\n  this.scale = Cartesian3.clone(defaultValue(scale, defaultScale));\n}\n/**\n * Compares this instance against the provided instance and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {TranslationRotationScale} [right] The right hand side TranslationRotationScale.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\n\n\nTranslationRotationScale.prototype.equals = function (right) {\n  return this === right || defined(right) && Cartesian3.equals(this.translation, right.translation) && Quaternion.equals(this.rotation, right.rotation) && Cartesian3.equals(this.scale, right.scale);\n};\n\nexport default TranslationRotationScale;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/TranslationRotationScale.js"],"names":["Cartesian3","defaultValue","defined","Quaternion","defaultScale","defaultTranslation","ZERO","defaultRotation","IDENTITY","TranslationRotationScale","translation","rotation","scale","clone","prototype","equals","right"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,iBAAvB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AAEA,IAAIC,YAAY,GAAG,IAAIJ,UAAJ,CAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,CAAnB;AACA,IAAIK,kBAAkB,GAAGL,UAAU,CAACM,IAApC;AACA,IAAIC,eAAe,GAAGJ,UAAU,CAACK,QAAjC;AAEA;;;;;;;;;;AASA,SAASC,wBAAT,CAAkCC,WAAlC,EAA+CC,QAA/C,EAAyDC,KAAzD,EAAgE;AAC9D;;;;;AAKA,OAAKF,WAAL,GAAmBV,UAAU,CAACa,KAAX,CACjBZ,YAAY,CAACS,WAAD,EAAcL,kBAAd,CADK,CAAnB;AAIA;;;;;;AAKA,OAAKM,QAAL,GAAgBR,UAAU,CAACU,KAAX,CAAiBZ,YAAY,CAACU,QAAD,EAAWJ,eAAX,CAA7B,CAAhB;AAEA;;;;;;AAKA,OAAKK,KAAL,GAAaZ,UAAU,CAACa,KAAX,CAAiBZ,YAAY,CAACW,KAAD,EAAQR,YAAR,CAA7B,CAAb;AACD;AAED;;;;;;;;;AAOAK,wBAAwB,CAACK,SAAzB,CAAmCC,MAAnC,GAA4C,UAAUC,KAAV,EAAiB;AAC3D,SACE,SAASA,KAAT,IACCd,OAAO,CAACc,KAAD,CAAP,IACChB,UAAU,CAACe,MAAX,CAAkB,KAAKL,WAAvB,EAAoCM,KAAK,CAACN,WAA1C,CADD,IAECP,UAAU,CAACY,MAAX,CAAkB,KAAKJ,QAAvB,EAAiCK,KAAK,CAACL,QAAvC,CAFD,IAGCX,UAAU,CAACe,MAAX,CAAkB,KAAKH,KAAvB,EAA8BI,KAAK,CAACJ,KAApC,CALJ;AAOD,CARD;;AASA,eAAeH,wBAAf","sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Quaternion from \"./Quaternion.js\";\n\nvar defaultScale = new Cartesian3(1.0, 1.0, 1.0);\nvar defaultTranslation = Cartesian3.ZERO;\nvar defaultRotation = Quaternion.IDENTITY;\n\n/**\n * An affine transformation defined by a translation, rotation, and scale.\n * @alias TranslationRotationScale\n * @constructor\n *\n * @param {Cartesian3} [translation=Cartesian3.ZERO] A {@link Cartesian3} specifying the (x, y, z) translation to apply to the node.\n * @param {Quaternion} [rotation=Quaternion.IDENTITY] A {@link Quaternion} specifying the (x, y, z, w) rotation to apply to the node.\n * @param {Cartesian3} [scale=new Cartesian3(1.0, 1.0, 1.0)] A {@link Cartesian3} specifying the (x, y, z) scaling to apply to the node.\n */\nfunction TranslationRotationScale(translation, rotation, scale) {\n  /**\n   * Gets or sets the (x, y, z) translation to apply to the node.\n   * @type {Cartesian3}\n   * @default Cartesian3.ZERO\n   */\n  this.translation = Cartesian3.clone(\n    defaultValue(translation, defaultTranslation)\n  );\n\n  /**\n   * Gets or sets the (x, y, z, w) rotation to apply to the node.\n   * @type {Quaternion}\n   * @default Quaternion.IDENTITY\n   */\n  this.rotation = Quaternion.clone(defaultValue(rotation, defaultRotation));\n\n  /**\n   * Gets or sets the (x, y, z) scaling to apply to the node.\n   * @type {Cartesian3}\n   * @default new Cartesian3(1.0, 1.0, 1.0)\n   */\n  this.scale = Cartesian3.clone(defaultValue(scale, defaultScale));\n}\n\n/**\n * Compares this instance against the provided instance and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {TranslationRotationScale} [right] The right hand side TranslationRotationScale.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nTranslationRotationScale.prototype.equals = function (right) {\n  return (\n    this === right ||\n    (defined(right) &&\n      Cartesian3.equals(this.translation, right.translation) &&\n      Quaternion.equals(this.rotation, right.rotation) &&\n      Cartesian3.equals(this.scale, right.scale))\n  );\n};\nexport default TranslationRotationScale;\n"]},"metadata":{},"sourceType":"module"}