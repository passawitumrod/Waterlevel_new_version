{"ast":null,"code":"import defined from \"./defined.js\";\nimport getTimestamp from \"./getTimestamp.js\";\nvar implementation;\n\nif (typeof requestAnimationFrame !== \"undefined\") {\n  implementation = requestAnimationFrame;\n}\n\n(function () {\n  // look for vendor prefixed function\n  if (!defined(implementation) && typeof window !== \"undefined\") {\n    var vendors = [\"webkit\", \"moz\", \"ms\", \"o\"];\n    var i = 0;\n    var len = vendors.length;\n\n    while (i < len && !defined(implementation)) {\n      implementation = window[vendors[i] + \"RequestAnimationFrame\"];\n      ++i;\n    }\n  } // build an implementation based on setTimeout\n\n\n  if (!defined(implementation)) {\n    var msPerFrame = 1000.0 / 60.0;\n    var lastFrameTime = 0;\n\n    implementation = function (callback) {\n      var currentTime = getTimestamp(); // schedule the callback to target 60fps, 16.7ms per frame,\n      // accounting for the time taken by the callback\n\n      var delay = Math.max(msPerFrame - (currentTime - lastFrameTime), 0);\n      lastFrameTime = currentTime + delay;\n      return setTimeout(function () {\n        callback(lastFrameTime);\n      }, delay);\n    };\n  }\n})();\n/**\n * A browser-independent function to request a new animation frame.  This is used to create\n * an application's draw loop as shown in the example below.\n *\n * @exports requestAnimationFrame\n *\n * @param {requestAnimationFrame~Callback} callback The function to call when the next frame should be drawn.\n * @returns {Number} An ID that can be passed to {@link cancelAnimationFrame} to cancel the request.\n *\n *\n * @example\n * // Create a draw loop using requestAnimationFrame. The\n * // tick callback function is called for every animation frame.\n * function tick() {\n *   scene.render();\n *   Cesium.requestAnimationFrame(tick);\n * }\n * tick();\n *\n * @see {@link https://www.w3.org/TR/html51/webappapis.html#animation-frames|The Web API Animation Frames interface}\n */\n\n\nfunction requestAnimationFramePolyFill(callback) {\n  // we need this extra wrapper function because the native requestAnimationFrame\n  // functions must be invoked on the global scope (window), which is not the case\n  // if invoked as Cesium.requestAnimationFrame(callback)\n  return implementation(callback);\n}\n/**\n * A function that will be called when the next frame should be drawn.\n * @callback requestAnimationFrame~Callback\n *\n * @param {Number} timestamp A timestamp for the frame, in milliseconds.\n */\n\n\nexport default requestAnimationFramePolyFill;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/requestAnimationFrame.js"],"names":["defined","getTimestamp","implementation","requestAnimationFrame","window","vendors","i","len","length","msPerFrame","lastFrameTime","callback","currentTime","delay","Math","max","setTimeout","requestAnimationFramePolyFill"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AAEA,IAAIC,cAAJ;;AACA,IAAI,OAAOC,qBAAP,KAAiC,WAArC,EAAkD;AAChDD,EAAAA,cAAc,GAAGC,qBAAjB;AACD;;AAED,CAAC,YAAY;AACX;AACA,MAAI,CAACH,OAAO,CAACE,cAAD,CAAR,IAA4B,OAAOE,MAAP,KAAkB,WAAlD,EAA+D;AAC7D,QAAIC,OAAO,GAAG,CAAC,QAAD,EAAW,KAAX,EAAkB,IAAlB,EAAwB,GAAxB,CAAd;AACA,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,GAAG,GAAGF,OAAO,CAACG,MAAlB;;AACA,WAAOF,CAAC,GAAGC,GAAJ,IAAW,CAACP,OAAO,CAACE,cAAD,CAA1B,EAA4C;AAC1CA,MAAAA,cAAc,GAAGE,MAAM,CAACC,OAAO,CAACC,CAAD,CAAP,GAAa,uBAAd,CAAvB;AACA,QAAEA,CAAF;AACD;AACF,GAVU,CAYX;;;AACA,MAAI,CAACN,OAAO,CAACE,cAAD,CAAZ,EAA8B;AAC5B,QAAIO,UAAU,GAAG,SAAS,IAA1B;AACA,QAAIC,aAAa,GAAG,CAApB;;AACAR,IAAAA,cAAc,GAAG,UAAUS,QAAV,EAAoB;AACnC,UAAIC,WAAW,GAAGX,YAAY,EAA9B,CADmC,CAGnC;AACA;;AACA,UAAIY,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASN,UAAU,IAAIG,WAAW,GAAGF,aAAlB,CAAnB,EAAqD,CAArD,CAAZ;AACAA,MAAAA,aAAa,GAAGE,WAAW,GAAGC,KAA9B;AAEA,aAAOG,UAAU,CAAC,YAAY;AAC5BL,QAAAA,QAAQ,CAACD,aAAD,CAAR;AACD,OAFgB,EAEdG,KAFc,CAAjB;AAGD,KAXD;AAYD;AACF,CA7BD;AA+BA;;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAASI,6BAAT,CAAuCN,QAAvC,EAAiD;AAC/C;AACA;AACA;AACA,SAAOT,cAAc,CAACS,QAAD,CAArB;AACD;AAED;;;;;;;;AAMA,eAAeM,6BAAf","sourcesContent":["import defined from \"./defined.js\";\nimport getTimestamp from \"./getTimestamp.js\";\n\nvar implementation;\nif (typeof requestAnimationFrame !== \"undefined\") {\n  implementation = requestAnimationFrame;\n}\n\n(function () {\n  // look for vendor prefixed function\n  if (!defined(implementation) && typeof window !== \"undefined\") {\n    var vendors = [\"webkit\", \"moz\", \"ms\", \"o\"];\n    var i = 0;\n    var len = vendors.length;\n    while (i < len && !defined(implementation)) {\n      implementation = window[vendors[i] + \"RequestAnimationFrame\"];\n      ++i;\n    }\n  }\n\n  // build an implementation based on setTimeout\n  if (!defined(implementation)) {\n    var msPerFrame = 1000.0 / 60.0;\n    var lastFrameTime = 0;\n    implementation = function (callback) {\n      var currentTime = getTimestamp();\n\n      // schedule the callback to target 60fps, 16.7ms per frame,\n      // accounting for the time taken by the callback\n      var delay = Math.max(msPerFrame - (currentTime - lastFrameTime), 0);\n      lastFrameTime = currentTime + delay;\n\n      return setTimeout(function () {\n        callback(lastFrameTime);\n      }, delay);\n    };\n  }\n})();\n\n/**\n * A browser-independent function to request a new animation frame.  This is used to create\n * an application's draw loop as shown in the example below.\n *\n * @exports requestAnimationFrame\n *\n * @param {requestAnimationFrame~Callback} callback The function to call when the next frame should be drawn.\n * @returns {Number} An ID that can be passed to {@link cancelAnimationFrame} to cancel the request.\n *\n *\n * @example\n * // Create a draw loop using requestAnimationFrame. The\n * // tick callback function is called for every animation frame.\n * function tick() {\n *   scene.render();\n *   Cesium.requestAnimationFrame(tick);\n * }\n * tick();\n *\n * @see {@link https://www.w3.org/TR/html51/webappapis.html#animation-frames|The Web API Animation Frames interface}\n */\nfunction requestAnimationFramePolyFill(callback) {\n  // we need this extra wrapper function because the native requestAnimationFrame\n  // functions must be invoked on the global scope (window), which is not the case\n  // if invoked as Cesium.requestAnimationFrame(callback)\n  return implementation(callback);\n}\n\n/**\n * A function that will be called when the next frame should be drawn.\n * @callback requestAnimationFrame~Callback\n *\n * @param {Number} timestamp A timestamp for the frame, in milliseconds.\n */\nexport default requestAnimationFramePolyFill;\n"]},"metadata":{},"sourceType":"module"}