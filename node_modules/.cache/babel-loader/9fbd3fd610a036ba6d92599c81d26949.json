{"ast":null,"code":"import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\n/**\n * A function to port GLSL shaders from GLSL ES 1.00 to GLSL ES 3.00\n *\n * This function is nowhere near comprehensive or complete. It just\n * handles some common cases.\n *\n * Note that this function requires the presence of the\n * \"#define OUTPUT_DECLARATION\" line that is appended\n * by ShaderSource.\n *\n * @private\n */\n\nfunction modernizeShader(source, isFragmentShader) {\n  var outputDeclarationRegex = /#define OUTPUT_DECLARATION/;\n  var splitSource = source.split(\"\\n\");\n\n  if (/#version 300 es/g.test(source)) {\n    return source;\n  }\n\n  var outputDeclarationLine = -1;\n  var i, line;\n\n  for (i = 0; i < splitSource.length; ++i) {\n    line = splitSource[i];\n\n    if (outputDeclarationRegex.test(line)) {\n      outputDeclarationLine = i;\n      break;\n    }\n  }\n\n  if (outputDeclarationLine === -1) {\n    throw new DeveloperError(\"Could not find a #define OUTPUT_DECLARATION!\");\n  }\n\n  var outputVariables = [];\n\n  for (i = 0; i < 10; i++) {\n    var fragDataString = \"gl_FragData\\\\[\" + i + \"\\\\]\";\n    var newOutput = \"czm_out\" + i;\n    var regex = new RegExp(fragDataString, \"g\");\n\n    if (regex.test(source)) {\n      setAdd(newOutput, outputVariables);\n      replaceInSourceString(fragDataString, newOutput, splitSource);\n      splitSource.splice(outputDeclarationLine, 0, \"layout(location = \" + i + \") out vec4 \" + newOutput + \";\");\n      outputDeclarationLine += 1;\n    }\n  }\n\n  var czmFragColor = \"czm_fragColor\";\n\n  if (findInSource(\"gl_FragColor\", splitSource)) {\n    setAdd(czmFragColor, outputVariables);\n    replaceInSourceString(\"gl_FragColor\", czmFragColor, splitSource);\n    splitSource.splice(outputDeclarationLine, 0, \"layout(location = 0) out vec4 czm_fragColor;\");\n    outputDeclarationLine += 1;\n  }\n\n  var variableMap = getVariablePreprocessorBranch(outputVariables, splitSource);\n  var lineAdds = {};\n\n  for (i = 0; i < splitSource.length; i++) {\n    line = splitSource[i];\n\n    for (var variable in variableMap) {\n      if (variableMap.hasOwnProperty(variable)) {\n        var matchVar = new RegExp(\"(layout)[^]+(out)[^]+(\" + variable + \")[^]+\", \"g\");\n\n        if (matchVar.test(line)) {\n          lineAdds[line] = variable;\n        }\n      }\n    }\n  }\n\n  for (var layoutDeclaration in lineAdds) {\n    if (lineAdds.hasOwnProperty(layoutDeclaration)) {\n      var variableName = lineAdds[layoutDeclaration];\n      var lineNumber = splitSource.indexOf(layoutDeclaration);\n      var entry = variableMap[variableName];\n      var depth = entry.length;\n      var d;\n\n      for (d = 0; d < depth; d++) {\n        splitSource.splice(lineNumber, 0, entry[d]);\n      }\n\n      lineNumber += depth + 1;\n\n      for (d = depth - 1; d >= 0; d--) {\n        splitSource.splice(lineNumber, 0, \"#endif //\" + entry[d]);\n      }\n    }\n  }\n\n  var versionThree = \"#version 300 es\";\n  var foundVersion = false;\n\n  for (i = 0; i < splitSource.length; i++) {\n    if (/#version/.test(splitSource[i])) {\n      splitSource[i] = versionThree;\n      foundVersion = true;\n    }\n  }\n\n  if (!foundVersion) {\n    splitSource.splice(0, 0, versionThree);\n  }\n\n  removeExtension(\"EXT_draw_buffers\", splitSource);\n  removeExtension(\"EXT_frag_depth\", splitSource);\n  replaceInSourceString(\"texture2D\", \"texture\", splitSource);\n  replaceInSourceString(\"texture3D\", \"texture\", splitSource);\n  replaceInSourceString(\"textureCube\", \"texture\", splitSource);\n  replaceInSourceString(\"gl_FragDepthEXT\", \"gl_FragDepth\", splitSource);\n\n  if (isFragmentShader) {\n    replaceInSourceString(\"varying\", \"in\", splitSource);\n  } else {\n    replaceInSourceString(\"attribute\", \"in\", splitSource);\n    replaceInSourceString(\"varying\", \"out\", splitSource);\n  }\n\n  return compileSource(splitSource);\n} // Note that this fails if your string looks like\n// searchString[singleCharacter]searchString\n\n\nfunction replaceInSourceString(str, replacement, splitSource) {\n  var regexStr = \"(^|[^\\\\w])(\" + str + \")($|[^\\\\w])\";\n  var regex = new RegExp(regexStr, \"g\");\n  var splitSourceLength = splitSource.length;\n\n  for (var i = 0; i < splitSourceLength; ++i) {\n    var line = splitSource[i];\n    splitSource[i] = line.replace(regex, \"$1\" + replacement + \"$3\");\n  }\n}\n\nfunction replaceInSourceRegex(regex, replacement, splitSource) {\n  var splitSourceLength = splitSource.length;\n\n  for (var i = 0; i < splitSourceLength; ++i) {\n    var line = splitSource[i];\n    splitSource[i] = line.replace(regex, replacement);\n  }\n}\n\nfunction findInSource(str, splitSource) {\n  var regexStr = \"(^|[^\\\\w])(\" + str + \")($|[^\\\\w])\";\n  var regex = new RegExp(regexStr, \"g\");\n  var splitSourceLength = splitSource.length;\n\n  for (var i = 0; i < splitSourceLength; ++i) {\n    var line = splitSource[i];\n\n    if (regex.test(line)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction compileSource(splitSource) {\n  var wholeSource = \"\";\n  var splitSourceLength = splitSource.length;\n\n  for (var i = 0; i < splitSourceLength; ++i) {\n    wholeSource += splitSource[i] + \"\\n\";\n  }\n\n  return wholeSource;\n}\n\nfunction setAdd(variable, set) {\n  if (set.indexOf(variable) === -1) {\n    set.push(variable);\n  }\n}\n\nfunction getVariablePreprocessorBranch(layoutVariables, splitSource) {\n  var variableMap = {};\n  var numLayoutVariables = layoutVariables.length;\n  var stack = [];\n\n  for (var i = 0; i < splitSource.length; ++i) {\n    var line = splitSource[i];\n    var hasIF = /(#ifdef|#if)/g.test(line);\n    var hasELSE = /#else/g.test(line);\n    var hasENDIF = /#endif/g.test(line);\n\n    if (hasIF) {\n      stack.push(line);\n    } else if (hasELSE) {\n      var top = stack[stack.length - 1];\n      var op = top.replace(\"ifdef\", \"ifndef\");\n\n      if (/if/g.test(op)) {\n        op = op.replace(/(#if\\s+)(\\S*)([^]*)/, \"$1!($2)$3\");\n      }\n\n      stack.pop();\n      stack.push(op);\n    } else if (hasENDIF) {\n      stack.pop();\n    } else if (!/layout/g.test(line)) {\n      for (var varIndex = 0; varIndex < numLayoutVariables; ++varIndex) {\n        var varName = layoutVariables[varIndex];\n\n        if (line.indexOf(varName) !== -1) {\n          if (!defined(variableMap[varName])) {\n            variableMap[varName] = stack.slice();\n          } else {\n            variableMap[varName] = variableMap[varName].filter(function (x) {\n              return stack.indexOf(x) >= 0;\n            });\n          }\n        }\n      }\n    }\n  }\n\n  return variableMap;\n}\n\nfunction removeExtension(name, splitSource) {\n  var regex = \"#extension\\\\s+GL_\" + name + \"\\\\s+:\\\\s+[a-zA-Z0-9]+\\\\s*$\";\n  replaceInSourceRegex(new RegExp(regex, \"g\"), \"\", splitSource);\n}\n\nexport default modernizeShader;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Renderer/modernizeShader.js"],"names":["defined","DeveloperError","modernizeShader","source","isFragmentShader","outputDeclarationRegex","splitSource","split","test","outputDeclarationLine","i","line","length","outputVariables","fragDataString","newOutput","regex","RegExp","setAdd","replaceInSourceString","splice","czmFragColor","findInSource","variableMap","getVariablePreprocessorBranch","lineAdds","variable","hasOwnProperty","matchVar","layoutDeclaration","variableName","lineNumber","indexOf","entry","depth","d","versionThree","foundVersion","removeExtension","compileSource","str","replacement","regexStr","splitSourceLength","replace","replaceInSourceRegex","wholeSource","set","push","layoutVariables","numLayoutVariables","stack","hasIF","hasELSE","hasENDIF","top","op","pop","varIndex","varName","slice","filter","x","name"],"mappings":"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","sourcesContent":["import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\n\n/**\n * A function to port GLSL shaders from GLSL ES 1.00 to GLSL ES 3.00\n *\n * This function is nowhere near comprehensive or complete. It just\n * handles some common cases.\n *\n * Note that this function requires the presence of the\n * \"#define OUTPUT_DECLARATION\" line that is appended\n * by ShaderSource.\n *\n * @private\n */\nfunction modernizeShader(source, isFragmentShader) {\n  var outputDeclarationRegex = /#define OUTPUT_DECLARATION/;\n  var splitSource = source.split(\"\\n\");\n\n  if (/#version 300 es/g.test(source)) {\n    return source;\n  }\n\n  var outputDeclarationLine = -1;\n  var i, line;\n  for (i = 0; i < splitSource.length; ++i) {\n    line = splitSource[i];\n    if (outputDeclarationRegex.test(line)) {\n      outputDeclarationLine = i;\n      break;\n    }\n  }\n\n  if (outputDeclarationLine === -1) {\n    throw new DeveloperError(\"Could not find a #define OUTPUT_DECLARATION!\");\n  }\n\n  var outputVariables = [];\n\n  for (i = 0; i < 10; i++) {\n    var fragDataString = \"gl_FragData\\\\[\" + i + \"\\\\]\";\n    var newOutput = \"czm_out\" + i;\n    var regex = new RegExp(fragDataString, \"g\");\n    if (regex.test(source)) {\n      setAdd(newOutput, outputVariables);\n      replaceInSourceString(fragDataString, newOutput, splitSource);\n      splitSource.splice(\n        outputDeclarationLine,\n        0,\n        \"layout(location = \" + i + \") out vec4 \" + newOutput + \";\"\n      );\n      outputDeclarationLine += 1;\n    }\n  }\n\n  var czmFragColor = \"czm_fragColor\";\n  if (findInSource(\"gl_FragColor\", splitSource)) {\n    setAdd(czmFragColor, outputVariables);\n    replaceInSourceString(\"gl_FragColor\", czmFragColor, splitSource);\n    splitSource.splice(\n      outputDeclarationLine,\n      0,\n      \"layout(location = 0) out vec4 czm_fragColor;\"\n    );\n    outputDeclarationLine += 1;\n  }\n\n  var variableMap = getVariablePreprocessorBranch(outputVariables, splitSource);\n  var lineAdds = {};\n  for (i = 0; i < splitSource.length; i++) {\n    line = splitSource[i];\n    for (var variable in variableMap) {\n      if (variableMap.hasOwnProperty(variable)) {\n        var matchVar = new RegExp(\n          \"(layout)[^]+(out)[^]+(\" + variable + \")[^]+\",\n          \"g\"\n        );\n        if (matchVar.test(line)) {\n          lineAdds[line] = variable;\n        }\n      }\n    }\n  }\n\n  for (var layoutDeclaration in lineAdds) {\n    if (lineAdds.hasOwnProperty(layoutDeclaration)) {\n      var variableName = lineAdds[layoutDeclaration];\n      var lineNumber = splitSource.indexOf(layoutDeclaration);\n      var entry = variableMap[variableName];\n      var depth = entry.length;\n      var d;\n      for (d = 0; d < depth; d++) {\n        splitSource.splice(lineNumber, 0, entry[d]);\n      }\n      lineNumber += depth + 1;\n      for (d = depth - 1; d >= 0; d--) {\n        splitSource.splice(lineNumber, 0, \"#endif //\" + entry[d]);\n      }\n    }\n  }\n\n  var versionThree = \"#version 300 es\";\n  var foundVersion = false;\n  for (i = 0; i < splitSource.length; i++) {\n    if (/#version/.test(splitSource[i])) {\n      splitSource[i] = versionThree;\n      foundVersion = true;\n    }\n  }\n\n  if (!foundVersion) {\n    splitSource.splice(0, 0, versionThree);\n  }\n\n  removeExtension(\"EXT_draw_buffers\", splitSource);\n  removeExtension(\"EXT_frag_depth\", splitSource);\n\n  replaceInSourceString(\"texture2D\", \"texture\", splitSource);\n  replaceInSourceString(\"texture3D\", \"texture\", splitSource);\n  replaceInSourceString(\"textureCube\", \"texture\", splitSource);\n  replaceInSourceString(\"gl_FragDepthEXT\", \"gl_FragDepth\", splitSource);\n\n  if (isFragmentShader) {\n    replaceInSourceString(\"varying\", \"in\", splitSource);\n  } else {\n    replaceInSourceString(\"attribute\", \"in\", splitSource);\n    replaceInSourceString(\"varying\", \"out\", splitSource);\n  }\n\n  return compileSource(splitSource);\n}\n\n// Note that this fails if your string looks like\n// searchString[singleCharacter]searchString\nfunction replaceInSourceString(str, replacement, splitSource) {\n  var regexStr = \"(^|[^\\\\w])(\" + str + \")($|[^\\\\w])\";\n  var regex = new RegExp(regexStr, \"g\");\n\n  var splitSourceLength = splitSource.length;\n  for (var i = 0; i < splitSourceLength; ++i) {\n    var line = splitSource[i];\n    splitSource[i] = line.replace(regex, \"$1\" + replacement + \"$3\");\n  }\n}\n\nfunction replaceInSourceRegex(regex, replacement, splitSource) {\n  var splitSourceLength = splitSource.length;\n  for (var i = 0; i < splitSourceLength; ++i) {\n    var line = splitSource[i];\n    splitSource[i] = line.replace(regex, replacement);\n  }\n}\n\nfunction findInSource(str, splitSource) {\n  var regexStr = \"(^|[^\\\\w])(\" + str + \")($|[^\\\\w])\";\n  var regex = new RegExp(regexStr, \"g\");\n\n  var splitSourceLength = splitSource.length;\n  for (var i = 0; i < splitSourceLength; ++i) {\n    var line = splitSource[i];\n    if (regex.test(line)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction compileSource(splitSource) {\n  var wholeSource = \"\";\n\n  var splitSourceLength = splitSource.length;\n  for (var i = 0; i < splitSourceLength; ++i) {\n    wholeSource += splitSource[i] + \"\\n\";\n  }\n  return wholeSource;\n}\n\nfunction setAdd(variable, set) {\n  if (set.indexOf(variable) === -1) {\n    set.push(variable);\n  }\n}\n\nfunction getVariablePreprocessorBranch(layoutVariables, splitSource) {\n  var variableMap = {};\n\n  var numLayoutVariables = layoutVariables.length;\n\n  var stack = [];\n  for (var i = 0; i < splitSource.length; ++i) {\n    var line = splitSource[i];\n    var hasIF = /(#ifdef|#if)/g.test(line);\n    var hasELSE = /#else/g.test(line);\n    var hasENDIF = /#endif/g.test(line);\n\n    if (hasIF) {\n      stack.push(line);\n    } else if (hasELSE) {\n      var top = stack[stack.length - 1];\n      var op = top.replace(\"ifdef\", \"ifndef\");\n      if (/if/g.test(op)) {\n        op = op.replace(/(#if\\s+)(\\S*)([^]*)/, \"$1!($2)$3\");\n      }\n      stack.pop();\n      stack.push(op);\n    } else if (hasENDIF) {\n      stack.pop();\n    } else if (!/layout/g.test(line)) {\n      for (var varIndex = 0; varIndex < numLayoutVariables; ++varIndex) {\n        var varName = layoutVariables[varIndex];\n        if (line.indexOf(varName) !== -1) {\n          if (!defined(variableMap[varName])) {\n            variableMap[varName] = stack.slice();\n          } else {\n            variableMap[varName] = variableMap[varName].filter(function (x) {\n              return stack.indexOf(x) >= 0;\n            });\n          }\n        }\n      }\n    }\n  }\n\n  return variableMap;\n}\n\nfunction removeExtension(name, splitSource) {\n  var regex = \"#extension\\\\s+GL_\" + name + \"\\\\s+:\\\\s+[a-zA-Z0-9]+\\\\s*$\";\n  replaceInSourceRegex(new RegExp(regex, \"g\"), \"\", splitSource);\n}\nexport default modernizeShader;\n"]},"metadata":{},"sourceType":"module"}