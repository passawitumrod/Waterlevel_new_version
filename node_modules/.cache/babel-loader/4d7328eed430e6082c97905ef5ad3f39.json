{"ast":null,"code":"import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport Property from \"./Property.js\";\n/**\n * A {@link Property} whose value is an array whose items are the computed value\n * of other property instances.\n *\n * @alias PropertyArray\n * @constructor\n *\n * @param {Property[]} [value] An array of Property instances.\n */\n\nfunction PropertyArray(value) {\n  this._value = undefined;\n  this._definitionChanged = new Event();\n  this._eventHelper = new EventHelper();\n  this.setValue(value);\n}\n\nObject.defineProperties(PropertyArray.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  This property\n   * is considered constant if all property items in the array are constant.\n   * @memberof PropertyArray.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function get() {\n      var value = this._value;\n\n      if (!defined(value)) {\n        return true;\n      }\n\n      var length = value.length;\n\n      for (var i = 0; i < length; i++) {\n        if (!Property.isConstant(value[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value or one of the properties in the array also changes.\n   * @memberof PropertyArray.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function get() {\n      return this._definitionChanged;\n    }\n  }\n});\n/**\n * Gets the value of the property.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object[]} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object[]} The modified result parameter, which is an array of values produced by evaluating each of the contained properties at the given time or a new instance if the result parameter was not supplied.\n */\n\nPropertyArray.prototype.getValue = function (time, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  } //>>includeEnd('debug');\n\n\n  var value = this._value;\n\n  if (!defined(value)) {\n    return undefined;\n  }\n\n  var length = value.length;\n\n  if (!defined(result)) {\n    result = new Array(length);\n  }\n\n  var i = 0;\n  var x = 0;\n\n  while (i < length) {\n    var property = this._value[i];\n    var itemValue = property.getValue(time, result[i]);\n\n    if (defined(itemValue)) {\n      result[x] = itemValue;\n      x++;\n    }\n\n    i++;\n  }\n\n  result.length = x;\n  return result;\n};\n/**\n * Sets the value of the property.\n *\n * @param {Property[]} value An array of Property instances.\n */\n\n\nPropertyArray.prototype.setValue = function (value) {\n  var eventHelper = this._eventHelper;\n  eventHelper.removeAll();\n\n  if (defined(value)) {\n    this._value = value.slice();\n    var length = value.length;\n\n    for (var i = 0; i < length; i++) {\n      var property = value[i];\n\n      if (defined(property)) {\n        eventHelper.add(property.definitionChanged, PropertyArray.prototype._raiseDefinitionChanged, this);\n      }\n    }\n  } else {\n    this._value = undefined;\n  }\n\n  this._definitionChanged.raiseEvent(this);\n};\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nPropertyArray.prototype.equals = function (other) {\n  return this === other || //\n  other instanceof PropertyArray && //\n  Property.arrayEquals(this._value, other._value);\n};\n\nPropertyArray.prototype._raiseDefinitionChanged = function () {\n  this._definitionChanged.raiseEvent(this);\n};\n\nexport default PropertyArray;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/PropertyArray.js"],"names":["defined","DeveloperError","Event","EventHelper","Property","PropertyArray","value","_value","undefined","_definitionChanged","_eventHelper","setValue","Object","defineProperties","prototype","isConstant","get","length","i","definitionChanged","getValue","time","result","Array","x","property","itemValue","eventHelper","removeAll","slice","add","_raiseDefinitionChanged","raiseEvent","equals","other","arrayEquals"],"mappings":"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","sourcesContent":["import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link Property} whose value is an array whose items are the computed value\n * of other property instances.\n *\n * @alias PropertyArray\n * @constructor\n *\n * @param {Property[]} [value] An array of Property instances.\n */\nfunction PropertyArray(value) {\n  this._value = undefined;\n  this._definitionChanged = new Event();\n  this._eventHelper = new EventHelper();\n  this.setValue(value);\n}\n\nObject.defineProperties(PropertyArray.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  This property\n   * is considered constant if all property items in the array are constant.\n   * @memberof PropertyArray.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      var value = this._value;\n      if (!defined(value)) {\n        return true;\n      }\n      var length = value.length;\n      for (var i = 0; i < length; i++) {\n        if (!Property.isConstant(value[i])) {\n          return false;\n        }\n      }\n      return true;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value or one of the properties in the array also changes.\n   * @memberof PropertyArray.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n});\n\n/**\n * Gets the value of the property.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object[]} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object[]} The modified result parameter, which is an array of values produced by evaluating each of the contained properties at the given time or a new instance if the result parameter was not supplied.\n */\nPropertyArray.prototype.getValue = function (time, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var value = this._value;\n  if (!defined(value)) {\n    return undefined;\n  }\n\n  var length = value.length;\n  if (!defined(result)) {\n    result = new Array(length);\n  }\n  var i = 0;\n  var x = 0;\n  while (i < length) {\n    var property = this._value[i];\n    var itemValue = property.getValue(time, result[i]);\n    if (defined(itemValue)) {\n      result[x] = itemValue;\n      x++;\n    }\n    i++;\n  }\n  result.length = x;\n  return result;\n};\n\n/**\n * Sets the value of the property.\n *\n * @param {Property[]} value An array of Property instances.\n */\nPropertyArray.prototype.setValue = function (value) {\n  var eventHelper = this._eventHelper;\n  eventHelper.removeAll();\n\n  if (defined(value)) {\n    this._value = value.slice();\n    var length = value.length;\n    for (var i = 0; i < length; i++) {\n      var property = value[i];\n      if (defined(property)) {\n        eventHelper.add(\n          property.definitionChanged,\n          PropertyArray.prototype._raiseDefinitionChanged,\n          this\n        );\n      }\n    }\n  } else {\n    this._value = undefined;\n  }\n  this._definitionChanged.raiseEvent(this);\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPropertyArray.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof PropertyArray && //\n      Property.arrayEquals(this._value, other._value))\n  );\n};\n\nPropertyArray.prototype._raiseDefinitionChanged = function () {\n  this._definitionChanged.raiseEvent(this);\n};\nexport default PropertyArray;\n"]},"metadata":{},"sourceType":"module"}