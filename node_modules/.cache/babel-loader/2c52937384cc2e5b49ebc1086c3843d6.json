{"ast":null,"code":"import binarySearch from \"../../Core/binarySearch.js\";\nimport ClockRange from \"../../Core/ClockRange.js\";\nimport ClockStep from \"../../Core/ClockStep.js\";\nimport defined from \"../../Core/defined.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport JulianDate from \"../../Core/JulianDate.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nimport sprintf from \"../../ThirdParty/sprintf.js\";\nimport createCommand from \"../createCommand.js\";\nimport ToggleButtonViewModel from \"../ToggleButtonViewModel.js\";\nvar monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nvar realtimeShuttleRingAngle = 15;\nvar maxShuttleRingAngle = 105;\n\nfunction numberComparator(left, right) {\n  return left - right;\n}\n\nfunction getTypicalMultiplierIndex(multiplier, shuttleRingTicks) {\n  var index = binarySearch(shuttleRingTicks, multiplier, numberComparator);\n  return index < 0 ? ~index : index;\n}\n\nfunction angleToMultiplier(angle, shuttleRingTicks) {\n  //Use a linear scale for -1 to 1 between -15 < angle < 15 degrees\n  if (Math.abs(angle) <= realtimeShuttleRingAngle) {\n    return angle / realtimeShuttleRingAngle;\n  }\n\n  var minp = realtimeShuttleRingAngle;\n  var maxp = maxShuttleRingAngle;\n  var maxv;\n  var minv = 0;\n  var scale;\n\n  if (angle > 0) {\n    maxv = Math.log(shuttleRingTicks[shuttleRingTicks.length - 1]);\n    scale = (maxv - minv) / (maxp - minp);\n    return Math.exp(minv + scale * (angle - minp));\n  }\n\n  maxv = Math.log(-shuttleRingTicks[0]);\n  scale = (maxv - minv) / (maxp - minp);\n  return -Math.exp(minv + scale * (Math.abs(angle) - minp));\n}\n\nfunction multiplierToAngle(multiplier, shuttleRingTicks, clockViewModel) {\n  if (clockViewModel.clockStep === ClockStep.SYSTEM_CLOCK) {\n    return realtimeShuttleRingAngle;\n  }\n\n  if (Math.abs(multiplier) <= 1) {\n    return multiplier * realtimeShuttleRingAngle;\n  }\n\n  var fastedMultipler = shuttleRingTicks[shuttleRingTicks.length - 1];\n\n  if (multiplier > fastedMultipler) {\n    multiplier = fastedMultipler;\n  } else if (multiplier < -fastedMultipler) {\n    multiplier = -fastedMultipler;\n  }\n\n  var minp = realtimeShuttleRingAngle;\n  var maxp = maxShuttleRingAngle;\n  var maxv;\n  var minv = 0;\n  var scale;\n\n  if (multiplier > 0) {\n    maxv = Math.log(fastedMultipler);\n    scale = (maxv - minv) / (maxp - minp);\n    return (Math.log(multiplier) - minv) / scale + minp;\n  }\n\n  maxv = Math.log(-shuttleRingTicks[0]);\n  scale = (maxv - minv) / (maxp - minp);\n  return -((Math.log(Math.abs(multiplier)) - minv) / scale + minp);\n}\n/**\n * The view model for the {@link Animation} widget.\n * @alias AnimationViewModel\n * @constructor\n *\n * @param {ClockViewModel} clockViewModel The ClockViewModel instance to use.\n *\n * @see Animation\n */\n\n\nfunction AnimationViewModel(clockViewModel) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(clockViewModel)) {\n    throw new DeveloperError(\"clockViewModel is required.\");\n  } //>>includeEnd('debug');\n\n\n  var that = this;\n  this._clockViewModel = clockViewModel;\n  this._allShuttleRingTicks = [];\n  this._dateFormatter = AnimationViewModel.defaultDateFormatter;\n  this._timeFormatter = AnimationViewModel.defaultTimeFormatter;\n  /**\n   * Gets or sets whether the shuttle ring is currently being dragged.  This property is observable.\n   * @type {Boolean}\n   * @default false\n   */\n\n  this.shuttleRingDragging = false;\n  /**\n   * Gets or sets whether dragging the shuttle ring should cause the multiplier\n   * to snap to the defined tick values rather than interpolating between them.\n   * This property is observable.\n   * @type {Boolean}\n   * @default false\n   */\n\n  this.snapToTicks = false;\n  knockout.track(this, [\"_allShuttleRingTicks\", \"_dateFormatter\", \"_timeFormatter\", \"shuttleRingDragging\", \"snapToTicks\"]);\n  this._sortedFilteredPositiveTicks = [];\n  this.setShuttleRingTicks(AnimationViewModel.defaultTicks);\n  /**\n   * Gets the string representation of the current time.  This property is observable.\n   * @type {String}\n   */\n\n  this.timeLabel = undefined;\n  knockout.defineProperty(this, \"timeLabel\", function () {\n    return that._timeFormatter(that._clockViewModel.currentTime, that);\n  });\n  /**\n   * Gets the string representation of the current date.  This property is observable.\n   * @type {String}\n   */\n\n  this.dateLabel = undefined;\n  knockout.defineProperty(this, \"dateLabel\", function () {\n    return that._dateFormatter(that._clockViewModel.currentTime, that);\n  });\n  /**\n   * Gets the string representation of the current multiplier.  This property is observable.\n   * @type {String}\n   */\n\n  this.multiplierLabel = undefined;\n  knockout.defineProperty(this, \"multiplierLabel\", function () {\n    var clockViewModel = that._clockViewModel;\n\n    if (clockViewModel.clockStep === ClockStep.SYSTEM_CLOCK) {\n      return \"Today\";\n    }\n\n    var multiplier = clockViewModel.multiplier; //If it's a whole number, just return it.\n\n    if (multiplier % 1 === 0) {\n      return multiplier.toFixed(0) + \"x\";\n    } //Convert to decimal string and remove any trailing zeroes\n\n\n    return multiplier.toFixed(3).replace(/0{0,3}$/, \"\") + \"x\";\n  });\n  /**\n   * Gets or sets the current shuttle ring angle.  This property is observable.\n   * @type {Number}\n   */\n\n  this.shuttleRingAngle = undefined;\n  knockout.defineProperty(this, \"shuttleRingAngle\", {\n    get: function get() {\n      return multiplierToAngle(clockViewModel.multiplier, that._allShuttleRingTicks, clockViewModel);\n    },\n    set: function set(angle) {\n      angle = Math.max(Math.min(angle, maxShuttleRingAngle), -maxShuttleRingAngle);\n      var ticks = that._allShuttleRingTicks;\n      var clockViewModel = that._clockViewModel;\n      clockViewModel.clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER; //If we are at the max angle, simply return the max value in either direction.\n\n      if (Math.abs(angle) === maxShuttleRingAngle) {\n        clockViewModel.multiplier = angle > 0 ? ticks[ticks.length - 1] : ticks[0];\n        return;\n      }\n\n      var multiplier = angleToMultiplier(angle, ticks);\n\n      if (that.snapToTicks) {\n        multiplier = ticks[getTypicalMultiplierIndex(multiplier, ticks)];\n      } else if (multiplier !== 0) {\n        var positiveMultiplier = Math.abs(multiplier);\n\n        if (positiveMultiplier > 100) {\n          var numDigits = positiveMultiplier.toFixed(0).length - 2;\n          var divisor = Math.pow(10, numDigits);\n          multiplier = Math.round(multiplier / divisor) * divisor | 0;\n        } else if (positiveMultiplier > realtimeShuttleRingAngle) {\n          multiplier = Math.round(multiplier);\n        } else if (positiveMultiplier > 1) {\n          multiplier = +multiplier.toFixed(1);\n        } else if (positiveMultiplier > 0) {\n          multiplier = +multiplier.toFixed(2);\n        }\n      }\n\n      clockViewModel.multiplier = multiplier;\n    }\n  });\n  this._canAnimate = undefined;\n  knockout.defineProperty(this, \"_canAnimate\", function () {\n    var clockViewModel = that._clockViewModel;\n    var clockRange = clockViewModel.clockRange;\n\n    if (that.shuttleRingDragging || clockRange === ClockRange.UNBOUNDED) {\n      return true;\n    }\n\n    var multiplier = clockViewModel.multiplier;\n    var currentTime = clockViewModel.currentTime;\n    var startTime = clockViewModel.startTime;\n    var result = false;\n\n    if (clockRange === ClockRange.LOOP_STOP) {\n      result = JulianDate.greaterThan(currentTime, startTime) || currentTime.equals(startTime) && multiplier > 0;\n    } else {\n      var stopTime = clockViewModel.stopTime;\n      result = JulianDate.greaterThan(currentTime, startTime) && JulianDate.lessThan(currentTime, stopTime) || //\n      currentTime.equals(startTime) && multiplier > 0 || //\n      currentTime.equals(stopTime) && multiplier < 0;\n    }\n\n    if (!result) {\n      clockViewModel.shouldAnimate = false;\n    }\n\n    return result;\n  });\n  this._isSystemTimeAvailable = undefined;\n  knockout.defineProperty(this, \"_isSystemTimeAvailable\", function () {\n    var clockViewModel = that._clockViewModel;\n    var clockRange = clockViewModel.clockRange;\n\n    if (clockRange === ClockRange.UNBOUNDED) {\n      return true;\n    }\n\n    var systemTime = clockViewModel.systemTime;\n    return JulianDate.greaterThanOrEquals(systemTime, clockViewModel.startTime) && JulianDate.lessThanOrEquals(systemTime, clockViewModel.stopTime);\n  });\n  this._isAnimating = undefined;\n  knockout.defineProperty(this, \"_isAnimating\", function () {\n    return that._clockViewModel.shouldAnimate && (that._canAnimate || that.shuttleRingDragging);\n  });\n  var pauseCommand = createCommand(function () {\n    var clockViewModel = that._clockViewModel;\n\n    if (clockViewModel.shouldAnimate) {\n      clockViewModel.shouldAnimate = false;\n    } else if (that._canAnimate) {\n      clockViewModel.shouldAnimate = true;\n    }\n  });\n  this._pauseViewModel = new ToggleButtonViewModel(pauseCommand, {\n    toggled: knockout.computed(function () {\n      return !that._isAnimating;\n    }),\n    tooltip: \"Pause\"\n  });\n  var playReverseCommand = createCommand(function () {\n    var clockViewModel = that._clockViewModel;\n    var multiplier = clockViewModel.multiplier;\n\n    if (multiplier > 0) {\n      clockViewModel.multiplier = -multiplier;\n    }\n\n    clockViewModel.shouldAnimate = true;\n  });\n  this._playReverseViewModel = new ToggleButtonViewModel(playReverseCommand, {\n    toggled: knockout.computed(function () {\n      return that._isAnimating && clockViewModel.multiplier < 0;\n    }),\n    tooltip: \"Play Reverse\"\n  });\n  var playForwardCommand = createCommand(function () {\n    var clockViewModel = that._clockViewModel;\n    var multiplier = clockViewModel.multiplier;\n\n    if (multiplier < 0) {\n      clockViewModel.multiplier = -multiplier;\n    }\n\n    clockViewModel.shouldAnimate = true;\n  });\n  this._playForwardViewModel = new ToggleButtonViewModel(playForwardCommand, {\n    toggled: knockout.computed(function () {\n      return that._isAnimating && clockViewModel.multiplier > 0 && clockViewModel.clockStep !== ClockStep.SYSTEM_CLOCK;\n    }),\n    tooltip: \"Play Forward\"\n  });\n  var playRealtimeCommand = createCommand(function () {\n    that._clockViewModel.clockStep = ClockStep.SYSTEM_CLOCK;\n  }, knockout.getObservable(this, \"_isSystemTimeAvailable\"));\n  this._playRealtimeViewModel = new ToggleButtonViewModel(playRealtimeCommand, {\n    toggled: knockout.computed(function () {\n      return clockViewModel.clockStep === ClockStep.SYSTEM_CLOCK;\n    }),\n    tooltip: knockout.computed(function () {\n      return that._isSystemTimeAvailable ? \"Today (real-time)\" : \"Current time not in range\";\n    })\n  });\n  this._slower = createCommand(function () {\n    var clockViewModel = that._clockViewModel;\n    var shuttleRingTicks = that._allShuttleRingTicks;\n    var multiplier = clockViewModel.multiplier;\n    var index = getTypicalMultiplierIndex(multiplier, shuttleRingTicks) - 1;\n\n    if (index >= 0) {\n      clockViewModel.multiplier = shuttleRingTicks[index];\n    }\n  });\n  this._faster = createCommand(function () {\n    var clockViewModel = that._clockViewModel;\n    var shuttleRingTicks = that._allShuttleRingTicks;\n    var multiplier = clockViewModel.multiplier;\n    var index = getTypicalMultiplierIndex(multiplier, shuttleRingTicks) + 1;\n\n    if (index < shuttleRingTicks.length) {\n      clockViewModel.multiplier = shuttleRingTicks[index];\n    }\n  });\n}\n/**\n * Gets or sets the default date formatter used by new instances.\n *\n * @member\n * @type {AnimationViewModel~DateFormatter}\n */\n\n\nAnimationViewModel.defaultDateFormatter = function (date, viewModel) {\n  var gregorianDate = JulianDate.toGregorianDate(date);\n  return monthNames[gregorianDate.month - 1] + \" \" + gregorianDate.day + \" \" + gregorianDate.year;\n};\n/**\n * Gets or sets the default array of known clock multipliers associated with new instances of the shuttle ring.\n * @type {Number[]}\n */\n\n\nAnimationViewModel.defaultTicks = [//\n0.001, 0.002, 0.005, 0.01, 0.02, 0.05, 0.1, 0.25, 0.5, 1.0, 2.0, 5.0, 10.0, //\n15.0, 30.0, 60.0, 120.0, 300.0, 600.0, 900.0, 1800.0, 3600.0, 7200.0, 14400.0, //\n21600.0, 43200.0, 86400.0, 172800.0, 345600.0, 604800.0];\n/**\n * Gets or sets the default time formatter used by new instances.\n *\n * @member\n * @type {AnimationViewModel~TimeFormatter}\n */\n\nAnimationViewModel.defaultTimeFormatter = function (date, viewModel) {\n  var gregorianDate = JulianDate.toGregorianDate(date);\n  var millisecond = Math.round(gregorianDate.millisecond);\n\n  if (Math.abs(viewModel._clockViewModel.multiplier) < 1) {\n    return sprintf(\"%02d:%02d:%02d.%03d\", gregorianDate.hour, gregorianDate.minute, gregorianDate.second, millisecond);\n  }\n\n  return sprintf(\"%02d:%02d:%02d UTC\", gregorianDate.hour, gregorianDate.minute, gregorianDate.second);\n};\n/**\n * Gets a copy of the array of positive known clock multipliers to associate with the shuttle ring.\n *\n * @returns {Number[]} The array of known clock multipliers associated with the shuttle ring.\n */\n\n\nAnimationViewModel.prototype.getShuttleRingTicks = function () {\n  return this._sortedFilteredPositiveTicks.slice(0);\n};\n/**\n * Sets the array of positive known clock multipliers to associate with the shuttle ring.\n * These values will have negative equivalents created for them and sets both the minimum\n * and maximum range of values for the shuttle ring as well as the values that are snapped\n * to when a single click is made.  The values need not be in order, as they will be sorted\n * automatically, and duplicate values will be removed.\n *\n * @param {Number[]} positiveTicks The list of known positive clock multipliers to associate with the shuttle ring.\n */\n\n\nAnimationViewModel.prototype.setShuttleRingTicks = function (positiveTicks) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(positiveTicks)) {\n    throw new DeveloperError(\"positiveTicks is required.\");\n  } //>>includeEnd('debug');\n\n\n  var i;\n  var len;\n  var tick;\n  var hash = {};\n  var sortedFilteredPositiveTicks = this._sortedFilteredPositiveTicks;\n  sortedFilteredPositiveTicks.length = 0;\n\n  for (i = 0, len = positiveTicks.length; i < len; ++i) {\n    tick = positiveTicks[i]; //filter duplicates\n\n    if (!hash.hasOwnProperty(tick)) {\n      hash[tick] = true;\n      sortedFilteredPositiveTicks.push(tick);\n    }\n  }\n\n  sortedFilteredPositiveTicks.sort(numberComparator);\n  var allTicks = [];\n\n  for (len = sortedFilteredPositiveTicks.length, i = len - 1; i >= 0; --i) {\n    tick = sortedFilteredPositiveTicks[i];\n\n    if (tick !== 0) {\n      allTicks.push(-tick);\n    }\n  }\n\n  Array.prototype.push.apply(allTicks, sortedFilteredPositiveTicks);\n  this._allShuttleRingTicks = allTicks;\n};\n\nObject.defineProperties(AnimationViewModel.prototype, {\n  /**\n   * Gets a command that decreases the speed of animation.\n   * @memberof AnimationViewModel.prototype\n   * @type {Command}\n   */\n  slower: {\n    get: function get() {\n      return this._slower;\n    }\n  },\n\n  /**\n   * Gets a command that increases the speed of animation.\n   * @memberof AnimationViewModel.prototype\n   * @type {Command}\n   */\n  faster: {\n    get: function get() {\n      return this._faster;\n    }\n  },\n\n  /**\n   * Gets the clock view model.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {ClockViewModel}\n   */\n  clockViewModel: {\n    get: function get() {\n      return this._clockViewModel;\n    }\n  },\n\n  /**\n   * Gets the pause toggle button view model.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {ToggleButtonViewModel}\n   */\n  pauseViewModel: {\n    get: function get() {\n      return this._pauseViewModel;\n    }\n  },\n\n  /**\n   * Gets the reverse toggle button view model.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {ToggleButtonViewModel}\n   */\n  playReverseViewModel: {\n    get: function get() {\n      return this._playReverseViewModel;\n    }\n  },\n\n  /**\n   * Gets the play toggle button view model.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {ToggleButtonViewModel}\n   */\n  playForwardViewModel: {\n    get: function get() {\n      return this._playForwardViewModel;\n    }\n  },\n\n  /**\n   * Gets the realtime toggle button view model.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {ToggleButtonViewModel}\n   */\n  playRealtimeViewModel: {\n    get: function get() {\n      return this._playRealtimeViewModel;\n    }\n  },\n\n  /**\n   * Gets or sets the function which formats a date for display.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {AnimationViewModel~DateFormatter}\n   * @default AnimationViewModel.defaultDateFormatter\n   */\n  dateFormatter: {\n    //TODO:@exception {DeveloperError} dateFormatter must be a function.\n    get: function get() {\n      return this._dateFormatter;\n    },\n    set: function set(dateFormatter) {\n      //>>includeStart('debug', pragmas.debug);\n      if (typeof dateFormatter !== \"function\") {\n        throw new DeveloperError(\"dateFormatter must be a function\");\n      } //>>includeEnd('debug');\n\n\n      this._dateFormatter = dateFormatter;\n    }\n  },\n\n  /**\n   * Gets or sets the function which formats a time for display.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {AnimationViewModel~TimeFormatter}\n   * @default AnimationViewModel.defaultTimeFormatter\n   */\n  timeFormatter: {\n    //TODO:@exception {DeveloperError} timeFormatter must be a function.\n    get: function get() {\n      return this._timeFormatter;\n    },\n    set: function set(timeFormatter) {\n      //>>includeStart('debug', pragmas.debug);\n      if (typeof timeFormatter !== \"function\") {\n        throw new DeveloperError(\"timeFormatter must be a function\");\n      } //>>includeEnd('debug');\n\n\n      this._timeFormatter = timeFormatter;\n    }\n  }\n}); //Currently exposed for tests.\n\nAnimationViewModel._maxShuttleRingAngle = maxShuttleRingAngle;\nAnimationViewModel._realtimeShuttleRingAngle = realtimeShuttleRingAngle;\n/**\n * A function that formats a date for display.\n * @callback AnimationViewModel~DateFormatter\n *\n * @param {JulianDate} date The date to be formatted\n * @param {AnimationViewModel} viewModel The AnimationViewModel instance requesting formatting.\n * @returns {String} The string representation of the calendar date portion of the provided date.\n */\n\n/**\n * A function that formats a time for display.\n * @callback AnimationViewModel~TimeFormatter\n *\n * @param {JulianDate} date The date to be formatted\n * @param {AnimationViewModel} viewModel The AnimationViewModel instance requesting formatting.\n * @returns {String} The string representation of the time portion of the provided date.\n */\n\nexport default AnimationViewModel;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Widgets/Animation/AnimationViewModel.js"],"names":["binarySearch","ClockRange","ClockStep","defined","DeveloperError","JulianDate","knockout","sprintf","createCommand","ToggleButtonViewModel","monthNames","realtimeShuttleRingAngle","maxShuttleRingAngle","numberComparator","left","right","getTypicalMultiplierIndex","multiplier","shuttleRingTicks","index","angleToMultiplier","angle","Math","abs","minp","maxp","maxv","minv","scale","log","length","exp","multiplierToAngle","clockViewModel","clockStep","SYSTEM_CLOCK","fastedMultipler","AnimationViewModel","that","_clockViewModel","_allShuttleRingTicks","_dateFormatter","defaultDateFormatter","_timeFormatter","defaultTimeFormatter","shuttleRingDragging","snapToTicks","track","_sortedFilteredPositiveTicks","setShuttleRingTicks","defaultTicks","timeLabel","undefined","defineProperty","currentTime","dateLabel","multiplierLabel","toFixed","replace","shuttleRingAngle","get","set","max","min","ticks","SYSTEM_CLOCK_MULTIPLIER","positiveMultiplier","numDigits","divisor","pow","round","_canAnimate","clockRange","UNBOUNDED","startTime","result","LOOP_STOP","greaterThan","equals","stopTime","lessThan","shouldAnimate","_isSystemTimeAvailable","systemTime","greaterThanOrEquals","lessThanOrEquals","_isAnimating","pauseCommand","_pauseViewModel","toggled","computed","tooltip","playReverseCommand","_playReverseViewModel","playForwardCommand","_playForwardViewModel","playRealtimeCommand","getObservable","_playRealtimeViewModel","_slower","_faster","date","viewModel","gregorianDate","toGregorianDate","month","day","year","millisecond","hour","minute","second","prototype","getShuttleRingTicks","slice","positiveTicks","i","len","tick","hash","sortedFilteredPositiveTicks","hasOwnProperty","push","sort","allTicks","Array","apply","Object","defineProperties","slower","faster","pauseViewModel","playReverseViewModel","playForwardViewModel","playRealtimeViewModel","dateFormatter","timeFormatter","_maxShuttleRingAngle","_realtimeShuttleRingAngle"],"mappings":"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","sourcesContent":["import binarySearch from \"../../Core/binarySearch.js\";\nimport ClockRange from \"../../Core/ClockRange.js\";\nimport ClockStep from \"../../Core/ClockStep.js\";\nimport defined from \"../../Core/defined.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport JulianDate from \"../../Core/JulianDate.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nimport sprintf from \"../../ThirdParty/sprintf.js\";\nimport createCommand from \"../createCommand.js\";\nimport ToggleButtonViewModel from \"../ToggleButtonViewModel.js\";\n\nvar monthNames = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n];\nvar realtimeShuttleRingAngle = 15;\nvar maxShuttleRingAngle = 105;\n\nfunction numberComparator(left, right) {\n  return left - right;\n}\n\nfunction getTypicalMultiplierIndex(multiplier, shuttleRingTicks) {\n  var index = binarySearch(shuttleRingTicks, multiplier, numberComparator);\n  return index < 0 ? ~index : index;\n}\n\nfunction angleToMultiplier(angle, shuttleRingTicks) {\n  //Use a linear scale for -1 to 1 between -15 < angle < 15 degrees\n  if (Math.abs(angle) <= realtimeShuttleRingAngle) {\n    return angle / realtimeShuttleRingAngle;\n  }\n\n  var minp = realtimeShuttleRingAngle;\n  var maxp = maxShuttleRingAngle;\n  var maxv;\n  var minv = 0;\n  var scale;\n  if (angle > 0) {\n    maxv = Math.log(shuttleRingTicks[shuttleRingTicks.length - 1]);\n    scale = (maxv - minv) / (maxp - minp);\n    return Math.exp(minv + scale * (angle - minp));\n  }\n\n  maxv = Math.log(-shuttleRingTicks[0]);\n  scale = (maxv - minv) / (maxp - minp);\n  return -Math.exp(minv + scale * (Math.abs(angle) - minp));\n}\n\nfunction multiplierToAngle(multiplier, shuttleRingTicks, clockViewModel) {\n  if (clockViewModel.clockStep === ClockStep.SYSTEM_CLOCK) {\n    return realtimeShuttleRingAngle;\n  }\n\n  if (Math.abs(multiplier) <= 1) {\n    return multiplier * realtimeShuttleRingAngle;\n  }\n\n  var fastedMultipler = shuttleRingTicks[shuttleRingTicks.length - 1];\n  if (multiplier > fastedMultipler) {\n    multiplier = fastedMultipler;\n  } else if (multiplier < -fastedMultipler) {\n    multiplier = -fastedMultipler;\n  }\n\n  var minp = realtimeShuttleRingAngle;\n  var maxp = maxShuttleRingAngle;\n  var maxv;\n  var minv = 0;\n  var scale;\n\n  if (multiplier > 0) {\n    maxv = Math.log(fastedMultipler);\n    scale = (maxv - minv) / (maxp - minp);\n    return (Math.log(multiplier) - minv) / scale + minp;\n  }\n\n  maxv = Math.log(-shuttleRingTicks[0]);\n  scale = (maxv - minv) / (maxp - minp);\n  return -((Math.log(Math.abs(multiplier)) - minv) / scale + minp);\n}\n\n/**\n * The view model for the {@link Animation} widget.\n * @alias AnimationViewModel\n * @constructor\n *\n * @param {ClockViewModel} clockViewModel The ClockViewModel instance to use.\n *\n * @see Animation\n */\nfunction AnimationViewModel(clockViewModel) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(clockViewModel)) {\n    throw new DeveloperError(\"clockViewModel is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var that = this;\n  this._clockViewModel = clockViewModel;\n  this._allShuttleRingTicks = [];\n  this._dateFormatter = AnimationViewModel.defaultDateFormatter;\n  this._timeFormatter = AnimationViewModel.defaultTimeFormatter;\n\n  /**\n   * Gets or sets whether the shuttle ring is currently being dragged.  This property is observable.\n   * @type {Boolean}\n   * @default false\n   */\n  this.shuttleRingDragging = false;\n\n  /**\n   * Gets or sets whether dragging the shuttle ring should cause the multiplier\n   * to snap to the defined tick values rather than interpolating between them.\n   * This property is observable.\n   * @type {Boolean}\n   * @default false\n   */\n  this.snapToTicks = false;\n\n  knockout.track(this, [\n    \"_allShuttleRingTicks\",\n    \"_dateFormatter\",\n    \"_timeFormatter\",\n    \"shuttleRingDragging\",\n    \"snapToTicks\",\n  ]);\n\n  this._sortedFilteredPositiveTicks = [];\n\n  this.setShuttleRingTicks(AnimationViewModel.defaultTicks);\n\n  /**\n   * Gets the string representation of the current time.  This property is observable.\n   * @type {String}\n   */\n  this.timeLabel = undefined;\n  knockout.defineProperty(this, \"timeLabel\", function () {\n    return that._timeFormatter(that._clockViewModel.currentTime, that);\n  });\n\n  /**\n   * Gets the string representation of the current date.  This property is observable.\n   * @type {String}\n   */\n  this.dateLabel = undefined;\n  knockout.defineProperty(this, \"dateLabel\", function () {\n    return that._dateFormatter(that._clockViewModel.currentTime, that);\n  });\n\n  /**\n   * Gets the string representation of the current multiplier.  This property is observable.\n   * @type {String}\n   */\n  this.multiplierLabel = undefined;\n  knockout.defineProperty(this, \"multiplierLabel\", function () {\n    var clockViewModel = that._clockViewModel;\n    if (clockViewModel.clockStep === ClockStep.SYSTEM_CLOCK) {\n      return \"Today\";\n    }\n\n    var multiplier = clockViewModel.multiplier;\n\n    //If it's a whole number, just return it.\n    if (multiplier % 1 === 0) {\n      return multiplier.toFixed(0) + \"x\";\n    }\n\n    //Convert to decimal string and remove any trailing zeroes\n    return multiplier.toFixed(3).replace(/0{0,3}$/, \"\") + \"x\";\n  });\n\n  /**\n   * Gets or sets the current shuttle ring angle.  This property is observable.\n   * @type {Number}\n   */\n  this.shuttleRingAngle = undefined;\n  knockout.defineProperty(this, \"shuttleRingAngle\", {\n    get: function () {\n      return multiplierToAngle(\n        clockViewModel.multiplier,\n        that._allShuttleRingTicks,\n        clockViewModel\n      );\n    },\n    set: function (angle) {\n      angle = Math.max(\n        Math.min(angle, maxShuttleRingAngle),\n        -maxShuttleRingAngle\n      );\n      var ticks = that._allShuttleRingTicks;\n\n      var clockViewModel = that._clockViewModel;\n      clockViewModel.clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n\n      //If we are at the max angle, simply return the max value in either direction.\n      if (Math.abs(angle) === maxShuttleRingAngle) {\n        clockViewModel.multiplier =\n          angle > 0 ? ticks[ticks.length - 1] : ticks[0];\n        return;\n      }\n\n      var multiplier = angleToMultiplier(angle, ticks);\n      if (that.snapToTicks) {\n        multiplier = ticks[getTypicalMultiplierIndex(multiplier, ticks)];\n      } else if (multiplier !== 0) {\n        var positiveMultiplier = Math.abs(multiplier);\n\n        if (positiveMultiplier > 100) {\n          var numDigits = positiveMultiplier.toFixed(0).length - 2;\n          var divisor = Math.pow(10, numDigits);\n          multiplier = (Math.round(multiplier / divisor) * divisor) | 0;\n        } else if (positiveMultiplier > realtimeShuttleRingAngle) {\n          multiplier = Math.round(multiplier);\n        } else if (positiveMultiplier > 1) {\n          multiplier = +multiplier.toFixed(1);\n        } else if (positiveMultiplier > 0) {\n          multiplier = +multiplier.toFixed(2);\n        }\n      }\n      clockViewModel.multiplier = multiplier;\n    },\n  });\n\n  this._canAnimate = undefined;\n  knockout.defineProperty(this, \"_canAnimate\", function () {\n    var clockViewModel = that._clockViewModel;\n    var clockRange = clockViewModel.clockRange;\n\n    if (that.shuttleRingDragging || clockRange === ClockRange.UNBOUNDED) {\n      return true;\n    }\n\n    var multiplier = clockViewModel.multiplier;\n    var currentTime = clockViewModel.currentTime;\n    var startTime = clockViewModel.startTime;\n\n    var result = false;\n    if (clockRange === ClockRange.LOOP_STOP) {\n      result =\n        JulianDate.greaterThan(currentTime, startTime) ||\n        (currentTime.equals(startTime) && multiplier > 0);\n    } else {\n      var stopTime = clockViewModel.stopTime;\n      result =\n        (JulianDate.greaterThan(currentTime, startTime) &&\n          JulianDate.lessThan(currentTime, stopTime)) || //\n        (currentTime.equals(startTime) && multiplier > 0) || //\n        (currentTime.equals(stopTime) && multiplier < 0);\n    }\n\n    if (!result) {\n      clockViewModel.shouldAnimate = false;\n    }\n    return result;\n  });\n\n  this._isSystemTimeAvailable = undefined;\n  knockout.defineProperty(this, \"_isSystemTimeAvailable\", function () {\n    var clockViewModel = that._clockViewModel;\n    var clockRange = clockViewModel.clockRange;\n    if (clockRange === ClockRange.UNBOUNDED) {\n      return true;\n    }\n\n    var systemTime = clockViewModel.systemTime;\n    return (\n      JulianDate.greaterThanOrEquals(systemTime, clockViewModel.startTime) &&\n      JulianDate.lessThanOrEquals(systemTime, clockViewModel.stopTime)\n    );\n  });\n\n  this._isAnimating = undefined;\n  knockout.defineProperty(this, \"_isAnimating\", function () {\n    return (\n      that._clockViewModel.shouldAnimate &&\n      (that._canAnimate || that.shuttleRingDragging)\n    );\n  });\n\n  var pauseCommand = createCommand(function () {\n    var clockViewModel = that._clockViewModel;\n    if (clockViewModel.shouldAnimate) {\n      clockViewModel.shouldAnimate = false;\n    } else if (that._canAnimate) {\n      clockViewModel.shouldAnimate = true;\n    }\n  });\n\n  this._pauseViewModel = new ToggleButtonViewModel(pauseCommand, {\n    toggled: knockout.computed(function () {\n      return !that._isAnimating;\n    }),\n    tooltip: \"Pause\",\n  });\n\n  var playReverseCommand = createCommand(function () {\n    var clockViewModel = that._clockViewModel;\n    var multiplier = clockViewModel.multiplier;\n    if (multiplier > 0) {\n      clockViewModel.multiplier = -multiplier;\n    }\n    clockViewModel.shouldAnimate = true;\n  });\n\n  this._playReverseViewModel = new ToggleButtonViewModel(playReverseCommand, {\n    toggled: knockout.computed(function () {\n      return that._isAnimating && clockViewModel.multiplier < 0;\n    }),\n    tooltip: \"Play Reverse\",\n  });\n\n  var playForwardCommand = createCommand(function () {\n    var clockViewModel = that._clockViewModel;\n    var multiplier = clockViewModel.multiplier;\n    if (multiplier < 0) {\n      clockViewModel.multiplier = -multiplier;\n    }\n    clockViewModel.shouldAnimate = true;\n  });\n\n  this._playForwardViewModel = new ToggleButtonViewModel(playForwardCommand, {\n    toggled: knockout.computed(function () {\n      return (\n        that._isAnimating &&\n        clockViewModel.multiplier > 0 &&\n        clockViewModel.clockStep !== ClockStep.SYSTEM_CLOCK\n      );\n    }),\n    tooltip: \"Play Forward\",\n  });\n\n  var playRealtimeCommand = createCommand(function () {\n    that._clockViewModel.clockStep = ClockStep.SYSTEM_CLOCK;\n  }, knockout.getObservable(this, \"_isSystemTimeAvailable\"));\n\n  this._playRealtimeViewModel = new ToggleButtonViewModel(playRealtimeCommand, {\n    toggled: knockout.computed(function () {\n      return clockViewModel.clockStep === ClockStep.SYSTEM_CLOCK;\n    }),\n    tooltip: knockout.computed(function () {\n      return that._isSystemTimeAvailable\n        ? \"Today (real-time)\"\n        : \"Current time not in range\";\n    }),\n  });\n\n  this._slower = createCommand(function () {\n    var clockViewModel = that._clockViewModel;\n    var shuttleRingTicks = that._allShuttleRingTicks;\n    var multiplier = clockViewModel.multiplier;\n    var index = getTypicalMultiplierIndex(multiplier, shuttleRingTicks) - 1;\n    if (index >= 0) {\n      clockViewModel.multiplier = shuttleRingTicks[index];\n    }\n  });\n\n  this._faster = createCommand(function () {\n    var clockViewModel = that._clockViewModel;\n    var shuttleRingTicks = that._allShuttleRingTicks;\n    var multiplier = clockViewModel.multiplier;\n    var index = getTypicalMultiplierIndex(multiplier, shuttleRingTicks) + 1;\n    if (index < shuttleRingTicks.length) {\n      clockViewModel.multiplier = shuttleRingTicks[index];\n    }\n  });\n}\n\n/**\n * Gets or sets the default date formatter used by new instances.\n *\n * @member\n * @type {AnimationViewModel~DateFormatter}\n */\nAnimationViewModel.defaultDateFormatter = function (date, viewModel) {\n  var gregorianDate = JulianDate.toGregorianDate(date);\n  return (\n    monthNames[gregorianDate.month - 1] +\n    \" \" +\n    gregorianDate.day +\n    \" \" +\n    gregorianDate.year\n  );\n};\n\n/**\n * Gets or sets the default array of known clock multipliers associated with new instances of the shuttle ring.\n * @type {Number[]}\n */\nAnimationViewModel.defaultTicks = [\n  //\n  0.001,\n  0.002,\n  0.005,\n  0.01,\n  0.02,\n  0.05,\n  0.1,\n  0.25,\n  0.5,\n  1.0,\n  2.0,\n  5.0,\n  10.0, //\n  15.0,\n  30.0,\n  60.0,\n  120.0,\n  300.0,\n  600.0,\n  900.0,\n  1800.0,\n  3600.0,\n  7200.0,\n  14400.0, //\n  21600.0,\n  43200.0,\n  86400.0,\n  172800.0,\n  345600.0,\n  604800.0,\n];\n\n/**\n * Gets or sets the default time formatter used by new instances.\n *\n * @member\n * @type {AnimationViewModel~TimeFormatter}\n */\nAnimationViewModel.defaultTimeFormatter = function (date, viewModel) {\n  var gregorianDate = JulianDate.toGregorianDate(date);\n  var millisecond = Math.round(gregorianDate.millisecond);\n  if (Math.abs(viewModel._clockViewModel.multiplier) < 1) {\n    return sprintf(\n      \"%02d:%02d:%02d.%03d\",\n      gregorianDate.hour,\n      gregorianDate.minute,\n      gregorianDate.second,\n      millisecond\n    );\n  }\n  return sprintf(\n    \"%02d:%02d:%02d UTC\",\n    gregorianDate.hour,\n    gregorianDate.minute,\n    gregorianDate.second\n  );\n};\n\n/**\n * Gets a copy of the array of positive known clock multipliers to associate with the shuttle ring.\n *\n * @returns {Number[]} The array of known clock multipliers associated with the shuttle ring.\n */\nAnimationViewModel.prototype.getShuttleRingTicks = function () {\n  return this._sortedFilteredPositiveTicks.slice(0);\n};\n\n/**\n * Sets the array of positive known clock multipliers to associate with the shuttle ring.\n * These values will have negative equivalents created for them and sets both the minimum\n * and maximum range of values for the shuttle ring as well as the values that are snapped\n * to when a single click is made.  The values need not be in order, as they will be sorted\n * automatically, and duplicate values will be removed.\n *\n * @param {Number[]} positiveTicks The list of known positive clock multipliers to associate with the shuttle ring.\n */\nAnimationViewModel.prototype.setShuttleRingTicks = function (positiveTicks) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(positiveTicks)) {\n    throw new DeveloperError(\"positiveTicks is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var i;\n  var len;\n  var tick;\n\n  var hash = {};\n  var sortedFilteredPositiveTicks = this._sortedFilteredPositiveTicks;\n  sortedFilteredPositiveTicks.length = 0;\n  for (i = 0, len = positiveTicks.length; i < len; ++i) {\n    tick = positiveTicks[i];\n    //filter duplicates\n    if (!hash.hasOwnProperty(tick)) {\n      hash[tick] = true;\n      sortedFilteredPositiveTicks.push(tick);\n    }\n  }\n  sortedFilteredPositiveTicks.sort(numberComparator);\n\n  var allTicks = [];\n  for (len = sortedFilteredPositiveTicks.length, i = len - 1; i >= 0; --i) {\n    tick = sortedFilteredPositiveTicks[i];\n    if (tick !== 0) {\n      allTicks.push(-tick);\n    }\n  }\n  Array.prototype.push.apply(allTicks, sortedFilteredPositiveTicks);\n\n  this._allShuttleRingTicks = allTicks;\n};\n\nObject.defineProperties(AnimationViewModel.prototype, {\n  /**\n   * Gets a command that decreases the speed of animation.\n   * @memberof AnimationViewModel.prototype\n   * @type {Command}\n   */\n  slower: {\n    get: function () {\n      return this._slower;\n    },\n  },\n\n  /**\n   * Gets a command that increases the speed of animation.\n   * @memberof AnimationViewModel.prototype\n   * @type {Command}\n   */\n  faster: {\n    get: function () {\n      return this._faster;\n    },\n  },\n\n  /**\n   * Gets the clock view model.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {ClockViewModel}\n   */\n  clockViewModel: {\n    get: function () {\n      return this._clockViewModel;\n    },\n  },\n\n  /**\n   * Gets the pause toggle button view model.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {ToggleButtonViewModel}\n   */\n  pauseViewModel: {\n    get: function () {\n      return this._pauseViewModel;\n    },\n  },\n\n  /**\n   * Gets the reverse toggle button view model.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {ToggleButtonViewModel}\n   */\n  playReverseViewModel: {\n    get: function () {\n      return this._playReverseViewModel;\n    },\n  },\n\n  /**\n   * Gets the play toggle button view model.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {ToggleButtonViewModel}\n   */\n  playForwardViewModel: {\n    get: function () {\n      return this._playForwardViewModel;\n    },\n  },\n\n  /**\n   * Gets the realtime toggle button view model.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {ToggleButtonViewModel}\n   */\n  playRealtimeViewModel: {\n    get: function () {\n      return this._playRealtimeViewModel;\n    },\n  },\n\n  /**\n   * Gets or sets the function which formats a date for display.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {AnimationViewModel~DateFormatter}\n   * @default AnimationViewModel.defaultDateFormatter\n   */\n  dateFormatter: {\n    //TODO:@exception {DeveloperError} dateFormatter must be a function.\n    get: function () {\n      return this._dateFormatter;\n    },\n    set: function (dateFormatter) {\n      //>>includeStart('debug', pragmas.debug);\n      if (typeof dateFormatter !== \"function\") {\n        throw new DeveloperError(\"dateFormatter must be a function\");\n      }\n      //>>includeEnd('debug');\n\n      this._dateFormatter = dateFormatter;\n    },\n  },\n\n  /**\n   * Gets or sets the function which formats a time for display.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {AnimationViewModel~TimeFormatter}\n   * @default AnimationViewModel.defaultTimeFormatter\n   */\n  timeFormatter: {\n    //TODO:@exception {DeveloperError} timeFormatter must be a function.\n    get: function () {\n      return this._timeFormatter;\n    },\n    set: function (timeFormatter) {\n      //>>includeStart('debug', pragmas.debug);\n      if (typeof timeFormatter !== \"function\") {\n        throw new DeveloperError(\"timeFormatter must be a function\");\n      }\n      //>>includeEnd('debug');\n\n      this._timeFormatter = timeFormatter;\n    },\n  },\n});\n\n//Currently exposed for tests.\nAnimationViewModel._maxShuttleRingAngle = maxShuttleRingAngle;\nAnimationViewModel._realtimeShuttleRingAngle = realtimeShuttleRingAngle;\n\n/**\n * A function that formats a date for display.\n * @callback AnimationViewModel~DateFormatter\n *\n * @param {JulianDate} date The date to be formatted\n * @param {AnimationViewModel} viewModel The AnimationViewModel instance requesting formatting.\n * @returns {String} The string representation of the calendar date portion of the provided date.\n */\n\n/**\n * A function that formats a time for display.\n * @callback AnimationViewModel~TimeFormatter\n *\n * @param {JulianDate} date The date to be formatted\n * @param {AnimationViewModel} viewModel The AnimationViewModel instance requesting formatting.\n * @returns {String} The string representation of the time portion of the provided date.\n */\nexport default AnimationViewModel;\n"]},"metadata":{},"sourceType":"module"}