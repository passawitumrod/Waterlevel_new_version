{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\nvar defaultColor = Color.WHITE;\nvar defaultCellAlpha = 0.1;\nvar defaultLineCount = new Cartesian2(8, 8);\nvar defaultLineOffset = new Cartesian2(0, 0);\nvar defaultLineThickness = new Cartesian2(1, 1);\n/**\n * A {@link MaterialProperty} that maps to grid {@link Material} uniforms.\n * @alias GridMaterialProperty\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.color=Color.WHITE] A Property specifying the grid {@link Color}.\n * @param {Property} [options.cellAlpha=0.1] A numeric Property specifying cell alpha values.\n * @param {Property} [options.lineCount=new Cartesian2(8, 8)] A {@link Cartesian2} Property specifying the number of grid lines along each axis.\n * @param {Property} [options.lineThickness=new Cartesian2(1.0, 1.0)] A {@link Cartesian2} Property specifying the thickness of grid lines along each axis.\n * @param {Property} [options.lineOffset=new Cartesian2(0.0, 0.0)] A {@link Cartesian2} Property specifying starting offset of grid lines along each axis.\n *\n * @constructor\n */\n\nfunction GridMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._cellAlpha = undefined;\n  this._cellAlphaSubscription = undefined;\n  this._lineCount = undefined;\n  this._lineCountSubscription = undefined;\n  this._lineThickness = undefined;\n  this._lineThicknessSubscription = undefined;\n  this._lineOffset = undefined;\n  this._lineOffsetSubscription = undefined;\n  this.color = options.color;\n  this.cellAlpha = options.cellAlpha;\n  this.lineCount = options.lineCount;\n  this.lineThickness = options.lineThickness;\n  this.lineOffset = options.lineOffset;\n}\n\nObject.defineProperties(GridMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof GridMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._color) && Property.isConstant(this._cellAlpha) && Property.isConstant(this._lineCount) && Property.isConstant(this._lineThickness) && Property.isConstant(this._lineOffset);\n    }\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof GridMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the Property specifying the grid {@link Color}.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the numeric Property specifying cell alpha values.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property}\n   * @default 0.1\n   */\n  cellAlpha: createPropertyDescriptor(\"cellAlpha\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the number of grid lines along each axis.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property}\n   * @default new Cartesian2(8.0, 8.0)\n   */\n  lineCount: createPropertyDescriptor(\"lineCount\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the thickness of grid lines along each axis.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property}\n   * @default new Cartesian2(1.0, 1.0)\n   */\n  lineThickness: createPropertyDescriptor(\"lineThickness\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the starting offset of grid lines along each axis.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property}\n   * @default new Cartesian2(0.0, 0.0)\n   */\n  lineOffset: createPropertyDescriptor(\"lineOffset\")\n});\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\n\nGridMaterialProperty.prototype.getType = function (time) {\n  return \"Grid\";\n};\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\n\nGridMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n\n  result.color = Property.getValueOrClonedDefault(this._color, time, defaultColor, result.color);\n  result.cellAlpha = Property.getValueOrDefault(this._cellAlpha, time, defaultCellAlpha);\n  result.lineCount = Property.getValueOrClonedDefault(this._lineCount, time, defaultLineCount, result.lineCount);\n  result.lineThickness = Property.getValueOrClonedDefault(this._lineThickness, time, defaultLineThickness, result.lineThickness);\n  result.lineOffset = Property.getValueOrClonedDefault(this._lineOffset, time, defaultLineOffset, result.lineOffset);\n  return result;\n};\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nGridMaterialProperty.prototype.equals = function (other) {\n  return this === other || //\n  other instanceof GridMaterialProperty && //\n  Property.equals(this._color, other._color) && //\n  Property.equals(this._cellAlpha, other._cellAlpha) && //\n  Property.equals(this._lineCount, other._lineCount) && //\n  Property.equals(this._lineThickness, other._lineThickness) && //\n  Property.equals(this._lineOffset, other._lineOffset);\n};\n\nexport default GridMaterialProperty;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/DataSources/GridMaterialProperty.js"],"names":["Cartesian2","Color","defaultValue","defined","Event","createPropertyDescriptor","Property","defaultColor","WHITE","defaultCellAlpha","defaultLineCount","defaultLineOffset","defaultLineThickness","GridMaterialProperty","options","EMPTY_OBJECT","_definitionChanged","_color","undefined","_colorSubscription","_cellAlpha","_cellAlphaSubscription","_lineCount","_lineCountSubscription","_lineThickness","_lineThicknessSubscription","_lineOffset","_lineOffsetSubscription","color","cellAlpha","lineCount","lineThickness","lineOffset","Object","defineProperties","prototype","isConstant","get","definitionChanged","getType","time","getValue","result","getValueOrClonedDefault","getValueOrDefault","equals","other"],"mappings":"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","sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\nvar defaultColor = Color.WHITE;\nvar defaultCellAlpha = 0.1;\nvar defaultLineCount = new Cartesian2(8, 8);\nvar defaultLineOffset = new Cartesian2(0, 0);\nvar defaultLineThickness = new Cartesian2(1, 1);\n\n/**\n * A {@link MaterialProperty} that maps to grid {@link Material} uniforms.\n * @alias GridMaterialProperty\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.color=Color.WHITE] A Property specifying the grid {@link Color}.\n * @param {Property} [options.cellAlpha=0.1] A numeric Property specifying cell alpha values.\n * @param {Property} [options.lineCount=new Cartesian2(8, 8)] A {@link Cartesian2} Property specifying the number of grid lines along each axis.\n * @param {Property} [options.lineThickness=new Cartesian2(1.0, 1.0)] A {@link Cartesian2} Property specifying the thickness of grid lines along each axis.\n * @param {Property} [options.lineOffset=new Cartesian2(0.0, 0.0)] A {@link Cartesian2} Property specifying starting offset of grid lines along each axis.\n *\n * @constructor\n */\nfunction GridMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._cellAlpha = undefined;\n  this._cellAlphaSubscription = undefined;\n  this._lineCount = undefined;\n  this._lineCountSubscription = undefined;\n  this._lineThickness = undefined;\n  this._lineThicknessSubscription = undefined;\n  this._lineOffset = undefined;\n  this._lineOffsetSubscription = undefined;\n\n  this.color = options.color;\n  this.cellAlpha = options.cellAlpha;\n  this.lineCount = options.lineCount;\n  this.lineThickness = options.lineThickness;\n  this.lineOffset = options.lineOffset;\n}\n\nObject.defineProperties(GridMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof GridMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        Property.isConstant(this._color) &&\n        Property.isConstant(this._cellAlpha) &&\n        Property.isConstant(this._lineCount) &&\n        Property.isConstant(this._lineThickness) &&\n        Property.isConstant(this._lineOffset)\n      );\n    },\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof GridMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the Property specifying the grid {@link Color}.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the numeric Property specifying cell alpha values.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property}\n   * @default 0.1\n   */\n  cellAlpha: createPropertyDescriptor(\"cellAlpha\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the number of grid lines along each axis.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property}\n   * @default new Cartesian2(8.0, 8.0)\n   */\n  lineCount: createPropertyDescriptor(\"lineCount\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the thickness of grid lines along each axis.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property}\n   * @default new Cartesian2(1.0, 1.0)\n   */\n  lineThickness: createPropertyDescriptor(\"lineThickness\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the starting offset of grid lines along each axis.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property}\n   * @default new Cartesian2(0.0, 0.0)\n   */\n  lineOffset: createPropertyDescriptor(\"lineOffset\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nGridMaterialProperty.prototype.getType = function (time) {\n  return \"Grid\";\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nGridMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n  result.color = Property.getValueOrClonedDefault(\n    this._color,\n    time,\n    defaultColor,\n    result.color\n  );\n  result.cellAlpha = Property.getValueOrDefault(\n    this._cellAlpha,\n    time,\n    defaultCellAlpha\n  );\n  result.lineCount = Property.getValueOrClonedDefault(\n    this._lineCount,\n    time,\n    defaultLineCount,\n    result.lineCount\n  );\n  result.lineThickness = Property.getValueOrClonedDefault(\n    this._lineThickness,\n    time,\n    defaultLineThickness,\n    result.lineThickness\n  );\n  result.lineOffset = Property.getValueOrClonedDefault(\n    this._lineOffset,\n    time,\n    defaultLineOffset,\n    result.lineOffset\n  );\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nGridMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof GridMaterialProperty && //\n    Property.equals(this._color, other._color) && //\n    Property.equals(this._cellAlpha, other._cellAlpha) && //\n    Property.equals(this._lineCount, other._lineCount) && //\n    Property.equals(this._lineThickness, other._lineThickness) && //\n      Property.equals(this._lineOffset, other._lineOffset))\n  );\n};\nexport default GridMaterialProperty;\n"]},"metadata":{},"sourceType":"module"}