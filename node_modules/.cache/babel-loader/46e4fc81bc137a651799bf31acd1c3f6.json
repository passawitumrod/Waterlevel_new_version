{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport knockout from \"../ThirdParty/knockout.js\";\n/**\n * Create a Command from a given function, for use with ViewModels.\n *\n * A Command is a function with an extra <code>canExecute</code> observable property to determine\n * whether the command can be executed.  When executed, a Command function will check the\n * value of <code>canExecute</code> and throw if false.  It also provides events for when\n * a command has been or is about to be executed.\n *\n * @exports createCommand\n *\n * @param {Function} func The function to execute.\n * @param {Boolean} [canExecute=true] A boolean indicating whether the function can currently be executed.\n */\n\nfunction createCommand(func, canExecute) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(func)) {\n    throw new DeveloperError(\"func is required.\");\n  } //>>includeEnd('debug');\n\n\n  canExecute = defaultValue(canExecute, true);\n  var beforeExecute = new Event();\n  var afterExecute = new Event();\n\n  function command() {\n    //>>includeStart('debug', pragmas.debug);\n    if (!command.canExecute) {\n      throw new DeveloperError(\"Cannot execute command, canExecute is false.\");\n    } //>>includeEnd('debug');\n\n\n    var commandInfo = {\n      args: arguments,\n      cancel: false\n    };\n    var result;\n    beforeExecute.raiseEvent(commandInfo);\n\n    if (!commandInfo.cancel) {\n      result = func.apply(null, arguments);\n      afterExecute.raiseEvent(result);\n    }\n\n    return result;\n  }\n\n  command.canExecute = canExecute;\n  knockout.track(command, [\"canExecute\"]);\n  Object.defineProperties(command, {\n    beforeExecute: {\n      value: beforeExecute\n    },\n    afterExecute: {\n      value: afterExecute\n    }\n  });\n  return command;\n}\n\nexport default createCommand;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Widgets/createCommand.js"],"names":["defaultValue","defined","DeveloperError","Event","knockout","createCommand","func","canExecute","beforeExecute","afterExecute","command","commandInfo","args","arguments","cancel","result","raiseEvent","apply","track","Object","defineProperties","value"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,yBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AAEA;;;;;;;;;;;;;;AAaA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,UAA7B,EAAyC;AACvC;AACA,MAAI,CAACN,OAAO,CAACK,IAAD,CAAZ,EAAoB;AAClB,UAAM,IAAIJ,cAAJ,CAAmB,mBAAnB,CAAN;AACD,GAJsC,CAKvC;;;AAEAK,EAAAA,UAAU,GAAGP,YAAY,CAACO,UAAD,EAAa,IAAb,CAAzB;AAEA,MAAIC,aAAa,GAAG,IAAIL,KAAJ,EAApB;AACA,MAAIM,YAAY,GAAG,IAAIN,KAAJ,EAAnB;;AAEA,WAASO,OAAT,GAAmB;AACjB;AACA,QAAI,CAACA,OAAO,CAACH,UAAb,EAAyB;AACvB,YAAM,IAAIL,cAAJ,CAAmB,8CAAnB,CAAN;AACD,KAJgB,CAKjB;;;AAEA,QAAIS,WAAW,GAAG;AAChBC,MAAAA,IAAI,EAAEC,SADU;AAEhBC,MAAAA,MAAM,EAAE;AAFQ,KAAlB;AAKA,QAAIC,MAAJ;AACAP,IAAAA,aAAa,CAACQ,UAAd,CAAyBL,WAAzB;;AACA,QAAI,CAACA,WAAW,CAACG,MAAjB,EAAyB;AACvBC,MAAAA,MAAM,GAAGT,IAAI,CAACW,KAAL,CAAW,IAAX,EAAiBJ,SAAjB,CAAT;AACAJ,MAAAA,YAAY,CAACO,UAAb,CAAwBD,MAAxB;AACD;;AACD,WAAOA,MAAP;AACD;;AAEDL,EAAAA,OAAO,CAACH,UAAR,GAAqBA,UAArB;AACAH,EAAAA,QAAQ,CAACc,KAAT,CAAeR,OAAf,EAAwB,CAAC,YAAD,CAAxB;AAEAS,EAAAA,MAAM,CAACC,gBAAP,CAAwBV,OAAxB,EAAiC;AAC/BF,IAAAA,aAAa,EAAE;AACba,MAAAA,KAAK,EAAEb;AADM,KADgB;AAI/BC,IAAAA,YAAY,EAAE;AACZY,MAAAA,KAAK,EAAEZ;AADK;AAJiB,GAAjC;AASA,SAAOC,OAAP;AACD;;AACD,eAAeL,aAAf","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport knockout from \"../ThirdParty/knockout.js\";\n\n/**\n * Create a Command from a given function, for use with ViewModels.\n *\n * A Command is a function with an extra <code>canExecute</code> observable property to determine\n * whether the command can be executed.  When executed, a Command function will check the\n * value of <code>canExecute</code> and throw if false.  It also provides events for when\n * a command has been or is about to be executed.\n *\n * @exports createCommand\n *\n * @param {Function} func The function to execute.\n * @param {Boolean} [canExecute=true] A boolean indicating whether the function can currently be executed.\n */\nfunction createCommand(func, canExecute) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(func)) {\n    throw new DeveloperError(\"func is required.\");\n  }\n  //>>includeEnd('debug');\n\n  canExecute = defaultValue(canExecute, true);\n\n  var beforeExecute = new Event();\n  var afterExecute = new Event();\n\n  function command() {\n    //>>includeStart('debug', pragmas.debug);\n    if (!command.canExecute) {\n      throw new DeveloperError(\"Cannot execute command, canExecute is false.\");\n    }\n    //>>includeEnd('debug');\n\n    var commandInfo = {\n      args: arguments,\n      cancel: false,\n    };\n\n    var result;\n    beforeExecute.raiseEvent(commandInfo);\n    if (!commandInfo.cancel) {\n      result = func.apply(null, arguments);\n      afterExecute.raiseEvent(result);\n    }\n    return result;\n  }\n\n  command.canExecute = canExecute;\n  knockout.track(command, [\"canExecute\"]);\n\n  Object.defineProperties(command, {\n    beforeExecute: {\n      value: beforeExecute,\n    },\n    afterExecute: {\n      value: afterExecute,\n    },\n  });\n\n  return command;\n}\nexport default createCommand;\n"]},"metadata":{},"sourceType":"module"}