{"ast":null,"code":"import clone from \"../Core/clone.js\";\nimport defined from \"../Core/defined.js\";\nimport Expression from \"./Expression.js\";\n/**\n * An expression for a style applied to a {@link Cesium3DTileset}.\n * <p>\n * Evaluates a conditions expression defined using the\n * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/Styling|3D Tiles Styling language}.\n * </p>\n * <p>\n * Implements the {@link StyleExpression} interface.\n * </p>\n *\n * @alias ConditionsExpression\n * @constructor\n *\n * @param {Object} [conditionsExpression] The conditions expression defined using the 3D Tiles Styling language.\n * @param {Object} [defines] Defines in the style.\n *\n * @example\n * var expression = new Cesium.ConditionsExpression({\n *     conditions : [\n *         ['${Area} > 10, 'color(\"#FF0000\")'],\n *         ['${id} !== \"1\"', 'color(\"#00FF00\")'],\n *         ['true', 'color(\"#FFFFFF\")']\n *     ]\n * });\n * expression.evaluateColor(feature, result); // returns a Cesium.Color object\n */\n\nfunction ConditionsExpression(conditionsExpression, defines) {\n  this._conditionsExpression = clone(conditionsExpression, true);\n  this._conditions = conditionsExpression.conditions;\n  this._runtimeConditions = undefined;\n  setRuntime(this, defines);\n}\n\nObject.defineProperties(ConditionsExpression.prototype, {\n  /**\n   * Gets the conditions expression defined in the 3D Tiles Styling language.\n   *\n   * @memberof ConditionsExpression.prototype\n   *\n   * @type {Object}\n   * @readonly\n   *\n   * @default undefined\n   */\n  conditionsExpression: {\n    get: function () {\n      return this._conditionsExpression;\n    }\n  }\n});\n\nfunction Statement(condition, expression) {\n  this.condition = condition;\n  this.expression = expression;\n}\n\nfunction setRuntime(expression, defines) {\n  var runtimeConditions = [];\n  var conditions = expression._conditions;\n\n  if (!defined(conditions)) {\n    return;\n  }\n\n  var length = conditions.length;\n\n  for (var i = 0; i < length; ++i) {\n    var statement = conditions[i];\n    var cond = String(statement[0]);\n    var condExpression = String(statement[1]);\n    runtimeConditions.push(new Statement(new Expression(cond, defines), new Expression(condExpression, defines)));\n  }\n\n  expression._runtimeConditions = runtimeConditions;\n}\n/**\n * Evaluates the result of an expression, optionally using the provided feature's properties. If the result of\n * the expression in the\n * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/Styling|3D Tiles Styling language}\n * is of type <code>Boolean</code>, <code>Number</code>, or <code>String</code>, the corresponding JavaScript\n * primitive type will be returned. If the result is a <code>RegExp</code>, a Javascript <code>RegExp</code>\n * object will be returned. If the result is a <code>Cartesian2</code>, <code>Cartesian3</code>, or <code>Cartesian4</code>,\n * a {@link Cartesian2}, {@link Cartesian3}, or {@link Cartesian4} object will be returned. If the <code>result</code> argument is\n * a {@link Color}, the {@link Cartesian4} value is converted to a {@link Color} and then returned.\n *\n * @param {Cesium3DTileFeature} feature The feature whose properties may be used as variables in the expression.\n * @param {Object} [result] The object onto which to store the result.\n * @returns {Boolean|Number|String|RegExp|Cartesian2|Cartesian3|Cartesian4|Color} The result of evaluating the expression.\n */\n\n\nConditionsExpression.prototype.evaluate = function (feature, result) {\n  var conditions = this._runtimeConditions;\n\n  if (!defined(conditions)) {\n    return undefined;\n  }\n\n  var length = conditions.length;\n\n  for (var i = 0; i < length; ++i) {\n    var statement = conditions[i];\n\n    if (statement.condition.evaluate(feature)) {\n      return statement.expression.evaluate(feature, result);\n    }\n  }\n};\n/**\n * Evaluates the result of a Color expression, using the values defined by a feature.\n * <p>\n * This is equivalent to {@link ConditionsExpression#evaluate} but always returns a {@link Color} object.\n * </p>\n * @param {Cesium3DTileFeature} feature The feature whose properties may be used as variables in the expression.\n * @param {Color} [result] The object in which to store the result\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\n\n\nConditionsExpression.prototype.evaluateColor = function (feature, result) {\n  var conditions = this._runtimeConditions;\n\n  if (!defined(conditions)) {\n    return undefined;\n  }\n\n  var length = conditions.length;\n\n  for (var i = 0; i < length; ++i) {\n    var statement = conditions[i];\n\n    if (statement.condition.evaluate(feature)) {\n      return statement.expression.evaluateColor(feature, result);\n    }\n  }\n};\n/**\n * Gets the shader function for this expression.\n * Returns undefined if the shader function can't be generated from this expression.\n *\n * @param {String} functionName Name to give to the generated function.\n * @param {String} attributePrefix Prefix that is added to any variable names to access vertex attributes.\n * @param {Object} shaderState Stores information about the generated shader function, including whether it is translucent.\n * @param {String} returnType The return type of the generated function.\n *\n * @returns {String} The shader function.\n *\n * @private\n */\n\n\nConditionsExpression.prototype.getShaderFunction = function (functionName, attributePrefix, shaderState, returnType) {\n  var conditions = this._runtimeConditions;\n\n  if (!defined(conditions) || conditions.length === 0) {\n    return undefined;\n  }\n\n  var shaderFunction = \"\";\n  var length = conditions.length;\n\n  for (var i = 0; i < length; ++i) {\n    var statement = conditions[i];\n    var condition = statement.condition.getShaderExpression(attributePrefix, shaderState);\n    var expression = statement.expression.getShaderExpression(attributePrefix, shaderState); // Build the if/else chain from the list of conditions\n\n    shaderFunction += \"    \" + (i === 0 ? \"if\" : \"else if\") + \" (\" + condition + \") \\n\" + \"    { \\n\" + \"        return \" + expression + \"; \\n\" + \"    } \\n\";\n  }\n\n  shaderFunction = returnType + \" \" + functionName + \"() \\n\" + \"{ \\n\" + shaderFunction + \"    return \" + returnType + \"(1.0); \\n\" + // Return a default value if no conditions are met\n  \"} \\n\";\n  return shaderFunction;\n};\n\nexport default ConditionsExpression;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/ConditionsExpression.js"],"names":["clone","defined","Expression","ConditionsExpression","conditionsExpression","defines","_conditionsExpression","_conditions","conditions","_runtimeConditions","undefined","setRuntime","Object","defineProperties","prototype","get","Statement","condition","expression","runtimeConditions","length","i","statement","cond","String","condExpression","push","evaluate","feature","result","evaluateColor","getShaderFunction","functionName","attributePrefix","shaderState","returnType","shaderFunction","getShaderExpression"],"mappings":"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","sourcesContent":["import clone from \"../Core/clone.js\";\nimport defined from \"../Core/defined.js\";\nimport Expression from \"./Expression.js\";\n\n/**\n * An expression for a style applied to a {@link Cesium3DTileset}.\n * <p>\n * Evaluates a conditions expression defined using the\n * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/Styling|3D Tiles Styling language}.\n * </p>\n * <p>\n * Implements the {@link StyleExpression} interface.\n * </p>\n *\n * @alias ConditionsExpression\n * @constructor\n *\n * @param {Object} [conditionsExpression] The conditions expression defined using the 3D Tiles Styling language.\n * @param {Object} [defines] Defines in the style.\n *\n * @example\n * var expression = new Cesium.ConditionsExpression({\n *     conditions : [\n *         ['${Area} > 10, 'color(\"#FF0000\")'],\n *         ['${id} !== \"1\"', 'color(\"#00FF00\")'],\n *         ['true', 'color(\"#FFFFFF\")']\n *     ]\n * });\n * expression.evaluateColor(feature, result); // returns a Cesium.Color object\n */\nfunction ConditionsExpression(conditionsExpression, defines) {\n  this._conditionsExpression = clone(conditionsExpression, true);\n  this._conditions = conditionsExpression.conditions;\n  this._runtimeConditions = undefined;\n\n  setRuntime(this, defines);\n}\n\nObject.defineProperties(ConditionsExpression.prototype, {\n  /**\n   * Gets the conditions expression defined in the 3D Tiles Styling language.\n   *\n   * @memberof ConditionsExpression.prototype\n   *\n   * @type {Object}\n   * @readonly\n   *\n   * @default undefined\n   */\n  conditionsExpression: {\n    get: function () {\n      return this._conditionsExpression;\n    },\n  },\n});\n\nfunction Statement(condition, expression) {\n  this.condition = condition;\n  this.expression = expression;\n}\n\nfunction setRuntime(expression, defines) {\n  var runtimeConditions = [];\n  var conditions = expression._conditions;\n  if (!defined(conditions)) {\n    return;\n  }\n  var length = conditions.length;\n  for (var i = 0; i < length; ++i) {\n    var statement = conditions[i];\n    var cond = String(statement[0]);\n    var condExpression = String(statement[1]);\n    runtimeConditions.push(\n      new Statement(\n        new Expression(cond, defines),\n        new Expression(condExpression, defines)\n      )\n    );\n  }\n  expression._runtimeConditions = runtimeConditions;\n}\n\n/**\n * Evaluates the result of an expression, optionally using the provided feature's properties. If the result of\n * the expression in the\n * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/Styling|3D Tiles Styling language}\n * is of type <code>Boolean</code>, <code>Number</code>, or <code>String</code>, the corresponding JavaScript\n * primitive type will be returned. If the result is a <code>RegExp</code>, a Javascript <code>RegExp</code>\n * object will be returned. If the result is a <code>Cartesian2</code>, <code>Cartesian3</code>, or <code>Cartesian4</code>,\n * a {@link Cartesian2}, {@link Cartesian3}, or {@link Cartesian4} object will be returned. If the <code>result</code> argument is\n * a {@link Color}, the {@link Cartesian4} value is converted to a {@link Color} and then returned.\n *\n * @param {Cesium3DTileFeature} feature The feature whose properties may be used as variables in the expression.\n * @param {Object} [result] The object onto which to store the result.\n * @returns {Boolean|Number|String|RegExp|Cartesian2|Cartesian3|Cartesian4|Color} The result of evaluating the expression.\n */\nConditionsExpression.prototype.evaluate = function (feature, result) {\n  var conditions = this._runtimeConditions;\n  if (!defined(conditions)) {\n    return undefined;\n  }\n  var length = conditions.length;\n  for (var i = 0; i < length; ++i) {\n    var statement = conditions[i];\n    if (statement.condition.evaluate(feature)) {\n      return statement.expression.evaluate(feature, result);\n    }\n  }\n};\n\n/**\n * Evaluates the result of a Color expression, using the values defined by a feature.\n * <p>\n * This is equivalent to {@link ConditionsExpression#evaluate} but always returns a {@link Color} object.\n * </p>\n * @param {Cesium3DTileFeature} feature The feature whose properties may be used as variables in the expression.\n * @param {Color} [result] The object in which to store the result\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\nConditionsExpression.prototype.evaluateColor = function (feature, result) {\n  var conditions = this._runtimeConditions;\n  if (!defined(conditions)) {\n    return undefined;\n  }\n  var length = conditions.length;\n  for (var i = 0; i < length; ++i) {\n    var statement = conditions[i];\n    if (statement.condition.evaluate(feature)) {\n      return statement.expression.evaluateColor(feature, result);\n    }\n  }\n};\n\n/**\n * Gets the shader function for this expression.\n * Returns undefined if the shader function can't be generated from this expression.\n *\n * @param {String} functionName Name to give to the generated function.\n * @param {String} attributePrefix Prefix that is added to any variable names to access vertex attributes.\n * @param {Object} shaderState Stores information about the generated shader function, including whether it is translucent.\n * @param {String} returnType The return type of the generated function.\n *\n * @returns {String} The shader function.\n *\n * @private\n */\nConditionsExpression.prototype.getShaderFunction = function (\n  functionName,\n  attributePrefix,\n  shaderState,\n  returnType\n) {\n  var conditions = this._runtimeConditions;\n  if (!defined(conditions) || conditions.length === 0) {\n    return undefined;\n  }\n\n  var shaderFunction = \"\";\n  var length = conditions.length;\n  for (var i = 0; i < length; ++i) {\n    var statement = conditions[i];\n\n    var condition = statement.condition.getShaderExpression(\n      attributePrefix,\n      shaderState\n    );\n    var expression = statement.expression.getShaderExpression(\n      attributePrefix,\n      shaderState\n    );\n\n    // Build the if/else chain from the list of conditions\n    shaderFunction +=\n      \"    \" +\n      (i === 0 ? \"if\" : \"else if\") +\n      \" (\" +\n      condition +\n      \") \\n\" +\n      \"    { \\n\" +\n      \"        return \" +\n      expression +\n      \"; \\n\" +\n      \"    } \\n\";\n  }\n\n  shaderFunction =\n    returnType +\n    \" \" +\n    functionName +\n    \"() \\n\" +\n    \"{ \\n\" +\n    shaderFunction +\n    \"    return \" +\n    returnType +\n    \"(1.0); \\n\" + // Return a default value if no conditions are met\n    \"} \\n\";\n\n  return shaderFunction;\n};\nexport default ConditionsExpression;\n"]},"metadata":{},"sourceType":"module"}