{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Material from \"../Scene/Material.js\";\n/**\n * The interface for all {@link Property} objects that represent {@link Material} uniforms.\n * This type defines an interface and cannot be instantiated directly.\n *\n * @alias MaterialProperty\n * @constructor\n * @abstract\n *\n * @see ColorMaterialProperty\n * @see CompositeMaterialProperty\n * @see GridMaterialProperty\n * @see ImageMaterialProperty\n * @see PolylineGlowMaterialProperty\n * @see PolylineOutlineMaterialProperty\n * @see StripeMaterialProperty\n */\n\nfunction MaterialProperty() {\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(MaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof MaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof MaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: DeveloperError.throwInstantiationError\n  }\n});\n/**\n * Gets the {@link Material} type at the provided time.\n * @function\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\n\nMaterialProperty.prototype.getType = DeveloperError.throwInstantiationError;\n/**\n * Gets the value of the property at the provided time.\n * @function\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\nMaterialProperty.prototype.getValue = DeveloperError.throwInstantiationError;\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n * @function\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\nMaterialProperty.prototype.equals = DeveloperError.throwInstantiationError;\n/**\n * @private\n */\n\nMaterialProperty.getValue = function (time, materialProperty, material) {\n  var type;\n\n  if (defined(materialProperty)) {\n    type = materialProperty.getType(time);\n\n    if (defined(type)) {\n      if (!defined(material) || material.type !== type) {\n        material = Material.fromType(type);\n      }\n\n      materialProperty.getValue(time, material.uniforms);\n      return material;\n    }\n  }\n\n  if (!defined(material) || material.type !== Material.ColorType) {\n    material = Material.fromType(Material.ColorType);\n  }\n\n  Color.clone(Color.WHITE, material.uniforms.color);\n  return material;\n};\n\nexport default MaterialProperty;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/MaterialProperty.js"],"names":["Color","defined","DeveloperError","Material","MaterialProperty","throwInstantiationError","Object","defineProperties","prototype","isConstant","get","definitionChanged","getType","getValue","equals","time","materialProperty","material","type","fromType","uniforms","ColorType","clone","WHITE","color"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,QAAP,MAAqB,sBAArB;AAEA;;;;;;;;;;;;;;;;;AAgBA,SAASC,gBAAT,GAA4B;AAC1BF,EAAAA,cAAc,CAACG,uBAAf;AACD;;AAEDC,MAAM,CAACC,gBAAP,CAAwBH,gBAAgB,CAACI,SAAzC,EAAoD;AAClD;;;;;;;;AAQAC,EAAAA,UAAU,EAAE;AACVC,IAAAA,GAAG,EAAER,cAAc,CAACG;AADV,GATsC;;AAYlD;;;;;;;;;AASAM,EAAAA,iBAAiB,EAAE;AACjBD,IAAAA,GAAG,EAAER,cAAc,CAACG;AADH;AArB+B,CAApD;AA0BA;;;;;;;;AAOAD,gBAAgB,CAACI,SAAjB,CAA2BI,OAA3B,GAAqCV,cAAc,CAACG,uBAApD;AAEA;;;;;;;;;AAQAD,gBAAgB,CAACI,SAAjB,CAA2BK,QAA3B,GAAsCX,cAAc,CAACG,uBAArD;AAEA;;;;;;;;;AAQAD,gBAAgB,CAACI,SAAjB,CAA2BM,MAA3B,GAAoCZ,cAAc,CAACG,uBAAnD;AAEA;;;;AAGAD,gBAAgB,CAACS,QAAjB,GAA4B,UAAUE,IAAV,EAAgBC,gBAAhB,EAAkCC,QAAlC,EAA4C;AACtE,MAAIC,IAAJ;;AAEA,MAAIjB,OAAO,CAACe,gBAAD,CAAX,EAA+B;AAC7BE,IAAAA,IAAI,GAAGF,gBAAgB,CAACJ,OAAjB,CAAyBG,IAAzB,CAAP;;AACA,QAAId,OAAO,CAACiB,IAAD,CAAX,EAAmB;AACjB,UAAI,CAACjB,OAAO,CAACgB,QAAD,CAAR,IAAsBA,QAAQ,CAACC,IAAT,KAAkBA,IAA5C,EAAkD;AAChDD,QAAAA,QAAQ,GAAGd,QAAQ,CAACgB,QAAT,CAAkBD,IAAlB,CAAX;AACD;;AACDF,MAAAA,gBAAgB,CAACH,QAAjB,CAA0BE,IAA1B,EAAgCE,QAAQ,CAACG,QAAzC;AACA,aAAOH,QAAP;AACD;AACF;;AAED,MAAI,CAAChB,OAAO,CAACgB,QAAD,CAAR,IAAsBA,QAAQ,CAACC,IAAT,KAAkBf,QAAQ,CAACkB,SAArD,EAAgE;AAC9DJ,IAAAA,QAAQ,GAAGd,QAAQ,CAACgB,QAAT,CAAkBhB,QAAQ,CAACkB,SAA3B,CAAX;AACD;;AACDrB,EAAAA,KAAK,CAACsB,KAAN,CAAYtB,KAAK,CAACuB,KAAlB,EAAyBN,QAAQ,CAACG,QAAT,CAAkBI,KAA3C;AAEA,SAAOP,QAAP;AACD,CApBD;;AAqBA,eAAeb,gBAAf","sourcesContent":["import Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Material from \"../Scene/Material.js\";\n\n/**\n * The interface for all {@link Property} objects that represent {@link Material} uniforms.\n * This type defines an interface and cannot be instantiated directly.\n *\n * @alias MaterialProperty\n * @constructor\n * @abstract\n *\n * @see ColorMaterialProperty\n * @see CompositeMaterialProperty\n * @see GridMaterialProperty\n * @see ImageMaterialProperty\n * @see PolylineGlowMaterialProperty\n * @see PolylineOutlineMaterialProperty\n * @see StripeMaterialProperty\n */\nfunction MaterialProperty() {\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(MaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof MaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof MaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n * @function\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nMaterialProperty.prototype.getType = DeveloperError.throwInstantiationError;\n\n/**\n * Gets the value of the property at the provided time.\n * @function\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nMaterialProperty.prototype.getValue = DeveloperError.throwInstantiationError;\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n * @function\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nMaterialProperty.prototype.equals = DeveloperError.throwInstantiationError;\n\n/**\n * @private\n */\nMaterialProperty.getValue = function (time, materialProperty, material) {\n  var type;\n\n  if (defined(materialProperty)) {\n    type = materialProperty.getType(time);\n    if (defined(type)) {\n      if (!defined(material) || material.type !== type) {\n        material = Material.fromType(type);\n      }\n      materialProperty.getValue(time, material.uniforms);\n      return material;\n    }\n  }\n\n  if (!defined(material) || material.type !== Material.ColorType) {\n    material = Material.fromType(Material.ColorType);\n  }\n  Color.clone(Color.WHITE, material.uniforms.color);\n\n  return material;\n};\nexport default MaterialProperty;\n"]},"metadata":{},"sourceType":"module"}