{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport when from \"../ThirdParty/when.js\";\nvar defaultColor = new Color(1.0, 1.0, 1.0, 0.4);\nvar defaultGlowColor = new Color(0.0, 1.0, 0.0, 0.05);\nvar defaultBackgroundColor = new Color(0.0, 0.5, 0.0, 0.2);\n/**\n * An {@link ImageryProvider} that draws a wireframe grid on every tile with controllable background and glow.\n * May be useful for custom rendering effects or debugging terrain.\n *\n * @alias GridImageryProvider\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {TilingScheme} [options.tilingScheme=new GeographicTilingScheme()] The tiling scheme for which to draw tiles.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n *                    this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *                    parameter is specified, the WGS84 ellipsoid is used.\n * @param {Number} [options.cells=8] The number of grids cells.\n * @param {Color} [options.color=Color(1.0, 1.0, 1.0, 0.4)] The color to draw grid lines.\n * @param {Color} [options.glowColor=Color(0.0, 1.0, 0.0, 0.05)] The color to draw glow for grid lines.\n * @param {Number} [options.glowWidth=6] The width of lines used for rendering the line glow effect.\n * @param {Color} [options.backgroundColor=Color(0.0, 0.5, 0.0, 0.2)] Background fill color.\n * @param {Number} [options.tileWidth=256] The width of the tile for level-of-detail selection purposes.\n * @param {Number} [options.tileHeight=256] The height of the tile for level-of-detail selection purposes.\n * @param {Number} [options.canvasSize=256] The size of the canvas used for rendering.\n */\n\nfunction GridImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._tilingScheme = defined(options.tilingScheme) ? options.tilingScheme : new GeographicTilingScheme({\n    ellipsoid: options.ellipsoid\n  });\n  this._cells = defaultValue(options.cells, 8);\n  this._color = defaultValue(options.color, defaultColor);\n  this._glowColor = defaultValue(options.glowColor, defaultGlowColor);\n  this._glowWidth = defaultValue(options.glowWidth, 6);\n  this._backgroundColor = defaultValue(options.backgroundColor, defaultBackgroundColor);\n  this._errorEvent = new Event();\n  this._tileWidth = defaultValue(options.tileWidth, 256);\n  this._tileHeight = defaultValue(options.tileHeight, 256); // A little larger than tile size so lines are sharper\n  // Note: can't be too much difference otherwise texture blowout\n\n  this._canvasSize = defaultValue(options.canvasSize, 256); // We only need a single canvas since all tiles will be the same\n\n  this._canvas = this._createGridCanvas();\n  this._readyPromise = when.resolve(true);\n}\n\nObject.defineProperties(GridImageryProvider.prototype, {\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof GridImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function get() {\n      return undefined;\n    }\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function get() {\n      return this._tileWidth;\n    }\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function get() {\n      return this._tileHeight;\n    }\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function get() {\n      return undefined;\n    }\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function get() {\n      return undefined;\n    }\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function get() {\n      return this._tilingScheme;\n    }\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function get() {\n      return this._tilingScheme.rectangle;\n    }\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function get() {\n      return undefined;\n    }\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof GridImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function get() {\n      return this._errorEvent;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof GridImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function get() {\n      return true;\n    }\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof GridImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function get() {\n      return this._readyPromise;\n    }\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function get() {\n      return undefined;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof GridImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function get() {\n      return true;\n    }\n  }\n});\n/**\n * Draws a grid of lines into a canvas.\n */\n\nGridImageryProvider.prototype._drawGrid = function (context) {\n  var minPixel = 0;\n  var maxPixel = this._canvasSize;\n\n  for (var x = 0; x <= this._cells; ++x) {\n    var nx = x / this._cells;\n    var val = 1 + nx * (maxPixel - 1);\n    context.moveTo(val, minPixel);\n    context.lineTo(val, maxPixel);\n    context.moveTo(minPixel, val);\n    context.lineTo(maxPixel, val);\n  }\n\n  context.stroke();\n};\n/**\n * Render a grid into a canvas with background and glow\n */\n\n\nGridImageryProvider.prototype._createGridCanvas = function () {\n  var canvas = document.createElement(\"canvas\");\n  canvas.width = this._canvasSize;\n  canvas.height = this._canvasSize;\n  var minPixel = 0;\n  var maxPixel = this._canvasSize;\n  var context = canvas.getContext(\"2d\"); // Fill the background\n\n  var cssBackgroundColor = this._backgroundColor.toCssColorString();\n\n  context.fillStyle = cssBackgroundColor;\n  context.fillRect(minPixel, minPixel, maxPixel, maxPixel); // Glow for grid lines\n\n  var cssGlowColor = this._glowColor.toCssColorString();\n\n  context.strokeStyle = cssGlowColor; // Wide\n\n  context.lineWidth = this._glowWidth;\n  context.strokeRect(minPixel, minPixel, maxPixel, maxPixel);\n\n  this._drawGrid(context); // Narrow\n\n\n  context.lineWidth = this._glowWidth * 0.5;\n  context.strokeRect(minPixel, minPixel, maxPixel, maxPixel);\n\n  this._drawGrid(context); // Grid lines\n\n\n  var cssColor = this._color.toCssColorString(); // Border\n\n\n  context.strokeStyle = cssColor;\n  context.lineWidth = 2;\n  context.strokeRect(minPixel, minPixel, maxPixel, maxPixel); // Inner\n\n  context.lineWidth = 1;\n\n  this._drawGrid(context);\n\n  return canvas;\n};\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\n\n\nGridImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return undefined;\n};\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link GridImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<Image|Canvas>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n */\n\n\nGridImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  return this._canvas;\n};\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n */\n\n\nGridImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  return undefined;\n};\n\nexport default GridImageryProvider;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/GridImageryProvider.js"],"names":["Color","defaultValue","defined","Event","GeographicTilingScheme","when","defaultColor","defaultGlowColor","defaultBackgroundColor","GridImageryProvider","options","EMPTY_OBJECT","_tilingScheme","tilingScheme","ellipsoid","_cells","cells","_color","color","_glowColor","glowColor","_glowWidth","glowWidth","_backgroundColor","backgroundColor","_errorEvent","_tileWidth","tileWidth","_tileHeight","tileHeight","_canvasSize","canvasSize","_canvas","_createGridCanvas","_readyPromise","resolve","Object","defineProperties","prototype","proxy","get","undefined","maximumLevel","minimumLevel","rectangle","tileDiscardPolicy","errorEvent","ready","readyPromise","credit","hasAlphaChannel","_drawGrid","context","minPixel","maxPixel","x","nx","val","moveTo","lineTo","stroke","canvas","document","createElement","width","height","getContext","cssBackgroundColor","toCssColorString","fillStyle","fillRect","cssGlowColor","strokeStyle","lineWidth","strokeRect","cssColor","getTileCredits","y","level","requestImage","request","pickFeatures","longitude","latitude"],"mappings":"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","sourcesContent":["import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport when from \"../ThirdParty/when.js\";\n\nvar defaultColor = new Color(1.0, 1.0, 1.0, 0.4);\nvar defaultGlowColor = new Color(0.0, 1.0, 0.0, 0.05);\nvar defaultBackgroundColor = new Color(0.0, 0.5, 0.0, 0.2);\n\n/**\n * An {@link ImageryProvider} that draws a wireframe grid on every tile with controllable background and glow.\n * May be useful for custom rendering effects or debugging terrain.\n *\n * @alias GridImageryProvider\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {TilingScheme} [options.tilingScheme=new GeographicTilingScheme()] The tiling scheme for which to draw tiles.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n *                    this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *                    parameter is specified, the WGS84 ellipsoid is used.\n * @param {Number} [options.cells=8] The number of grids cells.\n * @param {Color} [options.color=Color(1.0, 1.0, 1.0, 0.4)] The color to draw grid lines.\n * @param {Color} [options.glowColor=Color(0.0, 1.0, 0.0, 0.05)] The color to draw glow for grid lines.\n * @param {Number} [options.glowWidth=6] The width of lines used for rendering the line glow effect.\n * @param {Color} [options.backgroundColor=Color(0.0, 0.5, 0.0, 0.2)] Background fill color.\n * @param {Number} [options.tileWidth=256] The width of the tile for level-of-detail selection purposes.\n * @param {Number} [options.tileHeight=256] The height of the tile for level-of-detail selection purposes.\n * @param {Number} [options.canvasSize=256] The size of the canvas used for rendering.\n */\nfunction GridImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._tilingScheme = defined(options.tilingScheme)\n    ? options.tilingScheme\n    : new GeographicTilingScheme({ ellipsoid: options.ellipsoid });\n  this._cells = defaultValue(options.cells, 8);\n  this._color = defaultValue(options.color, defaultColor);\n  this._glowColor = defaultValue(options.glowColor, defaultGlowColor);\n  this._glowWidth = defaultValue(options.glowWidth, 6);\n  this._backgroundColor = defaultValue(\n    options.backgroundColor,\n    defaultBackgroundColor\n  );\n  this._errorEvent = new Event();\n\n  this._tileWidth = defaultValue(options.tileWidth, 256);\n  this._tileHeight = defaultValue(options.tileHeight, 256);\n\n  // A little larger than tile size so lines are sharper\n  // Note: can't be too much difference otherwise texture blowout\n  this._canvasSize = defaultValue(options.canvasSize, 256);\n\n  // We only need a single canvas since all tiles will be the same\n  this._canvas = this._createGridCanvas();\n\n  this._readyPromise = when.resolve(true);\n}\n\nObject.defineProperties(GridImageryProvider.prototype, {\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof GridImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._tilingScheme.rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof GridImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof GridImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return true;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof GridImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof GridImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return true;\n    },\n  },\n});\n\n/**\n * Draws a grid of lines into a canvas.\n */\nGridImageryProvider.prototype._drawGrid = function (context) {\n  var minPixel = 0;\n  var maxPixel = this._canvasSize;\n  for (var x = 0; x <= this._cells; ++x) {\n    var nx = x / this._cells;\n    var val = 1 + nx * (maxPixel - 1);\n\n    context.moveTo(val, minPixel);\n    context.lineTo(val, maxPixel);\n    context.moveTo(minPixel, val);\n    context.lineTo(maxPixel, val);\n  }\n  context.stroke();\n};\n\n/**\n * Render a grid into a canvas with background and glow\n */\nGridImageryProvider.prototype._createGridCanvas = function () {\n  var canvas = document.createElement(\"canvas\");\n  canvas.width = this._canvasSize;\n  canvas.height = this._canvasSize;\n  var minPixel = 0;\n  var maxPixel = this._canvasSize;\n\n  var context = canvas.getContext(\"2d\");\n\n  // Fill the background\n  var cssBackgroundColor = this._backgroundColor.toCssColorString();\n  context.fillStyle = cssBackgroundColor;\n  context.fillRect(minPixel, minPixel, maxPixel, maxPixel);\n\n  // Glow for grid lines\n  var cssGlowColor = this._glowColor.toCssColorString();\n  context.strokeStyle = cssGlowColor;\n  // Wide\n  context.lineWidth = this._glowWidth;\n  context.strokeRect(minPixel, minPixel, maxPixel, maxPixel);\n  this._drawGrid(context);\n  // Narrow\n  context.lineWidth = this._glowWidth * 0.5;\n  context.strokeRect(minPixel, minPixel, maxPixel, maxPixel);\n  this._drawGrid(context);\n\n  // Grid lines\n  var cssColor = this._color.toCssColorString();\n  // Border\n  context.strokeStyle = cssColor;\n  context.lineWidth = 2;\n  context.strokeRect(minPixel, minPixel, maxPixel, maxPixel);\n  // Inner\n  context.lineWidth = 1;\n  this._drawGrid(context);\n\n  return canvas;\n};\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\nGridImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link GridImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<Image|Canvas>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n */\nGridImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  return this._canvas;\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n */\nGridImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude\n) {\n  return undefined;\n};\nexport default GridImageryProvider;\n"]},"metadata":{},"sourceType":"module"}