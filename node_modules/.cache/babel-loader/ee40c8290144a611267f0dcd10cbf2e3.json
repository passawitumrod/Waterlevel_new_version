{"ast":null,"code":"import getAccessorByteStride from './getAccessorByteStride.js';\nimport getComponentReader from './getComponentReader.js';\nimport numberOfComponentsForType from './numberOfComponentsForType.js';\nimport arrayFill from '../../Core/arrayFill.js';\nimport ComponentDatatype from '../../Core/ComponentDatatype.js';\nimport defined from '../../Core/defined.js';\n/**\n * Finds the min and max values of the accessor.\n *\n * @param {Object} gltf A javascript object containing a glTF asset.\n * @param {Object} accessor The accessor object from the glTF asset to read.\n * @returns {{min: Array, max: Array}} min holding the array of minimum values and max holding the array of maximum values.\n *\n * @private\n */\n\nfunction findAccessorMinMax(gltf, accessor) {\n  var bufferViews = gltf.bufferViews;\n  var buffers = gltf.buffers;\n  var bufferViewId = accessor.bufferView;\n  var numberOfComponents = numberOfComponentsForType(accessor.type); // According to the spec, when bufferView is not defined, accessor must be initialized with zeros\n\n  if (!defined(accessor.bufferView)) {\n    return {\n      min: arrayFill(new Array(numberOfComponents), 0.0),\n      max: arrayFill(new Array(numberOfComponents), 0.0)\n    };\n  }\n\n  var min = arrayFill(new Array(numberOfComponents), Number.POSITIVE_INFINITY);\n  var max = arrayFill(new Array(numberOfComponents), Number.NEGATIVE_INFINITY);\n  var bufferView = bufferViews[bufferViewId];\n  var bufferId = bufferView.buffer;\n  var buffer = buffers[bufferId];\n  var source = buffer.extras._pipeline.source;\n  var count = accessor.count;\n  var byteStride = getAccessorByteStride(gltf, accessor);\n  var byteOffset = accessor.byteOffset + bufferView.byteOffset + source.byteOffset;\n  var componentType = accessor.componentType;\n  var componentTypeByteLength = ComponentDatatype.getSizeInBytes(componentType);\n  var dataView = new DataView(source.buffer);\n  var components = new Array(numberOfComponents);\n  var componentReader = getComponentReader(componentType);\n\n  for (var i = 0; i < count; i++) {\n    componentReader(dataView, byteOffset, numberOfComponents, componentTypeByteLength, components);\n\n    for (var j = 0; j < numberOfComponents; j++) {\n      var value = components[j];\n      min[j] = Math.min(min[j], value);\n      max[j] = Math.max(max[j], value);\n    }\n\n    byteOffset += byteStride;\n  }\n\n  return {\n    min: min,\n    max: max\n  };\n}\n\nexport default findAccessorMinMax;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/ThirdParty/GltfPipeline/findAccessorMinMax.js"],"names":["getAccessorByteStride","getComponentReader","numberOfComponentsForType","arrayFill","ComponentDatatype","defined","findAccessorMinMax","gltf","accessor","bufferViews","buffers","bufferViewId","bufferView","numberOfComponents","type","min","Array","max","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","bufferId","buffer","source","extras","_pipeline","count","byteStride","byteOffset","componentType","componentTypeByteLength","getSizeInBytes","dataView","DataView","components","componentReader","i","j","value","Math"],"mappings":"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","sourcesContent":["import getAccessorByteStride from './getAccessorByteStride.js'\nimport getComponentReader from './getComponentReader.js'\nimport numberOfComponentsForType from './numberOfComponentsForType.js'\nimport arrayFill from '../../Core/arrayFill.js'\nimport ComponentDatatype from '../../Core/ComponentDatatype.js'\nimport defined from '../../Core/defined.js'\n\n    /**\n     * Finds the min and max values of the accessor.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @param {Object} accessor The accessor object from the glTF asset to read.\n     * @returns {{min: Array, max: Array}} min holding the array of minimum values and max holding the array of maximum values.\n     *\n     * @private\n     */\n    function findAccessorMinMax(gltf, accessor) {\n        var bufferViews = gltf.bufferViews;\n        var buffers = gltf.buffers;\n        var bufferViewId = accessor.bufferView;\n        var numberOfComponents = numberOfComponentsForType(accessor.type);\n\n        // According to the spec, when bufferView is not defined, accessor must be initialized with zeros\n        if (!defined(accessor.bufferView)) {\n            return {\n                min: arrayFill(new Array(numberOfComponents), 0.0),\n                max: arrayFill(new Array(numberOfComponents), 0.0)\n            };\n        }\n\n        var min = arrayFill(new Array(numberOfComponents), Number.POSITIVE_INFINITY);\n        var max = arrayFill(new Array(numberOfComponents), Number.NEGATIVE_INFINITY);\n\n        var bufferView = bufferViews[bufferViewId];\n        var bufferId = bufferView.buffer;\n        var buffer = buffers[bufferId];\n        var source = buffer.extras._pipeline.source;\n\n        var count = accessor.count;\n        var byteStride = getAccessorByteStride(gltf, accessor);\n        var byteOffset = accessor.byteOffset + bufferView.byteOffset + source.byteOffset;\n        var componentType = accessor.componentType;\n        var componentTypeByteLength = ComponentDatatype.getSizeInBytes(componentType);\n        var dataView = new DataView(source.buffer);\n        var components = new Array(numberOfComponents);\n        var componentReader = getComponentReader(componentType);\n\n        for (var i = 0; i < count; i++) {\n            componentReader(dataView, byteOffset, numberOfComponents, componentTypeByteLength, components);\n            for (var j = 0; j < numberOfComponents; j++) {\n                var value = components[j];\n                min[j] = Math.min(min[j], value);\n                max[j] = Math.max(max[j], value);\n            }\n            byteOffset += byteStride;\n        }\n\n        return {\n            min: min,\n            max: max\n        };\n    }\n\n    export default findAccessorMinMax;\n"]},"metadata":{},"sourceType":"module"}