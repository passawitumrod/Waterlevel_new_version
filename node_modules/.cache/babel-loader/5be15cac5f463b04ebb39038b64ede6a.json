{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport CesiumMath from \"../Core/Math.js\";\n/**\n * A heatmap colorizer in a {@link Cesium3DTileset}. A tileset can colorize its visible tiles in a heatmap style.\n *\n * @alias Cesium3DTilesetHeatmap\n * @constructor\n * @private\n */\n\nfunction Cesium3DTilesetHeatmap(tilePropertyName) {\n  /**\n   * The tile variable to track for heatmap colorization.\n   * Tile's will be colorized relative to the other visible tile's values for this variable.\n   *\n   * @type {String}\n   */\n  this.tilePropertyName = tilePropertyName; // Members that are updated every time a tile is colorized\n\n  this._minimum = Number.MAX_VALUE;\n  this._maximum = -Number.MAX_VALUE; // Members that are updated once every frame\n\n  this._previousMinimum = Number.MAX_VALUE;\n  this._previousMaximum = -Number.MAX_VALUE; // If defined uses a reference minimum maximum to colorize by instead of using last frames minimum maximum of rendered tiles.\n  // For example, the _loadTimestamp can get a better colorization using setReferenceMinimumMaximum in order to take accurate colored timing diffs of various scenes.\n\n  this._referenceMinimum = {};\n  this._referenceMaximum = {};\n}\n/**\n * Convert to a usable heatmap value (i.e. a number). Ensures that tile values that aren't stored as numbers can be used for colorization.\n * @private\n */\n\n\nfunction getHeatmapValue(tileValue, tilePropertyName) {\n  var value;\n\n  if (tilePropertyName === \"_loadTimestamp\") {\n    value = JulianDate.toDate(tileValue).getTime();\n  } else {\n    value = tileValue;\n  }\n\n  return value;\n}\n/**\n * Sets the reference minimum and maximum for the variable name. Converted to numbers before they are stored.\n *\n * @param {Object} minimum The minimum reference value.\n * @param {Object} maximum The maximum reference value.\n * @param {String} tilePropertyName The tile variable that will use these reference values when it is colorized.\n */\n\n\nCesium3DTilesetHeatmap.prototype.setReferenceMinimumMaximum = function (minimum, maximum, tilePropertyName) {\n  this._referenceMinimum[tilePropertyName] = getHeatmapValue(minimum, tilePropertyName);\n  this._referenceMaximum[tilePropertyName] = getHeatmapValue(maximum, tilePropertyName);\n};\n\nfunction getHeatmapValueAndUpdateMinimumMaximum(heatmap, tile) {\n  var tilePropertyName = heatmap.tilePropertyName;\n\n  if (defined(tilePropertyName)) {\n    var heatmapValue = getHeatmapValue(tile[tilePropertyName], tilePropertyName);\n\n    if (!defined(heatmapValue)) {\n      heatmap.tilePropertyName = undefined;\n      return heatmapValue;\n    }\n\n    heatmap._maximum = Math.max(heatmapValue, heatmap._maximum);\n    heatmap._minimum = Math.min(heatmapValue, heatmap._minimum);\n    return heatmapValue;\n  }\n}\n\nvar heatmapColors = [new Color(0.1, 0.1, 0.1, 1), // Dark Gray\nnew Color(0.153, 0.278, 0.878, 1), // Blue\nnew Color(0.827, 0.231, 0.49, 1), // Pink\nnew Color(0.827, 0.188, 0.22, 1), // Red\nnew Color(1.0, 0.592, 0.259, 1), // Orange\nnew Color(1.0, 0.843, 0.0, 1)]; // Yellow\n\n/**\n * Colorize the tile in heat map style based on where it lies within the minimum maximum window.\n * Heatmap colors are black, blue, pink, red, orange, yellow. 'Cold' or low numbers will be black and blue, 'Hot' or high numbers will be orange and yellow,\n * @param {Cesium3DTile} tile The tile to colorize relative to last frame's minimum and maximum values of all visible tiles.\n * @param {FrameState} frameState The frame state.\n */\n\nCesium3DTilesetHeatmap.prototype.colorize = function (tile, frameState) {\n  var tilePropertyName = this.tilePropertyName;\n\n  if (!defined(tilePropertyName) || !tile.contentAvailable || tile._selectedFrame !== frameState.frameNumber) {\n    return;\n  }\n\n  var heatmapValue = getHeatmapValueAndUpdateMinimumMaximum(this, tile);\n  var minimum = this._previousMinimum;\n  var maximum = this._previousMaximum;\n\n  if (minimum === Number.MAX_VALUE || maximum === -Number.MAX_VALUE) {\n    return;\n  } // Shift the minimum maximum window down to 0\n\n\n  var shiftedMax = maximum - minimum + CesiumMath.EPSILON7; // Prevent divide by 0\n\n  var shiftedValue = CesiumMath.clamp(heatmapValue - minimum, 0.0, shiftedMax); // Get position between minimum and maximum and convert that to a position in the color array\n\n  var zeroToOne = shiftedValue / shiftedMax;\n  var lastIndex = heatmapColors.length - 1.0;\n  var colorPosition = zeroToOne * lastIndex; // Take floor and ceil of the value to get the two colors to lerp between, lerp using the fractional portion\n\n  var colorPositionFloor = Math.floor(colorPosition);\n  var colorPositionCeil = Math.ceil(colorPosition);\n  var t = colorPosition - colorPositionFloor;\n  var colorZero = heatmapColors[colorPositionFloor];\n  var colorOne = heatmapColors[colorPositionCeil]; // Perform the lerp\n\n  var finalColor = Color.clone(Color.WHITE);\n  finalColor.red = CesiumMath.lerp(colorZero.red, colorOne.red, t);\n  finalColor.green = CesiumMath.lerp(colorZero.green, colorOne.green, t);\n  finalColor.blue = CesiumMath.lerp(colorZero.blue, colorOne.blue, t);\n  tile._debugColor = finalColor;\n};\n/**\n * Resets the tracked minimum maximum values for heatmap colorization. Happens right before tileset traversal.\n */\n\n\nCesium3DTilesetHeatmap.prototype.resetMinimumMaximum = function () {\n  // For heat map colorization\n  var tilePropertyName = this.tilePropertyName;\n\n  if (defined(tilePropertyName)) {\n    var referenceMinimum = this._referenceMinimum[tilePropertyName];\n    var referenceMaximum = this._referenceMaximum[tilePropertyName];\n    var useReference = defined(referenceMinimum) && defined(referenceMaximum);\n    this._previousMinimum = useReference ? referenceMinimum : this._minimum;\n    this._previousMaximum = useReference ? referenceMaximum : this._maximum;\n    this._minimum = Number.MAX_VALUE;\n    this._maximum = -Number.MAX_VALUE;\n  }\n};\n\nexport default Cesium3DTilesetHeatmap;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/Cesium3DTilesetHeatmap.js"],"names":["Color","defined","JulianDate","CesiumMath","Cesium3DTilesetHeatmap","tilePropertyName","_minimum","Number","MAX_VALUE","_maximum","_previousMinimum","_previousMaximum","_referenceMinimum","_referenceMaximum","getHeatmapValue","tileValue","value","toDate","getTime","prototype","setReferenceMinimumMaximum","minimum","maximum","getHeatmapValueAndUpdateMinimumMaximum","heatmap","tile","heatmapValue","undefined","Math","max","min","heatmapColors","colorize","frameState","contentAvailable","_selectedFrame","frameNumber","shiftedMax","EPSILON7","shiftedValue","clamp","zeroToOne","lastIndex","length","colorPosition","colorPositionFloor","floor","colorPositionCeil","ceil","t","colorZero","colorOne","finalColor","clone","WHITE","red","lerp","green","blue","_debugColor","resetMinimumMaximum","referenceMinimum","referenceMaximum","useReference"],"mappings":"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","sourcesContent":["import Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport CesiumMath from \"../Core/Math.js\";\n\n/**\n * A heatmap colorizer in a {@link Cesium3DTileset}. A tileset can colorize its visible tiles in a heatmap style.\n *\n * @alias Cesium3DTilesetHeatmap\n * @constructor\n * @private\n */\nfunction Cesium3DTilesetHeatmap(tilePropertyName) {\n  /**\n   * The tile variable to track for heatmap colorization.\n   * Tile's will be colorized relative to the other visible tile's values for this variable.\n   *\n   * @type {String}\n   */\n  this.tilePropertyName = tilePropertyName;\n\n  // Members that are updated every time a tile is colorized\n  this._minimum = Number.MAX_VALUE;\n  this._maximum = -Number.MAX_VALUE;\n\n  // Members that are updated once every frame\n  this._previousMinimum = Number.MAX_VALUE;\n  this._previousMaximum = -Number.MAX_VALUE;\n\n  // If defined uses a reference minimum maximum to colorize by instead of using last frames minimum maximum of rendered tiles.\n  // For example, the _loadTimestamp can get a better colorization using setReferenceMinimumMaximum in order to take accurate colored timing diffs of various scenes.\n  this._referenceMinimum = {};\n  this._referenceMaximum = {};\n}\n\n/**\n * Convert to a usable heatmap value (i.e. a number). Ensures that tile values that aren't stored as numbers can be used for colorization.\n * @private\n */\nfunction getHeatmapValue(tileValue, tilePropertyName) {\n  var value;\n  if (tilePropertyName === \"_loadTimestamp\") {\n    value = JulianDate.toDate(tileValue).getTime();\n  } else {\n    value = tileValue;\n  }\n  return value;\n}\n\n/**\n * Sets the reference minimum and maximum for the variable name. Converted to numbers before they are stored.\n *\n * @param {Object} minimum The minimum reference value.\n * @param {Object} maximum The maximum reference value.\n * @param {String} tilePropertyName The tile variable that will use these reference values when it is colorized.\n */\nCesium3DTilesetHeatmap.prototype.setReferenceMinimumMaximum = function (\n  minimum,\n  maximum,\n  tilePropertyName\n) {\n  this._referenceMinimum[tilePropertyName] = getHeatmapValue(\n    minimum,\n    tilePropertyName\n  );\n  this._referenceMaximum[tilePropertyName] = getHeatmapValue(\n    maximum,\n    tilePropertyName\n  );\n};\n\nfunction getHeatmapValueAndUpdateMinimumMaximum(heatmap, tile) {\n  var tilePropertyName = heatmap.tilePropertyName;\n  if (defined(tilePropertyName)) {\n    var heatmapValue = getHeatmapValue(\n      tile[tilePropertyName],\n      tilePropertyName\n    );\n    if (!defined(heatmapValue)) {\n      heatmap.tilePropertyName = undefined;\n      return heatmapValue;\n    }\n    heatmap._maximum = Math.max(heatmapValue, heatmap._maximum);\n    heatmap._minimum = Math.min(heatmapValue, heatmap._minimum);\n    return heatmapValue;\n  }\n}\n\nvar heatmapColors = [\n  new Color(0.1, 0.1, 0.1, 1), // Dark Gray\n  new Color(0.153, 0.278, 0.878, 1), // Blue\n  new Color(0.827, 0.231, 0.49, 1), // Pink\n  new Color(0.827, 0.188, 0.22, 1), // Red\n  new Color(1.0, 0.592, 0.259, 1), // Orange\n  new Color(1.0, 0.843, 0.0, 1),\n]; // Yellow\n/**\n * Colorize the tile in heat map style based on where it lies within the minimum maximum window.\n * Heatmap colors are black, blue, pink, red, orange, yellow. 'Cold' or low numbers will be black and blue, 'Hot' or high numbers will be orange and yellow,\n * @param {Cesium3DTile} tile The tile to colorize relative to last frame's minimum and maximum values of all visible tiles.\n * @param {FrameState} frameState The frame state.\n */\nCesium3DTilesetHeatmap.prototype.colorize = function (tile, frameState) {\n  var tilePropertyName = this.tilePropertyName;\n  if (\n    !defined(tilePropertyName) ||\n    !tile.contentAvailable ||\n    tile._selectedFrame !== frameState.frameNumber\n  ) {\n    return;\n  }\n\n  var heatmapValue = getHeatmapValueAndUpdateMinimumMaximum(this, tile);\n  var minimum = this._previousMinimum;\n  var maximum = this._previousMaximum;\n\n  if (minimum === Number.MAX_VALUE || maximum === -Number.MAX_VALUE) {\n    return;\n  }\n\n  // Shift the minimum maximum window down to 0\n  var shiftedMax = maximum - minimum + CesiumMath.EPSILON7; // Prevent divide by 0\n  var shiftedValue = CesiumMath.clamp(heatmapValue - minimum, 0.0, shiftedMax);\n\n  // Get position between minimum and maximum and convert that to a position in the color array\n  var zeroToOne = shiftedValue / shiftedMax;\n  var lastIndex = heatmapColors.length - 1.0;\n  var colorPosition = zeroToOne * lastIndex;\n\n  // Take floor and ceil of the value to get the two colors to lerp between, lerp using the fractional portion\n  var colorPositionFloor = Math.floor(colorPosition);\n  var colorPositionCeil = Math.ceil(colorPosition);\n  var t = colorPosition - colorPositionFloor;\n  var colorZero = heatmapColors[colorPositionFloor];\n  var colorOne = heatmapColors[colorPositionCeil];\n\n  // Perform the lerp\n  var finalColor = Color.clone(Color.WHITE);\n  finalColor.red = CesiumMath.lerp(colorZero.red, colorOne.red, t);\n  finalColor.green = CesiumMath.lerp(colorZero.green, colorOne.green, t);\n  finalColor.blue = CesiumMath.lerp(colorZero.blue, colorOne.blue, t);\n  tile._debugColor = finalColor;\n};\n\n/**\n * Resets the tracked minimum maximum values for heatmap colorization. Happens right before tileset traversal.\n */\nCesium3DTilesetHeatmap.prototype.resetMinimumMaximum = function () {\n  // For heat map colorization\n  var tilePropertyName = this.tilePropertyName;\n  if (defined(tilePropertyName)) {\n    var referenceMinimum = this._referenceMinimum[tilePropertyName];\n    var referenceMaximum = this._referenceMaximum[tilePropertyName];\n    var useReference = defined(referenceMinimum) && defined(referenceMaximum);\n    this._previousMinimum = useReference ? referenceMinimum : this._minimum;\n    this._previousMaximum = useReference ? referenceMaximum : this._maximum;\n    this._minimum = Number.MAX_VALUE;\n    this._maximum = -Number.MAX_VALUE;\n  }\n};\nexport default Cesium3DTilesetHeatmap;\n"]},"metadata":{},"sourceType":"module"}