{"ast":null,"code":"import BingMapsApi from \"./BingMapsApi.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport Resource from \"./Resource.js\";\nvar url = \"https://dev.virtualearth.net/REST/v1/Locations\";\n/**\n * Provides geocoding through Bing Maps.\n * @alias BingMapsGeocoderService\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {String} [options.key] A key to use with the Bing Maps geocoding service\n */\n\nfunction BingMapsGeocoderService(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var key = options.key;\n  this._key = BingMapsApi.getKey(key);\n  this._resource = new Resource({\n    url: url,\n    queryParameters: {\n      key: this._key\n    }\n  });\n}\n\nObject.defineProperties(BingMapsGeocoderService.prototype, {\n  /**\n   * The URL endpoint for the Bing geocoder service\n   * @type {String}\n   * @memberof BingMapsGeocoderService.prototype\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return url;\n    }\n  },\n\n  /**\n   * The key for the Bing geocoder service\n   * @type {String}\n   * @memberof BingMapsGeocoderService.prototype\n   * @readonly\n   */\n  key: {\n    get: function () {\n      return this._key;\n    }\n  }\n});\n/**\n * @function\n *\n * @param {String} query The query to be sent to the geocoder service\n * @returns {Promise<GeocoderService~Result[]>}\n */\n\nBingMapsGeocoderService.prototype.geocode = function (query) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"query\", query); //>>includeEnd('debug');\n\n  var resource = this._resource.getDerivedResource({\n    queryParameters: {\n      query: query\n    }\n  });\n\n  return resource.fetchJsonp(\"jsonp\").then(function (result) {\n    if (result.resourceSets.length === 0) {\n      return [];\n    }\n\n    var results = result.resourceSets[0].resources;\n    return results.map(function (resource) {\n      var bbox = resource.bbox;\n      var south = bbox[0];\n      var west = bbox[1];\n      var north = bbox[2];\n      var east = bbox[3];\n      return {\n        displayName: resource.name,\n        destination: Rectangle.fromDegrees(west, south, east, north)\n      };\n    });\n  });\n};\n\nexport default BingMapsGeocoderService;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/BingMapsGeocoderService.js"],"names":["BingMapsApi","Check","defaultValue","Rectangle","Resource","url","BingMapsGeocoderService","options","EMPTY_OBJECT","key","_key","getKey","_resource","queryParameters","Object","defineProperties","prototype","get","geocode","query","typeOf","string","resource","getDerivedResource","fetchJsonp","then","result","resourceSets","length","results","resources","map","bbox","south","west","north","east","displayName","name","destination","fromDegrees"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,kBAAxB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA,IAAIC,GAAG,GAAG,gDAAV;AAEA;;;;;;;;;AAQA,SAASC,uBAAT,CAAiCC,OAAjC,EAA0C;AACxCA,EAAAA,OAAO,GAAGL,YAAY,CAACK,OAAD,EAAUL,YAAY,CAACM,YAAvB,CAAtB;AAEA,MAAIC,GAAG,GAAGF,OAAO,CAACE,GAAlB;AACA,OAAKC,IAAL,GAAYV,WAAW,CAACW,MAAZ,CAAmBF,GAAnB,CAAZ;AAEA,OAAKG,SAAL,GAAiB,IAAIR,QAAJ,CAAa;AAC5BC,IAAAA,GAAG,EAAEA,GADuB;AAE5BQ,IAAAA,eAAe,EAAE;AACfJ,MAAAA,GAAG,EAAE,KAAKC;AADK;AAFW,GAAb,CAAjB;AAMD;;AAEDI,MAAM,CAACC,gBAAP,CAAwBT,uBAAuB,CAACU,SAAhD,EAA2D;AACzD;;;;;;AAMAX,EAAAA,GAAG,EAAE;AACHY,IAAAA,GAAG,EAAE,YAAY;AACf,aAAOZ,GAAP;AACD;AAHE,GAPoD;;AAazD;;;;;;AAMAI,EAAAA,GAAG,EAAE;AACHQ,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKP,IAAZ;AACD;AAHE;AAnBoD,CAA3D;AA0BA;;;;;;;AAMAJ,uBAAuB,CAACU,SAAxB,CAAkCE,OAAlC,GAA4C,UAAUC,KAAV,EAAiB;AAC3D;AACAlB,EAAAA,KAAK,CAACmB,MAAN,CAAaC,MAAb,CAAoB,OAApB,EAA6BF,KAA7B,EAF2D,CAG3D;;AAEA,MAAIG,QAAQ,GAAG,KAAKV,SAAL,CAAeW,kBAAf,CAAkC;AAC/CV,IAAAA,eAAe,EAAE;AACfM,MAAAA,KAAK,EAAEA;AADQ;AAD8B,GAAlC,CAAf;;AAMA,SAAOG,QAAQ,CAACE,UAAT,CAAoB,OAApB,EAA6BC,IAA7B,CAAkC,UAAUC,MAAV,EAAkB;AACzD,QAAIA,MAAM,CAACC,YAAP,CAAoBC,MAApB,KAA+B,CAAnC,EAAsC;AACpC,aAAO,EAAP;AACD;;AAED,QAAIC,OAAO,GAAGH,MAAM,CAACC,YAAP,CAAoB,CAApB,EAAuBG,SAArC;AAEA,WAAOD,OAAO,CAACE,GAAR,CAAY,UAAUT,QAAV,EAAoB;AACrC,UAAIU,IAAI,GAAGV,QAAQ,CAACU,IAApB;AACA,UAAIC,KAAK,GAAGD,IAAI,CAAC,CAAD,CAAhB;AACA,UAAIE,IAAI,GAAGF,IAAI,CAAC,CAAD,CAAf;AACA,UAAIG,KAAK,GAAGH,IAAI,CAAC,CAAD,CAAhB;AACA,UAAII,IAAI,GAAGJ,IAAI,CAAC,CAAD,CAAf;AACA,aAAO;AACLK,QAAAA,WAAW,EAAEf,QAAQ,CAACgB,IADjB;AAELC,QAAAA,WAAW,EAAEpC,SAAS,CAACqC,WAAV,CAAsBN,IAAtB,EAA4BD,KAA5B,EAAmCG,IAAnC,EAAyCD,KAAzC;AAFR,OAAP;AAID,KAVM,CAAP;AAWD,GAlBM,CAAP;AAmBD,CA9BD;;AA+BA,eAAe7B,uBAAf","sourcesContent":["import BingMapsApi from \"./BingMapsApi.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport Resource from \"./Resource.js\";\n\nvar url = \"https://dev.virtualearth.net/REST/v1/Locations\";\n\n/**\n * Provides geocoding through Bing Maps.\n * @alias BingMapsGeocoderService\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {String} [options.key] A key to use with the Bing Maps geocoding service\n */\nfunction BingMapsGeocoderService(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var key = options.key;\n  this._key = BingMapsApi.getKey(key);\n\n  this._resource = new Resource({\n    url: url,\n    queryParameters: {\n      key: this._key,\n    },\n  });\n}\n\nObject.defineProperties(BingMapsGeocoderService.prototype, {\n  /**\n   * The URL endpoint for the Bing geocoder service\n   * @type {String}\n   * @memberof BingMapsGeocoderService.prototype\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return url;\n    },\n  },\n\n  /**\n   * The key for the Bing geocoder service\n   * @type {String}\n   * @memberof BingMapsGeocoderService.prototype\n   * @readonly\n   */\n  key: {\n    get: function () {\n      return this._key;\n    },\n  },\n});\n\n/**\n * @function\n *\n * @param {String} query The query to be sent to the geocoder service\n * @returns {Promise<GeocoderService~Result[]>}\n */\nBingMapsGeocoderService.prototype.geocode = function (query) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"query\", query);\n  //>>includeEnd('debug');\n\n  var resource = this._resource.getDerivedResource({\n    queryParameters: {\n      query: query,\n    },\n  });\n\n  return resource.fetchJsonp(\"jsonp\").then(function (result) {\n    if (result.resourceSets.length === 0) {\n      return [];\n    }\n\n    var results = result.resourceSets[0].resources;\n\n    return results.map(function (resource) {\n      var bbox = resource.bbox;\n      var south = bbox[0];\n      var west = bbox[1];\n      var north = bbox[2];\n      var east = bbox[3];\n      return {\n        displayName: resource.name,\n        destination: Rectangle.fromDegrees(west, south, east, north),\n      };\n    });\n  });\n};\nexport default BingMapsGeocoderService;\n"]},"metadata":{},"sourceType":"module"}