{"ast":null,"code":"import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\n/**\n * A set of curvilinear 3-dimensional coordinates.\n *\n * @alias Spherical\n * @constructor\n *\n * @param {Number} [clock=0.0] The angular coordinate lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\n * @param {Number} [cone=0.0] The angular coordinate measured from the positive z-axis and toward the negative z-axis.\n * @param {Number} [magnitude=1.0] The linear coordinate measured from the origin.\n */\n\nfunction Spherical(clock, cone, magnitude) {\n  /**\n   * The clock component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.clock = defaultValue(clock, 0.0);\n  /**\n   * The cone component.\n   * @type {Number}\n   * @default 0.0\n   */\n\n  this.cone = defaultValue(cone, 0.0);\n  /**\n   * The magnitude component.\n   * @type {Number}\n   * @default 1.0\n   */\n\n  this.magnitude = defaultValue(magnitude, 1.0);\n}\n/**\n * Converts the provided Cartesian3 into Spherical coordinates.\n *\n * @param {Cartesian3} cartesian3 The Cartesian3 to be converted to Spherical.\n * @param {Spherical} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Spherical} The modified result parameter, or a new instance if one was not provided.\n */\n\n\nSpherical.fromCartesian3 = function (cartesian3, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian3\", cartesian3); //>>includeEnd('debug');\n\n  var x = cartesian3.x;\n  var y = cartesian3.y;\n  var z = cartesian3.z;\n  var radialSquared = x * x + y * y;\n\n  if (!defined(result)) {\n    result = new Spherical();\n  }\n\n  result.clock = Math.atan2(y, x);\n  result.cone = Math.atan2(Math.sqrt(radialSquared), z);\n  result.magnitude = Math.sqrt(radialSquared + z * z);\n  return result;\n};\n/**\n * Creates a duplicate of a Spherical.\n *\n * @param {Spherical} spherical The spherical to clone.\n * @param {Spherical} [result] The object to store the result into, if undefined a new instance will be created.\n * @returns {Spherical} The modified result parameter or a new instance if result was undefined. (Returns undefined if spherical is undefined)\n */\n\n\nSpherical.clone = function (spherical, result) {\n  if (!defined(spherical)) {\n    return undefined;\n  }\n\n  if (!defined(result)) {\n    return new Spherical(spherical.clock, spherical.cone, spherical.magnitude);\n  }\n\n  result.clock = spherical.clock;\n  result.cone = spherical.cone;\n  result.magnitude = spherical.magnitude;\n  return result;\n};\n/**\n * Computes the normalized version of the provided spherical.\n *\n * @param {Spherical} spherical The spherical to be normalized.\n * @param {Spherical} [result] The object to store the result into, if undefined a new instance will be created.\n * @returns {Spherical} The modified result parameter or a new instance if result was undefined.\n */\n\n\nSpherical.normalize = function (spherical, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"spherical\", spherical); //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Spherical(spherical.clock, spherical.cone, 1.0);\n  }\n\n  result.clock = spherical.clock;\n  result.cone = spherical.cone;\n  result.magnitude = 1.0;\n  return result;\n};\n/**\n * Returns true if the first spherical is equal to the second spherical, false otherwise.\n *\n * @param {Spherical} left The first Spherical to be compared.\n * @param {Spherical} right The second Spherical to be compared.\n * @returns {Boolean} true if the first spherical is equal to the second spherical, false otherwise.\n */\n\n\nSpherical.equals = function (left, right) {\n  return left === right || defined(left) && defined(right) && left.clock === right.clock && left.cone === right.cone && left.magnitude === right.magnitude;\n};\n/**\n * Returns true if the first spherical is within the provided epsilon of the second spherical, false otherwise.\n *\n * @param {Spherical} left The first Spherical to be compared.\n * @param {Spherical} right The second Spherical to be compared.\n * @param {Number} [epsilon=0.0] The epsilon to compare against.\n * @returns {Boolean} true if the first spherical is within the provided epsilon of the second spherical, false otherwise.\n */\n\n\nSpherical.equalsEpsilon = function (left, right, epsilon) {\n  epsilon = defaultValue(epsilon, 0.0);\n  return left === right || defined(left) && defined(right) && Math.abs(left.clock - right.clock) <= epsilon && Math.abs(left.cone - right.cone) <= epsilon && Math.abs(left.magnitude - right.magnitude) <= epsilon;\n};\n/**\n * Returns true if this spherical is equal to the provided spherical, false otherwise.\n *\n * @param {Spherical} other The Spherical to be compared.\n * @returns {Boolean} true if this spherical is equal to the provided spherical, false otherwise.\n */\n\n\nSpherical.prototype.equals = function (other) {\n  return Spherical.equals(this, other);\n};\n/**\n * Creates a duplicate of this Spherical.\n *\n * @param {Spherical} [result] The object to store the result into, if undefined a new instance will be created.\n * @returns {Spherical} The modified result parameter or a new instance if result was undefined.\n */\n\n\nSpherical.prototype.clone = function (result) {\n  return Spherical.clone(this, result);\n};\n/**\n * Returns true if this spherical is within the provided epsilon of the provided spherical, false otherwise.\n *\n * @param {Spherical} other The Spherical to be compared.\n * @param {Number} epsilon The epsilon to compare against.\n * @returns {Boolean} true if this spherical is within the provided epsilon of the provided spherical, false otherwise.\n */\n\n\nSpherical.prototype.equalsEpsilon = function (other, epsilon) {\n  return Spherical.equalsEpsilon(this, other, epsilon);\n};\n/**\n * Returns a string representing this instance in the format (clock, cone, magnitude).\n *\n * @returns {String} A string representing this instance.\n */\n\n\nSpherical.prototype.toString = function () {\n  return \"(\" + this.clock + \", \" + this.cone + \", \" + this.magnitude + \")\";\n};\n\nexport default Spherical;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/Spherical.js"],"names":["Check","defaultValue","defined","Spherical","clock","cone","magnitude","fromCartesian3","cartesian3","result","typeOf","object","x","y","z","radialSquared","Math","atan2","sqrt","clone","spherical","undefined","normalize","equals","left","right","equalsEpsilon","epsilon","abs","prototype","other","toString"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,cAApB;AAEA;;;;;;;;;;;AAUA,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,IAA1B,EAAgCC,SAAhC,EAA2C;AACzC;;;;;AAKA,OAAKF,KAAL,GAAaH,YAAY,CAACG,KAAD,EAAQ,GAAR,CAAzB;AACA;;;;;;AAKA,OAAKC,IAAL,GAAYJ,YAAY,CAACI,IAAD,EAAO,GAAP,CAAxB;AACA;;;;;;AAKA,OAAKC,SAAL,GAAiBL,YAAY,CAACK,SAAD,EAAY,GAAZ,CAA7B;AACD;AAED;;;;;;;;;AAOAH,SAAS,CAACI,cAAV,GAA2B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8B;AACvD;AACAT,EAAAA,KAAK,CAACU,MAAN,CAAaC,MAAb,CAAoB,YAApB,EAAkCH,UAAlC,EAFuD,CAGvD;;AAEA,MAAII,CAAC,GAAGJ,UAAU,CAACI,CAAnB;AACA,MAAIC,CAAC,GAAGL,UAAU,CAACK,CAAnB;AACA,MAAIC,CAAC,GAAGN,UAAU,CAACM,CAAnB;AACA,MAAIC,aAAa,GAAGH,CAAC,GAAGA,CAAJ,GAAQC,CAAC,GAAGA,CAAhC;;AAEA,MAAI,CAACX,OAAO,CAACO,MAAD,CAAZ,EAAsB;AACpBA,IAAAA,MAAM,GAAG,IAAIN,SAAJ,EAAT;AACD;;AAEDM,EAAAA,MAAM,CAACL,KAAP,GAAeY,IAAI,CAACC,KAAL,CAAWJ,CAAX,EAAcD,CAAd,CAAf;AACAH,EAAAA,MAAM,CAACJ,IAAP,GAAcW,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,IAAL,CAAUH,aAAV,CAAX,EAAqCD,CAArC,CAAd;AACAL,EAAAA,MAAM,CAACH,SAAP,GAAmBU,IAAI,CAACE,IAAL,CAAUH,aAAa,GAAGD,CAAC,GAAGA,CAA9B,CAAnB;AACA,SAAOL,MAAP;AACD,CAlBD;AAoBA;;;;;;;;;AAOAN,SAAS,CAACgB,KAAV,GAAkB,UAAUC,SAAV,EAAqBX,MAArB,EAA6B;AAC7C,MAAI,CAACP,OAAO,CAACkB,SAAD,CAAZ,EAAyB;AACvB,WAAOC,SAAP;AACD;;AAED,MAAI,CAACnB,OAAO,CAACO,MAAD,CAAZ,EAAsB;AACpB,WAAO,IAAIN,SAAJ,CAAciB,SAAS,CAAChB,KAAxB,EAA+BgB,SAAS,CAACf,IAAzC,EAA+Ce,SAAS,CAACd,SAAzD,CAAP;AACD;;AAEDG,EAAAA,MAAM,CAACL,KAAP,GAAegB,SAAS,CAAChB,KAAzB;AACAK,EAAAA,MAAM,CAACJ,IAAP,GAAce,SAAS,CAACf,IAAxB;AACAI,EAAAA,MAAM,CAACH,SAAP,GAAmBc,SAAS,CAACd,SAA7B;AACA,SAAOG,MAAP;AACD,CAbD;AAeA;;;;;;;;;AAOAN,SAAS,CAACmB,SAAV,GAAsB,UAAUF,SAAV,EAAqBX,MAArB,EAA6B;AACjD;AACAT,EAAAA,KAAK,CAACU,MAAN,CAAaC,MAAb,CAAoB,WAApB,EAAiCS,SAAjC,EAFiD,CAGjD;;AAEA,MAAI,CAAClB,OAAO,CAACO,MAAD,CAAZ,EAAsB;AACpB,WAAO,IAAIN,SAAJ,CAAciB,SAAS,CAAChB,KAAxB,EAA+BgB,SAAS,CAACf,IAAzC,EAA+C,GAA/C,CAAP;AACD;;AAEDI,EAAAA,MAAM,CAACL,KAAP,GAAegB,SAAS,CAAChB,KAAzB;AACAK,EAAAA,MAAM,CAACJ,IAAP,GAAce,SAAS,CAACf,IAAxB;AACAI,EAAAA,MAAM,CAACH,SAAP,GAAmB,GAAnB;AACA,SAAOG,MAAP;AACD,CAbD;AAeA;;;;;;;;;AAOAN,SAAS,CAACoB,MAAV,GAAmB,UAAUC,IAAV,EAAgBC,KAAhB,EAAuB;AACxC,SACED,IAAI,KAAKC,KAAT,IACCvB,OAAO,CAACsB,IAAD,CAAP,IACCtB,OAAO,CAACuB,KAAD,CADR,IAECD,IAAI,CAACpB,KAAL,KAAeqB,KAAK,CAACrB,KAFtB,IAGCoB,IAAI,CAACnB,IAAL,KAAcoB,KAAK,CAACpB,IAHrB,IAICmB,IAAI,CAAClB,SAAL,KAAmBmB,KAAK,CAACnB,SAN7B;AAQD,CATD;AAWA;;;;;;;;;;AAQAH,SAAS,CAACuB,aAAV,GAA0B,UAAUF,IAAV,EAAgBC,KAAhB,EAAuBE,OAAvB,EAAgC;AACxDA,EAAAA,OAAO,GAAG1B,YAAY,CAAC0B,OAAD,EAAU,GAAV,CAAtB;AACA,SACEH,IAAI,KAAKC,KAAT,IACCvB,OAAO,CAACsB,IAAD,CAAP,IACCtB,OAAO,CAACuB,KAAD,CADR,IAECT,IAAI,CAACY,GAAL,CAASJ,IAAI,CAACpB,KAAL,GAAaqB,KAAK,CAACrB,KAA5B,KAAsCuB,OAFvC,IAGCX,IAAI,CAACY,GAAL,CAASJ,IAAI,CAACnB,IAAL,GAAYoB,KAAK,CAACpB,IAA3B,KAAoCsB,OAHrC,IAICX,IAAI,CAACY,GAAL,CAASJ,IAAI,CAAClB,SAAL,GAAiBmB,KAAK,CAACnB,SAAhC,KAA8CqB,OANlD;AAQD,CAVD;AAYA;;;;;;;;AAMAxB,SAAS,CAAC0B,SAAV,CAAoBN,MAApB,GAA6B,UAAUO,KAAV,EAAiB;AAC5C,SAAO3B,SAAS,CAACoB,MAAV,CAAiB,IAAjB,EAAuBO,KAAvB,CAAP;AACD,CAFD;AAIA;;;;;;;;AAMA3B,SAAS,CAAC0B,SAAV,CAAoBV,KAApB,GAA4B,UAAUV,MAAV,EAAkB;AAC5C,SAAON,SAAS,CAACgB,KAAV,CAAgB,IAAhB,EAAsBV,MAAtB,CAAP;AACD,CAFD;AAIA;;;;;;;;;AAOAN,SAAS,CAAC0B,SAAV,CAAoBH,aAApB,GAAoC,UAAUI,KAAV,EAAiBH,OAAjB,EAA0B;AAC5D,SAAOxB,SAAS,CAACuB,aAAV,CAAwB,IAAxB,EAA8BI,KAA9B,EAAqCH,OAArC,CAAP;AACD,CAFD;AAIA;;;;;;;AAKAxB,SAAS,CAAC0B,SAAV,CAAoBE,QAApB,GAA+B,YAAY;AACzC,SAAO,MAAM,KAAK3B,KAAX,GAAmB,IAAnB,GAA0B,KAAKC,IAA/B,GAAsC,IAAtC,GAA6C,KAAKC,SAAlD,GAA8D,GAArE;AACD,CAFD;;AAGA,eAAeH,SAAf","sourcesContent":["import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\n\n/**\n * A set of curvilinear 3-dimensional coordinates.\n *\n * @alias Spherical\n * @constructor\n *\n * @param {Number} [clock=0.0] The angular coordinate lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\n * @param {Number} [cone=0.0] The angular coordinate measured from the positive z-axis and toward the negative z-axis.\n * @param {Number} [magnitude=1.0] The linear coordinate measured from the origin.\n */\nfunction Spherical(clock, cone, magnitude) {\n  /**\n   * The clock component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.clock = defaultValue(clock, 0.0);\n  /**\n   * The cone component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.cone = defaultValue(cone, 0.0);\n  /**\n   * The magnitude component.\n   * @type {Number}\n   * @default 1.0\n   */\n  this.magnitude = defaultValue(magnitude, 1.0);\n}\n\n/**\n * Converts the provided Cartesian3 into Spherical coordinates.\n *\n * @param {Cartesian3} cartesian3 The Cartesian3 to be converted to Spherical.\n * @param {Spherical} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Spherical} The modified result parameter, or a new instance if one was not provided.\n */\nSpherical.fromCartesian3 = function (cartesian3, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian3\", cartesian3);\n  //>>includeEnd('debug');\n\n  var x = cartesian3.x;\n  var y = cartesian3.y;\n  var z = cartesian3.z;\n  var radialSquared = x * x + y * y;\n\n  if (!defined(result)) {\n    result = new Spherical();\n  }\n\n  result.clock = Math.atan2(y, x);\n  result.cone = Math.atan2(Math.sqrt(radialSquared), z);\n  result.magnitude = Math.sqrt(radialSquared + z * z);\n  return result;\n};\n\n/**\n * Creates a duplicate of a Spherical.\n *\n * @param {Spherical} spherical The spherical to clone.\n * @param {Spherical} [result] The object to store the result into, if undefined a new instance will be created.\n * @returns {Spherical} The modified result parameter or a new instance if result was undefined. (Returns undefined if spherical is undefined)\n */\nSpherical.clone = function (spherical, result) {\n  if (!defined(spherical)) {\n    return undefined;\n  }\n\n  if (!defined(result)) {\n    return new Spherical(spherical.clock, spherical.cone, spherical.magnitude);\n  }\n\n  result.clock = spherical.clock;\n  result.cone = spherical.cone;\n  result.magnitude = spherical.magnitude;\n  return result;\n};\n\n/**\n * Computes the normalized version of the provided spherical.\n *\n * @param {Spherical} spherical The spherical to be normalized.\n * @param {Spherical} [result] The object to store the result into, if undefined a new instance will be created.\n * @returns {Spherical} The modified result parameter or a new instance if result was undefined.\n */\nSpherical.normalize = function (spherical, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"spherical\", spherical);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Spherical(spherical.clock, spherical.cone, 1.0);\n  }\n\n  result.clock = spherical.clock;\n  result.cone = spherical.cone;\n  result.magnitude = 1.0;\n  return result;\n};\n\n/**\n * Returns true if the first spherical is equal to the second spherical, false otherwise.\n *\n * @param {Spherical} left The first Spherical to be compared.\n * @param {Spherical} right The second Spherical to be compared.\n * @returns {Boolean} true if the first spherical is equal to the second spherical, false otherwise.\n */\nSpherical.equals = function (left, right) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      left.clock === right.clock &&\n      left.cone === right.cone &&\n      left.magnitude === right.magnitude)\n  );\n};\n\n/**\n * Returns true if the first spherical is within the provided epsilon of the second spherical, false otherwise.\n *\n * @param {Spherical} left The first Spherical to be compared.\n * @param {Spherical} right The second Spherical to be compared.\n * @param {Number} [epsilon=0.0] The epsilon to compare against.\n * @returns {Boolean} true if the first spherical is within the provided epsilon of the second spherical, false otherwise.\n */\nSpherical.equalsEpsilon = function (left, right, epsilon) {\n  epsilon = defaultValue(epsilon, 0.0);\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      Math.abs(left.clock - right.clock) <= epsilon &&\n      Math.abs(left.cone - right.cone) <= epsilon &&\n      Math.abs(left.magnitude - right.magnitude) <= epsilon)\n  );\n};\n\n/**\n * Returns true if this spherical is equal to the provided spherical, false otherwise.\n *\n * @param {Spherical} other The Spherical to be compared.\n * @returns {Boolean} true if this spherical is equal to the provided spherical, false otherwise.\n */\nSpherical.prototype.equals = function (other) {\n  return Spherical.equals(this, other);\n};\n\n/**\n * Creates a duplicate of this Spherical.\n *\n * @param {Spherical} [result] The object to store the result into, if undefined a new instance will be created.\n * @returns {Spherical} The modified result parameter or a new instance if result was undefined.\n */\nSpherical.prototype.clone = function (result) {\n  return Spherical.clone(this, result);\n};\n\n/**\n * Returns true if this spherical is within the provided epsilon of the provided spherical, false otherwise.\n *\n * @param {Spherical} other The Spherical to be compared.\n * @param {Number} epsilon The epsilon to compare against.\n * @returns {Boolean} true if this spherical is within the provided epsilon of the provided spherical, false otherwise.\n */\nSpherical.prototype.equalsEpsilon = function (other, epsilon) {\n  return Spherical.equalsEpsilon(this, other, epsilon);\n};\n\n/**\n * Returns a string representing this instance in the format (clock, cone, magnitude).\n *\n * @returns {String} A string representing this instance.\n */\nSpherical.prototype.toString = function () {\n  return \"(\" + this.clock + \", \" + this.cone + \", \" + this.magnitude + \")\";\n};\nexport default Spherical;\n"]},"metadata":{},"sourceType":"module"}