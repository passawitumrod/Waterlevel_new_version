{"ast":null,"code":"/**\n * Indicates if the scene is viewed in 3D, 2D, or 2.5D Columbus view.\n *\n * @exports SceneMode\n *\n * @see Scene#mode\n */\nvar SceneMode = {\n  /**\n   * Morphing between mode, e.g., 3D to 2D.\n   *\n   * @type {Number}\n   * @constant\n   */\n  MORPHING: 0,\n\n  /**\n   * Columbus View mode.  A 2.5D perspective view where the map is laid out\n   * flat and objects with non-zero height are drawn above it.\n   *\n   * @type {Number}\n   * @constant\n   */\n  COLUMBUS_VIEW: 1,\n\n  /**\n   * 2D mode.  The map is viewed top-down with an orthographic projection.\n   *\n   * @type {Number}\n   * @constant\n   */\n  SCENE2D: 2,\n\n  /**\n   * 3D mode.  A traditional 3D perspective view of the globe.\n   *\n   * @type {Number}\n   * @constant\n   */\n  SCENE3D: 3\n};\n/**\n * Returns the morph time for the given scene mode.\n *\n * @param {SceneMode} value The scene mode\n * @returns {Number} The morph time\n */\n\nSceneMode.getMorphTime = function (value) {\n  if (value === SceneMode.SCENE3D) {\n    return 1.0;\n  } else if (value === SceneMode.MORPHING) {\n    return undefined;\n  }\n\n  return 0.0;\n};\n\nexport default Object.freeze(SceneMode);","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/SceneMode.js"],"names":["SceneMode","MORPHING","COLUMBUS_VIEW","SCENE2D","SCENE3D","getMorphTime","value","undefined","Object","freeze"],"mappings":"AAAA;;;;;;;AAOA,IAAIA,SAAS,GAAG;AACd;;;;;;AAMAC,EAAAA,QAAQ,EAAE,CAPI;;AASd;;;;;;;AAOAC,EAAAA,aAAa,EAAE,CAhBD;;AAkBd;;;;;;AAMAC,EAAAA,OAAO,EAAE,CAxBK;;AA0Bd;;;;;;AAMAC,EAAAA,OAAO,EAAE;AAhCK,CAAhB;AAmCA;;;;;;;AAMAJ,SAAS,CAACK,YAAV,GAAyB,UAAUC,KAAV,EAAiB;AACxC,MAAIA,KAAK,KAAKN,SAAS,CAACI,OAAxB,EAAiC;AAC/B,WAAO,GAAP;AACD,GAFD,MAEO,IAAIE,KAAK,KAAKN,SAAS,CAACC,QAAxB,EAAkC;AACvC,WAAOM,SAAP;AACD;;AACD,SAAO,GAAP;AACD,CAPD;;AAQA,eAAeC,MAAM,CAACC,MAAP,CAAcT,SAAd,CAAf","sourcesContent":["/**\n * Indicates if the scene is viewed in 3D, 2D, or 2.5D Columbus view.\n *\n * @exports SceneMode\n *\n * @see Scene#mode\n */\nvar SceneMode = {\n  /**\n   * Morphing between mode, e.g., 3D to 2D.\n   *\n   * @type {Number}\n   * @constant\n   */\n  MORPHING: 0,\n\n  /**\n   * Columbus View mode.  A 2.5D perspective view where the map is laid out\n   * flat and objects with non-zero height are drawn above it.\n   *\n   * @type {Number}\n   * @constant\n   */\n  COLUMBUS_VIEW: 1,\n\n  /**\n   * 2D mode.  The map is viewed top-down with an orthographic projection.\n   *\n   * @type {Number}\n   * @constant\n   */\n  SCENE2D: 2,\n\n  /**\n   * 3D mode.  A traditional 3D perspective view of the globe.\n   *\n   * @type {Number}\n   * @constant\n   */\n  SCENE3D: 3,\n};\n\n/**\n * Returns the morph time for the given scene mode.\n *\n * @param {SceneMode} value The scene mode\n * @returns {Number} The morph time\n */\nSceneMode.getMorphTime = function (value) {\n  if (value === SceneMode.SCENE3D) {\n    return 1.0;\n  } else if (value === SceneMode.MORPHING) {\n    return undefined;\n  }\n  return 0.0;\n};\nexport default Object.freeze(SceneMode);\n"]},"metadata":{},"sourceType":"module"}