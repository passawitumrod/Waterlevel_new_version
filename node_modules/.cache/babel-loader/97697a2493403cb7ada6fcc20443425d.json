{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicProjection from \"../Core/GeographicProjection.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TileProviderError from \"../Core/TileProviderError.js\";\nimport WebMercatorProjection from \"../Core/WebMercatorProjection.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport when from \"../ThirdParty/when.js\";\nimport DiscardMissingTileImagePolicy from \"./DiscardMissingTileImagePolicy.js\";\nimport ImageryLayerFeatureInfo from \"./ImageryLayerFeatureInfo.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\n/**\n * Provides tiled imagery hosted by an ArcGIS MapServer.  By default, the server's pre-cached tiles are\n * used, if available.\n *\n * @alias ArcGisMapServerImageryProvider\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource|String} options.url The URL of the ArcGIS MapServer service.\n * @param {String} [options.token] The ArcGIS token used to authenticate with the ArcGIS MapServer service.\n * @param {TileDiscardPolicy} [options.tileDiscardPolicy] The policy that determines if a tile\n *        is invalid and should be discarded.  If this value is not specified, a default\n *        {@link DiscardMissingTileImagePolicy} is used for tiled map servers, and a\n *        {@link NeverTileDiscardPolicy} is used for non-tiled map servers.  In the former case,\n *        we request tile 0,0 at the maximum tile level and check pixels (0,0), (200,20), (20,200),\n *        (80,110), and (160, 130).  If all of these pixels are transparent, the discard check is\n *        disabled and no tiles are discarded.  If any of them have a non-transparent color, any\n *        tile that has the same values in these pixel locations is discarded.  The end result of\n *        these defaults should be correct tile discarding for a standard ArcGIS Server.  To ensure\n *        that no tiles are discarded, construct and pass a {@link NeverTileDiscardPolicy} for this\n *        parameter.\n * @param {Boolean} [options.usePreCachedTilesIfAvailable=true] If true, the server's pre-cached\n *        tiles are used if they are available.  If false, any pre-cached tiles are ignored and the\n *        'export' service is used.\n * @param {String} [options.layers] A comma-separated list of the layers to show, or undefined if all layers should be shown.\n * @param {Boolean} [options.enablePickFeatures=true] If true, {@link ArcGisMapServerImageryProvider#pickFeatures} will invoke\n *        the Identify service on the MapServer and return the features included in the response.  If false,\n *        {@link ArcGisMapServerImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable features)\n *        without communicating with the server.  Set this property to false if you don't want this provider's features to\n *        be pickable. Can be overridden by setting the {@link ArcGisMapServerImageryProvider#enablePickFeatures} property on the object.\n * @param {Rectangle} [options.rectangle=Rectangle.MAX_VALUE] The rectangle of the layer.  This parameter is ignored when accessing\n *                    a tiled layer.\n * @param {TilingScheme} [options.tilingScheme=new GeographicTilingScheme()] The tiling scheme to use to divide the world into tiles.\n *                       This parameter is ignored when accessing a tiled server.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If the tilingScheme is specified and used,\n *                    this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *                    parameter is specified, the WGS84 ellipsoid is used.\n * @param {Credit|String} [options.credit] A credit for the data source, which is displayed on the canvas.  This parameter is ignored when accessing a tiled server.\n * @param {Number} [options.tileWidth=256] The width of each tile in pixels.  This parameter is ignored when accessing a tiled server.\n * @param {Number} [options.tileHeight=256] The height of each tile in pixels.  This parameter is ignored when accessing a tiled server.\n * @param {Number} [options.maximumLevel] The maximum tile level to request, or undefined if there is no maximum.  This parameter is ignored when accessing\n *                                        a tiled server.\n *\n * @see BingMapsImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n *\n * @example\n * var esri = new Cesium.ArcGisMapServerImageryProvider({\n *     url : 'https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer'\n * });\n *\n * @see {@link https://developers.arcgis.com/rest/|ArcGIS Server REST API}\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\n\nfunction ArcGisMapServerImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT); //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(options.url)) {\n    throw new DeveloperError(\"options.url is required.\");\n  } //>>includeEnd('debug');\n\n\n  var resource = Resource.createIfNeeded(options.url);\n  resource.appendForwardSlash();\n\n  if (defined(options.token)) {\n    resource.setQueryParameters({\n      token: options.token\n    });\n  }\n\n  this._resource = resource;\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n  this._tileWidth = defaultValue(options.tileWidth, 256);\n  this._tileHeight = defaultValue(options.tileHeight, 256);\n  this._maximumLevel = options.maximumLevel;\n  this._tilingScheme = defaultValue(options.tilingScheme, new GeographicTilingScheme({\n    ellipsoid: options.ellipsoid\n  }));\n  this._useTiles = defaultValue(options.usePreCachedTilesIfAvailable, true);\n  this._rectangle = defaultValue(options.rectangle, this._tilingScheme.rectangle);\n  this._layers = options.layers;\n  var credit = options.credit;\n\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n\n  this._credit = credit;\n  /**\n   * Gets or sets a value indicating whether feature picking is enabled.  If true, {@link ArcGisMapServerImageryProvider#pickFeatures} will\n   * invoke the \"identify\" operation on the ArcGIS server and return the features included in the response.  If false,\n   * {@link ArcGisMapServerImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable features)\n   * without communicating with the server.\n   * @type {Boolean}\n   * @default true\n   */\n\n  this.enablePickFeatures = defaultValue(options.enablePickFeatures, true);\n  this._errorEvent = new Event();\n  this._ready = false;\n  this._readyPromise = when.defer(); // Grab the details of this MapServer.\n\n  var that = this;\n  var metadataError;\n\n  function metadataSuccess(data) {\n    var tileInfo = data.tileInfo;\n\n    if (!defined(tileInfo)) {\n      that._useTiles = false;\n    } else {\n      that._tileWidth = tileInfo.rows;\n      that._tileHeight = tileInfo.cols;\n\n      if (tileInfo.spatialReference.wkid === 102100 || tileInfo.spatialReference.wkid === 102113) {\n        that._tilingScheme = new WebMercatorTilingScheme({\n          ellipsoid: options.ellipsoid\n        });\n      } else if (data.tileInfo.spatialReference.wkid === 4326) {\n        that._tilingScheme = new GeographicTilingScheme({\n          ellipsoid: options.ellipsoid\n        });\n      } else {\n        var message = \"Tile spatial reference WKID \" + data.tileInfo.spatialReference.wkid + \" is not supported.\";\n        metadataError = TileProviderError.handleError(metadataError, that, that._errorEvent, message, undefined, undefined, undefined, requestMetadata);\n        return;\n      }\n\n      that._maximumLevel = data.tileInfo.lods.length - 1;\n\n      if (defined(data.fullExtent)) {\n        if (defined(data.fullExtent.spatialReference) && defined(data.fullExtent.spatialReference.wkid)) {\n          if (data.fullExtent.spatialReference.wkid === 102100 || data.fullExtent.spatialReference.wkid === 102113) {\n            var projection = new WebMercatorProjection();\n            var extent = data.fullExtent;\n            var sw = projection.unproject(new Cartesian3(Math.max(extent.xmin, -that._tilingScheme.ellipsoid.maximumRadius * Math.PI), Math.max(extent.ymin, -that._tilingScheme.ellipsoid.maximumRadius * Math.PI), 0.0));\n            var ne = projection.unproject(new Cartesian3(Math.min(extent.xmax, that._tilingScheme.ellipsoid.maximumRadius * Math.PI), Math.min(extent.ymax, that._tilingScheme.ellipsoid.maximumRadius * Math.PI), 0.0));\n            that._rectangle = new Rectangle(sw.longitude, sw.latitude, ne.longitude, ne.latitude);\n          } else if (data.fullExtent.spatialReference.wkid === 4326) {\n            that._rectangle = Rectangle.fromDegrees(data.fullExtent.xmin, data.fullExtent.ymin, data.fullExtent.xmax, data.fullExtent.ymax);\n          } else {\n            var extentMessage = \"fullExtent.spatialReference WKID \" + data.fullExtent.spatialReference.wkid + \" is not supported.\";\n            metadataError = TileProviderError.handleError(metadataError, that, that._errorEvent, extentMessage, undefined, undefined, undefined, requestMetadata);\n            return;\n          }\n        }\n      } else {\n        that._rectangle = that._tilingScheme.rectangle;\n      } // Install the default tile discard policy if none has been supplied.\n\n\n      if (!defined(that._tileDiscardPolicy)) {\n        that._tileDiscardPolicy = new DiscardMissingTileImagePolicy({\n          missingImageUrl: buildImageResource(that, 0, 0, that._maximumLevel).url,\n          pixelsToCheck: [new Cartesian2(0, 0), new Cartesian2(200, 20), new Cartesian2(20, 200), new Cartesian2(80, 110), new Cartesian2(160, 130)],\n          disableCheckIfAllPixelsAreTransparent: true\n        });\n      }\n\n      that._useTiles = true;\n    }\n\n    if (defined(data.copyrightText) && data.copyrightText.length > 0) {\n      that._credit = new Credit(data.copyrightText);\n    }\n\n    that._ready = true;\n\n    that._readyPromise.resolve(true);\n\n    TileProviderError.handleSuccess(metadataError);\n  }\n\n  function metadataFailure(e) {\n    var message = \"An error occurred while accessing \" + that._resource.url + \".\";\n    metadataError = TileProviderError.handleError(metadataError, that, that._errorEvent, message, undefined, undefined, undefined, requestMetadata);\n\n    that._readyPromise.reject(new RuntimeError(message));\n  }\n\n  function requestMetadata() {\n    var resource = that._resource.getDerivedResource({\n      queryParameters: {\n        f: \"json\"\n      }\n    });\n\n    var metadata = resource.fetchJsonp();\n    when(metadata, metadataSuccess, metadataFailure);\n  }\n\n  if (this._useTiles) {\n    requestMetadata();\n  } else {\n    this._ready = true;\n\n    this._readyPromise.resolve(true);\n  }\n}\n\nfunction buildImageResource(imageryProvider, x, y, level, request) {\n  var resource;\n\n  if (imageryProvider._useTiles) {\n    resource = imageryProvider._resource.getDerivedResource({\n      url: \"tile/\" + level + \"/\" + y + \"/\" + x,\n      request: request\n    });\n  } else {\n    var nativeRectangle = imageryProvider._tilingScheme.tileXYToNativeRectangle(x, y, level);\n\n    var bbox = nativeRectangle.west + \",\" + nativeRectangle.south + \",\" + nativeRectangle.east + \",\" + nativeRectangle.north;\n    var query = {\n      bbox: bbox,\n      size: imageryProvider._tileWidth + \",\" + imageryProvider._tileHeight,\n      format: \"png\",\n      transparent: true,\n      f: \"image\"\n    };\n\n    if (imageryProvider._tilingScheme.projection instanceof GeographicProjection) {\n      query.bboxSR = 4326;\n      query.imageSR = 4326;\n    } else {\n      query.bboxSR = 3857;\n      query.imageSR = 3857;\n    }\n\n    if (imageryProvider.layers) {\n      query.layers = \"show:\" + imageryProvider.layers;\n    }\n\n    resource = imageryProvider._resource.getDerivedResource({\n      url: \"export\",\n      request: request,\n      queryParameters: query\n    });\n  }\n\n  return resource;\n}\n\nObject.defineProperties(ArcGisMapServerImageryProvider.prototype, {\n  /**\n   * Gets the URL of the ArcGIS MapServer.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource._url;\n    }\n  },\n\n  /**\n   * Gets the ArcGIS token used to authenticate with the ArcGis MapServer service.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  token: {\n    get: function () {\n      return this._resource.queryParameters.token;\n    }\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    }\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"tileWidth must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tileWidth;\n    }\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"tileHeight must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tileHeight;\n    }\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"maximumLevel must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._maximumLevel;\n    }\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"minimumLevel must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return 0;\n    }\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"tilingScheme must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tilingScheme;\n    }\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"rectangle must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._rectangle;\n    }\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"tileDiscardPolicy must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tileDiscardPolicy;\n    }\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    }\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    }\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether this imagery provider is using pre-cached tiles from the\n   * ArcGIS MapServer.  If the imagery provider is not yet ready ({@link ArcGisMapServerImageryProvider#ready}), this function\n   * will return the value of `options.usePreCachedTilesIfAvailable`, even if the MapServer does\n   * not have pre-cached tiles.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   * @default true\n   */\n  usingPrecachedTiles: {\n    get: function () {\n      return this._useTiles;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   * @default true\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return true;\n    }\n  },\n\n  /**\n   * Gets the comma-separated list of layer IDs to show.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   *\n   * @type {String}\n   */\n  layers: {\n    get: function () {\n      return this._layers;\n    }\n  }\n});\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\n\nArcGisMapServerImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return undefined;\n};\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<Image|Canvas>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\n\n\nArcGisMapServerImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this._ready) {\n    throw new DeveloperError(\"requestImage must not be called before the imagery provider is ready.\");\n  } //>>includeEnd('debug');\n\n\n  return ImageryProvider.loadImage(this, buildImageResource(this, x, y, level, request));\n};\n/**\n    /**\n     * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n     * a tile.  This function should not be called before {@link ImageryProvider#ready} returns true.\n     *\n     * @param {Number} x The tile X coordinate.\n     * @param {Number} y The tile Y coordinate.\n     * @param {Number} level The tile level.\n     * @param {Number} longitude The longitude at which to pick features.\n     * @param {Number} latitude  The latitude at which to pick features.\n     * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n     *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n     *                   instances.  The array may be empty if no features are found at the given location.\n     *\n     * @exception {DeveloperError} <code>pickFeatures</code> must not be called before the imagery provider is ready.\n     */\n\n\nArcGisMapServerImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this._ready) {\n    throw new DeveloperError(\"pickFeatures must not be called before the imagery provider is ready.\");\n  } //>>includeEnd('debug');\n\n\n  if (!this.enablePickFeatures) {\n    return undefined;\n  }\n\n  var rectangle = this._tilingScheme.tileXYToNativeRectangle(x, y, level);\n\n  var horizontal;\n  var vertical;\n  var sr;\n\n  if (this._tilingScheme.projection instanceof GeographicProjection) {\n    horizontal = CesiumMath.toDegrees(longitude);\n    vertical = CesiumMath.toDegrees(latitude);\n    sr = \"4326\";\n  } else {\n    var projected = this._tilingScheme.projection.project(new Cartographic(longitude, latitude, 0.0));\n\n    horizontal = projected.x;\n    vertical = projected.y;\n    sr = \"3857\";\n  }\n\n  var layers = \"visible\";\n\n  if (defined(this._layers)) {\n    layers += \":\" + this._layers;\n  }\n\n  var query = {\n    f: \"json\",\n    tolerance: 2,\n    geometryType: \"esriGeometryPoint\",\n    geometry: horizontal + \",\" + vertical,\n    mapExtent: rectangle.west + \",\" + rectangle.south + \",\" + rectangle.east + \",\" + rectangle.north,\n    imageDisplay: this._tileWidth + \",\" + this._tileHeight + \",96\",\n    sr: sr,\n    layers: layers\n  };\n\n  var resource = this._resource.getDerivedResource({\n    url: \"identify\",\n    queryParameters: query\n  });\n\n  return resource.fetchJson().then(function (json) {\n    var result = [];\n    var features = json.results;\n\n    if (!defined(features)) {\n      return result;\n    }\n\n    for (var i = 0; i < features.length; ++i) {\n      var feature = features[i];\n      var featureInfo = new ImageryLayerFeatureInfo();\n      featureInfo.data = feature;\n      featureInfo.name = feature.value;\n      featureInfo.properties = feature.attributes;\n      featureInfo.configureDescriptionFromProperties(feature.attributes); // If this is a point feature, use the coordinates of the point.\n\n      if (feature.geometryType === \"esriGeometryPoint\" && feature.geometry) {\n        var wkid = feature.geometry.spatialReference && feature.geometry.spatialReference.wkid ? feature.geometry.spatialReference.wkid : 4326;\n\n        if (wkid === 4326 || wkid === 4283) {\n          featureInfo.position = Cartographic.fromDegrees(feature.geometry.x, feature.geometry.y, feature.geometry.z);\n        } else if (wkid === 102100 || wkid === 900913 || wkid === 3857) {\n          var projection = new WebMercatorProjection();\n          featureInfo.position = projection.unproject(new Cartesian3(feature.geometry.x, feature.geometry.y, feature.geometry.z));\n        }\n      }\n\n      result.push(featureInfo);\n    }\n\n    return result;\n  });\n};\n\nexport default ArcGisMapServerImageryProvider;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/ArcGisMapServerImageryProvider.js"],"names":["Cartesian2","Cartesian3","Cartographic","Credit","defaultValue","defined","DeveloperError","Event","GeographicProjection","GeographicTilingScheme","CesiumMath","Rectangle","Resource","RuntimeError","TileProviderError","WebMercatorProjection","WebMercatorTilingScheme","when","DiscardMissingTileImagePolicy","ImageryLayerFeatureInfo","ImageryProvider","ArcGisMapServerImageryProvider","options","EMPTY_OBJECT","url","resource","createIfNeeded","appendForwardSlash","token","setQueryParameters","_resource","_tileDiscardPolicy","tileDiscardPolicy","_tileWidth","tileWidth","_tileHeight","tileHeight","_maximumLevel","maximumLevel","_tilingScheme","tilingScheme","ellipsoid","_useTiles","usePreCachedTilesIfAvailable","_rectangle","rectangle","_layers","layers","credit","_credit","enablePickFeatures","_errorEvent","_ready","_readyPromise","defer","that","metadataError","metadataSuccess","data","tileInfo","rows","cols","spatialReference","wkid","message","handleError","undefined","requestMetadata","lods","length","fullExtent","projection","extent","sw","unproject","Math","max","xmin","maximumRadius","PI","ymin","ne","min","xmax","ymax","longitude","latitude","fromDegrees","extentMessage","missingImageUrl","buildImageResource","pixelsToCheck","disableCheckIfAllPixelsAreTransparent","copyrightText","resolve","handleSuccess","metadataFailure","e","reject","getDerivedResource","queryParameters","f","metadata","fetchJsonp","imageryProvider","x","y","level","request","nativeRectangle","tileXYToNativeRectangle","bbox","west","south","east","north","query","size","format","transparent","bboxSR","imageSR","Object","defineProperties","prototype","get","_url","proxy","minimumLevel","errorEvent","ready","readyPromise","promise","usingPrecachedTiles","hasAlphaChannel","getTileCredits","requestImage","loadImage","pickFeatures","horizontal","vertical","sr","toDegrees","projected","project","tolerance","geometryType","geometry","mapExtent","imageDisplay","fetchJson","then","json","result","features","results","i","feature","featureInfo","name","value","properties","attributes","configureDescriptionFromProperties","position","z","push"],"mappings":"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","sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicProjection from \"../Core/GeographicProjection.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TileProviderError from \"../Core/TileProviderError.js\";\nimport WebMercatorProjection from \"../Core/WebMercatorProjection.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport when from \"../ThirdParty/when.js\";\nimport DiscardMissingTileImagePolicy from \"./DiscardMissingTileImagePolicy.js\";\nimport ImageryLayerFeatureInfo from \"./ImageryLayerFeatureInfo.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\n\n/**\n * Provides tiled imagery hosted by an ArcGIS MapServer.  By default, the server's pre-cached tiles are\n * used, if available.\n *\n * @alias ArcGisMapServerImageryProvider\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource|String} options.url The URL of the ArcGIS MapServer service.\n * @param {String} [options.token] The ArcGIS token used to authenticate with the ArcGIS MapServer service.\n * @param {TileDiscardPolicy} [options.tileDiscardPolicy] The policy that determines if a tile\n *        is invalid and should be discarded.  If this value is not specified, a default\n *        {@link DiscardMissingTileImagePolicy} is used for tiled map servers, and a\n *        {@link NeverTileDiscardPolicy} is used for non-tiled map servers.  In the former case,\n *        we request tile 0,0 at the maximum tile level and check pixels (0,0), (200,20), (20,200),\n *        (80,110), and (160, 130).  If all of these pixels are transparent, the discard check is\n *        disabled and no tiles are discarded.  If any of them have a non-transparent color, any\n *        tile that has the same values in these pixel locations is discarded.  The end result of\n *        these defaults should be correct tile discarding for a standard ArcGIS Server.  To ensure\n *        that no tiles are discarded, construct and pass a {@link NeverTileDiscardPolicy} for this\n *        parameter.\n * @param {Boolean} [options.usePreCachedTilesIfAvailable=true] If true, the server's pre-cached\n *        tiles are used if they are available.  If false, any pre-cached tiles are ignored and the\n *        'export' service is used.\n * @param {String} [options.layers] A comma-separated list of the layers to show, or undefined if all layers should be shown.\n * @param {Boolean} [options.enablePickFeatures=true] If true, {@link ArcGisMapServerImageryProvider#pickFeatures} will invoke\n *        the Identify service on the MapServer and return the features included in the response.  If false,\n *        {@link ArcGisMapServerImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable features)\n *        without communicating with the server.  Set this property to false if you don't want this provider's features to\n *        be pickable. Can be overridden by setting the {@link ArcGisMapServerImageryProvider#enablePickFeatures} property on the object.\n * @param {Rectangle} [options.rectangle=Rectangle.MAX_VALUE] The rectangle of the layer.  This parameter is ignored when accessing\n *                    a tiled layer.\n * @param {TilingScheme} [options.tilingScheme=new GeographicTilingScheme()] The tiling scheme to use to divide the world into tiles.\n *                       This parameter is ignored when accessing a tiled server.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If the tilingScheme is specified and used,\n *                    this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *                    parameter is specified, the WGS84 ellipsoid is used.\n * @param {Credit|String} [options.credit] A credit for the data source, which is displayed on the canvas.  This parameter is ignored when accessing a tiled server.\n * @param {Number} [options.tileWidth=256] The width of each tile in pixels.  This parameter is ignored when accessing a tiled server.\n * @param {Number} [options.tileHeight=256] The height of each tile in pixels.  This parameter is ignored when accessing a tiled server.\n * @param {Number} [options.maximumLevel] The maximum tile level to request, or undefined if there is no maximum.  This parameter is ignored when accessing\n *                                        a tiled server.\n *\n * @see BingMapsImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n *\n * @example\n * var esri = new Cesium.ArcGisMapServerImageryProvider({\n *     url : 'https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer'\n * });\n *\n * @see {@link https://developers.arcgis.com/rest/|ArcGIS Server REST API}\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\nfunction ArcGisMapServerImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options.url)) {\n    throw new DeveloperError(\"options.url is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var resource = Resource.createIfNeeded(options.url);\n  resource.appendForwardSlash();\n\n  if (defined(options.token)) {\n    resource.setQueryParameters({\n      token: options.token,\n    });\n  }\n\n  this._resource = resource;\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n\n  this._tileWidth = defaultValue(options.tileWidth, 256);\n  this._tileHeight = defaultValue(options.tileHeight, 256);\n  this._maximumLevel = options.maximumLevel;\n  this._tilingScheme = defaultValue(\n    options.tilingScheme,\n    new GeographicTilingScheme({ ellipsoid: options.ellipsoid })\n  );\n  this._useTiles = defaultValue(options.usePreCachedTilesIfAvailable, true);\n  this._rectangle = defaultValue(\n    options.rectangle,\n    this._tilingScheme.rectangle\n  );\n  this._layers = options.layers;\n\n  var credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n  this._credit = credit;\n\n  /**\n   * Gets or sets a value indicating whether feature picking is enabled.  If true, {@link ArcGisMapServerImageryProvider#pickFeatures} will\n   * invoke the \"identify\" operation on the ArcGIS server and return the features included in the response.  If false,\n   * {@link ArcGisMapServerImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable features)\n   * without communicating with the server.\n   * @type {Boolean}\n   * @default true\n   */\n  this.enablePickFeatures = defaultValue(options.enablePickFeatures, true);\n\n  this._errorEvent = new Event();\n\n  this._ready = false;\n  this._readyPromise = when.defer();\n\n  // Grab the details of this MapServer.\n  var that = this;\n  var metadataError;\n\n  function metadataSuccess(data) {\n    var tileInfo = data.tileInfo;\n    if (!defined(tileInfo)) {\n      that._useTiles = false;\n    } else {\n      that._tileWidth = tileInfo.rows;\n      that._tileHeight = tileInfo.cols;\n\n      if (\n        tileInfo.spatialReference.wkid === 102100 ||\n        tileInfo.spatialReference.wkid === 102113\n      ) {\n        that._tilingScheme = new WebMercatorTilingScheme({\n          ellipsoid: options.ellipsoid,\n        });\n      } else if (data.tileInfo.spatialReference.wkid === 4326) {\n        that._tilingScheme = new GeographicTilingScheme({\n          ellipsoid: options.ellipsoid,\n        });\n      } else {\n        var message =\n          \"Tile spatial reference WKID \" +\n          data.tileInfo.spatialReference.wkid +\n          \" is not supported.\";\n        metadataError = TileProviderError.handleError(\n          metadataError,\n          that,\n          that._errorEvent,\n          message,\n          undefined,\n          undefined,\n          undefined,\n          requestMetadata\n        );\n        return;\n      }\n      that._maximumLevel = data.tileInfo.lods.length - 1;\n\n      if (defined(data.fullExtent)) {\n        if (\n          defined(data.fullExtent.spatialReference) &&\n          defined(data.fullExtent.spatialReference.wkid)\n        ) {\n          if (\n            data.fullExtent.spatialReference.wkid === 102100 ||\n            data.fullExtent.spatialReference.wkid === 102113\n          ) {\n            var projection = new WebMercatorProjection();\n            var extent = data.fullExtent;\n            var sw = projection.unproject(\n              new Cartesian3(\n                Math.max(\n                  extent.xmin,\n                  -that._tilingScheme.ellipsoid.maximumRadius * Math.PI\n                ),\n                Math.max(\n                  extent.ymin,\n                  -that._tilingScheme.ellipsoid.maximumRadius * Math.PI\n                ),\n                0.0\n              )\n            );\n            var ne = projection.unproject(\n              new Cartesian3(\n                Math.min(\n                  extent.xmax,\n                  that._tilingScheme.ellipsoid.maximumRadius * Math.PI\n                ),\n                Math.min(\n                  extent.ymax,\n                  that._tilingScheme.ellipsoid.maximumRadius * Math.PI\n                ),\n                0.0\n              )\n            );\n            that._rectangle = new Rectangle(\n              sw.longitude,\n              sw.latitude,\n              ne.longitude,\n              ne.latitude\n            );\n          } else if (data.fullExtent.spatialReference.wkid === 4326) {\n            that._rectangle = Rectangle.fromDegrees(\n              data.fullExtent.xmin,\n              data.fullExtent.ymin,\n              data.fullExtent.xmax,\n              data.fullExtent.ymax\n            );\n          } else {\n            var extentMessage =\n              \"fullExtent.spatialReference WKID \" +\n              data.fullExtent.spatialReference.wkid +\n              \" is not supported.\";\n            metadataError = TileProviderError.handleError(\n              metadataError,\n              that,\n              that._errorEvent,\n              extentMessage,\n              undefined,\n              undefined,\n              undefined,\n              requestMetadata\n            );\n            return;\n          }\n        }\n      } else {\n        that._rectangle = that._tilingScheme.rectangle;\n      }\n\n      // Install the default tile discard policy if none has been supplied.\n      if (!defined(that._tileDiscardPolicy)) {\n        that._tileDiscardPolicy = new DiscardMissingTileImagePolicy({\n          missingImageUrl: buildImageResource(that, 0, 0, that._maximumLevel)\n            .url,\n          pixelsToCheck: [\n            new Cartesian2(0, 0),\n            new Cartesian2(200, 20),\n            new Cartesian2(20, 200),\n            new Cartesian2(80, 110),\n            new Cartesian2(160, 130),\n          ],\n          disableCheckIfAllPixelsAreTransparent: true,\n        });\n      }\n\n      that._useTiles = true;\n    }\n\n    if (defined(data.copyrightText) && data.copyrightText.length > 0) {\n      that._credit = new Credit(data.copyrightText);\n    }\n\n    that._ready = true;\n    that._readyPromise.resolve(true);\n    TileProviderError.handleSuccess(metadataError);\n  }\n\n  function metadataFailure(e) {\n    var message =\n      \"An error occurred while accessing \" + that._resource.url + \".\";\n    metadataError = TileProviderError.handleError(\n      metadataError,\n      that,\n      that._errorEvent,\n      message,\n      undefined,\n      undefined,\n      undefined,\n      requestMetadata\n    );\n    that._readyPromise.reject(new RuntimeError(message));\n  }\n\n  function requestMetadata() {\n    var resource = that._resource.getDerivedResource({\n      queryParameters: {\n        f: \"json\",\n      },\n    });\n    var metadata = resource.fetchJsonp();\n    when(metadata, metadataSuccess, metadataFailure);\n  }\n\n  if (this._useTiles) {\n    requestMetadata();\n  } else {\n    this._ready = true;\n    this._readyPromise.resolve(true);\n  }\n}\n\nfunction buildImageResource(imageryProvider, x, y, level, request) {\n  var resource;\n  if (imageryProvider._useTiles) {\n    resource = imageryProvider._resource.getDerivedResource({\n      url: \"tile/\" + level + \"/\" + y + \"/\" + x,\n      request: request,\n    });\n  } else {\n    var nativeRectangle = imageryProvider._tilingScheme.tileXYToNativeRectangle(\n      x,\n      y,\n      level\n    );\n    var bbox =\n      nativeRectangle.west +\n      \",\" +\n      nativeRectangle.south +\n      \",\" +\n      nativeRectangle.east +\n      \",\" +\n      nativeRectangle.north;\n\n    var query = {\n      bbox: bbox,\n      size: imageryProvider._tileWidth + \",\" + imageryProvider._tileHeight,\n      format: \"png\",\n      transparent: true,\n      f: \"image\",\n    };\n\n    if (\n      imageryProvider._tilingScheme.projection instanceof GeographicProjection\n    ) {\n      query.bboxSR = 4326;\n      query.imageSR = 4326;\n    } else {\n      query.bboxSR = 3857;\n      query.imageSR = 3857;\n    }\n    if (imageryProvider.layers) {\n      query.layers = \"show:\" + imageryProvider.layers;\n    }\n\n    resource = imageryProvider._resource.getDerivedResource({\n      url: \"export\",\n      request: request,\n      queryParameters: query,\n    });\n  }\n\n  return resource;\n}\n\nObject.defineProperties(ArcGisMapServerImageryProvider.prototype, {\n  /**\n   * Gets the URL of the ArcGIS MapServer.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource._url;\n    },\n  },\n\n  /**\n   * Gets the ArcGIS token used to authenticate with the ArcGis MapServer service.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  token: {\n    get: function () {\n      return this._resource.queryParameters.token;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tileWidth must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tileHeight must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"maximumLevel must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"minimumLevel must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return 0;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tilingScheme must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"rectangle must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tileDiscardPolicy must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether this imagery provider is using pre-cached tiles from the\n   * ArcGIS MapServer.  If the imagery provider is not yet ready ({@link ArcGisMapServerImageryProvider#ready}), this function\n   * will return the value of `options.usePreCachedTilesIfAvailable`, even if the MapServer does\n   * not have pre-cached tiles.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   * @default true\n   */\n  usingPrecachedTiles: {\n    get: function () {\n      return this._useTiles;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   * @default true\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return true;\n    },\n  },\n\n  /**\n   * Gets the comma-separated list of layer IDs to show.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   *\n   * @type {String}\n   */\n  layers: {\n    get: function () {\n      return this._layers;\n    },\n  },\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\nArcGisMapServerImageryProvider.prototype.getTileCredits = function (\n  x,\n  y,\n  level\n) {\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<Image|Canvas>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\nArcGisMapServerImageryProvider.prototype.requestImage = function (\n  x,\n  y,\n  level,\n  request\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this._ready) {\n    throw new DeveloperError(\n      \"requestImage must not be called before the imagery provider is ready.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  return ImageryProvider.loadImage(\n    this,\n    buildImageResource(this, x, y, level, request)\n  );\n};\n\n/**\n    /**\n     * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n     * a tile.  This function should not be called before {@link ImageryProvider#ready} returns true.\n     *\n     * @param {Number} x The tile X coordinate.\n     * @param {Number} y The tile Y coordinate.\n     * @param {Number} level The tile level.\n     * @param {Number} longitude The longitude at which to pick features.\n     * @param {Number} latitude  The latitude at which to pick features.\n     * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n     *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n     *                   instances.  The array may be empty if no features are found at the given location.\n     *\n     * @exception {DeveloperError} <code>pickFeatures</code> must not be called before the imagery provider is ready.\n     */\nArcGisMapServerImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this._ready) {\n    throw new DeveloperError(\n      \"pickFeatures must not be called before the imagery provider is ready.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  if (!this.enablePickFeatures) {\n    return undefined;\n  }\n\n  var rectangle = this._tilingScheme.tileXYToNativeRectangle(x, y, level);\n\n  var horizontal;\n  var vertical;\n  var sr;\n  if (this._tilingScheme.projection instanceof GeographicProjection) {\n    horizontal = CesiumMath.toDegrees(longitude);\n    vertical = CesiumMath.toDegrees(latitude);\n    sr = \"4326\";\n  } else {\n    var projected = this._tilingScheme.projection.project(\n      new Cartographic(longitude, latitude, 0.0)\n    );\n    horizontal = projected.x;\n    vertical = projected.y;\n    sr = \"3857\";\n  }\n\n  var layers = \"visible\";\n  if (defined(this._layers)) {\n    layers += \":\" + this._layers;\n  }\n\n  var query = {\n    f: \"json\",\n    tolerance: 2,\n    geometryType: \"esriGeometryPoint\",\n    geometry: horizontal + \",\" + vertical,\n    mapExtent:\n      rectangle.west +\n      \",\" +\n      rectangle.south +\n      \",\" +\n      rectangle.east +\n      \",\" +\n      rectangle.north,\n    imageDisplay: this._tileWidth + \",\" + this._tileHeight + \",96\",\n    sr: sr,\n    layers: layers,\n  };\n\n  var resource = this._resource.getDerivedResource({\n    url: \"identify\",\n    queryParameters: query,\n  });\n\n  return resource.fetchJson().then(function (json) {\n    var result = [];\n\n    var features = json.results;\n    if (!defined(features)) {\n      return result;\n    }\n\n    for (var i = 0; i < features.length; ++i) {\n      var feature = features[i];\n\n      var featureInfo = new ImageryLayerFeatureInfo();\n      featureInfo.data = feature;\n      featureInfo.name = feature.value;\n      featureInfo.properties = feature.attributes;\n      featureInfo.configureDescriptionFromProperties(feature.attributes);\n\n      // If this is a point feature, use the coordinates of the point.\n      if (feature.geometryType === \"esriGeometryPoint\" && feature.geometry) {\n        var wkid =\n          feature.geometry.spatialReference &&\n          feature.geometry.spatialReference.wkid\n            ? feature.geometry.spatialReference.wkid\n            : 4326;\n        if (wkid === 4326 || wkid === 4283) {\n          featureInfo.position = Cartographic.fromDegrees(\n            feature.geometry.x,\n            feature.geometry.y,\n            feature.geometry.z\n          );\n        } else if (wkid === 102100 || wkid === 900913 || wkid === 3857) {\n          var projection = new WebMercatorProjection();\n          featureInfo.position = projection.unproject(\n            new Cartesian3(\n              feature.geometry.x,\n              feature.geometry.y,\n              feature.geometry.z\n            )\n          );\n        }\n      }\n\n      result.push(featureInfo);\n    }\n\n    return result;\n  });\n};\nexport default ArcGisMapServerImageryProvider;\n"]},"metadata":{},"sourceType":"module"}