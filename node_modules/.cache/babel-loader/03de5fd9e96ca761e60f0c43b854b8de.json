{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\nvar defaultColor = Color.WHITE;\nvar defaultGapColor = Color.TRANSPARENT;\nvar defaultDashLength = 16.0;\nvar defaultDashPattern = 255.0;\n/**\n * A {@link MaterialProperty} that maps to polyline dash {@link Material} uniforms.\n * @alias PolylineDashMaterialProperty\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.color=Color.WHITE] A Property specifying the {@link Color} of the line.\n * @param {Property} [options.gapColor=Color.TRANSPARENT] A Property specifying the {@link Color} of the gaps in the line.\n * @param {Property} [options.dashLength=16.0] A numeric Property specifying the length of the dash pattern in pixels.\n * @param {Property} [options.dashPattern=255.0] A numeric Property specifying a 16 bit pattern for the dash\n */\n\nfunction PolylineDashMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._gapColor = undefined;\n  this._gapColorSubscription = undefined;\n  this._dashLength = undefined;\n  this._dashLengthSubscription = undefined;\n  this._dashPattern = undefined;\n  this._dashPatternSubscription = undefined;\n  this.color = options.color;\n  this.gapColor = options.gapColor;\n  this.dashLength = options.dashLength;\n  this.dashPattern = options.dashPattern;\n}\n\nObject.defineProperties(PolylineDashMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._color) && Property.isConstant(this._gapColor) && Property.isConstant(this._dashLength) && Property.isConstant(this._dashPattern);\n    }\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the line.\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Property}\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the gaps in the line.\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Property}\n   */\n  gapColor: createPropertyDescriptor(\"gapColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the length of a dash cycle\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Property}\n   */\n  dashLength: createPropertyDescriptor(\"dashLength\"),\n\n  /**\n   * Gets or sets the numeric Property specifying a dash pattern\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Property}\n   */\n  dashPattern: createPropertyDescriptor(\"dashPattern\")\n});\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\n\nPolylineDashMaterialProperty.prototype.getType = function (time) {\n  return \"PolylineDash\";\n};\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\n\nPolylineDashMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n\n  result.color = Property.getValueOrClonedDefault(this._color, time, defaultColor, result.color);\n  result.gapColor = Property.getValueOrClonedDefault(this._gapColor, time, defaultGapColor, result.gapColor);\n  result.dashLength = Property.getValueOrDefault(this._dashLength, time, defaultDashLength, result.dashLength);\n  result.dashPattern = Property.getValueOrDefault(this._dashPattern, time, defaultDashPattern, result.dashPattern);\n  return result;\n};\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nPolylineDashMaterialProperty.prototype.equals = function (other) {\n  return this === other || //\n  other instanceof PolylineDashMaterialProperty && Property.equals(this._color, other._color) && Property.equals(this._gapColor, other._gapColor) && Property.equals(this._dashLength, other._dashLength) && Property.equals(this._dashPattern, other._dashPattern);\n};\n\nexport default PolylineDashMaterialProperty;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/DataSources/PolylineDashMaterialProperty.js"],"names":["Color","defaultValue","defined","Event","createPropertyDescriptor","Property","defaultColor","WHITE","defaultGapColor","TRANSPARENT","defaultDashLength","defaultDashPattern","PolylineDashMaterialProperty","options","EMPTY_OBJECT","_definitionChanged","_color","undefined","_colorSubscription","_gapColor","_gapColorSubscription","_dashLength","_dashLengthSubscription","_dashPattern","_dashPatternSubscription","color","gapColor","dashLength","dashPattern","Object","defineProperties","prototype","isConstant","get","definitionChanged","getType","time","getValue","result","getValueOrClonedDefault","getValueOrDefault","equals","other"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,wBAAP,MAAqC,+BAArC;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA,IAAIC,YAAY,GAAGN,KAAK,CAACO,KAAzB;AACA,IAAIC,eAAe,GAAGR,KAAK,CAACS,WAA5B;AACA,IAAIC,iBAAiB,GAAG,IAAxB;AACA,IAAIC,kBAAkB,GAAG,KAAzB;AAEA;;;;;;;;;;;;AAWA,SAASC,4BAAT,CAAsCC,OAAtC,EAA+C;AAC7CA,EAAAA,OAAO,GAAGZ,YAAY,CAACY,OAAD,EAAUZ,YAAY,CAACa,YAAvB,CAAtB;AAEA,OAAKC,kBAAL,GAA0B,IAAIZ,KAAJ,EAA1B;AACA,OAAKa,MAAL,GAAcC,SAAd;AACA,OAAKC,kBAAL,GAA0BD,SAA1B;AACA,OAAKE,SAAL,GAAiBF,SAAjB;AACA,OAAKG,qBAAL,GAA6BH,SAA7B;AACA,OAAKI,WAAL,GAAmBJ,SAAnB;AACA,OAAKK,uBAAL,GAA+BL,SAA/B;AACA,OAAKM,YAAL,GAAoBN,SAApB;AACA,OAAKO,wBAAL,GAAgCP,SAAhC;AAEA,OAAKQ,KAAL,GAAaZ,OAAO,CAACY,KAArB;AACA,OAAKC,QAAL,GAAgBb,OAAO,CAACa,QAAxB;AACA,OAAKC,UAAL,GAAkBd,OAAO,CAACc,UAA1B;AACA,OAAKC,WAAL,GAAmBf,OAAO,CAACe,WAA3B;AACD;;AAEDC,MAAM,CAACC,gBAAP,CAAwBlB,4BAA4B,CAACmB,SAArD,EAAgE;AAC9D;;;;;;;AAOAC,EAAAA,UAAU,EAAE;AACVC,IAAAA,GAAG,EAAE,YAAY;AACf,aACE5B,QAAQ,CAAC2B,UAAT,CAAoB,KAAKhB,MAAzB,KACAX,QAAQ,CAAC2B,UAAT,CAAoB,KAAKb,SAAzB,CADA,IAEAd,QAAQ,CAAC2B,UAAT,CAAoB,KAAKX,WAAzB,CAFA,IAGAhB,QAAQ,CAAC2B,UAAT,CAAoB,KAAKT,YAAzB,CAJF;AAMD;AARS,GARkD;;AAkB9D;;;;;;;;AAQAW,EAAAA,iBAAiB,EAAE;AACjBD,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKlB,kBAAZ;AACD;AAHgB,GA1B2C;;AA+B9D;;;;;AAKAU,EAAAA,KAAK,EAAErB,wBAAwB,CAAC,OAAD,CApC+B;;AAsC9D;;;;;AAKAsB,EAAAA,QAAQ,EAAEtB,wBAAwB,CAAC,UAAD,CA3C4B;;AA6C9D;;;;;AAKAuB,EAAAA,UAAU,EAAEvB,wBAAwB,CAAC,YAAD,CAlD0B;;AAoD9D;;;;;AAKAwB,EAAAA,WAAW,EAAExB,wBAAwB,CAAC,aAAD;AAzDyB,CAAhE;AA4DA;;;;;;;AAMAQ,4BAA4B,CAACmB,SAA7B,CAAuCI,OAAvC,GAAiD,UAAUC,IAAV,EAAgB;AAC/D,SAAO,cAAP;AACD,CAFD;AAIA;;;;;;;;;AAOAxB,4BAA4B,CAACmB,SAA7B,CAAuCM,QAAvC,GAAkD,UAAUD,IAAV,EAAgBE,MAAhB,EAAwB;AACxE,MAAI,CAACpC,OAAO,CAACoC,MAAD,CAAZ,EAAsB;AACpBA,IAAAA,MAAM,GAAG,EAAT;AACD;;AACDA,EAAAA,MAAM,CAACb,KAAP,GAAepB,QAAQ,CAACkC,uBAAT,CACb,KAAKvB,MADQ,EAEboB,IAFa,EAGb9B,YAHa,EAIbgC,MAAM,CAACb,KAJM,CAAf;AAMAa,EAAAA,MAAM,CAACZ,QAAP,GAAkBrB,QAAQ,CAACkC,uBAAT,CAChB,KAAKpB,SADW,EAEhBiB,IAFgB,EAGhB5B,eAHgB,EAIhB8B,MAAM,CAACZ,QAJS,CAAlB;AAMAY,EAAAA,MAAM,CAACX,UAAP,GAAoBtB,QAAQ,CAACmC,iBAAT,CAClB,KAAKnB,WADa,EAElBe,IAFkB,EAGlB1B,iBAHkB,EAIlB4B,MAAM,CAACX,UAJW,CAApB;AAMAW,EAAAA,MAAM,CAACV,WAAP,GAAqBvB,QAAQ,CAACmC,iBAAT,CACnB,KAAKjB,YADc,EAEnBa,IAFmB,EAGnBzB,kBAHmB,EAInB2B,MAAM,CAACV,WAJY,CAArB;AAMA,SAAOU,MAAP;AACD,CA7BD;AA+BA;;;;;;;;;AAOA1B,4BAA4B,CAACmB,SAA7B,CAAuCU,MAAvC,GAAgD,UAAUC,KAAV,EAAiB;AAC/D,SACE,SAASA,KAAT,IAAkB;AACjBA,EAAAA,KAAK,YAAY9B,4BAAjB,IACCP,QAAQ,CAACoC,MAAT,CAAgB,KAAKzB,MAArB,EAA6B0B,KAAK,CAAC1B,MAAnC,CADD,IAECX,QAAQ,CAACoC,MAAT,CAAgB,KAAKtB,SAArB,EAAgCuB,KAAK,CAACvB,SAAtC,CAFD,IAGCd,QAAQ,CAACoC,MAAT,CAAgB,KAAKpB,WAArB,EAAkCqB,KAAK,CAACrB,WAAxC,CAHD,IAIChB,QAAQ,CAACoC,MAAT,CAAgB,KAAKlB,YAArB,EAAmCmB,KAAK,CAACnB,YAAzC,CANJ;AAQD,CATD;;AAUA,eAAeX,4BAAf","sourcesContent":["import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\nvar defaultColor = Color.WHITE;\nvar defaultGapColor = Color.TRANSPARENT;\nvar defaultDashLength = 16.0;\nvar defaultDashPattern = 255.0;\n\n/**\n * A {@link MaterialProperty} that maps to polyline dash {@link Material} uniforms.\n * @alias PolylineDashMaterialProperty\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.color=Color.WHITE] A Property specifying the {@link Color} of the line.\n * @param {Property} [options.gapColor=Color.TRANSPARENT] A Property specifying the {@link Color} of the gaps in the line.\n * @param {Property} [options.dashLength=16.0] A numeric Property specifying the length of the dash pattern in pixels.\n * @param {Property} [options.dashPattern=255.0] A numeric Property specifying a 16 bit pattern for the dash\n */\nfunction PolylineDashMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._gapColor = undefined;\n  this._gapColorSubscription = undefined;\n  this._dashLength = undefined;\n  this._dashLengthSubscription = undefined;\n  this._dashPattern = undefined;\n  this._dashPatternSubscription = undefined;\n\n  this.color = options.color;\n  this.gapColor = options.gapColor;\n  this.dashLength = options.dashLength;\n  this.dashPattern = options.dashPattern;\n}\n\nObject.defineProperties(PolylineDashMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        Property.isConstant(this._color) &&\n        Property.isConstant(this._gapColor) &&\n        Property.isConstant(this._dashLength) &&\n        Property.isConstant(this._dashPattern)\n      );\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the line.\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Property}\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the gaps in the line.\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Property}\n   */\n  gapColor: createPropertyDescriptor(\"gapColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the length of a dash cycle\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Property}\n   */\n  dashLength: createPropertyDescriptor(\"dashLength\"),\n\n  /**\n   * Gets or sets the numeric Property specifying a dash pattern\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Property}\n   */\n  dashPattern: createPropertyDescriptor(\"dashPattern\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nPolylineDashMaterialProperty.prototype.getType = function (time) {\n  return \"PolylineDash\";\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPolylineDashMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n  result.color = Property.getValueOrClonedDefault(\n    this._color,\n    time,\n    defaultColor,\n    result.color\n  );\n  result.gapColor = Property.getValueOrClonedDefault(\n    this._gapColor,\n    time,\n    defaultGapColor,\n    result.gapColor\n  );\n  result.dashLength = Property.getValueOrDefault(\n    this._dashLength,\n    time,\n    defaultDashLength,\n    result.dashLength\n  );\n  result.dashPattern = Property.getValueOrDefault(\n    this._dashPattern,\n    time,\n    defaultDashPattern,\n    result.dashPattern\n  );\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPolylineDashMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof PolylineDashMaterialProperty &&\n      Property.equals(this._color, other._color) &&\n      Property.equals(this._gapColor, other._gapColor) &&\n      Property.equals(this._dashLength, other._dashLength) &&\n      Property.equals(this._dashPattern, other._dashPattern))\n  );\n};\nexport default PolylineDashMaterialProperty;\n"]},"metadata":{},"sourceType":"module"}