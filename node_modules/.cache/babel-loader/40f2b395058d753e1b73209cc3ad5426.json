{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport Cartesian4 from \"./Cartesian4.js\";\nimport CullingVolume from \"./CullingVolume.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix4 from \"./Matrix4.js\";\n/**\n * The viewing frustum is defined by 6 planes.\n * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\n * define the unit vector normal to the plane, and the w component is the distance of the\n * plane from the origin/camera position.\n *\n * @alias OrthographicOffCenterFrustum\n * @constructor\n *\n * @param {Object} [options] An object with the following properties:\n * @param {Number} [options.left] The left clipping plane distance.\n * @param {Number} [options.right] The right clipping plane distance.\n * @param {Number} [options.top] The top clipping plane distance.\n * @param {Number} [options.bottom] The bottom clipping plane distance.\n * @param {Number} [options.near=1.0] The near clipping plane distance.\n * @param {Number} [options.far=500000000.0] The far clipping plane distance.\n *\n * @example\n * var maxRadii = ellipsoid.maximumRadius;\n *\n * var frustum = new Cesium.OrthographicOffCenterFrustum();\n * frustum.right = maxRadii * Cesium.Math.PI;\n * frustum.left = -c.frustum.right;\n * frustum.top = c.frustum.right * (canvas.clientHeight / canvas.clientWidth);\n * frustum.bottom = -c.frustum.top;\n * frustum.near = 0.01 * maxRadii;\n * frustum.far = 50.0 * maxRadii;\n */\n\nfunction OrthographicOffCenterFrustum(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  /**\n   * The left clipping plane.\n   * @type {Number}\n   * @default undefined\n   */\n\n  this.left = options.left;\n  this._left = undefined;\n  /**\n   * The right clipping plane.\n   * @type {Number}\n   * @default undefined\n   */\n\n  this.right = options.right;\n  this._right = undefined;\n  /**\n   * The top clipping plane.\n   * @type {Number}\n   * @default undefined\n   */\n\n  this.top = options.top;\n  this._top = undefined;\n  /**\n   * The bottom clipping plane.\n   * @type {Number}\n   * @default undefined\n   */\n\n  this.bottom = options.bottom;\n  this._bottom = undefined;\n  /**\n   * The distance of the near plane.\n   * @type {Number}\n   * @default 1.0\n   */\n\n  this.near = defaultValue(options.near, 1.0);\n  this._near = this.near;\n  /**\n   * The distance of the far plane.\n   * @type {Number}\n   * @default 500000000.0;\n   */\n\n  this.far = defaultValue(options.far, 500000000.0);\n  this._far = this.far;\n  this._cullingVolume = new CullingVolume();\n  this._orthographicMatrix = new Matrix4();\n}\n\nfunction update(frustum) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(frustum.right) || !defined(frustum.left) || !defined(frustum.top) || !defined(frustum.bottom) || !defined(frustum.near) || !defined(frustum.far)) {\n    throw new DeveloperError(\"right, left, top, bottom, near, or far parameters are not set.\");\n  } //>>includeEnd('debug');\n\n\n  if (frustum.top !== frustum._top || frustum.bottom !== frustum._bottom || frustum.left !== frustum._left || frustum.right !== frustum._right || frustum.near !== frustum._near || frustum.far !== frustum._far) {\n    //>>includeStart('debug', pragmas.debug);\n    if (frustum.left > frustum.right) {\n      throw new DeveloperError(\"right must be greater than left.\");\n    }\n\n    if (frustum.bottom > frustum.top) {\n      throw new DeveloperError(\"top must be greater than bottom.\");\n    }\n\n    if (frustum.near <= 0 || frustum.near > frustum.far) {\n      throw new DeveloperError(\"near must be greater than zero and less than far.\");\n    } //>>includeEnd('debug');\n\n\n    frustum._left = frustum.left;\n    frustum._right = frustum.right;\n    frustum._top = frustum.top;\n    frustum._bottom = frustum.bottom;\n    frustum._near = frustum.near;\n    frustum._far = frustum.far;\n    frustum._orthographicMatrix = Matrix4.computeOrthographicOffCenter(frustum.left, frustum.right, frustum.bottom, frustum.top, frustum.near, frustum.far, frustum._orthographicMatrix);\n  }\n}\n\nObject.defineProperties(OrthographicOffCenterFrustum.prototype, {\n  /**\n   * Gets the orthographic projection matrix computed from the view frustum.\n   * @memberof OrthographicOffCenterFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   */\n  projectionMatrix: {\n    get: function get() {\n      update(this);\n      return this._orthographicMatrix;\n    }\n  }\n});\nvar getPlanesRight = new Cartesian3();\nvar getPlanesNearCenter = new Cartesian3();\nvar getPlanesPoint = new Cartesian3();\nvar negateScratch = new Cartesian3();\n/**\n * Creates a culling volume for this frustum.\n *\n * @param {Cartesian3} position The eye position.\n * @param {Cartesian3} direction The view direction.\n * @param {Cartesian3} up The up direction.\n * @returns {CullingVolume} A culling volume at the given position and orientation.\n *\n * @example\n * // Check if a bounding volume intersects the frustum.\n * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n * var intersect = cullingVolume.computeVisibility(boundingVolume);\n */\n\nOrthographicOffCenterFrustum.prototype.computeCullingVolume = function (position, direction, up) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(position)) {\n    throw new DeveloperError(\"position is required.\");\n  }\n\n  if (!defined(direction)) {\n    throw new DeveloperError(\"direction is required.\");\n  }\n\n  if (!defined(up)) {\n    throw new DeveloperError(\"up is required.\");\n  } //>>includeEnd('debug');\n\n\n  var planes = this._cullingVolume.planes;\n  var t = this.top;\n  var b = this.bottom;\n  var r = this.right;\n  var l = this.left;\n  var n = this.near;\n  var f = this.far;\n  var right = Cartesian3.cross(direction, up, getPlanesRight);\n  Cartesian3.normalize(right, right);\n  var nearCenter = getPlanesNearCenter;\n  Cartesian3.multiplyByScalar(direction, n, nearCenter);\n  Cartesian3.add(position, nearCenter, nearCenter);\n  var point = getPlanesPoint; // Left plane\n\n  Cartesian3.multiplyByScalar(right, l, point);\n  Cartesian3.add(nearCenter, point, point);\n  var plane = planes[0];\n\n  if (!defined(plane)) {\n    plane = planes[0] = new Cartesian4();\n  }\n\n  plane.x = right.x;\n  plane.y = right.y;\n  plane.z = right.z;\n  plane.w = -Cartesian3.dot(right, point); // Right plane\n\n  Cartesian3.multiplyByScalar(right, r, point);\n  Cartesian3.add(nearCenter, point, point);\n  plane = planes[1];\n\n  if (!defined(plane)) {\n    plane = planes[1] = new Cartesian4();\n  }\n\n  plane.x = -right.x;\n  plane.y = -right.y;\n  plane.z = -right.z;\n  plane.w = -Cartesian3.dot(Cartesian3.negate(right, negateScratch), point); // Bottom plane\n\n  Cartesian3.multiplyByScalar(up, b, point);\n  Cartesian3.add(nearCenter, point, point);\n  plane = planes[2];\n\n  if (!defined(plane)) {\n    plane = planes[2] = new Cartesian4();\n  }\n\n  plane.x = up.x;\n  plane.y = up.y;\n  plane.z = up.z;\n  plane.w = -Cartesian3.dot(up, point); // Top plane\n\n  Cartesian3.multiplyByScalar(up, t, point);\n  Cartesian3.add(nearCenter, point, point);\n  plane = planes[3];\n\n  if (!defined(plane)) {\n    plane = planes[3] = new Cartesian4();\n  }\n\n  plane.x = -up.x;\n  plane.y = -up.y;\n  plane.z = -up.z;\n  plane.w = -Cartesian3.dot(Cartesian3.negate(up, negateScratch), point); // Near plane\n\n  plane = planes[4];\n\n  if (!defined(plane)) {\n    plane = planes[4] = new Cartesian4();\n  }\n\n  plane.x = direction.x;\n  plane.y = direction.y;\n  plane.z = direction.z;\n  plane.w = -Cartesian3.dot(direction, nearCenter); // Far plane\n\n  Cartesian3.multiplyByScalar(direction, f, point);\n  Cartesian3.add(position, point, point);\n  plane = planes[5];\n\n  if (!defined(plane)) {\n    plane = planes[5] = new Cartesian4();\n  }\n\n  plane.x = -direction.x;\n  plane.y = -direction.y;\n  plane.z = -direction.z;\n  plane.w = -Cartesian3.dot(Cartesian3.negate(direction, negateScratch), point);\n  return this._cullingVolume;\n};\n/**\n * Returns the pixel's width and height in meters.\n *\n * @param {Number} drawingBufferWidth The width of the drawing buffer.\n * @param {Number} drawingBufferHeight The height of the drawing buffer.\n * @param {Number} distance The distance to the near plane in meters.\n * @param {Number} pixelRatio The scaling factor from pixel space to coordinate space.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\n *\n * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n * @exception {DeveloperError} pixelRatio must be greater than zero.\n *\n * @example\n * // Example 1\n * // Get the width and height of a pixel.\n * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 0.0, scene.pixelRatio, new Cesium.Cartesian2());\n */\n\n\nOrthographicOffCenterFrustum.prototype.getPixelDimensions = function (drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result) {\n  update(this); //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(drawingBufferWidth) || !defined(drawingBufferHeight)) {\n    throw new DeveloperError(\"Both drawingBufferWidth and drawingBufferHeight are required.\");\n  }\n\n  if (drawingBufferWidth <= 0) {\n    throw new DeveloperError(\"drawingBufferWidth must be greater than zero.\");\n  }\n\n  if (drawingBufferHeight <= 0) {\n    throw new DeveloperError(\"drawingBufferHeight must be greater than zero.\");\n  }\n\n  if (!defined(distance)) {\n    throw new DeveloperError(\"distance is required.\");\n  }\n\n  if (!defined(pixelRatio)) {\n    throw new DeveloperError(\"pixelRatio is required.\");\n  }\n\n  if (pixelRatio <= 0) {\n    throw new DeveloperError(\"pixelRatio must be greater than zero.\");\n  }\n\n  if (!defined(result)) {\n    throw new DeveloperError(\"A result object is required.\");\n  } //>>includeEnd('debug');\n\n\n  var frustumWidth = this.right - this.left;\n  var frustumHeight = this.top - this.bottom;\n  var pixelWidth = pixelRatio * frustumWidth / drawingBufferWidth;\n  var pixelHeight = pixelRatio * frustumHeight / drawingBufferHeight;\n  result.x = pixelWidth;\n  result.y = pixelHeight;\n  return result;\n};\n/**\n * Returns a duplicate of a OrthographicOffCenterFrustum instance.\n *\n * @param {OrthographicOffCenterFrustum} [result] The object onto which to store the result.\n * @returns {OrthographicOffCenterFrustum} The modified result parameter or a new OrthographicOffCenterFrustum instance if one was not provided.\n */\n\n\nOrthographicOffCenterFrustum.prototype.clone = function (result) {\n  if (!defined(result)) {\n    result = new OrthographicOffCenterFrustum();\n  }\n\n  result.left = this.left;\n  result.right = this.right;\n  result.top = this.top;\n  result.bottom = this.bottom;\n  result.near = this.near;\n  result.far = this.far; // force update of clone to compute matrices\n\n  result._left = undefined;\n  result._right = undefined;\n  result._top = undefined;\n  result._bottom = undefined;\n  result._near = undefined;\n  result._far = undefined;\n  return result;\n};\n/**\n * Compares the provided OrthographicOffCenterFrustum componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {OrthographicOffCenterFrustum} [other] The right hand side OrthographicOffCenterFrustum.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\n\n\nOrthographicOffCenterFrustum.prototype.equals = function (other) {\n  return defined(other) && other instanceof OrthographicOffCenterFrustum && this.right === other.right && this.left === other.left && this.top === other.top && this.bottom === other.bottom && this.near === other.near && this.far === other.far;\n};\n/**\n * Compares the provided OrthographicOffCenterFrustum componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {OrthographicOffCenterFrustum} other The right hand side OrthographicOffCenterFrustum.\n * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\n */\n\n\nOrthographicOffCenterFrustum.prototype.equalsEpsilon = function (other, relativeEpsilon, absoluteEpsilon) {\n  return other === this || defined(other) && other instanceof OrthographicOffCenterFrustum && CesiumMath.equalsEpsilon(this.right, other.right, relativeEpsilon, absoluteEpsilon) && CesiumMath.equalsEpsilon(this.left, other.left, relativeEpsilon, absoluteEpsilon) && CesiumMath.equalsEpsilon(this.top, other.top, relativeEpsilon, absoluteEpsilon) && CesiumMath.equalsEpsilon(this.bottom, other.bottom, relativeEpsilon, absoluteEpsilon) && CesiumMath.equalsEpsilon(this.near, other.near, relativeEpsilon, absoluteEpsilon) && CesiumMath.equalsEpsilon(this.far, other.far, relativeEpsilon, absoluteEpsilon);\n};\n\nexport default OrthographicOffCenterFrustum;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/OrthographicOffCenterFrustum.js"],"names":["Cartesian3","Cartesian4","CullingVolume","defaultValue","defined","DeveloperError","CesiumMath","Matrix4","OrthographicOffCenterFrustum","options","EMPTY_OBJECT","left","_left","undefined","right","_right","top","_top","bottom","_bottom","near","_near","far","_far","_cullingVolume","_orthographicMatrix","update","frustum","computeOrthographicOffCenter","Object","defineProperties","prototype","projectionMatrix","get","getPlanesRight","getPlanesNearCenter","getPlanesPoint","negateScratch","computeCullingVolume","position","direction","up","planes","t","b","r","l","n","f","cross","normalize","nearCenter","multiplyByScalar","add","point","plane","x","y","z","w","dot","negate","getPixelDimensions","drawingBufferWidth","drawingBufferHeight","distance","pixelRatio","result","frustumWidth","frustumHeight","pixelWidth","pixelHeight","clone","equals","other","equalsEpsilon","relativeEpsilon","absoluteEpsilon"],"mappings":"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","sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Cartesian4 from \"./Cartesian4.js\";\nimport CullingVolume from \"./CullingVolume.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix4 from \"./Matrix4.js\";\n\n/**\n * The viewing frustum is defined by 6 planes.\n * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\n * define the unit vector normal to the plane, and the w component is the distance of the\n * plane from the origin/camera position.\n *\n * @alias OrthographicOffCenterFrustum\n * @constructor\n *\n * @param {Object} [options] An object with the following properties:\n * @param {Number} [options.left] The left clipping plane distance.\n * @param {Number} [options.right] The right clipping plane distance.\n * @param {Number} [options.top] The top clipping plane distance.\n * @param {Number} [options.bottom] The bottom clipping plane distance.\n * @param {Number} [options.near=1.0] The near clipping plane distance.\n * @param {Number} [options.far=500000000.0] The far clipping plane distance.\n *\n * @example\n * var maxRadii = ellipsoid.maximumRadius;\n *\n * var frustum = new Cesium.OrthographicOffCenterFrustum();\n * frustum.right = maxRadii * Cesium.Math.PI;\n * frustum.left = -c.frustum.right;\n * frustum.top = c.frustum.right * (canvas.clientHeight / canvas.clientWidth);\n * frustum.bottom = -c.frustum.top;\n * frustum.near = 0.01 * maxRadii;\n * frustum.far = 50.0 * maxRadii;\n */\nfunction OrthographicOffCenterFrustum(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  /**\n   * The left clipping plane.\n   * @type {Number}\n   * @default undefined\n   */\n  this.left = options.left;\n  this._left = undefined;\n\n  /**\n   * The right clipping plane.\n   * @type {Number}\n   * @default undefined\n   */\n  this.right = options.right;\n  this._right = undefined;\n\n  /**\n   * The top clipping plane.\n   * @type {Number}\n   * @default undefined\n   */\n  this.top = options.top;\n  this._top = undefined;\n\n  /**\n   * The bottom clipping plane.\n   * @type {Number}\n   * @default undefined\n   */\n  this.bottom = options.bottom;\n  this._bottom = undefined;\n\n  /**\n   * The distance of the near plane.\n   * @type {Number}\n   * @default 1.0\n   */\n  this.near = defaultValue(options.near, 1.0);\n  this._near = this.near;\n\n  /**\n   * The distance of the far plane.\n   * @type {Number}\n   * @default 500000000.0;\n   */\n  this.far = defaultValue(options.far, 500000000.0);\n  this._far = this.far;\n\n  this._cullingVolume = new CullingVolume();\n  this._orthographicMatrix = new Matrix4();\n}\n\nfunction update(frustum) {\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    !defined(frustum.right) ||\n    !defined(frustum.left) ||\n    !defined(frustum.top) ||\n    !defined(frustum.bottom) ||\n    !defined(frustum.near) ||\n    !defined(frustum.far)\n  ) {\n    throw new DeveloperError(\n      \"right, left, top, bottom, near, or far parameters are not set.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  if (\n    frustum.top !== frustum._top ||\n    frustum.bottom !== frustum._bottom ||\n    frustum.left !== frustum._left ||\n    frustum.right !== frustum._right ||\n    frustum.near !== frustum._near ||\n    frustum.far !== frustum._far\n  ) {\n    //>>includeStart('debug', pragmas.debug);\n    if (frustum.left > frustum.right) {\n      throw new DeveloperError(\"right must be greater than left.\");\n    }\n    if (frustum.bottom > frustum.top) {\n      throw new DeveloperError(\"top must be greater than bottom.\");\n    }\n    if (frustum.near <= 0 || frustum.near > frustum.far) {\n      throw new DeveloperError(\n        \"near must be greater than zero and less than far.\"\n      );\n    }\n    //>>includeEnd('debug');\n\n    frustum._left = frustum.left;\n    frustum._right = frustum.right;\n    frustum._top = frustum.top;\n    frustum._bottom = frustum.bottom;\n    frustum._near = frustum.near;\n    frustum._far = frustum.far;\n    frustum._orthographicMatrix = Matrix4.computeOrthographicOffCenter(\n      frustum.left,\n      frustum.right,\n      frustum.bottom,\n      frustum.top,\n      frustum.near,\n      frustum.far,\n      frustum._orthographicMatrix\n    );\n  }\n}\n\nObject.defineProperties(OrthographicOffCenterFrustum.prototype, {\n  /**\n   * Gets the orthographic projection matrix computed from the view frustum.\n   * @memberof OrthographicOffCenterFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   */\n  projectionMatrix: {\n    get: function () {\n      update(this);\n      return this._orthographicMatrix;\n    },\n  },\n});\n\nvar getPlanesRight = new Cartesian3();\nvar getPlanesNearCenter = new Cartesian3();\nvar getPlanesPoint = new Cartesian3();\nvar negateScratch = new Cartesian3();\n\n/**\n * Creates a culling volume for this frustum.\n *\n * @param {Cartesian3} position The eye position.\n * @param {Cartesian3} direction The view direction.\n * @param {Cartesian3} up The up direction.\n * @returns {CullingVolume} A culling volume at the given position and orientation.\n *\n * @example\n * // Check if a bounding volume intersects the frustum.\n * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n * var intersect = cullingVolume.computeVisibility(boundingVolume);\n */\nOrthographicOffCenterFrustum.prototype.computeCullingVolume = function (\n  position,\n  direction,\n  up\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(position)) {\n    throw new DeveloperError(\"position is required.\");\n  }\n  if (!defined(direction)) {\n    throw new DeveloperError(\"direction is required.\");\n  }\n  if (!defined(up)) {\n    throw new DeveloperError(\"up is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var planes = this._cullingVolume.planes;\n  var t = this.top;\n  var b = this.bottom;\n  var r = this.right;\n  var l = this.left;\n  var n = this.near;\n  var f = this.far;\n\n  var right = Cartesian3.cross(direction, up, getPlanesRight);\n  Cartesian3.normalize(right, right);\n  var nearCenter = getPlanesNearCenter;\n  Cartesian3.multiplyByScalar(direction, n, nearCenter);\n  Cartesian3.add(position, nearCenter, nearCenter);\n\n  var point = getPlanesPoint;\n\n  // Left plane\n  Cartesian3.multiplyByScalar(right, l, point);\n  Cartesian3.add(nearCenter, point, point);\n\n  var plane = planes[0];\n  if (!defined(plane)) {\n    plane = planes[0] = new Cartesian4();\n  }\n  plane.x = right.x;\n  plane.y = right.y;\n  plane.z = right.z;\n  plane.w = -Cartesian3.dot(right, point);\n\n  // Right plane\n  Cartesian3.multiplyByScalar(right, r, point);\n  Cartesian3.add(nearCenter, point, point);\n\n  plane = planes[1];\n  if (!defined(plane)) {\n    plane = planes[1] = new Cartesian4();\n  }\n  plane.x = -right.x;\n  plane.y = -right.y;\n  plane.z = -right.z;\n  plane.w = -Cartesian3.dot(Cartesian3.negate(right, negateScratch), point);\n\n  // Bottom plane\n  Cartesian3.multiplyByScalar(up, b, point);\n  Cartesian3.add(nearCenter, point, point);\n\n  plane = planes[2];\n  if (!defined(plane)) {\n    plane = planes[2] = new Cartesian4();\n  }\n  plane.x = up.x;\n  plane.y = up.y;\n  plane.z = up.z;\n  plane.w = -Cartesian3.dot(up, point);\n\n  // Top plane\n  Cartesian3.multiplyByScalar(up, t, point);\n  Cartesian3.add(nearCenter, point, point);\n\n  plane = planes[3];\n  if (!defined(plane)) {\n    plane = planes[3] = new Cartesian4();\n  }\n  plane.x = -up.x;\n  plane.y = -up.y;\n  plane.z = -up.z;\n  plane.w = -Cartesian3.dot(Cartesian3.negate(up, negateScratch), point);\n\n  // Near plane\n  plane = planes[4];\n  if (!defined(plane)) {\n    plane = planes[4] = new Cartesian4();\n  }\n  plane.x = direction.x;\n  plane.y = direction.y;\n  plane.z = direction.z;\n  plane.w = -Cartesian3.dot(direction, nearCenter);\n\n  // Far plane\n  Cartesian3.multiplyByScalar(direction, f, point);\n  Cartesian3.add(position, point, point);\n\n  plane = planes[5];\n  if (!defined(plane)) {\n    plane = planes[5] = new Cartesian4();\n  }\n  plane.x = -direction.x;\n  plane.y = -direction.y;\n  plane.z = -direction.z;\n  plane.w = -Cartesian3.dot(Cartesian3.negate(direction, negateScratch), point);\n\n  return this._cullingVolume;\n};\n\n/**\n * Returns the pixel's width and height in meters.\n *\n * @param {Number} drawingBufferWidth The width of the drawing buffer.\n * @param {Number} drawingBufferHeight The height of the drawing buffer.\n * @param {Number} distance The distance to the near plane in meters.\n * @param {Number} pixelRatio The scaling factor from pixel space to coordinate space.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\n *\n * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n * @exception {DeveloperError} pixelRatio must be greater than zero.\n *\n * @example\n * // Example 1\n * // Get the width and height of a pixel.\n * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 0.0, scene.pixelRatio, new Cesium.Cartesian2());\n */\nOrthographicOffCenterFrustum.prototype.getPixelDimensions = function (\n  drawingBufferWidth,\n  drawingBufferHeight,\n  distance,\n  pixelRatio,\n  result\n) {\n  update(this);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(drawingBufferWidth) || !defined(drawingBufferHeight)) {\n    throw new DeveloperError(\n      \"Both drawingBufferWidth and drawingBufferHeight are required.\"\n    );\n  }\n  if (drawingBufferWidth <= 0) {\n    throw new DeveloperError(\"drawingBufferWidth must be greater than zero.\");\n  }\n  if (drawingBufferHeight <= 0) {\n    throw new DeveloperError(\"drawingBufferHeight must be greater than zero.\");\n  }\n  if (!defined(distance)) {\n    throw new DeveloperError(\"distance is required.\");\n  }\n  if (!defined(pixelRatio)) {\n    throw new DeveloperError(\"pixelRatio is required.\");\n  }\n  if (pixelRatio <= 0) {\n    throw new DeveloperError(\"pixelRatio must be greater than zero.\");\n  }\n  if (!defined(result)) {\n    throw new DeveloperError(\"A result object is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var frustumWidth = this.right - this.left;\n  var frustumHeight = this.top - this.bottom;\n  var pixelWidth = (pixelRatio * frustumWidth) / drawingBufferWidth;\n  var pixelHeight = (pixelRatio * frustumHeight) / drawingBufferHeight;\n\n  result.x = pixelWidth;\n  result.y = pixelHeight;\n  return result;\n};\n\n/**\n * Returns a duplicate of a OrthographicOffCenterFrustum instance.\n *\n * @param {OrthographicOffCenterFrustum} [result] The object onto which to store the result.\n * @returns {OrthographicOffCenterFrustum} The modified result parameter or a new OrthographicOffCenterFrustum instance if one was not provided.\n */\nOrthographicOffCenterFrustum.prototype.clone = function (result) {\n  if (!defined(result)) {\n    result = new OrthographicOffCenterFrustum();\n  }\n\n  result.left = this.left;\n  result.right = this.right;\n  result.top = this.top;\n  result.bottom = this.bottom;\n  result.near = this.near;\n  result.far = this.far;\n\n  // force update of clone to compute matrices\n  result._left = undefined;\n  result._right = undefined;\n  result._top = undefined;\n  result._bottom = undefined;\n  result._near = undefined;\n  result._far = undefined;\n\n  return result;\n};\n\n/**\n * Compares the provided OrthographicOffCenterFrustum componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {OrthographicOffCenterFrustum} [other] The right hand side OrthographicOffCenterFrustum.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nOrthographicOffCenterFrustum.prototype.equals = function (other) {\n  return (\n    defined(other) &&\n    other instanceof OrthographicOffCenterFrustum &&\n    this.right === other.right &&\n    this.left === other.left &&\n    this.top === other.top &&\n    this.bottom === other.bottom &&\n    this.near === other.near &&\n    this.far === other.far\n  );\n};\n\n/**\n * Compares the provided OrthographicOffCenterFrustum componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {OrthographicOffCenterFrustum} other The right hand side OrthographicOffCenterFrustum.\n * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\n */\nOrthographicOffCenterFrustum.prototype.equalsEpsilon = function (\n  other,\n  relativeEpsilon,\n  absoluteEpsilon\n) {\n  return (\n    other === this ||\n    (defined(other) &&\n      other instanceof OrthographicOffCenterFrustum &&\n      CesiumMath.equalsEpsilon(\n        this.right,\n        other.right,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      CesiumMath.equalsEpsilon(\n        this.left,\n        other.left,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      CesiumMath.equalsEpsilon(\n        this.top,\n        other.top,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      CesiumMath.equalsEpsilon(\n        this.bottom,\n        other.bottom,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      CesiumMath.equalsEpsilon(\n        this.near,\n        other.near,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      CesiumMath.equalsEpsilon(\n        this.far,\n        other.far,\n        relativeEpsilon,\n        absoluteEpsilon\n      ))\n  );\n};\nexport default OrthographicOffCenterFrustum;\n"]},"metadata":{},"sourceType":"module"}