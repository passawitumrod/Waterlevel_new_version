{"ast":null,"code":"import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\n/**\n * A wrapper around arrays so that the internal length of the array can be manually managed.\n *\n * @alias ManagedArray\n * @constructor\n * @private\n *\n * @param {Number} [length=0] The initial length of the array.\n */\n\nfunction ManagedArray(length) {\n  length = defaultValue(length, 0);\n  this._array = new Array(length);\n  this._length = length;\n}\n\nObject.defineProperties(ManagedArray.prototype, {\n  /**\n   * Gets or sets the length of the array.\n   * If the set length is greater than the length of the internal array, the internal array is resized.\n   *\n   * @memberof ManagedArray.prototype\n   * @type Number\n   */\n  length: {\n    get: function () {\n      return this._length;\n    },\n    set: function (length) {\n      this._length = length;\n\n      if (length > this._array.length) {\n        this._array.length = length;\n      }\n    }\n  },\n\n  /**\n   * Gets the internal array.\n   *\n   * @memberof ManagedArray.prototype\n   * @type Array\n   * @readonly\n   */\n  values: {\n    get: function () {\n      return this._array;\n    }\n  }\n});\n/**\n * Gets the element at an index.\n *\n * @param {Number} index The index to get.\n */\n\nManagedArray.prototype.get = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.lessThan(\"index\", index, this._array.length); //>>includeEnd('debug');\n\n  return this._array[index];\n};\n/**\n * Sets the element at an index. Resizes the array if index is greater than the length of the array.\n *\n * @param {Number} index The index to set.\n * @param {*} element The element to set at index.\n */\n\n\nManagedArray.prototype.set = function (index, element) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"index\", index); //>>includeEnd('debug');\n\n  if (index >= this.length) {\n    this.length = index + 1;\n  }\n\n  this._array[index] = element;\n};\n/**\n * Returns the last element in the array without modifying the array.\n *\n * @returns {*} The last element in the array.\n */\n\n\nManagedArray.prototype.peek = function () {\n  return this._array[this._length - 1];\n};\n/**\n * Push an element into the array.\n *\n * @param {*} element The element to push.\n */\n\n\nManagedArray.prototype.push = function (element) {\n  var index = this.length++;\n  this._array[index] = element;\n};\n/**\n * Pop an element from the array.\n *\n * @returns {*} The last element in the array.\n */\n\n\nManagedArray.prototype.pop = function () {\n  return this._array[--this.length];\n};\n/**\n * Resize the internal array if length > _array.length.\n *\n * @param {Number} length The length.\n */\n\n\nManagedArray.prototype.reserve = function (length) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\"length\", length, 0); //>>includeEnd('debug');\n\n  if (length > this._array.length) {\n    this._array.length = length;\n  }\n};\n/**\n * Resize the array.\n *\n * @param {Number} length The length.\n */\n\n\nManagedArray.prototype.resize = function (length) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\"length\", length, 0); //>>includeEnd('debug');\n\n  this.length = length;\n};\n/**\n * Trim the internal array to the specified length. Defaults to the current length.\n *\n * @param {Number} [length] The length.\n */\n\n\nManagedArray.prototype.trim = function (length) {\n  length = defaultValue(length, this.length);\n  this._array.length = length;\n};\n\nexport default ManagedArray;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/ManagedArray.js"],"names":["Check","defaultValue","ManagedArray","length","_array","Array","_length","Object","defineProperties","prototype","get","set","values","index","typeOf","number","lessThan","element","peek","push","pop","reserve","greaterThanOrEquals","resize","trim"],"mappings":"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","sourcesContent":["import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\n\n/**\n * A wrapper around arrays so that the internal length of the array can be manually managed.\n *\n * @alias ManagedArray\n * @constructor\n * @private\n *\n * @param {Number} [length=0] The initial length of the array.\n */\nfunction ManagedArray(length) {\n  length = defaultValue(length, 0);\n  this._array = new Array(length);\n  this._length = length;\n}\n\nObject.defineProperties(ManagedArray.prototype, {\n  /**\n   * Gets or sets the length of the array.\n   * If the set length is greater than the length of the internal array, the internal array is resized.\n   *\n   * @memberof ManagedArray.prototype\n   * @type Number\n   */\n  length: {\n    get: function () {\n      return this._length;\n    },\n    set: function (length) {\n      this._length = length;\n      if (length > this._array.length) {\n        this._array.length = length;\n      }\n    },\n  },\n\n  /**\n   * Gets the internal array.\n   *\n   * @memberof ManagedArray.prototype\n   * @type Array\n   * @readonly\n   */\n  values: {\n    get: function () {\n      return this._array;\n    },\n  },\n});\n\n/**\n * Gets the element at an index.\n *\n * @param {Number} index The index to get.\n */\nManagedArray.prototype.get = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.lessThan(\"index\", index, this._array.length);\n  //>>includeEnd('debug');\n\n  return this._array[index];\n};\n\n/**\n * Sets the element at an index. Resizes the array if index is greater than the length of the array.\n *\n * @param {Number} index The index to set.\n * @param {*} element The element to set at index.\n */\nManagedArray.prototype.set = function (index, element) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"index\", index);\n  //>>includeEnd('debug');\n\n  if (index >= this.length) {\n    this.length = index + 1;\n  }\n  this._array[index] = element;\n};\n\n/**\n * Returns the last element in the array without modifying the array.\n *\n * @returns {*} The last element in the array.\n */\nManagedArray.prototype.peek = function () {\n  return this._array[this._length - 1];\n};\n\n/**\n * Push an element into the array.\n *\n * @param {*} element The element to push.\n */\nManagedArray.prototype.push = function (element) {\n  var index = this.length++;\n  this._array[index] = element;\n};\n\n/**\n * Pop an element from the array.\n *\n * @returns {*} The last element in the array.\n */\nManagedArray.prototype.pop = function () {\n  return this._array[--this.length];\n};\n\n/**\n * Resize the internal array if length > _array.length.\n *\n * @param {Number} length The length.\n */\nManagedArray.prototype.reserve = function (length) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\"length\", length, 0);\n  //>>includeEnd('debug');\n\n  if (length > this._array.length) {\n    this._array.length = length;\n  }\n};\n\n/**\n * Resize the array.\n *\n * @param {Number} length The length.\n */\nManagedArray.prototype.resize = function (length) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\"length\", length, 0);\n  //>>includeEnd('debug');\n\n  this.length = length;\n};\n\n/**\n * Trim the internal array to the specified length. Defaults to the current length.\n *\n * @param {Number} [length] The length.\n */\nManagedArray.prototype.trim = function (length) {\n  length = defaultValue(length, this.length);\n  this._array.length = length;\n};\nexport default ManagedArray;\n"]},"metadata":{},"sourceType":"module"}