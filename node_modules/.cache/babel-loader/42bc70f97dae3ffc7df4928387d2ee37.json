{"ast":null,"code":"import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport oneTimeWarning from \"./oneTimeWarning.js\";\n/**\n * Logs a deprecation message to the console.  Use this function instead of\n * <code>console.log</code> directly since this does not log duplicate messages\n * unless it is called from multiple workers.\n *\n * @exports deprecationWarning\n *\n * @param {String} identifier The unique identifier for this deprecated API.\n * @param {String} message The message to log to the console.\n *\n * @example\n * // Deprecated function or class\n * function Foo() {\n *    deprecationWarning('Foo', 'Foo was deprecated in Cesium 1.01.  It will be removed in 1.03.  Use newFoo instead.');\n *    // ...\n * }\n *\n * // Deprecated function\n * Bar.prototype.func = function() {\n *    deprecationWarning('Bar.func', 'Bar.func() was deprecated in Cesium 1.01.  It will be removed in 1.03.  Use Bar.newFunc() instead.');\n *    // ...\n * };\n *\n * // Deprecated property\n * Object.defineProperties(Bar.prototype, {\n *     prop : {\n *         get : function() {\n *             deprecationWarning('Bar.prop', 'Bar.prop was deprecated in Cesium 1.01.  It will be removed in 1.03.  Use Bar.newProp instead.');\n *             // ...\n *         },\n *         set : function(value) {\n *             deprecationWarning('Bar.prop', 'Bar.prop was deprecated in Cesium 1.01.  It will be removed in 1.03.  Use Bar.newProp instead.');\n *             // ...\n *         }\n *     }\n * });\n *\n * @private\n */\n\nfunction deprecationWarning(identifier, message) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(identifier) || !defined(message)) {\n    throw new DeveloperError(\"identifier and message are required.\");\n  } //>>includeEnd('debug');\n\n\n  oneTimeWarning(identifier, message);\n}\n\nexport default deprecationWarning;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/deprecationWarning.js"],"names":["defined","DeveloperError","oneTimeWarning","deprecationWarning","identifier","message"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,SAASC,kBAAT,CAA4BC,UAA5B,EAAwCC,OAAxC,EAAiD;AAC/C;AACA,MAAI,CAACL,OAAO,CAACI,UAAD,CAAR,IAAwB,CAACJ,OAAO,CAACK,OAAD,CAApC,EAA+C;AAC7C,UAAM,IAAIJ,cAAJ,CAAmB,sCAAnB,CAAN;AACD,GAJ8C,CAK/C;;;AAEAC,EAAAA,cAAc,CAACE,UAAD,EAAaC,OAAb,CAAd;AACD;;AACD,eAAeF,kBAAf","sourcesContent":["import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport oneTimeWarning from \"./oneTimeWarning.js\";\n\n/**\n * Logs a deprecation message to the console.  Use this function instead of\n * <code>console.log</code> directly since this does not log duplicate messages\n * unless it is called from multiple workers.\n *\n * @exports deprecationWarning\n *\n * @param {String} identifier The unique identifier for this deprecated API.\n * @param {String} message The message to log to the console.\n *\n * @example\n * // Deprecated function or class\n * function Foo() {\n *    deprecationWarning('Foo', 'Foo was deprecated in Cesium 1.01.  It will be removed in 1.03.  Use newFoo instead.');\n *    // ...\n * }\n *\n * // Deprecated function\n * Bar.prototype.func = function() {\n *    deprecationWarning('Bar.func', 'Bar.func() was deprecated in Cesium 1.01.  It will be removed in 1.03.  Use Bar.newFunc() instead.');\n *    // ...\n * };\n *\n * // Deprecated property\n * Object.defineProperties(Bar.prototype, {\n *     prop : {\n *         get : function() {\n *             deprecationWarning('Bar.prop', 'Bar.prop was deprecated in Cesium 1.01.  It will be removed in 1.03.  Use Bar.newProp instead.');\n *             // ...\n *         },\n *         set : function(value) {\n *             deprecationWarning('Bar.prop', 'Bar.prop was deprecated in Cesium 1.01.  It will be removed in 1.03.  Use Bar.newProp instead.');\n *             // ...\n *         }\n *     }\n * });\n *\n * @private\n */\nfunction deprecationWarning(identifier, message) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(identifier) || !defined(message)) {\n    throw new DeveloperError(\"identifier and message are required.\");\n  }\n  //>>includeEnd('debug');\n\n  oneTimeWarning(identifier, message);\n}\nexport default deprecationWarning;\n"]},"metadata":{},"sourceType":"module"}