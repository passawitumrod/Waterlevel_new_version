{"ast":null,"code":"import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport WebGLConstants from \"../Core/WebGLConstants.js\";\nimport ClearCommand from \"../Renderer/ClearCommand.js\";\nimport DrawCommand from \"../Renderer/DrawCommand.js\";\nimport Framebuffer from \"../Renderer/Framebuffer.js\";\nimport PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport Texture from \"../Renderer/Texture.js\";\nimport AdjustTranslucentFS from \"../Shaders/AdjustTranslucentFS.js\";\nimport CompositeOITFS from \"../Shaders/CompositeOITFS.js\";\nimport BlendEquation from \"./BlendEquation.js\";\nimport BlendFunction from \"./BlendFunction.js\";\n/**\n * @private\n */\n\nfunction OIT(context) {\n  // We support multipass for the Chrome D3D9 backend and ES 2.0 on mobile.\n  this._translucentMultipassSupport = false;\n  this._translucentMRTSupport = false;\n  var extensionsSupported = context.colorBufferFloat && context.depthTexture;\n  this._translucentMRTSupport = context.drawBuffers && extensionsSupported;\n  this._translucentMultipassSupport = !this._translucentMRTSupport && extensionsSupported;\n  this._opaqueFBO = undefined;\n  this._opaqueTexture = undefined;\n  this._depthStencilTexture = undefined;\n  this._accumulationTexture = undefined;\n  this._translucentFBO = undefined;\n  this._alphaFBO = undefined;\n  this._adjustTranslucentFBO = undefined;\n  this._adjustAlphaFBO = undefined;\n  this._opaqueClearCommand = new ClearCommand({\n    color: new Color(0.0, 0.0, 0.0, 0.0),\n    owner: this\n  });\n  this._translucentMRTClearCommand = new ClearCommand({\n    color: new Color(0.0, 0.0, 0.0, 1.0),\n    owner: this\n  });\n  this._translucentMultipassClearCommand = new ClearCommand({\n    color: new Color(0.0, 0.0, 0.0, 0.0),\n    owner: this\n  });\n  this._alphaClearCommand = new ClearCommand({\n    color: new Color(1.0, 1.0, 1.0, 1.0),\n    owner: this\n  });\n  this._translucentRenderStateCache = {};\n  this._alphaRenderStateCache = {};\n  this._compositeCommand = undefined;\n  this._adjustTranslucentCommand = undefined;\n  this._adjustAlphaCommand = undefined;\n  this._viewport = new BoundingRectangle();\n  this._rs = undefined;\n  this._useScissorTest = false;\n  this._scissorRectangle = undefined;\n  this._useHDR = false;\n}\n\nfunction destroyTextures(oit) {\n  oit._accumulationTexture = oit._accumulationTexture && !oit._accumulationTexture.isDestroyed() && oit._accumulationTexture.destroy();\n  oit._revealageTexture = oit._revealageTexture && !oit._revealageTexture.isDestroyed() && oit._revealageTexture.destroy();\n}\n\nfunction destroyFramebuffers(oit) {\n  oit._translucentFBO = oit._translucentFBO && !oit._translucentFBO.isDestroyed() && oit._translucentFBO.destroy();\n  oit._alphaFBO = oit._alphaFBO && !oit._alphaFBO.isDestroyed() && oit._alphaFBO.destroy();\n  oit._adjustTranslucentFBO = oit._adjustTranslucentFBO && !oit._adjustTranslucentFBO.isDestroyed() && oit._adjustTranslucentFBO.destroy();\n  oit._adjustAlphaFBO = oit._adjustAlphaFBO && !oit._adjustAlphaFBO.isDestroyed() && oit._adjustAlphaFBO.destroy();\n}\n\nfunction destroyResources(oit) {\n  destroyTextures(oit);\n  destroyFramebuffers(oit);\n}\n\nfunction updateTextures(oit, context, width, height) {\n  destroyTextures(oit);\n  oit._accumulationTexture = new Texture({\n    context: context,\n    width: width,\n    height: height,\n    pixelFormat: PixelFormat.RGBA,\n    pixelDatatype: PixelDatatype.FLOAT\n  }); // Use zeroed arraybuffer instead of null to initialize texture\n  // to workaround Firefox. Only needed for the second color attachment.\n\n  var source = new Float32Array(width * height * 4);\n  oit._revealageTexture = new Texture({\n    context: context,\n    pixelFormat: PixelFormat.RGBA,\n    pixelDatatype: PixelDatatype.FLOAT,\n    source: {\n      arrayBufferView: source,\n      width: width,\n      height: height\n    },\n    flipY: false\n  });\n}\n\nfunction updateFramebuffers(oit, context) {\n  destroyFramebuffers(oit);\n  var completeFBO = WebGLConstants.FRAMEBUFFER_COMPLETE;\n  var supported = true; // if MRT is supported, attempt to make an FBO with multiple color attachments\n\n  if (oit._translucentMRTSupport) {\n    oit._translucentFBO = new Framebuffer({\n      context: context,\n      colorTextures: [oit._accumulationTexture, oit._revealageTexture],\n      depthStencilTexture: oit._depthStencilTexture,\n      destroyAttachments: false\n    });\n    oit._adjustTranslucentFBO = new Framebuffer({\n      context: context,\n      colorTextures: [oit._accumulationTexture, oit._revealageTexture],\n      destroyAttachments: false\n    });\n\n    if (oit._translucentFBO.status !== completeFBO || oit._adjustTranslucentFBO.status !== completeFBO) {\n      destroyFramebuffers(oit);\n      oit._translucentMRTSupport = false;\n    }\n  } // either MRT isn't supported or FBO creation failed, attempt multipass\n\n\n  if (!oit._translucentMRTSupport) {\n    oit._translucentFBO = new Framebuffer({\n      context: context,\n      colorTextures: [oit._accumulationTexture],\n      depthStencilTexture: oit._depthStencilTexture,\n      destroyAttachments: false\n    });\n    oit._alphaFBO = new Framebuffer({\n      context: context,\n      colorTextures: [oit._revealageTexture],\n      depthStencilTexture: oit._depthStencilTexture,\n      destroyAttachments: false\n    });\n    oit._adjustTranslucentFBO = new Framebuffer({\n      context: context,\n      colorTextures: [oit._accumulationTexture],\n      destroyAttachments: false\n    });\n    oit._adjustAlphaFBO = new Framebuffer({\n      context: context,\n      colorTextures: [oit._revealageTexture],\n      destroyAttachments: false\n    });\n    var translucentComplete = oit._translucentFBO.status === completeFBO;\n    var alphaComplete = oit._alphaFBO.status === completeFBO;\n    var adjustTranslucentComplete = oit._adjustTranslucentFBO.status === completeFBO;\n    var adjustAlphaComplete = oit._adjustAlphaFBO.status === completeFBO;\n\n    if (!translucentComplete || !alphaComplete || !adjustTranslucentComplete || !adjustAlphaComplete) {\n      destroyResources(oit);\n      oit._translucentMultipassSupport = false;\n      supported = false;\n    }\n  }\n\n  return supported;\n}\n\nOIT.prototype.update = function (context, passState, framebuffer, useHDR) {\n  if (!this.isSupported()) {\n    return;\n  }\n\n  this._opaqueFBO = framebuffer;\n  this._opaqueTexture = framebuffer.getColorTexture(0);\n  this._depthStencilTexture = framebuffer.depthStencilTexture;\n  var width = this._opaqueTexture.width;\n  var height = this._opaqueTexture.height;\n  var accumulationTexture = this._accumulationTexture;\n  var textureChanged = !defined(accumulationTexture) || accumulationTexture.width !== width || accumulationTexture.height !== height || useHDR !== this._useHDR;\n\n  if (textureChanged) {\n    updateTextures(this, context, width, height);\n  }\n\n  if (!defined(this._translucentFBO) || textureChanged) {\n    if (!updateFramebuffers(this, context)) {\n      // framebuffer creation failed\n      return;\n    }\n  }\n\n  this._useHDR = useHDR;\n  var that = this;\n  var fs;\n  var uniformMap;\n\n  if (!defined(this._compositeCommand)) {\n    fs = new ShaderSource({\n      sources: [CompositeOITFS]\n    });\n\n    if (this._translucentMRTSupport) {\n      fs.defines.push(\"MRT\");\n    }\n\n    uniformMap = {\n      u_opaque: function u_opaque() {\n        return that._opaqueTexture;\n      },\n      u_accumulation: function u_accumulation() {\n        return that._accumulationTexture;\n      },\n      u_revealage: function u_revealage() {\n        return that._revealageTexture;\n      }\n    };\n    this._compositeCommand = context.createViewportQuadCommand(fs, {\n      uniformMap: uniformMap,\n      owner: this\n    });\n  }\n\n  if (!defined(this._adjustTranslucentCommand)) {\n    if (this._translucentMRTSupport) {\n      fs = new ShaderSource({\n        defines: [\"MRT\"],\n        sources: [AdjustTranslucentFS]\n      });\n      uniformMap = {\n        u_bgColor: function u_bgColor() {\n          return that._translucentMRTClearCommand.color;\n        },\n        u_depthTexture: function u_depthTexture() {\n          return that._depthStencilTexture;\n        }\n      };\n      this._adjustTranslucentCommand = context.createViewportQuadCommand(fs, {\n        uniformMap: uniformMap,\n        owner: this\n      });\n    } else if (this._translucentMultipassSupport) {\n      fs = new ShaderSource({\n        sources: [AdjustTranslucentFS]\n      });\n      uniformMap = {\n        u_bgColor: function u_bgColor() {\n          return that._translucentMultipassClearCommand.color;\n        },\n        u_depthTexture: function u_depthTexture() {\n          return that._depthStencilTexture;\n        }\n      };\n      this._adjustTranslucentCommand = context.createViewportQuadCommand(fs, {\n        uniformMap: uniformMap,\n        owner: this\n      });\n      uniformMap = {\n        u_bgColor: function u_bgColor() {\n          return that._alphaClearCommand.color;\n        },\n        u_depthTexture: function u_depthTexture() {\n          return that._depthStencilTexture;\n        }\n      };\n      this._adjustAlphaCommand = context.createViewportQuadCommand(fs, {\n        uniformMap: uniformMap,\n        owner: this\n      });\n    }\n  }\n\n  this._viewport.width = width;\n  this._viewport.height = height;\n  var useScissorTest = !BoundingRectangle.equals(this._viewport, passState.viewport);\n  var updateScissor = useScissorTest !== this._useScissorTest;\n  this._useScissorTest = useScissorTest;\n\n  if (!BoundingRectangle.equals(this._scissorRectangle, passState.viewport)) {\n    this._scissorRectangle = BoundingRectangle.clone(passState.viewport, this._scissorRectangle);\n    updateScissor = true;\n  }\n\n  if (!defined(this._rs) || !BoundingRectangle.equals(this._viewport, this._rs.viewport) || updateScissor) {\n    this._rs = RenderState.fromCache({\n      viewport: this._viewport,\n      scissorTest: {\n        enabled: this._useScissorTest,\n        rectangle: this._scissorRectangle\n      }\n    });\n  }\n\n  if (defined(this._compositeCommand)) {\n    this._compositeCommand.renderState = this._rs;\n  }\n\n  if (this._adjustTranslucentCommand) {\n    this._adjustTranslucentCommand.renderState = this._rs;\n  }\n\n  if (defined(this._adjustAlphaCommand)) {\n    this._adjustAlphaCommand.renderState = this._rs;\n  }\n};\n\nvar translucentMRTBlend = {\n  enabled: true,\n  color: new Color(0.0, 0.0, 0.0, 0.0),\n  equationRgb: BlendEquation.ADD,\n  equationAlpha: BlendEquation.ADD,\n  functionSourceRgb: BlendFunction.ONE,\n  functionDestinationRgb: BlendFunction.ONE,\n  functionSourceAlpha: BlendFunction.ZERO,\n  functionDestinationAlpha: BlendFunction.ONE_MINUS_SOURCE_ALPHA\n};\nvar translucentColorBlend = {\n  enabled: true,\n  color: new Color(0.0, 0.0, 0.0, 0.0),\n  equationRgb: BlendEquation.ADD,\n  equationAlpha: BlendEquation.ADD,\n  functionSourceRgb: BlendFunction.ONE,\n  functionDestinationRgb: BlendFunction.ONE,\n  functionSourceAlpha: BlendFunction.ONE,\n  functionDestinationAlpha: BlendFunction.ONE\n};\nvar translucentAlphaBlend = {\n  enabled: true,\n  color: new Color(0.0, 0.0, 0.0, 0.0),\n  equationRgb: BlendEquation.ADD,\n  equationAlpha: BlendEquation.ADD,\n  functionSourceRgb: BlendFunction.ZERO,\n  functionDestinationRgb: BlendFunction.ONE_MINUS_SOURCE_ALPHA,\n  functionSourceAlpha: BlendFunction.ZERO,\n  functionDestinationAlpha: BlendFunction.ONE_MINUS_SOURCE_ALPHA\n};\n\nfunction getTranslucentRenderState(context, translucentBlending, cache, renderState) {\n  var translucentState = cache[renderState.id];\n\n  if (!defined(translucentState)) {\n    var rs = RenderState.getState(renderState);\n    rs.depthMask = false;\n    rs.blending = translucentBlending;\n    translucentState = RenderState.fromCache(rs);\n    cache[renderState.id] = translucentState;\n  }\n\n  return translucentState;\n}\n\nfunction getTranslucentMRTRenderState(oit, context, renderState) {\n  return getTranslucentRenderState(context, translucentMRTBlend, oit._translucentRenderStateCache, renderState);\n}\n\nfunction getTranslucentColorRenderState(oit, context, renderState) {\n  return getTranslucentRenderState(context, translucentColorBlend, oit._translucentRenderStateCache, renderState);\n}\n\nfunction getTranslucentAlphaRenderState(oit, context, renderState) {\n  return getTranslucentRenderState(context, translucentAlphaBlend, oit._alphaRenderStateCache, renderState);\n}\n\nvar mrtShaderSource = \"    vec3 Ci = czm_gl_FragColor.rgb * czm_gl_FragColor.a;\\n\" + \"    float ai = czm_gl_FragColor.a;\\n\" + \"    float wzi = czm_alphaWeight(ai);\\n\" + \"    gl_FragData[0] = vec4(Ci * wzi, ai);\\n\" + \"    gl_FragData[1] = vec4(ai * wzi);\\n\";\nvar colorShaderSource = \"    vec3 Ci = czm_gl_FragColor.rgb * czm_gl_FragColor.a;\\n\" + \"    float ai = czm_gl_FragColor.a;\\n\" + \"    float wzi = czm_alphaWeight(ai);\\n\" + \"    gl_FragColor = vec4(Ci, ai) * wzi;\\n\";\nvar alphaShaderSource = \"    float ai = czm_gl_FragColor.a;\\n\" + \"    gl_FragColor = vec4(ai);\\n\";\n\nfunction getTranslucentShaderProgram(context, shaderProgram, keyword, source) {\n  var shader = context.shaderCache.getDerivedShaderProgram(shaderProgram, keyword);\n\n  if (!defined(shader)) {\n    var attributeLocations = shaderProgram._attributeLocations;\n    var fs = shaderProgram.fragmentShaderSource.clone();\n    fs.sources = fs.sources.map(function (source) {\n      source = ShaderSource.replaceMain(source, \"czm_translucent_main\");\n      source = source.replace(/gl_FragColor/g, \"czm_gl_FragColor\");\n      source = source.replace(/\\bdiscard\\b/g, \"czm_discard = true\");\n      source = source.replace(/czm_phong/g, \"czm_translucentPhong\");\n      return source;\n    }); // Discarding the fragment in main is a workaround for ANGLE D3D9\n    // shader compilation errors.\n\n    fs.sources.splice(0, 0, (source.indexOf(\"gl_FragData\") !== -1 ? \"#extension GL_EXT_draw_buffers : enable \\n\" : \"\") + \"vec4 czm_gl_FragColor;\\n\" + \"bool czm_discard = false;\\n\");\n    fs.sources.push(\"void main()\\n\" + \"{\\n\" + \"    czm_translucent_main();\\n\" + \"    if (czm_discard)\\n\" + \"    {\\n\" + \"        discard;\\n\" + \"    }\\n\" + source + \"}\\n\");\n    shader = context.shaderCache.createDerivedShaderProgram(shaderProgram, keyword, {\n      vertexShaderSource: shaderProgram.vertexShaderSource,\n      fragmentShaderSource: fs,\n      attributeLocations: attributeLocations\n    });\n  }\n\n  return shader;\n}\n\nfunction getTranslucentMRTShaderProgram(context, shaderProgram) {\n  return getTranslucentShaderProgram(context, shaderProgram, \"translucentMRT\", mrtShaderSource);\n}\n\nfunction getTranslucentColorShaderProgram(context, shaderProgram) {\n  return getTranslucentShaderProgram(context, shaderProgram, \"translucentMultipass\", colorShaderSource);\n}\n\nfunction getTranslucentAlphaShaderProgram(context, shaderProgram) {\n  return getTranslucentShaderProgram(context, shaderProgram, \"alphaMultipass\", alphaShaderSource);\n}\n\nOIT.prototype.createDerivedCommands = function (command, context, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n\n  if (this._translucentMRTSupport) {\n    var translucentShader;\n    var translucentRenderState;\n\n    if (defined(result.translucentCommand)) {\n      translucentShader = result.translucentCommand.shaderProgram;\n      translucentRenderState = result.translucentCommand.renderState;\n    }\n\n    result.translucentCommand = DrawCommand.shallowClone(command, result.translucentCommand);\n\n    if (!defined(translucentShader) || result.shaderProgramId !== command.shaderProgram.id) {\n      result.translucentCommand.shaderProgram = getTranslucentMRTShaderProgram(context, command.shaderProgram);\n      result.translucentCommand.renderState = getTranslucentMRTRenderState(this, context, command.renderState);\n      result.shaderProgramId = command.shaderProgram.id;\n    } else {\n      result.translucentCommand.shaderProgram = translucentShader;\n      result.translucentCommand.renderState = translucentRenderState;\n    }\n  } else {\n    var colorShader;\n    var colorRenderState;\n    var alphaShader;\n    var alphaRenderState;\n\n    if (defined(result.translucentCommand)) {\n      colorShader = result.translucentCommand.shaderProgram;\n      colorRenderState = result.translucentCommand.renderState;\n      alphaShader = result.alphaCommand.shaderProgram;\n      alphaRenderState = result.alphaCommand.renderState;\n    }\n\n    result.translucentCommand = DrawCommand.shallowClone(command, result.translucentCommand);\n    result.alphaCommand = DrawCommand.shallowClone(command, result.alphaCommand);\n\n    if (!defined(colorShader) || result.shaderProgramId !== command.shaderProgram.id) {\n      result.translucentCommand.shaderProgram = getTranslucentColorShaderProgram(context, command.shaderProgram);\n      result.translucentCommand.renderState = getTranslucentColorRenderState(this, context, command.renderState);\n      result.alphaCommand.shaderProgram = getTranslucentAlphaShaderProgram(context, command.shaderProgram);\n      result.alphaCommand.renderState = getTranslucentAlphaRenderState(this, context, command.renderState);\n      result.shaderProgramId = command.shaderProgram.id;\n    } else {\n      result.translucentCommand.shaderProgram = colorShader;\n      result.translucentCommand.renderState = colorRenderState;\n      result.alphaCommand.shaderProgram = alphaShader;\n      result.alphaCommand.renderState = alphaRenderState;\n    }\n  }\n\n  return result;\n};\n\nfunction executeTranslucentCommandsSortedMultipass(oit, scene, executeFunction, passState, commands, invertClassification) {\n  var command;\n  var derivedCommand;\n  var j;\n  var context = scene.context;\n  var useLogDepth = scene.frameState.useLogDepth;\n  var useHdr = scene._hdr;\n  var framebuffer = passState.framebuffer;\n  var length = commands.length;\n  var lightShadowsEnabled = scene.frameState.shadowState.lightShadowsEnabled;\n  passState.framebuffer = oit._adjustTranslucentFBO;\n\n  oit._adjustTranslucentCommand.execute(context, passState);\n\n  passState.framebuffer = oit._adjustAlphaFBO;\n\n  oit._adjustAlphaCommand.execute(context, passState);\n\n  var debugFramebuffer = oit._opaqueFBO;\n  passState.framebuffer = oit._translucentFBO;\n\n  for (j = 0; j < length; ++j) {\n    command = commands[j];\n    command = useLogDepth ? command.derivedCommands.logDepth.command : command;\n    command = useHdr ? command.derivedCommands.hdr.command : command;\n    derivedCommand = lightShadowsEnabled && command.receiveShadows ? command.derivedCommands.oit.shadows.translucentCommand : command.derivedCommands.oit.translucentCommand;\n    executeFunction(derivedCommand, scene, context, passState, debugFramebuffer);\n  }\n\n  if (defined(invertClassification)) {\n    command = invertClassification.unclassifiedCommand;\n    derivedCommand = lightShadowsEnabled && command.receiveShadows ? command.derivedCommands.oit.shadows.translucentCommand : command.derivedCommands.oit.translucentCommand;\n    executeFunction(derivedCommand, scene, context, passState, debugFramebuffer);\n  }\n\n  passState.framebuffer = oit._alphaFBO;\n\n  for (j = 0; j < length; ++j) {\n    command = commands[j];\n    command = useLogDepth ? command.derivedCommands.logDepth.command : command;\n    command = useHdr ? command.derivedCommands.hdr.command : command;\n    derivedCommand = lightShadowsEnabled && command.receiveShadows ? command.derivedCommands.oit.shadows.alphaCommand : command.derivedCommands.oit.alphaCommand;\n    executeFunction(derivedCommand, scene, context, passState, debugFramebuffer);\n  }\n\n  if (defined(invertClassification)) {\n    command = invertClassification.unclassifiedCommand;\n    derivedCommand = lightShadowsEnabled && command.receiveShadows ? command.derivedCommands.oit.shadows.alphaCommand : command.derivedCommands.oit.alphaCommand;\n    executeFunction(derivedCommand, scene, context, passState, debugFramebuffer);\n  }\n\n  passState.framebuffer = framebuffer;\n}\n\nfunction executeTranslucentCommandsSortedMRT(oit, scene, executeFunction, passState, commands, invertClassification) {\n  var context = scene.context;\n  var useLogDepth = scene.frameState.useLogDepth;\n  var useHdr = scene._hdr;\n  var framebuffer = passState.framebuffer;\n  var length = commands.length;\n  var lightShadowsEnabled = scene.frameState.shadowState.lightShadowsEnabled;\n  passState.framebuffer = oit._adjustTranslucentFBO;\n\n  oit._adjustTranslucentCommand.execute(context, passState);\n\n  var debugFramebuffer = oit._opaqueFBO;\n  passState.framebuffer = oit._translucentFBO;\n  var command;\n  var derivedCommand;\n\n  for (var j = 0; j < length; ++j) {\n    command = commands[j];\n    command = useLogDepth ? command.derivedCommands.logDepth.command : command;\n    command = useHdr ? command.derivedCommands.hdr.command : command;\n    derivedCommand = lightShadowsEnabled && command.receiveShadows ? command.derivedCommands.oit.shadows.translucentCommand : command.derivedCommands.oit.translucentCommand;\n    executeFunction(derivedCommand, scene, context, passState, debugFramebuffer);\n  }\n\n  if (defined(invertClassification)) {\n    command = invertClassification.unclassifiedCommand;\n    derivedCommand = lightShadowsEnabled && command.receiveShadows ? command.derivedCommands.oit.shadows.translucentCommand : command.derivedCommands.oit.translucentCommand;\n    executeFunction(derivedCommand, scene, context, passState, debugFramebuffer);\n  }\n\n  passState.framebuffer = framebuffer;\n}\n\nOIT.prototype.executeCommands = function (scene, executeFunction, passState, commands, invertClassification) {\n  if (this._translucentMRTSupport) {\n    executeTranslucentCommandsSortedMRT(this, scene, executeFunction, passState, commands, invertClassification);\n    return;\n  }\n\n  executeTranslucentCommandsSortedMultipass(this, scene, executeFunction, passState, commands, invertClassification);\n};\n\nOIT.prototype.execute = function (context, passState) {\n  this._compositeCommand.execute(context, passState);\n};\n\nOIT.prototype.clear = function (context, passState, clearColor) {\n  var framebuffer = passState.framebuffer;\n  passState.framebuffer = this._opaqueFBO;\n  Color.clone(clearColor, this._opaqueClearCommand.color);\n\n  this._opaqueClearCommand.execute(context, passState);\n\n  passState.framebuffer = this._translucentFBO;\n  var translucentClearCommand = this._translucentMRTSupport ? this._translucentMRTClearCommand : this._translucentMultipassClearCommand;\n  translucentClearCommand.execute(context, passState);\n\n  if (this._translucentMultipassSupport) {\n    passState.framebuffer = this._alphaFBO;\n\n    this._alphaClearCommand.execute(context, passState);\n  }\n\n  passState.framebuffer = framebuffer;\n};\n\nOIT.prototype.isSupported = function () {\n  return this._translucentMRTSupport || this._translucentMultipassSupport;\n};\n\nOIT.prototype.isDestroyed = function () {\n  return false;\n};\n\nOIT.prototype.destroy = function () {\n  destroyResources(this);\n\n  if (defined(this._compositeCommand)) {\n    this._compositeCommand.shaderProgram = this._compositeCommand.shaderProgram && this._compositeCommand.shaderProgram.destroy();\n  }\n\n  if (defined(this._adjustTranslucentCommand)) {\n    this._adjustTranslucentCommand.shaderProgram = this._adjustTranslucentCommand.shaderProgram && this._adjustTranslucentCommand.shaderProgram.destroy();\n  }\n\n  if (defined(this._adjustAlphaCommand)) {\n    this._adjustAlphaCommand.shaderProgram = this._adjustAlphaCommand.shaderProgram && this._adjustAlphaCommand.shaderProgram.destroy();\n  }\n\n  return destroyObject(this);\n};\n\nexport default OIT;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/OIT.js"],"names":["BoundingRectangle","Color","defined","destroyObject","PixelFormat","WebGLConstants","ClearCommand","DrawCommand","Framebuffer","PixelDatatype","RenderState","ShaderSource","Texture","AdjustTranslucentFS","CompositeOITFS","BlendEquation","BlendFunction","OIT","context","_translucentMultipassSupport","_translucentMRTSupport","extensionsSupported","colorBufferFloat","depthTexture","drawBuffers","_opaqueFBO","undefined","_opaqueTexture","_depthStencilTexture","_accumulationTexture","_translucentFBO","_alphaFBO","_adjustTranslucentFBO","_adjustAlphaFBO","_opaqueClearCommand","color","owner","_translucentMRTClearCommand","_translucentMultipassClearCommand","_alphaClearCommand","_translucentRenderStateCache","_alphaRenderStateCache","_compositeCommand","_adjustTranslucentCommand","_adjustAlphaCommand","_viewport","_rs","_useScissorTest","_scissorRectangle","_useHDR","destroyTextures","oit","isDestroyed","destroy","_revealageTexture","destroyFramebuffers","destroyResources","updateTextures","width","height","pixelFormat","RGBA","pixelDatatype","FLOAT","source","Float32Array","arrayBufferView","flipY","updateFramebuffers","completeFBO","FRAMEBUFFER_COMPLETE","supported","colorTextures","depthStencilTexture","destroyAttachments","status","translucentComplete","alphaComplete","adjustTranslucentComplete","adjustAlphaComplete","prototype","update","passState","framebuffer","useHDR","isSupported","getColorTexture","accumulationTexture","textureChanged","that","fs","uniformMap","sources","defines","push","u_opaque","u_accumulation","u_revealage","createViewportQuadCommand","u_bgColor","u_depthTexture","useScissorTest","equals","viewport","updateScissor","clone","fromCache","scissorTest","enabled","rectangle","renderState","translucentMRTBlend","equationRgb","ADD","equationAlpha","functionSourceRgb","ONE","functionDestinationRgb","functionSourceAlpha","ZERO","functionDestinationAlpha","ONE_MINUS_SOURCE_ALPHA","translucentColorBlend","translucentAlphaBlend","getTranslucentRenderState","translucentBlending","cache","translucentState","id","rs","getState","depthMask","blending","getTranslucentMRTRenderState","getTranslucentColorRenderState","getTranslucentAlphaRenderState","mrtShaderSource","colorShaderSource","alphaShaderSource","getTranslucentShaderProgram","shaderProgram","keyword","shader","shaderCache","getDerivedShaderProgram","attributeLocations","_attributeLocations","fragmentShaderSource","map","replaceMain","replace","splice","indexOf","createDerivedShaderProgram","vertexShaderSource","getTranslucentMRTShaderProgram","getTranslucentColorShaderProgram","getTranslucentAlphaShaderProgram","createDerivedCommands","command","result","translucentShader","translucentRenderState","translucentCommand","shallowClone","shaderProgramId","colorShader","colorRenderState","alphaShader","alphaRenderState","alphaCommand","executeTranslucentCommandsSortedMultipass","scene","executeFunction","commands","invertClassification","derivedCommand","j","useLogDepth","frameState","useHdr","_hdr","length","lightShadowsEnabled","shadowState","execute","debugFramebuffer","derivedCommands","logDepth","hdr","receiveShadows","shadows","unclassifiedCommand","executeTranslucentCommandsSortedMRT","executeCommands","clear","clearColor","translucentClearCommand"],"mappings":"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","sourcesContent":["import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport WebGLConstants from \"../Core/WebGLConstants.js\";\nimport ClearCommand from \"../Renderer/ClearCommand.js\";\nimport DrawCommand from \"../Renderer/DrawCommand.js\";\nimport Framebuffer from \"../Renderer/Framebuffer.js\";\nimport PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport Texture from \"../Renderer/Texture.js\";\nimport AdjustTranslucentFS from \"../Shaders/AdjustTranslucentFS.js\";\nimport CompositeOITFS from \"../Shaders/CompositeOITFS.js\";\nimport BlendEquation from \"./BlendEquation.js\";\nimport BlendFunction from \"./BlendFunction.js\";\n\n/**\n * @private\n */\nfunction OIT(context) {\n  // We support multipass for the Chrome D3D9 backend and ES 2.0 on mobile.\n  this._translucentMultipassSupport = false;\n  this._translucentMRTSupport = false;\n\n  var extensionsSupported = context.colorBufferFloat && context.depthTexture;\n  this._translucentMRTSupport = context.drawBuffers && extensionsSupported;\n  this._translucentMultipassSupport =\n    !this._translucentMRTSupport && extensionsSupported;\n\n  this._opaqueFBO = undefined;\n  this._opaqueTexture = undefined;\n  this._depthStencilTexture = undefined;\n\n  this._accumulationTexture = undefined;\n\n  this._translucentFBO = undefined;\n  this._alphaFBO = undefined;\n\n  this._adjustTranslucentFBO = undefined;\n  this._adjustAlphaFBO = undefined;\n\n  this._opaqueClearCommand = new ClearCommand({\n    color: new Color(0.0, 0.0, 0.0, 0.0),\n    owner: this,\n  });\n  this._translucentMRTClearCommand = new ClearCommand({\n    color: new Color(0.0, 0.0, 0.0, 1.0),\n    owner: this,\n  });\n  this._translucentMultipassClearCommand = new ClearCommand({\n    color: new Color(0.0, 0.0, 0.0, 0.0),\n    owner: this,\n  });\n  this._alphaClearCommand = new ClearCommand({\n    color: new Color(1.0, 1.0, 1.0, 1.0),\n    owner: this,\n  });\n\n  this._translucentRenderStateCache = {};\n  this._alphaRenderStateCache = {};\n\n  this._compositeCommand = undefined;\n  this._adjustTranslucentCommand = undefined;\n  this._adjustAlphaCommand = undefined;\n\n  this._viewport = new BoundingRectangle();\n  this._rs = undefined;\n\n  this._useScissorTest = false;\n  this._scissorRectangle = undefined;\n\n  this._useHDR = false;\n}\n\nfunction destroyTextures(oit) {\n  oit._accumulationTexture =\n    oit._accumulationTexture &&\n    !oit._accumulationTexture.isDestroyed() &&\n    oit._accumulationTexture.destroy();\n  oit._revealageTexture =\n    oit._revealageTexture &&\n    !oit._revealageTexture.isDestroyed() &&\n    oit._revealageTexture.destroy();\n}\n\nfunction destroyFramebuffers(oit) {\n  oit._translucentFBO =\n    oit._translucentFBO &&\n    !oit._translucentFBO.isDestroyed() &&\n    oit._translucentFBO.destroy();\n  oit._alphaFBO =\n    oit._alphaFBO && !oit._alphaFBO.isDestroyed() && oit._alphaFBO.destroy();\n  oit._adjustTranslucentFBO =\n    oit._adjustTranslucentFBO &&\n    !oit._adjustTranslucentFBO.isDestroyed() &&\n    oit._adjustTranslucentFBO.destroy();\n  oit._adjustAlphaFBO =\n    oit._adjustAlphaFBO &&\n    !oit._adjustAlphaFBO.isDestroyed() &&\n    oit._adjustAlphaFBO.destroy();\n}\n\nfunction destroyResources(oit) {\n  destroyTextures(oit);\n  destroyFramebuffers(oit);\n}\n\nfunction updateTextures(oit, context, width, height) {\n  destroyTextures(oit);\n\n  oit._accumulationTexture = new Texture({\n    context: context,\n    width: width,\n    height: height,\n    pixelFormat: PixelFormat.RGBA,\n    pixelDatatype: PixelDatatype.FLOAT,\n  });\n\n  // Use zeroed arraybuffer instead of null to initialize texture\n  // to workaround Firefox. Only needed for the second color attachment.\n  var source = new Float32Array(width * height * 4);\n  oit._revealageTexture = new Texture({\n    context: context,\n    pixelFormat: PixelFormat.RGBA,\n    pixelDatatype: PixelDatatype.FLOAT,\n    source: {\n      arrayBufferView: source,\n      width: width,\n      height: height,\n    },\n    flipY: false,\n  });\n}\n\nfunction updateFramebuffers(oit, context) {\n  destroyFramebuffers(oit);\n\n  var completeFBO = WebGLConstants.FRAMEBUFFER_COMPLETE;\n  var supported = true;\n\n  // if MRT is supported, attempt to make an FBO with multiple color attachments\n  if (oit._translucentMRTSupport) {\n    oit._translucentFBO = new Framebuffer({\n      context: context,\n      colorTextures: [oit._accumulationTexture, oit._revealageTexture],\n      depthStencilTexture: oit._depthStencilTexture,\n      destroyAttachments: false,\n    });\n    oit._adjustTranslucentFBO = new Framebuffer({\n      context: context,\n      colorTextures: [oit._accumulationTexture, oit._revealageTexture],\n      destroyAttachments: false,\n    });\n\n    if (\n      oit._translucentFBO.status !== completeFBO ||\n      oit._adjustTranslucentFBO.status !== completeFBO\n    ) {\n      destroyFramebuffers(oit);\n      oit._translucentMRTSupport = false;\n    }\n  }\n\n  // either MRT isn't supported or FBO creation failed, attempt multipass\n  if (!oit._translucentMRTSupport) {\n    oit._translucentFBO = new Framebuffer({\n      context: context,\n      colorTextures: [oit._accumulationTexture],\n      depthStencilTexture: oit._depthStencilTexture,\n      destroyAttachments: false,\n    });\n    oit._alphaFBO = new Framebuffer({\n      context: context,\n      colorTextures: [oit._revealageTexture],\n      depthStencilTexture: oit._depthStencilTexture,\n      destroyAttachments: false,\n    });\n    oit._adjustTranslucentFBO = new Framebuffer({\n      context: context,\n      colorTextures: [oit._accumulationTexture],\n      destroyAttachments: false,\n    });\n    oit._adjustAlphaFBO = new Framebuffer({\n      context: context,\n      colorTextures: [oit._revealageTexture],\n      destroyAttachments: false,\n    });\n\n    var translucentComplete = oit._translucentFBO.status === completeFBO;\n    var alphaComplete = oit._alphaFBO.status === completeFBO;\n    var adjustTranslucentComplete =\n      oit._adjustTranslucentFBO.status === completeFBO;\n    var adjustAlphaComplete = oit._adjustAlphaFBO.status === completeFBO;\n    if (\n      !translucentComplete ||\n      !alphaComplete ||\n      !adjustTranslucentComplete ||\n      !adjustAlphaComplete\n    ) {\n      destroyResources(oit);\n      oit._translucentMultipassSupport = false;\n      supported = false;\n    }\n  }\n\n  return supported;\n}\n\nOIT.prototype.update = function (context, passState, framebuffer, useHDR) {\n  if (!this.isSupported()) {\n    return;\n  }\n\n  this._opaqueFBO = framebuffer;\n  this._opaqueTexture = framebuffer.getColorTexture(0);\n  this._depthStencilTexture = framebuffer.depthStencilTexture;\n\n  var width = this._opaqueTexture.width;\n  var height = this._opaqueTexture.height;\n\n  var accumulationTexture = this._accumulationTexture;\n  var textureChanged =\n    !defined(accumulationTexture) ||\n    accumulationTexture.width !== width ||\n    accumulationTexture.height !== height ||\n    useHDR !== this._useHDR;\n  if (textureChanged) {\n    updateTextures(this, context, width, height);\n  }\n\n  if (!defined(this._translucentFBO) || textureChanged) {\n    if (!updateFramebuffers(this, context)) {\n      // framebuffer creation failed\n      return;\n    }\n  }\n\n  this._useHDR = useHDR;\n\n  var that = this;\n  var fs;\n  var uniformMap;\n\n  if (!defined(this._compositeCommand)) {\n    fs = new ShaderSource({\n      sources: [CompositeOITFS],\n    });\n    if (this._translucentMRTSupport) {\n      fs.defines.push(\"MRT\");\n    }\n\n    uniformMap = {\n      u_opaque: function () {\n        return that._opaqueTexture;\n      },\n      u_accumulation: function () {\n        return that._accumulationTexture;\n      },\n      u_revealage: function () {\n        return that._revealageTexture;\n      },\n    };\n    this._compositeCommand = context.createViewportQuadCommand(fs, {\n      uniformMap: uniformMap,\n      owner: this,\n    });\n  }\n\n  if (!defined(this._adjustTranslucentCommand)) {\n    if (this._translucentMRTSupport) {\n      fs = new ShaderSource({\n        defines: [\"MRT\"],\n        sources: [AdjustTranslucentFS],\n      });\n\n      uniformMap = {\n        u_bgColor: function () {\n          return that._translucentMRTClearCommand.color;\n        },\n        u_depthTexture: function () {\n          return that._depthStencilTexture;\n        },\n      };\n\n      this._adjustTranslucentCommand = context.createViewportQuadCommand(fs, {\n        uniformMap: uniformMap,\n        owner: this,\n      });\n    } else if (this._translucentMultipassSupport) {\n      fs = new ShaderSource({\n        sources: [AdjustTranslucentFS],\n      });\n\n      uniformMap = {\n        u_bgColor: function () {\n          return that._translucentMultipassClearCommand.color;\n        },\n        u_depthTexture: function () {\n          return that._depthStencilTexture;\n        },\n      };\n\n      this._adjustTranslucentCommand = context.createViewportQuadCommand(fs, {\n        uniformMap: uniformMap,\n        owner: this,\n      });\n\n      uniformMap = {\n        u_bgColor: function () {\n          return that._alphaClearCommand.color;\n        },\n        u_depthTexture: function () {\n          return that._depthStencilTexture;\n        },\n      };\n\n      this._adjustAlphaCommand = context.createViewportQuadCommand(fs, {\n        uniformMap: uniformMap,\n        owner: this,\n      });\n    }\n  }\n\n  this._viewport.width = width;\n  this._viewport.height = height;\n\n  var useScissorTest = !BoundingRectangle.equals(\n    this._viewport,\n    passState.viewport\n  );\n  var updateScissor = useScissorTest !== this._useScissorTest;\n  this._useScissorTest = useScissorTest;\n\n  if (!BoundingRectangle.equals(this._scissorRectangle, passState.viewport)) {\n    this._scissorRectangle = BoundingRectangle.clone(\n      passState.viewport,\n      this._scissorRectangle\n    );\n    updateScissor = true;\n  }\n\n  if (\n    !defined(this._rs) ||\n    !BoundingRectangle.equals(this._viewport, this._rs.viewport) ||\n    updateScissor\n  ) {\n    this._rs = RenderState.fromCache({\n      viewport: this._viewport,\n      scissorTest: {\n        enabled: this._useScissorTest,\n        rectangle: this._scissorRectangle,\n      },\n    });\n  }\n\n  if (defined(this._compositeCommand)) {\n    this._compositeCommand.renderState = this._rs;\n  }\n\n  if (this._adjustTranslucentCommand) {\n    this._adjustTranslucentCommand.renderState = this._rs;\n  }\n\n  if (defined(this._adjustAlphaCommand)) {\n    this._adjustAlphaCommand.renderState = this._rs;\n  }\n};\n\nvar translucentMRTBlend = {\n  enabled: true,\n  color: new Color(0.0, 0.0, 0.0, 0.0),\n  equationRgb: BlendEquation.ADD,\n  equationAlpha: BlendEquation.ADD,\n  functionSourceRgb: BlendFunction.ONE,\n  functionDestinationRgb: BlendFunction.ONE,\n  functionSourceAlpha: BlendFunction.ZERO,\n  functionDestinationAlpha: BlendFunction.ONE_MINUS_SOURCE_ALPHA,\n};\n\nvar translucentColorBlend = {\n  enabled: true,\n  color: new Color(0.0, 0.0, 0.0, 0.0),\n  equationRgb: BlendEquation.ADD,\n  equationAlpha: BlendEquation.ADD,\n  functionSourceRgb: BlendFunction.ONE,\n  functionDestinationRgb: BlendFunction.ONE,\n  functionSourceAlpha: BlendFunction.ONE,\n  functionDestinationAlpha: BlendFunction.ONE,\n};\n\nvar translucentAlphaBlend = {\n  enabled: true,\n  color: new Color(0.0, 0.0, 0.0, 0.0),\n  equationRgb: BlendEquation.ADD,\n  equationAlpha: BlendEquation.ADD,\n  functionSourceRgb: BlendFunction.ZERO,\n  functionDestinationRgb: BlendFunction.ONE_MINUS_SOURCE_ALPHA,\n  functionSourceAlpha: BlendFunction.ZERO,\n  functionDestinationAlpha: BlendFunction.ONE_MINUS_SOURCE_ALPHA,\n};\n\nfunction getTranslucentRenderState(\n  context,\n  translucentBlending,\n  cache,\n  renderState\n) {\n  var translucentState = cache[renderState.id];\n  if (!defined(translucentState)) {\n    var rs = RenderState.getState(renderState);\n    rs.depthMask = false;\n    rs.blending = translucentBlending;\n\n    translucentState = RenderState.fromCache(rs);\n    cache[renderState.id] = translucentState;\n  }\n\n  return translucentState;\n}\n\nfunction getTranslucentMRTRenderState(oit, context, renderState) {\n  return getTranslucentRenderState(\n    context,\n    translucentMRTBlend,\n    oit._translucentRenderStateCache,\n    renderState\n  );\n}\n\nfunction getTranslucentColorRenderState(oit, context, renderState) {\n  return getTranslucentRenderState(\n    context,\n    translucentColorBlend,\n    oit._translucentRenderStateCache,\n    renderState\n  );\n}\n\nfunction getTranslucentAlphaRenderState(oit, context, renderState) {\n  return getTranslucentRenderState(\n    context,\n    translucentAlphaBlend,\n    oit._alphaRenderStateCache,\n    renderState\n  );\n}\n\nvar mrtShaderSource =\n  \"    vec3 Ci = czm_gl_FragColor.rgb * czm_gl_FragColor.a;\\n\" +\n  \"    float ai = czm_gl_FragColor.a;\\n\" +\n  \"    float wzi = czm_alphaWeight(ai);\\n\" +\n  \"    gl_FragData[0] = vec4(Ci * wzi, ai);\\n\" +\n  \"    gl_FragData[1] = vec4(ai * wzi);\\n\";\n\nvar colorShaderSource =\n  \"    vec3 Ci = czm_gl_FragColor.rgb * czm_gl_FragColor.a;\\n\" +\n  \"    float ai = czm_gl_FragColor.a;\\n\" +\n  \"    float wzi = czm_alphaWeight(ai);\\n\" +\n  \"    gl_FragColor = vec4(Ci, ai) * wzi;\\n\";\n\nvar alphaShaderSource =\n  \"    float ai = czm_gl_FragColor.a;\\n\" + \"    gl_FragColor = vec4(ai);\\n\";\n\nfunction getTranslucentShaderProgram(context, shaderProgram, keyword, source) {\n  var shader = context.shaderCache.getDerivedShaderProgram(\n    shaderProgram,\n    keyword\n  );\n  if (!defined(shader)) {\n    var attributeLocations = shaderProgram._attributeLocations;\n\n    var fs = shaderProgram.fragmentShaderSource.clone();\n\n    fs.sources = fs.sources.map(function (source) {\n      source = ShaderSource.replaceMain(source, \"czm_translucent_main\");\n      source = source.replace(/gl_FragColor/g, \"czm_gl_FragColor\");\n      source = source.replace(/\\bdiscard\\b/g, \"czm_discard = true\");\n      source = source.replace(/czm_phong/g, \"czm_translucentPhong\");\n      return source;\n    });\n\n    // Discarding the fragment in main is a workaround for ANGLE D3D9\n    // shader compilation errors.\n\n    fs.sources.splice(\n      0,\n      0,\n      (source.indexOf(\"gl_FragData\") !== -1\n        ? \"#extension GL_EXT_draw_buffers : enable \\n\"\n        : \"\") +\n        \"vec4 czm_gl_FragColor;\\n\" +\n        \"bool czm_discard = false;\\n\"\n    );\n\n    fs.sources.push(\n      \"void main()\\n\" +\n        \"{\\n\" +\n        \"    czm_translucent_main();\\n\" +\n        \"    if (czm_discard)\\n\" +\n        \"    {\\n\" +\n        \"        discard;\\n\" +\n        \"    }\\n\" +\n        source +\n        \"}\\n\"\n    );\n\n    shader = context.shaderCache.createDerivedShaderProgram(\n      shaderProgram,\n      keyword,\n      {\n        vertexShaderSource: shaderProgram.vertexShaderSource,\n        fragmentShaderSource: fs,\n        attributeLocations: attributeLocations,\n      }\n    );\n  }\n\n  return shader;\n}\n\nfunction getTranslucentMRTShaderProgram(context, shaderProgram) {\n  return getTranslucentShaderProgram(\n    context,\n    shaderProgram,\n    \"translucentMRT\",\n    mrtShaderSource\n  );\n}\n\nfunction getTranslucentColorShaderProgram(context, shaderProgram) {\n  return getTranslucentShaderProgram(\n    context,\n    shaderProgram,\n    \"translucentMultipass\",\n    colorShaderSource\n  );\n}\n\nfunction getTranslucentAlphaShaderProgram(context, shaderProgram) {\n  return getTranslucentShaderProgram(\n    context,\n    shaderProgram,\n    \"alphaMultipass\",\n    alphaShaderSource\n  );\n}\n\nOIT.prototype.createDerivedCommands = function (command, context, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n\n  if (this._translucentMRTSupport) {\n    var translucentShader;\n    var translucentRenderState;\n    if (defined(result.translucentCommand)) {\n      translucentShader = result.translucentCommand.shaderProgram;\n      translucentRenderState = result.translucentCommand.renderState;\n    }\n\n    result.translucentCommand = DrawCommand.shallowClone(\n      command,\n      result.translucentCommand\n    );\n\n    if (\n      !defined(translucentShader) ||\n      result.shaderProgramId !== command.shaderProgram.id\n    ) {\n      result.translucentCommand.shaderProgram = getTranslucentMRTShaderProgram(\n        context,\n        command.shaderProgram\n      );\n      result.translucentCommand.renderState = getTranslucentMRTRenderState(\n        this,\n        context,\n        command.renderState\n      );\n      result.shaderProgramId = command.shaderProgram.id;\n    } else {\n      result.translucentCommand.shaderProgram = translucentShader;\n      result.translucentCommand.renderState = translucentRenderState;\n    }\n  } else {\n    var colorShader;\n    var colorRenderState;\n    var alphaShader;\n    var alphaRenderState;\n    if (defined(result.translucentCommand)) {\n      colorShader = result.translucentCommand.shaderProgram;\n      colorRenderState = result.translucentCommand.renderState;\n      alphaShader = result.alphaCommand.shaderProgram;\n      alphaRenderState = result.alphaCommand.renderState;\n    }\n\n    result.translucentCommand = DrawCommand.shallowClone(\n      command,\n      result.translucentCommand\n    );\n    result.alphaCommand = DrawCommand.shallowClone(\n      command,\n      result.alphaCommand\n    );\n\n    if (\n      !defined(colorShader) ||\n      result.shaderProgramId !== command.shaderProgram.id\n    ) {\n      result.translucentCommand.shaderProgram = getTranslucentColorShaderProgram(\n        context,\n        command.shaderProgram\n      );\n      result.translucentCommand.renderState = getTranslucentColorRenderState(\n        this,\n        context,\n        command.renderState\n      );\n      result.alphaCommand.shaderProgram = getTranslucentAlphaShaderProgram(\n        context,\n        command.shaderProgram\n      );\n      result.alphaCommand.renderState = getTranslucentAlphaRenderState(\n        this,\n        context,\n        command.renderState\n      );\n      result.shaderProgramId = command.shaderProgram.id;\n    } else {\n      result.translucentCommand.shaderProgram = colorShader;\n      result.translucentCommand.renderState = colorRenderState;\n      result.alphaCommand.shaderProgram = alphaShader;\n      result.alphaCommand.renderState = alphaRenderState;\n    }\n  }\n\n  return result;\n};\n\nfunction executeTranslucentCommandsSortedMultipass(\n  oit,\n  scene,\n  executeFunction,\n  passState,\n  commands,\n  invertClassification\n) {\n  var command;\n  var derivedCommand;\n  var j;\n\n  var context = scene.context;\n  var useLogDepth = scene.frameState.useLogDepth;\n  var useHdr = scene._hdr;\n  var framebuffer = passState.framebuffer;\n  var length = commands.length;\n\n  var lightShadowsEnabled = scene.frameState.shadowState.lightShadowsEnabled;\n\n  passState.framebuffer = oit._adjustTranslucentFBO;\n  oit._adjustTranslucentCommand.execute(context, passState);\n  passState.framebuffer = oit._adjustAlphaFBO;\n  oit._adjustAlphaCommand.execute(context, passState);\n\n  var debugFramebuffer = oit._opaqueFBO;\n  passState.framebuffer = oit._translucentFBO;\n\n  for (j = 0; j < length; ++j) {\n    command = commands[j];\n    command = useLogDepth ? command.derivedCommands.logDepth.command : command;\n    command = useHdr ? command.derivedCommands.hdr.command : command;\n    derivedCommand =\n      lightShadowsEnabled && command.receiveShadows\n        ? command.derivedCommands.oit.shadows.translucentCommand\n        : command.derivedCommands.oit.translucentCommand;\n    executeFunction(\n      derivedCommand,\n      scene,\n      context,\n      passState,\n      debugFramebuffer\n    );\n  }\n\n  if (defined(invertClassification)) {\n    command = invertClassification.unclassifiedCommand;\n    derivedCommand =\n      lightShadowsEnabled && command.receiveShadows\n        ? command.derivedCommands.oit.shadows.translucentCommand\n        : command.derivedCommands.oit.translucentCommand;\n    executeFunction(\n      derivedCommand,\n      scene,\n      context,\n      passState,\n      debugFramebuffer\n    );\n  }\n\n  passState.framebuffer = oit._alphaFBO;\n\n  for (j = 0; j < length; ++j) {\n    command = commands[j];\n    command = useLogDepth ? command.derivedCommands.logDepth.command : command;\n    command = useHdr ? command.derivedCommands.hdr.command : command;\n    derivedCommand =\n      lightShadowsEnabled && command.receiveShadows\n        ? command.derivedCommands.oit.shadows.alphaCommand\n        : command.derivedCommands.oit.alphaCommand;\n    executeFunction(\n      derivedCommand,\n      scene,\n      context,\n      passState,\n      debugFramebuffer\n    );\n  }\n\n  if (defined(invertClassification)) {\n    command = invertClassification.unclassifiedCommand;\n    derivedCommand =\n      lightShadowsEnabled && command.receiveShadows\n        ? command.derivedCommands.oit.shadows.alphaCommand\n        : command.derivedCommands.oit.alphaCommand;\n    executeFunction(\n      derivedCommand,\n      scene,\n      context,\n      passState,\n      debugFramebuffer\n    );\n  }\n\n  passState.framebuffer = framebuffer;\n}\n\nfunction executeTranslucentCommandsSortedMRT(\n  oit,\n  scene,\n  executeFunction,\n  passState,\n  commands,\n  invertClassification\n) {\n  var context = scene.context;\n  var useLogDepth = scene.frameState.useLogDepth;\n  var useHdr = scene._hdr;\n  var framebuffer = passState.framebuffer;\n  var length = commands.length;\n\n  var lightShadowsEnabled = scene.frameState.shadowState.lightShadowsEnabled;\n\n  passState.framebuffer = oit._adjustTranslucentFBO;\n  oit._adjustTranslucentCommand.execute(context, passState);\n\n  var debugFramebuffer = oit._opaqueFBO;\n  passState.framebuffer = oit._translucentFBO;\n\n  var command;\n  var derivedCommand;\n\n  for (var j = 0; j < length; ++j) {\n    command = commands[j];\n    command = useLogDepth ? command.derivedCommands.logDepth.command : command;\n    command = useHdr ? command.derivedCommands.hdr.command : command;\n    derivedCommand =\n      lightShadowsEnabled && command.receiveShadows\n        ? command.derivedCommands.oit.shadows.translucentCommand\n        : command.derivedCommands.oit.translucentCommand;\n    executeFunction(\n      derivedCommand,\n      scene,\n      context,\n      passState,\n      debugFramebuffer\n    );\n  }\n\n  if (defined(invertClassification)) {\n    command = invertClassification.unclassifiedCommand;\n    derivedCommand =\n      lightShadowsEnabled && command.receiveShadows\n        ? command.derivedCommands.oit.shadows.translucentCommand\n        : command.derivedCommands.oit.translucentCommand;\n    executeFunction(\n      derivedCommand,\n      scene,\n      context,\n      passState,\n      debugFramebuffer\n    );\n  }\n\n  passState.framebuffer = framebuffer;\n}\n\nOIT.prototype.executeCommands = function (\n  scene,\n  executeFunction,\n  passState,\n  commands,\n  invertClassification\n) {\n  if (this._translucentMRTSupport) {\n    executeTranslucentCommandsSortedMRT(\n      this,\n      scene,\n      executeFunction,\n      passState,\n      commands,\n      invertClassification\n    );\n    return;\n  }\n\n  executeTranslucentCommandsSortedMultipass(\n    this,\n    scene,\n    executeFunction,\n    passState,\n    commands,\n    invertClassification\n  );\n};\n\nOIT.prototype.execute = function (context, passState) {\n  this._compositeCommand.execute(context, passState);\n};\n\nOIT.prototype.clear = function (context, passState, clearColor) {\n  var framebuffer = passState.framebuffer;\n\n  passState.framebuffer = this._opaqueFBO;\n  Color.clone(clearColor, this._opaqueClearCommand.color);\n  this._opaqueClearCommand.execute(context, passState);\n\n  passState.framebuffer = this._translucentFBO;\n  var translucentClearCommand = this._translucentMRTSupport\n    ? this._translucentMRTClearCommand\n    : this._translucentMultipassClearCommand;\n  translucentClearCommand.execute(context, passState);\n\n  if (this._translucentMultipassSupport) {\n    passState.framebuffer = this._alphaFBO;\n    this._alphaClearCommand.execute(context, passState);\n  }\n\n  passState.framebuffer = framebuffer;\n};\n\nOIT.prototype.isSupported = function () {\n  return this._translucentMRTSupport || this._translucentMultipassSupport;\n};\n\nOIT.prototype.isDestroyed = function () {\n  return false;\n};\n\nOIT.prototype.destroy = function () {\n  destroyResources(this);\n\n  if (defined(this._compositeCommand)) {\n    this._compositeCommand.shaderProgram =\n      this._compositeCommand.shaderProgram &&\n      this._compositeCommand.shaderProgram.destroy();\n  }\n\n  if (defined(this._adjustTranslucentCommand)) {\n    this._adjustTranslucentCommand.shaderProgram =\n      this._adjustTranslucentCommand.shaderProgram &&\n      this._adjustTranslucentCommand.shaderProgram.destroy();\n  }\n\n  if (defined(this._adjustAlphaCommand)) {\n    this._adjustAlphaCommand.shaderProgram =\n      this._adjustAlphaCommand.shaderProgram &&\n      this._adjustAlphaCommand.shaderProgram.destroy();\n  }\n\n  return destroyObject(this);\n};\nexport default OIT;\n"]},"metadata":{},"sourceType":"module"}