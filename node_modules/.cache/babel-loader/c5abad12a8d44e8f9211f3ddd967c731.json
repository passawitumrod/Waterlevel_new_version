{"ast":null,"code":"import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport Primitive from \"../Scene/Primitive.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\nvar colorScratch = new Color();\nvar distanceDisplayConditionScratch = new DistanceDisplayCondition();\nvar defaultDistanceDisplayCondition = new DistanceDisplayCondition();\nvar defaultOffset = Cartesian3.ZERO;\nvar offsetScratch = new Cartesian3();\n\nfunction Batch(primitives, translucent, width, shadows) {\n  this.translucent = translucent;\n  this.width = width;\n  this.shadows = shadows;\n  this.primitives = primitives;\n  this.createPrimitive = false;\n  this.waitingOnCreate = false;\n  this.primitive = undefined;\n  this.oldPrimitive = undefined;\n  this.geometry = new AssociativeArray();\n  this.updaters = new AssociativeArray();\n  this.updatersWithAttributes = new AssociativeArray();\n  this.attributes = new AssociativeArray();\n  this.itemsToRemove = [];\n  this.subscriptions = new AssociativeArray();\n  this.showsUpdated = new AssociativeArray();\n}\n\nBatch.prototype.add = function (updater, instance) {\n  var id = updater.id;\n  this.createPrimitive = true;\n  this.geometry.set(id, instance);\n  this.updaters.set(id, updater);\n\n  if (!updater.hasConstantOutline || !updater.outlineColorProperty.isConstant || !Property.isConstant(updater.distanceDisplayConditionProperty) || !Property.isConstant(updater.terrainOffsetProperty)) {\n    this.updatersWithAttributes.set(id, updater);\n  } else {\n    var that = this;\n    this.subscriptions.set(id, updater.entity.definitionChanged.addEventListener(function (entity, propertyName, newValue, oldValue) {\n      if (propertyName === \"isShowing\") {\n        that.showsUpdated.set(updater.id, updater);\n      }\n    }));\n  }\n};\n\nBatch.prototype.remove = function (updater) {\n  var id = updater.id;\n  this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n\n  if (this.updaters.remove(id)) {\n    this.updatersWithAttributes.remove(id);\n    var unsubscribe = this.subscriptions.get(id);\n\n    if (defined(unsubscribe)) {\n      unsubscribe();\n      this.subscriptions.remove(id);\n      this.showsUpdated.remove(id);\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nBatch.prototype.update = function (time) {\n  var isUpdated = true;\n  var removedCount = 0;\n  var primitive = this.primitive;\n  var primitives = this.primitives;\n  var i;\n\n  if (this.createPrimitive) {\n    var geometries = this.geometry.values;\n    var geometriesLength = geometries.length;\n\n    if (geometriesLength > 0) {\n      if (defined(primitive)) {\n        if (!defined(this.oldPrimitive)) {\n          this.oldPrimitive = primitive;\n        } else {\n          primitives.remove(primitive);\n        }\n      }\n\n      primitive = new Primitive({\n        show: false,\n        asynchronous: true,\n        geometryInstances: geometries.slice(),\n        appearance: new PerInstanceColorAppearance({\n          flat: true,\n          translucent: this.translucent,\n          renderState: {\n            lineWidth: this.width\n          }\n        }),\n        shadows: this.shadows\n      });\n      primitives.add(primitive);\n      isUpdated = false;\n    } else {\n      if (defined(primitive)) {\n        primitives.remove(primitive);\n        primitive = undefined;\n      }\n\n      var oldPrimitive = this.oldPrimitive;\n\n      if (defined(oldPrimitive)) {\n        primitives.remove(oldPrimitive);\n        this.oldPrimitive = undefined;\n      }\n    }\n\n    this.attributes.removeAll();\n    this.primitive = primitive;\n    this.createPrimitive = false;\n    this.waitingOnCreate = true;\n  } else if (defined(primitive) && primitive.ready) {\n    primitive.show = true;\n\n    if (defined(this.oldPrimitive)) {\n      primitives.remove(this.oldPrimitive);\n      this.oldPrimitive = undefined;\n    }\n\n    var updatersWithAttributes = this.updatersWithAttributes.values;\n    var length = updatersWithAttributes.length;\n    var waitingOnCreate = this.waitingOnCreate;\n\n    for (i = 0; i < length; i++) {\n      var updater = updatersWithAttributes[i];\n      var instance = this.geometry.get(updater.id);\n      var attributes = this.attributes.get(instance.id.id);\n\n      if (!defined(attributes)) {\n        attributes = primitive.getGeometryInstanceAttributes(instance.id);\n        this.attributes.set(instance.id.id, attributes);\n      }\n\n      if (!updater.outlineColorProperty.isConstant || waitingOnCreate) {\n        var outlineColorProperty = updater.outlineColorProperty;\n        var outlineColor = Property.getValueOrDefault(outlineColorProperty, time, Color.WHITE, colorScratch);\n\n        if (!Color.equals(attributes._lastColor, outlineColor)) {\n          attributes._lastColor = Color.clone(outlineColor, attributes._lastColor);\n          attributes.color = ColorGeometryInstanceAttribute.toValue(outlineColor, attributes.color);\n\n          if (this.translucent && attributes.color[3] === 255 || !this.translucent && attributes.color[3] !== 255) {\n            this.itemsToRemove[removedCount++] = updater;\n          }\n        }\n      }\n\n      var show = updater.entity.isShowing && (updater.hasConstantOutline || updater.isOutlineVisible(time));\n      var currentShow = attributes.show[0] === 1;\n\n      if (show !== currentShow) {\n        attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n      }\n\n      var distanceDisplayConditionProperty = updater.distanceDisplayConditionProperty;\n\n      if (!Property.isConstant(distanceDisplayConditionProperty)) {\n        var distanceDisplayCondition = Property.getValueOrDefault(distanceDisplayConditionProperty, time, defaultDistanceDisplayCondition, distanceDisplayConditionScratch);\n\n        if (!DistanceDisplayCondition.equals(distanceDisplayCondition, attributes._lastDistanceDisplayCondition)) {\n          attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition, attributes._lastDistanceDisplayCondition);\n          attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n        }\n      }\n\n      var offsetProperty = updater.terrainOffsetProperty;\n\n      if (!Property.isConstant(offsetProperty)) {\n        var offset = Property.getValueOrDefault(offsetProperty, time, defaultOffset, offsetScratch);\n\n        if (!Cartesian3.equals(offset, attributes._lastOffset)) {\n          attributes._lastOffset = Cartesian3.clone(offset, attributes._lastOffset);\n          attributes.offset = OffsetGeometryInstanceAttribute.toValue(offset, attributes.offset);\n        }\n      }\n    }\n\n    this.updateShows(primitive);\n    this.waitingOnCreate = false;\n  } else if (defined(primitive) && !primitive.ready) {\n    isUpdated = false;\n  }\n\n  this.itemsToRemove.length = removedCount;\n  return isUpdated;\n};\n\nBatch.prototype.updateShows = function (primitive) {\n  var showsUpdated = this.showsUpdated.values;\n  var length = showsUpdated.length;\n\n  for (var i = 0; i < length; i++) {\n    var updater = showsUpdated[i];\n    var instance = this.geometry.get(updater.id);\n    var attributes = this.attributes.get(instance.id.id);\n\n    if (!defined(attributes)) {\n      attributes = primitive.getGeometryInstanceAttributes(instance.id);\n      this.attributes.set(instance.id.id, attributes);\n    }\n\n    var show = updater.entity.isShowing;\n    var currentShow = attributes.show[0] === 1;\n\n    if (show !== currentShow) {\n      attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n      instance.attributes.show.value[0] = attributes.show[0];\n    }\n  }\n\n  this.showsUpdated.removeAll();\n};\n\nBatch.prototype.contains = function (updater) {\n  return this.updaters.contains(updater.id);\n};\n\nBatch.prototype.getBoundingSphere = function (updater, result) {\n  var primitive = this.primitive;\n\n  if (!primitive.ready) {\n    return BoundingSphereState.PENDING;\n  }\n\n  var attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n\n  if (!defined(attributes) || !defined(attributes.boundingSphere) || //\n  defined(attributes.show) && attributes.show[0] === 0) {\n    return BoundingSphereState.FAILED;\n  }\n\n  attributes.boundingSphere.clone(result);\n  return BoundingSphereState.DONE;\n};\n\nBatch.prototype.removeAllPrimitives = function () {\n  var primitives = this.primitives;\n  var primitive = this.primitive;\n\n  if (defined(primitive)) {\n    primitives.remove(primitive);\n    this.primitive = undefined;\n    this.geometry.removeAll();\n    this.updaters.removeAll();\n  }\n\n  var oldPrimitive = this.oldPrimitive;\n\n  if (defined(oldPrimitive)) {\n    primitives.remove(oldPrimitive);\n    this.oldPrimitive = undefined;\n  }\n};\n/**\n * @private\n */\n\n\nfunction StaticOutlineGeometryBatch(primitives, scene, shadows) {\n  this._primitives = primitives;\n  this._scene = scene;\n  this._shadows = shadows;\n  this._solidBatches = new AssociativeArray();\n  this._translucentBatches = new AssociativeArray();\n}\n\nStaticOutlineGeometryBatch.prototype.add = function (time, updater) {\n  var instance = updater.createOutlineGeometryInstance(time);\n\n  var width = this._scene.clampLineWidth(updater.outlineWidth);\n\n  var batches;\n  var batch;\n\n  if (instance.attributes.color.value[3] === 255) {\n    batches = this._solidBatches;\n    batch = batches.get(width);\n\n    if (!defined(batch)) {\n      batch = new Batch(this._primitives, false, width, this._shadows);\n      batches.set(width, batch);\n    }\n\n    batch.add(updater, instance);\n  } else {\n    batches = this._translucentBatches;\n    batch = batches.get(width);\n\n    if (!defined(batch)) {\n      batch = new Batch(this._primitives, true, width, this._shadows);\n      batches.set(width, batch);\n    }\n\n    batch.add(updater, instance);\n  }\n};\n\nStaticOutlineGeometryBatch.prototype.remove = function (updater) {\n  var i;\n  var solidBatches = this._solidBatches.values;\n  var solidBatchesLength = solidBatches.length;\n\n  for (i = 0; i < solidBatchesLength; i++) {\n    if (solidBatches[i].remove(updater)) {\n      return;\n    }\n  }\n\n  var translucentBatches = this._translucentBatches.values;\n  var translucentBatchesLength = translucentBatches.length;\n\n  for (i = 0; i < translucentBatchesLength; i++) {\n    if (translucentBatches[i].remove(updater)) {\n      return;\n    }\n  }\n};\n\nStaticOutlineGeometryBatch.prototype.update = function (time) {\n  var i;\n  var x;\n  var updater;\n  var batch;\n  var solidBatches = this._solidBatches.values;\n  var solidBatchesLength = solidBatches.length;\n  var translucentBatches = this._translucentBatches.values;\n  var translucentBatchesLength = translucentBatches.length;\n  var itemsToRemove;\n  var isUpdated = true;\n  var needUpdate = false;\n\n  do {\n    needUpdate = false;\n\n    for (x = 0; x < solidBatchesLength; x++) {\n      batch = solidBatches[x]; //Perform initial update\n\n      isUpdated = batch.update(time); //If any items swapped between solid/translucent, we need to\n      //move them between batches\n\n      itemsToRemove = batch.itemsToRemove;\n      var solidsToMoveLength = itemsToRemove.length;\n\n      if (solidsToMoveLength > 0) {\n        needUpdate = true;\n\n        for (i = 0; i < solidsToMoveLength; i++) {\n          updater = itemsToRemove[i];\n          batch.remove(updater);\n          this.add(time, updater);\n        }\n      }\n    }\n\n    for (x = 0; x < translucentBatchesLength; x++) {\n      batch = translucentBatches[x]; //Perform initial update\n\n      isUpdated = batch.update(time); //If any items swapped between solid/translucent, we need to\n      //move them between batches\n\n      itemsToRemove = batch.itemsToRemove;\n      var translucentToMoveLength = itemsToRemove.length;\n\n      if (translucentToMoveLength > 0) {\n        needUpdate = true;\n\n        for (i = 0; i < translucentToMoveLength; i++) {\n          updater = itemsToRemove[i];\n          batch.remove(updater);\n          this.add(time, updater);\n        }\n      }\n    }\n  } while (needUpdate);\n\n  return isUpdated;\n};\n\nStaticOutlineGeometryBatch.prototype.getBoundingSphere = function (updater, result) {\n  var i;\n  var solidBatches = this._solidBatches.values;\n  var solidBatchesLength = solidBatches.length;\n\n  for (i = 0; i < solidBatchesLength; i++) {\n    var solidBatch = solidBatches[i];\n\n    if (solidBatch.contains(updater)) {\n      return solidBatch.getBoundingSphere(updater, result);\n    }\n  }\n\n  var translucentBatches = this._translucentBatches.values;\n  var translucentBatchesLength = translucentBatches.length;\n\n  for (i = 0; i < translucentBatchesLength; i++) {\n    var translucentBatch = translucentBatches[i];\n\n    if (translucentBatch.contains(updater)) {\n      return translucentBatch.getBoundingSphere(updater, result);\n    }\n  }\n\n  return BoundingSphereState.FAILED;\n};\n\nStaticOutlineGeometryBatch.prototype.removeAllPrimitives = function () {\n  var i;\n  var solidBatches = this._solidBatches.values;\n  var solidBatchesLength = solidBatches.length;\n\n  for (i = 0; i < solidBatchesLength; i++) {\n    solidBatches[i].removeAllPrimitives();\n  }\n\n  var translucentBatches = this._translucentBatches.values;\n  var translucentBatchesLength = translucentBatches.length;\n\n  for (i = 0; i < translucentBatchesLength; i++) {\n    translucentBatches[i].removeAllPrimitives();\n  }\n};\n\nexport default StaticOutlineGeometryBatch;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/StaticOutlineGeometryBatch.js"],"names":["AssociativeArray","Cartesian3","Color","ColorGeometryInstanceAttribute","defined","DistanceDisplayCondition","DistanceDisplayConditionGeometryInstanceAttribute","OffsetGeometryInstanceAttribute","ShowGeometryInstanceAttribute","PerInstanceColorAppearance","Primitive","BoundingSphereState","Property","colorScratch","distanceDisplayConditionScratch","defaultDistanceDisplayCondition","defaultOffset","ZERO","offsetScratch","Batch","primitives","translucent","width","shadows","createPrimitive","waitingOnCreate","primitive","undefined","oldPrimitive","geometry","updaters","updatersWithAttributes","attributes","itemsToRemove","subscriptions","showsUpdated","prototype","add","updater","instance","id","set","hasConstantOutline","outlineColorProperty","isConstant","distanceDisplayConditionProperty","terrainOffsetProperty","that","entity","definitionChanged","addEventListener","propertyName","newValue","oldValue","remove","unsubscribe","get","update","time","isUpdated","removedCount","i","geometries","values","geometriesLength","length","show","asynchronous","geometryInstances","slice","appearance","flat","renderState","lineWidth","removeAll","ready","getGeometryInstanceAttributes","outlineColor","getValueOrDefault","WHITE","equals","_lastColor","clone","color","toValue","isShowing","isOutlineVisible","currentShow","distanceDisplayCondition","_lastDistanceDisplayCondition","offsetProperty","offset","_lastOffset","updateShows","value","contains","getBoundingSphere","result","PENDING","boundingSphere","FAILED","DONE","removeAllPrimitives","StaticOutlineGeometryBatch","scene","_primitives","_scene","_shadows","_solidBatches","_translucentBatches","createOutlineGeometryInstance","clampLineWidth","outlineWidth","batches","batch","solidBatches","solidBatchesLength","translucentBatches","translucentBatchesLength","x","needUpdate","solidsToMoveLength","translucentToMoveLength","solidBatch","translucentBatch"],"mappings":"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","sourcesContent":["import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport Primitive from \"../Scene/Primitive.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\n\nvar colorScratch = new Color();\nvar distanceDisplayConditionScratch = new DistanceDisplayCondition();\nvar defaultDistanceDisplayCondition = new DistanceDisplayCondition();\nvar defaultOffset = Cartesian3.ZERO;\nvar offsetScratch = new Cartesian3();\n\nfunction Batch(primitives, translucent, width, shadows) {\n  this.translucent = translucent;\n  this.width = width;\n  this.shadows = shadows;\n  this.primitives = primitives;\n  this.createPrimitive = false;\n  this.waitingOnCreate = false;\n  this.primitive = undefined;\n  this.oldPrimitive = undefined;\n  this.geometry = new AssociativeArray();\n  this.updaters = new AssociativeArray();\n  this.updatersWithAttributes = new AssociativeArray();\n  this.attributes = new AssociativeArray();\n  this.itemsToRemove = [];\n  this.subscriptions = new AssociativeArray();\n  this.showsUpdated = new AssociativeArray();\n}\nBatch.prototype.add = function (updater, instance) {\n  var id = updater.id;\n  this.createPrimitive = true;\n  this.geometry.set(id, instance);\n  this.updaters.set(id, updater);\n  if (\n    !updater.hasConstantOutline ||\n    !updater.outlineColorProperty.isConstant ||\n    !Property.isConstant(updater.distanceDisplayConditionProperty) ||\n    !Property.isConstant(updater.terrainOffsetProperty)\n  ) {\n    this.updatersWithAttributes.set(id, updater);\n  } else {\n    var that = this;\n    this.subscriptions.set(\n      id,\n      updater.entity.definitionChanged.addEventListener(function (\n        entity,\n        propertyName,\n        newValue,\n        oldValue\n      ) {\n        if (propertyName === \"isShowing\") {\n          that.showsUpdated.set(updater.id, updater);\n        }\n      })\n    );\n  }\n};\n\nBatch.prototype.remove = function (updater) {\n  var id = updater.id;\n  this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n  if (this.updaters.remove(id)) {\n    this.updatersWithAttributes.remove(id);\n    var unsubscribe = this.subscriptions.get(id);\n    if (defined(unsubscribe)) {\n      unsubscribe();\n      this.subscriptions.remove(id);\n      this.showsUpdated.remove(id);\n    }\n    return true;\n  }\n  return false;\n};\n\nBatch.prototype.update = function (time) {\n  var isUpdated = true;\n  var removedCount = 0;\n  var primitive = this.primitive;\n  var primitives = this.primitives;\n  var i;\n\n  if (this.createPrimitive) {\n    var geometries = this.geometry.values;\n    var geometriesLength = geometries.length;\n    if (geometriesLength > 0) {\n      if (defined(primitive)) {\n        if (!defined(this.oldPrimitive)) {\n          this.oldPrimitive = primitive;\n        } else {\n          primitives.remove(primitive);\n        }\n      }\n\n      primitive = new Primitive({\n        show: false,\n        asynchronous: true,\n        geometryInstances: geometries.slice(),\n        appearance: new PerInstanceColorAppearance({\n          flat: true,\n          translucent: this.translucent,\n          renderState: {\n            lineWidth: this.width,\n          },\n        }),\n        shadows: this.shadows,\n      });\n\n      primitives.add(primitive);\n      isUpdated = false;\n    } else {\n      if (defined(primitive)) {\n        primitives.remove(primitive);\n        primitive = undefined;\n      }\n      var oldPrimitive = this.oldPrimitive;\n      if (defined(oldPrimitive)) {\n        primitives.remove(oldPrimitive);\n        this.oldPrimitive = undefined;\n      }\n    }\n\n    this.attributes.removeAll();\n    this.primitive = primitive;\n    this.createPrimitive = false;\n    this.waitingOnCreate = true;\n  } else if (defined(primitive) && primitive.ready) {\n    primitive.show = true;\n    if (defined(this.oldPrimitive)) {\n      primitives.remove(this.oldPrimitive);\n      this.oldPrimitive = undefined;\n    }\n\n    var updatersWithAttributes = this.updatersWithAttributes.values;\n    var length = updatersWithAttributes.length;\n    var waitingOnCreate = this.waitingOnCreate;\n    for (i = 0; i < length; i++) {\n      var updater = updatersWithAttributes[i];\n      var instance = this.geometry.get(updater.id);\n\n      var attributes = this.attributes.get(instance.id.id);\n      if (!defined(attributes)) {\n        attributes = primitive.getGeometryInstanceAttributes(instance.id);\n        this.attributes.set(instance.id.id, attributes);\n      }\n\n      if (!updater.outlineColorProperty.isConstant || waitingOnCreate) {\n        var outlineColorProperty = updater.outlineColorProperty;\n        var outlineColor = Property.getValueOrDefault(\n          outlineColorProperty,\n          time,\n          Color.WHITE,\n          colorScratch\n        );\n        if (!Color.equals(attributes._lastColor, outlineColor)) {\n          attributes._lastColor = Color.clone(\n            outlineColor,\n            attributes._lastColor\n          );\n          attributes.color = ColorGeometryInstanceAttribute.toValue(\n            outlineColor,\n            attributes.color\n          );\n          if (\n            (this.translucent && attributes.color[3] === 255) ||\n            (!this.translucent && attributes.color[3] !== 255)\n          ) {\n            this.itemsToRemove[removedCount++] = updater;\n          }\n        }\n      }\n\n      var show =\n        updater.entity.isShowing &&\n        (updater.hasConstantOutline || updater.isOutlineVisible(time));\n      var currentShow = attributes.show[0] === 1;\n      if (show !== currentShow) {\n        attributes.show = ShowGeometryInstanceAttribute.toValue(\n          show,\n          attributes.show\n        );\n      }\n\n      var distanceDisplayConditionProperty =\n        updater.distanceDisplayConditionProperty;\n      if (!Property.isConstant(distanceDisplayConditionProperty)) {\n        var distanceDisplayCondition = Property.getValueOrDefault(\n          distanceDisplayConditionProperty,\n          time,\n          defaultDistanceDisplayCondition,\n          distanceDisplayConditionScratch\n        );\n        if (\n          !DistanceDisplayCondition.equals(\n            distanceDisplayCondition,\n            attributes._lastDistanceDisplayCondition\n          )\n        ) {\n          attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(\n            distanceDisplayCondition,\n            attributes._lastDistanceDisplayCondition\n          );\n          attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(\n            distanceDisplayCondition,\n            attributes.distanceDisplayCondition\n          );\n        }\n      }\n\n      var offsetProperty = updater.terrainOffsetProperty;\n      if (!Property.isConstant(offsetProperty)) {\n        var offset = Property.getValueOrDefault(\n          offsetProperty,\n          time,\n          defaultOffset,\n          offsetScratch\n        );\n        if (!Cartesian3.equals(offset, attributes._lastOffset)) {\n          attributes._lastOffset = Cartesian3.clone(\n            offset,\n            attributes._lastOffset\n          );\n          attributes.offset = OffsetGeometryInstanceAttribute.toValue(\n            offset,\n            attributes.offset\n          );\n        }\n      }\n    }\n\n    this.updateShows(primitive);\n    this.waitingOnCreate = false;\n  } else if (defined(primitive) && !primitive.ready) {\n    isUpdated = false;\n  }\n\n  this.itemsToRemove.length = removedCount;\n  return isUpdated;\n};\n\nBatch.prototype.updateShows = function (primitive) {\n  var showsUpdated = this.showsUpdated.values;\n  var length = showsUpdated.length;\n  for (var i = 0; i < length; i++) {\n    var updater = showsUpdated[i];\n    var instance = this.geometry.get(updater.id);\n\n    var attributes = this.attributes.get(instance.id.id);\n    if (!defined(attributes)) {\n      attributes = primitive.getGeometryInstanceAttributes(instance.id);\n      this.attributes.set(instance.id.id, attributes);\n    }\n\n    var show = updater.entity.isShowing;\n    var currentShow = attributes.show[0] === 1;\n    if (show !== currentShow) {\n      attributes.show = ShowGeometryInstanceAttribute.toValue(\n        show,\n        attributes.show\n      );\n      instance.attributes.show.value[0] = attributes.show[0];\n    }\n  }\n  this.showsUpdated.removeAll();\n};\n\nBatch.prototype.contains = function (updater) {\n  return this.updaters.contains(updater.id);\n};\n\nBatch.prototype.getBoundingSphere = function (updater, result) {\n  var primitive = this.primitive;\n  if (!primitive.ready) {\n    return BoundingSphereState.PENDING;\n  }\n  var attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n  if (\n    !defined(attributes) ||\n    !defined(attributes.boundingSphere) || //\n    (defined(attributes.show) && attributes.show[0] === 0)\n  ) {\n    return BoundingSphereState.FAILED;\n  }\n  attributes.boundingSphere.clone(result);\n  return BoundingSphereState.DONE;\n};\n\nBatch.prototype.removeAllPrimitives = function () {\n  var primitives = this.primitives;\n\n  var primitive = this.primitive;\n  if (defined(primitive)) {\n    primitives.remove(primitive);\n    this.primitive = undefined;\n    this.geometry.removeAll();\n    this.updaters.removeAll();\n  }\n\n  var oldPrimitive = this.oldPrimitive;\n  if (defined(oldPrimitive)) {\n    primitives.remove(oldPrimitive);\n    this.oldPrimitive = undefined;\n  }\n};\n\n/**\n * @private\n */\nfunction StaticOutlineGeometryBatch(primitives, scene, shadows) {\n  this._primitives = primitives;\n  this._scene = scene;\n  this._shadows = shadows;\n  this._solidBatches = new AssociativeArray();\n  this._translucentBatches = new AssociativeArray();\n}\nStaticOutlineGeometryBatch.prototype.add = function (time, updater) {\n  var instance = updater.createOutlineGeometryInstance(time);\n  var width = this._scene.clampLineWidth(updater.outlineWidth);\n  var batches;\n  var batch;\n  if (instance.attributes.color.value[3] === 255) {\n    batches = this._solidBatches;\n    batch = batches.get(width);\n    if (!defined(batch)) {\n      batch = new Batch(this._primitives, false, width, this._shadows);\n      batches.set(width, batch);\n    }\n    batch.add(updater, instance);\n  } else {\n    batches = this._translucentBatches;\n    batch = batches.get(width);\n    if (!defined(batch)) {\n      batch = new Batch(this._primitives, true, width, this._shadows);\n      batches.set(width, batch);\n    }\n    batch.add(updater, instance);\n  }\n};\n\nStaticOutlineGeometryBatch.prototype.remove = function (updater) {\n  var i;\n\n  var solidBatches = this._solidBatches.values;\n  var solidBatchesLength = solidBatches.length;\n  for (i = 0; i < solidBatchesLength; i++) {\n    if (solidBatches[i].remove(updater)) {\n      return;\n    }\n  }\n\n  var translucentBatches = this._translucentBatches.values;\n  var translucentBatchesLength = translucentBatches.length;\n  for (i = 0; i < translucentBatchesLength; i++) {\n    if (translucentBatches[i].remove(updater)) {\n      return;\n    }\n  }\n};\n\nStaticOutlineGeometryBatch.prototype.update = function (time) {\n  var i;\n  var x;\n  var updater;\n  var batch;\n  var solidBatches = this._solidBatches.values;\n  var solidBatchesLength = solidBatches.length;\n  var translucentBatches = this._translucentBatches.values;\n  var translucentBatchesLength = translucentBatches.length;\n  var itemsToRemove;\n  var isUpdated = true;\n  var needUpdate = false;\n\n  do {\n    needUpdate = false;\n    for (x = 0; x < solidBatchesLength; x++) {\n      batch = solidBatches[x];\n      //Perform initial update\n      isUpdated = batch.update(time);\n\n      //If any items swapped between solid/translucent, we need to\n      //move them between batches\n      itemsToRemove = batch.itemsToRemove;\n      var solidsToMoveLength = itemsToRemove.length;\n      if (solidsToMoveLength > 0) {\n        needUpdate = true;\n        for (i = 0; i < solidsToMoveLength; i++) {\n          updater = itemsToRemove[i];\n          batch.remove(updater);\n          this.add(time, updater);\n        }\n      }\n    }\n    for (x = 0; x < translucentBatchesLength; x++) {\n      batch = translucentBatches[x];\n      //Perform initial update\n      isUpdated = batch.update(time);\n\n      //If any items swapped between solid/translucent, we need to\n      //move them between batches\n      itemsToRemove = batch.itemsToRemove;\n      var translucentToMoveLength = itemsToRemove.length;\n      if (translucentToMoveLength > 0) {\n        needUpdate = true;\n        for (i = 0; i < translucentToMoveLength; i++) {\n          updater = itemsToRemove[i];\n          batch.remove(updater);\n          this.add(time, updater);\n        }\n      }\n    }\n  } while (needUpdate);\n\n  return isUpdated;\n};\n\nStaticOutlineGeometryBatch.prototype.getBoundingSphere = function (\n  updater,\n  result\n) {\n  var i;\n\n  var solidBatches = this._solidBatches.values;\n  var solidBatchesLength = solidBatches.length;\n  for (i = 0; i < solidBatchesLength; i++) {\n    var solidBatch = solidBatches[i];\n    if (solidBatch.contains(updater)) {\n      return solidBatch.getBoundingSphere(updater, result);\n    }\n  }\n\n  var translucentBatches = this._translucentBatches.values;\n  var translucentBatchesLength = translucentBatches.length;\n  for (i = 0; i < translucentBatchesLength; i++) {\n    var translucentBatch = translucentBatches[i];\n    if (translucentBatch.contains(updater)) {\n      return translucentBatch.getBoundingSphere(updater, result);\n    }\n  }\n\n  return BoundingSphereState.FAILED;\n};\n\nStaticOutlineGeometryBatch.prototype.removeAllPrimitives = function () {\n  var i;\n\n  var solidBatches = this._solidBatches.values;\n  var solidBatchesLength = solidBatches.length;\n  for (i = 0; i < solidBatchesLength; i++) {\n    solidBatches[i].removeAllPrimitives();\n  }\n\n  var translucentBatches = this._translucentBatches.values;\n  var translucentBatchesLength = translucentBatches.length;\n  for (i = 0; i < translucentBatchesLength; i++) {\n    translucentBatches[i].removeAllPrimitives();\n  }\n};\nexport default StaticOutlineGeometryBatch;\n"]},"metadata":{},"sourceType":"module"}