{"ast":null,"code":"import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\n/**\n * A {@link Property} whose value is lazily evaluated by a callback function.\n *\n * @alias CallbackProperty\n * @constructor\n *\n * @param {CallbackProperty~Callback} callback The function to be called when the property is evaluated.\n * @param {Boolean} isConstant <code>true</code> when the callback function returns the same value every time, <code>false</code> if the value will change.\n */\n\nfunction CallbackProperty(callback, isConstant) {\n  this._callback = undefined;\n  this._isConstant = undefined;\n  this._definitionChanged = new Event();\n  this.setCallback(callback, isConstant);\n}\n\nObject.defineProperties(CallbackProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * @memberof CallbackProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function get() {\n      return this._isConstant;\n    }\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setCallback is called.\n   * @memberof CallbackProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function get() {\n      return this._definitionChanged;\n    }\n  }\n});\n/**\n * Gets the value of the property.\n *\n * @param {JulianDate} [time] The time for which to retrieve the value.  This parameter is unused since the value does not change with respect to time.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied or is unsupported.\n */\n\nCallbackProperty.prototype.getValue = function (time, result) {\n  return this._callback(time, result);\n};\n/**\n * Sets the callback to be used.\n *\n * @param {CallbackProperty~Callback} callback The function to be called when the property is evaluated.\n * @param {Boolean} isConstant <code>true</code> when the callback function returns the same value every time, <code>false</code> if the value will change.\n */\n\n\nCallbackProperty.prototype.setCallback = function (callback, isConstant) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(callback)) {\n    throw new DeveloperError(\"callback is required.\");\n  }\n\n  if (!defined(isConstant)) {\n    throw new DeveloperError(\"isConstant is required.\");\n  } //>>includeEnd('debug');\n\n\n  var changed = this._callback !== callback || this._isConstant !== isConstant;\n  this._callback = callback;\n  this._isConstant = isConstant;\n\n  if (changed) {\n    this._definitionChanged.raiseEvent(this);\n  }\n};\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nCallbackProperty.prototype.equals = function (other) {\n  return this === other || other instanceof CallbackProperty && this._callback === other._callback && this._isConstant === other._isConstant;\n};\n/**\n * A function that returns the value of the property.\n * @callback CallbackProperty~Callback\n *\n * @param {JulianDate} [time] The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied or is unsupported.\n */\n\n\nexport default CallbackProperty;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/CallbackProperty.js"],"names":["defined","DeveloperError","Event","CallbackProperty","callback","isConstant","_callback","undefined","_isConstant","_definitionChanged","setCallback","Object","defineProperties","prototype","get","definitionChanged","getValue","time","result","changed","raiseEvent","equals","other"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA;;;;;;;;;;AASA,SAASC,gBAAT,CAA0BC,QAA1B,EAAoCC,UAApC,EAAgD;AAC9C,OAAKC,SAAL,GAAiBC,SAAjB;AACA,OAAKC,WAAL,GAAmBD,SAAnB;AACA,OAAKE,kBAAL,GAA0B,IAAIP,KAAJ,EAA1B;AACA,OAAKQ,WAAL,CAAiBN,QAAjB,EAA2BC,UAA3B;AACD;;AAEDM,MAAM,CAACC,gBAAP,CAAwBT,gBAAgB,CAACU,SAAzC,EAAoD;AAClD;;;;;;;AAOAR,EAAAA,UAAU,EAAE;AACVS,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKN,WAAZ;AACD;AAHS,GARsC;;AAalD;;;;;;;;AAQAO,EAAAA,iBAAiB,EAAE;AACjBD,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKL,kBAAZ;AACD;AAHgB;AArB+B,CAApD;AA4BA;;;;;;;;AAOAN,gBAAgB,CAACU,SAAjB,CAA2BG,QAA3B,GAAsC,UAAUC,IAAV,EAAgBC,MAAhB,EAAwB;AAC5D,SAAO,KAAKZ,SAAL,CAAeW,IAAf,EAAqBC,MAArB,CAAP;AACD,CAFD;AAIA;;;;;;;;AAMAf,gBAAgB,CAACU,SAAjB,CAA2BH,WAA3B,GAAyC,UAAUN,QAAV,EAAoBC,UAApB,EAAgC;AACvE;AACA,MAAI,CAACL,OAAO,CAACI,QAAD,CAAZ,EAAwB;AACtB,UAAM,IAAIH,cAAJ,CAAmB,uBAAnB,CAAN;AACD;;AACD,MAAI,CAACD,OAAO,CAACK,UAAD,CAAZ,EAA0B;AACxB,UAAM,IAAIJ,cAAJ,CAAmB,yBAAnB,CAAN;AACD,GAPsE,CAQvE;;;AAEA,MAAIkB,OAAO,GAAG,KAAKb,SAAL,KAAmBF,QAAnB,IAA+B,KAAKI,WAAL,KAAqBH,UAAlE;AAEA,OAAKC,SAAL,GAAiBF,QAAjB;AACA,OAAKI,WAAL,GAAmBH,UAAnB;;AAEA,MAAIc,OAAJ,EAAa;AACX,SAAKV,kBAAL,CAAwBW,UAAxB,CAAmC,IAAnC;AACD;AACF,CAlBD;AAoBA;;;;;;;;;AAOAjB,gBAAgB,CAACU,SAAjB,CAA2BQ,MAA3B,GAAoC,UAAUC,KAAV,EAAiB;AACnD,SACE,SAASA,KAAT,IACCA,KAAK,YAAYnB,gBAAjB,IACC,KAAKG,SAAL,KAAmBgB,KAAK,CAAChB,SAD1B,IAEC,KAAKE,WAAL,KAAqBc,KAAK,CAACd,WAJ/B;AAMD,CAPD;AASA;;;;;;;;;;AAQA,eAAeL,gBAAf","sourcesContent":["import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\n\n/**\n * A {@link Property} whose value is lazily evaluated by a callback function.\n *\n * @alias CallbackProperty\n * @constructor\n *\n * @param {CallbackProperty~Callback} callback The function to be called when the property is evaluated.\n * @param {Boolean} isConstant <code>true</code> when the callback function returns the same value every time, <code>false</code> if the value will change.\n */\nfunction CallbackProperty(callback, isConstant) {\n  this._callback = undefined;\n  this._isConstant = undefined;\n  this._definitionChanged = new Event();\n  this.setCallback(callback, isConstant);\n}\n\nObject.defineProperties(CallbackProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * @memberof CallbackProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return this._isConstant;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setCallback is called.\n   * @memberof CallbackProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n});\n\n/**\n * Gets the value of the property.\n *\n * @param {JulianDate} [time] The time for which to retrieve the value.  This parameter is unused since the value does not change with respect to time.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied or is unsupported.\n */\nCallbackProperty.prototype.getValue = function (time, result) {\n  return this._callback(time, result);\n};\n\n/**\n * Sets the callback to be used.\n *\n * @param {CallbackProperty~Callback} callback The function to be called when the property is evaluated.\n * @param {Boolean} isConstant <code>true</code> when the callback function returns the same value every time, <code>false</code> if the value will change.\n */\nCallbackProperty.prototype.setCallback = function (callback, isConstant) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(callback)) {\n    throw new DeveloperError(\"callback is required.\");\n  }\n  if (!defined(isConstant)) {\n    throw new DeveloperError(\"isConstant is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var changed = this._callback !== callback || this._isConstant !== isConstant;\n\n  this._callback = callback;\n  this._isConstant = isConstant;\n\n  if (changed) {\n    this._definitionChanged.raiseEvent(this);\n  }\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCallbackProperty.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (other instanceof CallbackProperty &&\n      this._callback === other._callback &&\n      this._isConstant === other._isConstant)\n  );\n};\n\n/**\n * A function that returns the value of the property.\n * @callback CallbackProperty~Callback\n *\n * @param {JulianDate} [time] The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied or is unsupported.\n */\nexport default CallbackProperty;\n"]},"metadata":{},"sourceType":"module"}