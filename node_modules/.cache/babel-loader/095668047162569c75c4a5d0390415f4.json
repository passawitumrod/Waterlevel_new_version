{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport Resource from \"../Core/Resource.js\";\nimport WebMercatorProjection from \"../Core/WebMercatorProjection.js\";\nimport GetFeatureInfoFormat from \"./GetFeatureInfoFormat.js\";\nimport TimeDynamicImagery from \"./TimeDynamicImagery.js\";\nimport UrlTemplateImageryProvider from \"./UrlTemplateImageryProvider.js\";\n/**\n * Provides tiled imagery hosted by a Web Map Service (WMS) server.\n *\n * @alias WebMapServiceImageryProvider\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource|String} options.url The URL of the WMS service. The URL supports the same keywords as the {@link UrlTemplateImageryProvider}.\n * @param {String} options.layers The layers to include, separated by commas.\n * @param {Object} [options.parameters=WebMapServiceImageryProvider.DefaultParameters] Additional parameters to pass to the WMS server in the GetMap URL.\n * @param {Object} [options.getFeatureInfoParameters=WebMapServiceImageryProvider.GetFeatureInfoDefaultParameters] Additional parameters to pass to the WMS server in the GetFeatureInfo URL.\n * @param {Boolean} [options.enablePickFeatures=true] If true, {@link WebMapServiceImageryProvider#pickFeatures} will invoke\n *        the GetFeatureInfo operation on the WMS server and return the features included in the response.  If false,\n *        {@link WebMapServiceImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable features)\n *        without communicating with the server.  Set this property to false if you know your WMS server does not support\n *        GetFeatureInfo or if you don't want this provider's features to be pickable. Note that this can be dynamically\n *        overridden by modifying the WebMapServiceImageryProvider#enablePickFeatures property.\n * @param {GetFeatureInfoFormat[]} [options.getFeatureInfoFormats=WebMapServiceImageryProvider.DefaultGetFeatureInfoFormats] The formats\n *        in which to try WMS GetFeatureInfo requests.\n * @param {Rectangle} [options.rectangle=Rectangle.MAX_VALUE] The rectangle of the layer.\n * @param {TilingScheme} [options.tilingScheme=new GeographicTilingScheme()] The tiling scheme to use to divide the world into tiles.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n *        this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *        parameter is specified, the WGS84 ellipsoid is used.\n * @param {Number} [options.tileWidth=256] The width of each tile in pixels.\n * @param {Number} [options.tileHeight=256] The height of each tile in pixels.\n * @param {Number} [options.minimumLevel=0] The minimum level-of-detail supported by the imagery provider.  Take care when\n *        specifying this that the number of tiles at the minimum level is small, such as four or less.  A larger number is\n *        likely to result in rendering problems.\n * @param {Number} [options.maximumLevel] The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n *        If not specified, there is no limit.\n * @param {String} [options.crs] CRS specification, for use with WMS specification >= 1.3.0.\n * @param {String} [options.srs] SRS specification, for use with WMS specification 1.1.0 or 1.1.1\n * @param {Credit|String} [options.credit] A credit for the data source, which is displayed on the canvas.\n * @param {String|String[]} [options.subdomains='abc'] The subdomains to use for the <code>{s}</code> placeholder in the URL template.\n *                          If this parameter is a single string, each character in the string is a subdomain.  If it is\n *                          an array, each element in the array is a subdomain.\n * @param {Clock} [options.clock] A Clock instance that is used when determining the value for the time dimension. Required when options.times is specified.\n * @param {TimeIntervalCollection} [options.times] TimeIntervalCollection with its data property being an object containing time dynamic dimension and their values.\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n * @see {@link http://resources.esri.com/help/9.3/arcgisserver/apis/rest/|ArcGIS Server REST API}\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n *\n * @example\n * var provider = new Cesium.WebMapServiceImageryProvider({\n *     url : 'https://sampleserver1.arcgisonline.com/ArcGIS/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/WMSServer',\n *     layers : '0',\n *     proxy: new Cesium.DefaultProxy('/proxy/')\n * });\n *\n * viewer.imageryLayers.addImageryProvider(provider);\n */\n\nfunction WebMapServiceImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT); //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(options.url)) {\n    throw new DeveloperError(\"options.url is required.\");\n  }\n\n  if (!defined(options.layers)) {\n    throw new DeveloperError(\"options.layers is required.\");\n  } //>>includeEnd('debug');\n\n\n  if (defined(options.times) && !defined(options.clock)) {\n    throw new DeveloperError(\"options.times was specified, so options.clock is required.\");\n  }\n\n  var resource = Resource.createIfNeeded(options.url);\n  var pickFeatureResource = resource.clone();\n  resource.setQueryParameters(WebMapServiceImageryProvider.DefaultParameters, true);\n  pickFeatureResource.setQueryParameters(WebMapServiceImageryProvider.GetFeatureInfoDefaultParameters, true);\n\n  if (defined(options.parameters)) {\n    resource.setQueryParameters(objectToLowercase(options.parameters));\n  }\n\n  if (defined(options.getFeatureInfoParameters)) {\n    pickFeatureResource.setQueryParameters(objectToLowercase(options.getFeatureInfoParameters));\n  }\n\n  var that = this;\n  this._reload = undefined;\n\n  if (defined(options.times)) {\n    this._timeDynamicImagery = new TimeDynamicImagery({\n      clock: options.clock,\n      times: options.times,\n      requestImageFunction: function (x, y, level, request, interval) {\n        return requestImage(that, x, y, level, request, interval);\n      },\n      reloadFunction: function () {\n        if (defined(that._reload)) {\n          that._reload();\n        }\n      }\n    });\n  }\n\n  var parameters = {};\n  parameters.layers = options.layers;\n  parameters.bbox = \"{westProjected},{southProjected},{eastProjected},{northProjected}\";\n  parameters.width = \"{width}\";\n  parameters.height = \"{height}\"; // Use SRS or CRS based on the WMS version.\n\n  if (parseFloat(resource.queryParameters.version) >= 1.3) {\n    // Use CRS with 1.3.0 and going forward.\n    // For GeographicTilingScheme, use CRS:84 vice EPSG:4326 to specify lon, lat (x, y) ordering for\n    // bbox requests.\n    parameters.crs = defaultValue(options.crs, options.tilingScheme && options.tilingScheme.projection instanceof WebMercatorProjection ? \"EPSG:3857\" : \"CRS:84\");\n  } else {\n    // SRS for WMS 1.1.0 or 1.1.1.\n    parameters.srs = defaultValue(options.srs, options.tilingScheme && options.tilingScheme.projection instanceof WebMercatorProjection ? \"EPSG:3857\" : \"EPSG:4326\");\n  }\n\n  resource.setQueryParameters(parameters, true);\n  pickFeatureResource.setQueryParameters(parameters, true);\n  var pickFeatureParams = {\n    query_layers: options.layers,\n    x: \"{i}\",\n    y: \"{j}\",\n    info_format: \"{format}\"\n  };\n  pickFeatureResource.setQueryParameters(pickFeatureParams, true);\n  this._resource = resource;\n  this._pickFeaturesResource = pickFeatureResource;\n  this._layers = options.layers; // Let UrlTemplateImageryProvider do the actual URL building.\n\n  this._tileProvider = new UrlTemplateImageryProvider({\n    url: resource,\n    pickFeaturesUrl: pickFeatureResource,\n    tilingScheme: defaultValue(options.tilingScheme, new GeographicTilingScheme({\n      ellipsoid: options.ellipsoid\n    })),\n    rectangle: options.rectangle,\n    tileWidth: options.tileWidth,\n    tileHeight: options.tileHeight,\n    minimumLevel: options.minimumLevel,\n    maximumLevel: options.maximumLevel,\n    subdomains: options.subdomains,\n    tileDiscardPolicy: options.tileDiscardPolicy,\n    credit: options.credit,\n    getFeatureInfoFormats: defaultValue(options.getFeatureInfoFormats, WebMapServiceImageryProvider.DefaultGetFeatureInfoFormats),\n    enablePickFeatures: options.enablePickFeatures\n  });\n}\n\nfunction requestImage(imageryProvider, col, row, level, request, interval) {\n  var dynamicIntervalData = defined(interval) ? interval.data : undefined;\n  var tileProvider = imageryProvider._tileProvider;\n\n  if (defined(dynamicIntervalData)) {\n    // We set the query parameters within the tile provider, because it is managing the query.\n    tileProvider._resource.setQueryParameters(dynamicIntervalData);\n  }\n\n  return tileProvider.requestImage(col, row, level, request);\n}\n\nfunction pickFeatures(imageryProvider, x, y, level, longitude, latitude, interval) {\n  var dynamicIntervalData = defined(interval) ? interval.data : undefined;\n  var tileProvider = imageryProvider._tileProvider;\n\n  if (defined(dynamicIntervalData)) {\n    // We set the query parameters within the tile provider, because it is managing the query.\n    tileProvider._pickFeaturesResource.setQueryParameters(dynamicIntervalData);\n  }\n\n  return tileProvider.pickFeatures(x, y, level, longitude, latitude);\n}\n\nObject.defineProperties(WebMapServiceImageryProvider.prototype, {\n  /**\n   * Gets the URL of the WMS server.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource._url;\n    }\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    }\n  },\n\n  /**\n   * Gets the names of the WMS layers, separated by commas.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  layers: {\n    get: function () {\n      return this._layers;\n    }\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileProvider.tileWidth;\n    }\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileProvider.tileHeight;\n    }\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._tileProvider.maximumLevel;\n    }\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return this._tileProvider.minimumLevel;\n    }\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tileProvider.tilingScheme;\n    }\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._tileProvider.rectangle;\n    }\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._tileProvider.tileDiscardPolicy;\n    }\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._tileProvider.errorEvent;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._tileProvider.ready;\n    }\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._tileProvider.readyPromise;\n    }\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._tileProvider.credit;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return this._tileProvider.hasAlphaChannel;\n    }\n  },\n\n  /**\n   * Gets or sets a value indicating whether feature picking is enabled.  If true, {@link WebMapServiceImageryProvider#pickFeatures} will\n   * invoke the <code>GetFeatureInfo</code> service on the WMS server and attempt to interpret the features included in the response.  If false,\n   * {@link WebMapServiceImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable\n   * features) without communicating with the server.  Set this property to false if you know your data\n   * source does not support picking features or if you don't want this provider's features to be pickable.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Boolean}\n   * @default true\n   */\n  enablePickFeatures: {\n    get: function () {\n      return this._tileProvider.enablePickFeatures;\n    },\n    set: function (enablePickFeatures) {\n      this._tileProvider.enablePickFeatures = enablePickFeatures;\n    }\n  },\n\n  /**\n   * Gets or sets a clock that is used to get keep the time used for time dynamic parameters.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Clock}\n   */\n  clock: {\n    get: function () {\n      return this._timeDynamicImagery.clock;\n    },\n    set: function (value) {\n      this._timeDynamicImagery.clock = value;\n    }\n  },\n\n  /**\n   * Gets or sets a time interval collection that is used to get time dynamic parameters. The data of each\n   * TimeInterval is an object containing the keys and values of the properties that are used during\n   * tile requests.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {TimeIntervalCollection}\n   */\n  times: {\n    get: function () {\n      return this._timeDynamicImagery.times;\n    },\n    set: function (value) {\n      this._timeDynamicImagery.times = value;\n    }\n  }\n});\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\n\nWebMapServiceImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return this._tileProvider.getTileCredits(x, y, level);\n};\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<Image|Canvas>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\n\n\nWebMapServiceImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  var result;\n  var timeDynamicImagery = this._timeDynamicImagery;\n  var currentInterval; // Try and load from cache\n\n  if (defined(timeDynamicImagery)) {\n    currentInterval = timeDynamicImagery.currentInterval;\n    result = timeDynamicImagery.getFromCache(x, y, level, request);\n  } // Couldn't load from cache\n\n\n  if (!defined(result)) {\n    result = requestImage(this, x, y, level, request, currentInterval);\n  } // If we are approaching an interval, preload this tile in the next interval\n\n\n  if (defined(result) && defined(timeDynamicImagery)) {\n    timeDynamicImagery.checkApproachingInterval(x, y, level, request);\n  }\n\n  return result;\n};\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.  This function should not be called before {@link ImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *\n * @exception {DeveloperError} <code>pickFeatures</code> must not be called before the imagery provider is ready.\n */\n\n\nWebMapServiceImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  var timeDynamicImagery = this._timeDynamicImagery;\n  var currentInterval = defined(timeDynamicImagery) ? timeDynamicImagery.currentInterval : undefined;\n  return pickFeatures(this, x, y, level, longitude, latitude, currentInterval);\n};\n/**\n * The default parameters to include in the WMS URL to obtain images.  The values are as follows:\n *    service=WMS\n *    version=1.1.1\n *    request=GetMap\n *    styles=\n *    format=image/jpeg\n *\n * @constant\n * @type {Object}\n */\n\n\nWebMapServiceImageryProvider.DefaultParameters = Object.freeze({\n  service: \"WMS\",\n  version: \"1.1.1\",\n  request: \"GetMap\",\n  styles: \"\",\n  format: \"image/jpeg\"\n});\n/**\n * The default parameters to include in the WMS URL to get feature information.  The values are as follows:\n *     service=WMS\n *     version=1.1.1\n *     request=GetFeatureInfo\n *\n * @constant\n * @type {Object}\n */\n\nWebMapServiceImageryProvider.GetFeatureInfoDefaultParameters = Object.freeze({\n  service: \"WMS\",\n  version: \"1.1.1\",\n  request: \"GetFeatureInfo\"\n});\nWebMapServiceImageryProvider.DefaultGetFeatureInfoFormats = Object.freeze([Object.freeze(new GetFeatureInfoFormat(\"json\", \"application/json\")), Object.freeze(new GetFeatureInfoFormat(\"xml\", \"text/xml\")), Object.freeze(new GetFeatureInfoFormat(\"text\", \"text/html\"))]);\n\nfunction objectToLowercase(obj) {\n  var result = {};\n\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      result[key.toLowerCase()] = obj[key];\n    }\n  }\n\n  return result;\n}\n\nexport default WebMapServiceImageryProvider;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/WebMapServiceImageryProvider.js"],"names":["defaultValue","defined","DeveloperError","GeographicTilingScheme","Resource","WebMercatorProjection","GetFeatureInfoFormat","TimeDynamicImagery","UrlTemplateImageryProvider","WebMapServiceImageryProvider","options","EMPTY_OBJECT","url","layers","times","clock","resource","createIfNeeded","pickFeatureResource","clone","setQueryParameters","DefaultParameters","GetFeatureInfoDefaultParameters","parameters","objectToLowercase","getFeatureInfoParameters","that","_reload","undefined","_timeDynamicImagery","requestImageFunction","x","y","level","request","interval","requestImage","reloadFunction","bbox","width","height","parseFloat","queryParameters","version","crs","tilingScheme","projection","srs","pickFeatureParams","query_layers","info_format","_resource","_pickFeaturesResource","_layers","_tileProvider","pickFeaturesUrl","ellipsoid","rectangle","tileWidth","tileHeight","minimumLevel","maximumLevel","subdomains","tileDiscardPolicy","credit","getFeatureInfoFormats","DefaultGetFeatureInfoFormats","enablePickFeatures","imageryProvider","col","row","dynamicIntervalData","data","tileProvider","pickFeatures","longitude","latitude","Object","defineProperties","prototype","get","_url","proxy","errorEvent","ready","readyPromise","hasAlphaChannel","set","value","getTileCredits","result","timeDynamicImagery","currentInterval","getFromCache","checkApproachingInterval","freeze","service","styles","format","obj","key","hasOwnProperty","toLowerCase"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport Resource from \"../Core/Resource.js\";\nimport WebMercatorProjection from \"../Core/WebMercatorProjection.js\";\nimport GetFeatureInfoFormat from \"./GetFeatureInfoFormat.js\";\nimport TimeDynamicImagery from \"./TimeDynamicImagery.js\";\nimport UrlTemplateImageryProvider from \"./UrlTemplateImageryProvider.js\";\n\n/**\n * Provides tiled imagery hosted by a Web Map Service (WMS) server.\n *\n * @alias WebMapServiceImageryProvider\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource|String} options.url The URL of the WMS service. The URL supports the same keywords as the {@link UrlTemplateImageryProvider}.\n * @param {String} options.layers The layers to include, separated by commas.\n * @param {Object} [options.parameters=WebMapServiceImageryProvider.DefaultParameters] Additional parameters to pass to the WMS server in the GetMap URL.\n * @param {Object} [options.getFeatureInfoParameters=WebMapServiceImageryProvider.GetFeatureInfoDefaultParameters] Additional parameters to pass to the WMS server in the GetFeatureInfo URL.\n * @param {Boolean} [options.enablePickFeatures=true] If true, {@link WebMapServiceImageryProvider#pickFeatures} will invoke\n *        the GetFeatureInfo operation on the WMS server and return the features included in the response.  If false,\n *        {@link WebMapServiceImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable features)\n *        without communicating with the server.  Set this property to false if you know your WMS server does not support\n *        GetFeatureInfo or if you don't want this provider's features to be pickable. Note that this can be dynamically\n *        overridden by modifying the WebMapServiceImageryProvider#enablePickFeatures property.\n * @param {GetFeatureInfoFormat[]} [options.getFeatureInfoFormats=WebMapServiceImageryProvider.DefaultGetFeatureInfoFormats] The formats\n *        in which to try WMS GetFeatureInfo requests.\n * @param {Rectangle} [options.rectangle=Rectangle.MAX_VALUE] The rectangle of the layer.\n * @param {TilingScheme} [options.tilingScheme=new GeographicTilingScheme()] The tiling scheme to use to divide the world into tiles.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n *        this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *        parameter is specified, the WGS84 ellipsoid is used.\n * @param {Number} [options.tileWidth=256] The width of each tile in pixels.\n * @param {Number} [options.tileHeight=256] The height of each tile in pixels.\n * @param {Number} [options.minimumLevel=0] The minimum level-of-detail supported by the imagery provider.  Take care when\n *        specifying this that the number of tiles at the minimum level is small, such as four or less.  A larger number is\n *        likely to result in rendering problems.\n * @param {Number} [options.maximumLevel] The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n *        If not specified, there is no limit.\n * @param {String} [options.crs] CRS specification, for use with WMS specification >= 1.3.0.\n * @param {String} [options.srs] SRS specification, for use with WMS specification 1.1.0 or 1.1.1\n * @param {Credit|String} [options.credit] A credit for the data source, which is displayed on the canvas.\n * @param {String|String[]} [options.subdomains='abc'] The subdomains to use for the <code>{s}</code> placeholder in the URL template.\n *                          If this parameter is a single string, each character in the string is a subdomain.  If it is\n *                          an array, each element in the array is a subdomain.\n * @param {Clock} [options.clock] A Clock instance that is used when determining the value for the time dimension. Required when options.times is specified.\n * @param {TimeIntervalCollection} [options.times] TimeIntervalCollection with its data property being an object containing time dynamic dimension and their values.\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n * @see {@link http://resources.esri.com/help/9.3/arcgisserver/apis/rest/|ArcGIS Server REST API}\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n *\n * @example\n * var provider = new Cesium.WebMapServiceImageryProvider({\n *     url : 'https://sampleserver1.arcgisonline.com/ArcGIS/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/WMSServer',\n *     layers : '0',\n *     proxy: new Cesium.DefaultProxy('/proxy/')\n * });\n *\n * viewer.imageryLayers.addImageryProvider(provider);\n */\nfunction WebMapServiceImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options.url)) {\n    throw new DeveloperError(\"options.url is required.\");\n  }\n  if (!defined(options.layers)) {\n    throw new DeveloperError(\"options.layers is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (defined(options.times) && !defined(options.clock)) {\n    throw new DeveloperError(\n      \"options.times was specified, so options.clock is required.\"\n    );\n  }\n\n  var resource = Resource.createIfNeeded(options.url);\n\n  var pickFeatureResource = resource.clone();\n\n  resource.setQueryParameters(\n    WebMapServiceImageryProvider.DefaultParameters,\n    true\n  );\n  pickFeatureResource.setQueryParameters(\n    WebMapServiceImageryProvider.GetFeatureInfoDefaultParameters,\n    true\n  );\n\n  if (defined(options.parameters)) {\n    resource.setQueryParameters(objectToLowercase(options.parameters));\n  }\n\n  if (defined(options.getFeatureInfoParameters)) {\n    pickFeatureResource.setQueryParameters(\n      objectToLowercase(options.getFeatureInfoParameters)\n    );\n  }\n\n  var that = this;\n  this._reload = undefined;\n  if (defined(options.times)) {\n    this._timeDynamicImagery = new TimeDynamicImagery({\n      clock: options.clock,\n      times: options.times,\n      requestImageFunction: function (x, y, level, request, interval) {\n        return requestImage(that, x, y, level, request, interval);\n      },\n      reloadFunction: function () {\n        if (defined(that._reload)) {\n          that._reload();\n        }\n      },\n    });\n  }\n\n  var parameters = {};\n  parameters.layers = options.layers;\n  parameters.bbox =\n    \"{westProjected},{southProjected},{eastProjected},{northProjected}\";\n  parameters.width = \"{width}\";\n  parameters.height = \"{height}\";\n\n  // Use SRS or CRS based on the WMS version.\n  if (parseFloat(resource.queryParameters.version) >= 1.3) {\n    // Use CRS with 1.3.0 and going forward.\n    // For GeographicTilingScheme, use CRS:84 vice EPSG:4326 to specify lon, lat (x, y) ordering for\n    // bbox requests.\n    parameters.crs = defaultValue(\n      options.crs,\n      options.tilingScheme &&\n        options.tilingScheme.projection instanceof WebMercatorProjection\n        ? \"EPSG:3857\"\n        : \"CRS:84\"\n    );\n  } else {\n    // SRS for WMS 1.1.0 or 1.1.1.\n    parameters.srs = defaultValue(\n      options.srs,\n      options.tilingScheme &&\n        options.tilingScheme.projection instanceof WebMercatorProjection\n        ? \"EPSG:3857\"\n        : \"EPSG:4326\"\n    );\n  }\n\n  resource.setQueryParameters(parameters, true);\n  pickFeatureResource.setQueryParameters(parameters, true);\n\n  var pickFeatureParams = {\n    query_layers: options.layers,\n    x: \"{i}\",\n    y: \"{j}\",\n    info_format: \"{format}\",\n  };\n  pickFeatureResource.setQueryParameters(pickFeatureParams, true);\n\n  this._resource = resource;\n  this._pickFeaturesResource = pickFeatureResource;\n  this._layers = options.layers;\n\n  // Let UrlTemplateImageryProvider do the actual URL building.\n  this._tileProvider = new UrlTemplateImageryProvider({\n    url: resource,\n    pickFeaturesUrl: pickFeatureResource,\n    tilingScheme: defaultValue(\n      options.tilingScheme,\n      new GeographicTilingScheme({ ellipsoid: options.ellipsoid })\n    ),\n    rectangle: options.rectangle,\n    tileWidth: options.tileWidth,\n    tileHeight: options.tileHeight,\n    minimumLevel: options.minimumLevel,\n    maximumLevel: options.maximumLevel,\n    subdomains: options.subdomains,\n    tileDiscardPolicy: options.tileDiscardPolicy,\n    credit: options.credit,\n    getFeatureInfoFormats: defaultValue(\n      options.getFeatureInfoFormats,\n      WebMapServiceImageryProvider.DefaultGetFeatureInfoFormats\n    ),\n    enablePickFeatures: options.enablePickFeatures,\n  });\n}\n\nfunction requestImage(imageryProvider, col, row, level, request, interval) {\n  var dynamicIntervalData = defined(interval) ? interval.data : undefined;\n  var tileProvider = imageryProvider._tileProvider;\n\n  if (defined(dynamicIntervalData)) {\n    // We set the query parameters within the tile provider, because it is managing the query.\n    tileProvider._resource.setQueryParameters(dynamicIntervalData);\n  }\n  return tileProvider.requestImage(col, row, level, request);\n}\n\nfunction pickFeatures(\n  imageryProvider,\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n  interval\n) {\n  var dynamicIntervalData = defined(interval) ? interval.data : undefined;\n  var tileProvider = imageryProvider._tileProvider;\n\n  if (defined(dynamicIntervalData)) {\n    // We set the query parameters within the tile provider, because it is managing the query.\n    tileProvider._pickFeaturesResource.setQueryParameters(dynamicIntervalData);\n  }\n  return tileProvider.pickFeatures(x, y, level, longitude, latitude);\n}\n\nObject.defineProperties(WebMapServiceImageryProvider.prototype, {\n  /**\n   * Gets the URL of the WMS server.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource._url;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    },\n  },\n\n  /**\n   * Gets the names of the WMS layers, separated by commas.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  layers: {\n    get: function () {\n      return this._layers;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileProvider.tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileProvider.tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._tileProvider.maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return this._tileProvider.minimumLevel;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tileProvider.tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._tileProvider.rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._tileProvider.tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._tileProvider.errorEvent;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._tileProvider.ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._tileProvider.readyPromise;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._tileProvider.credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return this._tileProvider.hasAlphaChannel;\n    },\n  },\n\n  /**\n   * Gets or sets a value indicating whether feature picking is enabled.  If true, {@link WebMapServiceImageryProvider#pickFeatures} will\n   * invoke the <code>GetFeatureInfo</code> service on the WMS server and attempt to interpret the features included in the response.  If false,\n   * {@link WebMapServiceImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable\n   * features) without communicating with the server.  Set this property to false if you know your data\n   * source does not support picking features or if you don't want this provider's features to be pickable.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Boolean}\n   * @default true\n   */\n  enablePickFeatures: {\n    get: function () {\n      return this._tileProvider.enablePickFeatures;\n    },\n    set: function (enablePickFeatures) {\n      this._tileProvider.enablePickFeatures = enablePickFeatures;\n    },\n  },\n\n  /**\n   * Gets or sets a clock that is used to get keep the time used for time dynamic parameters.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Clock}\n   */\n  clock: {\n    get: function () {\n      return this._timeDynamicImagery.clock;\n    },\n    set: function (value) {\n      this._timeDynamicImagery.clock = value;\n    },\n  },\n  /**\n   * Gets or sets a time interval collection that is used to get time dynamic parameters. The data of each\n   * TimeInterval is an object containing the keys and values of the properties that are used during\n   * tile requests.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {TimeIntervalCollection}\n   */\n  times: {\n    get: function () {\n      return this._timeDynamicImagery.times;\n    },\n    set: function (value) {\n      this._timeDynamicImagery.times = value;\n    },\n  },\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\nWebMapServiceImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return this._tileProvider.getTileCredits(x, y, level);\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<Image|Canvas>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\nWebMapServiceImageryProvider.prototype.requestImage = function (\n  x,\n  y,\n  level,\n  request\n) {\n  var result;\n  var timeDynamicImagery = this._timeDynamicImagery;\n  var currentInterval;\n\n  // Try and load from cache\n  if (defined(timeDynamicImagery)) {\n    currentInterval = timeDynamicImagery.currentInterval;\n    result = timeDynamicImagery.getFromCache(x, y, level, request);\n  }\n\n  // Couldn't load from cache\n  if (!defined(result)) {\n    result = requestImage(this, x, y, level, request, currentInterval);\n  }\n\n  // If we are approaching an interval, preload this tile in the next interval\n  if (defined(result) && defined(timeDynamicImagery)) {\n    timeDynamicImagery.checkApproachingInterval(x, y, level, request);\n  }\n\n  return result;\n};\n\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.  This function should not be called before {@link ImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *\n * @exception {DeveloperError} <code>pickFeatures</code> must not be called before the imagery provider is ready.\n */\nWebMapServiceImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude\n) {\n  var timeDynamicImagery = this._timeDynamicImagery;\n  var currentInterval = defined(timeDynamicImagery)\n    ? timeDynamicImagery.currentInterval\n    : undefined;\n\n  return pickFeatures(this, x, y, level, longitude, latitude, currentInterval);\n};\n\n/**\n * The default parameters to include in the WMS URL to obtain images.  The values are as follows:\n *    service=WMS\n *    version=1.1.1\n *    request=GetMap\n *    styles=\n *    format=image/jpeg\n *\n * @constant\n * @type {Object}\n */\nWebMapServiceImageryProvider.DefaultParameters = Object.freeze({\n  service: \"WMS\",\n  version: \"1.1.1\",\n  request: \"GetMap\",\n  styles: \"\",\n  format: \"image/jpeg\",\n});\n\n/**\n * The default parameters to include in the WMS URL to get feature information.  The values are as follows:\n *     service=WMS\n *     version=1.1.1\n *     request=GetFeatureInfo\n *\n * @constant\n * @type {Object}\n */\nWebMapServiceImageryProvider.GetFeatureInfoDefaultParameters = Object.freeze({\n  service: \"WMS\",\n  version: \"1.1.1\",\n  request: \"GetFeatureInfo\",\n});\n\nWebMapServiceImageryProvider.DefaultGetFeatureInfoFormats = Object.freeze([\n  Object.freeze(new GetFeatureInfoFormat(\"json\", \"application/json\")),\n  Object.freeze(new GetFeatureInfoFormat(\"xml\", \"text/xml\")),\n  Object.freeze(new GetFeatureInfoFormat(\"text\", \"text/html\")),\n]);\n\nfunction objectToLowercase(obj) {\n  var result = {};\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      result[key.toLowerCase()] = obj[key];\n    }\n  }\n  return result;\n}\nexport default WebMapServiceImageryProvider;\n"]},"metadata":{},"sourceType":"module"}