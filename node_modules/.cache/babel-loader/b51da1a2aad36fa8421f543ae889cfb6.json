{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\n/**\n * A feature of a {@link Cesium3DTileset}.\n * <p>\n * Provides access to a feature's properties stored in the tile's batch table, as well\n * as the ability to show/hide a feature and change its highlight color via\n * {@link Cesium3DTileFeature#show} and {@link Cesium3DTileFeature#color}, respectively.\n * </p>\n * <p>\n * Modifications to a <code>Cesium3DTileFeature</code> object have the lifetime of the tile's\n * content.  If the tile's content is unloaded, e.g., due to it going out of view and needing\n * to free space in the cache for visible tiles, listen to the {@link Cesium3DTileset#tileUnload} event to save any\n * modifications. Also listen to the {@link Cesium3DTileset#tileVisible} event to reapply any modifications.\n * </p>\n * <p>\n * Do not construct this directly.  Access it through {@link Cesium3DTileContent#getFeature}\n * or picking using {@link Scene#pick} and {@link Scene#pickPosition}.\n * </p>\n *\n * @alias Cesium3DTileFeature\n * @constructor\n *\n * @example\n * // On mouse over, display all the properties for a feature in the console log.\n * handler.setInputAction(function(movement) {\n *     var feature = scene.pick(movement.endPosition);\n *     if (feature instanceof Cesium.Cesium3DTileFeature) {\n *         var propertyNames = feature.getPropertyNames();\n *         var length = propertyNames.length;\n *         for (var i = 0; i < length; ++i) {\n *             var propertyName = propertyNames[i];\n *             console.log(propertyName + ': ' + feature.getProperty(propertyName));\n *         }\n *     }\n * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n */\n\nfunction Cesium3DTileFeature(content, batchId) {\n  this._content = content;\n  this._batchId = batchId;\n  this._color = undefined; // for calling getColor\n}\n\nObject.defineProperties(Cesium3DTileFeature.prototype, {\n  /**\n   * Gets or sets if the feature will be shown. This is set for all features\n   * when a style's show is evaluated.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  show: {\n    get: function get() {\n      return this._content.batchTable.getShow(this._batchId);\n    },\n    set: function set(value) {\n      this._content.batchTable.setShow(this._batchId, value);\n    }\n  },\n\n  /**\n   * Gets or sets the highlight color multiplied with the feature's color.  When\n   * this is white, the feature's color is not changed. This is set for all features\n   * when a style's color is evaluated.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {Color}\n   *\n   * @default {@link Color.WHITE}\n   */\n  color: {\n    get: function get() {\n      if (!defined(this._color)) {\n        this._color = new Color();\n      }\n\n      return this._content.batchTable.getColor(this._batchId, this._color);\n    },\n    set: function set(value) {\n      this._content.batchTable.setColor(this._batchId, value);\n    }\n  },\n\n  /**\n   * Gets the content of the tile containing the feature.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {Cesium3DTileContent}\n   *\n   * @readonly\n   * @private\n   */\n  content: {\n    get: function get() {\n      return this._content;\n    }\n  },\n\n  /**\n   * Gets the tileset containing the feature.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {Cesium3DTileset}\n   *\n   * @readonly\n   */\n  tileset: {\n    get: function get() {\n      return this._content.tileset;\n    }\n  },\n\n  /**\n   * All objects returned by {@link Scene#pick} have a <code>primitive</code> property. This returns\n   * the tileset containing the feature.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {Cesium3DTileset}\n   *\n   * @readonly\n   */\n  primitive: {\n    get: function get() {\n      return this._content.tileset;\n    }\n  },\n\n  /**\n   * @private\n   */\n  pickId: {\n    get: function get() {\n      return this._content.batchTable.getPickColor(this._batchId);\n    }\n  }\n});\n/**\n * Returns whether the feature contains this property. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {String} name The case-sensitive name of the property.\n * @returns {Boolean} Whether the feature contains this property.\n */\n\nCesium3DTileFeature.prototype.hasProperty = function (name) {\n  return this._content.batchTable.hasProperty(this._batchId, name);\n};\n/**\n * Returns an array of property names for the feature. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {String[]} results An array into which to store the results.\n * @returns {String[]} The names of the feature's properties.\n */\n\n\nCesium3DTileFeature.prototype.getPropertyNames = function (results) {\n  return this._content.batchTable.getPropertyNames(this._batchId, results);\n};\n/**\n * Returns a copy of the value of the feature's property with the given name. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {String} name The case-sensitive name of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the property does not exist.\n *\n * @example\n * // Display all the properties for a feature in the console log.\n * var propertyNames = feature.getPropertyNames();\n * var length = propertyNames.length;\n * for (var i = 0; i < length; ++i) {\n *     var propertyName = propertyNames[i];\n *     console.log(propertyName + ': ' + feature.getProperty(propertyName));\n * }\n */\n\n\nCesium3DTileFeature.prototype.getProperty = function (name) {\n  return this._content.batchTable.getProperty(this._batchId, name);\n};\n/**\n * Sets the value of the feature's property with the given name.\n * <p>\n * If a property with the given name doesn't exist, it is created.\n * </p>\n *\n * @param {String} name The case-sensitive name of the property.\n * @param {*} value The value of the property that will be copied.\n *\n * @exception {DeveloperError} Inherited batch table hierarchy property is read only.\n *\n * @example\n * var height = feature.getProperty('Height'); // e.g., the height of a building\n *\n * @example\n * var name = 'clicked';\n * if (feature.getProperty(name)) {\n *     console.log('already clicked');\n * } else {\n *     feature.setProperty(name, true);\n *     console.log('first click');\n * }\n */\n\n\nCesium3DTileFeature.prototype.setProperty = function (name, value) {\n  this._content.batchTable.setProperty(this._batchId, name, value); // PERFORMANCE_IDEA: Probably overkill, but maybe only mark the tile dirty if the\n  // property is in one of the style's expressions or - if it can be done quickly -\n  // if the new property value changed the result of an expression.\n\n\n  this._content.featurePropertiesDirty = true;\n};\n/**\n * Returns whether the feature's class name equals <code>className</code>. Unlike {@link Cesium3DTileFeature#isClass}\n * this function only checks the feature's exact class and not inherited classes.\n * <p>\n * This function returns <code>false</code> if no batch table hierarchy is present.\n * </p>\n *\n * @param {String} className The name to check against.\n * @returns {Boolean} Whether the feature's class name equals <code>className</code>\n *\n * @private\n */\n\n\nCesium3DTileFeature.prototype.isExactClass = function (className) {\n  return this._content.batchTable.isExactClass(this._batchId, className);\n};\n/**\n * Returns whether the feature's class or any inherited classes are named <code>className</code>.\n * <p>\n * This function returns <code>false</code> if no batch table hierarchy is present.\n * </p>\n *\n * @param {String} className The name to check against.\n * @returns {Boolean} Whether the feature's class or inherited classes are named <code>className</code>\n *\n * @private\n */\n\n\nCesium3DTileFeature.prototype.isClass = function (className) {\n  return this._content.batchTable.isClass(this._batchId, className);\n};\n/**\n * Returns the feature's class name.\n * <p>\n * This function returns <code>undefined</code> if no batch table hierarchy is present.\n * </p>\n *\n * @returns {String} The feature's class name.\n *\n * @private\n */\n\n\nCesium3DTileFeature.prototype.getExactClassName = function () {\n  return this._content.batchTable.getExactClassName(this._batchId);\n};\n\nexport default Cesium3DTileFeature;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/Cesium3DTileFeature.js"],"names":["Color","defined","Cesium3DTileFeature","content","batchId","_content","_batchId","_color","undefined","Object","defineProperties","prototype","show","get","batchTable","getShow","set","value","setShow","color","getColor","setColor","tileset","primitive","pickId","getPickColor","hasProperty","name","getPropertyNames","results","getProperty","setProperty","featurePropertiesDirty","isExactClass","className","isClass","getExactClassName"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,SAASC,mBAAT,CAA6BC,OAA7B,EAAsCC,OAAtC,EAA+C;AAC7C,OAAKC,QAAL,GAAgBF,OAAhB;AACA,OAAKG,QAAL,GAAgBF,OAAhB;AACA,OAAKG,MAAL,GAAcC,SAAd,CAH6C,CAGpB;AAC1B;;AAEDC,MAAM,CAACC,gBAAP,CAAwBR,mBAAmB,CAACS,SAA5C,EAAuD;AACrD;;;;;;;;;;AAUAC,EAAAA,IAAI,EAAE;AACJC,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKR,QAAL,CAAcS,UAAd,CAAyBC,OAAzB,CAAiC,KAAKT,QAAtC,CAAP;AACD,KAHG;AAIJU,IAAAA,GAAG,EAAE,aAAUC,KAAV,EAAiB;AACpB,WAAKZ,QAAL,CAAcS,UAAd,CAAyBI,OAAzB,CAAiC,KAAKZ,QAAtC,EAAgDW,KAAhD;AACD;AANG,GAX+C;;AAoBrD;;;;;;;;;;;AAWAE,EAAAA,KAAK,EAAE;AACLN,IAAAA,GAAG,EAAE,eAAY;AACf,UAAI,CAACZ,OAAO,CAAC,KAAKM,MAAN,CAAZ,EAA2B;AACzB,aAAKA,MAAL,GAAc,IAAIP,KAAJ,EAAd;AACD;;AACD,aAAO,KAAKK,QAAL,CAAcS,UAAd,CAAyBM,QAAzB,CAAkC,KAAKd,QAAvC,EAAiD,KAAKC,MAAtD,CAAP;AACD,KANI;AAOLS,IAAAA,GAAG,EAAE,aAAUC,KAAV,EAAiB;AACpB,WAAKZ,QAAL,CAAcS,UAAd,CAAyBO,QAAzB,CAAkC,KAAKf,QAAvC,EAAiDW,KAAjD;AACD;AATI,GA/B8C;;AA2CrD;;;;;;;;;;AAUAd,EAAAA,OAAO,EAAE;AACPU,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKR,QAAZ;AACD;AAHM,GArD4C;;AA2DrD;;;;;;;;;AASAiB,EAAAA,OAAO,EAAE;AACPT,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKR,QAAL,CAAciB,OAArB;AACD;AAHM,GApE4C;;AA0ErD;;;;;;;;;;AAUAC,EAAAA,SAAS,EAAE;AACTV,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKR,QAAL,CAAciB,OAArB;AACD;AAHQ,GApF0C;;AA0FrD;;;AAGAE,EAAAA,MAAM,EAAE;AACNX,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKR,QAAL,CAAcS,UAAd,CAAyBW,YAAzB,CAAsC,KAAKnB,QAA3C,CAAP;AACD;AAHK;AA7F6C,CAAvD;AAoGA;;;;;;;;;;AASAJ,mBAAmB,CAACS,SAApB,CAA8Be,WAA9B,GAA4C,UAAUC,IAAV,EAAgB;AAC1D,SAAO,KAAKtB,QAAL,CAAcS,UAAd,CAAyBY,WAAzB,CAAqC,KAAKpB,QAA1C,EAAoDqB,IAApD,CAAP;AACD,CAFD;AAIA;;;;;;;;;;;AASAzB,mBAAmB,CAACS,SAApB,CAA8BiB,gBAA9B,GAAiD,UAAUC,OAAV,EAAmB;AAClE,SAAO,KAAKxB,QAAL,CAAcS,UAAd,CAAyBc,gBAAzB,CAA0C,KAAKtB,QAA/C,EAAyDuB,OAAzD,CAAP;AACD,CAFD;AAIA;;;;;;;;;;;;;;;;;;;;AAkBA3B,mBAAmB,CAACS,SAApB,CAA8BmB,WAA9B,GAA4C,UAAUH,IAAV,EAAgB;AAC1D,SAAO,KAAKtB,QAAL,CAAcS,UAAd,CAAyBgB,WAAzB,CAAqC,KAAKxB,QAA1C,EAAoDqB,IAApD,CAAP;AACD,CAFD;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;AAuBAzB,mBAAmB,CAACS,SAApB,CAA8BoB,WAA9B,GAA4C,UAAUJ,IAAV,EAAgBV,KAAhB,EAAuB;AACjE,OAAKZ,QAAL,CAAcS,UAAd,CAAyBiB,WAAzB,CAAqC,KAAKzB,QAA1C,EAAoDqB,IAApD,EAA0DV,KAA1D,EADiE,CAGjE;AACA;AACA;;;AACA,OAAKZ,QAAL,CAAc2B,sBAAd,GAAuC,IAAvC;AACD,CAPD;AASA;;;;;;;;;;;;;;AAYA9B,mBAAmB,CAACS,SAApB,CAA8BsB,YAA9B,GAA6C,UAAUC,SAAV,EAAqB;AAChE,SAAO,KAAK7B,QAAL,CAAcS,UAAd,CAAyBmB,YAAzB,CAAsC,KAAK3B,QAA3C,EAAqD4B,SAArD,CAAP;AACD,CAFD;AAIA;;;;;;;;;;;;;AAWAhC,mBAAmB,CAACS,SAApB,CAA8BwB,OAA9B,GAAwC,UAAUD,SAAV,EAAqB;AAC3D,SAAO,KAAK7B,QAAL,CAAcS,UAAd,CAAyBqB,OAAzB,CAAiC,KAAK7B,QAAtC,EAAgD4B,SAAhD,CAAP;AACD,CAFD;AAIA;;;;;;;;;;;;AAUAhC,mBAAmB,CAACS,SAApB,CAA8ByB,iBAA9B,GAAkD,YAAY;AAC5D,SAAO,KAAK/B,QAAL,CAAcS,UAAd,CAAyBsB,iBAAzB,CAA2C,KAAK9B,QAAhD,CAAP;AACD,CAFD;;AAGA,eAAeJ,mBAAf","sourcesContent":["import Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\n\n/**\n * A feature of a {@link Cesium3DTileset}.\n * <p>\n * Provides access to a feature's properties stored in the tile's batch table, as well\n * as the ability to show/hide a feature and change its highlight color via\n * {@link Cesium3DTileFeature#show} and {@link Cesium3DTileFeature#color}, respectively.\n * </p>\n * <p>\n * Modifications to a <code>Cesium3DTileFeature</code> object have the lifetime of the tile's\n * content.  If the tile's content is unloaded, e.g., due to it going out of view and needing\n * to free space in the cache for visible tiles, listen to the {@link Cesium3DTileset#tileUnload} event to save any\n * modifications. Also listen to the {@link Cesium3DTileset#tileVisible} event to reapply any modifications.\n * </p>\n * <p>\n * Do not construct this directly.  Access it through {@link Cesium3DTileContent#getFeature}\n * or picking using {@link Scene#pick} and {@link Scene#pickPosition}.\n * </p>\n *\n * @alias Cesium3DTileFeature\n * @constructor\n *\n * @example\n * // On mouse over, display all the properties for a feature in the console log.\n * handler.setInputAction(function(movement) {\n *     var feature = scene.pick(movement.endPosition);\n *     if (feature instanceof Cesium.Cesium3DTileFeature) {\n *         var propertyNames = feature.getPropertyNames();\n *         var length = propertyNames.length;\n *         for (var i = 0; i < length; ++i) {\n *             var propertyName = propertyNames[i];\n *             console.log(propertyName + ': ' + feature.getProperty(propertyName));\n *         }\n *     }\n * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n */\nfunction Cesium3DTileFeature(content, batchId) {\n  this._content = content;\n  this._batchId = batchId;\n  this._color = undefined; // for calling getColor\n}\n\nObject.defineProperties(Cesium3DTileFeature.prototype, {\n  /**\n   * Gets or sets if the feature will be shown. This is set for all features\n   * when a style's show is evaluated.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  show: {\n    get: function () {\n      return this._content.batchTable.getShow(this._batchId);\n    },\n    set: function (value) {\n      this._content.batchTable.setShow(this._batchId, value);\n    },\n  },\n\n  /**\n   * Gets or sets the highlight color multiplied with the feature's color.  When\n   * this is white, the feature's color is not changed. This is set for all features\n   * when a style's color is evaluated.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {Color}\n   *\n   * @default {@link Color.WHITE}\n   */\n  color: {\n    get: function () {\n      if (!defined(this._color)) {\n        this._color = new Color();\n      }\n      return this._content.batchTable.getColor(this._batchId, this._color);\n    },\n    set: function (value) {\n      this._content.batchTable.setColor(this._batchId, value);\n    },\n  },\n\n  /**\n   * Gets the content of the tile containing the feature.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {Cesium3DTileContent}\n   *\n   * @readonly\n   * @private\n   */\n  content: {\n    get: function () {\n      return this._content;\n    },\n  },\n\n  /**\n   * Gets the tileset containing the feature.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {Cesium3DTileset}\n   *\n   * @readonly\n   */\n  tileset: {\n    get: function () {\n      return this._content.tileset;\n    },\n  },\n\n  /**\n   * All objects returned by {@link Scene#pick} have a <code>primitive</code> property. This returns\n   * the tileset containing the feature.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {Cesium3DTileset}\n   *\n   * @readonly\n   */\n  primitive: {\n    get: function () {\n      return this._content.tileset;\n    },\n  },\n\n  /**\n   * @private\n   */\n  pickId: {\n    get: function () {\n      return this._content.batchTable.getPickColor(this._batchId);\n    },\n  },\n});\n\n/**\n * Returns whether the feature contains this property. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {String} name The case-sensitive name of the property.\n * @returns {Boolean} Whether the feature contains this property.\n */\nCesium3DTileFeature.prototype.hasProperty = function (name) {\n  return this._content.batchTable.hasProperty(this._batchId, name);\n};\n\n/**\n * Returns an array of property names for the feature. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {String[]} results An array into which to store the results.\n * @returns {String[]} The names of the feature's properties.\n */\nCesium3DTileFeature.prototype.getPropertyNames = function (results) {\n  return this._content.batchTable.getPropertyNames(this._batchId, results);\n};\n\n/**\n * Returns a copy of the value of the feature's property with the given name. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {String} name The case-sensitive name of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the property does not exist.\n *\n * @example\n * // Display all the properties for a feature in the console log.\n * var propertyNames = feature.getPropertyNames();\n * var length = propertyNames.length;\n * for (var i = 0; i < length; ++i) {\n *     var propertyName = propertyNames[i];\n *     console.log(propertyName + ': ' + feature.getProperty(propertyName));\n * }\n */\nCesium3DTileFeature.prototype.getProperty = function (name) {\n  return this._content.batchTable.getProperty(this._batchId, name);\n};\n\n/**\n * Sets the value of the feature's property with the given name.\n * <p>\n * If a property with the given name doesn't exist, it is created.\n * </p>\n *\n * @param {String} name The case-sensitive name of the property.\n * @param {*} value The value of the property that will be copied.\n *\n * @exception {DeveloperError} Inherited batch table hierarchy property is read only.\n *\n * @example\n * var height = feature.getProperty('Height'); // e.g., the height of a building\n *\n * @example\n * var name = 'clicked';\n * if (feature.getProperty(name)) {\n *     console.log('already clicked');\n * } else {\n *     feature.setProperty(name, true);\n *     console.log('first click');\n * }\n */\nCesium3DTileFeature.prototype.setProperty = function (name, value) {\n  this._content.batchTable.setProperty(this._batchId, name, value);\n\n  // PERFORMANCE_IDEA: Probably overkill, but maybe only mark the tile dirty if the\n  // property is in one of the style's expressions or - if it can be done quickly -\n  // if the new property value changed the result of an expression.\n  this._content.featurePropertiesDirty = true;\n};\n\n/**\n * Returns whether the feature's class name equals <code>className</code>. Unlike {@link Cesium3DTileFeature#isClass}\n * this function only checks the feature's exact class and not inherited classes.\n * <p>\n * This function returns <code>false</code> if no batch table hierarchy is present.\n * </p>\n *\n * @param {String} className The name to check against.\n * @returns {Boolean} Whether the feature's class name equals <code>className</code>\n *\n * @private\n */\nCesium3DTileFeature.prototype.isExactClass = function (className) {\n  return this._content.batchTable.isExactClass(this._batchId, className);\n};\n\n/**\n * Returns whether the feature's class or any inherited classes are named <code>className</code>.\n * <p>\n * This function returns <code>false</code> if no batch table hierarchy is present.\n * </p>\n *\n * @param {String} className The name to check against.\n * @returns {Boolean} Whether the feature's class or inherited classes are named <code>className</code>\n *\n * @private\n */\nCesium3DTileFeature.prototype.isClass = function (className) {\n  return this._content.batchTable.isClass(this._batchId, className);\n};\n\n/**\n * Returns the feature's class name.\n * <p>\n * This function returns <code>undefined</code> if no batch table hierarchy is present.\n * </p>\n *\n * @returns {String} The feature's class name.\n *\n * @private\n */\nCesium3DTileFeature.prototype.getExactClassName = function () {\n  return this._content.batchTable.getExactClassName(this._batchId);\n};\nexport default Cesium3DTileFeature;\n"]},"metadata":{},"sourceType":"module"}