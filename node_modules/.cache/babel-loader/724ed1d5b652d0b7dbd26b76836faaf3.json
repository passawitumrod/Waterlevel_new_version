{"ast":null,"code":"import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n/**\n * A collection of key-value pairs that is stored as a hash for easy\n * lookup but also provides an array for fast iteration.\n * @alias AssociativeArray\n * @constructor\n */\n\nfunction AssociativeArray() {\n  this._array = [];\n  this._hash = {};\n}\n\nObject.defineProperties(AssociativeArray.prototype, {\n  /**\n   * Gets the number of items in the collection.\n   * @memberof AssociativeArray.prototype\n   *\n   * @type {Number}\n   */\n  length: {\n    get: function () {\n      return this._array.length;\n    }\n  },\n\n  /**\n   * Gets an unordered array of all values in the collection.\n   * This is a live array that will automatically reflect the values in the collection,\n   * it should not be modified directly.\n   * @memberof AssociativeArray.prototype\n   *\n   * @type {Array}\n   */\n  values: {\n    get: function () {\n      return this._array;\n    }\n  }\n});\n/**\n * Determines if the provided key is in the array.\n *\n * @param {String|Number} key The key to check.\n * @returns {Boolean} <code>true</code> if the key is in the array, <code>false</code> otherwise.\n */\n\nAssociativeArray.prototype.contains = function (key) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof key !== \"string\" && typeof key !== \"number\") {\n    throw new DeveloperError(\"key is required to be a string or number.\");\n  } //>>includeEnd('debug');\n\n\n  return defined(this._hash[key]);\n};\n/**\n * Associates the provided key with the provided value.  If the key already\n * exists, it is overwritten with the new value.\n *\n * @param {String|Number} key A unique identifier.\n * @param {*} value The value to associate with the provided key.\n */\n\n\nAssociativeArray.prototype.set = function (key, value) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof key !== \"string\" && typeof key !== \"number\") {\n    throw new DeveloperError(\"key is required to be a string or number.\");\n  } //>>includeEnd('debug');\n\n\n  var oldValue = this._hash[key];\n\n  if (value !== oldValue) {\n    this.remove(key);\n    this._hash[key] = value;\n\n    this._array.push(value);\n  }\n};\n/**\n * Retrieves the value associated with the provided key.\n *\n * @param {String|Number} key The key whose value is to be retrieved.\n * @returns {*} The associated value, or undefined if the key does not exist in the collection.\n */\n\n\nAssociativeArray.prototype.get = function (key) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof key !== \"string\" && typeof key !== \"number\") {\n    throw new DeveloperError(\"key is required to be a string or number.\");\n  } //>>includeEnd('debug');\n\n\n  return this._hash[key];\n};\n/**\n * Removes a key-value pair from the collection.\n *\n * @param {String|Number} key The key to be removed.\n * @returns {Boolean} True if it was removed, false if the key was not in the collection.\n */\n\n\nAssociativeArray.prototype.remove = function (key) {\n  //>>includeStart('debug', pragmas.debug);\n  if (defined(key) && typeof key !== \"string\" && typeof key !== \"number\") {\n    throw new DeveloperError(\"key is required to be a string or number.\");\n  } //>>includeEnd('debug');\n\n\n  var value = this._hash[key];\n  var hasValue = defined(value);\n\n  if (hasValue) {\n    var array = this._array;\n    array.splice(array.indexOf(value), 1);\n    delete this._hash[key];\n  }\n\n  return hasValue;\n};\n/**\n * Clears the collection.\n */\n\n\nAssociativeArray.prototype.removeAll = function () {\n  var array = this._array;\n\n  if (array.length > 0) {\n    this._hash = {};\n    array.length = 0;\n  }\n};\n\nexport default AssociativeArray;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/AssociativeArray.js"],"names":["defined","DeveloperError","AssociativeArray","_array","_hash","Object","defineProperties","prototype","length","get","values","contains","key","set","value","oldValue","remove","push","hasValue","array","splice","indexOf","removeAll"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AAEA;;;;;;;AAMA,SAASC,gBAAT,GAA4B;AAC1B,OAAKC,MAAL,GAAc,EAAd;AACA,OAAKC,KAAL,GAAa,EAAb;AACD;;AAEDC,MAAM,CAACC,gBAAP,CAAwBJ,gBAAgB,CAACK,SAAzC,EAAoD;AAClD;;;;;;AAMAC,EAAAA,MAAM,EAAE;AACNC,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKN,MAAL,CAAYK,MAAnB;AACD;AAHK,GAP0C;;AAYlD;;;;;;;;AAQAE,EAAAA,MAAM,EAAE;AACND,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKN,MAAZ;AACD;AAHK;AApB0C,CAApD;AA2BA;;;;;;;AAMAD,gBAAgB,CAACK,SAAjB,CAA2BI,QAA3B,GAAsC,UAAUC,GAAV,EAAe;AACnD;AACA,MAAI,OAAOA,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,QAA9C,EAAwD;AACtD,UAAM,IAAIX,cAAJ,CAAmB,2CAAnB,CAAN;AACD,GAJkD,CAKnD;;;AACA,SAAOD,OAAO,CAAC,KAAKI,KAAL,CAAWQ,GAAX,CAAD,CAAd;AACD,CAPD;AASA;;;;;;;;;AAOAV,gBAAgB,CAACK,SAAjB,CAA2BM,GAA3B,GAAiC,UAAUD,GAAV,EAAeE,KAAf,EAAsB;AACrD;AACA,MAAI,OAAOF,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,QAA9C,EAAwD;AACtD,UAAM,IAAIX,cAAJ,CAAmB,2CAAnB,CAAN;AACD,GAJoD,CAKrD;;;AAEA,MAAIc,QAAQ,GAAG,KAAKX,KAAL,CAAWQ,GAAX,CAAf;;AACA,MAAIE,KAAK,KAAKC,QAAd,EAAwB;AACtB,SAAKC,MAAL,CAAYJ,GAAZ;AACA,SAAKR,KAAL,CAAWQ,GAAX,IAAkBE,KAAlB;;AACA,SAAKX,MAAL,CAAYc,IAAZ,CAAiBH,KAAjB;AACD;AACF,CAbD;AAeA;;;;;;;;AAMAZ,gBAAgB,CAACK,SAAjB,CAA2BE,GAA3B,GAAiC,UAAUG,GAAV,EAAe;AAC9C;AACA,MAAI,OAAOA,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,QAA9C,EAAwD;AACtD,UAAM,IAAIX,cAAJ,CAAmB,2CAAnB,CAAN;AACD,GAJ6C,CAK9C;;;AACA,SAAO,KAAKG,KAAL,CAAWQ,GAAX,CAAP;AACD,CAPD;AASA;;;;;;;;AAMAV,gBAAgB,CAACK,SAAjB,CAA2BS,MAA3B,GAAoC,UAAUJ,GAAV,EAAe;AACjD;AACA,MAAIZ,OAAO,CAACY,GAAD,CAAP,IAAgB,OAAOA,GAAP,KAAe,QAA/B,IAA2C,OAAOA,GAAP,KAAe,QAA9D,EAAwE;AACtE,UAAM,IAAIX,cAAJ,CAAmB,2CAAnB,CAAN;AACD,GAJgD,CAKjD;;;AAEA,MAAIa,KAAK,GAAG,KAAKV,KAAL,CAAWQ,GAAX,CAAZ;AACA,MAAIM,QAAQ,GAAGlB,OAAO,CAACc,KAAD,CAAtB;;AACA,MAAII,QAAJ,EAAc;AACZ,QAAIC,KAAK,GAAG,KAAKhB,MAAjB;AACAgB,IAAAA,KAAK,CAACC,MAAN,CAAaD,KAAK,CAACE,OAAN,CAAcP,KAAd,CAAb,EAAmC,CAAnC;AACA,WAAO,KAAKV,KAAL,CAAWQ,GAAX,CAAP;AACD;;AACD,SAAOM,QAAP;AACD,CAfD;AAiBA;;;;;AAGAhB,gBAAgB,CAACK,SAAjB,CAA2Be,SAA3B,GAAuC,YAAY;AACjD,MAAIH,KAAK,GAAG,KAAKhB,MAAjB;;AACA,MAAIgB,KAAK,CAACX,MAAN,GAAe,CAAnB,EAAsB;AACpB,SAAKJ,KAAL,GAAa,EAAb;AACAe,IAAAA,KAAK,CAACX,MAAN,GAAe,CAAf;AACD;AACF,CAND;;AAOA,eAAeN,gBAAf","sourcesContent":["import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * A collection of key-value pairs that is stored as a hash for easy\n * lookup but also provides an array for fast iteration.\n * @alias AssociativeArray\n * @constructor\n */\nfunction AssociativeArray() {\n  this._array = [];\n  this._hash = {};\n}\n\nObject.defineProperties(AssociativeArray.prototype, {\n  /**\n   * Gets the number of items in the collection.\n   * @memberof AssociativeArray.prototype\n   *\n   * @type {Number}\n   */\n  length: {\n    get: function () {\n      return this._array.length;\n    },\n  },\n  /**\n   * Gets an unordered array of all values in the collection.\n   * This is a live array that will automatically reflect the values in the collection,\n   * it should not be modified directly.\n   * @memberof AssociativeArray.prototype\n   *\n   * @type {Array}\n   */\n  values: {\n    get: function () {\n      return this._array;\n    },\n  },\n});\n\n/**\n * Determines if the provided key is in the array.\n *\n * @param {String|Number} key The key to check.\n * @returns {Boolean} <code>true</code> if the key is in the array, <code>false</code> otherwise.\n */\nAssociativeArray.prototype.contains = function (key) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof key !== \"string\" && typeof key !== \"number\") {\n    throw new DeveloperError(\"key is required to be a string or number.\");\n  }\n  //>>includeEnd('debug');\n  return defined(this._hash[key]);\n};\n\n/**\n * Associates the provided key with the provided value.  If the key already\n * exists, it is overwritten with the new value.\n *\n * @param {String|Number} key A unique identifier.\n * @param {*} value The value to associate with the provided key.\n */\nAssociativeArray.prototype.set = function (key, value) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof key !== \"string\" && typeof key !== \"number\") {\n    throw new DeveloperError(\"key is required to be a string or number.\");\n  }\n  //>>includeEnd('debug');\n\n  var oldValue = this._hash[key];\n  if (value !== oldValue) {\n    this.remove(key);\n    this._hash[key] = value;\n    this._array.push(value);\n  }\n};\n\n/**\n * Retrieves the value associated with the provided key.\n *\n * @param {String|Number} key The key whose value is to be retrieved.\n * @returns {*} The associated value, or undefined if the key does not exist in the collection.\n */\nAssociativeArray.prototype.get = function (key) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof key !== \"string\" && typeof key !== \"number\") {\n    throw new DeveloperError(\"key is required to be a string or number.\");\n  }\n  //>>includeEnd('debug');\n  return this._hash[key];\n};\n\n/**\n * Removes a key-value pair from the collection.\n *\n * @param {String|Number} key The key to be removed.\n * @returns {Boolean} True if it was removed, false if the key was not in the collection.\n */\nAssociativeArray.prototype.remove = function (key) {\n  //>>includeStart('debug', pragmas.debug);\n  if (defined(key) && typeof key !== \"string\" && typeof key !== \"number\") {\n    throw new DeveloperError(\"key is required to be a string or number.\");\n  }\n  //>>includeEnd('debug');\n\n  var value = this._hash[key];\n  var hasValue = defined(value);\n  if (hasValue) {\n    var array = this._array;\n    array.splice(array.indexOf(value), 1);\n    delete this._hash[key];\n  }\n  return hasValue;\n};\n\n/**\n * Clears the collection.\n */\nAssociativeArray.prototype.removeAll = function () {\n  var array = this._array;\n  if (array.length > 0) {\n    this._hash = {};\n    array.length = 0;\n  }\n};\nexport default AssociativeArray;\n"]},"metadata":{},"sourceType":"module"}