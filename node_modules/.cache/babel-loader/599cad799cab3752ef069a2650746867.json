{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport PositionProperty from \"./PositionProperty.js\";\n/**\n * A {@link PositionProperty} whose value does not change in respect to the\n * {@link ReferenceFrame} in which is it defined.\n *\n * @alias ConstantPositionProperty\n * @constructor\n *\n * @param {Cartesian3} [value] The property value.\n * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n */\n\nfunction ConstantPositionProperty(value, referenceFrame) {\n  this._definitionChanged = new Event();\n  this._value = Cartesian3.clone(value);\n  this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n}\n\nObject.defineProperties(ConstantPositionProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof ConstantPositionProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return !defined(this._value) || this._referenceFrame === ReferenceFrame.FIXED;\n    }\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof ConstantPositionProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets the reference frame in which the position is defined.\n   * @memberof ConstantPositionProperty.prototype\n   * @type {ReferenceFrame}\n   * @default ReferenceFrame.FIXED;\n   */\n  referenceFrame: {\n    get: function () {\n      return this._referenceFrame;\n    }\n  }\n});\n/**\n * Gets the value of the property at the provided time in the fixed frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\nConstantPositionProperty.prototype.getValue = function (time, result) {\n  return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n};\n/**\n * Sets the value of the property.\n *\n * @param {Cartesian3} value The property value.\n * @param {ReferenceFrame} [referenceFrame=this.referenceFrame] The reference frame in which the position is defined.\n */\n\n\nConstantPositionProperty.prototype.setValue = function (value, referenceFrame) {\n  var definitionChanged = false;\n\n  if (!Cartesian3.equals(this._value, value)) {\n    definitionChanged = true;\n    this._value = Cartesian3.clone(value);\n  }\n\n  if (defined(referenceFrame) && this._referenceFrame !== referenceFrame) {\n    definitionChanged = true;\n    this._referenceFrame = referenceFrame;\n  }\n\n  if (definitionChanged) {\n    this._definitionChanged.raiseEvent(this);\n  }\n};\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\n\nConstantPositionProperty.prototype.getValueInReferenceFrame = function (time, referenceFrame, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n\n  if (!defined(referenceFrame)) {\n    throw new DeveloperError(\"referenceFrame is required.\");\n  } //>>includeEnd('debug');\n\n\n  return PositionProperty.convertToReferenceFrame(time, this._value, this._referenceFrame, referenceFrame, result);\n};\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nConstantPositionProperty.prototype.equals = function (other) {\n  return this === other || other instanceof ConstantPositionProperty && Cartesian3.equals(this._value, other._value) && this._referenceFrame === other._referenceFrame;\n};\n\nexport default ConstantPositionProperty;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/ConstantPositionProperty.js"],"names":["Cartesian3","defaultValue","defined","DeveloperError","Event","ReferenceFrame","PositionProperty","ConstantPositionProperty","value","referenceFrame","_definitionChanged","_value","clone","_referenceFrame","FIXED","Object","defineProperties","prototype","isConstant","get","definitionChanged","getValue","time","result","getValueInReferenceFrame","setValue","equals","raiseEvent","convertToReferenceFrame","other"],"mappings":"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","sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport PositionProperty from \"./PositionProperty.js\";\n\n/**\n * A {@link PositionProperty} whose value does not change in respect to the\n * {@link ReferenceFrame} in which is it defined.\n *\n * @alias ConstantPositionProperty\n * @constructor\n *\n * @param {Cartesian3} [value] The property value.\n * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n */\nfunction ConstantPositionProperty(value, referenceFrame) {\n  this._definitionChanged = new Event();\n  this._value = Cartesian3.clone(value);\n  this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n}\n\nObject.defineProperties(ConstantPositionProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof ConstantPositionProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        !defined(this._value) || this._referenceFrame === ReferenceFrame.FIXED\n      );\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof ConstantPositionProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets the reference frame in which the position is defined.\n   * @memberof ConstantPositionProperty.prototype\n   * @type {ReferenceFrame}\n   * @default ReferenceFrame.FIXED;\n   */\n  referenceFrame: {\n    get: function () {\n      return this._referenceFrame;\n    },\n  },\n});\n\n/**\n * Gets the value of the property at the provided time in the fixed frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nConstantPositionProperty.prototype.getValue = function (time, result) {\n  return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n};\n\n/**\n * Sets the value of the property.\n *\n * @param {Cartesian3} value The property value.\n * @param {ReferenceFrame} [referenceFrame=this.referenceFrame] The reference frame in which the position is defined.\n */\nConstantPositionProperty.prototype.setValue = function (value, referenceFrame) {\n  var definitionChanged = false;\n  if (!Cartesian3.equals(this._value, value)) {\n    definitionChanged = true;\n    this._value = Cartesian3.clone(value);\n  }\n  if (defined(referenceFrame) && this._referenceFrame !== referenceFrame) {\n    definitionChanged = true;\n    this._referenceFrame = referenceFrame;\n  }\n  if (definitionChanged) {\n    this._definitionChanged.raiseEvent(this);\n  }\n};\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nConstantPositionProperty.prototype.getValueInReferenceFrame = function (\n  time,\n  referenceFrame,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  if (!defined(referenceFrame)) {\n    throw new DeveloperError(\"referenceFrame is required.\");\n  }\n  //>>includeEnd('debug');\n\n  return PositionProperty.convertToReferenceFrame(\n    time,\n    this._value,\n    this._referenceFrame,\n    referenceFrame,\n    result\n  );\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nConstantPositionProperty.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (other instanceof ConstantPositionProperty &&\n      Cartesian3.equals(this._value, other._value) &&\n      this._referenceFrame === other._referenceFrame)\n  );\n};\nexport default ConstantPositionProperty;\n"]},"metadata":{},"sourceType":"module"}