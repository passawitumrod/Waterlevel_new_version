{"ast":null,"code":"import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport HorizontalOrigin from \"../Scene/HorizontalOrigin.js\";\nimport LabelStyle from \"../Scene/LabelStyle.js\";\nimport VerticalOrigin from \"../Scene/VerticalOrigin.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\nvar defaultScale = 1.0;\nvar defaultFont = \"30px sans-serif\";\nvar defaultStyle = LabelStyle.FILL;\nvar defaultFillColor = Color.WHITE;\nvar defaultOutlineColor = Color.BLACK;\nvar defaultOutlineWidth = 1.0;\nvar defaultShowBackground = false;\nvar defaultBackgroundColor = new Color(0.165, 0.165, 0.165, 0.8);\nvar defaultBackgroundPadding = new Cartesian2(7, 5);\nvar defaultPixelOffset = Cartesian2.ZERO;\nvar defaultEyeOffset = Cartesian3.ZERO;\nvar defaultHeightReference = HeightReference.NONE;\nvar defaultHorizontalOrigin = HorizontalOrigin.CENTER;\nvar defaultVerticalOrigin = VerticalOrigin.CENTER;\nvar positionScratch = new Cartesian3();\nvar fillColorScratch = new Color();\nvar outlineColorScratch = new Color();\nvar backgroundColorScratch = new Color();\nvar backgroundPaddingScratch = new Cartesian2();\nvar eyeOffsetScratch = new Cartesian3();\nvar pixelOffsetScratch = new Cartesian2();\nvar translucencyByDistanceScratch = new NearFarScalar();\nvar pixelOffsetScaleByDistanceScratch = new NearFarScalar();\nvar scaleByDistanceScratch = new NearFarScalar();\nvar distanceDisplayConditionScratch = new DistanceDisplayCondition();\n\nfunction EntityData(entity) {\n  this.entity = entity;\n  this.label = undefined;\n  this.index = undefined;\n}\n/**\n * A {@link Visualizer} which maps the {@link LabelGraphics} instance\n * in {@link Entity#label} to a {@link Label}.\n * @alias LabelVisualizer\n * @constructor\n *\n * @param {EntityCluster} entityCluster The entity cluster to manage the collection of billboards and optionally cluster with other entities.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n */\n\n\nfunction LabelVisualizer(entityCluster, entityCollection) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entityCluster)) {\n    throw new DeveloperError(\"entityCluster is required.\");\n  }\n\n  if (!defined(entityCollection)) {\n    throw new DeveloperError(\"entityCollection is required.\");\n  } //>>includeEnd('debug');\n\n\n  entityCollection.collectionChanged.addEventListener(LabelVisualizer.prototype._onCollectionChanged, this);\n  this._cluster = entityCluster;\n  this._entityCollection = entityCollection;\n  this._items = new AssociativeArray();\n\n  this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n}\n/**\n * Updates the primitives created by this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {Boolean} This function always returns true.\n */\n\n\nLabelVisualizer.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  } //>>includeEnd('debug');\n\n\n  var items = this._items.values;\n  var cluster = this._cluster;\n\n  for (var i = 0, len = items.length; i < len; i++) {\n    var item = items[i];\n    var entity = item.entity;\n    var labelGraphics = entity._label;\n    var text;\n    var label = item.label;\n    var show = entity.isShowing && entity.isAvailable(time) && Property.getValueOrDefault(labelGraphics._show, time, true);\n    var position;\n\n    if (show) {\n      position = Property.getValueOrUndefined(entity._position, time, positionScratch);\n      text = Property.getValueOrUndefined(labelGraphics._text, time);\n      show = defined(position) && defined(text);\n    }\n\n    if (!show) {\n      //don't bother creating or updating anything else\n      returnPrimitive(item, entity, cluster);\n      continue;\n    }\n\n    if (!Property.isConstant(entity._position)) {\n      cluster._clusterDirty = true;\n    }\n\n    var updateClamping = false;\n    var heightReference = Property.getValueOrDefault(labelGraphics._heightReference, time, defaultHeightReference);\n\n    if (!defined(label)) {\n      label = cluster.getLabel(entity);\n      label.id = entity;\n      item.label = label; // If this new label happens to have a position and height reference that match our new values,\n      // label._updateClamping will not be called automatically. That's a problem because the clamped\n      // height may be based on different terrain than is now loaded. So we'll manually call\n      // _updateClamping below.\n\n      updateClamping = Cartesian3.equals(label.position, position) && label.heightReference === heightReference;\n    }\n\n    label.show = true;\n    label.position = position;\n    label.text = text;\n    label.scale = Property.getValueOrDefault(labelGraphics._scale, time, defaultScale);\n    label.font = Property.getValueOrDefault(labelGraphics._font, time, defaultFont);\n    label.style = Property.getValueOrDefault(labelGraphics._style, time, defaultStyle);\n    label.fillColor = Property.getValueOrDefault(labelGraphics._fillColor, time, defaultFillColor, fillColorScratch);\n    label.outlineColor = Property.getValueOrDefault(labelGraphics._outlineColor, time, defaultOutlineColor, outlineColorScratch);\n    label.outlineWidth = Property.getValueOrDefault(labelGraphics._outlineWidth, time, defaultOutlineWidth);\n    label.showBackground = Property.getValueOrDefault(labelGraphics._showBackground, time, defaultShowBackground);\n    label.backgroundColor = Property.getValueOrDefault(labelGraphics._backgroundColor, time, defaultBackgroundColor, backgroundColorScratch);\n    label.backgroundPadding = Property.getValueOrDefault(labelGraphics._backgroundPadding, time, defaultBackgroundPadding, backgroundPaddingScratch);\n    label.pixelOffset = Property.getValueOrDefault(labelGraphics._pixelOffset, time, defaultPixelOffset, pixelOffsetScratch);\n    label.eyeOffset = Property.getValueOrDefault(labelGraphics._eyeOffset, time, defaultEyeOffset, eyeOffsetScratch);\n    label.heightReference = heightReference;\n    label.horizontalOrigin = Property.getValueOrDefault(labelGraphics._horizontalOrigin, time, defaultHorizontalOrigin);\n    label.verticalOrigin = Property.getValueOrDefault(labelGraphics._verticalOrigin, time, defaultVerticalOrigin);\n    label.translucencyByDistance = Property.getValueOrUndefined(labelGraphics._translucencyByDistance, time, translucencyByDistanceScratch);\n    label.pixelOffsetScaleByDistance = Property.getValueOrUndefined(labelGraphics._pixelOffsetScaleByDistance, time, pixelOffsetScaleByDistanceScratch);\n    label.scaleByDistance = Property.getValueOrUndefined(labelGraphics._scaleByDistance, time, scaleByDistanceScratch);\n    label.distanceDisplayCondition = Property.getValueOrUndefined(labelGraphics._distanceDisplayCondition, time, distanceDisplayConditionScratch);\n    label.disableDepthTestDistance = Property.getValueOrUndefined(labelGraphics._disableDepthTestDistance, time);\n\n    if (updateClamping) {\n      label._updateClamping();\n    }\n  }\n\n  return true;\n};\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\n\n\nLabelVisualizer.prototype.getBoundingSphere = function (entity, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required.\");\n  }\n\n  if (!defined(result)) {\n    throw new DeveloperError(\"result is required.\");\n  } //>>includeEnd('debug');\n\n\n  var item = this._items.get(entity.id);\n\n  if (!defined(item) || !defined(item.label)) {\n    return BoundingSphereState.FAILED;\n  }\n\n  var label = item.label;\n  result.center = Cartesian3.clone(defaultValue(label._clampedPosition, label.position), result.center);\n  result.radius = 0;\n  return BoundingSphereState.DONE;\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\n\n\nLabelVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Removes and destroys all primitives created by this instance.\n */\n\n\nLabelVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(LabelVisualizer.prototype._onCollectionChanged, this);\n\n  var entities = this._entityCollection.values;\n\n  for (var i = 0; i < entities.length; i++) {\n    this._cluster.removeLabel(entities[i]);\n  }\n\n  return destroyObject(this);\n};\n\nLabelVisualizer.prototype._onCollectionChanged = function (entityCollection, added, removed, changed) {\n  var i;\n  var entity;\n  var items = this._items;\n  var cluster = this._cluster;\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n\n    if (defined(entity._label) && defined(entity._position)) {\n      items.set(entity.id, new EntityData(entity));\n    }\n  }\n\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n\n    if (defined(entity._label) && defined(entity._position)) {\n      if (!items.contains(entity.id)) {\n        items.set(entity.id, new EntityData(entity));\n      }\n    } else {\n      returnPrimitive(items.get(entity.id), entity, cluster);\n      items.remove(entity.id);\n    }\n  }\n\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    returnPrimitive(items.get(entity.id), entity, cluster);\n    items.remove(entity.id);\n  }\n};\n\nfunction returnPrimitive(item, entity, cluster) {\n  if (defined(item)) {\n    item.label = undefined;\n    cluster.removeLabel(entity);\n  }\n}\n\nexport default LabelVisualizer;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/LabelVisualizer.js"],"names":["AssociativeArray","Cartesian2","Cartesian3","Color","defaultValue","defined","destroyObject","DeveloperError","DistanceDisplayCondition","NearFarScalar","HeightReference","HorizontalOrigin","LabelStyle","VerticalOrigin","BoundingSphereState","Property","defaultScale","defaultFont","defaultStyle","FILL","defaultFillColor","WHITE","defaultOutlineColor","BLACK","defaultOutlineWidth","defaultShowBackground","defaultBackgroundColor","defaultBackgroundPadding","defaultPixelOffset","ZERO","defaultEyeOffset","defaultHeightReference","NONE","defaultHorizontalOrigin","CENTER","defaultVerticalOrigin","positionScratch","fillColorScratch","outlineColorScratch","backgroundColorScratch","backgroundPaddingScratch","eyeOffsetScratch","pixelOffsetScratch","translucencyByDistanceScratch","pixelOffsetScaleByDistanceScratch","scaleByDistanceScratch","distanceDisplayConditionScratch","EntityData","entity","label","undefined","index","LabelVisualizer","entityCluster","entityCollection","collectionChanged","addEventListener","prototype","_onCollectionChanged","_cluster","_entityCollection","_items","values","update","time","items","cluster","i","len","length","item","labelGraphics","_label","text","show","isShowing","isAvailable","getValueOrDefault","_show","position","getValueOrUndefined","_position","_text","returnPrimitive","isConstant","_clusterDirty","updateClamping","heightReference","_heightReference","getLabel","id","equals","scale","_scale","font","_font","style","_style","fillColor","_fillColor","outlineColor","_outlineColor","outlineWidth","_outlineWidth","showBackground","_showBackground","backgroundColor","_backgroundColor","backgroundPadding","_backgroundPadding","pixelOffset","_pixelOffset","eyeOffset","_eyeOffset","horizontalOrigin","_horizontalOrigin","verticalOrigin","_verticalOrigin","translucencyByDistance","_translucencyByDistance","pixelOffsetScaleByDistance","_pixelOffsetScaleByDistance","scaleByDistance","_scaleByDistance","distanceDisplayCondition","_distanceDisplayCondition","disableDepthTestDistance","_disableDepthTestDistance","_updateClamping","getBoundingSphere","result","get","FAILED","center","clone","_clampedPosition","radius","DONE","isDestroyed","destroy","removeEventListener","entities","removeLabel","added","removed","changed","set","contains","remove"],"mappings":"AAAA,OAAOA,gBAAP,MAA6B,6BAA7B;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,wBAAP,MAAqC,qCAArC;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,mBAAP,MAAgC,0BAAhC;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA,IAAIC,YAAY,GAAG,GAAnB;AACA,IAAIC,WAAW,GAAG,iBAAlB;AACA,IAAIC,YAAY,GAAGN,UAAU,CAACO,IAA9B;AACA,IAAIC,gBAAgB,GAAGjB,KAAK,CAACkB,KAA7B;AACA,IAAIC,mBAAmB,GAAGnB,KAAK,CAACoB,KAAhC;AACA,IAAIC,mBAAmB,GAAG,GAA1B;AACA,IAAIC,qBAAqB,GAAG,KAA5B;AACA,IAAIC,sBAAsB,GAAG,IAAIvB,KAAJ,CAAU,KAAV,EAAiB,KAAjB,EAAwB,KAAxB,EAA+B,GAA/B,CAA7B;AACA,IAAIwB,wBAAwB,GAAG,IAAI1B,UAAJ,CAAe,CAAf,EAAkB,CAAlB,CAA/B;AACA,IAAI2B,kBAAkB,GAAG3B,UAAU,CAAC4B,IAApC;AACA,IAAIC,gBAAgB,GAAG5B,UAAU,CAAC2B,IAAlC;AACA,IAAIE,sBAAsB,GAAGrB,eAAe,CAACsB,IAA7C;AACA,IAAIC,uBAAuB,GAAGtB,gBAAgB,CAACuB,MAA/C;AACA,IAAIC,qBAAqB,GAAGtB,cAAc,CAACqB,MAA3C;AAEA,IAAIE,eAAe,GAAG,IAAIlC,UAAJ,EAAtB;AACA,IAAImC,gBAAgB,GAAG,IAAIlC,KAAJ,EAAvB;AACA,IAAImC,mBAAmB,GAAG,IAAInC,KAAJ,EAA1B;AACA,IAAIoC,sBAAsB,GAAG,IAAIpC,KAAJ,EAA7B;AACA,IAAIqC,wBAAwB,GAAG,IAAIvC,UAAJ,EAA/B;AACA,IAAIwC,gBAAgB,GAAG,IAAIvC,UAAJ,EAAvB;AACA,IAAIwC,kBAAkB,GAAG,IAAIzC,UAAJ,EAAzB;AACA,IAAI0C,6BAA6B,GAAG,IAAIlC,aAAJ,EAApC;AACA,IAAImC,iCAAiC,GAAG,IAAInC,aAAJ,EAAxC;AACA,IAAIoC,sBAAsB,GAAG,IAAIpC,aAAJ,EAA7B;AACA,IAAIqC,+BAA+B,GAAG,IAAItC,wBAAJ,EAAtC;;AAEA,SAASuC,UAAT,CAAoBC,MAApB,EAA4B;AAC1B,OAAKA,MAAL,GAAcA,MAAd;AACA,OAAKC,KAAL,GAAaC,SAAb;AACA,OAAKC,KAAL,GAAaD,SAAb;AACD;AAED;;;;;;;;;;;AASA,SAASE,eAAT,CAAyBC,aAAzB,EAAwCC,gBAAxC,EAA0D;AACxD;AACA,MAAI,CAACjD,OAAO,CAACgD,aAAD,CAAZ,EAA6B;AAC3B,UAAM,IAAI9C,cAAJ,CAAmB,4BAAnB,CAAN;AACD;;AACD,MAAI,CAACF,OAAO,CAACiD,gBAAD,CAAZ,EAAgC;AAC9B,UAAM,IAAI/C,cAAJ,CAAmB,+BAAnB,CAAN;AACD,GAPuD,CAQxD;;;AAEA+C,EAAAA,gBAAgB,CAACC,iBAAjB,CAAmCC,gBAAnC,CACEJ,eAAe,CAACK,SAAhB,CAA0BC,oBAD5B,EAEE,IAFF;AAKA,OAAKC,QAAL,GAAgBN,aAAhB;AACA,OAAKO,iBAAL,GAAyBN,gBAAzB;AACA,OAAKO,MAAL,GAAc,IAAI7D,gBAAJ,EAAd;;AAEA,OAAK0D,oBAAL,CAA0BJ,gBAA1B,EAA4CA,gBAAgB,CAACQ,MAA7D,EAAqE,EAArE,EAAyE,EAAzE;AACD;AAED;;;;;;;;;AAOAV,eAAe,CAACK,SAAhB,CAA0BM,MAA1B,GAAmC,UAAUC,IAAV,EAAgB;AACjD;AACA,MAAI,CAAC3D,OAAO,CAAC2D,IAAD,CAAZ,EAAoB;AAClB,UAAM,IAAIzD,cAAJ,CAAmB,mBAAnB,CAAN;AACD,GAJgD,CAKjD;;;AAEA,MAAI0D,KAAK,GAAG,KAAKJ,MAAL,CAAYC,MAAxB;AACA,MAAII,OAAO,GAAG,KAAKP,QAAnB;;AAEA,OAAK,IAAIQ,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,KAAK,CAACI,MAA5B,EAAoCF,CAAC,GAAGC,GAAxC,EAA6CD,CAAC,EAA9C,EAAkD;AAChD,QAAIG,IAAI,GAAGL,KAAK,CAACE,CAAD,CAAhB;AACA,QAAInB,MAAM,GAAGsB,IAAI,CAACtB,MAAlB;AACA,QAAIuB,aAAa,GAAGvB,MAAM,CAACwB,MAA3B;AACA,QAAIC,IAAJ;AACA,QAAIxB,KAAK,GAAGqB,IAAI,CAACrB,KAAjB;AACA,QAAIyB,IAAI,GACN1B,MAAM,CAAC2B,SAAP,IACA3B,MAAM,CAAC4B,WAAP,CAAmBZ,IAAnB,CADA,IAEAjD,QAAQ,CAAC8D,iBAAT,CAA2BN,aAAa,CAACO,KAAzC,EAAgDd,IAAhD,EAAsD,IAAtD,CAHF;AAIA,QAAIe,QAAJ;;AACA,QAAIL,IAAJ,EAAU;AACRK,MAAAA,QAAQ,GAAGhE,QAAQ,CAACiE,mBAAT,CACThC,MAAM,CAACiC,SADE,EAETjB,IAFS,EAGT5B,eAHS,CAAX;AAKAqC,MAAAA,IAAI,GAAG1D,QAAQ,CAACiE,mBAAT,CAA6BT,aAAa,CAACW,KAA3C,EAAkDlB,IAAlD,CAAP;AACAU,MAAAA,IAAI,GAAGrE,OAAO,CAAC0E,QAAD,CAAP,IAAqB1E,OAAO,CAACoE,IAAD,CAAnC;AACD;;AAED,QAAI,CAACC,IAAL,EAAW;AACT;AACAS,MAAAA,eAAe,CAACb,IAAD,EAAOtB,MAAP,EAAekB,OAAf,CAAf;AACA;AACD;;AAED,QAAI,CAACnD,QAAQ,CAACqE,UAAT,CAAoBpC,MAAM,CAACiC,SAA3B,CAAL,EAA4C;AAC1Cf,MAAAA,OAAO,CAACmB,aAAR,GAAwB,IAAxB;AACD;;AAED,QAAIC,cAAc,GAAG,KAArB;AACA,QAAIC,eAAe,GAAGxE,QAAQ,CAAC8D,iBAAT,CACpBN,aAAa,CAACiB,gBADM,EAEpBxB,IAFoB,EAGpBjC,sBAHoB,CAAtB;;AAMA,QAAI,CAAC1B,OAAO,CAAC4C,KAAD,CAAZ,EAAqB;AACnBA,MAAAA,KAAK,GAAGiB,OAAO,CAACuB,QAAR,CAAiBzC,MAAjB,CAAR;AACAC,MAAAA,KAAK,CAACyC,EAAN,GAAW1C,MAAX;AACAsB,MAAAA,IAAI,CAACrB,KAAL,GAAaA,KAAb,CAHmB,CAKnB;AACA;AACA;AACA;;AACAqC,MAAAA,cAAc,GACZpF,UAAU,CAACyF,MAAX,CAAkB1C,KAAK,CAAC8B,QAAxB,EAAkCA,QAAlC,KACA9B,KAAK,CAACsC,eAAN,KAA0BA,eAF5B;AAGD;;AAEDtC,IAAAA,KAAK,CAACyB,IAAN,GAAa,IAAb;AACAzB,IAAAA,KAAK,CAAC8B,QAAN,GAAiBA,QAAjB;AACA9B,IAAAA,KAAK,CAACwB,IAAN,GAAaA,IAAb;AACAxB,IAAAA,KAAK,CAAC2C,KAAN,GAAc7E,QAAQ,CAAC8D,iBAAT,CACZN,aAAa,CAACsB,MADF,EAEZ7B,IAFY,EAGZhD,YAHY,CAAd;AAKAiC,IAAAA,KAAK,CAAC6C,IAAN,GAAa/E,QAAQ,CAAC8D,iBAAT,CACXN,aAAa,CAACwB,KADH,EAEX/B,IAFW,EAGX/C,WAHW,CAAb;AAKAgC,IAAAA,KAAK,CAAC+C,KAAN,GAAcjF,QAAQ,CAAC8D,iBAAT,CACZN,aAAa,CAAC0B,MADF,EAEZjC,IAFY,EAGZ9C,YAHY,CAAd;AAKA+B,IAAAA,KAAK,CAACiD,SAAN,GAAkBnF,QAAQ,CAAC8D,iBAAT,CAChBN,aAAa,CAAC4B,UADE,EAEhBnC,IAFgB,EAGhB5C,gBAHgB,EAIhBiB,gBAJgB,CAAlB;AAMAY,IAAAA,KAAK,CAACmD,YAAN,GAAqBrF,QAAQ,CAAC8D,iBAAT,CACnBN,aAAa,CAAC8B,aADK,EAEnBrC,IAFmB,EAGnB1C,mBAHmB,EAInBgB,mBAJmB,CAArB;AAMAW,IAAAA,KAAK,CAACqD,YAAN,GAAqBvF,QAAQ,CAAC8D,iBAAT,CACnBN,aAAa,CAACgC,aADK,EAEnBvC,IAFmB,EAGnBxC,mBAHmB,CAArB;AAKAyB,IAAAA,KAAK,CAACuD,cAAN,GAAuBzF,QAAQ,CAAC8D,iBAAT,CACrBN,aAAa,CAACkC,eADO,EAErBzC,IAFqB,EAGrBvC,qBAHqB,CAAvB;AAKAwB,IAAAA,KAAK,CAACyD,eAAN,GAAwB3F,QAAQ,CAAC8D,iBAAT,CACtBN,aAAa,CAACoC,gBADQ,EAEtB3C,IAFsB,EAGtBtC,sBAHsB,EAItBa,sBAJsB,CAAxB;AAMAU,IAAAA,KAAK,CAAC2D,iBAAN,GAA0B7F,QAAQ,CAAC8D,iBAAT,CACxBN,aAAa,CAACsC,kBADU,EAExB7C,IAFwB,EAGxBrC,wBAHwB,EAIxBa,wBAJwB,CAA1B;AAMAS,IAAAA,KAAK,CAAC6D,WAAN,GAAoB/F,QAAQ,CAAC8D,iBAAT,CAClBN,aAAa,CAACwC,YADI,EAElB/C,IAFkB,EAGlBpC,kBAHkB,EAIlBc,kBAJkB,CAApB;AAMAO,IAAAA,KAAK,CAAC+D,SAAN,GAAkBjG,QAAQ,CAAC8D,iBAAT,CAChBN,aAAa,CAAC0C,UADE,EAEhBjD,IAFgB,EAGhBlC,gBAHgB,EAIhBW,gBAJgB,CAAlB;AAMAQ,IAAAA,KAAK,CAACsC,eAAN,GAAwBA,eAAxB;AACAtC,IAAAA,KAAK,CAACiE,gBAAN,GAAyBnG,QAAQ,CAAC8D,iBAAT,CACvBN,aAAa,CAAC4C,iBADS,EAEvBnD,IAFuB,EAGvB/B,uBAHuB,CAAzB;AAKAgB,IAAAA,KAAK,CAACmE,cAAN,GAAuBrG,QAAQ,CAAC8D,iBAAT,CACrBN,aAAa,CAAC8C,eADO,EAErBrD,IAFqB,EAGrB7B,qBAHqB,CAAvB;AAKAc,IAAAA,KAAK,CAACqE,sBAAN,GAA+BvG,QAAQ,CAACiE,mBAAT,CAC7BT,aAAa,CAACgD,uBADe,EAE7BvD,IAF6B,EAG7BrB,6BAH6B,CAA/B;AAKAM,IAAAA,KAAK,CAACuE,0BAAN,GAAmCzG,QAAQ,CAACiE,mBAAT,CACjCT,aAAa,CAACkD,2BADmB,EAEjCzD,IAFiC,EAGjCpB,iCAHiC,CAAnC;AAKAK,IAAAA,KAAK,CAACyE,eAAN,GAAwB3G,QAAQ,CAACiE,mBAAT,CACtBT,aAAa,CAACoD,gBADQ,EAEtB3D,IAFsB,EAGtBnB,sBAHsB,CAAxB;AAKAI,IAAAA,KAAK,CAAC2E,wBAAN,GAAiC7G,QAAQ,CAACiE,mBAAT,CAC/BT,aAAa,CAACsD,yBADiB,EAE/B7D,IAF+B,EAG/BlB,+BAH+B,CAAjC;AAKAG,IAAAA,KAAK,CAAC6E,wBAAN,GAAiC/G,QAAQ,CAACiE,mBAAT,CAC/BT,aAAa,CAACwD,yBADiB,EAE/B/D,IAF+B,CAAjC;;AAKA,QAAIsB,cAAJ,EAAoB;AAClBrC,MAAAA,KAAK,CAAC+E,eAAN;AACD;AACF;;AACD,SAAO,IAAP;AACD,CAvKD;AAyKA;;;;;;;;;;;;;AAWA5E,eAAe,CAACK,SAAhB,CAA0BwE,iBAA1B,GAA8C,UAAUjF,MAAV,EAAkBkF,MAAlB,EAA0B;AACtE;AACA,MAAI,CAAC7H,OAAO,CAAC2C,MAAD,CAAZ,EAAsB;AACpB,UAAM,IAAIzC,cAAJ,CAAmB,qBAAnB,CAAN;AACD;;AACD,MAAI,CAACF,OAAO,CAAC6H,MAAD,CAAZ,EAAsB;AACpB,UAAM,IAAI3H,cAAJ,CAAmB,qBAAnB,CAAN;AACD,GAPqE,CAQtE;;;AAEA,MAAI+D,IAAI,GAAG,KAAKT,MAAL,CAAYsE,GAAZ,CAAgBnF,MAAM,CAAC0C,EAAvB,CAAX;;AACA,MAAI,CAACrF,OAAO,CAACiE,IAAD,CAAR,IAAkB,CAACjE,OAAO,CAACiE,IAAI,CAACrB,KAAN,CAA9B,EAA4C;AAC1C,WAAOnC,mBAAmB,CAACsH,MAA3B;AACD;;AAED,MAAInF,KAAK,GAAGqB,IAAI,CAACrB,KAAjB;AACAiF,EAAAA,MAAM,CAACG,MAAP,GAAgBnI,UAAU,CAACoI,KAAX,CACdlI,YAAY,CAAC6C,KAAK,CAACsF,gBAAP,EAAyBtF,KAAK,CAAC8B,QAA/B,CADE,EAEdmD,MAAM,CAACG,MAFO,CAAhB;AAIAH,EAAAA,MAAM,CAACM,MAAP,GAAgB,CAAhB;AACA,SAAO1H,mBAAmB,CAAC2H,IAA3B;AACD,CAtBD;AAwBA;;;;;;;AAKArF,eAAe,CAACK,SAAhB,CAA0BiF,WAA1B,GAAwC,YAAY;AAClD,SAAO,KAAP;AACD,CAFD;AAIA;;;;;AAGAtF,eAAe,CAACK,SAAhB,CAA0BkF,OAA1B,GAAoC,YAAY;AAC9C,OAAK/E,iBAAL,CAAuBL,iBAAvB,CAAyCqF,mBAAzC,CACExF,eAAe,CAACK,SAAhB,CAA0BC,oBAD5B,EAEE,IAFF;;AAIA,MAAImF,QAAQ,GAAG,KAAKjF,iBAAL,CAAuBE,MAAtC;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0E,QAAQ,CAACxE,MAA7B,EAAqCF,CAAC,EAAtC,EAA0C;AACxC,SAAKR,QAAL,CAAcmF,WAAd,CAA0BD,QAAQ,CAAC1E,CAAD,CAAlC;AACD;;AACD,SAAO7D,aAAa,CAAC,IAAD,CAApB;AACD,CAVD;;AAYA8C,eAAe,CAACK,SAAhB,CAA0BC,oBAA1B,GAAiD,UAC/CJ,gBAD+C,EAE/CyF,KAF+C,EAG/CC,OAH+C,EAI/CC,OAJ+C,EAK/C;AACA,MAAI9E,CAAJ;AACA,MAAInB,MAAJ;AACA,MAAIiB,KAAK,GAAG,KAAKJ,MAAjB;AACA,MAAIK,OAAO,GAAG,KAAKP,QAAnB;;AAEA,OAAKQ,CAAC,GAAG4E,KAAK,CAAC1E,MAAN,GAAe,CAAxB,EAA2BF,CAAC,GAAG,CAAC,CAAhC,EAAmCA,CAAC,EAApC,EAAwC;AACtCnB,IAAAA,MAAM,GAAG+F,KAAK,CAAC5E,CAAD,CAAd;;AACA,QAAI9D,OAAO,CAAC2C,MAAM,CAACwB,MAAR,CAAP,IAA0BnE,OAAO,CAAC2C,MAAM,CAACiC,SAAR,CAArC,EAAyD;AACvDhB,MAAAA,KAAK,CAACiF,GAAN,CAAUlG,MAAM,CAAC0C,EAAjB,EAAqB,IAAI3C,UAAJ,CAAeC,MAAf,CAArB;AACD;AACF;;AAED,OAAKmB,CAAC,GAAG8E,OAAO,CAAC5E,MAAR,GAAiB,CAA1B,EAA6BF,CAAC,GAAG,CAAC,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;AACxCnB,IAAAA,MAAM,GAAGiG,OAAO,CAAC9E,CAAD,CAAhB;;AACA,QAAI9D,OAAO,CAAC2C,MAAM,CAACwB,MAAR,CAAP,IAA0BnE,OAAO,CAAC2C,MAAM,CAACiC,SAAR,CAArC,EAAyD;AACvD,UAAI,CAAChB,KAAK,CAACkF,QAAN,CAAenG,MAAM,CAAC0C,EAAtB,CAAL,EAAgC;AAC9BzB,QAAAA,KAAK,CAACiF,GAAN,CAAUlG,MAAM,CAAC0C,EAAjB,EAAqB,IAAI3C,UAAJ,CAAeC,MAAf,CAArB;AACD;AACF,KAJD,MAIO;AACLmC,MAAAA,eAAe,CAAClB,KAAK,CAACkE,GAAN,CAAUnF,MAAM,CAAC0C,EAAjB,CAAD,EAAuB1C,MAAvB,EAA+BkB,OAA/B,CAAf;AACAD,MAAAA,KAAK,CAACmF,MAAN,CAAapG,MAAM,CAAC0C,EAApB;AACD;AACF;;AAED,OAAKvB,CAAC,GAAG6E,OAAO,CAAC3E,MAAR,GAAiB,CAA1B,EAA6BF,CAAC,GAAG,CAAC,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;AACxCnB,IAAAA,MAAM,GAAGgG,OAAO,CAAC7E,CAAD,CAAhB;AACAgB,IAAAA,eAAe,CAAClB,KAAK,CAACkE,GAAN,CAAUnF,MAAM,CAAC0C,EAAjB,CAAD,EAAuB1C,MAAvB,EAA+BkB,OAA/B,CAAf;AACAD,IAAAA,KAAK,CAACmF,MAAN,CAAapG,MAAM,CAAC0C,EAApB;AACD;AACF,CAnCD;;AAqCA,SAASP,eAAT,CAAyBb,IAAzB,EAA+BtB,MAA/B,EAAuCkB,OAAvC,EAAgD;AAC9C,MAAI7D,OAAO,CAACiE,IAAD,CAAX,EAAmB;AACjBA,IAAAA,IAAI,CAACrB,KAAL,GAAaC,SAAb;AACAgB,IAAAA,OAAO,CAAC4E,WAAR,CAAoB9F,MAApB;AACD;AACF;;AACD,eAAeI,eAAf","sourcesContent":["import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport HorizontalOrigin from \"../Scene/HorizontalOrigin.js\";\nimport LabelStyle from \"../Scene/LabelStyle.js\";\nimport VerticalOrigin from \"../Scene/VerticalOrigin.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\n\nvar defaultScale = 1.0;\nvar defaultFont = \"30px sans-serif\";\nvar defaultStyle = LabelStyle.FILL;\nvar defaultFillColor = Color.WHITE;\nvar defaultOutlineColor = Color.BLACK;\nvar defaultOutlineWidth = 1.0;\nvar defaultShowBackground = false;\nvar defaultBackgroundColor = new Color(0.165, 0.165, 0.165, 0.8);\nvar defaultBackgroundPadding = new Cartesian2(7, 5);\nvar defaultPixelOffset = Cartesian2.ZERO;\nvar defaultEyeOffset = Cartesian3.ZERO;\nvar defaultHeightReference = HeightReference.NONE;\nvar defaultHorizontalOrigin = HorizontalOrigin.CENTER;\nvar defaultVerticalOrigin = VerticalOrigin.CENTER;\n\nvar positionScratch = new Cartesian3();\nvar fillColorScratch = new Color();\nvar outlineColorScratch = new Color();\nvar backgroundColorScratch = new Color();\nvar backgroundPaddingScratch = new Cartesian2();\nvar eyeOffsetScratch = new Cartesian3();\nvar pixelOffsetScratch = new Cartesian2();\nvar translucencyByDistanceScratch = new NearFarScalar();\nvar pixelOffsetScaleByDistanceScratch = new NearFarScalar();\nvar scaleByDistanceScratch = new NearFarScalar();\nvar distanceDisplayConditionScratch = new DistanceDisplayCondition();\n\nfunction EntityData(entity) {\n  this.entity = entity;\n  this.label = undefined;\n  this.index = undefined;\n}\n\n/**\n * A {@link Visualizer} which maps the {@link LabelGraphics} instance\n * in {@link Entity#label} to a {@link Label}.\n * @alias LabelVisualizer\n * @constructor\n *\n * @param {EntityCluster} entityCluster The entity cluster to manage the collection of billboards and optionally cluster with other entities.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n */\nfunction LabelVisualizer(entityCluster, entityCollection) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entityCluster)) {\n    throw new DeveloperError(\"entityCluster is required.\");\n  }\n  if (!defined(entityCollection)) {\n    throw new DeveloperError(\"entityCollection is required.\");\n  }\n  //>>includeEnd('debug');\n\n  entityCollection.collectionChanged.addEventListener(\n    LabelVisualizer.prototype._onCollectionChanged,\n    this\n  );\n\n  this._cluster = entityCluster;\n  this._entityCollection = entityCollection;\n  this._items = new AssociativeArray();\n\n  this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n}\n\n/**\n * Updates the primitives created by this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {Boolean} This function always returns true.\n */\nLabelVisualizer.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var items = this._items.values;\n  var cluster = this._cluster;\n\n  for (var i = 0, len = items.length; i < len; i++) {\n    var item = items[i];\n    var entity = item.entity;\n    var labelGraphics = entity._label;\n    var text;\n    var label = item.label;\n    var show =\n      entity.isShowing &&\n      entity.isAvailable(time) &&\n      Property.getValueOrDefault(labelGraphics._show, time, true);\n    var position;\n    if (show) {\n      position = Property.getValueOrUndefined(\n        entity._position,\n        time,\n        positionScratch\n      );\n      text = Property.getValueOrUndefined(labelGraphics._text, time);\n      show = defined(position) && defined(text);\n    }\n\n    if (!show) {\n      //don't bother creating or updating anything else\n      returnPrimitive(item, entity, cluster);\n      continue;\n    }\n\n    if (!Property.isConstant(entity._position)) {\n      cluster._clusterDirty = true;\n    }\n\n    var updateClamping = false;\n    var heightReference = Property.getValueOrDefault(\n      labelGraphics._heightReference,\n      time,\n      defaultHeightReference\n    );\n\n    if (!defined(label)) {\n      label = cluster.getLabel(entity);\n      label.id = entity;\n      item.label = label;\n\n      // If this new label happens to have a position and height reference that match our new values,\n      // label._updateClamping will not be called automatically. That's a problem because the clamped\n      // height may be based on different terrain than is now loaded. So we'll manually call\n      // _updateClamping below.\n      updateClamping =\n        Cartesian3.equals(label.position, position) &&\n        label.heightReference === heightReference;\n    }\n\n    label.show = true;\n    label.position = position;\n    label.text = text;\n    label.scale = Property.getValueOrDefault(\n      labelGraphics._scale,\n      time,\n      defaultScale\n    );\n    label.font = Property.getValueOrDefault(\n      labelGraphics._font,\n      time,\n      defaultFont\n    );\n    label.style = Property.getValueOrDefault(\n      labelGraphics._style,\n      time,\n      defaultStyle\n    );\n    label.fillColor = Property.getValueOrDefault(\n      labelGraphics._fillColor,\n      time,\n      defaultFillColor,\n      fillColorScratch\n    );\n    label.outlineColor = Property.getValueOrDefault(\n      labelGraphics._outlineColor,\n      time,\n      defaultOutlineColor,\n      outlineColorScratch\n    );\n    label.outlineWidth = Property.getValueOrDefault(\n      labelGraphics._outlineWidth,\n      time,\n      defaultOutlineWidth\n    );\n    label.showBackground = Property.getValueOrDefault(\n      labelGraphics._showBackground,\n      time,\n      defaultShowBackground\n    );\n    label.backgroundColor = Property.getValueOrDefault(\n      labelGraphics._backgroundColor,\n      time,\n      defaultBackgroundColor,\n      backgroundColorScratch\n    );\n    label.backgroundPadding = Property.getValueOrDefault(\n      labelGraphics._backgroundPadding,\n      time,\n      defaultBackgroundPadding,\n      backgroundPaddingScratch\n    );\n    label.pixelOffset = Property.getValueOrDefault(\n      labelGraphics._pixelOffset,\n      time,\n      defaultPixelOffset,\n      pixelOffsetScratch\n    );\n    label.eyeOffset = Property.getValueOrDefault(\n      labelGraphics._eyeOffset,\n      time,\n      defaultEyeOffset,\n      eyeOffsetScratch\n    );\n    label.heightReference = heightReference;\n    label.horizontalOrigin = Property.getValueOrDefault(\n      labelGraphics._horizontalOrigin,\n      time,\n      defaultHorizontalOrigin\n    );\n    label.verticalOrigin = Property.getValueOrDefault(\n      labelGraphics._verticalOrigin,\n      time,\n      defaultVerticalOrigin\n    );\n    label.translucencyByDistance = Property.getValueOrUndefined(\n      labelGraphics._translucencyByDistance,\n      time,\n      translucencyByDistanceScratch\n    );\n    label.pixelOffsetScaleByDistance = Property.getValueOrUndefined(\n      labelGraphics._pixelOffsetScaleByDistance,\n      time,\n      pixelOffsetScaleByDistanceScratch\n    );\n    label.scaleByDistance = Property.getValueOrUndefined(\n      labelGraphics._scaleByDistance,\n      time,\n      scaleByDistanceScratch\n    );\n    label.distanceDisplayCondition = Property.getValueOrUndefined(\n      labelGraphics._distanceDisplayCondition,\n      time,\n      distanceDisplayConditionScratch\n    );\n    label.disableDepthTestDistance = Property.getValueOrUndefined(\n      labelGraphics._disableDepthTestDistance,\n      time\n    );\n\n    if (updateClamping) {\n      label._updateClamping();\n    }\n  }\n  return true;\n};\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nLabelVisualizer.prototype.getBoundingSphere = function (entity, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required.\");\n  }\n  if (!defined(result)) {\n    throw new DeveloperError(\"result is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var item = this._items.get(entity.id);\n  if (!defined(item) || !defined(item.label)) {\n    return BoundingSphereState.FAILED;\n  }\n\n  var label = item.label;\n  result.center = Cartesian3.clone(\n    defaultValue(label._clampedPosition, label.position),\n    result.center\n  );\n  result.radius = 0;\n  return BoundingSphereState.DONE;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\nLabelVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Removes and destroys all primitives created by this instance.\n */\nLabelVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(\n    LabelVisualizer.prototype._onCollectionChanged,\n    this\n  );\n  var entities = this._entityCollection.values;\n  for (var i = 0; i < entities.length; i++) {\n    this._cluster.removeLabel(entities[i]);\n  }\n  return destroyObject(this);\n};\n\nLabelVisualizer.prototype._onCollectionChanged = function (\n  entityCollection,\n  added,\n  removed,\n  changed\n) {\n  var i;\n  var entity;\n  var items = this._items;\n  var cluster = this._cluster;\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n    if (defined(entity._label) && defined(entity._position)) {\n      items.set(entity.id, new EntityData(entity));\n    }\n  }\n\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n    if (defined(entity._label) && defined(entity._position)) {\n      if (!items.contains(entity.id)) {\n        items.set(entity.id, new EntityData(entity));\n      }\n    } else {\n      returnPrimitive(items.get(entity.id), entity, cluster);\n      items.remove(entity.id);\n    }\n  }\n\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    returnPrimitive(items.get(entity.id), entity, cluster);\n    items.remove(entity.id);\n  }\n};\n\nfunction returnPrimitive(item, entity, cluster) {\n  if (defined(item)) {\n    item.label = undefined;\n    cluster.removeLabel(entity);\n  }\n}\nexport default LabelVisualizer;\n"]},"metadata":{},"sourceType":"module"}