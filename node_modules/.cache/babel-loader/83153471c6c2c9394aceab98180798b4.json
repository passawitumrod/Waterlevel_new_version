{"ast":null,"code":"import Cartesian2 from \"../../Core/Cartesian2.js\";\nimport defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport EasingFunction from \"../../Core/EasingFunction.js\";\nimport SceneTransforms from \"../../Scene/SceneTransforms.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nvar screenSpacePos = new Cartesian2();\nvar offScreen = \"-1000px\";\n/**\n * The view model for {@link SelectionIndicator}.\n * @alias SelectionIndicatorViewModel\n * @constructor\n *\n * @param {Scene} scene The scene instance to use for screen-space coordinate conversion.\n * @param {Element} selectionIndicatorElement The element containing all elements that make up the selection indicator.\n * @param {Element} container The DOM element that contains the widget.\n */\n\nfunction SelectionIndicatorViewModel(scene, selectionIndicatorElement, container) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n\n  if (!defined(selectionIndicatorElement)) {\n    throw new DeveloperError(\"selectionIndicatorElement is required.\");\n  }\n\n  if (!defined(container)) {\n    throw new DeveloperError(\"container is required.\");\n  } //>>includeEnd('debug')\n\n\n  this._scene = scene;\n  this._screenPositionX = offScreen;\n  this._screenPositionY = offScreen;\n  this._tweens = scene.tweens;\n  this._container = defaultValue(container, document.body);\n  this._selectionIndicatorElement = selectionIndicatorElement;\n  this._scale = 1;\n  /**\n   * Gets or sets the world position of the object for which to display the selection indicator.\n   * @type {Cartesian3}\n   */\n\n  this.position = undefined;\n  /**\n   * Gets or sets the visibility of the selection indicator.\n   * @type {Boolean}\n   */\n\n  this.showSelection = false;\n  knockout.track(this, [\"position\", \"_screenPositionX\", \"_screenPositionY\", \"_scale\", \"showSelection\"]);\n  /**\n   * Gets the visibility of the position indicator.  This can be false even if an\n   * object is selected, when the selected object has no position.\n   * @type {Boolean}\n   */\n\n  this.isVisible = undefined;\n  knockout.defineProperty(this, \"isVisible\", {\n    get: function get() {\n      return this.showSelection && defined(this.position);\n    }\n  });\n  knockout.defineProperty(this, \"_transform\", {\n    get: function get() {\n      return \"scale(\" + this._scale + \")\";\n    }\n  });\n  /**\n   * Gets or sets the function for converting the world position of the object to the screen space position.\n   *\n   * @member\n   * @type {SelectionIndicatorViewModel~ComputeScreenSpacePosition}\n   * @default SceneTransforms.wgs84ToWindowCoordinates\n   *\n   * @example\n   * selectionIndicatorViewModel.computeScreenSpacePosition = function(position, result) {\n   *     return Cesium.SceneTransforms.wgs84ToWindowCoordinates(scene, position, result);\n   * };\n   */\n\n  this.computeScreenSpacePosition = function (position, result) {\n    return SceneTransforms.wgs84ToWindowCoordinates(scene, position, result);\n  };\n}\n/**\n * Updates the view of the selection indicator to match the position and content properties of the view model.\n * This function should be called as part of the render loop.\n */\n\n\nSelectionIndicatorViewModel.prototype.update = function () {\n  if (this.showSelection && defined(this.position)) {\n    var screenPosition = this.computeScreenSpacePosition(this.position, screenSpacePos);\n\n    if (!defined(screenPosition)) {\n      this._screenPositionX = offScreen;\n      this._screenPositionY = offScreen;\n    } else {\n      var container = this._container;\n      var containerWidth = container.parentNode.clientWidth;\n      var containerHeight = container.parentNode.clientHeight;\n      var indicatorSize = this._selectionIndicatorElement.clientWidth;\n      var halfSize = indicatorSize * 0.5;\n      screenPosition.x = Math.min(Math.max(screenPosition.x, -indicatorSize), containerWidth + indicatorSize) - halfSize;\n      screenPosition.y = Math.min(Math.max(screenPosition.y, -indicatorSize), containerHeight + indicatorSize) - halfSize;\n      this._screenPositionX = Math.floor(screenPosition.x + 0.25) + \"px\";\n      this._screenPositionY = Math.floor(screenPosition.y + 0.25) + \"px\";\n    }\n  }\n};\n/**\n * Animate the indicator to draw attention to the selection.\n */\n\n\nSelectionIndicatorViewModel.prototype.animateAppear = function () {\n  this._tweens.addProperty({\n    object: this,\n    property: \"_scale\",\n    startValue: 2,\n    stopValue: 1,\n    duration: 0.8,\n    easingFunction: EasingFunction.EXPONENTIAL_OUT\n  });\n};\n/**\n * Animate the indicator to release the selection.\n */\n\n\nSelectionIndicatorViewModel.prototype.animateDepart = function () {\n  this._tweens.addProperty({\n    object: this,\n    property: \"_scale\",\n    startValue: this._scale,\n    stopValue: 1.5,\n    duration: 0.8,\n    easingFunction: EasingFunction.EXPONENTIAL_OUT\n  });\n};\n\nObject.defineProperties(SelectionIndicatorViewModel.prototype, {\n  /**\n   * Gets the HTML element containing the selection indicator.\n   * @memberof SelectionIndicatorViewModel.prototype\n   *\n   * @type {Element}\n   */\n  container: {\n    get: function get() {\n      return this._container;\n    }\n  },\n\n  /**\n   * Gets the HTML element that holds the selection indicator.\n   * @memberof SelectionIndicatorViewModel.prototype\n   *\n   * @type {Element}\n   */\n  selectionIndicatorElement: {\n    get: function get() {\n      return this._selectionIndicatorElement;\n    }\n  },\n\n  /**\n   * Gets the scene being used.\n   * @memberof SelectionIndicatorViewModel.prototype\n   *\n   * @type {Scene}\n   */\n  scene: {\n    get: function get() {\n      return this._scene;\n    }\n  }\n});\n/**\n * A function that converts the world position of an object to a screen space position.\n * @callback SelectionIndicatorViewModel~ComputeScreenSpacePosition\n * @param {Cartesian3} position The position in WGS84 (world) coordinates.\n * @param {Cartesian2} result An object to return the input position transformed to window coordinates.\n * @returns {Cartesian2} The modified result parameter.\n */\n\nexport default SelectionIndicatorViewModel;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Widgets/SelectionIndicator/SelectionIndicatorViewModel.js"],"names":["Cartesian2","defaultValue","defined","DeveloperError","EasingFunction","SceneTransforms","knockout","screenSpacePos","offScreen","SelectionIndicatorViewModel","scene","selectionIndicatorElement","container","_scene","_screenPositionX","_screenPositionY","_tweens","tweens","_container","document","body","_selectionIndicatorElement","_scale","position","undefined","showSelection","track","isVisible","defineProperty","get","computeScreenSpacePosition","result","wgs84ToWindowCoordinates","prototype","update","screenPosition","containerWidth","parentNode","clientWidth","containerHeight","clientHeight","indicatorSize","halfSize","x","Math","min","max","y","floor","animateAppear","addProperty","object","property","startValue","stopValue","duration","easingFunction","EXPONENTIAL_OUT","animateDepart","Object","defineProperties"],"mappings":"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","sourcesContent":["import Cartesian2 from \"../../Core/Cartesian2.js\";\nimport defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport EasingFunction from \"../../Core/EasingFunction.js\";\nimport SceneTransforms from \"../../Scene/SceneTransforms.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\n\nvar screenSpacePos = new Cartesian2();\nvar offScreen = \"-1000px\";\n\n/**\n * The view model for {@link SelectionIndicator}.\n * @alias SelectionIndicatorViewModel\n * @constructor\n *\n * @param {Scene} scene The scene instance to use for screen-space coordinate conversion.\n * @param {Element} selectionIndicatorElement The element containing all elements that make up the selection indicator.\n * @param {Element} container The DOM element that contains the widget.\n */\nfunction SelectionIndicatorViewModel(\n  scene,\n  selectionIndicatorElement,\n  container\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n\n  if (!defined(selectionIndicatorElement)) {\n    throw new DeveloperError(\"selectionIndicatorElement is required.\");\n  }\n\n  if (!defined(container)) {\n    throw new DeveloperError(\"container is required.\");\n  }\n  //>>includeEnd('debug')\n\n  this._scene = scene;\n  this._screenPositionX = offScreen;\n  this._screenPositionY = offScreen;\n  this._tweens = scene.tweens;\n  this._container = defaultValue(container, document.body);\n  this._selectionIndicatorElement = selectionIndicatorElement;\n  this._scale = 1;\n\n  /**\n   * Gets or sets the world position of the object for which to display the selection indicator.\n   * @type {Cartesian3}\n   */\n  this.position = undefined;\n\n  /**\n   * Gets or sets the visibility of the selection indicator.\n   * @type {Boolean}\n   */\n  this.showSelection = false;\n\n  knockout.track(this, [\n    \"position\",\n    \"_screenPositionX\",\n    \"_screenPositionY\",\n    \"_scale\",\n    \"showSelection\",\n  ]);\n\n  /**\n   * Gets the visibility of the position indicator.  This can be false even if an\n   * object is selected, when the selected object has no position.\n   * @type {Boolean}\n   */\n  this.isVisible = undefined;\n  knockout.defineProperty(this, \"isVisible\", {\n    get: function () {\n      return this.showSelection && defined(this.position);\n    },\n  });\n\n  knockout.defineProperty(this, \"_transform\", {\n    get: function () {\n      return \"scale(\" + this._scale + \")\";\n    },\n  });\n\n  /**\n   * Gets or sets the function for converting the world position of the object to the screen space position.\n   *\n   * @member\n   * @type {SelectionIndicatorViewModel~ComputeScreenSpacePosition}\n   * @default SceneTransforms.wgs84ToWindowCoordinates\n   *\n   * @example\n   * selectionIndicatorViewModel.computeScreenSpacePosition = function(position, result) {\n   *     return Cesium.SceneTransforms.wgs84ToWindowCoordinates(scene, position, result);\n   * };\n   */\n  this.computeScreenSpacePosition = function (position, result) {\n    return SceneTransforms.wgs84ToWindowCoordinates(scene, position, result);\n  };\n}\n\n/**\n * Updates the view of the selection indicator to match the position and content properties of the view model.\n * This function should be called as part of the render loop.\n */\nSelectionIndicatorViewModel.prototype.update = function () {\n  if (this.showSelection && defined(this.position)) {\n    var screenPosition = this.computeScreenSpacePosition(\n      this.position,\n      screenSpacePos\n    );\n    if (!defined(screenPosition)) {\n      this._screenPositionX = offScreen;\n      this._screenPositionY = offScreen;\n    } else {\n      var container = this._container;\n      var containerWidth = container.parentNode.clientWidth;\n      var containerHeight = container.parentNode.clientHeight;\n      var indicatorSize = this._selectionIndicatorElement.clientWidth;\n      var halfSize = indicatorSize * 0.5;\n\n      screenPosition.x =\n        Math.min(\n          Math.max(screenPosition.x, -indicatorSize),\n          containerWidth + indicatorSize\n        ) - halfSize;\n      screenPosition.y =\n        Math.min(\n          Math.max(screenPosition.y, -indicatorSize),\n          containerHeight + indicatorSize\n        ) - halfSize;\n\n      this._screenPositionX = Math.floor(screenPosition.x + 0.25) + \"px\";\n      this._screenPositionY = Math.floor(screenPosition.y + 0.25) + \"px\";\n    }\n  }\n};\n\n/**\n * Animate the indicator to draw attention to the selection.\n */\nSelectionIndicatorViewModel.prototype.animateAppear = function () {\n  this._tweens.addProperty({\n    object: this,\n    property: \"_scale\",\n    startValue: 2,\n    stopValue: 1,\n    duration: 0.8,\n    easingFunction: EasingFunction.EXPONENTIAL_OUT,\n  });\n};\n\n/**\n * Animate the indicator to release the selection.\n */\nSelectionIndicatorViewModel.prototype.animateDepart = function () {\n  this._tweens.addProperty({\n    object: this,\n    property: \"_scale\",\n    startValue: this._scale,\n    stopValue: 1.5,\n    duration: 0.8,\n    easingFunction: EasingFunction.EXPONENTIAL_OUT,\n  });\n};\n\nObject.defineProperties(SelectionIndicatorViewModel.prototype, {\n  /**\n   * Gets the HTML element containing the selection indicator.\n   * @memberof SelectionIndicatorViewModel.prototype\n   *\n   * @type {Element}\n   */\n  container: {\n    get: function () {\n      return this._container;\n    },\n  },\n\n  /**\n   * Gets the HTML element that holds the selection indicator.\n   * @memberof SelectionIndicatorViewModel.prototype\n   *\n   * @type {Element}\n   */\n  selectionIndicatorElement: {\n    get: function () {\n      return this._selectionIndicatorElement;\n    },\n  },\n\n  /**\n   * Gets the scene being used.\n   * @memberof SelectionIndicatorViewModel.prototype\n   *\n   * @type {Scene}\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    },\n  },\n});\n\n/**\n * A function that converts the world position of an object to a screen space position.\n * @callback SelectionIndicatorViewModel~ComputeScreenSpacePosition\n * @param {Cartesian3} position The position in WGS84 (world) coordinates.\n * @param {Cartesian2} result An object to return the input position transformed to window coordinates.\n * @returns {Cartesian2} The modified result parameter.\n */\nexport default SelectionIndicatorViewModel;\n"]},"metadata":{},"sourceType":"module"}