{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\nimport StripeOrientation from \"./StripeOrientation.js\";\nvar defaultOrientation = StripeOrientation.HORIZONTAL;\nvar defaultEvenColor = Color.WHITE;\nvar defaultOddColor = Color.BLACK;\nvar defaultOffset = 0;\nvar defaultRepeat = 1;\n/**\n * A {@link MaterialProperty} that maps to stripe {@link Material} uniforms.\n * @alias StripeMaterialProperty\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.orientation=StripeOrientation.HORIZONTAL] A Property specifying the {@link StripeOrientation}.\n * @param {Property} [options.evenColor=Color.WHITE] A Property specifying the first {@link Color}.\n * @param {Property} [options.oddColor=Color.BLACK] A Property specifying the second {@link Color}.\n * @param {Property} [options.offset=0] A numeric Property specifying how far into the pattern to start the material.\n * @param {Property} [options.repeat=1] A numeric Property specifying how many times the stripes repeat.\n */\n\nfunction StripeMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._definitionChanged = new Event();\n  this._orientation = undefined;\n  this._orientationSubscription = undefined;\n  this._evenColor = undefined;\n  this._evenColorSubscription = undefined;\n  this._oddColor = undefined;\n  this._oddColorSubscription = undefined;\n  this._offset = undefined;\n  this._offsetSubscription = undefined;\n  this._repeat = undefined;\n  this._repeatSubscription = undefined;\n  this.orientation = options.orientation;\n  this.evenColor = options.evenColor;\n  this.oddColor = options.oddColor;\n  this.offset = options.offset;\n  this.repeat = options.repeat;\n}\n\nObject.defineProperties(StripeMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof StripeMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._orientation) && //\n      Property.isConstant(this._evenColor) && //\n      Property.isConstant(this._oddColor) && //\n      Property.isConstant(this._offset) && //\n      Property.isConstant(this._repeat);\n    }\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof StripeMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the Property specifying the {@link StripeOrientation}/\n   * @memberof StripeMaterialProperty.prototype\n   * @type {Property}\n   * @default StripeOrientation.HORIZONTAL\n   */\n  orientation: createPropertyDescriptor(\"orientation\"),\n\n  /**\n   * Gets or sets the Property specifying the first {@link Color}.\n   * @memberof StripeMaterialProperty.prototype\n   * @type {Property}\n   * @default Color.WHITE\n   */\n  evenColor: createPropertyDescriptor(\"evenColor\"),\n\n  /**\n   * Gets or sets the Property specifying the second {@link Color}.\n   * @memberof StripeMaterialProperty.prototype\n   * @type {Property}\n   * @default Color.BLACK\n   */\n  oddColor: createPropertyDescriptor(\"oddColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the point into the pattern\n   * to begin drawing; with 0.0 being the beginning of the even color, 1.0 the beginning\n   * of the odd color, 2.0 being the even color again, and any multiple or fractional values\n   * being in between.\n   * @memberof StripeMaterialProperty.prototype\n   * @type {Property}\n   * @default 0.0\n   */\n  offset: createPropertyDescriptor(\"offset\"),\n\n  /**\n   * Gets or sets the numeric Property specifying how many times the stripes repeat.\n   * @memberof StripeMaterialProperty.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  repeat: createPropertyDescriptor(\"repeat\")\n});\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\n\nStripeMaterialProperty.prototype.getType = function (time) {\n  return \"Stripe\";\n};\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\n\nStripeMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n\n  result.horizontal = Property.getValueOrDefault(this._orientation, time, defaultOrientation) === StripeOrientation.HORIZONTAL;\n  result.evenColor = Property.getValueOrClonedDefault(this._evenColor, time, defaultEvenColor, result.evenColor);\n  result.oddColor = Property.getValueOrClonedDefault(this._oddColor, time, defaultOddColor, result.oddColor);\n  result.offset = Property.getValueOrDefault(this._offset, time, defaultOffset);\n  result.repeat = Property.getValueOrDefault(this._repeat, time, defaultRepeat);\n  return result;\n};\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nStripeMaterialProperty.prototype.equals = function (other) {\n  return this === other || //\n  other instanceof StripeMaterialProperty && //\n  Property.equals(this._orientation, other._orientation) && //\n  Property.equals(this._evenColor, other._evenColor) && //\n  Property.equals(this._oddColor, other._oddColor) && //\n  Property.equals(this._offset, other._offset) && //\n  Property.equals(this._repeat, other._repeat);\n};\n\nexport default StripeMaterialProperty;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/StripeMaterialProperty.js"],"names":["Color","defaultValue","defined","Event","createPropertyDescriptor","Property","StripeOrientation","defaultOrientation","HORIZONTAL","defaultEvenColor","WHITE","defaultOddColor","BLACK","defaultOffset","defaultRepeat","StripeMaterialProperty","options","EMPTY_OBJECT","_definitionChanged","_orientation","undefined","_orientationSubscription","_evenColor","_evenColorSubscription","_oddColor","_oddColorSubscription","_offset","_offsetSubscription","_repeat","_repeatSubscription","orientation","evenColor","oddColor","offset","repeat","Object","defineProperties","prototype","isConstant","get","definitionChanged","getType","time","getValue","result","horizontal","getValueOrDefault","getValueOrClonedDefault","equals","other"],"mappings":"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","sourcesContent":["import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\nimport StripeOrientation from \"./StripeOrientation.js\";\n\nvar defaultOrientation = StripeOrientation.HORIZONTAL;\nvar defaultEvenColor = Color.WHITE;\nvar defaultOddColor = Color.BLACK;\nvar defaultOffset = 0;\nvar defaultRepeat = 1;\n\n/**\n * A {@link MaterialProperty} that maps to stripe {@link Material} uniforms.\n * @alias StripeMaterialProperty\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.orientation=StripeOrientation.HORIZONTAL] A Property specifying the {@link StripeOrientation}.\n * @param {Property} [options.evenColor=Color.WHITE] A Property specifying the first {@link Color}.\n * @param {Property} [options.oddColor=Color.BLACK] A Property specifying the second {@link Color}.\n * @param {Property} [options.offset=0] A numeric Property specifying how far into the pattern to start the material.\n * @param {Property} [options.repeat=1] A numeric Property specifying how many times the stripes repeat.\n */\nfunction StripeMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._definitionChanged = new Event();\n  this._orientation = undefined;\n  this._orientationSubscription = undefined;\n  this._evenColor = undefined;\n  this._evenColorSubscription = undefined;\n  this._oddColor = undefined;\n  this._oddColorSubscription = undefined;\n  this._offset = undefined;\n  this._offsetSubscription = undefined;\n  this._repeat = undefined;\n  this._repeatSubscription = undefined;\n\n  this.orientation = options.orientation;\n  this.evenColor = options.evenColor;\n  this.oddColor = options.oddColor;\n  this.offset = options.offset;\n  this.repeat = options.repeat;\n}\n\nObject.defineProperties(StripeMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof StripeMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        Property.isConstant(this._orientation) && //\n        Property.isConstant(this._evenColor) && //\n        Property.isConstant(this._oddColor) && //\n        Property.isConstant(this._offset) && //\n        Property.isConstant(this._repeat)\n      );\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof StripeMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the Property specifying the {@link StripeOrientation}/\n   * @memberof StripeMaterialProperty.prototype\n   * @type {Property}\n   * @default StripeOrientation.HORIZONTAL\n   */\n  orientation: createPropertyDescriptor(\"orientation\"),\n\n  /**\n   * Gets or sets the Property specifying the first {@link Color}.\n   * @memberof StripeMaterialProperty.prototype\n   * @type {Property}\n   * @default Color.WHITE\n   */\n  evenColor: createPropertyDescriptor(\"evenColor\"),\n\n  /**\n   * Gets or sets the Property specifying the second {@link Color}.\n   * @memberof StripeMaterialProperty.prototype\n   * @type {Property}\n   * @default Color.BLACK\n   */\n  oddColor: createPropertyDescriptor(\"oddColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the point into the pattern\n   * to begin drawing; with 0.0 being the beginning of the even color, 1.0 the beginning\n   * of the odd color, 2.0 being the even color again, and any multiple or fractional values\n   * being in between.\n   * @memberof StripeMaterialProperty.prototype\n   * @type {Property}\n   * @default 0.0\n   */\n  offset: createPropertyDescriptor(\"offset\"),\n\n  /**\n   * Gets or sets the numeric Property specifying how many times the stripes repeat.\n   * @memberof StripeMaterialProperty.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  repeat: createPropertyDescriptor(\"repeat\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nStripeMaterialProperty.prototype.getType = function (time) {\n  return \"Stripe\";\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nStripeMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n  result.horizontal =\n    Property.getValueOrDefault(this._orientation, time, defaultOrientation) ===\n    StripeOrientation.HORIZONTAL;\n  result.evenColor = Property.getValueOrClonedDefault(\n    this._evenColor,\n    time,\n    defaultEvenColor,\n    result.evenColor\n  );\n  result.oddColor = Property.getValueOrClonedDefault(\n    this._oddColor,\n    time,\n    defaultOddColor,\n    result.oddColor\n  );\n  result.offset = Property.getValueOrDefault(this._offset, time, defaultOffset);\n  result.repeat = Property.getValueOrDefault(this._repeat, time, defaultRepeat);\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nStripeMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof StripeMaterialProperty && //\n    Property.equals(this._orientation, other._orientation) && //\n    Property.equals(this._evenColor, other._evenColor) && //\n    Property.equals(this._oddColor, other._oddColor) && //\n    Property.equals(this._offset, other._offset) && //\n      Property.equals(this._repeat, other._repeat))\n  );\n};\nexport default StripeMaterialProperty;\n"]},"metadata":{},"sourceType":"module"}