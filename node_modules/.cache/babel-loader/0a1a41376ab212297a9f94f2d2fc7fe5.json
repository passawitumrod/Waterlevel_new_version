{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport PolylineVolumeGeometry from \"../Core/PolylineVolumeGeometry.js\";\nimport PolylineVolumeOutlineGeometry from \"../Core/PolylineVolumeOutlineGeometry.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport Property from \"./Property.js\";\nvar scratchColor = new Color();\n\nfunction PolylineVolumeGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.polylinePositions = undefined;\n  this.shapePositions = undefined;\n  this.cornerType = undefined;\n  this.granularity = undefined;\n}\n/**\n * A {@link GeometryUpdater} for polyline volumes.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias PolylineVolumeGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\n\n\nfunction PolylineVolumeGeometryUpdater(entity, scene) {\n  GeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new PolylineVolumeGeometryOptions(entity),\n    geometryPropertyName: \"polylineVolume\",\n    observedPropertyNames: [\"availability\", \"polylineVolume\"]\n  });\n\n  this._onEntityPropertyChanged(entity, \"polylineVolume\", entity.polylineVolume, undefined);\n}\n\nif (defined(Object.create)) {\n  PolylineVolumeGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n  PolylineVolumeGeometryUpdater.prototype.constructor = PolylineVolumeGeometryUpdater;\n}\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\n\n\nPolylineVolumeGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\"This instance does not represent a filled geometry.\");\n  } //>>includeEnd('debug');\n\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n  var attributes;\n  var color;\n  var show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time));\n\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n  var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    var currentColor;\n\n    if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n\n    color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute,\n      color: color\n    };\n  } else {\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute\n    };\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new PolylineVolumeGeometry(this._options),\n    attributes: attributes\n  });\n};\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\n\n\nPolylineVolumeGeometryUpdater.prototype.createOutlineGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\"This instance does not represent an outlined geometry.\");\n  } //>>includeEnd('debug');\n\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n  var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new PolylineVolumeOutlineGeometry(this._options),\n    attributes: {\n      show: new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n      color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n      distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition)\n    }\n  });\n};\n\nPolylineVolumeGeometryUpdater.prototype._isHidden = function (entity, polylineVolume) {\n  return !defined(polylineVolume.positions) || !defined(polylineVolume.shape) || GeometryUpdater.prototype._isHidden.call(this, entity, polylineVolume);\n};\n\nPolylineVolumeGeometryUpdater.prototype._isDynamic = function (entity, polylineVolume) {\n  return !polylineVolume.positions.isConstant || //\n  !polylineVolume.shape.isConstant || //\n  !Property.isConstant(polylineVolume.granularity) || //\n  !Property.isConstant(polylineVolume.outlineWidth) || //\n  !Property.isConstant(polylineVolume.cornerType);\n};\n\nPolylineVolumeGeometryUpdater.prototype._setStaticOptions = function (entity, polylineVolume) {\n  var granularity = polylineVolume.granularity;\n  var cornerType = polylineVolume.cornerType;\n  var options = this._options;\n  var isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n  options.vertexFormat = isColorMaterial ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.polylinePositions = polylineVolume.positions.getValue(Iso8601.MINIMUM_VALUE, options.polylinePositions);\n  options.shapePositions = polylineVolume.shape.getValue(Iso8601.MINIMUM_VALUE, options.shape);\n  options.granularity = defined(granularity) ? granularity.getValue(Iso8601.MINIMUM_VALUE) : undefined;\n  options.cornerType = defined(cornerType) ? cornerType.getValue(Iso8601.MINIMUM_VALUE) : undefined;\n};\n\nPolylineVolumeGeometryUpdater.DynamicGeometryUpdater = DynamicPolylineVolumeGeometryUpdater;\n/**\n * @private\n */\n\nfunction DynamicPolylineVolumeGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n  DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n}\n\nif (defined(Object.create)) {\n  DynamicPolylineVolumeGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n  DynamicPolylineVolumeGeometryUpdater.prototype.constructor = DynamicPolylineVolumeGeometryUpdater;\n}\n\nDynamicPolylineVolumeGeometryUpdater.prototype._isHidden = function (entity, polylineVolume, time) {\n  var options = this._options;\n  return !defined(options.polylinePositions) || !defined(options.shapePositions) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, polylineVolume, time);\n};\n\nDynamicPolylineVolumeGeometryUpdater.prototype._setOptions = function (entity, polylineVolume, time) {\n  var options = this._options;\n  options.polylinePositions = Property.getValueOrUndefined(polylineVolume.positions, time, options.polylinePositions);\n  options.shapePositions = Property.getValueOrUndefined(polylineVolume.shape, time);\n  options.granularity = Property.getValueOrUndefined(polylineVolume.granularity, time);\n  options.cornerType = Property.getValueOrUndefined(polylineVolume.cornerType, time);\n};\n\nexport default PolylineVolumeGeometryUpdater;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/DataSources/PolylineVolumeGeometryUpdater.js"],"names":["Check","Color","ColorGeometryInstanceAttribute","defined","DeveloperError","DistanceDisplayConditionGeometryInstanceAttribute","GeometryInstance","Iso8601","PolylineVolumeGeometry","PolylineVolumeOutlineGeometry","ShowGeometryInstanceAttribute","MaterialAppearance","PerInstanceColorAppearance","ColorMaterialProperty","DynamicGeometryUpdater","GeometryUpdater","Property","scratchColor","PolylineVolumeGeometryOptions","entity","id","vertexFormat","undefined","polylinePositions","shapePositions","cornerType","granularity","PolylineVolumeGeometryUpdater","scene","call","geometryOptions","geometryPropertyName","observedPropertyNames","_onEntityPropertyChanged","polylineVolume","Object","create","prototype","constructor","createFillGeometryInstance","time","_fillEnabled","_entity","isAvailable","attributes","color","show","isShowing","_showProperty","getValue","_fillProperty","distanceDisplayCondition","_distanceDisplayConditionProperty","distanceDisplayConditionAttribute","fromDistanceDisplayCondition","_materialProperty","currentColor","isConstant","WHITE","fromColor","geometry","_options","createOutlineGeometryInstance","_outlineEnabled","outlineColor","getValueOrDefault","_outlineColorProperty","BLACK","_showOutlineProperty","_isHidden","positions","shape","_isDynamic","outlineWidth","_setStaticOptions","options","isColorMaterial","VERTEX_FORMAT","MaterialSupport","TEXTURED","MINIMUM_VALUE","DynamicPolylineVolumeGeometryUpdater","geometryUpdater","primitives","groundPrimitives","_setOptions","getValueOrUndefined"],"mappings":"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","sourcesContent":["import Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport PolylineVolumeGeometry from \"../Core/PolylineVolumeGeometry.js\";\nimport PolylineVolumeOutlineGeometry from \"../Core/PolylineVolumeOutlineGeometry.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport Property from \"./Property.js\";\n\nvar scratchColor = new Color();\n\nfunction PolylineVolumeGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.polylinePositions = undefined;\n  this.shapePositions = undefined;\n  this.cornerType = undefined;\n  this.granularity = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for polyline volumes.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias PolylineVolumeGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction PolylineVolumeGeometryUpdater(entity, scene) {\n  GeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new PolylineVolumeGeometryOptions(entity),\n    geometryPropertyName: \"polylineVolume\",\n    observedPropertyNames: [\"availability\", \"polylineVolume\"],\n  });\n\n  this._onEntityPropertyChanged(\n    entity,\n    \"polylineVolume\",\n    entity.polylineVolume,\n    undefined\n  );\n}\n\nif (defined(Object.create)) {\n  PolylineVolumeGeometryUpdater.prototype = Object.create(\n    GeometryUpdater.prototype\n  );\n  PolylineVolumeGeometryUpdater.prototype.constructor = PolylineVolumeGeometryUpdater;\n}\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nPolylineVolumeGeometryUpdater.prototype.createFillGeometryInstance = function (\n  time\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent a filled geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n\n  var attributes;\n\n  var color;\n  var show = new ShowGeometryInstanceAttribute(\n    isAvailable &&\n      entity.isShowing &&\n      this._showProperty.getValue(time) &&\n      this._fillProperty.getValue(time)\n  );\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n  var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n    distanceDisplayCondition\n  );\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    var currentColor;\n    if (\n      defined(this._materialProperty.color) &&\n      (this._materialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute,\n      color: color,\n    };\n  } else {\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute,\n    };\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new PolylineVolumeGeometry(this._options),\n    attributes: attributes,\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nPolylineVolumeGeometryUpdater.prototype.createOutlineGeometryInstance = function (\n  time\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent an outlined geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n  var outlineColor = Property.getValueOrDefault(\n    this._outlineColorProperty,\n    time,\n    Color.BLACK,\n    scratchColor\n  );\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new PolylineVolumeOutlineGeometry(this._options),\n    attributes: {\n      show: new ShowGeometryInstanceAttribute(\n        isAvailable &&\n          entity.isShowing &&\n          this._showProperty.getValue(time) &&\n          this._showOutlineProperty.getValue(time)\n      ),\n      color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n      distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n        distanceDisplayCondition\n      ),\n    },\n  });\n};\n\nPolylineVolumeGeometryUpdater.prototype._isHidden = function (\n  entity,\n  polylineVolume\n) {\n  return (\n    !defined(polylineVolume.positions) ||\n    !defined(polylineVolume.shape) ||\n    GeometryUpdater.prototype._isHidden.call(this, entity, polylineVolume)\n  );\n};\n\nPolylineVolumeGeometryUpdater.prototype._isDynamic = function (\n  entity,\n  polylineVolume\n) {\n  return (\n    !polylineVolume.positions.isConstant || //\n    !polylineVolume.shape.isConstant || //\n    !Property.isConstant(polylineVolume.granularity) || //\n    !Property.isConstant(polylineVolume.outlineWidth) || //\n    !Property.isConstant(polylineVolume.cornerType)\n  );\n};\n\nPolylineVolumeGeometryUpdater.prototype._setStaticOptions = function (\n  entity,\n  polylineVolume\n) {\n  var granularity = polylineVolume.granularity;\n  var cornerType = polylineVolume.cornerType;\n\n  var options = this._options;\n  var isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n  options.vertexFormat = isColorMaterial\n    ? PerInstanceColorAppearance.VERTEX_FORMAT\n    : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.polylinePositions = polylineVolume.positions.getValue(\n    Iso8601.MINIMUM_VALUE,\n    options.polylinePositions\n  );\n  options.shapePositions = polylineVolume.shape.getValue(\n    Iso8601.MINIMUM_VALUE,\n    options.shape\n  );\n  options.granularity = defined(granularity)\n    ? granularity.getValue(Iso8601.MINIMUM_VALUE)\n    : undefined;\n  options.cornerType = defined(cornerType)\n    ? cornerType.getValue(Iso8601.MINIMUM_VALUE)\n    : undefined;\n};\n\nPolylineVolumeGeometryUpdater.DynamicGeometryUpdater = DynamicPolylineVolumeGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicPolylineVolumeGeometryUpdater(\n  geometryUpdater,\n  primitives,\n  groundPrimitives\n) {\n  DynamicGeometryUpdater.call(\n    this,\n    geometryUpdater,\n    primitives,\n    groundPrimitives\n  );\n}\n\nif (defined(Object.create)) {\n  DynamicPolylineVolumeGeometryUpdater.prototype = Object.create(\n    DynamicGeometryUpdater.prototype\n  );\n  DynamicPolylineVolumeGeometryUpdater.prototype.constructor = DynamicPolylineVolumeGeometryUpdater;\n}\n\nDynamicPolylineVolumeGeometryUpdater.prototype._isHidden = function (\n  entity,\n  polylineVolume,\n  time\n) {\n  var options = this._options;\n  return (\n    !defined(options.polylinePositions) ||\n    !defined(options.shapePositions) ||\n    DynamicGeometryUpdater.prototype._isHidden.call(\n      this,\n      entity,\n      polylineVolume,\n      time\n    )\n  );\n};\n\nDynamicPolylineVolumeGeometryUpdater.prototype._setOptions = function (\n  entity,\n  polylineVolume,\n  time\n) {\n  var options = this._options;\n  options.polylinePositions = Property.getValueOrUndefined(\n    polylineVolume.positions,\n    time,\n    options.polylinePositions\n  );\n  options.shapePositions = Property.getValueOrUndefined(\n    polylineVolume.shape,\n    time\n  );\n  options.granularity = Property.getValueOrUndefined(\n    polylineVolume.granularity,\n    time\n  );\n  options.cornerType = Property.getValueOrUndefined(\n    polylineVolume.cornerType,\n    time\n  );\n};\nexport default PolylineVolumeGeometryUpdater;\n"]},"metadata":{},"sourceType":"module"}