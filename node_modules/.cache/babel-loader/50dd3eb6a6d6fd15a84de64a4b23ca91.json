{"ast":null,"code":"import DeveloperError from \"../Core/DeveloperError.js\";\n/**\n * Provides general quadtree tiles to be displayed on or near the surface of an ellipsoid.  It is intended to be\n * used with the {@link QuadtreePrimitive}.  This type describes an interface and is not intended to be\n * instantiated directly.\n *\n * @alias QuadtreeTileProvider\n * @constructor\n * @private\n */\n\nfunction QuadtreeTileProvider() {\n  DeveloperError.throwInstantiationError();\n}\n/**\n * Computes the default geometric error for level zero of the quadtree.\n *\n * @memberof QuadtreeTileProvider\n *\n * @param {TilingScheme} tilingScheme The tiling scheme for which to compute the geometric error.\n * @returns {Number} The maximum geometric error at level zero, in meters.\n */\n\n\nQuadtreeTileProvider.computeDefaultLevelZeroMaximumGeometricError = function (tilingScheme) {\n  return tilingScheme.ellipsoid.maximumRadius * 2 * Math.PI * 0.25 / (65 * tilingScheme.getNumberOfXTilesAtLevel(0));\n};\n\nObject.defineProperties(QuadtreeTileProvider.prototype, {\n  /**\n   * Gets or sets the {@link QuadtreePrimitive} for which this provider is\n   * providing tiles.\n   * @memberof QuadtreeTileProvider.prototype\n   * @type {QuadtreePrimitive}\n   */\n  quadtree: {\n    get: DeveloperError.throwInstantiationError,\n    set: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof QuadtreeTileProvider.prototype\n   * @type {Boolean}\n   */\n  ready: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets the tiling scheme used by the provider.  This property should\n   * not be accessed before {@link QuadtreeTileProvider#ready} returns true.\n   * @memberof QuadtreeTileProvider.prototype\n   * @type {TilingScheme}\n   */\n  tilingScheme: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets an event that is raised when the geometry provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof QuadtreeTileProvider.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: DeveloperError.throwInstantiationError\n  }\n});\n/**\n * Called at the beginning of the update cycle, regardless of id a new frame is being rendered, before {@link QuadtreeTileProvider#beginUpdate}\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {Context} context The rendering context.\n * @param {FrameState} frameState The frame state.\n */\n\nQuadtreeTileProvider.prototype.update = DeveloperError.throwInstantiationError;\n/**\n * Called at the beginning of the update cycle for each render frame, before {@link QuadtreeTileProvider#showTileThisFrame}\n * or any other functions.\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {Context} context The rendering context.\n * @param {FrameState} frameState The frame state.\n * @param {DrawCommand[]} commandList An array of rendering commands.  This method may push\n *        commands into this array.\n */\n\nQuadtreeTileProvider.prototype.beginUpdate = DeveloperError.throwInstantiationError;\n/**\n * Called at the end of the update cycle for each render frame, after {@link QuadtreeTileProvider#showTileThisFrame}\n * and any other functions.\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {Context} context The rendering context.\n * @param {FrameState} frameState The frame state.\n * @param {DrawCommand[]} commandList An array of rendering commands.  This method may push\n *        commands into this array.\n */\n\nQuadtreeTileProvider.prototype.endUpdate = DeveloperError.throwInstantiationError;\n/**\n * Gets the maximum geometric error allowed in a tile at a given level, in meters.  This function should not be\n * called before {@link QuadtreeTileProvider#ready} returns true.\n *\n * @see QuadtreeTileProvider#computeDefaultLevelZeroMaximumGeometricError\n *\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {Number} level The tile level for which to get the maximum geometric error.\n * @returns {Number} The maximum geometric error in meters.\n */\n\nQuadtreeTileProvider.prototype.getLevelMaximumGeometricError = DeveloperError.throwInstantiationError;\n/**\n * Loads, or continues loading, a given tile.  This function will continue to be called\n * until {@link QuadtreeTile#state} is no longer {@link QuadtreeTileLoadState#LOADING}.  This function should\n * not be called before {@link QuadtreeTileProvider#ready} returns true.\n *\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {Context} context The rendering context.\n * @param {FrameState} frameState The frame state.\n * @param {QuadtreeTile} tile The tile to load.\n *\n * @exception {DeveloperError} <code>loadTile</code> must not be called before the tile provider is ready.\n */\n\nQuadtreeTileProvider.prototype.loadTile = DeveloperError.throwInstantiationError;\n/**\n * Determines the visibility of a given tile.  The tile may be fully visible, partially visible, or not\n * visible at all.  Tiles that are renderable and are at least partially visible will be shown by a call\n * to {@link QuadtreeTileProvider#showTileThisFrame}.\n *\n * @memberof QuadtreeTileProvider\n *\n * @param {QuadtreeTile} tile The tile instance.\n * @param {FrameState} frameState The state information about the current frame.\n * @param {QuadtreeOccluders} occluders The objects that may occlude this tile.\n *\n * @returns {Visibility} The visibility of the tile.\n */\n\nQuadtreeTileProvider.prototype.computeTileVisibility = DeveloperError.throwInstantiationError;\n/**\n * Shows a specified tile in this frame.  The provider can cause the tile to be shown by adding\n * render commands to the commandList, or use any other method as appropriate.  The tile is not\n * expected to be visible next frame as well, unless this method is call next frame, too.\n *\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {QuadtreeTile} tile The tile instance.\n * @param {Context} context The rendering context.\n * @param {FrameState} frameState The state information of the current rendering frame.\n * @param {DrawCommand[]} commandList The list of rendering commands.  This method may add additional commands to this list.\n */\n\nQuadtreeTileProvider.prototype.showTileThisFrame = DeveloperError.throwInstantiationError;\n/**\n * Gets the distance from the camera to the closest point on the tile.  This is used for level-of-detail selection.\n *\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {QuadtreeTile} tile The tile instance.\n * @param {FrameState} frameState The state information of the current rendering frame.\n *\n * @returns {Number} The distance from the camera to the closest point on the tile, in meters.\n */\n\nQuadtreeTileProvider.prototype.computeDistanceToTile = DeveloperError.throwInstantiationError;\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @memberof QuadtreeTileProvider\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see QuadtreeTileProvider#destroy\n */\n\nQuadtreeTileProvider.prototype.isDestroyed = DeveloperError.throwInstantiationError;\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @memberof QuadtreeTileProvider\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * provider = provider && provider();\n *\n * @see QuadtreeTileProvider#isDestroyed\n */\n\nQuadtreeTileProvider.prototype.destroy = DeveloperError.throwInstantiationError;\nexport default QuadtreeTileProvider;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/QuadtreeTileProvider.js"],"names":["DeveloperError","QuadtreeTileProvider","throwInstantiationError","computeDefaultLevelZeroMaximumGeometricError","tilingScheme","ellipsoid","maximumRadius","Math","PI","getNumberOfXTilesAtLevel","Object","defineProperties","prototype","quadtree","get","set","ready","errorEvent","update","beginUpdate","endUpdate","getLevelMaximumGeometricError","loadTile","computeTileVisibility","showTileThisFrame","computeDistanceToTile","isDestroyed","destroy"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,2BAA3B;AAEA;;;;;;;;;;AASA,SAASC,oBAAT,GAAgC;AAC9BD,EAAAA,cAAc,CAACE,uBAAf;AACD;AAED;;;;;;;;;;AAQAD,oBAAoB,CAACE,4CAArB,GAAoE,UAClEC,YADkE,EAElE;AACA,SACGA,YAAY,CAACC,SAAb,CAAuBC,aAAvB,GAAuC,CAAvC,GAA2CC,IAAI,CAACC,EAAhD,GAAqD,IAAtD,IACC,KAAKJ,YAAY,CAACK,wBAAb,CAAsC,CAAtC,CADN,CADF;AAID,CAPD;;AASAC,MAAM,CAACC,gBAAP,CAAwBV,oBAAoB,CAACW,SAA7C,EAAwD;AACtD;;;;;;AAMAC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,GAAG,EAAEd,cAAc,CAACE,uBADZ;AAERa,IAAAA,GAAG,EAAEf,cAAc,CAACE;AAFZ,GAP4C;;AAYtD;;;;;AAKAc,EAAAA,KAAK,EAAE;AACLF,IAAAA,GAAG,EAAEd,cAAc,CAACE;AADf,GAjB+C;;AAqBtD;;;;;;AAMAE,EAAAA,YAAY,EAAE;AACZU,IAAAA,GAAG,EAAEd,cAAc,CAACE;AADR,GA3BwC;;AA+BtD;;;;;;;AAOAe,EAAAA,UAAU,EAAE;AACVH,IAAAA,GAAG,EAAEd,cAAc,CAACE;AADV;AAtC0C,CAAxD;AA2CA;;;;;;;;;AAQAD,oBAAoB,CAACW,SAArB,CAA+BM,MAA/B,GAAwClB,cAAc,CAACE,uBAAvD;AAEA;;;;;;;;;;;;AAWAD,oBAAoB,CAACW,SAArB,CAA+BO,WAA/B,GACEnB,cAAc,CAACE,uBADjB;AAGA;;;;;;;;;;;;AAWAD,oBAAoB,CAACW,SAArB,CAA+BQ,SAA/B,GACEpB,cAAc,CAACE,uBADjB;AAGA;;;;;;;;;;;;;AAYAD,oBAAoB,CAACW,SAArB,CAA+BS,6BAA/B,GACErB,cAAc,CAACE,uBADjB;AAGA;;;;;;;;;;;;;;;AAcAD,oBAAoB,CAACW,SAArB,CAA+BU,QAA/B,GACEtB,cAAc,CAACE,uBADjB;AAGA;;;;;;;;;;;;;;AAaAD,oBAAoB,CAACW,SAArB,CAA+BW,qBAA/B,GACEvB,cAAc,CAACE,uBADjB;AAGA;;;;;;;;;;;;;;AAaAD,oBAAoB,CAACW,SAArB,CAA+BY,iBAA/B,GACExB,cAAc,CAACE,uBADjB;AAGA;;;;;;;;;;;;AAWAD,oBAAoB,CAACW,SAArB,CAA+Ba,qBAA/B,GACEzB,cAAc,CAACE,uBADjB;AAGA;;;;;;;;;;;;;AAYAD,oBAAoB,CAACW,SAArB,CAA+Bc,WAA/B,GACE1B,cAAc,CAACE,uBADjB;AAGA;;;;;;;;;;;;;;;;;;;AAkBAD,oBAAoB,CAACW,SAArB,CAA+Be,OAA/B,GAAyC3B,cAAc,CAACE,uBAAxD;AACA,eAAeD,oBAAf","sourcesContent":["import DeveloperError from \"../Core/DeveloperError.js\";\n\n/**\n * Provides general quadtree tiles to be displayed on or near the surface of an ellipsoid.  It is intended to be\n * used with the {@link QuadtreePrimitive}.  This type describes an interface and is not intended to be\n * instantiated directly.\n *\n * @alias QuadtreeTileProvider\n * @constructor\n * @private\n */\nfunction QuadtreeTileProvider() {\n  DeveloperError.throwInstantiationError();\n}\n\n/**\n * Computes the default geometric error for level zero of the quadtree.\n *\n * @memberof QuadtreeTileProvider\n *\n * @param {TilingScheme} tilingScheme The tiling scheme for which to compute the geometric error.\n * @returns {Number} The maximum geometric error at level zero, in meters.\n */\nQuadtreeTileProvider.computeDefaultLevelZeroMaximumGeometricError = function (\n  tilingScheme\n) {\n  return (\n    (tilingScheme.ellipsoid.maximumRadius * 2 * Math.PI * 0.25) /\n    (65 * tilingScheme.getNumberOfXTilesAtLevel(0))\n  );\n};\n\nObject.defineProperties(QuadtreeTileProvider.prototype, {\n  /**\n   * Gets or sets the {@link QuadtreePrimitive} for which this provider is\n   * providing tiles.\n   * @memberof QuadtreeTileProvider.prototype\n   * @type {QuadtreePrimitive}\n   */\n  quadtree: {\n    get: DeveloperError.throwInstantiationError,\n    set: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof QuadtreeTileProvider.prototype\n   * @type {Boolean}\n   */\n  ready: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the tiling scheme used by the provider.  This property should\n   * not be accessed before {@link QuadtreeTileProvider#ready} returns true.\n   * @memberof QuadtreeTileProvider.prototype\n   * @type {TilingScheme}\n   */\n  tilingScheme: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets an event that is raised when the geometry provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof QuadtreeTileProvider.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\n/**\n * Called at the beginning of the update cycle, regardless of id a new frame is being rendered, before {@link QuadtreeTileProvider#beginUpdate}\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {Context} context The rendering context.\n * @param {FrameState} frameState The frame state.\n */\nQuadtreeTileProvider.prototype.update = DeveloperError.throwInstantiationError;\n\n/**\n * Called at the beginning of the update cycle for each render frame, before {@link QuadtreeTileProvider#showTileThisFrame}\n * or any other functions.\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {Context} context The rendering context.\n * @param {FrameState} frameState The frame state.\n * @param {DrawCommand[]} commandList An array of rendering commands.  This method may push\n *        commands into this array.\n */\nQuadtreeTileProvider.prototype.beginUpdate =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Called at the end of the update cycle for each render frame, after {@link QuadtreeTileProvider#showTileThisFrame}\n * and any other functions.\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {Context} context The rendering context.\n * @param {FrameState} frameState The frame state.\n * @param {DrawCommand[]} commandList An array of rendering commands.  This method may push\n *        commands into this array.\n */\nQuadtreeTileProvider.prototype.endUpdate =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Gets the maximum geometric error allowed in a tile at a given level, in meters.  This function should not be\n * called before {@link QuadtreeTileProvider#ready} returns true.\n *\n * @see QuadtreeTileProvider#computeDefaultLevelZeroMaximumGeometricError\n *\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {Number} level The tile level for which to get the maximum geometric error.\n * @returns {Number} The maximum geometric error in meters.\n */\nQuadtreeTileProvider.prototype.getLevelMaximumGeometricError =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Loads, or continues loading, a given tile.  This function will continue to be called\n * until {@link QuadtreeTile#state} is no longer {@link QuadtreeTileLoadState#LOADING}.  This function should\n * not be called before {@link QuadtreeTileProvider#ready} returns true.\n *\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {Context} context The rendering context.\n * @param {FrameState} frameState The frame state.\n * @param {QuadtreeTile} tile The tile to load.\n *\n * @exception {DeveloperError} <code>loadTile</code> must not be called before the tile provider is ready.\n */\nQuadtreeTileProvider.prototype.loadTile =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Determines the visibility of a given tile.  The tile may be fully visible, partially visible, or not\n * visible at all.  Tiles that are renderable and are at least partially visible will be shown by a call\n * to {@link QuadtreeTileProvider#showTileThisFrame}.\n *\n * @memberof QuadtreeTileProvider\n *\n * @param {QuadtreeTile} tile The tile instance.\n * @param {FrameState} frameState The state information about the current frame.\n * @param {QuadtreeOccluders} occluders The objects that may occlude this tile.\n *\n * @returns {Visibility} The visibility of the tile.\n */\nQuadtreeTileProvider.prototype.computeTileVisibility =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Shows a specified tile in this frame.  The provider can cause the tile to be shown by adding\n * render commands to the commandList, or use any other method as appropriate.  The tile is not\n * expected to be visible next frame as well, unless this method is call next frame, too.\n *\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {QuadtreeTile} tile The tile instance.\n * @param {Context} context The rendering context.\n * @param {FrameState} frameState The state information of the current rendering frame.\n * @param {DrawCommand[]} commandList The list of rendering commands.  This method may add additional commands to this list.\n */\nQuadtreeTileProvider.prototype.showTileThisFrame =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Gets the distance from the camera to the closest point on the tile.  This is used for level-of-detail selection.\n *\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {QuadtreeTile} tile The tile instance.\n * @param {FrameState} frameState The state information of the current rendering frame.\n *\n * @returns {Number} The distance from the camera to the closest point on the tile, in meters.\n */\nQuadtreeTileProvider.prototype.computeDistanceToTile =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @memberof QuadtreeTileProvider\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see QuadtreeTileProvider#destroy\n */\nQuadtreeTileProvider.prototype.isDestroyed =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @memberof QuadtreeTileProvider\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * provider = provider && provider();\n *\n * @see QuadtreeTileProvider#isDestroyed\n */\nQuadtreeTileProvider.prototype.destroy = DeveloperError.throwInstantiationError;\nexport default QuadtreeTileProvider;\n"]},"metadata":{},"sourceType":"module"}