{"ast":null,"code":"import defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\n/**\n * A view model that represents each item in the {@link BaseLayerPicker}.\n *\n * @alias ProviderViewModel\n * @constructor\n *\n * @param {Object} options The object containing all parameters.\n * @param {String} options.name The name of the layer.\n * @param {String} options.tooltip The tooltip to show when the item is moused over.\n * @param {String} options.iconUrl An icon representing the layer.\n * @param {String} [options.category] A category for the layer.\n * @param {ProviderViewModel~CreationFunction|Command} options.creationFunction A function or Command\n *        that creates one or more providers which will be added to the globe when this item is selected.\n *\n * @see BaseLayerPicker\n * @see ImageryProvider\n * @see TerrainProvider\n */\n\nfunction ProviderViewModel(options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options.name)) {\n    throw new DeveloperError(\"options.name is required.\");\n  }\n\n  if (!defined(options.tooltip)) {\n    throw new DeveloperError(\"options.tooltip is required.\");\n  }\n\n  if (!defined(options.iconUrl)) {\n    throw new DeveloperError(\"options.iconUrl is required.\");\n  }\n\n  if (typeof options.creationFunction !== \"function\") {\n    throw new DeveloperError(\"options.creationFunction is required.\");\n  } //>>includeEnd('debug');\n\n\n  var creationCommand = options.creationFunction;\n\n  if (!defined(creationCommand.canExecute)) {\n    creationCommand = createCommand(creationCommand);\n  }\n\n  this._creationCommand = creationCommand;\n  /**\n   * Gets the display name.  This property is observable.\n   * @type {String}\n   */\n\n  this.name = options.name;\n  /**\n   * Gets the tooltip.  This property is observable.\n   * @type {String}\n   */\n\n  this.tooltip = options.tooltip;\n  /**\n   * Gets the icon.  This property is observable.\n   * @type {String}\n   */\n\n  this.iconUrl = options.iconUrl;\n  this._category = defaultValue(options.category, \"\");\n  knockout.track(this, [\"name\", \"tooltip\", \"iconUrl\"]);\n}\n\nObject.defineProperties(ProviderViewModel.prototype, {\n  /**\n   * Gets the Command that creates one or more providers which will be added to\n   * the globe when this item is selected.\n   * @memberof ProviderViewModel.prototype\n   * @memberof ProviderViewModel.prototype\n   * @type {Command}\n   * @readonly\n   */\n  creationCommand: {\n    get: function () {\n      return this._creationCommand;\n    }\n  },\n\n  /**\n   * Gets the category\n   * @type {String}\n   * @memberof ProviderViewModel.prototype\n   * @readonly\n   */\n  category: {\n    get: function () {\n      return this._category;\n    }\n  }\n});\n/**\n * A function which creates one or more providers.\n * @callback ProviderViewModel~CreationFunction\n * @returns {ImageryProvider|TerrainProvider|ImageryProvider[]|TerrainProvider[]}\n *          The ImageryProvider or TerrainProvider, or array of providers, to be added\n *          to the globe.\n */\n\nexport default ProviderViewModel;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Widgets/BaseLayerPicker/ProviderViewModel.js"],"names":["defaultValue","defined","DeveloperError","knockout","createCommand","ProviderViewModel","options","name","tooltip","iconUrl","creationFunction","creationCommand","canExecute","_creationCommand","_category","category","track","Object","defineProperties","prototype","get"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,4BAAzB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,SAASC,iBAAT,CAA2BC,OAA3B,EAAoC;AAClC;AACA,MAAI,CAACL,OAAO,CAACK,OAAO,CAACC,IAAT,CAAZ,EAA4B;AAC1B,UAAM,IAAIL,cAAJ,CAAmB,2BAAnB,CAAN;AACD;;AACD,MAAI,CAACD,OAAO,CAACK,OAAO,CAACE,OAAT,CAAZ,EAA+B;AAC7B,UAAM,IAAIN,cAAJ,CAAmB,8BAAnB,CAAN;AACD;;AACD,MAAI,CAACD,OAAO,CAACK,OAAO,CAACG,OAAT,CAAZ,EAA+B;AAC7B,UAAM,IAAIP,cAAJ,CAAmB,8BAAnB,CAAN;AACD;;AACD,MAAI,OAAOI,OAAO,CAACI,gBAAf,KAAoC,UAAxC,EAAoD;AAClD,UAAM,IAAIR,cAAJ,CAAmB,uCAAnB,CAAN;AACD,GAbiC,CAclC;;;AAEA,MAAIS,eAAe,GAAGL,OAAO,CAACI,gBAA9B;;AACA,MAAI,CAACT,OAAO,CAACU,eAAe,CAACC,UAAjB,CAAZ,EAA0C;AACxCD,IAAAA,eAAe,GAAGP,aAAa,CAACO,eAAD,CAA/B;AACD;;AAED,OAAKE,gBAAL,GAAwBF,eAAxB;AAEA;;;;;AAIA,OAAKJ,IAAL,GAAYD,OAAO,CAACC,IAApB;AAEA;;;;;AAIA,OAAKC,OAAL,GAAeF,OAAO,CAACE,OAAvB;AAEA;;;;;AAIA,OAAKC,OAAL,GAAeH,OAAO,CAACG,OAAvB;AAEA,OAAKK,SAAL,GAAiBd,YAAY,CAACM,OAAO,CAACS,QAAT,EAAmB,EAAnB,CAA7B;AAEAZ,EAAAA,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqB,CAAC,MAAD,EAAS,SAAT,EAAoB,SAApB,CAArB;AACD;;AAEDC,MAAM,CAACC,gBAAP,CAAwBb,iBAAiB,CAACc,SAA1C,EAAqD;AACnD;;;;;;;;AAQAR,EAAAA,eAAe,EAAE;AACfS,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKP,gBAAZ;AACD;AAHc,GATkC;;AAenD;;;;;;AAMAE,EAAAA,QAAQ,EAAE;AACRK,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKN,SAAZ;AACD;AAHO;AArByC,CAArD;AA4BA;;;;;;;;AAOA,eAAeT,iBAAf","sourcesContent":["import defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\n\n/**\n * A view model that represents each item in the {@link BaseLayerPicker}.\n *\n * @alias ProviderViewModel\n * @constructor\n *\n * @param {Object} options The object containing all parameters.\n * @param {String} options.name The name of the layer.\n * @param {String} options.tooltip The tooltip to show when the item is moused over.\n * @param {String} options.iconUrl An icon representing the layer.\n * @param {String} [options.category] A category for the layer.\n * @param {ProviderViewModel~CreationFunction|Command} options.creationFunction A function or Command\n *        that creates one or more providers which will be added to the globe when this item is selected.\n *\n * @see BaseLayerPicker\n * @see ImageryProvider\n * @see TerrainProvider\n */\nfunction ProviderViewModel(options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options.name)) {\n    throw new DeveloperError(\"options.name is required.\");\n  }\n  if (!defined(options.tooltip)) {\n    throw new DeveloperError(\"options.tooltip is required.\");\n  }\n  if (!defined(options.iconUrl)) {\n    throw new DeveloperError(\"options.iconUrl is required.\");\n  }\n  if (typeof options.creationFunction !== \"function\") {\n    throw new DeveloperError(\"options.creationFunction is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var creationCommand = options.creationFunction;\n  if (!defined(creationCommand.canExecute)) {\n    creationCommand = createCommand(creationCommand);\n  }\n\n  this._creationCommand = creationCommand;\n\n  /**\n   * Gets the display name.  This property is observable.\n   * @type {String}\n   */\n  this.name = options.name;\n\n  /**\n   * Gets the tooltip.  This property is observable.\n   * @type {String}\n   */\n  this.tooltip = options.tooltip;\n\n  /**\n   * Gets the icon.  This property is observable.\n   * @type {String}\n   */\n  this.iconUrl = options.iconUrl;\n\n  this._category = defaultValue(options.category, \"\");\n\n  knockout.track(this, [\"name\", \"tooltip\", \"iconUrl\"]);\n}\n\nObject.defineProperties(ProviderViewModel.prototype, {\n  /**\n   * Gets the Command that creates one or more providers which will be added to\n   * the globe when this item is selected.\n   * @memberof ProviderViewModel.prototype\n   * @memberof ProviderViewModel.prototype\n   * @type {Command}\n   * @readonly\n   */\n  creationCommand: {\n    get: function () {\n      return this._creationCommand;\n    },\n  },\n\n  /**\n   * Gets the category\n   * @type {String}\n   * @memberof ProviderViewModel.prototype\n   * @readonly\n   */\n  category: {\n    get: function () {\n      return this._category;\n    },\n  },\n});\n\n/**\n * A function which creates one or more providers.\n * @callback ProviderViewModel~CreationFunction\n * @returns {ImageryProvider|TerrainProvider|ImageryProvider[]|TerrainProvider[]}\n *          The ImageryProvider or TerrainProvider, or array of providers, to be added\n *          to the globe.\n */\nexport default ProviderViewModel;\n"]},"metadata":{},"sourceType":"module"}