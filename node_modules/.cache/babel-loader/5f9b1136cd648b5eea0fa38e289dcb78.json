{"ast":null,"code":"import DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\n/**\n * Defines functions for 2nd order polynomial functions of one variable with only real coefficients.\n *\n * @exports QuadraticRealPolynomial\n */\n\nvar QuadraticRealPolynomial = {};\n/**\n * Provides the discriminant of the quadratic equation from the supplied coefficients.\n *\n * @param {Number} a The coefficient of the 2nd order monomial.\n * @param {Number} b The coefficient of the 1st order monomial.\n * @param {Number} c The coefficient of the 0th order monomial.\n * @returns {Number} The value of the discriminant.\n */\n\nQuadraticRealPolynomial.computeDiscriminant = function (a, b, c) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  } //>>includeEnd('debug');\n\n\n  var discriminant = b * b - 4.0 * a * c;\n  return discriminant;\n};\n\nfunction addWithCancellationCheck(left, right, tolerance) {\n  var difference = left + right;\n\n  if (CesiumMath.sign(left) !== CesiumMath.sign(right) && Math.abs(difference / Math.max(Math.abs(left), Math.abs(right))) < tolerance) {\n    return 0.0;\n  }\n\n  return difference;\n}\n/**\n * Provides the real valued roots of the quadratic polynomial with the provided coefficients.\n *\n * @param {Number} a The coefficient of the 2nd order monomial.\n * @param {Number} b The coefficient of the 1st order monomial.\n * @param {Number} c The coefficient of the 0th order monomial.\n * @returns {Number[]} The real valued roots.\n */\n\n\nQuadraticRealPolynomial.computeRealRoots = function (a, b, c) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  } //>>includeEnd('debug');\n\n\n  var ratio;\n\n  if (a === 0.0) {\n    if (b === 0.0) {\n      // Constant function: c = 0.\n      return [];\n    } // Linear function: b * x + c = 0.\n\n\n    return [-c / b];\n  } else if (b === 0.0) {\n    if (c === 0.0) {\n      // 2nd order monomial: a * x^2 = 0.\n      return [0.0, 0.0];\n    }\n\n    var cMagnitude = Math.abs(c);\n    var aMagnitude = Math.abs(a);\n\n    if (cMagnitude < aMagnitude && cMagnitude / aMagnitude < CesiumMath.EPSILON14) {\n      // c ~= 0.0.\n      // 2nd order monomial: a * x^2 = 0.\n      return [0.0, 0.0];\n    } else if (cMagnitude > aMagnitude && aMagnitude / cMagnitude < CesiumMath.EPSILON14) {\n      // a ~= 0.0.\n      // Constant function: c = 0.\n      return [];\n    } // a * x^2 + c = 0\n\n\n    ratio = -c / a;\n\n    if (ratio < 0.0) {\n      // Both roots are complex.\n      return [];\n    } // Both roots are real.\n\n\n    var root = Math.sqrt(ratio);\n    return [-root, root];\n  } else if (c === 0.0) {\n    // a * x^2 + b * x = 0\n    ratio = -b / a;\n\n    if (ratio < 0.0) {\n      return [ratio, 0.0];\n    }\n\n    return [0.0, ratio];\n  } // a * x^2 + b * x + c = 0\n\n\n  var b2 = b * b;\n  var four_ac = 4.0 * a * c;\n  var radicand = addWithCancellationCheck(b2, -four_ac, CesiumMath.EPSILON14);\n\n  if (radicand < 0.0) {\n    // Both roots are complex.\n    return [];\n  }\n\n  var q = -0.5 * addWithCancellationCheck(b, CesiumMath.sign(b) * Math.sqrt(radicand), CesiumMath.EPSILON14);\n\n  if (b > 0.0) {\n    return [q / a, c / q];\n  }\n\n  return [c / q, q / a];\n};\n\nexport default QuadraticRealPolynomial;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/QuadraticRealPolynomial.js"],"names":["DeveloperError","CesiumMath","QuadraticRealPolynomial","computeDiscriminant","a","b","c","discriminant","addWithCancellationCheck","left","right","tolerance","difference","sign","Math","abs","max","computeRealRoots","ratio","cMagnitude","aMagnitude","EPSILON14","root","sqrt","b2","four_ac","radicand","q"],"mappings":"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","sourcesContent":["import DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\n\n/**\n * Defines functions for 2nd order polynomial functions of one variable with only real coefficients.\n *\n * @exports QuadraticRealPolynomial\n */\nvar QuadraticRealPolynomial = {};\n\n/**\n * Provides the discriminant of the quadratic equation from the supplied coefficients.\n *\n * @param {Number} a The coefficient of the 2nd order monomial.\n * @param {Number} b The coefficient of the 1st order monomial.\n * @param {Number} c The coefficient of the 0th order monomial.\n * @returns {Number} The value of the discriminant.\n */\nQuadraticRealPolynomial.computeDiscriminant = function (a, b, c) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n  //>>includeEnd('debug');\n\n  var discriminant = b * b - 4.0 * a * c;\n  return discriminant;\n};\n\nfunction addWithCancellationCheck(left, right, tolerance) {\n  var difference = left + right;\n  if (\n    CesiumMath.sign(left) !== CesiumMath.sign(right) &&\n    Math.abs(difference / Math.max(Math.abs(left), Math.abs(right))) < tolerance\n  ) {\n    return 0.0;\n  }\n\n  return difference;\n}\n\n/**\n * Provides the real valued roots of the quadratic polynomial with the provided coefficients.\n *\n * @param {Number} a The coefficient of the 2nd order monomial.\n * @param {Number} b The coefficient of the 1st order monomial.\n * @param {Number} c The coefficient of the 0th order monomial.\n * @returns {Number[]} The real valued roots.\n */\nQuadraticRealPolynomial.computeRealRoots = function (a, b, c) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n  //>>includeEnd('debug');\n\n  var ratio;\n  if (a === 0.0) {\n    if (b === 0.0) {\n      // Constant function: c = 0.\n      return [];\n    }\n\n    // Linear function: b * x + c = 0.\n    return [-c / b];\n  } else if (b === 0.0) {\n    if (c === 0.0) {\n      // 2nd order monomial: a * x^2 = 0.\n      return [0.0, 0.0];\n    }\n\n    var cMagnitude = Math.abs(c);\n    var aMagnitude = Math.abs(a);\n\n    if (\n      cMagnitude < aMagnitude &&\n      cMagnitude / aMagnitude < CesiumMath.EPSILON14\n    ) {\n      // c ~= 0.0.\n      // 2nd order monomial: a * x^2 = 0.\n      return [0.0, 0.0];\n    } else if (\n      cMagnitude > aMagnitude &&\n      aMagnitude / cMagnitude < CesiumMath.EPSILON14\n    ) {\n      // a ~= 0.0.\n      // Constant function: c = 0.\n      return [];\n    }\n\n    // a * x^2 + c = 0\n    ratio = -c / a;\n\n    if (ratio < 0.0) {\n      // Both roots are complex.\n      return [];\n    }\n\n    // Both roots are real.\n    var root = Math.sqrt(ratio);\n    return [-root, root];\n  } else if (c === 0.0) {\n    // a * x^2 + b * x = 0\n    ratio = -b / a;\n    if (ratio < 0.0) {\n      return [ratio, 0.0];\n    }\n\n    return [0.0, ratio];\n  }\n\n  // a * x^2 + b * x + c = 0\n  var b2 = b * b;\n  var four_ac = 4.0 * a * c;\n  var radicand = addWithCancellationCheck(b2, -four_ac, CesiumMath.EPSILON14);\n\n  if (radicand < 0.0) {\n    // Both roots are complex.\n    return [];\n  }\n\n  var q =\n    -0.5 *\n    addWithCancellationCheck(\n      b,\n      CesiumMath.sign(b) * Math.sqrt(radicand),\n      CesiumMath.EPSILON14\n    );\n  if (b > 0.0) {\n    return [q / a, c / q];\n  }\n\n  return [c / q, q / a];\n};\nexport default QuadraticRealPolynomial;\n"]},"metadata":{},"sourceType":"module"}