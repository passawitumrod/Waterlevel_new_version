{"ast":null,"code":"import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport Primitive from \"../Scene/Primitive.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport MaterialProperty from \"./MaterialProperty.js\";\nimport Property from \"./Property.js\";\nvar distanceDisplayConditionScratch = new DistanceDisplayCondition();\nvar defaultDistanceDisplayCondition = new DistanceDisplayCondition();\nvar defaultOffset = Cartesian3.ZERO;\nvar offsetScratch = new Cartesian3();\n\nfunction Batch(primitives, appearanceType, materialProperty, depthFailAppearanceType, depthFailMaterialProperty, closed, shadows) {\n  this.primitives = primitives;\n  this.appearanceType = appearanceType;\n  this.materialProperty = materialProperty;\n  this.depthFailAppearanceType = depthFailAppearanceType;\n  this.depthFailMaterialProperty = depthFailMaterialProperty;\n  this.closed = closed;\n  this.shadows = shadows;\n  this.updaters = new AssociativeArray();\n  this.createPrimitive = true;\n  this.primitive = undefined;\n  this.oldPrimitive = undefined;\n  this.geometry = new AssociativeArray();\n  this.material = undefined;\n  this.depthFailMaterial = undefined;\n  this.updatersWithAttributes = new AssociativeArray();\n  this.attributes = new AssociativeArray();\n  this.invalidated = false;\n  this.removeMaterialSubscription = materialProperty.definitionChanged.addEventListener(Batch.prototype.onMaterialChanged, this);\n  this.subscriptions = new AssociativeArray();\n  this.showsUpdated = new AssociativeArray();\n}\n\nBatch.prototype.onMaterialChanged = function () {\n  this.invalidated = true;\n};\n\nBatch.prototype.isMaterial = function (updater) {\n  var material = this.materialProperty;\n  var updaterMaterial = updater.fillMaterialProperty;\n  var depthFailMaterial = this.depthFailMaterialProperty;\n  var updaterDepthFailMaterial = updater.depthFailMaterialProperty;\n\n  if (updaterMaterial === material && updaterDepthFailMaterial === depthFailMaterial) {\n    return true;\n  }\n\n  var equals = defined(material) && material.equals(updaterMaterial);\n  equals = (!defined(depthFailMaterial) && !defined(updaterDepthFailMaterial) || defined(depthFailMaterial) && depthFailMaterial.equals(updaterDepthFailMaterial)) && equals;\n  return equals;\n};\n\nBatch.prototype.add = function (time, updater) {\n  var id = updater.id;\n  this.updaters.set(id, updater);\n  this.geometry.set(id, updater.createFillGeometryInstance(time));\n\n  if (!updater.hasConstantFill || !updater.fillMaterialProperty.isConstant || !Property.isConstant(updater.distanceDisplayConditionProperty) || !Property.isConstant(updater.terrainOffsetProperty)) {\n    this.updatersWithAttributes.set(id, updater);\n  } else {\n    var that = this;\n    this.subscriptions.set(id, updater.entity.definitionChanged.addEventListener(function (entity, propertyName, newValue, oldValue) {\n      if (propertyName === \"isShowing\") {\n        that.showsUpdated.set(updater.id, updater);\n      }\n    }));\n  }\n\n  this.createPrimitive = true;\n};\n\nBatch.prototype.remove = function (updater) {\n  var id = updater.id;\n  this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n\n  if (this.updaters.remove(id)) {\n    this.updatersWithAttributes.remove(id);\n    var unsubscribe = this.subscriptions.get(id);\n\n    if (defined(unsubscribe)) {\n      unsubscribe();\n      this.subscriptions.remove(id);\n      this.showsUpdated.remove(id);\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nvar colorScratch = new Color();\n\nBatch.prototype.update = function (time) {\n  var isUpdated = true;\n  var primitive = this.primitive;\n  var primitives = this.primitives;\n  var geometries = this.geometry.values;\n  var i;\n\n  if (this.createPrimitive) {\n    var geometriesLength = geometries.length;\n\n    if (geometriesLength > 0) {\n      if (defined(primitive)) {\n        if (!defined(this.oldPrimitive)) {\n          this.oldPrimitive = primitive;\n        } else {\n          primitives.remove(primitive);\n        }\n      }\n\n      this.material = MaterialProperty.getValue(time, this.materialProperty, this.material);\n      var depthFailAppearance;\n\n      if (defined(this.depthFailMaterialProperty)) {\n        this.depthFailMaterial = MaterialProperty.getValue(time, this.depthFailMaterialProperty, this.depthFailMaterial);\n        depthFailAppearance = new this.depthFailAppearanceType({\n          material: this.depthFailMaterial,\n          translucent: this.depthFailMaterial.isTranslucent(),\n          closed: this.closed\n        });\n      }\n\n      primitive = new Primitive({\n        show: false,\n        asynchronous: true,\n        geometryInstances: geometries.slice(),\n        appearance: new this.appearanceType({\n          material: this.material,\n          translucent: this.material.isTranslucent(),\n          closed: this.closed\n        }),\n        depthFailAppearance: depthFailAppearance,\n        shadows: this.shadows\n      });\n      primitives.add(primitive);\n      isUpdated = false;\n    } else {\n      if (defined(primitive)) {\n        primitives.remove(primitive);\n        primitive = undefined;\n      }\n\n      var oldPrimitive = this.oldPrimitive;\n\n      if (defined(oldPrimitive)) {\n        primitives.remove(oldPrimitive);\n        this.oldPrimitive = undefined;\n      }\n    }\n\n    this.attributes.removeAll();\n    this.primitive = primitive;\n    this.createPrimitive = false;\n  } else if (defined(primitive) && primitive.ready) {\n    primitive.show = true;\n\n    if (defined(this.oldPrimitive)) {\n      primitives.remove(this.oldPrimitive);\n      this.oldPrimitive = undefined;\n    }\n\n    this.material = MaterialProperty.getValue(time, this.materialProperty, this.material);\n    this.primitive.appearance.material = this.material;\n\n    if (defined(this.depthFailAppearanceType) && !(this.depthFailMaterialProperty instanceof ColorMaterialProperty)) {\n      this.depthFailMaterial = MaterialProperty.getValue(time, this.depthFailMaterialProperty, this.depthFailMaterial);\n      this.primitive.depthFailAppearance.material = this.depthFailMaterial;\n    }\n\n    var updatersWithAttributes = this.updatersWithAttributes.values;\n    var length = updatersWithAttributes.length;\n\n    for (i = 0; i < length; i++) {\n      var updater = updatersWithAttributes[i];\n      var entity = updater.entity;\n      var instance = this.geometry.get(updater.id);\n      var attributes = this.attributes.get(instance.id.id);\n\n      if (!defined(attributes)) {\n        attributes = primitive.getGeometryInstanceAttributes(instance.id);\n        this.attributes.set(instance.id.id, attributes);\n      }\n\n      if (defined(this.depthFailAppearanceType) && this.depthFailMaterialProperty instanceof ColorMaterialProperty && !updater.depthFailMaterialProperty.isConstant) {\n        var depthFailColorProperty = updater.depthFailMaterialProperty.color;\n        var depthFailColor = Property.getValueOrDefault(depthFailColorProperty, time, Color.WHITE, colorScratch);\n\n        if (!Color.equals(attributes._lastDepthFailColor, depthFailColor)) {\n          attributes._lastDepthFailColor = Color.clone(depthFailColor, attributes._lastDepthFailColor);\n          attributes.depthFailColor = ColorGeometryInstanceAttribute.toValue(depthFailColor, attributes.depthFailColor);\n        }\n      }\n\n      var show = entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n      var currentShow = attributes.show[0] === 1;\n\n      if (show !== currentShow) {\n        attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n      }\n\n      var distanceDisplayConditionProperty = updater.distanceDisplayConditionProperty;\n\n      if (!Property.isConstant(distanceDisplayConditionProperty)) {\n        var distanceDisplayCondition = Property.getValueOrDefault(distanceDisplayConditionProperty, time, defaultDistanceDisplayCondition, distanceDisplayConditionScratch);\n\n        if (!DistanceDisplayCondition.equals(distanceDisplayCondition, attributes._lastDistanceDisplayCondition)) {\n          attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition, attributes._lastDistanceDisplayCondition);\n          attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n        }\n      }\n\n      var offsetProperty = updater.terrainOffsetProperty;\n\n      if (!Property.isConstant(offsetProperty)) {\n        var offset = Property.getValueOrDefault(offsetProperty, time, defaultOffset, offsetScratch);\n\n        if (!Cartesian3.equals(offset, attributes._lastOffset)) {\n          attributes._lastOffset = Cartesian3.clone(offset, attributes._lastOffset);\n          attributes.offset = OffsetGeometryInstanceAttribute.toValue(offset, attributes.offset);\n        }\n      }\n    }\n\n    this.updateShows(primitive);\n  } else if (defined(primitive) && !primitive.ready) {\n    isUpdated = false;\n  }\n\n  return isUpdated;\n};\n\nBatch.prototype.updateShows = function (primitive) {\n  var showsUpdated = this.showsUpdated.values;\n  var length = showsUpdated.length;\n\n  for (var i = 0; i < length; i++) {\n    var updater = showsUpdated[i];\n    var entity = updater.entity;\n    var instance = this.geometry.get(updater.id);\n    var attributes = this.attributes.get(instance.id.id);\n\n    if (!defined(attributes)) {\n      attributes = primitive.getGeometryInstanceAttributes(instance.id);\n      this.attributes.set(instance.id.id, attributes);\n    }\n\n    var show = entity.isShowing;\n    var currentShow = attributes.show[0] === 1;\n\n    if (show !== currentShow) {\n      attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n      instance.attributes.show.value[0] = attributes.show[0];\n    }\n  }\n\n  this.showsUpdated.removeAll();\n};\n\nBatch.prototype.contains = function (updater) {\n  return this.updaters.contains(updater.id);\n};\n\nBatch.prototype.getBoundingSphere = function (updater, result) {\n  var primitive = this.primitive;\n\n  if (!primitive.ready) {\n    return BoundingSphereState.PENDING;\n  }\n\n  var attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n\n  if (!defined(attributes) || !defined(attributes.boundingSphere) || defined(attributes.show) && attributes.show[0] === 0) {\n    return BoundingSphereState.FAILED;\n  }\n\n  attributes.boundingSphere.clone(result);\n  return BoundingSphereState.DONE;\n};\n\nBatch.prototype.destroy = function () {\n  var primitive = this.primitive;\n  var primitives = this.primitives;\n\n  if (defined(primitive)) {\n    primitives.remove(primitive);\n  }\n\n  var oldPrimitive = this.oldPrimitive;\n\n  if (defined(oldPrimitive)) {\n    primitives.remove(oldPrimitive);\n  }\n\n  this.removeMaterialSubscription();\n};\n/**\n * @private\n */\n\n\nfunction StaticGeometryPerMaterialBatch(primitives, appearanceType, depthFailAppearanceType, closed, shadows) {\n  this._items = [];\n  this._primitives = primitives;\n  this._appearanceType = appearanceType;\n  this._depthFailAppearanceType = depthFailAppearanceType;\n  this._closed = closed;\n  this._shadows = shadows;\n}\n\nStaticGeometryPerMaterialBatch.prototype.add = function (time, updater) {\n  var items = this._items;\n  var length = items.length;\n\n  for (var i = 0; i < length; i++) {\n    var item = items[i];\n\n    if (item.isMaterial(updater)) {\n      item.add(time, updater);\n      return;\n    }\n  }\n\n  var batch = new Batch(this._primitives, this._appearanceType, updater.fillMaterialProperty, this._depthFailAppearanceType, updater.depthFailMaterialProperty, this._closed, this._shadows);\n  batch.add(time, updater);\n  items.push(batch);\n};\n\nStaticGeometryPerMaterialBatch.prototype.remove = function (updater) {\n  var items = this._items;\n  var length = items.length;\n\n  for (var i = length - 1; i >= 0; i--) {\n    var item = items[i];\n\n    if (item.remove(updater)) {\n      if (item.updaters.length === 0) {\n        items.splice(i, 1);\n        item.destroy();\n      }\n\n      break;\n    }\n  }\n};\n\nStaticGeometryPerMaterialBatch.prototype.update = function (time) {\n  var i;\n  var items = this._items;\n  var length = items.length;\n\n  for (i = length - 1; i >= 0; i--) {\n    var item = items[i];\n\n    if (item.invalidated) {\n      items.splice(i, 1);\n      var updaters = item.updaters.values;\n      var updatersLength = updaters.length;\n\n      for (var h = 0; h < updatersLength; h++) {\n        this.add(time, updaters[h]);\n      }\n\n      item.destroy();\n    }\n  }\n\n  var isUpdated = true;\n\n  for (i = 0; i < items.length; i++) {\n    isUpdated = items[i].update(time) && isUpdated;\n  }\n\n  return isUpdated;\n};\n\nStaticGeometryPerMaterialBatch.prototype.getBoundingSphere = function (updater, result) {\n  var items = this._items;\n  var length = items.length;\n\n  for (var i = 0; i < length; i++) {\n    var item = items[i];\n\n    if (item.contains(updater)) {\n      return item.getBoundingSphere(updater, result);\n    }\n  }\n\n  return BoundingSphereState.FAILED;\n};\n\nStaticGeometryPerMaterialBatch.prototype.removeAllPrimitives = function () {\n  var items = this._items;\n  var length = items.length;\n\n  for (var i = 0; i < length; i++) {\n    items[i].destroy();\n  }\n\n  this._items.length = 0;\n};\n\nexport default StaticGeometryPerMaterialBatch;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/StaticGeometryPerMaterialBatch.js"],"names":["AssociativeArray","Cartesian3","Color","ColorGeometryInstanceAttribute","defined","DistanceDisplayCondition","DistanceDisplayConditionGeometryInstanceAttribute","OffsetGeometryInstanceAttribute","ShowGeometryInstanceAttribute","Primitive","BoundingSphereState","ColorMaterialProperty","MaterialProperty","Property","distanceDisplayConditionScratch","defaultDistanceDisplayCondition","defaultOffset","ZERO","offsetScratch","Batch","primitives","appearanceType","materialProperty","depthFailAppearanceType","depthFailMaterialProperty","closed","shadows","updaters","createPrimitive","primitive","undefined","oldPrimitive","geometry","material","depthFailMaterial","updatersWithAttributes","attributes","invalidated","removeMaterialSubscription","definitionChanged","addEventListener","prototype","onMaterialChanged","subscriptions","showsUpdated","isMaterial","updater","updaterMaterial","fillMaterialProperty","updaterDepthFailMaterial","equals","add","time","id","set","createFillGeometryInstance","hasConstantFill","isConstant","distanceDisplayConditionProperty","terrainOffsetProperty","that","entity","propertyName","newValue","oldValue","remove","unsubscribe","get","colorScratch","update","isUpdated","geometries","values","i","geometriesLength","length","getValue","depthFailAppearance","translucent","isTranslucent","show","asynchronous","geometryInstances","slice","appearance","removeAll","ready","instance","getGeometryInstanceAttributes","depthFailColorProperty","color","depthFailColor","getValueOrDefault","WHITE","_lastDepthFailColor","clone","toValue","isShowing","isFilled","currentShow","distanceDisplayCondition","_lastDistanceDisplayCondition","offsetProperty","offset","_lastOffset","updateShows","value","contains","getBoundingSphere","result","PENDING","boundingSphere","FAILED","DONE","destroy","StaticGeometryPerMaterialBatch","_items","_primitives","_appearanceType","_depthFailAppearanceType","_closed","_shadows","items","item","batch","push","splice","updatersLength","h","removeAllPrimitives"],"mappings":"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","sourcesContent":["import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport Primitive from \"../Scene/Primitive.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport MaterialProperty from \"./MaterialProperty.js\";\nimport Property from \"./Property.js\";\n\nvar distanceDisplayConditionScratch = new DistanceDisplayCondition();\nvar defaultDistanceDisplayCondition = new DistanceDisplayCondition();\nvar defaultOffset = Cartesian3.ZERO;\nvar offsetScratch = new Cartesian3();\n\nfunction Batch(\n  primitives,\n  appearanceType,\n  materialProperty,\n  depthFailAppearanceType,\n  depthFailMaterialProperty,\n  closed,\n  shadows\n) {\n  this.primitives = primitives;\n  this.appearanceType = appearanceType;\n  this.materialProperty = materialProperty;\n  this.depthFailAppearanceType = depthFailAppearanceType;\n  this.depthFailMaterialProperty = depthFailMaterialProperty;\n  this.closed = closed;\n  this.shadows = shadows;\n  this.updaters = new AssociativeArray();\n  this.createPrimitive = true;\n  this.primitive = undefined;\n  this.oldPrimitive = undefined;\n  this.geometry = new AssociativeArray();\n  this.material = undefined;\n  this.depthFailMaterial = undefined;\n  this.updatersWithAttributes = new AssociativeArray();\n  this.attributes = new AssociativeArray();\n  this.invalidated = false;\n  this.removeMaterialSubscription = materialProperty.definitionChanged.addEventListener(\n    Batch.prototype.onMaterialChanged,\n    this\n  );\n  this.subscriptions = new AssociativeArray();\n  this.showsUpdated = new AssociativeArray();\n}\n\nBatch.prototype.onMaterialChanged = function () {\n  this.invalidated = true;\n};\n\nBatch.prototype.isMaterial = function (updater) {\n  var material = this.materialProperty;\n  var updaterMaterial = updater.fillMaterialProperty;\n  var depthFailMaterial = this.depthFailMaterialProperty;\n  var updaterDepthFailMaterial = updater.depthFailMaterialProperty;\n\n  if (\n    updaterMaterial === material &&\n    updaterDepthFailMaterial === depthFailMaterial\n  ) {\n    return true;\n  }\n  var equals = defined(material) && material.equals(updaterMaterial);\n  equals =\n    ((!defined(depthFailMaterial) && !defined(updaterDepthFailMaterial)) ||\n      (defined(depthFailMaterial) &&\n        depthFailMaterial.equals(updaterDepthFailMaterial))) &&\n    equals;\n  return equals;\n};\n\nBatch.prototype.add = function (time, updater) {\n  var id = updater.id;\n  this.updaters.set(id, updater);\n  this.geometry.set(id, updater.createFillGeometryInstance(time));\n  if (\n    !updater.hasConstantFill ||\n    !updater.fillMaterialProperty.isConstant ||\n    !Property.isConstant(updater.distanceDisplayConditionProperty) ||\n    !Property.isConstant(updater.terrainOffsetProperty)\n  ) {\n    this.updatersWithAttributes.set(id, updater);\n  } else {\n    var that = this;\n    this.subscriptions.set(\n      id,\n      updater.entity.definitionChanged.addEventListener(function (\n        entity,\n        propertyName,\n        newValue,\n        oldValue\n      ) {\n        if (propertyName === \"isShowing\") {\n          that.showsUpdated.set(updater.id, updater);\n        }\n      })\n    );\n  }\n  this.createPrimitive = true;\n};\n\nBatch.prototype.remove = function (updater) {\n  var id = updater.id;\n  this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n  if (this.updaters.remove(id)) {\n    this.updatersWithAttributes.remove(id);\n    var unsubscribe = this.subscriptions.get(id);\n    if (defined(unsubscribe)) {\n      unsubscribe();\n      this.subscriptions.remove(id);\n      this.showsUpdated.remove(id);\n    }\n    return true;\n  }\n  return false;\n};\n\nvar colorScratch = new Color();\n\nBatch.prototype.update = function (time) {\n  var isUpdated = true;\n  var primitive = this.primitive;\n  var primitives = this.primitives;\n  var geometries = this.geometry.values;\n  var i;\n\n  if (this.createPrimitive) {\n    var geometriesLength = geometries.length;\n    if (geometriesLength > 0) {\n      if (defined(primitive)) {\n        if (!defined(this.oldPrimitive)) {\n          this.oldPrimitive = primitive;\n        } else {\n          primitives.remove(primitive);\n        }\n      }\n\n      this.material = MaterialProperty.getValue(\n        time,\n        this.materialProperty,\n        this.material\n      );\n\n      var depthFailAppearance;\n      if (defined(this.depthFailMaterialProperty)) {\n        this.depthFailMaterial = MaterialProperty.getValue(\n          time,\n          this.depthFailMaterialProperty,\n          this.depthFailMaterial\n        );\n        depthFailAppearance = new this.depthFailAppearanceType({\n          material: this.depthFailMaterial,\n          translucent: this.depthFailMaterial.isTranslucent(),\n          closed: this.closed,\n        });\n      }\n\n      primitive = new Primitive({\n        show: false,\n        asynchronous: true,\n        geometryInstances: geometries.slice(),\n        appearance: new this.appearanceType({\n          material: this.material,\n          translucent: this.material.isTranslucent(),\n          closed: this.closed,\n        }),\n        depthFailAppearance: depthFailAppearance,\n        shadows: this.shadows,\n      });\n\n      primitives.add(primitive);\n      isUpdated = false;\n    } else {\n      if (defined(primitive)) {\n        primitives.remove(primitive);\n        primitive = undefined;\n      }\n      var oldPrimitive = this.oldPrimitive;\n      if (defined(oldPrimitive)) {\n        primitives.remove(oldPrimitive);\n        this.oldPrimitive = undefined;\n      }\n    }\n\n    this.attributes.removeAll();\n    this.primitive = primitive;\n    this.createPrimitive = false;\n  } else if (defined(primitive) && primitive.ready) {\n    primitive.show = true;\n    if (defined(this.oldPrimitive)) {\n      primitives.remove(this.oldPrimitive);\n      this.oldPrimitive = undefined;\n    }\n\n    this.material = MaterialProperty.getValue(\n      time,\n      this.materialProperty,\n      this.material\n    );\n    this.primitive.appearance.material = this.material;\n\n    if (\n      defined(this.depthFailAppearanceType) &&\n      !(this.depthFailMaterialProperty instanceof ColorMaterialProperty)\n    ) {\n      this.depthFailMaterial = MaterialProperty.getValue(\n        time,\n        this.depthFailMaterialProperty,\n        this.depthFailMaterial\n      );\n      this.primitive.depthFailAppearance.material = this.depthFailMaterial;\n    }\n\n    var updatersWithAttributes = this.updatersWithAttributes.values;\n    var length = updatersWithAttributes.length;\n    for (i = 0; i < length; i++) {\n      var updater = updatersWithAttributes[i];\n      var entity = updater.entity;\n      var instance = this.geometry.get(updater.id);\n\n      var attributes = this.attributes.get(instance.id.id);\n      if (!defined(attributes)) {\n        attributes = primitive.getGeometryInstanceAttributes(instance.id);\n        this.attributes.set(instance.id.id, attributes);\n      }\n\n      if (\n        defined(this.depthFailAppearanceType) &&\n        this.depthFailMaterialProperty instanceof ColorMaterialProperty &&\n        !updater.depthFailMaterialProperty.isConstant\n      ) {\n        var depthFailColorProperty = updater.depthFailMaterialProperty.color;\n        var depthFailColor = Property.getValueOrDefault(\n          depthFailColorProperty,\n          time,\n          Color.WHITE,\n          colorScratch\n        );\n        if (!Color.equals(attributes._lastDepthFailColor, depthFailColor)) {\n          attributes._lastDepthFailColor = Color.clone(\n            depthFailColor,\n            attributes._lastDepthFailColor\n          );\n          attributes.depthFailColor = ColorGeometryInstanceAttribute.toValue(\n            depthFailColor,\n            attributes.depthFailColor\n          );\n        }\n      }\n\n      var show =\n        entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n      var currentShow = attributes.show[0] === 1;\n      if (show !== currentShow) {\n        attributes.show = ShowGeometryInstanceAttribute.toValue(\n          show,\n          attributes.show\n        );\n      }\n\n      var distanceDisplayConditionProperty =\n        updater.distanceDisplayConditionProperty;\n      if (!Property.isConstant(distanceDisplayConditionProperty)) {\n        var distanceDisplayCondition = Property.getValueOrDefault(\n          distanceDisplayConditionProperty,\n          time,\n          defaultDistanceDisplayCondition,\n          distanceDisplayConditionScratch\n        );\n        if (\n          !DistanceDisplayCondition.equals(\n            distanceDisplayCondition,\n            attributes._lastDistanceDisplayCondition\n          )\n        ) {\n          attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(\n            distanceDisplayCondition,\n            attributes._lastDistanceDisplayCondition\n          );\n          attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(\n            distanceDisplayCondition,\n            attributes.distanceDisplayCondition\n          );\n        }\n      }\n\n      var offsetProperty = updater.terrainOffsetProperty;\n      if (!Property.isConstant(offsetProperty)) {\n        var offset = Property.getValueOrDefault(\n          offsetProperty,\n          time,\n          defaultOffset,\n          offsetScratch\n        );\n        if (!Cartesian3.equals(offset, attributes._lastOffset)) {\n          attributes._lastOffset = Cartesian3.clone(\n            offset,\n            attributes._lastOffset\n          );\n          attributes.offset = OffsetGeometryInstanceAttribute.toValue(\n            offset,\n            attributes.offset\n          );\n        }\n      }\n    }\n\n    this.updateShows(primitive);\n  } else if (defined(primitive) && !primitive.ready) {\n    isUpdated = false;\n  }\n  return isUpdated;\n};\n\nBatch.prototype.updateShows = function (primitive) {\n  var showsUpdated = this.showsUpdated.values;\n  var length = showsUpdated.length;\n  for (var i = 0; i < length; i++) {\n    var updater = showsUpdated[i];\n    var entity = updater.entity;\n    var instance = this.geometry.get(updater.id);\n\n    var attributes = this.attributes.get(instance.id.id);\n    if (!defined(attributes)) {\n      attributes = primitive.getGeometryInstanceAttributes(instance.id);\n      this.attributes.set(instance.id.id, attributes);\n    }\n\n    var show = entity.isShowing;\n    var currentShow = attributes.show[0] === 1;\n    if (show !== currentShow) {\n      attributes.show = ShowGeometryInstanceAttribute.toValue(\n        show,\n        attributes.show\n      );\n      instance.attributes.show.value[0] = attributes.show[0];\n    }\n  }\n  this.showsUpdated.removeAll();\n};\n\nBatch.prototype.contains = function (updater) {\n  return this.updaters.contains(updater.id);\n};\n\nBatch.prototype.getBoundingSphere = function (updater, result) {\n  var primitive = this.primitive;\n  if (!primitive.ready) {\n    return BoundingSphereState.PENDING;\n  }\n  var attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n  if (\n    !defined(attributes) ||\n    !defined(attributes.boundingSphere) ||\n    (defined(attributes.show) && attributes.show[0] === 0)\n  ) {\n    return BoundingSphereState.FAILED;\n  }\n  attributes.boundingSphere.clone(result);\n  return BoundingSphereState.DONE;\n};\n\nBatch.prototype.destroy = function () {\n  var primitive = this.primitive;\n  var primitives = this.primitives;\n  if (defined(primitive)) {\n    primitives.remove(primitive);\n  }\n  var oldPrimitive = this.oldPrimitive;\n  if (defined(oldPrimitive)) {\n    primitives.remove(oldPrimitive);\n  }\n  this.removeMaterialSubscription();\n};\n\n/**\n * @private\n */\nfunction StaticGeometryPerMaterialBatch(\n  primitives,\n  appearanceType,\n  depthFailAppearanceType,\n  closed,\n  shadows\n) {\n  this._items = [];\n  this._primitives = primitives;\n  this._appearanceType = appearanceType;\n  this._depthFailAppearanceType = depthFailAppearanceType;\n  this._closed = closed;\n  this._shadows = shadows;\n}\n\nStaticGeometryPerMaterialBatch.prototype.add = function (time, updater) {\n  var items = this._items;\n  var length = items.length;\n  for (var i = 0; i < length; i++) {\n    var item = items[i];\n    if (item.isMaterial(updater)) {\n      item.add(time, updater);\n      return;\n    }\n  }\n  var batch = new Batch(\n    this._primitives,\n    this._appearanceType,\n    updater.fillMaterialProperty,\n    this._depthFailAppearanceType,\n    updater.depthFailMaterialProperty,\n    this._closed,\n    this._shadows\n  );\n  batch.add(time, updater);\n  items.push(batch);\n};\n\nStaticGeometryPerMaterialBatch.prototype.remove = function (updater) {\n  var items = this._items;\n  var length = items.length;\n  for (var i = length - 1; i >= 0; i--) {\n    var item = items[i];\n    if (item.remove(updater)) {\n      if (item.updaters.length === 0) {\n        items.splice(i, 1);\n        item.destroy();\n      }\n      break;\n    }\n  }\n};\n\nStaticGeometryPerMaterialBatch.prototype.update = function (time) {\n  var i;\n  var items = this._items;\n  var length = items.length;\n\n  for (i = length - 1; i >= 0; i--) {\n    var item = items[i];\n    if (item.invalidated) {\n      items.splice(i, 1);\n      var updaters = item.updaters.values;\n      var updatersLength = updaters.length;\n      for (var h = 0; h < updatersLength; h++) {\n        this.add(time, updaters[h]);\n      }\n      item.destroy();\n    }\n  }\n\n  var isUpdated = true;\n  for (i = 0; i < items.length; i++) {\n    isUpdated = items[i].update(time) && isUpdated;\n  }\n  return isUpdated;\n};\n\nStaticGeometryPerMaterialBatch.prototype.getBoundingSphere = function (\n  updater,\n  result\n) {\n  var items = this._items;\n  var length = items.length;\n  for (var i = 0; i < length; i++) {\n    var item = items[i];\n    if (item.contains(updater)) {\n      return item.getBoundingSphere(updater, result);\n    }\n  }\n  return BoundingSphereState.FAILED;\n};\n\nStaticGeometryPerMaterialBatch.prototype.removeAllPrimitives = function () {\n  var items = this._items;\n  var length = items.length;\n  for (var i = 0; i < length; i++) {\n    items[i].destroy();\n  }\n  this._items.length = 0;\n};\nexport default StaticGeometryPerMaterialBatch;\n"]},"metadata":{},"sourceType":"module"}