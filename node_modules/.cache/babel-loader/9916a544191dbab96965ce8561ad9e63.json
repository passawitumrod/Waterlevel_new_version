{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\nvar defaultColor = Color.WHITE;\nvar defaultOutlineColor = Color.BLACK;\nvar defaultOutlineWidth = 1.0;\n/**\n * A {@link MaterialProperty} that maps to polyline outline {@link Material} uniforms.\n * @alias PolylineOutlineMaterialProperty\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.color=Color.WHITE] A Property specifying the {@link Color} of the line.\n * @param {Property} [options.outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @param {Property} [options.outlineWidth=1.0] A numeric Property specifying the width of the outline, in pixels.\n */\n\nfunction PolylineOutlineMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this.color = options.color;\n  this.outlineColor = options.outlineColor;\n  this.outlineWidth = options.outlineWidth;\n}\n\nObject.defineProperties(PolylineOutlineMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof PolylineOutlineMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._color) && Property.isConstant(this._outlineColor) && Property.isConstant(this._outlineWidth);\n    }\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof PolylineOutlineMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the line.\n   * @memberof PolylineOutlineMaterialProperty.prototype\n   * @type {Property}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof PolylineOutlineMaterialProperty.prototype\n   * @type {Property}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof PolylineOutlineMaterialProperty.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\")\n});\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\n\nPolylineOutlineMaterialProperty.prototype.getType = function (time) {\n  return \"PolylineOutline\";\n};\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\n\nPolylineOutlineMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n\n  result.color = Property.getValueOrClonedDefault(this._color, time, defaultColor, result.color);\n  result.outlineColor = Property.getValueOrClonedDefault(this._outlineColor, time, defaultOutlineColor, result.outlineColor);\n  result.outlineWidth = Property.getValueOrDefault(this._outlineWidth, time, defaultOutlineWidth);\n  return result;\n};\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nPolylineOutlineMaterialProperty.prototype.equals = function (other) {\n  return this === other || //\n  other instanceof PolylineOutlineMaterialProperty && //\n  Property.equals(this._color, other._color) && //\n  Property.equals(this._outlineColor, other._outlineColor) && //\n  Property.equals(this._outlineWidth, other._outlineWidth);\n};\n\nexport default PolylineOutlineMaterialProperty;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/DataSources/PolylineOutlineMaterialProperty.js"],"names":["Color","defaultValue","defined","Event","createPropertyDescriptor","Property","defaultColor","WHITE","defaultOutlineColor","BLACK","defaultOutlineWidth","PolylineOutlineMaterialProperty","options","EMPTY_OBJECT","_definitionChanged","_color","undefined","_colorSubscription","_outlineColor","_outlineColorSubscription","_outlineWidth","_outlineWidthSubscription","color","outlineColor","outlineWidth","Object","defineProperties","prototype","isConstant","get","definitionChanged","getType","time","getValue","result","getValueOrClonedDefault","getValueOrDefault","equals","other"],"mappings":"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","sourcesContent":["import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\nvar defaultColor = Color.WHITE;\nvar defaultOutlineColor = Color.BLACK;\nvar defaultOutlineWidth = 1.0;\n\n/**\n * A {@link MaterialProperty} that maps to polyline outline {@link Material} uniforms.\n * @alias PolylineOutlineMaterialProperty\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.color=Color.WHITE] A Property specifying the {@link Color} of the line.\n * @param {Property} [options.outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @param {Property} [options.outlineWidth=1.0] A numeric Property specifying the width of the outline, in pixels.\n */\nfunction PolylineOutlineMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n\n  this.color = options.color;\n  this.outlineColor = options.outlineColor;\n  this.outlineWidth = options.outlineWidth;\n}\n\nObject.defineProperties(PolylineOutlineMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof PolylineOutlineMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        Property.isConstant(this._color) &&\n        Property.isConstant(this._outlineColor) &&\n        Property.isConstant(this._outlineWidth)\n      );\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof PolylineOutlineMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the line.\n   * @memberof PolylineOutlineMaterialProperty.prototype\n   * @type {Property}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof PolylineOutlineMaterialProperty.prototype\n   * @type {Property}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof PolylineOutlineMaterialProperty.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nPolylineOutlineMaterialProperty.prototype.getType = function (time) {\n  return \"PolylineOutline\";\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPolylineOutlineMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n  result.color = Property.getValueOrClonedDefault(\n    this._color,\n    time,\n    defaultColor,\n    result.color\n  );\n  result.outlineColor = Property.getValueOrClonedDefault(\n    this._outlineColor,\n    time,\n    defaultOutlineColor,\n    result.outlineColor\n  );\n  result.outlineWidth = Property.getValueOrDefault(\n    this._outlineWidth,\n    time,\n    defaultOutlineWidth\n  );\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPolylineOutlineMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof PolylineOutlineMaterialProperty && //\n    Property.equals(this._color, other._color) && //\n    Property.equals(this._outlineColor, other._outlineColor) && //\n      Property.equals(this._outlineWidth, other._outlineWidth))\n  );\n};\nexport default PolylineOutlineMaterialProperty;\n"]},"metadata":{},"sourceType":"module"}