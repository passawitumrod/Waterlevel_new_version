{"ast":null,"code":"import ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport GeometryPipeline from \"../Core/GeometryPipeline.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport PerInstanceColorAppearance from \"./PerInstanceColorAppearance.js\";\nimport Primitive from \"./Primitive.js\";\n/**\n * Creates a {@link Primitive} to visualize well-known vector vertex attributes:\n * <code>normal</code>, <code>tangent</code>, and <code>bitangent</code>.  Normal\n * is red; tangent is green; and bitangent is blue.  If an attribute is not\n * present, it is not drawn.\n *\n * @exports createTangentSpaceDebugPrimitive\n *\n * @param {Object} options Object with the following properties:\n * @param {Geometry} options.geometry The <code>Geometry</code> instance with the attribute.\n * @param {Number} [options.length=10000.0] The length of each line segment in meters.  This can be negative to point the vector in the opposite direction.\n * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The model matrix that transforms to transform the geometry from model to world coordinates.\n * @returns {Primitive} A new <code>Primitive</code> instance with geometry for the vectors.\n *\n * @example\n * scene.primitives.add(Cesium.createTangentSpaceDebugPrimitive({\n *    geometry : instance.geometry,\n *    length : 100000.0,\n *    modelMatrix : instance.modelMatrix\n * }));\n */\n\nfunction createTangentSpaceDebugPrimitive(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var instances = [];\n  var geometry = options.geometry; //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(geometry)) {\n    throw new DeveloperError(\"options.geometry is required.\");\n  } //>>includeEnd('debug');\n\n\n  if (!defined(geometry.attributes) || !defined(geometry.primitiveType)) {\n    // to create the debug lines, we need the computed attributes.\n    // compute them if they are undefined.\n    geometry = geometry.constructor.createGeometry(geometry);\n  }\n\n  var attributes = geometry.attributes;\n  var modelMatrix = Matrix4.clone(defaultValue(options.modelMatrix, Matrix4.IDENTITY));\n  var length = defaultValue(options.length, 10000.0);\n\n  if (defined(attributes.normal)) {\n    instances.push(new GeometryInstance({\n      geometry: GeometryPipeline.createLineSegmentsForVectors(geometry, \"normal\", length),\n      attributes: {\n        color: new ColorGeometryInstanceAttribute(1.0, 0.0, 0.0, 1.0)\n      },\n      modelMatrix: modelMatrix\n    }));\n  }\n\n  if (defined(attributes.tangent)) {\n    instances.push(new GeometryInstance({\n      geometry: GeometryPipeline.createLineSegmentsForVectors(geometry, \"tangent\", length),\n      attributes: {\n        color: new ColorGeometryInstanceAttribute(0.0, 1.0, 0.0, 1.0)\n      },\n      modelMatrix: modelMatrix\n    }));\n  }\n\n  if (defined(attributes.bitangent)) {\n    instances.push(new GeometryInstance({\n      geometry: GeometryPipeline.createLineSegmentsForVectors(geometry, \"bitangent\", length),\n      attributes: {\n        color: new ColorGeometryInstanceAttribute(0.0, 0.0, 1.0, 1.0)\n      },\n      modelMatrix: modelMatrix\n    }));\n  }\n\n  if (instances.length > 0) {\n    return new Primitive({\n      asynchronous: false,\n      geometryInstances: instances,\n      appearance: new PerInstanceColorAppearance({\n        flat: true,\n        translucent: false\n      })\n    });\n  }\n\n  return undefined;\n}\n\nexport default createTangentSpaceDebugPrimitive;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/createTangentSpaceDebugPrimitive.js"],"names":["ColorGeometryInstanceAttribute","defaultValue","defined","DeveloperError","GeometryInstance","GeometryPipeline","Matrix4","PerInstanceColorAppearance","Primitive","createTangentSpaceDebugPrimitive","options","EMPTY_OBJECT","instances","geometry","attributes","primitiveType","constructor","createGeometry","modelMatrix","clone","IDENTITY","length","normal","push","createLineSegmentsForVectors","color","tangent","bitangent","asynchronous","geometryInstances","appearance","flat","translucent","undefined"],"mappings":"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","sourcesContent":["import ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport GeometryPipeline from \"../Core/GeometryPipeline.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport PerInstanceColorAppearance from \"./PerInstanceColorAppearance.js\";\nimport Primitive from \"./Primitive.js\";\n\n/**\n * Creates a {@link Primitive} to visualize well-known vector vertex attributes:\n * <code>normal</code>, <code>tangent</code>, and <code>bitangent</code>.  Normal\n * is red; tangent is green; and bitangent is blue.  If an attribute is not\n * present, it is not drawn.\n *\n * @exports createTangentSpaceDebugPrimitive\n *\n * @param {Object} options Object with the following properties:\n * @param {Geometry} options.geometry The <code>Geometry</code> instance with the attribute.\n * @param {Number} [options.length=10000.0] The length of each line segment in meters.  This can be negative to point the vector in the opposite direction.\n * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The model matrix that transforms to transform the geometry from model to world coordinates.\n * @returns {Primitive} A new <code>Primitive</code> instance with geometry for the vectors.\n *\n * @example\n * scene.primitives.add(Cesium.createTangentSpaceDebugPrimitive({\n *    geometry : instance.geometry,\n *    length : 100000.0,\n *    modelMatrix : instance.modelMatrix\n * }));\n */\nfunction createTangentSpaceDebugPrimitive(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var instances = [];\n  var geometry = options.geometry;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(geometry)) {\n    throw new DeveloperError(\"options.geometry is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(geometry.attributes) || !defined(geometry.primitiveType)) {\n    // to create the debug lines, we need the computed attributes.\n    // compute them if they are undefined.\n    geometry = geometry.constructor.createGeometry(geometry);\n  }\n\n  var attributes = geometry.attributes;\n  var modelMatrix = Matrix4.clone(\n    defaultValue(options.modelMatrix, Matrix4.IDENTITY)\n  );\n  var length = defaultValue(options.length, 10000.0);\n\n  if (defined(attributes.normal)) {\n    instances.push(\n      new GeometryInstance({\n        geometry: GeometryPipeline.createLineSegmentsForVectors(\n          geometry,\n          \"normal\",\n          length\n        ),\n        attributes: {\n          color: new ColorGeometryInstanceAttribute(1.0, 0.0, 0.0, 1.0),\n        },\n        modelMatrix: modelMatrix,\n      })\n    );\n  }\n\n  if (defined(attributes.tangent)) {\n    instances.push(\n      new GeometryInstance({\n        geometry: GeometryPipeline.createLineSegmentsForVectors(\n          geometry,\n          \"tangent\",\n          length\n        ),\n        attributes: {\n          color: new ColorGeometryInstanceAttribute(0.0, 1.0, 0.0, 1.0),\n        },\n        modelMatrix: modelMatrix,\n      })\n    );\n  }\n\n  if (defined(attributes.bitangent)) {\n    instances.push(\n      new GeometryInstance({\n        geometry: GeometryPipeline.createLineSegmentsForVectors(\n          geometry,\n          \"bitangent\",\n          length\n        ),\n        attributes: {\n          color: new ColorGeometryInstanceAttribute(0.0, 0.0, 1.0, 1.0),\n        },\n        modelMatrix: modelMatrix,\n      })\n    );\n  }\n\n  if (instances.length > 0) {\n    return new Primitive({\n      asynchronous: false,\n      geometryInstances: instances,\n      appearance: new PerInstanceColorAppearance({\n        flat: true,\n        translucent: false,\n      }),\n    });\n  }\n\n  return undefined;\n}\nexport default createTangentSpaceDebugPrimitive;\n"]},"metadata":{},"sourceType":"module"}