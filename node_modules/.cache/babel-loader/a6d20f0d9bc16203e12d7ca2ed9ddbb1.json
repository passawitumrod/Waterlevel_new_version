{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport ModelAnimationLoop from \"./ModelAnimationLoop.js\";\nimport ModelAnimationState from \"./ModelAnimationState.js\";\n/**\n * An active glTF animation.  A glTF asset can contain animations.  An active animation\n * is an animation that is currently playing or scheduled to be played because it was\n * added to a model's {@link ModelAnimationCollection}.  An active animation is an\n * instance of an animation; for example, there can be multiple active animations\n * for the same glTF animation, each with a different start time.\n * <p>\n * Create this by calling {@link ModelAnimationCollection#add}.\n * </p>\n *\n * @alias ModelAnimation\n * @internalConstructor\n * @class\n *\n * @see ModelAnimationCollection#add\n */\n\nfunction ModelAnimation(options, model, runtimeAnimation) {\n  this._name = runtimeAnimation.name;\n  this._startTime = JulianDate.clone(options.startTime);\n  this._delay = defaultValue(options.delay, 0.0); // in seconds\n\n  this._stopTime = options.stopTime;\n  /**\n   * When <code>true</code>, the animation is removed after it stops playing.\n   * This is slightly more efficient that not removing it, but if, for example,\n   * time is reversed, the animation is not played again.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n\n  this.removeOnStop = defaultValue(options.removeOnStop, false);\n  this._multiplier = defaultValue(options.multiplier, 1.0);\n  this._reverse = defaultValue(options.reverse, false);\n  this._loop = defaultValue(options.loop, ModelAnimationLoop.NONE);\n  /**\n   * The event fired when this animation is started.  This can be used, for\n   * example, to play a sound or start a particle system, when the animation starts.\n   * <p>\n   * This event is fired at the end of the frame after the scene is rendered.\n   * </p>\n   *\n   * @type {Event}\n   * @default new Event()\n   *\n   * @example\n   * animation.start.addEventListener(function(model, animation) {\n   *   console.log('Animation started: ' + animation.name);\n   * });\n   */\n\n  this.start = new Event();\n  /**\n   * The event fired when on each frame when this animation is updated.  The\n   * current time of the animation, relative to the glTF animation time span, is\n   * passed to the event, which allows, for example, starting new animations at a\n   * specific time relative to a playing animation.\n   * <p>\n   * This event is fired at the end of the frame after the scene is rendered.\n   * </p>\n   *\n   * @type {Event}\n   * @default new Event()\n   *\n   * @example\n   * animation.update.addEventListener(function(model, animation, time) {\n   *   console.log('Animation updated: ' + animation.name + '. glTF animation time: ' + time);\n   * });\n   */\n\n  this.update = new Event();\n  /**\n   * The event fired when this animation is stopped.  This can be used, for\n   * example, to play a sound or start a particle system, when the animation stops.\n   * <p>\n   * This event is fired at the end of the frame after the scene is rendered.\n   * </p>\n   *\n   * @type {Event}\n   * @default new Event()\n   *\n   * @example\n   * animation.stop.addEventListener(function(model, animation) {\n   *   console.log('Animation stopped: ' + animation.name);\n   * });\n   */\n\n  this.stop = new Event();\n  this._state = ModelAnimationState.STOPPED;\n  this._runtimeAnimation = runtimeAnimation; // Set during animation update\n\n  this._computedStartTime = undefined;\n  this._duration = undefined; // To avoid allocations in ModelAnimationCollection.update\n\n  var that = this;\n\n  this._raiseStartEvent = function () {\n    that.start.raiseEvent(model, that);\n  };\n\n  this._updateEventTime = 0.0;\n\n  this._raiseUpdateEvent = function () {\n    that.update.raiseEvent(model, that, that._updateEventTime);\n  };\n\n  this._raiseStopEvent = function () {\n    that.stop.raiseEvent(model, that);\n  };\n}\n\nObject.defineProperties(ModelAnimation.prototype, {\n  /**\n   * The glTF animation name that identifies this animation.\n   *\n   * @memberof ModelAnimation.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  name: {\n    get: function () {\n      return this._name;\n    }\n  },\n\n  /**\n   * The scene time to start playing this animation.  When this is <code>undefined</code>,\n   * the animation starts at the next frame.\n   *\n   * @memberof ModelAnimation.prototype\n   *\n   * @type {JulianDate}\n   * @readonly\n   *\n   * @default undefined\n   */\n  startTime: {\n    get: function () {\n      return this._startTime;\n    }\n  },\n\n  /**\n   * The delay, in seconds, from {@link ModelAnimation#startTime} to start playing.\n   *\n   * @memberof ModelAnimation.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @default undefined\n   */\n  delay: {\n    get: function () {\n      return this._delay;\n    }\n  },\n\n  /**\n   * The scene time to stop playing this animation.  When this is <code>undefined</code>,\n   * the animation is played for its full duration and perhaps repeated depending on\n   * {@link ModelAnimation#loop}.\n   *\n   * @memberof ModelAnimation.prototype\n   *\n   * @type {JulianDate}\n   * @readonly\n   *\n   * @default undefined\n   */\n  stopTime: {\n    get: function () {\n      return this._stopTime;\n    }\n  },\n\n  /**\n   * Values greater than <code>1.0</code> increase the speed that the animation is played relative\n   * to the scene clock speed; values less than <code>1.0</code> decrease the speed.  A value of\n   * <code>1.0</code> plays the animation at the speed in the glTF animation mapped to the scene\n   * clock speed.  For example, if the scene is played at 2x real-time, a two-second glTF animation\n   * will play in one second even if <code>multiplier</code> is <code>1.0</code>.\n   *\n   * @memberof ModelAnimation.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @default 1.0\n   */\n  multiplier: {\n    get: function () {\n      return this._multiplier;\n    }\n  },\n\n  /**\n   * When <code>true</code>, the animation is played in reverse.\n   *\n   * @memberof ModelAnimation.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  reverse: {\n    get: function () {\n      return this._reverse;\n    }\n  },\n\n  /**\n   * Determines if and how the animation is looped.\n   *\n   * @memberof ModelAnimation.prototype\n   *\n   * @type {ModelAnimationLoop}\n   * @readonly\n   *\n   * @default {@link ModelAnimationLoop.NONE}\n   */\n  loop: {\n    get: function () {\n      return this._loop;\n    }\n  }\n});\nexport default ModelAnimation;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/ModelAnimation.js"],"names":["defaultValue","Event","JulianDate","ModelAnimationLoop","ModelAnimationState","ModelAnimation","options","model","runtimeAnimation","_name","name","_startTime","clone","startTime","_delay","delay","_stopTime","stopTime","removeOnStop","_multiplier","multiplier","_reverse","reverse","_loop","loop","NONE","start","update","stop","_state","STOPPED","_runtimeAnimation","_computedStartTime","undefined","_duration","that","_raiseStartEvent","raiseEvent","_updateEventTime","_raiseUpdateEvent","_raiseStopEvent","Object","defineProperties","prototype","get"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport ModelAnimationLoop from \"./ModelAnimationLoop.js\";\nimport ModelAnimationState from \"./ModelAnimationState.js\";\n\n/**\n * An active glTF animation.  A glTF asset can contain animations.  An active animation\n * is an animation that is currently playing or scheduled to be played because it was\n * added to a model's {@link ModelAnimationCollection}.  An active animation is an\n * instance of an animation; for example, there can be multiple active animations\n * for the same glTF animation, each with a different start time.\n * <p>\n * Create this by calling {@link ModelAnimationCollection#add}.\n * </p>\n *\n * @alias ModelAnimation\n * @internalConstructor\n * @class\n *\n * @see ModelAnimationCollection#add\n */\nfunction ModelAnimation(options, model, runtimeAnimation) {\n  this._name = runtimeAnimation.name;\n  this._startTime = JulianDate.clone(options.startTime);\n  this._delay = defaultValue(options.delay, 0.0); // in seconds\n  this._stopTime = options.stopTime;\n\n  /**\n   * When <code>true</code>, the animation is removed after it stops playing.\n   * This is slightly more efficient that not removing it, but if, for example,\n   * time is reversed, the animation is not played again.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.removeOnStop = defaultValue(options.removeOnStop, false);\n  this._multiplier = defaultValue(options.multiplier, 1.0);\n  this._reverse = defaultValue(options.reverse, false);\n  this._loop = defaultValue(options.loop, ModelAnimationLoop.NONE);\n\n  /**\n   * The event fired when this animation is started.  This can be used, for\n   * example, to play a sound or start a particle system, when the animation starts.\n   * <p>\n   * This event is fired at the end of the frame after the scene is rendered.\n   * </p>\n   *\n   * @type {Event}\n   * @default new Event()\n   *\n   * @example\n   * animation.start.addEventListener(function(model, animation) {\n   *   console.log('Animation started: ' + animation.name);\n   * });\n   */\n  this.start = new Event();\n\n  /**\n   * The event fired when on each frame when this animation is updated.  The\n   * current time of the animation, relative to the glTF animation time span, is\n   * passed to the event, which allows, for example, starting new animations at a\n   * specific time relative to a playing animation.\n   * <p>\n   * This event is fired at the end of the frame after the scene is rendered.\n   * </p>\n   *\n   * @type {Event}\n   * @default new Event()\n   *\n   * @example\n   * animation.update.addEventListener(function(model, animation, time) {\n   *   console.log('Animation updated: ' + animation.name + '. glTF animation time: ' + time);\n   * });\n   */\n  this.update = new Event();\n\n  /**\n   * The event fired when this animation is stopped.  This can be used, for\n   * example, to play a sound or start a particle system, when the animation stops.\n   * <p>\n   * This event is fired at the end of the frame after the scene is rendered.\n   * </p>\n   *\n   * @type {Event}\n   * @default new Event()\n   *\n   * @example\n   * animation.stop.addEventListener(function(model, animation) {\n   *   console.log('Animation stopped: ' + animation.name);\n   * });\n   */\n  this.stop = new Event();\n\n  this._state = ModelAnimationState.STOPPED;\n  this._runtimeAnimation = runtimeAnimation;\n\n  // Set during animation update\n  this._computedStartTime = undefined;\n  this._duration = undefined;\n\n  // To avoid allocations in ModelAnimationCollection.update\n  var that = this;\n  this._raiseStartEvent = function () {\n    that.start.raiseEvent(model, that);\n  };\n  this._updateEventTime = 0.0;\n  this._raiseUpdateEvent = function () {\n    that.update.raiseEvent(model, that, that._updateEventTime);\n  };\n  this._raiseStopEvent = function () {\n    that.stop.raiseEvent(model, that);\n  };\n}\n\nObject.defineProperties(ModelAnimation.prototype, {\n  /**\n   * The glTF animation name that identifies this animation.\n   *\n   * @memberof ModelAnimation.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n  },\n\n  /**\n   * The scene time to start playing this animation.  When this is <code>undefined</code>,\n   * the animation starts at the next frame.\n   *\n   * @memberof ModelAnimation.prototype\n   *\n   * @type {JulianDate}\n   * @readonly\n   *\n   * @default undefined\n   */\n  startTime: {\n    get: function () {\n      return this._startTime;\n    },\n  },\n\n  /**\n   * The delay, in seconds, from {@link ModelAnimation#startTime} to start playing.\n   *\n   * @memberof ModelAnimation.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @default undefined\n   */\n  delay: {\n    get: function () {\n      return this._delay;\n    },\n  },\n\n  /**\n   * The scene time to stop playing this animation.  When this is <code>undefined</code>,\n   * the animation is played for its full duration and perhaps repeated depending on\n   * {@link ModelAnimation#loop}.\n   *\n   * @memberof ModelAnimation.prototype\n   *\n   * @type {JulianDate}\n   * @readonly\n   *\n   * @default undefined\n   */\n  stopTime: {\n    get: function () {\n      return this._stopTime;\n    },\n  },\n  /**\n   * Values greater than <code>1.0</code> increase the speed that the animation is played relative\n   * to the scene clock speed; values less than <code>1.0</code> decrease the speed.  A value of\n   * <code>1.0</code> plays the animation at the speed in the glTF animation mapped to the scene\n   * clock speed.  For example, if the scene is played at 2x real-time, a two-second glTF animation\n   * will play in one second even if <code>multiplier</code> is <code>1.0</code>.\n   *\n   * @memberof ModelAnimation.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @default 1.0\n   */\n  multiplier: {\n    get: function () {\n      return this._multiplier;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the animation is played in reverse.\n   *\n   * @memberof ModelAnimation.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  reverse: {\n    get: function () {\n      return this._reverse;\n    },\n  },\n\n  /**\n   * Determines if and how the animation is looped.\n   *\n   * @memberof ModelAnimation.prototype\n   *\n   * @type {ModelAnimationLoop}\n   * @readonly\n   *\n   * @default {@link ModelAnimationLoop.NONE}\n   */\n  loop: {\n    get: function () {\n      return this._loop;\n    },\n  },\n});\nexport default ModelAnimation;\n"]},"metadata":{},"sourceType":"module"}