{"ast":null,"code":"import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nvar leftScratchArray = [];\nvar rightScratchArray = [];\n\nfunction merge(array, compare, userDefinedObject, start, middle, end) {\n  var leftLength = middle - start + 1;\n  var rightLength = end - middle;\n  var left = leftScratchArray;\n  var right = rightScratchArray;\n  var i;\n  var j;\n\n  for (i = 0; i < leftLength; ++i) {\n    left[i] = array[start + i];\n  }\n\n  for (j = 0; j < rightLength; ++j) {\n    right[j] = array[middle + j + 1];\n  }\n\n  i = 0;\n  j = 0;\n\n  for (var k = start; k <= end; ++k) {\n    var leftElement = left[i];\n    var rightElement = right[j];\n\n    if (i < leftLength && (j >= rightLength || compare(leftElement, rightElement, userDefinedObject) <= 0)) {\n      array[k] = leftElement;\n      ++i;\n    } else if (j < rightLength) {\n      array[k] = rightElement;\n      ++j;\n    }\n  }\n}\n\nfunction sort(array, compare, userDefinedObject, start, end) {\n  if (start >= end) {\n    return;\n  }\n\n  var middle = Math.floor((start + end) * 0.5);\n  sort(array, compare, userDefinedObject, start, middle);\n  sort(array, compare, userDefinedObject, middle + 1, end);\n  merge(array, compare, userDefinedObject, start, middle, end);\n}\n/**\n * A stable merge sort.\n *\n * @exports mergeSort\n * @param {Array} array The array to sort.\n * @param {mergeSort~Comparator} comparator The function to use to compare elements in the array.\n * @param {*} [userDefinedObject] Any item to pass as the third parameter to <code>comparator</code>.\n *\n * @example\n * // Assume array contains BoundingSpheres in world coordinates.\n * // Sort them in ascending order of distance from the camera.\n * var position = camera.positionWC;\n * Cesium.mergeSort(array, function(a, b, position) {\n *     return Cesium.BoundingSphere.distanceSquaredTo(b, position) - Cesium.BoundingSphere.distanceSquaredTo(a, position);\n * }, position);\n */\n\n\nfunction mergeSort(array, comparator, userDefinedObject) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required.\");\n  }\n\n  if (!defined(comparator)) {\n    throw new DeveloperError(\"comparator is required.\");\n  } //>>includeEnd('debug');\n\n\n  var length = array.length;\n  var scratchLength = Math.ceil(length * 0.5); // preallocate space in scratch arrays\n\n  leftScratchArray.length = scratchLength;\n  rightScratchArray.length = scratchLength;\n  sort(array, comparator, userDefinedObject, 0, length - 1); // trim scratch arrays\n\n  leftScratchArray.length = 0;\n  rightScratchArray.length = 0;\n}\n/**\n * A function used to compare two items while performing a merge sort.\n * @callback mergeSort~Comparator\n *\n * @param {*} a An item in the array.\n * @param {*} b An item in the array.\n * @param {*} [userDefinedObject] An object that was passed to {@link mergeSort}.\n * @returns {Number} Returns a negative value if <code>a</code> is less than <code>b</code>,\n *          a positive value if <code>a</code> is greater than <code>b</code>, or\n *          0 if <code>a</code> is equal to <code>b</code>.\n *\n * @example\n * function compareNumbers(a, b, userDefinedObject) {\n *     return a - b;\n * }\n */\n\n\nexport default mergeSort;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/mergeSort.js"],"names":["defined","DeveloperError","leftScratchArray","rightScratchArray","merge","array","compare","userDefinedObject","start","middle","end","leftLength","rightLength","left","right","i","j","k","leftElement","rightElement","sort","Math","floor","mergeSort","comparator","length","scratchLength","ceil"],"mappings":"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","sourcesContent":["import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\nvar leftScratchArray = [];\nvar rightScratchArray = [];\n\nfunction merge(array, compare, userDefinedObject, start, middle, end) {\n  var leftLength = middle - start + 1;\n  var rightLength = end - middle;\n\n  var left = leftScratchArray;\n  var right = rightScratchArray;\n\n  var i;\n  var j;\n\n  for (i = 0; i < leftLength; ++i) {\n    left[i] = array[start + i];\n  }\n\n  for (j = 0; j < rightLength; ++j) {\n    right[j] = array[middle + j + 1];\n  }\n\n  i = 0;\n  j = 0;\n  for (var k = start; k <= end; ++k) {\n    var leftElement = left[i];\n    var rightElement = right[j];\n    if (\n      i < leftLength &&\n      (j >= rightLength ||\n        compare(leftElement, rightElement, userDefinedObject) <= 0)\n    ) {\n      array[k] = leftElement;\n      ++i;\n    } else if (j < rightLength) {\n      array[k] = rightElement;\n      ++j;\n    }\n  }\n}\n\nfunction sort(array, compare, userDefinedObject, start, end) {\n  if (start >= end) {\n    return;\n  }\n\n  var middle = Math.floor((start + end) * 0.5);\n  sort(array, compare, userDefinedObject, start, middle);\n  sort(array, compare, userDefinedObject, middle + 1, end);\n  merge(array, compare, userDefinedObject, start, middle, end);\n}\n\n/**\n * A stable merge sort.\n *\n * @exports mergeSort\n * @param {Array} array The array to sort.\n * @param {mergeSort~Comparator} comparator The function to use to compare elements in the array.\n * @param {*} [userDefinedObject] Any item to pass as the third parameter to <code>comparator</code>.\n *\n * @example\n * // Assume array contains BoundingSpheres in world coordinates.\n * // Sort them in ascending order of distance from the camera.\n * var position = camera.positionWC;\n * Cesium.mergeSort(array, function(a, b, position) {\n *     return Cesium.BoundingSphere.distanceSquaredTo(b, position) - Cesium.BoundingSphere.distanceSquaredTo(a, position);\n * }, position);\n */\nfunction mergeSort(array, comparator, userDefinedObject) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required.\");\n  }\n  if (!defined(comparator)) {\n    throw new DeveloperError(\"comparator is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var length = array.length;\n  var scratchLength = Math.ceil(length * 0.5);\n\n  // preallocate space in scratch arrays\n  leftScratchArray.length = scratchLength;\n  rightScratchArray.length = scratchLength;\n\n  sort(array, comparator, userDefinedObject, 0, length - 1);\n\n  // trim scratch arrays\n  leftScratchArray.length = 0;\n  rightScratchArray.length = 0;\n}\n\n/**\n * A function used to compare two items while performing a merge sort.\n * @callback mergeSort~Comparator\n *\n * @param {*} a An item in the array.\n * @param {*} b An item in the array.\n * @param {*} [userDefinedObject] An object that was passed to {@link mergeSort}.\n * @returns {Number} Returns a negative value if <code>a</code> is less than <code>b</code>,\n *          a positive value if <code>a</code> is greater than <code>b</code>, or\n *          0 if <code>a</code> is equal to <code>b</code>.\n *\n * @example\n * function compareNumbers(a, b, userDefinedObject) {\n *     return a - b;\n * }\n */\nexport default mergeSort;\n"]},"metadata":{},"sourceType":"module"}