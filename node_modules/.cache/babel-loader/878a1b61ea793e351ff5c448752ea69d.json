{"ast":null,"code":"import Uri from \"../ThirdParty/Uri.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n/**\n * A singleton that contains all of the servers that are trusted. Credentials will be sent with\n * any requests to these servers.\n *\n * @exports TrustedServers\n *\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\n\nvar TrustedServers = {};\nvar _servers = {};\n/**\n * Adds a trusted server to the registry\n *\n * @param {String} host The host to be added.\n * @param {Number} port The port used to access the host.\n *\n * @example\n * // Add a trusted server\n * TrustedServers.add('my.server.com', 80);\n */\n\nTrustedServers.add = function (host, port) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(host)) {\n    throw new DeveloperError(\"host is required.\");\n  }\n\n  if (!defined(port) || port <= 0) {\n    throw new DeveloperError(\"port is required to be greater than 0.\");\n  } //>>includeEnd('debug');\n\n\n  var authority = host.toLowerCase() + \":\" + port;\n\n  if (!defined(_servers[authority])) {\n    _servers[authority] = true;\n  }\n};\n/**\n * Removes a trusted server from the registry\n *\n * @param {String} host The host to be removed.\n * @param {Number} port The port used to access the host.\n *\n * @example\n * // Remove a trusted server\n * TrustedServers.remove('my.server.com', 80);\n */\n\n\nTrustedServers.remove = function (host, port) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(host)) {\n    throw new DeveloperError(\"host is required.\");\n  }\n\n  if (!defined(port) || port <= 0) {\n    throw new DeveloperError(\"port is required to be greater than 0.\");\n  } //>>includeEnd('debug');\n\n\n  var authority = host.toLowerCase() + \":\" + port;\n\n  if (defined(_servers[authority])) {\n    delete _servers[authority];\n  }\n};\n\nfunction getAuthority(url) {\n  var uri = new Uri(url);\n  uri.normalize(); // Removes username:password@ so we just have host[:port]\n\n  var authority = uri.getAuthority();\n\n  if (!defined(authority)) {\n    return undefined; // Relative URL\n  }\n\n  if (authority.indexOf(\"@\") !== -1) {\n    var parts = authority.split(\"@\");\n    authority = parts[1];\n  } // If the port is missing add one based on the scheme\n\n\n  if (authority.indexOf(\":\") === -1) {\n    var scheme = uri.getScheme();\n\n    if (!defined(scheme)) {\n      scheme = window.location.protocol;\n      scheme = scheme.substring(0, scheme.length - 1);\n    }\n\n    if (scheme === \"http\") {\n      authority += \":80\";\n    } else if (scheme === \"https\") {\n      authority += \":443\";\n    } else {\n      return undefined;\n    }\n  }\n\n  return authority;\n}\n/**\n * Tests whether a server is trusted or not. The server must have been added with the port if it is included in the url.\n *\n * @param {String} url The url to be tested against the trusted list\n *\n * @returns {boolean} Returns true if url is trusted, false otherwise.\n *\n * @example\n * // Add server\n * TrustedServers.add('my.server.com', 81);\n *\n * // Check if server is trusted\n * if (TrustedServers.contains('https://my.server.com:81/path/to/file.png')) {\n *     // my.server.com:81 is trusted\n * }\n * if (TrustedServers.contains('https://my.server.com/path/to/file.png')) {\n *     // my.server.com isn't trusted\n * }\n */\n\n\nTrustedServers.contains = function (url) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(url)) {\n    throw new DeveloperError(\"url is required.\");\n  } //>>includeEnd('debug');\n\n\n  var authority = getAuthority(url);\n\n  if (defined(authority) && defined(_servers[authority])) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * Clears the registry\n *\n * @example\n * // Remove a trusted server\n * TrustedServers.clear();\n */\n\n\nTrustedServers.clear = function () {\n  _servers = {};\n};\n\nexport default TrustedServers;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/TrustedServers.js"],"names":["Uri","defined","DeveloperError","TrustedServers","_servers","add","host","port","authority","toLowerCase","remove","getAuthority","url","uri","normalize","undefined","indexOf","parts","split","scheme","getScheme","window","location","protocol","substring","length","contains","clear"],"mappings":"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","sourcesContent":["import Uri from \"../ThirdParty/Uri.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * A singleton that contains all of the servers that are trusted. Credentials will be sent with\n * any requests to these servers.\n *\n * @exports TrustedServers\n *\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\nvar TrustedServers = {};\nvar _servers = {};\n\n/**\n * Adds a trusted server to the registry\n *\n * @param {String} host The host to be added.\n * @param {Number} port The port used to access the host.\n *\n * @example\n * // Add a trusted server\n * TrustedServers.add('my.server.com', 80);\n */\nTrustedServers.add = function (host, port) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(host)) {\n    throw new DeveloperError(\"host is required.\");\n  }\n  if (!defined(port) || port <= 0) {\n    throw new DeveloperError(\"port is required to be greater than 0.\");\n  }\n  //>>includeEnd('debug');\n\n  var authority = host.toLowerCase() + \":\" + port;\n  if (!defined(_servers[authority])) {\n    _servers[authority] = true;\n  }\n};\n\n/**\n * Removes a trusted server from the registry\n *\n * @param {String} host The host to be removed.\n * @param {Number} port The port used to access the host.\n *\n * @example\n * // Remove a trusted server\n * TrustedServers.remove('my.server.com', 80);\n */\nTrustedServers.remove = function (host, port) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(host)) {\n    throw new DeveloperError(\"host is required.\");\n  }\n  if (!defined(port) || port <= 0) {\n    throw new DeveloperError(\"port is required to be greater than 0.\");\n  }\n  //>>includeEnd('debug');\n\n  var authority = host.toLowerCase() + \":\" + port;\n  if (defined(_servers[authority])) {\n    delete _servers[authority];\n  }\n};\n\nfunction getAuthority(url) {\n  var uri = new Uri(url);\n  uri.normalize();\n\n  // Removes username:password@ so we just have host[:port]\n  var authority = uri.getAuthority();\n  if (!defined(authority)) {\n    return undefined; // Relative URL\n  }\n\n  if (authority.indexOf(\"@\") !== -1) {\n    var parts = authority.split(\"@\");\n    authority = parts[1];\n  }\n\n  // If the port is missing add one based on the scheme\n  if (authority.indexOf(\":\") === -1) {\n    var scheme = uri.getScheme();\n    if (!defined(scheme)) {\n      scheme = window.location.protocol;\n      scheme = scheme.substring(0, scheme.length - 1);\n    }\n    if (scheme === \"http\") {\n      authority += \":80\";\n    } else if (scheme === \"https\") {\n      authority += \":443\";\n    } else {\n      return undefined;\n    }\n  }\n\n  return authority;\n}\n\n/**\n * Tests whether a server is trusted or not. The server must have been added with the port if it is included in the url.\n *\n * @param {String} url The url to be tested against the trusted list\n *\n * @returns {boolean} Returns true if url is trusted, false otherwise.\n *\n * @example\n * // Add server\n * TrustedServers.add('my.server.com', 81);\n *\n * // Check if server is trusted\n * if (TrustedServers.contains('https://my.server.com:81/path/to/file.png')) {\n *     // my.server.com:81 is trusted\n * }\n * if (TrustedServers.contains('https://my.server.com/path/to/file.png')) {\n *     // my.server.com isn't trusted\n * }\n */\nTrustedServers.contains = function (url) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(url)) {\n    throw new DeveloperError(\"url is required.\");\n  }\n  //>>includeEnd('debug');\n  var authority = getAuthority(url);\n  if (defined(authority) && defined(_servers[authority])) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Clears the registry\n *\n * @example\n * // Remove a trusted server\n * TrustedServers.clear();\n */\nTrustedServers.clear = function () {\n  _servers = {};\n};\nexport default TrustedServers;\n"]},"metadata":{},"sourceType":"module"}