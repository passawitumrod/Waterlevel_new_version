{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport CesiumMath from \"./Math.js\";\n/**\n * The map projection used by Google Maps, Bing Maps, and most of ArcGIS Online, EPSG:3857.  This\n * projection use longitude and latitude expressed with the WGS84 and transforms them to Mercator using\n * the spherical (rather than ellipsoidal) equations.\n *\n * @alias WebMercatorProjection\n * @constructor\n *\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid.\n *\n * @see GeographicProjection\n */\n\nfunction WebMercatorProjection(ellipsoid) {\n  this._ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n  this._semimajorAxis = this._ellipsoid.maximumRadius;\n  this._oneOverSemimajorAxis = 1.0 / this._semimajorAxis;\n}\n\nObject.defineProperties(WebMercatorProjection.prototype, {\n  /**\n   * Gets the {@link Ellipsoid}.\n   *\n   * @memberof WebMercatorProjection.prototype\n   *\n   * @type {Ellipsoid}\n   * @readonly\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    }\n  }\n});\n/**\n * Converts a Mercator angle, in the range -PI to PI, to a geodetic latitude\n * in the range -PI/2 to PI/2.\n *\n * @param {Number} mercatorAngle The angle to convert.\n * @returns {Number} The geodetic latitude in radians.\n */\n\nWebMercatorProjection.mercatorAngleToGeodeticLatitude = function (mercatorAngle) {\n  return CesiumMath.PI_OVER_TWO - 2.0 * Math.atan(Math.exp(-mercatorAngle));\n};\n/**\n * Converts a geodetic latitude in radians, in the range -PI/2 to PI/2, to a Mercator\n * angle in the range -PI to PI.\n *\n * @param {Number} latitude The geodetic latitude in radians.\n * @returns {Number} The Mercator angle.\n */\n\n\nWebMercatorProjection.geodeticLatitudeToMercatorAngle = function (latitude) {\n  // Clamp the latitude coordinate to the valid Mercator bounds.\n  if (latitude > WebMercatorProjection.MaximumLatitude) {\n    latitude = WebMercatorProjection.MaximumLatitude;\n  } else if (latitude < -WebMercatorProjection.MaximumLatitude) {\n    latitude = -WebMercatorProjection.MaximumLatitude;\n  }\n\n  var sinLatitude = Math.sin(latitude);\n  return 0.5 * Math.log((1.0 + sinLatitude) / (1.0 - sinLatitude));\n};\n/**\n * The maximum latitude (both North and South) supported by a Web Mercator\n * (EPSG:3857) projection.  Technically, the Mercator projection is defined\n * for any latitude up to (but not including) 90 degrees, but it makes sense\n * to cut it off sooner because it grows exponentially with increasing latitude.\n * The logic behind this particular cutoff value, which is the one used by\n * Google Maps, Bing Maps, and Esri, is that it makes the projection\n * square.  That is, the rectangle is equal in the X and Y directions.\n *\n * The constant value is computed by calling:\n *    WebMercatorProjection.mercatorAngleToGeodeticLatitude(Math.PI)\n *\n * @type {Number}\n */\n\n\nWebMercatorProjection.MaximumLatitude = WebMercatorProjection.mercatorAngleToGeodeticLatitude(Math.PI);\n/**\n * Converts geodetic ellipsoid coordinates, in radians, to the equivalent Web Mercator\n * X, Y, Z coordinates expressed in meters and returned in a {@link Cartesian3}.  The height\n * is copied unmodified to the Z coordinate.\n *\n * @param {Cartographic} cartographic The cartographic coordinates in radians.\n * @param {Cartesian3} [result] The instance to which to copy the result, or undefined if a\n *        new instance should be created.\n * @returns {Cartesian3} The equivalent web mercator X, Y, Z coordinates, in meters.\n */\n\nWebMercatorProjection.prototype.project = function (cartographic, result) {\n  var semimajorAxis = this._semimajorAxis;\n  var x = cartographic.longitude * semimajorAxis;\n  var y = WebMercatorProjection.geodeticLatitudeToMercatorAngle(cartographic.latitude) * semimajorAxis;\n  var z = cartographic.height;\n\n  if (!defined(result)) {\n    return new Cartesian3(x, y, z);\n  }\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  return result;\n};\n/**\n * Converts Web Mercator X, Y coordinates, expressed in meters, to a {@link Cartographic}\n * containing geodetic ellipsoid coordinates.  The Z coordinate is copied unmodified to the\n * height.\n *\n * @param {Cartesian3} cartesian The web mercator Cartesian position to unrproject with height (z) in meters.\n * @param {Cartographic} [result] The instance to which to copy the result, or undefined if a\n *        new instance should be created.\n * @returns {Cartographic} The equivalent cartographic coordinates.\n */\n\n\nWebMercatorProjection.prototype.unproject = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(cartesian)) {\n    throw new DeveloperError(\"cartesian is required\");\n  } //>>includeEnd('debug');\n\n\n  var oneOverEarthSemimajorAxis = this._oneOverSemimajorAxis;\n  var longitude = cartesian.x * oneOverEarthSemimajorAxis;\n  var latitude = WebMercatorProjection.mercatorAngleToGeodeticLatitude(cartesian.y * oneOverEarthSemimajorAxis);\n  var height = cartesian.z;\n\n  if (!defined(result)) {\n    return new Cartographic(longitude, latitude, height);\n  }\n\n  result.longitude = longitude;\n  result.latitude = latitude;\n  result.height = height;\n  return result;\n};\n\nexport default WebMercatorProjection;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/WebMercatorProjection.js"],"names":["Cartesian3","Cartographic","defaultValue","defined","DeveloperError","Ellipsoid","CesiumMath","WebMercatorProjection","ellipsoid","_ellipsoid","WGS84","_semimajorAxis","maximumRadius","_oneOverSemimajorAxis","Object","defineProperties","prototype","get","mercatorAngleToGeodeticLatitude","mercatorAngle","PI_OVER_TWO","Math","atan","exp","geodeticLatitudeToMercatorAngle","latitude","MaximumLatitude","sinLatitude","sin","log","PI","project","cartographic","result","semimajorAxis","x","longitude","y","z","height","unproject","cartesian","oneOverEarthSemimajorAxis"],"mappings":"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","sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport CesiumMath from \"./Math.js\";\n\n/**\n * The map projection used by Google Maps, Bing Maps, and most of ArcGIS Online, EPSG:3857.  This\n * projection use longitude and latitude expressed with the WGS84 and transforms them to Mercator using\n * the spherical (rather than ellipsoidal) equations.\n *\n * @alias WebMercatorProjection\n * @constructor\n *\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid.\n *\n * @see GeographicProjection\n */\nfunction WebMercatorProjection(ellipsoid) {\n  this._ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n  this._semimajorAxis = this._ellipsoid.maximumRadius;\n  this._oneOverSemimajorAxis = 1.0 / this._semimajorAxis;\n}\n\nObject.defineProperties(WebMercatorProjection.prototype, {\n  /**\n   * Gets the {@link Ellipsoid}.\n   *\n   * @memberof WebMercatorProjection.prototype\n   *\n   * @type {Ellipsoid}\n   * @readonly\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n  },\n});\n\n/**\n * Converts a Mercator angle, in the range -PI to PI, to a geodetic latitude\n * in the range -PI/2 to PI/2.\n *\n * @param {Number} mercatorAngle The angle to convert.\n * @returns {Number} The geodetic latitude in radians.\n */\nWebMercatorProjection.mercatorAngleToGeodeticLatitude = function (\n  mercatorAngle\n) {\n  return CesiumMath.PI_OVER_TWO - 2.0 * Math.atan(Math.exp(-mercatorAngle));\n};\n\n/**\n * Converts a geodetic latitude in radians, in the range -PI/2 to PI/2, to a Mercator\n * angle in the range -PI to PI.\n *\n * @param {Number} latitude The geodetic latitude in radians.\n * @returns {Number} The Mercator angle.\n */\nWebMercatorProjection.geodeticLatitudeToMercatorAngle = function (latitude) {\n  // Clamp the latitude coordinate to the valid Mercator bounds.\n  if (latitude > WebMercatorProjection.MaximumLatitude) {\n    latitude = WebMercatorProjection.MaximumLatitude;\n  } else if (latitude < -WebMercatorProjection.MaximumLatitude) {\n    latitude = -WebMercatorProjection.MaximumLatitude;\n  }\n  var sinLatitude = Math.sin(latitude);\n  return 0.5 * Math.log((1.0 + sinLatitude) / (1.0 - sinLatitude));\n};\n\n/**\n * The maximum latitude (both North and South) supported by a Web Mercator\n * (EPSG:3857) projection.  Technically, the Mercator projection is defined\n * for any latitude up to (but not including) 90 degrees, but it makes sense\n * to cut it off sooner because it grows exponentially with increasing latitude.\n * The logic behind this particular cutoff value, which is the one used by\n * Google Maps, Bing Maps, and Esri, is that it makes the projection\n * square.  That is, the rectangle is equal in the X and Y directions.\n *\n * The constant value is computed by calling:\n *    WebMercatorProjection.mercatorAngleToGeodeticLatitude(Math.PI)\n *\n * @type {Number}\n */\nWebMercatorProjection.MaximumLatitude = WebMercatorProjection.mercatorAngleToGeodeticLatitude(\n  Math.PI\n);\n\n/**\n * Converts geodetic ellipsoid coordinates, in radians, to the equivalent Web Mercator\n * X, Y, Z coordinates expressed in meters and returned in a {@link Cartesian3}.  The height\n * is copied unmodified to the Z coordinate.\n *\n * @param {Cartographic} cartographic The cartographic coordinates in radians.\n * @param {Cartesian3} [result] The instance to which to copy the result, or undefined if a\n *        new instance should be created.\n * @returns {Cartesian3} The equivalent web mercator X, Y, Z coordinates, in meters.\n */\nWebMercatorProjection.prototype.project = function (cartographic, result) {\n  var semimajorAxis = this._semimajorAxis;\n  var x = cartographic.longitude * semimajorAxis;\n  var y =\n    WebMercatorProjection.geodeticLatitudeToMercatorAngle(\n      cartographic.latitude\n    ) * semimajorAxis;\n  var z = cartographic.height;\n\n  if (!defined(result)) {\n    return new Cartesian3(x, y, z);\n  }\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  return result;\n};\n\n/**\n * Converts Web Mercator X, Y coordinates, expressed in meters, to a {@link Cartographic}\n * containing geodetic ellipsoid coordinates.  The Z coordinate is copied unmodified to the\n * height.\n *\n * @param {Cartesian3} cartesian The web mercator Cartesian position to unrproject with height (z) in meters.\n * @param {Cartographic} [result] The instance to which to copy the result, or undefined if a\n *        new instance should be created.\n * @returns {Cartographic} The equivalent cartographic coordinates.\n */\nWebMercatorProjection.prototype.unproject = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(cartesian)) {\n    throw new DeveloperError(\"cartesian is required\");\n  }\n  //>>includeEnd('debug');\n\n  var oneOverEarthSemimajorAxis = this._oneOverSemimajorAxis;\n  var longitude = cartesian.x * oneOverEarthSemimajorAxis;\n  var latitude = WebMercatorProjection.mercatorAngleToGeodeticLatitude(\n    cartesian.y * oneOverEarthSemimajorAxis\n  );\n  var height = cartesian.z;\n\n  if (!defined(result)) {\n    return new Cartographic(longitude, latitude, height);\n  }\n\n  result.longitude = longitude;\n  result.latitude = latitude;\n  result.height = height;\n  return result;\n};\nexport default WebMercatorProjection;\n"]},"metadata":{},"sourceType":"module"}