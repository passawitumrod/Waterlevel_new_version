{"ast":null,"code":"import StencilFunction from \"./StencilFunction.js\";\nimport StencilOperation from \"./StencilOperation.js\";\n/**\n * The most significant bit is used to identify whether the pixel is 3D Tiles.\n * The next three bits store selection depth for the skip LODs optimization.\n * The last four bits are for increment/decrement shadow volume operations for classification.\n *\n * @private\n */\n\nvar StencilConstants = {\n  CESIUM_3D_TILE_MASK: 0x80,\n  SKIP_LOD_MASK: 0x70,\n  SKIP_LOD_BIT_SHIFT: 4,\n  CLASSIFICATION_MASK: 0x0f\n};\n\nStencilConstants.setCesium3DTileBit = function () {\n  return {\n    enabled: true,\n    frontFunction: StencilFunction.ALWAYS,\n    frontOperation: {\n      fail: StencilOperation.KEEP,\n      zFail: StencilOperation.KEEP,\n      zPass: StencilOperation.REPLACE\n    },\n    backFunction: StencilFunction.ALWAYS,\n    backOperation: {\n      fail: StencilOperation.KEEP,\n      zFail: StencilOperation.KEEP,\n      zPass: StencilOperation.REPLACE\n    },\n    reference: StencilConstants.CESIUM_3D_TILE_MASK,\n    mask: StencilConstants.CESIUM_3D_TILE_MASK\n  };\n};\n\nexport default Object.freeze(StencilConstants);","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/StencilConstants.js"],"names":["StencilFunction","StencilOperation","StencilConstants","CESIUM_3D_TILE_MASK","SKIP_LOD_MASK","SKIP_LOD_BIT_SHIFT","CLASSIFICATION_MASK","setCesium3DTileBit","enabled","frontFunction","ALWAYS","frontOperation","fail","KEEP","zFail","zPass","REPLACE","backFunction","backOperation","reference","mask","Object","freeze"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,sBAA5B;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AAEA;;;;;;;;AAOA,IAAIC,gBAAgB,GAAG;AACrBC,EAAAA,mBAAmB,EAAE,IADA;AAErBC,EAAAA,aAAa,EAAE,IAFM;AAGrBC,EAAAA,kBAAkB,EAAE,CAHC;AAIrBC,EAAAA,mBAAmB,EAAE;AAJA,CAAvB;;AAOAJ,gBAAgB,CAACK,kBAAjB,GAAsC,YAAY;AAChD,SAAO;AACLC,IAAAA,OAAO,EAAE,IADJ;AAELC,IAAAA,aAAa,EAAET,eAAe,CAACU,MAF1B;AAGLC,IAAAA,cAAc,EAAE;AACdC,MAAAA,IAAI,EAAEX,gBAAgB,CAACY,IADT;AAEdC,MAAAA,KAAK,EAAEb,gBAAgB,CAACY,IAFV;AAGdE,MAAAA,KAAK,EAAEd,gBAAgB,CAACe;AAHV,KAHX;AAQLC,IAAAA,YAAY,EAAEjB,eAAe,CAACU,MARzB;AASLQ,IAAAA,aAAa,EAAE;AACbN,MAAAA,IAAI,EAAEX,gBAAgB,CAACY,IADV;AAEbC,MAAAA,KAAK,EAAEb,gBAAgB,CAACY,IAFX;AAGbE,MAAAA,KAAK,EAAEd,gBAAgB,CAACe;AAHX,KATV;AAcLG,IAAAA,SAAS,EAAEjB,gBAAgB,CAACC,mBAdvB;AAeLiB,IAAAA,IAAI,EAAElB,gBAAgB,CAACC;AAflB,GAAP;AAiBD,CAlBD;;AAmBA,eAAekB,MAAM,CAACC,MAAP,CAAcpB,gBAAd,CAAf","sourcesContent":["import StencilFunction from \"./StencilFunction.js\";\nimport StencilOperation from \"./StencilOperation.js\";\n\n/**\n * The most significant bit is used to identify whether the pixel is 3D Tiles.\n * The next three bits store selection depth for the skip LODs optimization.\n * The last four bits are for increment/decrement shadow volume operations for classification.\n *\n * @private\n */\nvar StencilConstants = {\n  CESIUM_3D_TILE_MASK: 0x80,\n  SKIP_LOD_MASK: 0x70,\n  SKIP_LOD_BIT_SHIFT: 4,\n  CLASSIFICATION_MASK: 0x0f,\n};\n\nStencilConstants.setCesium3DTileBit = function () {\n  return {\n    enabled: true,\n    frontFunction: StencilFunction.ALWAYS,\n    frontOperation: {\n      fail: StencilOperation.KEEP,\n      zFail: StencilOperation.KEEP,\n      zPass: StencilOperation.REPLACE,\n    },\n    backFunction: StencilFunction.ALWAYS,\n    backOperation: {\n      fail: StencilOperation.KEEP,\n      zFail: StencilOperation.KEEP,\n      zPass: StencilOperation.REPLACE,\n    },\n    reference: StencilConstants.CESIUM_3D_TILE_MASK,\n    mask: StencilConstants.CESIUM_3D_TILE_MASK,\n  };\n};\nexport default Object.freeze(StencilConstants);\n"]},"metadata":{},"sourceType":"module"}