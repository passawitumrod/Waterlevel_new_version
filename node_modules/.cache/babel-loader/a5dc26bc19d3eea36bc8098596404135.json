{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport CompositeProperty from \"./CompositeProperty.js\";\nimport Property from \"./Property.js\";\n/**\n * A {@link CompositeProperty} which is also a {@link PositionProperty}.\n *\n * @alias CompositePositionProperty\n * @constructor\n *\n * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n */\n\nfunction CompositePositionProperty(referenceFrame) {\n  this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n  this._definitionChanged = new Event();\n  this._composite = new CompositeProperty();\n\n  this._composite.definitionChanged.addEventListener(CompositePositionProperty.prototype._raiseDefinitionChanged, this);\n}\n\nObject.defineProperties(CompositePositionProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof CompositePositionProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function get() {\n      return this._composite.isConstant;\n    }\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value.\n   * @memberof CompositePositionProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function get() {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets the interval collection.\n   * @memberof CompositePositionProperty.prototype\n   *\n   * @type {TimeIntervalCollection}\n   */\n  intervals: {\n    get: function get() {\n      return this._composite.intervals;\n    }\n  },\n\n  /**\n   * Gets or sets the reference frame which this position presents itself as.\n   * Each PositionProperty making up this object has it's own reference frame,\n   * so this property merely exposes a \"preferred\" reference frame for clients\n   * to use.\n   * @memberof CompositePositionProperty.prototype\n   *\n   * @type {ReferenceFrame}\n   */\n  referenceFrame: {\n    get: function get() {\n      return this._referenceFrame;\n    },\n    set: function set(value) {\n      this._referenceFrame = value;\n    }\n  }\n});\n/**\n * Gets the value of the property at the provided time in the fixed frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\nCompositePositionProperty.prototype.getValue = function (time, result) {\n  return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n};\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\n\nCompositePositionProperty.prototype.getValueInReferenceFrame = function (time, referenceFrame, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n\n  if (!defined(referenceFrame)) {\n    throw new DeveloperError(\"referenceFrame is required.\");\n  } //>>includeEnd('debug');\n\n\n  var innerProperty = this._composite._intervals.findDataForIntervalContainingDate(time);\n\n  if (defined(innerProperty)) {\n    return innerProperty.getValueInReferenceFrame(time, referenceFrame, result);\n  }\n\n  return undefined;\n};\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nCompositePositionProperty.prototype.equals = function (other) {\n  return this === other || //\n  other instanceof CompositePositionProperty && //\n  this._referenceFrame === other._referenceFrame && //\n  this._composite.equals(other._composite, Property.equals);\n};\n/**\n * @private\n */\n\n\nCompositePositionProperty.prototype._raiseDefinitionChanged = function () {\n  this._definitionChanged.raiseEvent(this);\n};\n\nexport default CompositePositionProperty;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/CompositePositionProperty.js"],"names":["defaultValue","defined","DeveloperError","Event","ReferenceFrame","CompositeProperty","Property","CompositePositionProperty","referenceFrame","_referenceFrame","FIXED","_definitionChanged","_composite","definitionChanged","addEventListener","prototype","_raiseDefinitionChanged","Object","defineProperties","isConstant","get","intervals","set","value","getValue","time","result","getValueInReferenceFrame","innerProperty","_intervals","findDataForIntervalContainingDate","undefined","equals","other","raiseEvent"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport CompositeProperty from \"./CompositeProperty.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link CompositeProperty} which is also a {@link PositionProperty}.\n *\n * @alias CompositePositionProperty\n * @constructor\n *\n * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n */\nfunction CompositePositionProperty(referenceFrame) {\n  this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n  this._definitionChanged = new Event();\n  this._composite = new CompositeProperty();\n  this._composite.definitionChanged.addEventListener(\n    CompositePositionProperty.prototype._raiseDefinitionChanged,\n    this\n  );\n}\n\nObject.defineProperties(CompositePositionProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof CompositePositionProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return this._composite.isConstant;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value.\n   * @memberof CompositePositionProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets the interval collection.\n   * @memberof CompositePositionProperty.prototype\n   *\n   * @type {TimeIntervalCollection}\n   */\n  intervals: {\n    get: function () {\n      return this._composite.intervals;\n    },\n  },\n  /**\n   * Gets or sets the reference frame which this position presents itself as.\n   * Each PositionProperty making up this object has it's own reference frame,\n   * so this property merely exposes a \"preferred\" reference frame for clients\n   * to use.\n   * @memberof CompositePositionProperty.prototype\n   *\n   * @type {ReferenceFrame}\n   */\n  referenceFrame: {\n    get: function () {\n      return this._referenceFrame;\n    },\n    set: function (value) {\n      this._referenceFrame = value;\n    },\n  },\n});\n\n/**\n * Gets the value of the property at the provided time in the fixed frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nCompositePositionProperty.prototype.getValue = function (time, result) {\n  return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n};\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nCompositePositionProperty.prototype.getValueInReferenceFrame = function (\n  time,\n  referenceFrame,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  if (!defined(referenceFrame)) {\n    throw new DeveloperError(\"referenceFrame is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var innerProperty = this._composite._intervals.findDataForIntervalContainingDate(\n    time\n  );\n  if (defined(innerProperty)) {\n    return innerProperty.getValueInReferenceFrame(time, referenceFrame, result);\n  }\n  return undefined;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCompositePositionProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof CompositePositionProperty && //\n    this._referenceFrame === other._referenceFrame && //\n      this._composite.equals(other._composite, Property.equals))\n  );\n};\n\n/**\n * @private\n */\nCompositePositionProperty.prototype._raiseDefinitionChanged = function () {\n  this._definitionChanged.raiseEvent(this);\n};\nexport default CompositePositionProperty;\n"]},"metadata":{},"sourceType":"module"}