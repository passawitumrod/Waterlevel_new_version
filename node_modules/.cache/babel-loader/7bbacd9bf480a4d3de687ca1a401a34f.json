{"ast":null,"code":"/**\n * @private\n */\nvar ContextLimits = {\n  _maximumCombinedTextureImageUnits: 0,\n  _maximumCubeMapSize: 0,\n  _maximumFragmentUniformVectors: 0,\n  _maximumTextureImageUnits: 0,\n  _maximumRenderbufferSize: 0,\n  _maximumTextureSize: 0,\n  _maximumVaryingVectors: 0,\n  _maximumVertexAttributes: 0,\n  _maximumVertexTextureImageUnits: 0,\n  _maximumVertexUniformVectors: 0,\n  _minimumAliasedLineWidth: 0,\n  _maximumAliasedLineWidth: 0,\n  _minimumAliasedPointSize: 0,\n  _maximumAliasedPointSize: 0,\n  _maximumViewportWidth: 0,\n  _maximumViewportHeight: 0,\n  _maximumTextureFilterAnisotropy: 0,\n  _maximumDrawBuffers: 0,\n  _maximumColorAttachments: 0,\n  _highpFloatSupported: false,\n  _highpIntSupported: false\n};\nObject.defineProperties(ContextLimits, {\n  /**\n   * The maximum number of texture units that can be used from the vertex and fragment\n   * shader with this WebGL implementation.  The minimum is eight.  If both shaders access the\n   * same texture unit, this counts as two texture units.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_COMBINED_TEXTURE_IMAGE_UNITS</code>.\n   */\n  maximumCombinedTextureImageUnits: {\n    get: function get() {\n      return ContextLimits._maximumCombinedTextureImageUnits;\n    }\n  },\n\n  /**\n   * The approximate maximum cube mape width and height supported by this WebGL implementation.\n   * The minimum is 16, but most desktop and laptop implementations will support much larger sizes like 8,192.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_CUBE_MAP_TEXTURE_SIZE</code>.\n   */\n  maximumCubeMapSize: {\n    get: function get() {\n      return ContextLimits._maximumCubeMapSize;\n    }\n  },\n\n  /**\n   * The maximum number of <code>vec4</code>, <code>ivec4</code>, and <code>bvec4</code>\n   * uniforms that can be used by a fragment shader with this WebGL implementation.  The minimum is 16.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_FRAGMENT_UNIFORM_VECTORS</code>.\n   */\n  maximumFragmentUniformVectors: {\n    get: function get() {\n      return ContextLimits._maximumFragmentUniformVectors;\n    }\n  },\n\n  /**\n   * The maximum number of texture units that can be used from the fragment shader with this WebGL implementation.  The minimum is eight.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_TEXTURE_IMAGE_UNITS</code>.\n   */\n  maximumTextureImageUnits: {\n    get: function get() {\n      return ContextLimits._maximumTextureImageUnits;\n    }\n  },\n\n  /**\n   * The maximum renderbuffer width and height supported by this WebGL implementation.\n   * The minimum is 16, but most desktop and laptop implementations will support much larger sizes like 8,192.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_RENDERBUFFER_SIZE</code>.\n   */\n  maximumRenderbufferSize: {\n    get: function get() {\n      return ContextLimits._maximumRenderbufferSize;\n    }\n  },\n\n  /**\n   * The approximate maximum texture width and height supported by this WebGL implementation.\n   * The minimum is 64, but most desktop and laptop implementations will support much larger sizes like 8,192.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_TEXTURE_SIZE</code>.\n   */\n  maximumTextureSize: {\n    get: function get() {\n      return ContextLimits._maximumTextureSize;\n    }\n  },\n\n  /**\n   * The maximum number of <code>vec4</code> varying variables supported by this WebGL implementation.\n   * The minimum is eight.  Matrices and arrays count as multiple <code>vec4</code>s.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_VARYING_VECTORS</code>.\n   */\n  maximumVaryingVectors: {\n    get: function get() {\n      return ContextLimits._maximumVaryingVectors;\n    }\n  },\n\n  /**\n   * The maximum number of <code>vec4</code> vertex attributes supported by this WebGL implementation.  The minimum is eight.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_VERTEX_ATTRIBS</code>.\n   */\n  maximumVertexAttributes: {\n    get: function get() {\n      return ContextLimits._maximumVertexAttributes;\n    }\n  },\n\n  /**\n   * The maximum number of texture units that can be used from the vertex shader with this WebGL implementation.\n   * The minimum is zero, which means the GL does not support vertex texture fetch.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_VERTEX_TEXTURE_IMAGE_UNITS</code>.\n   */\n  maximumVertexTextureImageUnits: {\n    get: function get() {\n      return ContextLimits._maximumVertexTextureImageUnits;\n    }\n  },\n\n  /**\n   * The maximum number of <code>vec4</code>, <code>ivec4</code>, and <code>bvec4</code>\n   * uniforms that can be used by a vertex shader with this WebGL implementation.  The minimum is 16.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_VERTEX_UNIFORM_VECTORS</code>.\n   */\n  maximumVertexUniformVectors: {\n    get: function get() {\n      return ContextLimits._maximumVertexUniformVectors;\n    }\n  },\n\n  /**\n   * The minimum aliased line width, in pixels, supported by this WebGL implementation.  It will be at most one.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>ALIASED_LINE_WIDTH_RANGE</code>.\n   */\n  minimumAliasedLineWidth: {\n    get: function get() {\n      return ContextLimits._minimumAliasedLineWidth;\n    }\n  },\n\n  /**\n   * The maximum aliased line width, in pixels, supported by this WebGL implementation.  It will be at least one.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>ALIASED_LINE_WIDTH_RANGE</code>.\n   */\n  maximumAliasedLineWidth: {\n    get: function get() {\n      return ContextLimits._maximumAliasedLineWidth;\n    }\n  },\n\n  /**\n   * The minimum aliased point size, in pixels, supported by this WebGL implementation.  It will be at most one.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>ALIASED_POINT_SIZE_RANGE</code>.\n   */\n  minimumAliasedPointSize: {\n    get: function get() {\n      return ContextLimits._minimumAliasedPointSize;\n    }\n  },\n\n  /**\n   * The maximum aliased point size, in pixels, supported by this WebGL implementation.  It will be at least one.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>ALIASED_POINT_SIZE_RANGE</code>.\n   */\n  maximumAliasedPointSize: {\n    get: function get() {\n      return ContextLimits._maximumAliasedPointSize;\n    }\n  },\n\n  /**\n   * The maximum supported width of the viewport.  It will be at least as large as the visible width of the associated canvas.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_VIEWPORT_DIMS</code>.\n   */\n  maximumViewportWidth: {\n    get: function get() {\n      return ContextLimits._maximumViewportWidth;\n    }\n  },\n\n  /**\n   * The maximum supported height of the viewport.  It will be at least as large as the visible height of the associated canvas.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_VIEWPORT_DIMS</code>.\n   */\n  maximumViewportHeight: {\n    get: function get() {\n      return ContextLimits._maximumViewportHeight;\n    }\n  },\n\n  /**\n   * The maximum degree of anisotropy for texture filtering\n   * @memberof ContextLimits\n   * @type {Number}\n   */\n  maximumTextureFilterAnisotropy: {\n    get: function get() {\n      return ContextLimits._maximumTextureFilterAnisotropy;\n    }\n  },\n\n  /**\n   * The maximum number of simultaneous outputs that may be written in a fragment shader.\n   * @memberof ContextLimits\n   * @type {Number}\n   */\n  maximumDrawBuffers: {\n    get: function get() {\n      return ContextLimits._maximumDrawBuffers;\n    }\n  },\n\n  /**\n   * The maximum number of color attachments supported.\n   * @memberof ContextLimits\n   * @type {Number}\n   */\n  maximumColorAttachments: {\n    get: function get() {\n      return ContextLimits._maximumColorAttachments;\n    }\n  },\n\n  /**\n   * High precision float supported (<code>highp</code>) in fragment shaders.\n   * @memberof ContextLimits\n   * @type {Boolean}\n   */\n  highpFloatSupported: {\n    get: function get() {\n      return ContextLimits._highpFloatSupported;\n    }\n  },\n\n  /**\n   * High precision int supported (<code>highp</code>) in fragment shaders.\n   * @memberof ContextLimits\n   * @type {Boolean}\n   */\n  highpIntSupported: {\n    get: function get() {\n      return ContextLimits._highpIntSupported;\n    }\n  }\n});\nexport default ContextLimits;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Renderer/ContextLimits.js"],"names":["ContextLimits","_maximumCombinedTextureImageUnits","_maximumCubeMapSize","_maximumFragmentUniformVectors","_maximumTextureImageUnits","_maximumRenderbufferSize","_maximumTextureSize","_maximumVaryingVectors","_maximumVertexAttributes","_maximumVertexTextureImageUnits","_maximumVertexUniformVectors","_minimumAliasedLineWidth","_maximumAliasedLineWidth","_minimumAliasedPointSize","_maximumAliasedPointSize","_maximumViewportWidth","_maximumViewportHeight","_maximumTextureFilterAnisotropy","_maximumDrawBuffers","_maximumColorAttachments","_highpFloatSupported","_highpIntSupported","Object","defineProperties","maximumCombinedTextureImageUnits","get","maximumCubeMapSize","maximumFragmentUniformVectors","maximumTextureImageUnits","maximumRenderbufferSize","maximumTextureSize","maximumVaryingVectors","maximumVertexAttributes","maximumVertexTextureImageUnits","maximumVertexUniformVectors","minimumAliasedLineWidth","maximumAliasedLineWidth","minimumAliasedPointSize","maximumAliasedPointSize","maximumViewportWidth","maximumViewportHeight","maximumTextureFilterAnisotropy","maximumDrawBuffers","maximumColorAttachments","highpFloatSupported","highpIntSupported"],"mappings":"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","sourcesContent":["/**\n * @private\n */\nvar ContextLimits = {\n  _maximumCombinedTextureImageUnits: 0,\n  _maximumCubeMapSize: 0,\n  _maximumFragmentUniformVectors: 0,\n  _maximumTextureImageUnits: 0,\n  _maximumRenderbufferSize: 0,\n  _maximumTextureSize: 0,\n  _maximumVaryingVectors: 0,\n  _maximumVertexAttributes: 0,\n  _maximumVertexTextureImageUnits: 0,\n  _maximumVertexUniformVectors: 0,\n  _minimumAliasedLineWidth: 0,\n  _maximumAliasedLineWidth: 0,\n  _minimumAliasedPointSize: 0,\n  _maximumAliasedPointSize: 0,\n  _maximumViewportWidth: 0,\n  _maximumViewportHeight: 0,\n  _maximumTextureFilterAnisotropy: 0,\n  _maximumDrawBuffers: 0,\n  _maximumColorAttachments: 0,\n  _highpFloatSupported: false,\n  _highpIntSupported: false,\n};\n\nObject.defineProperties(ContextLimits, {\n  /**\n   * The maximum number of texture units that can be used from the vertex and fragment\n   * shader with this WebGL implementation.  The minimum is eight.  If both shaders access the\n   * same texture unit, this counts as two texture units.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_COMBINED_TEXTURE_IMAGE_UNITS</code>.\n   */\n  maximumCombinedTextureImageUnits: {\n    get: function () {\n      return ContextLimits._maximumCombinedTextureImageUnits;\n    },\n  },\n\n  /**\n   * The approximate maximum cube mape width and height supported by this WebGL implementation.\n   * The minimum is 16, but most desktop and laptop implementations will support much larger sizes like 8,192.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_CUBE_MAP_TEXTURE_SIZE</code>.\n   */\n  maximumCubeMapSize: {\n    get: function () {\n      return ContextLimits._maximumCubeMapSize;\n    },\n  },\n\n  /**\n   * The maximum number of <code>vec4</code>, <code>ivec4</code>, and <code>bvec4</code>\n   * uniforms that can be used by a fragment shader with this WebGL implementation.  The minimum is 16.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_FRAGMENT_UNIFORM_VECTORS</code>.\n   */\n  maximumFragmentUniformVectors: {\n    get: function () {\n      return ContextLimits._maximumFragmentUniformVectors;\n    },\n  },\n\n  /**\n   * The maximum number of texture units that can be used from the fragment shader with this WebGL implementation.  The minimum is eight.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_TEXTURE_IMAGE_UNITS</code>.\n   */\n  maximumTextureImageUnits: {\n    get: function () {\n      return ContextLimits._maximumTextureImageUnits;\n    },\n  },\n\n  /**\n   * The maximum renderbuffer width and height supported by this WebGL implementation.\n   * The minimum is 16, but most desktop and laptop implementations will support much larger sizes like 8,192.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_RENDERBUFFER_SIZE</code>.\n   */\n  maximumRenderbufferSize: {\n    get: function () {\n      return ContextLimits._maximumRenderbufferSize;\n    },\n  },\n\n  /**\n   * The approximate maximum texture width and height supported by this WebGL implementation.\n   * The minimum is 64, but most desktop and laptop implementations will support much larger sizes like 8,192.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_TEXTURE_SIZE</code>.\n   */\n  maximumTextureSize: {\n    get: function () {\n      return ContextLimits._maximumTextureSize;\n    },\n  },\n\n  /**\n   * The maximum number of <code>vec4</code> varying variables supported by this WebGL implementation.\n   * The minimum is eight.  Matrices and arrays count as multiple <code>vec4</code>s.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_VARYING_VECTORS</code>.\n   */\n  maximumVaryingVectors: {\n    get: function () {\n      return ContextLimits._maximumVaryingVectors;\n    },\n  },\n\n  /**\n   * The maximum number of <code>vec4</code> vertex attributes supported by this WebGL implementation.  The minimum is eight.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_VERTEX_ATTRIBS</code>.\n   */\n  maximumVertexAttributes: {\n    get: function () {\n      return ContextLimits._maximumVertexAttributes;\n    },\n  },\n\n  /**\n   * The maximum number of texture units that can be used from the vertex shader with this WebGL implementation.\n   * The minimum is zero, which means the GL does not support vertex texture fetch.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_VERTEX_TEXTURE_IMAGE_UNITS</code>.\n   */\n  maximumVertexTextureImageUnits: {\n    get: function () {\n      return ContextLimits._maximumVertexTextureImageUnits;\n    },\n  },\n\n  /**\n   * The maximum number of <code>vec4</code>, <code>ivec4</code>, and <code>bvec4</code>\n   * uniforms that can be used by a vertex shader with this WebGL implementation.  The minimum is 16.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_VERTEX_UNIFORM_VECTORS</code>.\n   */\n  maximumVertexUniformVectors: {\n    get: function () {\n      return ContextLimits._maximumVertexUniformVectors;\n    },\n  },\n\n  /**\n   * The minimum aliased line width, in pixels, supported by this WebGL implementation.  It will be at most one.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>ALIASED_LINE_WIDTH_RANGE</code>.\n   */\n  minimumAliasedLineWidth: {\n    get: function () {\n      return ContextLimits._minimumAliasedLineWidth;\n    },\n  },\n\n  /**\n   * The maximum aliased line width, in pixels, supported by this WebGL implementation.  It will be at least one.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>ALIASED_LINE_WIDTH_RANGE</code>.\n   */\n  maximumAliasedLineWidth: {\n    get: function () {\n      return ContextLimits._maximumAliasedLineWidth;\n    },\n  },\n\n  /**\n   * The minimum aliased point size, in pixels, supported by this WebGL implementation.  It will be at most one.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>ALIASED_POINT_SIZE_RANGE</code>.\n   */\n  minimumAliasedPointSize: {\n    get: function () {\n      return ContextLimits._minimumAliasedPointSize;\n    },\n  },\n\n  /**\n   * The maximum aliased point size, in pixels, supported by this WebGL implementation.  It will be at least one.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>ALIASED_POINT_SIZE_RANGE</code>.\n   */\n  maximumAliasedPointSize: {\n    get: function () {\n      return ContextLimits._maximumAliasedPointSize;\n    },\n  },\n\n  /**\n   * The maximum supported width of the viewport.  It will be at least as large as the visible width of the associated canvas.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_VIEWPORT_DIMS</code>.\n   */\n  maximumViewportWidth: {\n    get: function () {\n      return ContextLimits._maximumViewportWidth;\n    },\n  },\n\n  /**\n   * The maximum supported height of the viewport.  It will be at least as large as the visible height of the associated canvas.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_VIEWPORT_DIMS</code>.\n   */\n  maximumViewportHeight: {\n    get: function () {\n      return ContextLimits._maximumViewportHeight;\n    },\n  },\n\n  /**\n   * The maximum degree of anisotropy for texture filtering\n   * @memberof ContextLimits\n   * @type {Number}\n   */\n  maximumTextureFilterAnisotropy: {\n    get: function () {\n      return ContextLimits._maximumTextureFilterAnisotropy;\n    },\n  },\n\n  /**\n   * The maximum number of simultaneous outputs that may be written in a fragment shader.\n   * @memberof ContextLimits\n   * @type {Number}\n   */\n  maximumDrawBuffers: {\n    get: function () {\n      return ContextLimits._maximumDrawBuffers;\n    },\n  },\n\n  /**\n   * The maximum number of color attachments supported.\n   * @memberof ContextLimits\n   * @type {Number}\n   */\n  maximumColorAttachments: {\n    get: function () {\n      return ContextLimits._maximumColorAttachments;\n    },\n  },\n\n  /**\n   * High precision float supported (<code>highp</code>) in fragment shaders.\n   * @memberof ContextLimits\n   * @type {Boolean}\n   */\n  highpFloatSupported: {\n    get: function () {\n      return ContextLimits._highpFloatSupported;\n    },\n  },\n\n  /**\n   * High precision int supported (<code>highp</code>) in fragment shaders.\n   * @memberof ContextLimits\n   * @type {Boolean}\n   */\n  highpIntSupported: {\n    get: function () {\n      return ContextLimits._highpIntSupported;\n    },\n  },\n});\nexport default ContextLimits;\n"]},"metadata":{},"sourceType":"module"}