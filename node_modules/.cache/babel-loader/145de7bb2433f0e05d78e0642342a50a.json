{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defined from \"./defined.js\";\n/**\n * A fixed-point encoding of a {@link Cartesian3} with 64-bit floating-point components, as two {@link Cartesian3}\n * values that, when converted to 32-bit floating-point and added, approximate the original input.\n * <p>\n * This is used to encode positions in vertex buffers for rendering without jittering artifacts\n * as described in {@link http://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\n * </p>\n *\n * @alias EncodedCartesian3\n * @constructor\n *\n * @private\n */\n\nfunction EncodedCartesian3() {\n  /**\n   * The high bits for each component.  Bits 0 to 22 store the whole value.  Bits 23 to 31 are not used.\n   *\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   */\n  this.high = Cartesian3.clone(Cartesian3.ZERO);\n  /**\n   * The low bits for each component.  Bits 7 to 22 store the whole value, and bits 0 to 6 store the fraction.  Bits 23 to 31 are not used.\n   *\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   */\n\n  this.low = Cartesian3.clone(Cartesian3.ZERO);\n}\n/**\n * Encodes a 64-bit floating-point value as two floating-point values that, when converted to\n * 32-bit floating-point and added, approximate the original input.  The returned object\n * has <code>high</code> and <code>low</code> properties for the high and low bits, respectively.\n * <p>\n * The fixed-point encoding follows {@link http://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\n * </p>\n *\n * @param {Number} value The floating-point value to encode.\n * @param {Object} [result] The object onto which to store the result.\n * @returns {Object} The modified result parameter or a new instance if one was not provided.\n *\n * @example\n * var value = 1234567.1234567;\n * var splitValue = Cesium.EncodedCartesian3.encode(value);\n */\n\n\nEncodedCartesian3.encode = function (value, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"value\", value); //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = {\n      high: 0.0,\n      low: 0.0\n    };\n  }\n\n  var doubleHigh;\n\n  if (value >= 0.0) {\n    doubleHigh = Math.floor(value / 65536.0) * 65536.0;\n    result.high = doubleHigh;\n    result.low = value - doubleHigh;\n  } else {\n    doubleHigh = Math.floor(-value / 65536.0) * 65536.0;\n    result.high = -doubleHigh;\n    result.low = value + doubleHigh;\n  }\n\n  return result;\n};\n\nvar scratchEncode = {\n  high: 0.0,\n  low: 0.0\n};\n/**\n * Encodes a {@link Cartesian3} with 64-bit floating-point components as two {@link Cartesian3}\n * values that, when converted to 32-bit floating-point and added, approximate the original input.\n * <p>\n * The fixed-point encoding follows {@link http://blogs.agi.com/insight3d/index.php/2008/09/03/precisions-precisions/|Precisions, Precisions}.\n * </p>\n *\n * @param {Cartesian3} cartesian The cartesian to encode.\n * @param {EncodedCartesian3} [result] The object onto which to store the result.\n * @returns {EncodedCartesian3} The modified result parameter or a new EncodedCartesian3 instance if one was not provided.\n *\n * @example\n * var cart = new Cesium.Cartesian3(-10000000.0, 0.0, 10000000.0);\n * var encoded = Cesium.EncodedCartesian3.fromCartesian(cart);\n */\n\nEncodedCartesian3.fromCartesian = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian); //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new EncodedCartesian3();\n  }\n\n  var high = result.high;\n  var low = result.low;\n  EncodedCartesian3.encode(cartesian.x, scratchEncode);\n  high.x = scratchEncode.high;\n  low.x = scratchEncode.low;\n  EncodedCartesian3.encode(cartesian.y, scratchEncode);\n  high.y = scratchEncode.high;\n  low.y = scratchEncode.low;\n  EncodedCartesian3.encode(cartesian.z, scratchEncode);\n  high.z = scratchEncode.high;\n  low.z = scratchEncode.low;\n  return result;\n};\n\nvar encodedP = new EncodedCartesian3();\n/**\n * Encodes the provided <code>cartesian</code>, and writes it to an array with <code>high</code>\n * components followed by <code>low</code> components, i.e. <code>[high.x, high.y, high.z, low.x, low.y, low.z]</code>.\n * <p>\n * This is used to create interleaved high-precision position vertex attributes.\n * </p>\n *\n * @param {Cartesian3} cartesian The cartesian to encode.\n * @param {Number[]} cartesianArray The array to write to.\n * @param {Number} index The index into the array to start writing.  Six elements will be written.\n *\n * @exception {DeveloperError} index must be a number greater than or equal to 0.\n *\n * @example\n * var positions = [\n *    new Cesium.Cartesian3(),\n *    // ...\n * ];\n * var encodedPositions = new Float32Array(2 * 3 * positions.length);\n * var j = 0;\n * for (var i = 0; i < positions.length; ++i) {\n *   Cesium.EncodedCartesian3.writeElement(positions[i], encodedPositions, j);\n *   j += 6;\n * }\n */\n\nEncodedCartesian3.writeElements = function (cartesian, cartesianArray, index) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"cartesianArray\", cartesianArray);\n  Check.typeOf.number(\"index\", index);\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0); //>>includeEnd('debug');\n\n  EncodedCartesian3.fromCartesian(cartesian, encodedP);\n  var high = encodedP.high;\n  var low = encodedP.low;\n  cartesianArray[index] = high.x;\n  cartesianArray[index + 1] = high.y;\n  cartesianArray[index + 2] = high.z;\n  cartesianArray[index + 3] = low.x;\n  cartesianArray[index + 4] = low.y;\n  cartesianArray[index + 5] = low.z;\n};\n\nexport default EncodedCartesian3;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/EncodedCartesian3.js"],"names":["Cartesian3","Check","defined","EncodedCartesian3","high","clone","ZERO","low","encode","value","result","typeOf","number","doubleHigh","Math","floor","scratchEncode","fromCartesian","cartesian","object","x","y","z","encodedP","writeElements","cartesianArray","index","greaterThanOrEquals"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,iBAAvB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,OAAP,MAAoB,cAApB;AAEA;;;;;;;;;;;;;;AAaA,SAASC,iBAAT,GAA6B;AAC3B;;;;;;AAMA,OAAKC,IAAL,GAAYJ,UAAU,CAACK,KAAX,CAAiBL,UAAU,CAACM,IAA5B,CAAZ;AAEA;;;;;;;AAMA,OAAKC,GAAL,GAAWP,UAAU,CAACK,KAAX,CAAiBL,UAAU,CAACM,IAA5B,CAAX;AACD;AAED;;;;;;;;;;;;;;;;;;AAgBAH,iBAAiB,CAACK,MAAlB,GAA2B,UAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AAClD;AACAT,EAAAA,KAAK,CAACU,MAAN,CAAaC,MAAb,CAAoB,OAApB,EAA6BH,KAA7B,EAFkD,CAGlD;;AAEA,MAAI,CAACP,OAAO,CAACQ,MAAD,CAAZ,EAAsB;AACpBA,IAAAA,MAAM,GAAG;AACPN,MAAAA,IAAI,EAAE,GADC;AAEPG,MAAAA,GAAG,EAAE;AAFE,KAAT;AAID;;AAED,MAAIM,UAAJ;;AACA,MAAIJ,KAAK,IAAI,GAAb,EAAkB;AAChBI,IAAAA,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWN,KAAK,GAAG,OAAnB,IAA8B,OAA3C;AACAC,IAAAA,MAAM,CAACN,IAAP,GAAcS,UAAd;AACAH,IAAAA,MAAM,CAACH,GAAP,GAAaE,KAAK,GAAGI,UAArB;AACD,GAJD,MAIO;AACLA,IAAAA,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACN,KAAD,GAAS,OAApB,IAA+B,OAA5C;AACAC,IAAAA,MAAM,CAACN,IAAP,GAAc,CAACS,UAAf;AACAH,IAAAA,MAAM,CAACH,GAAP,GAAaE,KAAK,GAAGI,UAArB;AACD;;AAED,SAAOH,MAAP;AACD,CAxBD;;AA0BA,IAAIM,aAAa,GAAG;AAClBZ,EAAAA,IAAI,EAAE,GADY;AAElBG,EAAAA,GAAG,EAAE;AAFa,CAApB;AAKA;;;;;;;;;;;;;;;;AAeAJ,iBAAiB,CAACc,aAAlB,GAAkC,UAAUC,SAAV,EAAqBR,MAArB,EAA6B;AAC7D;AACAT,EAAAA,KAAK,CAACU,MAAN,CAAaQ,MAAb,CAAoB,WAApB,EAAiCD,SAAjC,EAF6D,CAG7D;;AAEA,MAAI,CAAChB,OAAO,CAACQ,MAAD,CAAZ,EAAsB;AACpBA,IAAAA,MAAM,GAAG,IAAIP,iBAAJ,EAAT;AACD;;AAED,MAAIC,IAAI,GAAGM,MAAM,CAACN,IAAlB;AACA,MAAIG,GAAG,GAAGG,MAAM,CAACH,GAAjB;AAEAJ,EAAAA,iBAAiB,CAACK,MAAlB,CAAyBU,SAAS,CAACE,CAAnC,EAAsCJ,aAAtC;AACAZ,EAAAA,IAAI,CAACgB,CAAL,GAASJ,aAAa,CAACZ,IAAvB;AACAG,EAAAA,GAAG,CAACa,CAAJ,GAAQJ,aAAa,CAACT,GAAtB;AAEAJ,EAAAA,iBAAiB,CAACK,MAAlB,CAAyBU,SAAS,CAACG,CAAnC,EAAsCL,aAAtC;AACAZ,EAAAA,IAAI,CAACiB,CAAL,GAASL,aAAa,CAACZ,IAAvB;AACAG,EAAAA,GAAG,CAACc,CAAJ,GAAQL,aAAa,CAACT,GAAtB;AAEAJ,EAAAA,iBAAiB,CAACK,MAAlB,CAAyBU,SAAS,CAACI,CAAnC,EAAsCN,aAAtC;AACAZ,EAAAA,IAAI,CAACkB,CAAL,GAASN,aAAa,CAACZ,IAAvB;AACAG,EAAAA,GAAG,CAACe,CAAJ,GAAQN,aAAa,CAACT,GAAtB;AAEA,SAAOG,MAAP;AACD,CAzBD;;AA2BA,IAAIa,QAAQ,GAAG,IAAIpB,iBAAJ,EAAf;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBAA,iBAAiB,CAACqB,aAAlB,GAAkC,UAAUN,SAAV,EAAqBO,cAArB,EAAqCC,KAArC,EAA4C;AAC5E;AACAzB,EAAAA,KAAK,CAACC,OAAN,CAAc,gBAAd,EAAgCuB,cAAhC;AACAxB,EAAAA,KAAK,CAACU,MAAN,CAAaC,MAAb,CAAoB,OAApB,EAA6Bc,KAA7B;AACAzB,EAAAA,KAAK,CAACU,MAAN,CAAaC,MAAb,CAAoBe,mBAApB,CAAwC,OAAxC,EAAiDD,KAAjD,EAAwD,CAAxD,EAJ4E,CAK5E;;AAEAvB,EAAAA,iBAAiB,CAACc,aAAlB,CAAgCC,SAAhC,EAA2CK,QAA3C;AACA,MAAInB,IAAI,GAAGmB,QAAQ,CAACnB,IAApB;AACA,MAAIG,GAAG,GAAGgB,QAAQ,CAAChB,GAAnB;AAEAkB,EAAAA,cAAc,CAACC,KAAD,CAAd,GAAwBtB,IAAI,CAACgB,CAA7B;AACAK,EAAAA,cAAc,CAACC,KAAK,GAAG,CAAT,CAAd,GAA4BtB,IAAI,CAACiB,CAAjC;AACAI,EAAAA,cAAc,CAACC,KAAK,GAAG,CAAT,CAAd,GAA4BtB,IAAI,CAACkB,CAAjC;AACAG,EAAAA,cAAc,CAACC,KAAK,GAAG,CAAT,CAAd,GAA4BnB,GAAG,CAACa,CAAhC;AACAK,EAAAA,cAAc,CAACC,KAAK,GAAG,CAAT,CAAd,GAA4BnB,GAAG,CAACc,CAAhC;AACAI,EAAAA,cAAc,CAACC,KAAK,GAAG,CAAT,CAAd,GAA4BnB,GAAG,CAACe,CAAhC;AACD,CAjBD;;AAkBA,eAAenB,iBAAf","sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defined from \"./defined.js\";\n\n/**\n * A fixed-point encoding of a {@link Cartesian3} with 64-bit floating-point components, as two {@link Cartesian3}\n * values that, when converted to 32-bit floating-point and added, approximate the original input.\n * <p>\n * This is used to encode positions in vertex buffers for rendering without jittering artifacts\n * as described in {@link http://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\n * </p>\n *\n * @alias EncodedCartesian3\n * @constructor\n *\n * @private\n */\nfunction EncodedCartesian3() {\n  /**\n   * The high bits for each component.  Bits 0 to 22 store the whole value.  Bits 23 to 31 are not used.\n   *\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   */\n  this.high = Cartesian3.clone(Cartesian3.ZERO);\n\n  /**\n   * The low bits for each component.  Bits 7 to 22 store the whole value, and bits 0 to 6 store the fraction.  Bits 23 to 31 are not used.\n   *\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   */\n  this.low = Cartesian3.clone(Cartesian3.ZERO);\n}\n\n/**\n * Encodes a 64-bit floating-point value as two floating-point values that, when converted to\n * 32-bit floating-point and added, approximate the original input.  The returned object\n * has <code>high</code> and <code>low</code> properties for the high and low bits, respectively.\n * <p>\n * The fixed-point encoding follows {@link http://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\n * </p>\n *\n * @param {Number} value The floating-point value to encode.\n * @param {Object} [result] The object onto which to store the result.\n * @returns {Object} The modified result parameter or a new instance if one was not provided.\n *\n * @example\n * var value = 1234567.1234567;\n * var splitValue = Cesium.EncodedCartesian3.encode(value);\n */\nEncodedCartesian3.encode = function (value, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"value\", value);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = {\n      high: 0.0,\n      low: 0.0,\n    };\n  }\n\n  var doubleHigh;\n  if (value >= 0.0) {\n    doubleHigh = Math.floor(value / 65536.0) * 65536.0;\n    result.high = doubleHigh;\n    result.low = value - doubleHigh;\n  } else {\n    doubleHigh = Math.floor(-value / 65536.0) * 65536.0;\n    result.high = -doubleHigh;\n    result.low = value + doubleHigh;\n  }\n\n  return result;\n};\n\nvar scratchEncode = {\n  high: 0.0,\n  low: 0.0,\n};\n\n/**\n * Encodes a {@link Cartesian3} with 64-bit floating-point components as two {@link Cartesian3}\n * values that, when converted to 32-bit floating-point and added, approximate the original input.\n * <p>\n * The fixed-point encoding follows {@link http://blogs.agi.com/insight3d/index.php/2008/09/03/precisions-precisions/|Precisions, Precisions}.\n * </p>\n *\n * @param {Cartesian3} cartesian The cartesian to encode.\n * @param {EncodedCartesian3} [result] The object onto which to store the result.\n * @returns {EncodedCartesian3} The modified result parameter or a new EncodedCartesian3 instance if one was not provided.\n *\n * @example\n * var cart = new Cesium.Cartesian3(-10000000.0, 0.0, 10000000.0);\n * var encoded = Cesium.EncodedCartesian3.fromCartesian(cart);\n */\nEncodedCartesian3.fromCartesian = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new EncodedCartesian3();\n  }\n\n  var high = result.high;\n  var low = result.low;\n\n  EncodedCartesian3.encode(cartesian.x, scratchEncode);\n  high.x = scratchEncode.high;\n  low.x = scratchEncode.low;\n\n  EncodedCartesian3.encode(cartesian.y, scratchEncode);\n  high.y = scratchEncode.high;\n  low.y = scratchEncode.low;\n\n  EncodedCartesian3.encode(cartesian.z, scratchEncode);\n  high.z = scratchEncode.high;\n  low.z = scratchEncode.low;\n\n  return result;\n};\n\nvar encodedP = new EncodedCartesian3();\n\n/**\n * Encodes the provided <code>cartesian</code>, and writes it to an array with <code>high</code>\n * components followed by <code>low</code> components, i.e. <code>[high.x, high.y, high.z, low.x, low.y, low.z]</code>.\n * <p>\n * This is used to create interleaved high-precision position vertex attributes.\n * </p>\n *\n * @param {Cartesian3} cartesian The cartesian to encode.\n * @param {Number[]} cartesianArray The array to write to.\n * @param {Number} index The index into the array to start writing.  Six elements will be written.\n *\n * @exception {DeveloperError} index must be a number greater than or equal to 0.\n *\n * @example\n * var positions = [\n *    new Cesium.Cartesian3(),\n *    // ...\n * ];\n * var encodedPositions = new Float32Array(2 * 3 * positions.length);\n * var j = 0;\n * for (var i = 0; i < positions.length; ++i) {\n *   Cesium.EncodedCartesian3.writeElement(positions[i], encodedPositions, j);\n *   j += 6;\n * }\n */\nEncodedCartesian3.writeElements = function (cartesian, cartesianArray, index) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"cartesianArray\", cartesianArray);\n  Check.typeOf.number(\"index\", index);\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  //>>includeEnd('debug');\n\n  EncodedCartesian3.fromCartesian(cartesian, encodedP);\n  var high = encodedP.high;\n  var low = encodedP.low;\n\n  cartesianArray[index] = high.x;\n  cartesianArray[index + 1] = high.y;\n  cartesianArray[index + 2] = high.z;\n  cartesianArray[index + 3] = low.x;\n  cartesianArray[index + 4] = low.y;\n  cartesianArray[index + 5] = low.z;\n};\nexport default EncodedCartesian3;\n"]},"metadata":{},"sourceType":"module"}