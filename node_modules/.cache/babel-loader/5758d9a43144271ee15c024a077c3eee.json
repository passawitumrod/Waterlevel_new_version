{"ast":null,"code":"import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport SceneMode from \"./SceneMode.js\";\nimport SceneTransforms from \"./SceneTransforms.js\";\n/**\n * A graphical point positioned in the 3D scene, that is created\n * and rendered using a {@link PointPrimitiveCollection}.  A point is created and its initial\n * properties are set by calling {@link PointPrimitiveCollection#add}.\n *\n * @alias PointPrimitive\n *\n * @performance Reading a property, e.g., {@link PointPrimitive#show}, is constant time.\n * Assigning to a property is constant time but results in\n * CPU to GPU traffic when {@link PointPrimitiveCollection#update} is called.  The per-pointPrimitive traffic is\n * the same regardless of how many properties were updated.  If most pointPrimitives in a collection need to be\n * updated, it may be more efficient to clear the collection with {@link PointPrimitiveCollection#removeAll}\n * and add new pointPrimitives instead of modifying each one.\n *\n * @exception {DeveloperError} scaleByDistance.far must be greater than scaleByDistance.near\n * @exception {DeveloperError} translucencyByDistance.far must be greater than translucencyByDistance.near\n * @exception {DeveloperError} distanceDisplayCondition.far must be greater than distanceDisplayCondition.near\n *\n * @see PointPrimitiveCollection\n * @see PointPrimitiveCollection#add\n *\n * @internalConstructor\n * @class\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Points.html|Cesium Sandcastle Points Demo}\n */\n\nfunction PointPrimitive(options, pointPrimitiveCollection) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT); //>>includeStart('debug', pragmas.debug);\n\n  if (defined(options.disableDepthTestDistance) && options.disableDepthTestDistance < 0.0) {\n    throw new DeveloperError(\"disableDepthTestDistance must be greater than or equal to 0.0.\");\n  } //>>includeEnd('debug');\n\n\n  var translucencyByDistance = options.translucencyByDistance;\n  var scaleByDistance = options.scaleByDistance;\n  var distanceDisplayCondition = options.distanceDisplayCondition;\n\n  if (defined(translucencyByDistance)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (translucencyByDistance.far <= translucencyByDistance.near) {\n      throw new DeveloperError(\"translucencyByDistance.far must be greater than translucencyByDistance.near.\");\n    } //>>includeEnd('debug');\n\n\n    translucencyByDistance = NearFarScalar.clone(translucencyByDistance);\n  }\n\n  if (defined(scaleByDistance)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (scaleByDistance.far <= scaleByDistance.near) {\n      throw new DeveloperError(\"scaleByDistance.far must be greater than scaleByDistance.near.\");\n    } //>>includeEnd('debug');\n\n\n    scaleByDistance = NearFarScalar.clone(scaleByDistance);\n  }\n\n  if (defined(distanceDisplayCondition)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (distanceDisplayCondition.far <= distanceDisplayCondition.near) {\n      throw new DeveloperError(\"distanceDisplayCondition.far must be greater than distanceDisplayCondition.near.\");\n    } //>>includeEnd('debug');\n\n\n    distanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition);\n  }\n\n  this._show = defaultValue(options.show, true);\n  this._position = Cartesian3.clone(defaultValue(options.position, Cartesian3.ZERO));\n  this._actualPosition = Cartesian3.clone(this._position); // For columbus view and 2D\n\n  this._color = Color.clone(defaultValue(options.color, Color.WHITE));\n  this._outlineColor = Color.clone(defaultValue(options.outlineColor, Color.TRANSPARENT));\n  this._outlineWidth = defaultValue(options.outlineWidth, 0.0);\n  this._pixelSize = defaultValue(options.pixelSize, 10.0);\n  this._scaleByDistance = scaleByDistance;\n  this._translucencyByDistance = translucencyByDistance;\n  this._distanceDisplayCondition = distanceDisplayCondition;\n  this._disableDepthTestDistance = defaultValue(options.disableDepthTestDistance, 0.0);\n  this._id = options.id;\n  this._collection = defaultValue(options.collection, pointPrimitiveCollection);\n  this._clusterShow = true;\n  this._pickId = undefined;\n  this._pointPrimitiveCollection = pointPrimitiveCollection;\n  this._dirty = false;\n  this._index = -1; //Used only by PointPrimitiveCollection\n}\n\nvar SHOW_INDEX = PointPrimitive.SHOW_INDEX = 0;\nvar POSITION_INDEX = PointPrimitive.POSITION_INDEX = 1;\nvar COLOR_INDEX = PointPrimitive.COLOR_INDEX = 2;\nvar OUTLINE_COLOR_INDEX = PointPrimitive.OUTLINE_COLOR_INDEX = 3;\nvar OUTLINE_WIDTH_INDEX = PointPrimitive.OUTLINE_WIDTH_INDEX = 4;\nvar PIXEL_SIZE_INDEX = PointPrimitive.PIXEL_SIZE_INDEX = 5;\nvar SCALE_BY_DISTANCE_INDEX = PointPrimitive.SCALE_BY_DISTANCE_INDEX = 6;\nvar TRANSLUCENCY_BY_DISTANCE_INDEX = PointPrimitive.TRANSLUCENCY_BY_DISTANCE_INDEX = 7;\nvar DISTANCE_DISPLAY_CONDITION_INDEX = PointPrimitive.DISTANCE_DISPLAY_CONDITION_INDEX = 8;\nvar DISABLE_DEPTH_DISTANCE_INDEX = PointPrimitive.DISABLE_DEPTH_DISTANCE_INDEX = 9;\nPointPrimitive.NUMBER_OF_PROPERTIES = 10;\n\nfunction makeDirty(pointPrimitive, propertyChanged) {\n  var pointPrimitiveCollection = pointPrimitive._pointPrimitiveCollection;\n\n  if (defined(pointPrimitiveCollection)) {\n    pointPrimitiveCollection._updatePointPrimitive(pointPrimitive, propertyChanged);\n\n    pointPrimitive._dirty = true;\n  }\n}\n\nObject.defineProperties(PointPrimitive.prototype, {\n  /**\n   * Determines if this point will be shown.  Use this to hide or show a point, instead\n   * of removing it and re-adding it to the collection.\n   * @memberof PointPrimitive.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      if (this._show !== value) {\n        this._show = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the Cartesian position of this point.\n   * @memberof PointPrimitive.prototype\n   * @type {Cartesian3}\n   */\n  position: {\n    get: function () {\n      return this._position;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      var position = this._position;\n\n      if (!Cartesian3.equals(position, value)) {\n        Cartesian3.clone(value, position);\n        Cartesian3.clone(value, this._actualPosition);\n        makeDirty(this, POSITION_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets near and far scaling properties of a point based on the point's distance from the camera.\n   * A point's scale will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the point's scale remains clamped to the nearest bound.  This scale\n   * multiplies the pixelSize and outlineWidth to affect the total size of the point.  If undefined,\n   * scaleByDistance will be disabled.\n   * @memberof PointPrimitive.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a pointPrimitive's scaleByDistance to scale to 15 when the\n   * // camera is 1500 meters from the pointPrimitive and disappear as\n   * // the camera distance approaches 8.0e6 meters.\n   * p.scaleByDistance = new Cesium.NearFarScalar(1.5e2, 15, 8.0e6, 0.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable scaling by distance\n   * p.scaleByDistance = undefined;\n   */\n  scaleByDistance: {\n    get: function () {\n      return this._scaleByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\"far distance must be greater than near distance.\");\n      } //>>includeEnd('debug');\n\n\n      var scaleByDistance = this._scaleByDistance;\n\n      if (!NearFarScalar.equals(scaleByDistance, value)) {\n        this._scaleByDistance = NearFarScalar.clone(value, scaleByDistance);\n        makeDirty(this, SCALE_BY_DISTANCE_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets near and far translucency properties of a point based on the point's distance from the camera.\n   * A point's translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the point's translucency remains clamped to the nearest bound.  If undefined,\n   * translucencyByDistance will be disabled.\n   * @memberof PointPrimitive.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a point's translucency to 1.0 when the\n   * // camera is 1500 meters from the point and disappear as\n   * // the camera distance approaches 8.0e6 meters.\n   * p.translucencyByDistance = new Cesium.NearFarScalar(1.5e2, 1.0, 8.0e6, 0.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable translucency by distance\n   * p.translucencyByDistance = undefined;\n   */\n  translucencyByDistance: {\n    get: function () {\n      return this._translucencyByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\"far distance must be greater than near distance.\");\n      } //>>includeEnd('debug');\n\n\n      var translucencyByDistance = this._translucencyByDistance;\n\n      if (!NearFarScalar.equals(translucencyByDistance, value)) {\n        this._translucencyByDistance = NearFarScalar.clone(value, translucencyByDistance);\n        makeDirty(this, TRANSLUCENCY_BY_DISTANCE_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the inner size of the point in pixels.\n   * @memberof PointPrimitive.prototype\n   * @type {Number}\n   */\n  pixelSize: {\n    get: function () {\n      return this._pixelSize;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      if (this._pixelSize !== value) {\n        this._pixelSize = value;\n        makeDirty(this, PIXEL_SIZE_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the inner color of the point.\n   * The red, green, blue, and alpha values are indicated by <code>value</code>'s <code>red</code>, <code>green</code>,\n   * <code>blue</code>, and <code>alpha</code> properties as shown in Example 1.  These components range from <code>0.0</code>\n   * (no intensity) to <code>1.0</code> (full intensity).\n   * @memberof PointPrimitive.prototype\n   * @type {Color}\n   *\n   * @example\n   * // Example 1. Assign yellow.\n   * p.color = Cesium.Color.YELLOW;\n   *\n   * @example\n   * // Example 2. Make a pointPrimitive 50% translucent.\n   * p.color = new Cesium.Color(1.0, 1.0, 1.0, 0.5);\n   */\n  color: {\n    get: function () {\n      return this._color;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      var color = this._color;\n\n      if (!Color.equals(color, value)) {\n        Color.clone(value, color);\n        makeDirty(this, COLOR_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the outline color of the point.\n   * @memberof PointPrimitive.prototype\n   * @type {Color}\n   */\n  outlineColor: {\n    get: function () {\n      return this._outlineColor;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      var outlineColor = this._outlineColor;\n\n      if (!Color.equals(outlineColor, value)) {\n        Color.clone(value, outlineColor);\n        makeDirty(this, OUTLINE_COLOR_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the outline width in pixels.  This width adds to pixelSize,\n   * increasing the total size of the point.\n   * @memberof PointPrimitive.prototype\n   * @type {Number}\n   */\n  outlineWidth: {\n    get: function () {\n      return this._outlineWidth;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      } //>>includeEnd('debug');\n\n\n      if (this._outlineWidth !== value) {\n        this._outlineWidth = value;\n        makeDirty(this, OUTLINE_WIDTH_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the condition specifying at what distance from the camera that this point will be displayed.\n   * @memberof PointPrimitive.prototype\n   * @type {DistanceDisplayCondition}\n   * @default undefined\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._distanceDisplayCondition;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\"far must be greater than near\");\n      } //>>includeEnd('debug');\n\n\n      if (!DistanceDisplayCondition.equals(this._distanceDisplayCondition, value)) {\n        this._distanceDisplayCondition = DistanceDisplayCondition.clone(value, this._distanceDisplayCondition);\n        makeDirty(this, DISTANCE_DISPLAY_CONDITION_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n   * When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied.\n   * @memberof PointPrimitive.prototype\n   * @type {Number}\n   * @default 0.0\n   */\n  disableDepthTestDistance: {\n    get: function () {\n      return this._disableDepthTestDistance;\n    },\n    set: function (value) {\n      if (this._disableDepthTestDistance !== value) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(value) || value < 0.0) {\n          throw new DeveloperError(\"disableDepthTestDistance must be greater than or equal to 0.0.\");\n        } //>>includeEnd('debug');\n\n\n        this._disableDepthTestDistance = value;\n        makeDirty(this, DISABLE_DEPTH_DISTANCE_INDEX);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the user-defined value returned when the point is picked.\n   * @memberof PointPrimitive.prototype\n   * @type {*}\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n    set: function (value) {\n      this._id = value;\n\n      if (defined(this._pickId)) {\n        this._pickId.object.id = value;\n      }\n    }\n  },\n\n  /**\n   * @private\n   */\n  pickId: {\n    get: function () {\n      return this._pickId;\n    }\n  },\n\n  /**\n   * Determines whether or not this point will be shown or hidden because it was clustered.\n   * @memberof PointPrimitive.prototype\n   * @type {Boolean}\n   * @private\n   */\n  clusterShow: {\n    get: function () {\n      return this._clusterShow;\n    },\n    set: function (value) {\n      if (this._clusterShow !== value) {\n        this._clusterShow = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    }\n  }\n});\n\nPointPrimitive.prototype.getPickId = function (context) {\n  if (!defined(this._pickId)) {\n    this._pickId = context.createPickId({\n      primitive: this,\n      collection: this._collection,\n      id: this._id\n    });\n  }\n\n  return this._pickId;\n};\n\nPointPrimitive.prototype._getActualPosition = function () {\n  return this._actualPosition;\n};\n\nPointPrimitive.prototype._setActualPosition = function (value) {\n  Cartesian3.clone(value, this._actualPosition);\n  makeDirty(this, POSITION_INDEX);\n};\n\nvar tempCartesian3 = new Cartesian4();\n\nPointPrimitive._computeActualPosition = function (position, frameState, modelMatrix) {\n  if (frameState.mode === SceneMode.SCENE3D) {\n    return position;\n  }\n\n  Matrix4.multiplyByPoint(modelMatrix, position, tempCartesian3);\n  return SceneTransforms.computeActualWgs84Position(frameState, tempCartesian3);\n};\n\nvar scratchCartesian4 = new Cartesian4(); // This function is basically a stripped-down JavaScript version of PointPrimitiveCollectionVS.glsl\n\nPointPrimitive._computeScreenSpacePosition = function (modelMatrix, position, scene, result) {\n  // Model to world coordinates\n  var positionWorld = Matrix4.multiplyByVector(modelMatrix, Cartesian4.fromElements(position.x, position.y, position.z, 1, scratchCartesian4), scratchCartesian4);\n  var positionWC = SceneTransforms.wgs84ToWindowCoordinates(scene, positionWorld, result);\n  return positionWC;\n};\n/**\n * Computes the screen-space position of the point's origin.\n * The screen space origin is the top, left corner of the canvas; <code>x</code> increases from\n * left to right, and <code>y</code> increases from top to bottom.\n *\n * @param {Scene} scene The scene.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The screen-space position of the point.\n *\n * @exception {DeveloperError} PointPrimitive must be in a collection.\n *\n * @example\n * console.log(p.computeScreenSpacePosition(scene).toString());\n */\n\n\nPointPrimitive.prototype.computeScreenSpacePosition = function (scene, result) {\n  var pointPrimitiveCollection = this._pointPrimitiveCollection;\n\n  if (!defined(result)) {\n    result = new Cartesian2();\n  } //>>includeStart('debug', pragmas.debug);\n\n\n  if (!defined(pointPrimitiveCollection)) {\n    throw new DeveloperError(\"PointPrimitive must be in a collection.\");\n  }\n\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  } //>>includeEnd('debug');\n\n\n  var modelMatrix = pointPrimitiveCollection.modelMatrix;\n\n  var windowCoordinates = PointPrimitive._computeScreenSpacePosition(modelMatrix, this._actualPosition, scene, result);\n\n  if (!defined(windowCoordinates)) {\n    return undefined;\n  }\n\n  windowCoordinates.y = scene.canvas.clientHeight - windowCoordinates.y;\n  return windowCoordinates;\n};\n/**\n * Gets a point's screen space bounding box centered around screenSpacePosition.\n * @param {PointPrimitive} point The point to get the screen space bounding box for.\n * @param {Cartesian2} screenSpacePosition The screen space center of the label.\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The screen space bounding box.\n *\n * @private\n */\n\n\nPointPrimitive.getScreenSpaceBoundingBox = function (point, screenSpacePosition, result) {\n  var size = point.pixelSize;\n  var halfSize = size * 0.5;\n  var x = screenSpacePosition.x - halfSize;\n  var y = screenSpacePosition.y - halfSize;\n  var width = size;\n  var height = size;\n\n  if (!defined(result)) {\n    result = new BoundingRectangle();\n  }\n\n  result.x = x;\n  result.y = y;\n  result.width = width;\n  result.height = height;\n  return result;\n};\n/**\n * Determines if this point equals another point.  Points are equal if all their properties\n * are equal.  Points in different collections can be equal.\n *\n * @param {PointPrimitive} other The point to compare for equality.\n * @returns {Boolean} <code>true</code> if the points are equal; otherwise, <code>false</code>.\n */\n\n\nPointPrimitive.prototype.equals = function (other) {\n  return this === other || defined(other) && this._id === other._id && Cartesian3.equals(this._position, other._position) && Color.equals(this._color, other._color) && this._pixelSize === other._pixelSize && this._outlineWidth === other._outlineWidth && this._show === other._show && Color.equals(this._outlineColor, other._outlineColor) && NearFarScalar.equals(this._scaleByDistance, other._scaleByDistance) && NearFarScalar.equals(this._translucencyByDistance, other._translucencyByDistance) && DistanceDisplayCondition.equals(this._distanceDisplayCondition, other._distanceDisplayCondition) && this._disableDepthTestDistance === other._disableDepthTestDistance;\n};\n\nPointPrimitive.prototype._destroy = function () {\n  this._pickId = this._pickId && this._pickId.destroy();\n  this._pointPrimitiveCollection = undefined;\n};\n\nexport default PointPrimitive;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/PointPrimitive.js"],"names":["BoundingRectangle","Cartesian2","Cartesian3","Cartesian4","Color","defaultValue","defined","DeveloperError","DistanceDisplayCondition","Matrix4","NearFarScalar","SceneMode","SceneTransforms","PointPrimitive","options","pointPrimitiveCollection","EMPTY_OBJECT","disableDepthTestDistance","translucencyByDistance","scaleByDistance","distanceDisplayCondition","far","near","clone","_show","show","_position","position","ZERO","_actualPosition","_color","color","WHITE","_outlineColor","outlineColor","TRANSPARENT","_outlineWidth","outlineWidth","_pixelSize","pixelSize","_scaleByDistance","_translucencyByDistance","_distanceDisplayCondition","_disableDepthTestDistance","_id","id","_collection","collection","_clusterShow","_pickId","undefined","_pointPrimitiveCollection","_dirty","_index","SHOW_INDEX","POSITION_INDEX","COLOR_INDEX","OUTLINE_COLOR_INDEX","OUTLINE_WIDTH_INDEX","PIXEL_SIZE_INDEX","SCALE_BY_DISTANCE_INDEX","TRANSLUCENCY_BY_DISTANCE_INDEX","DISTANCE_DISPLAY_CONDITION_INDEX","DISABLE_DEPTH_DISTANCE_INDEX","NUMBER_OF_PROPERTIES","makeDirty","pointPrimitive","propertyChanged","_updatePointPrimitive","Object","defineProperties","prototype","get","set","value","equals","object","pickId","clusterShow","getPickId","context","createPickId","primitive","_getActualPosition","_setActualPosition","tempCartesian3","_computeActualPosition","frameState","modelMatrix","mode","SCENE3D","multiplyByPoint","computeActualWgs84Position","scratchCartesian4","_computeScreenSpacePosition","scene","result","positionWorld","multiplyByVector","fromElements","x","y","z","positionWC","wgs84ToWindowCoordinates","computeScreenSpacePosition","windowCoordinates","canvas","clientHeight","getScreenSpaceBoundingBox","point","screenSpacePosition","size","halfSize","width","height","other","_destroy","destroy"],"mappings":"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","sourcesContent":["import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport SceneMode from \"./SceneMode.js\";\nimport SceneTransforms from \"./SceneTransforms.js\";\n\n/**\n * A graphical point positioned in the 3D scene, that is created\n * and rendered using a {@link PointPrimitiveCollection}.  A point is created and its initial\n * properties are set by calling {@link PointPrimitiveCollection#add}.\n *\n * @alias PointPrimitive\n *\n * @performance Reading a property, e.g., {@link PointPrimitive#show}, is constant time.\n * Assigning to a property is constant time but results in\n * CPU to GPU traffic when {@link PointPrimitiveCollection#update} is called.  The per-pointPrimitive traffic is\n * the same regardless of how many properties were updated.  If most pointPrimitives in a collection need to be\n * updated, it may be more efficient to clear the collection with {@link PointPrimitiveCollection#removeAll}\n * and add new pointPrimitives instead of modifying each one.\n *\n * @exception {DeveloperError} scaleByDistance.far must be greater than scaleByDistance.near\n * @exception {DeveloperError} translucencyByDistance.far must be greater than translucencyByDistance.near\n * @exception {DeveloperError} distanceDisplayCondition.far must be greater than distanceDisplayCondition.near\n *\n * @see PointPrimitiveCollection\n * @see PointPrimitiveCollection#add\n *\n * @internalConstructor\n * @class\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Points.html|Cesium Sandcastle Points Demo}\n */\nfunction PointPrimitive(options, pointPrimitiveCollection) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    defined(options.disableDepthTestDistance) &&\n    options.disableDepthTestDistance < 0.0\n  ) {\n    throw new DeveloperError(\n      \"disableDepthTestDistance must be greater than or equal to 0.0.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var translucencyByDistance = options.translucencyByDistance;\n  var scaleByDistance = options.scaleByDistance;\n  var distanceDisplayCondition = options.distanceDisplayCondition;\n  if (defined(translucencyByDistance)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (translucencyByDistance.far <= translucencyByDistance.near) {\n      throw new DeveloperError(\n        \"translucencyByDistance.far must be greater than translucencyByDistance.near.\"\n      );\n    }\n    //>>includeEnd('debug');\n    translucencyByDistance = NearFarScalar.clone(translucencyByDistance);\n  }\n  if (defined(scaleByDistance)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (scaleByDistance.far <= scaleByDistance.near) {\n      throw new DeveloperError(\n        \"scaleByDistance.far must be greater than scaleByDistance.near.\"\n      );\n    }\n    //>>includeEnd('debug');\n    scaleByDistance = NearFarScalar.clone(scaleByDistance);\n  }\n  if (defined(distanceDisplayCondition)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (distanceDisplayCondition.far <= distanceDisplayCondition.near) {\n      throw new DeveloperError(\n        \"distanceDisplayCondition.far must be greater than distanceDisplayCondition.near.\"\n      );\n    }\n    //>>includeEnd('debug');\n    distanceDisplayCondition = DistanceDisplayCondition.clone(\n      distanceDisplayCondition\n    );\n  }\n\n  this._show = defaultValue(options.show, true);\n  this._position = Cartesian3.clone(\n    defaultValue(options.position, Cartesian3.ZERO)\n  );\n  this._actualPosition = Cartesian3.clone(this._position); // For columbus view and 2D\n  this._color = Color.clone(defaultValue(options.color, Color.WHITE));\n  this._outlineColor = Color.clone(\n    defaultValue(options.outlineColor, Color.TRANSPARENT)\n  );\n  this._outlineWidth = defaultValue(options.outlineWidth, 0.0);\n  this._pixelSize = defaultValue(options.pixelSize, 10.0);\n  this._scaleByDistance = scaleByDistance;\n  this._translucencyByDistance = translucencyByDistance;\n  this._distanceDisplayCondition = distanceDisplayCondition;\n  this._disableDepthTestDistance = defaultValue(\n    options.disableDepthTestDistance,\n    0.0\n  );\n  this._id = options.id;\n  this._collection = defaultValue(options.collection, pointPrimitiveCollection);\n\n  this._clusterShow = true;\n\n  this._pickId = undefined;\n  this._pointPrimitiveCollection = pointPrimitiveCollection;\n  this._dirty = false;\n  this._index = -1; //Used only by PointPrimitiveCollection\n}\n\nvar SHOW_INDEX = (PointPrimitive.SHOW_INDEX = 0);\nvar POSITION_INDEX = (PointPrimitive.POSITION_INDEX = 1);\nvar COLOR_INDEX = (PointPrimitive.COLOR_INDEX = 2);\nvar OUTLINE_COLOR_INDEX = (PointPrimitive.OUTLINE_COLOR_INDEX = 3);\nvar OUTLINE_WIDTH_INDEX = (PointPrimitive.OUTLINE_WIDTH_INDEX = 4);\nvar PIXEL_SIZE_INDEX = (PointPrimitive.PIXEL_SIZE_INDEX = 5);\nvar SCALE_BY_DISTANCE_INDEX = (PointPrimitive.SCALE_BY_DISTANCE_INDEX = 6);\nvar TRANSLUCENCY_BY_DISTANCE_INDEX = (PointPrimitive.TRANSLUCENCY_BY_DISTANCE_INDEX = 7);\nvar DISTANCE_DISPLAY_CONDITION_INDEX = (PointPrimitive.DISTANCE_DISPLAY_CONDITION_INDEX = 8);\nvar DISABLE_DEPTH_DISTANCE_INDEX = (PointPrimitive.DISABLE_DEPTH_DISTANCE_INDEX = 9);\nPointPrimitive.NUMBER_OF_PROPERTIES = 10;\n\nfunction makeDirty(pointPrimitive, propertyChanged) {\n  var pointPrimitiveCollection = pointPrimitive._pointPrimitiveCollection;\n  if (defined(pointPrimitiveCollection)) {\n    pointPrimitiveCollection._updatePointPrimitive(\n      pointPrimitive,\n      propertyChanged\n    );\n    pointPrimitive._dirty = true;\n  }\n}\n\nObject.defineProperties(PointPrimitive.prototype, {\n  /**\n   * Determines if this point will be shown.  Use this to hide or show a point, instead\n   * of removing it and re-adding it to the collection.\n   * @memberof PointPrimitive.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (this._show !== value) {\n        this._show = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the Cartesian position of this point.\n   * @memberof PointPrimitive.prototype\n   * @type {Cartesian3}\n   */\n  position: {\n    get: function () {\n      return this._position;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      var position = this._position;\n      if (!Cartesian3.equals(position, value)) {\n        Cartesian3.clone(value, position);\n        Cartesian3.clone(value, this._actualPosition);\n\n        makeDirty(this, POSITION_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets near and far scaling properties of a point based on the point's distance from the camera.\n   * A point's scale will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the point's scale remains clamped to the nearest bound.  This scale\n   * multiplies the pixelSize and outlineWidth to affect the total size of the point.  If undefined,\n   * scaleByDistance will be disabled.\n   * @memberof PointPrimitive.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a pointPrimitive's scaleByDistance to scale to 15 when the\n   * // camera is 1500 meters from the pointPrimitive and disappear as\n   * // the camera distance approaches 8.0e6 meters.\n   * p.scaleByDistance = new Cesium.NearFarScalar(1.5e2, 15, 8.0e6, 0.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable scaling by distance\n   * p.scaleByDistance = undefined;\n   */\n  scaleByDistance: {\n    get: function () {\n      return this._scaleByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\n          \"far distance must be greater than near distance.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      var scaleByDistance = this._scaleByDistance;\n      if (!NearFarScalar.equals(scaleByDistance, value)) {\n        this._scaleByDistance = NearFarScalar.clone(value, scaleByDistance);\n        makeDirty(this, SCALE_BY_DISTANCE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets near and far translucency properties of a point based on the point's distance from the camera.\n   * A point's translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the upper and lower bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the point's translucency remains clamped to the nearest bound.  If undefined,\n   * translucencyByDistance will be disabled.\n   * @memberof PointPrimitive.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a point's translucency to 1.0 when the\n   * // camera is 1500 meters from the point and disappear as\n   * // the camera distance approaches 8.0e6 meters.\n   * p.translucencyByDistance = new Cesium.NearFarScalar(1.5e2, 1.0, 8.0e6, 0.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable translucency by distance\n   * p.translucencyByDistance = undefined;\n   */\n  translucencyByDistance: {\n    get: function () {\n      return this._translucencyByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\n          \"far distance must be greater than near distance.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      var translucencyByDistance = this._translucencyByDistance;\n      if (!NearFarScalar.equals(translucencyByDistance, value)) {\n        this._translucencyByDistance = NearFarScalar.clone(\n          value,\n          translucencyByDistance\n        );\n        makeDirty(this, TRANSLUCENCY_BY_DISTANCE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the inner size of the point in pixels.\n   * @memberof PointPrimitive.prototype\n   * @type {Number}\n   */\n  pixelSize: {\n    get: function () {\n      return this._pixelSize;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (this._pixelSize !== value) {\n        this._pixelSize = value;\n        makeDirty(this, PIXEL_SIZE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the inner color of the point.\n   * The red, green, blue, and alpha values are indicated by <code>value</code>'s <code>red</code>, <code>green</code>,\n   * <code>blue</code>, and <code>alpha</code> properties as shown in Example 1.  These components range from <code>0.0</code>\n   * (no intensity) to <code>1.0</code> (full intensity).\n   * @memberof PointPrimitive.prototype\n   * @type {Color}\n   *\n   * @example\n   * // Example 1. Assign yellow.\n   * p.color = Cesium.Color.YELLOW;\n   *\n   * @example\n   * // Example 2. Make a pointPrimitive 50% translucent.\n   * p.color = new Cesium.Color(1.0, 1.0, 1.0, 0.5);\n   */\n  color: {\n    get: function () {\n      return this._color;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      var color = this._color;\n      if (!Color.equals(color, value)) {\n        Color.clone(value, color);\n        makeDirty(this, COLOR_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the outline color of the point.\n   * @memberof PointPrimitive.prototype\n   * @type {Color}\n   */\n  outlineColor: {\n    get: function () {\n      return this._outlineColor;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      var outlineColor = this._outlineColor;\n      if (!Color.equals(outlineColor, value)) {\n        Color.clone(value, outlineColor);\n        makeDirty(this, OUTLINE_COLOR_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the outline width in pixels.  This width adds to pixelSize,\n   * increasing the total size of the point.\n   * @memberof PointPrimitive.prototype\n   * @type {Number}\n   */\n  outlineWidth: {\n    get: function () {\n      return this._outlineWidth;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (this._outlineWidth !== value) {\n        this._outlineWidth = value;\n        makeDirty(this, OUTLINE_WIDTH_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the condition specifying at what distance from the camera that this point will be displayed.\n   * @memberof PointPrimitive.prototype\n   * @type {DistanceDisplayCondition}\n   * @default undefined\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._distanceDisplayCondition;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\"far must be greater than near\");\n      }\n      //>>includeEnd('debug');\n      if (\n        !DistanceDisplayCondition.equals(this._distanceDisplayCondition, value)\n      ) {\n        this._distanceDisplayCondition = DistanceDisplayCondition.clone(\n          value,\n          this._distanceDisplayCondition\n        );\n        makeDirty(this, DISTANCE_DISPLAY_CONDITION_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n   * When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied.\n   * @memberof PointPrimitive.prototype\n   * @type {Number}\n   * @default 0.0\n   */\n  disableDepthTestDistance: {\n    get: function () {\n      return this._disableDepthTestDistance;\n    },\n    set: function (value) {\n      if (this._disableDepthTestDistance !== value) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(value) || value < 0.0) {\n          throw new DeveloperError(\n            \"disableDepthTestDistance must be greater than or equal to 0.0.\"\n          );\n        }\n        //>>includeEnd('debug');\n        this._disableDepthTestDistance = value;\n        makeDirty(this, DISABLE_DEPTH_DISTANCE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the user-defined value returned when the point is picked.\n   * @memberof PointPrimitive.prototype\n   * @type {*}\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n    set: function (value) {\n      this._id = value;\n      if (defined(this._pickId)) {\n        this._pickId.object.id = value;\n      }\n    },\n  },\n\n  /**\n   * @private\n   */\n  pickId: {\n    get: function () {\n      return this._pickId;\n    },\n  },\n\n  /**\n   * Determines whether or not this point will be shown or hidden because it was clustered.\n   * @memberof PointPrimitive.prototype\n   * @type {Boolean}\n   * @private\n   */\n  clusterShow: {\n    get: function () {\n      return this._clusterShow;\n    },\n    set: function (value) {\n      if (this._clusterShow !== value) {\n        this._clusterShow = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    },\n  },\n});\n\nPointPrimitive.prototype.getPickId = function (context) {\n  if (!defined(this._pickId)) {\n    this._pickId = context.createPickId({\n      primitive: this,\n      collection: this._collection,\n      id: this._id,\n    });\n  }\n\n  return this._pickId;\n};\n\nPointPrimitive.prototype._getActualPosition = function () {\n  return this._actualPosition;\n};\n\nPointPrimitive.prototype._setActualPosition = function (value) {\n  Cartesian3.clone(value, this._actualPosition);\n  makeDirty(this, POSITION_INDEX);\n};\n\nvar tempCartesian3 = new Cartesian4();\nPointPrimitive._computeActualPosition = function (\n  position,\n  frameState,\n  modelMatrix\n) {\n  if (frameState.mode === SceneMode.SCENE3D) {\n    return position;\n  }\n\n  Matrix4.multiplyByPoint(modelMatrix, position, tempCartesian3);\n  return SceneTransforms.computeActualWgs84Position(frameState, tempCartesian3);\n};\n\nvar scratchCartesian4 = new Cartesian4();\n\n// This function is basically a stripped-down JavaScript version of PointPrimitiveCollectionVS.glsl\nPointPrimitive._computeScreenSpacePosition = function (\n  modelMatrix,\n  position,\n  scene,\n  result\n) {\n  // Model to world coordinates\n  var positionWorld = Matrix4.multiplyByVector(\n    modelMatrix,\n    Cartesian4.fromElements(\n      position.x,\n      position.y,\n      position.z,\n      1,\n      scratchCartesian4\n    ),\n    scratchCartesian4\n  );\n  var positionWC = SceneTransforms.wgs84ToWindowCoordinates(\n    scene,\n    positionWorld,\n    result\n  );\n  return positionWC;\n};\n\n/**\n * Computes the screen-space position of the point's origin.\n * The screen space origin is the top, left corner of the canvas; <code>x</code> increases from\n * left to right, and <code>y</code> increases from top to bottom.\n *\n * @param {Scene} scene The scene.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The screen-space position of the point.\n *\n * @exception {DeveloperError} PointPrimitive must be in a collection.\n *\n * @example\n * console.log(p.computeScreenSpacePosition(scene).toString());\n */\nPointPrimitive.prototype.computeScreenSpacePosition = function (scene, result) {\n  var pointPrimitiveCollection = this._pointPrimitiveCollection;\n  if (!defined(result)) {\n    result = new Cartesian2();\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(pointPrimitiveCollection)) {\n    throw new DeveloperError(\"PointPrimitive must be in a collection.\");\n  }\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var modelMatrix = pointPrimitiveCollection.modelMatrix;\n  var windowCoordinates = PointPrimitive._computeScreenSpacePosition(\n    modelMatrix,\n    this._actualPosition,\n    scene,\n    result\n  );\n  if (!defined(windowCoordinates)) {\n    return undefined;\n  }\n\n  windowCoordinates.y = scene.canvas.clientHeight - windowCoordinates.y;\n  return windowCoordinates;\n};\n\n/**\n * Gets a point's screen space bounding box centered around screenSpacePosition.\n * @param {PointPrimitive} point The point to get the screen space bounding box for.\n * @param {Cartesian2} screenSpacePosition The screen space center of the label.\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The screen space bounding box.\n *\n * @private\n */\nPointPrimitive.getScreenSpaceBoundingBox = function (\n  point,\n  screenSpacePosition,\n  result\n) {\n  var size = point.pixelSize;\n  var halfSize = size * 0.5;\n\n  var x = screenSpacePosition.x - halfSize;\n  var y = screenSpacePosition.y - halfSize;\n  var width = size;\n  var height = size;\n\n  if (!defined(result)) {\n    result = new BoundingRectangle();\n  }\n\n  result.x = x;\n  result.y = y;\n  result.width = width;\n  result.height = height;\n\n  return result;\n};\n\n/**\n * Determines if this point equals another point.  Points are equal if all their properties\n * are equal.  Points in different collections can be equal.\n *\n * @param {PointPrimitive} other The point to compare for equality.\n * @returns {Boolean} <code>true</code> if the points are equal; otherwise, <code>false</code>.\n */\nPointPrimitive.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (defined(other) &&\n      this._id === other._id &&\n      Cartesian3.equals(this._position, other._position) &&\n      Color.equals(this._color, other._color) &&\n      this._pixelSize === other._pixelSize &&\n      this._outlineWidth === other._outlineWidth &&\n      this._show === other._show &&\n      Color.equals(this._outlineColor, other._outlineColor) &&\n      NearFarScalar.equals(this._scaleByDistance, other._scaleByDistance) &&\n      NearFarScalar.equals(\n        this._translucencyByDistance,\n        other._translucencyByDistance\n      ) &&\n      DistanceDisplayCondition.equals(\n        this._distanceDisplayCondition,\n        other._distanceDisplayCondition\n      ) &&\n      this._disableDepthTestDistance === other._disableDepthTestDistance)\n  );\n};\n\nPointPrimitive.prototype._destroy = function () {\n  this._pickId = this._pickId && this._pickId.destroy();\n  this._pointPrimitiveCollection = undefined;\n};\nexport default PointPrimitive;\n"]},"metadata":{},"sourceType":"module"}