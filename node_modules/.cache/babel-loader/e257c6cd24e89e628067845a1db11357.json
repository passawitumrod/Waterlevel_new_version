{"ast":null,"code":"import buildModuleUrl from \"../Core/buildModuleUrl.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport IauOrientationAxes from \"../Core/IauOrientationAxes.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Simon1994PlanetaryPositions from \"../Core/Simon1994PlanetaryPositions.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport EllipsoidPrimitive from \"./EllipsoidPrimitive.js\";\nimport Material from \"./Material.js\";\n/**\n * Draws the Moon in 3D.\n * @alias Moon\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.show=true] Determines whether the moon will be rendered.\n * @param {String} [options.textureUrl=buildModuleUrl('Assets/Textures/moonSmall.jpg')] The moon texture.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.MOON] The moon ellipsoid.\n * @param {Boolean} [options.onlySunLighting=true] Use the sun as the only light source.\n *\n *\n * @example\n * scene.moon = new Cesium.Moon();\n *\n * @see Scene#moon\n */\n\nfunction Moon(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var url = options.textureUrl;\n\n  if (!defined(url)) {\n    url = buildModuleUrl(\"Assets/Textures/moonSmall.jpg\");\n  }\n  /**\n   * Determines if the moon will be shown.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n\n\n  this.show = defaultValue(options.show, true);\n  /**\n   * The moon texture.\n   * @type {String}\n   * @default buildModuleUrl('Assets/Textures/moonSmall.jpg')\n   */\n\n  this.textureUrl = url;\n  this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.MOON);\n  /**\n   * Use the sun as the only light source.\n   * @type {Boolean}\n   * @default true\n   */\n\n  this.onlySunLighting = defaultValue(options.onlySunLighting, true);\n  this._ellipsoidPrimitive = new EllipsoidPrimitive({\n    radii: this.ellipsoid.radii,\n    material: Material.fromType(Material.ImageType),\n    depthTestEnabled: false,\n    _owner: this\n  });\n  this._ellipsoidPrimitive.material.translucent = false;\n  this._axes = new IauOrientationAxes();\n}\n\nObject.defineProperties(Moon.prototype, {\n  /**\n   * Get the ellipsoid that defines the shape of the moon.\n   *\n   * @memberof Moon.prototype\n   *\n   * @type {Ellipsoid}\n   * @readonly\n   *\n   * @default {@link Ellipsoid.MOON}\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    }\n  }\n});\nvar icrfToFixed = new Matrix3();\nvar rotationScratch = new Matrix3();\nvar translationScratch = new Cartesian3();\nvar scratchCommandList = [];\n/**\n * @private\n */\n\nMoon.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n\n  var ellipsoidPrimitive = this._ellipsoidPrimitive;\n  ellipsoidPrimitive.material.uniforms.image = this.textureUrl;\n  ellipsoidPrimitive.onlySunLighting = this.onlySunLighting;\n  var date = frameState.time;\n\n  if (!defined(Transforms.computeIcrfToFixedMatrix(date, icrfToFixed))) {\n    Transforms.computeTemeToPseudoFixedMatrix(date, icrfToFixed);\n  }\n\n  var rotation = this._axes.evaluate(date, rotationScratch);\n\n  Matrix3.transpose(rotation, rotation);\n  Matrix3.multiply(icrfToFixed, rotation, rotation);\n  var translation = Simon1994PlanetaryPositions.computeMoonPositionInEarthInertialFrame(date, translationScratch);\n  Matrix3.multiplyByVector(icrfToFixed, translation, translation);\n  Matrix4.fromRotationTranslation(rotation, translation, ellipsoidPrimitive.modelMatrix);\n  var savedCommandList = frameState.commandList;\n  frameState.commandList = scratchCommandList;\n  scratchCommandList.length = 0;\n  ellipsoidPrimitive.update(frameState);\n  frameState.commandList = savedCommandList;\n  return scratchCommandList.length === 1 ? scratchCommandList[0] : undefined;\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see Moon#destroy\n */\n\n\nMoon.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * moon = moon && moon.destroy();\n *\n * @see Moon#isDestroyed\n */\n\n\nMoon.prototype.destroy = function () {\n  this._ellipsoidPrimitive = this._ellipsoidPrimitive && this._ellipsoidPrimitive.destroy();\n  return destroyObject(this);\n};\n\nexport default Moon;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/Moon.js"],"names":["buildModuleUrl","Cartesian3","defaultValue","defined","destroyObject","Ellipsoid","IauOrientationAxes","Matrix3","Matrix4","Simon1994PlanetaryPositions","Transforms","EllipsoidPrimitive","Material","Moon","options","EMPTY_OBJECT","url","textureUrl","show","_ellipsoid","ellipsoid","MOON","onlySunLighting","_ellipsoidPrimitive","radii","material","fromType","ImageType","depthTestEnabled","_owner","translucent","_axes","Object","defineProperties","prototype","get","icrfToFixed","rotationScratch","translationScratch","scratchCommandList","update","frameState","ellipsoidPrimitive","uniforms","image","date","time","computeIcrfToFixedMatrix","computeTemeToPseudoFixedMatrix","rotation","evaluate","transpose","multiply","translation","computeMoonPositionInEarthInertialFrame","multiplyByVector","fromRotationTranslation","modelMatrix","savedCommandList","commandList","length","undefined","isDestroyed","destroy"],"mappings":"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","sourcesContent":["import buildModuleUrl from \"../Core/buildModuleUrl.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport IauOrientationAxes from \"../Core/IauOrientationAxes.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Simon1994PlanetaryPositions from \"../Core/Simon1994PlanetaryPositions.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport EllipsoidPrimitive from \"./EllipsoidPrimitive.js\";\nimport Material from \"./Material.js\";\n\n/**\n * Draws the Moon in 3D.\n * @alias Moon\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.show=true] Determines whether the moon will be rendered.\n * @param {String} [options.textureUrl=buildModuleUrl('Assets/Textures/moonSmall.jpg')] The moon texture.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.MOON] The moon ellipsoid.\n * @param {Boolean} [options.onlySunLighting=true] Use the sun as the only light source.\n *\n *\n * @example\n * scene.moon = new Cesium.Moon();\n *\n * @see Scene#moon\n */\nfunction Moon(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var url = options.textureUrl;\n  if (!defined(url)) {\n    url = buildModuleUrl(\"Assets/Textures/moonSmall.jpg\");\n  }\n\n  /**\n   * Determines if the moon will be shown.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.show = defaultValue(options.show, true);\n\n  /**\n   * The moon texture.\n   * @type {String}\n   * @default buildModuleUrl('Assets/Textures/moonSmall.jpg')\n   */\n  this.textureUrl = url;\n\n  this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.MOON);\n\n  /**\n   * Use the sun as the only light source.\n   * @type {Boolean}\n   * @default true\n   */\n  this.onlySunLighting = defaultValue(options.onlySunLighting, true);\n\n  this._ellipsoidPrimitive = new EllipsoidPrimitive({\n    radii: this.ellipsoid.radii,\n    material: Material.fromType(Material.ImageType),\n    depthTestEnabled: false,\n    _owner: this,\n  });\n  this._ellipsoidPrimitive.material.translucent = false;\n\n  this._axes = new IauOrientationAxes();\n}\n\nObject.defineProperties(Moon.prototype, {\n  /**\n   * Get the ellipsoid that defines the shape of the moon.\n   *\n   * @memberof Moon.prototype\n   *\n   * @type {Ellipsoid}\n   * @readonly\n   *\n   * @default {@link Ellipsoid.MOON}\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n  },\n});\n\nvar icrfToFixed = new Matrix3();\nvar rotationScratch = new Matrix3();\nvar translationScratch = new Cartesian3();\nvar scratchCommandList = [];\n\n/**\n * @private\n */\nMoon.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n\n  var ellipsoidPrimitive = this._ellipsoidPrimitive;\n  ellipsoidPrimitive.material.uniforms.image = this.textureUrl;\n  ellipsoidPrimitive.onlySunLighting = this.onlySunLighting;\n\n  var date = frameState.time;\n  if (!defined(Transforms.computeIcrfToFixedMatrix(date, icrfToFixed))) {\n    Transforms.computeTemeToPseudoFixedMatrix(date, icrfToFixed);\n  }\n\n  var rotation = this._axes.evaluate(date, rotationScratch);\n  Matrix3.transpose(rotation, rotation);\n  Matrix3.multiply(icrfToFixed, rotation, rotation);\n\n  var translation = Simon1994PlanetaryPositions.computeMoonPositionInEarthInertialFrame(\n    date,\n    translationScratch\n  );\n  Matrix3.multiplyByVector(icrfToFixed, translation, translation);\n\n  Matrix4.fromRotationTranslation(\n    rotation,\n    translation,\n    ellipsoidPrimitive.modelMatrix\n  );\n\n  var savedCommandList = frameState.commandList;\n  frameState.commandList = scratchCommandList;\n  scratchCommandList.length = 0;\n  ellipsoidPrimitive.update(frameState);\n  frameState.commandList = savedCommandList;\n  return scratchCommandList.length === 1 ? scratchCommandList[0] : undefined;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see Moon#destroy\n */\nMoon.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * moon = moon && moon.destroy();\n *\n * @see Moon#isDestroyed\n */\nMoon.prototype.destroy = function () {\n  this._ellipsoidPrimitive =\n    this._ellipsoidPrimitive && this._ellipsoidPrimitive.destroy();\n  return destroyObject(this);\n};\nexport default Moon;\n"]},"metadata":{},"sourceType":"module"}