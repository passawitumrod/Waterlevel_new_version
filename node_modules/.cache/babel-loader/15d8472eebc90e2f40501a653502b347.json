{"ast":null,"code":"import defined from \"./defined.js\";\n/**\n * Describes a compressed texture and contains a compressed texture buffer.\n * @alias CompressedTextureBuffer\n * @constructor\n *\n * @param {PixelFormat} internalFormat The pixel format of the compressed texture.\n * @param {Number} width The width of the texture.\n * @param {Number} height The height of the texture.\n * @param {Uint8Array} buffer The compressed texture buffer.\n */\n\nfunction CompressedTextureBuffer(internalFormat, width, height, buffer) {\n  this._format = internalFormat;\n  this._width = width;\n  this._height = height;\n  this._buffer = buffer;\n}\n\nObject.defineProperties(CompressedTextureBuffer.prototype, {\n  /**\n   * The format of the compressed texture.\n   * @type PixelFormat\n   * @readonly\n   * @memberof CompressedTextureBuffer.prototype\n   */\n  internalFormat: {\n    get: function () {\n      return this._format;\n    }\n  },\n\n  /**\n   * The width of the texture.\n   * @type Number\n   * @readonly\n   * @memberof CompressedTextureBuffer.prototype\n   */\n  width: {\n    get: function () {\n      return this._width;\n    }\n  },\n\n  /**\n   * The height of the texture.\n   * @type Number\n   * @readonly\n   * @memberof CompressedTextureBuffer.prototype\n   */\n  height: {\n    get: function () {\n      return this._height;\n    }\n  },\n\n  /**\n   * The compressed texture buffer.\n   * @type Uint8Array\n   * @readonly\n   * @memberof CompressedTextureBuffer.prototype\n   */\n  bufferView: {\n    get: function () {\n      return this._buffer;\n    }\n  }\n});\n/**\n * Creates a shallow clone of a compressed texture buffer.\n *\n * @param {CompressedTextureBuffer} object The compressed texture buffer to be cloned.\n * @return {CompressedTextureBuffer} A shallow clone of the compressed texture buffer.\n */\n\nCompressedTextureBuffer.clone = function (object) {\n  if (!defined(object)) {\n    return undefined;\n  }\n\n  return new CompressedTextureBuffer(object._format, object._width, object._height, object._buffer);\n};\n/**\n * Creates a shallow clone of this compressed texture buffer.\n *\n * @return {CompressedTextureBuffer} A shallow clone of the compressed texture buffer.\n */\n\n\nCompressedTextureBuffer.prototype.clone = function () {\n  return CompressedTextureBuffer.clone(this);\n};\n\nexport default CompressedTextureBuffer;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/CompressedTextureBuffer.js"],"names":["defined","CompressedTextureBuffer","internalFormat","width","height","buffer","_format","_width","_height","_buffer","Object","defineProperties","prototype","get","bufferView","clone","object","undefined"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,cAApB;AAEA;;;;;;;;;;;AAUA,SAASC,uBAAT,CAAiCC,cAAjC,EAAiDC,KAAjD,EAAwDC,MAAxD,EAAgEC,MAAhE,EAAwE;AACtE,OAAKC,OAAL,GAAeJ,cAAf;AACA,OAAKK,MAAL,GAAcJ,KAAd;AACA,OAAKK,OAAL,GAAeJ,MAAf;AACA,OAAKK,OAAL,GAAeJ,MAAf;AACD;;AAEDK,MAAM,CAACC,gBAAP,CAAwBV,uBAAuB,CAACW,SAAhD,EAA2D;AACzD;;;;;;AAMAV,EAAAA,cAAc,EAAE;AACdW,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKP,OAAZ;AACD;AAHa,GAPyC;;AAYzD;;;;;;AAMAH,EAAAA,KAAK,EAAE;AACLU,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKN,MAAZ;AACD;AAHI,GAlBkD;;AAuBzD;;;;;;AAMAH,EAAAA,MAAM,EAAE;AACNS,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKL,OAAZ;AACD;AAHK,GA7BiD;;AAkCzD;;;;;;AAMAM,EAAAA,UAAU,EAAE;AACVD,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKJ,OAAZ;AACD;AAHS;AAxC6C,CAA3D;AA+CA;;;;;;;AAMAR,uBAAuB,CAACc,KAAxB,GAAgC,UAAUC,MAAV,EAAkB;AAChD,MAAI,CAAChB,OAAO,CAACgB,MAAD,CAAZ,EAAsB;AACpB,WAAOC,SAAP;AACD;;AAED,SAAO,IAAIhB,uBAAJ,CACLe,MAAM,CAACV,OADF,EAELU,MAAM,CAACT,MAFF,EAGLS,MAAM,CAACR,OAHF,EAILQ,MAAM,CAACP,OAJF,CAAP;AAMD,CAXD;AAaA;;;;;;;AAKAR,uBAAuB,CAACW,SAAxB,CAAkCG,KAAlC,GAA0C,YAAY;AACpD,SAAOd,uBAAuB,CAACc,KAAxB,CAA8B,IAA9B,CAAP;AACD,CAFD;;AAGA,eAAed,uBAAf","sourcesContent":["import defined from \"./defined.js\";\n\n/**\n * Describes a compressed texture and contains a compressed texture buffer.\n * @alias CompressedTextureBuffer\n * @constructor\n *\n * @param {PixelFormat} internalFormat The pixel format of the compressed texture.\n * @param {Number} width The width of the texture.\n * @param {Number} height The height of the texture.\n * @param {Uint8Array} buffer The compressed texture buffer.\n */\nfunction CompressedTextureBuffer(internalFormat, width, height, buffer) {\n  this._format = internalFormat;\n  this._width = width;\n  this._height = height;\n  this._buffer = buffer;\n}\n\nObject.defineProperties(CompressedTextureBuffer.prototype, {\n  /**\n   * The format of the compressed texture.\n   * @type PixelFormat\n   * @readonly\n   * @memberof CompressedTextureBuffer.prototype\n   */\n  internalFormat: {\n    get: function () {\n      return this._format;\n    },\n  },\n  /**\n   * The width of the texture.\n   * @type Number\n   * @readonly\n   * @memberof CompressedTextureBuffer.prototype\n   */\n  width: {\n    get: function () {\n      return this._width;\n    },\n  },\n  /**\n   * The height of the texture.\n   * @type Number\n   * @readonly\n   * @memberof CompressedTextureBuffer.prototype\n   */\n  height: {\n    get: function () {\n      return this._height;\n    },\n  },\n  /**\n   * The compressed texture buffer.\n   * @type Uint8Array\n   * @readonly\n   * @memberof CompressedTextureBuffer.prototype\n   */\n  bufferView: {\n    get: function () {\n      return this._buffer;\n    },\n  },\n});\n\n/**\n * Creates a shallow clone of a compressed texture buffer.\n *\n * @param {CompressedTextureBuffer} object The compressed texture buffer to be cloned.\n * @return {CompressedTextureBuffer} A shallow clone of the compressed texture buffer.\n */\nCompressedTextureBuffer.clone = function (object) {\n  if (!defined(object)) {\n    return undefined;\n  }\n\n  return new CompressedTextureBuffer(\n    object._format,\n    object._width,\n    object._height,\n    object._buffer\n  );\n};\n\n/**\n * Creates a shallow clone of this compressed texture buffer.\n *\n * @return {CompressedTextureBuffer} A shallow clone of the compressed texture buffer.\n */\nCompressedTextureBuffer.prototype.clone = function () {\n  return CompressedTextureBuffer.clone(this);\n};\nexport default CompressedTextureBuffer;\n"]},"metadata":{},"sourceType":"module"}