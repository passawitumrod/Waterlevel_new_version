{"ast":null,"code":"import DeveloperError from \"./DeveloperError.js\";\nimport QuadraticRealPolynomial from \"./QuadraticRealPolynomial.js\";\n/**\n * Defines functions for 3rd order polynomial functions of one variable with only real coefficients.\n *\n * @exports CubicRealPolynomial\n */\n\nvar CubicRealPolynomial = {};\n/**\n * Provides the discriminant of the cubic equation from the supplied coefficients.\n *\n * @param {Number} a The coefficient of the 3rd order monomial.\n * @param {Number} b The coefficient of the 2nd order monomial.\n * @param {Number} c The coefficient of the 1st order monomial.\n * @param {Number} d The coefficient of the 0th order monomial.\n * @returns {Number} The value of the discriminant.\n */\n\nCubicRealPolynomial.computeDiscriminant = function (a, b, c, d) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n\n  if (typeof d !== \"number\") {\n    throw new DeveloperError(\"d is a required number.\");\n  } //>>includeEnd('debug');\n\n\n  var a2 = a * a;\n  var b2 = b * b;\n  var c2 = c * c;\n  var d2 = d * d;\n  var discriminant = 18.0 * a * b * c * d + b2 * c2 - 27.0 * a2 * d2 - 4.0 * (a * c2 * c + b2 * b * d);\n  return discriminant;\n};\n\nfunction computeRealRoots(a, b, c, d) {\n  var A = a;\n  var B = b / 3.0;\n  var C = c / 3.0;\n  var D = d;\n  var AC = A * C;\n  var BD = B * D;\n  var B2 = B * B;\n  var C2 = C * C;\n  var delta1 = A * C - B2;\n  var delta2 = A * D - B * C;\n  var delta3 = B * D - C2;\n  var discriminant = 4.0 * delta1 * delta3 - delta2 * delta2;\n  var temp;\n  var temp1;\n\n  if (discriminant < 0.0) {\n    var ABar;\n    var CBar;\n    var DBar;\n\n    if (B2 * BD >= AC * C2) {\n      ABar = A;\n      CBar = delta1;\n      DBar = -2.0 * B * delta1 + A * delta2;\n    } else {\n      ABar = D;\n      CBar = delta3;\n      DBar = -D * delta2 + 2.0 * C * delta3;\n    }\n\n    var s = DBar < 0.0 ? -1.0 : 1.0; // This is not Math.Sign()!\n\n    var temp0 = -s * Math.abs(ABar) * Math.sqrt(-discriminant);\n    temp1 = -DBar + temp0;\n    var x = temp1 / 2.0;\n    var p = x < 0.0 ? -Math.pow(-x, 1.0 / 3.0) : Math.pow(x, 1.0 / 3.0);\n    var q = temp1 === temp0 ? -p : -CBar / p;\n    temp = CBar <= 0.0 ? p + q : -DBar / (p * p + q * q + CBar);\n\n    if (B2 * BD >= AC * C2) {\n      return [(temp - B) / A];\n    }\n\n    return [-D / (temp + C)];\n  }\n\n  var CBarA = delta1;\n  var DBarA = -2.0 * B * delta1 + A * delta2;\n  var CBarD = delta3;\n  var DBarD = -D * delta2 + 2.0 * C * delta3;\n  var squareRootOfDiscriminant = Math.sqrt(discriminant);\n  var halfSquareRootOf3 = Math.sqrt(3.0) / 2.0;\n  var theta = Math.abs(Math.atan2(A * squareRootOfDiscriminant, -DBarA) / 3.0);\n  temp = 2.0 * Math.sqrt(-CBarA);\n  var cosine = Math.cos(theta);\n  temp1 = temp * cosine;\n  var temp3 = temp * (-cosine / 2.0 - halfSquareRootOf3 * Math.sin(theta));\n  var numeratorLarge = temp1 + temp3 > 2.0 * B ? temp1 - B : temp3 - B;\n  var denominatorLarge = A;\n  var root1 = numeratorLarge / denominatorLarge;\n  theta = Math.abs(Math.atan2(D * squareRootOfDiscriminant, -DBarD) / 3.0);\n  temp = 2.0 * Math.sqrt(-CBarD);\n  cosine = Math.cos(theta);\n  temp1 = temp * cosine;\n  temp3 = temp * (-cosine / 2.0 - halfSquareRootOf3 * Math.sin(theta));\n  var numeratorSmall = -D;\n  var denominatorSmall = temp1 + temp3 < 2.0 * C ? temp1 + C : temp3 + C;\n  var root3 = numeratorSmall / denominatorSmall;\n  var E = denominatorLarge * denominatorSmall;\n  var F = -numeratorLarge * denominatorSmall - denominatorLarge * numeratorSmall;\n  var G = numeratorLarge * numeratorSmall;\n  var root2 = (C * F - B * G) / (-B * F + C * E);\n\n  if (root1 <= root2) {\n    if (root1 <= root3) {\n      if (root2 <= root3) {\n        return [root1, root2, root3];\n      }\n\n      return [root1, root3, root2];\n    }\n\n    return [root3, root1, root2];\n  }\n\n  if (root1 <= root3) {\n    return [root2, root1, root3];\n  }\n\n  if (root2 <= root3) {\n    return [root2, root3, root1];\n  }\n\n  return [root3, root2, root1];\n}\n/**\n * Provides the real valued roots of the cubic polynomial with the provided coefficients.\n *\n * @param {Number} a The coefficient of the 3rd order monomial.\n * @param {Number} b The coefficient of the 2nd order monomial.\n * @param {Number} c The coefficient of the 1st order monomial.\n * @param {Number} d The coefficient of the 0th order monomial.\n * @returns {Number[]} The real valued roots.\n */\n\n\nCubicRealPolynomial.computeRealRoots = function (a, b, c, d) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n\n  if (typeof d !== \"number\") {\n    throw new DeveloperError(\"d is a required number.\");\n  } //>>includeEnd('debug');\n\n\n  var roots;\n  var ratio;\n\n  if (a === 0.0) {\n    // Quadratic function: b * x^2 + c * x + d = 0.\n    return QuadraticRealPolynomial.computeRealRoots(b, c, d);\n  } else if (b === 0.0) {\n    if (c === 0.0) {\n      if (d === 0.0) {\n        // 3rd order monomial: a * x^3 = 0.\n        return [0.0, 0.0, 0.0];\n      } // a * x^3 + d = 0\n\n\n      ratio = -d / a;\n      var root = ratio < 0.0 ? -Math.pow(-ratio, 1.0 / 3.0) : Math.pow(ratio, 1.0 / 3.0);\n      return [root, root, root];\n    } else if (d === 0.0) {\n      // x * (a * x^2 + c) = 0.\n      roots = QuadraticRealPolynomial.computeRealRoots(a, 0, c); // Return the roots in ascending order.\n\n      if (roots.Length === 0) {\n        return [0.0];\n      }\n\n      return [roots[0], 0.0, roots[1]];\n    } // Deflated cubic polynomial: a * x^3 + c * x + d= 0.\n\n\n    return computeRealRoots(a, 0, c, d);\n  } else if (c === 0.0) {\n    if (d === 0.0) {\n      // x^2 * (a * x + b) = 0.\n      ratio = -b / a;\n\n      if (ratio < 0.0) {\n        return [ratio, 0.0, 0.0];\n      }\n\n      return [0.0, 0.0, ratio];\n    } // a * x^3 + b * x^2 + d = 0.\n\n\n    return computeRealRoots(a, b, 0, d);\n  } else if (d === 0.0) {\n    // x * (a * x^2 + b * x + c) = 0\n    roots = QuadraticRealPolynomial.computeRealRoots(a, b, c); // Return the roots in ascending order.\n\n    if (roots.length === 0) {\n      return [0.0];\n    } else if (roots[1] <= 0.0) {\n      return [roots[0], roots[1], 0.0];\n    } else if (roots[0] >= 0.0) {\n      return [0.0, roots[0], roots[1]];\n    }\n\n    return [roots[0], 0.0, roots[1]];\n  }\n\n  return computeRealRoots(a, b, c, d);\n};\n\nexport default CubicRealPolynomial;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/CubicRealPolynomial.js"],"names":["DeveloperError","QuadraticRealPolynomial","CubicRealPolynomial","computeDiscriminant","a","b","c","d","a2","b2","c2","d2","discriminant","computeRealRoots","A","B","C","D","AC","BD","B2","C2","delta1","delta2","delta3","temp","temp1","ABar","CBar","DBar","s","temp0","Math","abs","sqrt","x","p","pow","q","CBarA","DBarA","CBarD","DBarD","squareRootOfDiscriminant","halfSquareRootOf3","theta","atan2","cosine","cos","temp3","sin","numeratorLarge","denominatorLarge","root1","numeratorSmall","denominatorSmall","root3","E","F","G","root2","roots","ratio","root","Length","length"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,qBAA3B;AACA,OAAOC,uBAAP,MAAoC,8BAApC;AAEA;;;;;;AAKA,IAAIC,mBAAmB,GAAG,EAA1B;AAEA;;;;;;;;;;AASAA,mBAAmB,CAACC,mBAApB,GAA0C,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AAC9D;AACA,MAAI,OAAOH,CAAP,KAAa,QAAjB,EAA2B;AACzB,UAAM,IAAIJ,cAAJ,CAAmB,yBAAnB,CAAN;AACD;;AACD,MAAI,OAAOK,CAAP,KAAa,QAAjB,EAA2B;AACzB,UAAM,IAAIL,cAAJ,CAAmB,yBAAnB,CAAN;AACD;;AACD,MAAI,OAAOM,CAAP,KAAa,QAAjB,EAA2B;AACzB,UAAM,IAAIN,cAAJ,CAAmB,yBAAnB,CAAN;AACD;;AACD,MAAI,OAAOO,CAAP,KAAa,QAAjB,EAA2B;AACzB,UAAM,IAAIP,cAAJ,CAAmB,yBAAnB,CAAN;AACD,GAb6D,CAc9D;;;AAEA,MAAIQ,EAAE,GAAGJ,CAAC,GAAGA,CAAb;AACA,MAAIK,EAAE,GAAGJ,CAAC,GAAGA,CAAb;AACA,MAAIK,EAAE,GAAGJ,CAAC,GAAGA,CAAb;AACA,MAAIK,EAAE,GAAGJ,CAAC,GAAGA,CAAb;AAEA,MAAIK,YAAY,GACd,OAAOR,CAAP,GAAWC,CAAX,GAAeC,CAAf,GAAmBC,CAAnB,GACAE,EAAE,GAAGC,EADL,GAEA,OAAOF,EAAP,GAAYG,EAFZ,GAGA,OAAOP,CAAC,GAAGM,EAAJ,GAASJ,CAAT,GAAaG,EAAE,GAAGJ,CAAL,GAASE,CAA7B,CAJF;AAKA,SAAOK,YAAP;AACD,CA3BD;;AA6BA,SAASC,gBAAT,CAA0BT,CAA1B,EAA6BC,CAA7B,EAAgCC,CAAhC,EAAmCC,CAAnC,EAAsC;AACpC,MAAIO,CAAC,GAAGV,CAAR;AACA,MAAIW,CAAC,GAAGV,CAAC,GAAG,GAAZ;AACA,MAAIW,CAAC,GAAGV,CAAC,GAAG,GAAZ;AACA,MAAIW,CAAC,GAAGV,CAAR;AAEA,MAAIW,EAAE,GAAGJ,CAAC,GAAGE,CAAb;AACA,MAAIG,EAAE,GAAGJ,CAAC,GAAGE,CAAb;AACA,MAAIG,EAAE,GAAGL,CAAC,GAAGA,CAAb;AACA,MAAIM,EAAE,GAAGL,CAAC,GAAGA,CAAb;AACA,MAAIM,MAAM,GAAGR,CAAC,GAAGE,CAAJ,GAAQI,EAArB;AACA,MAAIG,MAAM,GAAGT,CAAC,GAAGG,CAAJ,GAAQF,CAAC,GAAGC,CAAzB;AACA,MAAIQ,MAAM,GAAGT,CAAC,GAAGE,CAAJ,GAAQI,EAArB;AAEA,MAAIT,YAAY,GAAG,MAAMU,MAAN,GAAeE,MAAf,GAAwBD,MAAM,GAAGA,MAApD;AACA,MAAIE,IAAJ;AACA,MAAIC,KAAJ;;AAEA,MAAId,YAAY,GAAG,GAAnB,EAAwB;AACtB,QAAIe,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;;AAEA,QAAIT,EAAE,GAAGD,EAAL,IAAWD,EAAE,GAAGG,EAApB,EAAwB;AACtBM,MAAAA,IAAI,GAAGb,CAAP;AACAc,MAAAA,IAAI,GAAGN,MAAP;AACAO,MAAAA,IAAI,GAAG,CAAC,GAAD,GAAOd,CAAP,GAAWO,MAAX,GAAoBR,CAAC,GAAGS,MAA/B;AACD,KAJD,MAIO;AACLI,MAAAA,IAAI,GAAGV,CAAP;AACAW,MAAAA,IAAI,GAAGJ,MAAP;AACAK,MAAAA,IAAI,GAAG,CAACZ,CAAD,GAAKM,MAAL,GAAc,MAAMP,CAAN,GAAUQ,MAA/B;AACD;;AAED,QAAIM,CAAC,GAAGD,IAAI,GAAG,GAAP,GAAa,CAAC,GAAd,GAAoB,GAA5B,CAfsB,CAeW;;AACjC,QAAIE,KAAK,GAAG,CAACD,CAAD,GAAKE,IAAI,CAACC,GAAL,CAASN,IAAT,CAAL,GAAsBK,IAAI,CAACE,IAAL,CAAU,CAACtB,YAAX,CAAlC;AACAc,IAAAA,KAAK,GAAG,CAACG,IAAD,GAAQE,KAAhB;AAEA,QAAII,CAAC,GAAGT,KAAK,GAAG,GAAhB;AACA,QAAIU,CAAC,GAAGD,CAAC,GAAG,GAAJ,GAAU,CAACH,IAAI,CAACK,GAAL,CAAS,CAACF,CAAV,EAAa,MAAM,GAAnB,CAAX,GAAqCH,IAAI,CAACK,GAAL,CAASF,CAAT,EAAY,MAAM,GAAlB,CAA7C;AACA,QAAIG,CAAC,GAAGZ,KAAK,KAAKK,KAAV,GAAkB,CAACK,CAAnB,GAAuB,CAACR,IAAD,GAAQQ,CAAvC;AAEAX,IAAAA,IAAI,GAAGG,IAAI,IAAI,GAAR,GAAcQ,CAAC,GAAGE,CAAlB,GAAsB,CAACT,IAAD,IAASO,CAAC,GAAGA,CAAJ,GAAQE,CAAC,GAAGA,CAAZ,GAAgBV,IAAzB,CAA7B;;AAEA,QAAIR,EAAE,GAAGD,EAAL,IAAWD,EAAE,GAAGG,EAApB,EAAwB;AACtB,aAAO,CAAC,CAACI,IAAI,GAAGV,CAAR,IAAaD,CAAd,CAAP;AACD;;AAED,WAAO,CAAC,CAACG,CAAD,IAAMQ,IAAI,GAAGT,CAAb,CAAD,CAAP;AACD;;AAED,MAAIuB,KAAK,GAAGjB,MAAZ;AACA,MAAIkB,KAAK,GAAG,CAAC,GAAD,GAAOzB,CAAP,GAAWO,MAAX,GAAoBR,CAAC,GAAGS,MAApC;AAEA,MAAIkB,KAAK,GAAGjB,MAAZ;AACA,MAAIkB,KAAK,GAAG,CAACzB,CAAD,GAAKM,MAAL,GAAc,MAAMP,CAAN,GAAUQ,MAApC;AAEA,MAAImB,wBAAwB,GAAGX,IAAI,CAACE,IAAL,CAAUtB,YAAV,CAA/B;AACA,MAAIgC,iBAAiB,GAAGZ,IAAI,CAACE,IAAL,CAAU,GAAV,IAAiB,GAAzC;AAEA,MAAIW,KAAK,GAAGb,IAAI,CAACC,GAAL,CAASD,IAAI,CAACc,KAAL,CAAWhC,CAAC,GAAG6B,wBAAf,EAAyC,CAACH,KAA1C,IAAmD,GAA5D,CAAZ;AACAf,EAAAA,IAAI,GAAG,MAAMO,IAAI,CAACE,IAAL,CAAU,CAACK,KAAX,CAAb;AACA,MAAIQ,MAAM,GAAGf,IAAI,CAACgB,GAAL,CAASH,KAAT,CAAb;AACAnB,EAAAA,KAAK,GAAGD,IAAI,GAAGsB,MAAf;AACA,MAAIE,KAAK,GAAGxB,IAAI,IAAI,CAACsB,MAAD,GAAU,GAAV,GAAgBH,iBAAiB,GAAGZ,IAAI,CAACkB,GAAL,CAASL,KAAT,CAAxC,CAAhB;AAEA,MAAIM,cAAc,GAAGzB,KAAK,GAAGuB,KAAR,GAAgB,MAAMlC,CAAtB,GAA0BW,KAAK,GAAGX,CAAlC,GAAsCkC,KAAK,GAAGlC,CAAnE;AACA,MAAIqC,gBAAgB,GAAGtC,CAAvB;AAEA,MAAIuC,KAAK,GAAGF,cAAc,GAAGC,gBAA7B;AAEAP,EAAAA,KAAK,GAAGb,IAAI,CAACC,GAAL,CAASD,IAAI,CAACc,KAAL,CAAW7B,CAAC,GAAG0B,wBAAf,EAAyC,CAACD,KAA1C,IAAmD,GAA5D,CAAR;AACAjB,EAAAA,IAAI,GAAG,MAAMO,IAAI,CAACE,IAAL,CAAU,CAACO,KAAX,CAAb;AACAM,EAAAA,MAAM,GAAGf,IAAI,CAACgB,GAAL,CAASH,KAAT,CAAT;AACAnB,EAAAA,KAAK,GAAGD,IAAI,GAAGsB,MAAf;AACAE,EAAAA,KAAK,GAAGxB,IAAI,IAAI,CAACsB,MAAD,GAAU,GAAV,GAAgBH,iBAAiB,GAAGZ,IAAI,CAACkB,GAAL,CAASL,KAAT,CAAxC,CAAZ;AAEA,MAAIS,cAAc,GAAG,CAACrC,CAAtB;AACA,MAAIsC,gBAAgB,GAAG7B,KAAK,GAAGuB,KAAR,GAAgB,MAAMjC,CAAtB,GAA0BU,KAAK,GAAGV,CAAlC,GAAsCiC,KAAK,GAAGjC,CAArE;AAEA,MAAIwC,KAAK,GAAGF,cAAc,GAAGC,gBAA7B;AAEA,MAAIE,CAAC,GAAGL,gBAAgB,GAAGG,gBAA3B;AACA,MAAIG,CAAC,GACH,CAACP,cAAD,GAAkBI,gBAAlB,GAAqCH,gBAAgB,GAAGE,cAD1D;AAEA,MAAIK,CAAC,GAAGR,cAAc,GAAGG,cAAzB;AAEA,MAAIM,KAAK,GAAG,CAAC5C,CAAC,GAAG0C,CAAJ,GAAQ3C,CAAC,GAAG4C,CAAb,KAAmB,CAAC5C,CAAD,GAAK2C,CAAL,GAAS1C,CAAC,GAAGyC,CAAhC,CAAZ;;AAEA,MAAIJ,KAAK,IAAIO,KAAb,EAAoB;AAClB,QAAIP,KAAK,IAAIG,KAAb,EAAoB;AAClB,UAAII,KAAK,IAAIJ,KAAb,EAAoB;AAClB,eAAO,CAACH,KAAD,EAAQO,KAAR,EAAeJ,KAAf,CAAP;AACD;;AACD,aAAO,CAACH,KAAD,EAAQG,KAAR,EAAeI,KAAf,CAAP;AACD;;AACD,WAAO,CAACJ,KAAD,EAAQH,KAAR,EAAeO,KAAf,CAAP;AACD;;AACD,MAAIP,KAAK,IAAIG,KAAb,EAAoB;AAClB,WAAO,CAACI,KAAD,EAAQP,KAAR,EAAeG,KAAf,CAAP;AACD;;AACD,MAAII,KAAK,IAAIJ,KAAb,EAAoB;AAClB,WAAO,CAACI,KAAD,EAAQJ,KAAR,EAAeH,KAAf,CAAP;AACD;;AACD,SAAO,CAACG,KAAD,EAAQI,KAAR,EAAeP,KAAf,CAAP;AACD;AAED;;;;;;;;;;;AASAnD,mBAAmB,CAACW,gBAApB,GAAuC,UAAUT,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AAC3D;AACA,MAAI,OAAOH,CAAP,KAAa,QAAjB,EAA2B;AACzB,UAAM,IAAIJ,cAAJ,CAAmB,yBAAnB,CAAN;AACD;;AACD,MAAI,OAAOK,CAAP,KAAa,QAAjB,EAA2B;AACzB,UAAM,IAAIL,cAAJ,CAAmB,yBAAnB,CAAN;AACD;;AACD,MAAI,OAAOM,CAAP,KAAa,QAAjB,EAA2B;AACzB,UAAM,IAAIN,cAAJ,CAAmB,yBAAnB,CAAN;AACD;;AACD,MAAI,OAAOO,CAAP,KAAa,QAAjB,EAA2B;AACzB,UAAM,IAAIP,cAAJ,CAAmB,yBAAnB,CAAN;AACD,GAb0D,CAc3D;;;AAEA,MAAI6D,KAAJ;AACA,MAAIC,KAAJ;;AACA,MAAI1D,CAAC,KAAK,GAAV,EAAe;AACb;AACA,WAAOH,uBAAuB,CAACY,gBAAxB,CAAyCR,CAAzC,EAA4CC,CAA5C,EAA+CC,CAA/C,CAAP;AACD,GAHD,MAGO,IAAIF,CAAC,KAAK,GAAV,EAAe;AACpB,QAAIC,CAAC,KAAK,GAAV,EAAe;AACb,UAAIC,CAAC,KAAK,GAAV,EAAe;AACb;AACA,eAAO,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAP;AACD,OAJY,CAMb;;;AACAuD,MAAAA,KAAK,GAAG,CAACvD,CAAD,GAAKH,CAAb;AACA,UAAI2D,IAAI,GACND,KAAK,GAAG,GAAR,GAAc,CAAC9B,IAAI,CAACK,GAAL,CAAS,CAACyB,KAAV,EAAiB,MAAM,GAAvB,CAAf,GAA6C9B,IAAI,CAACK,GAAL,CAASyB,KAAT,EAAgB,MAAM,GAAtB,CAD/C;AAEA,aAAO,CAACC,IAAD,EAAOA,IAAP,EAAaA,IAAb,CAAP;AACD,KAXD,MAWO,IAAIxD,CAAC,KAAK,GAAV,EAAe;AACpB;AACAsD,MAAAA,KAAK,GAAG5D,uBAAuB,CAACY,gBAAxB,CAAyCT,CAAzC,EAA4C,CAA5C,EAA+CE,CAA/C,CAAR,CAFoB,CAIpB;;AACA,UAAIuD,KAAK,CAACG,MAAN,KAAiB,CAArB,EAAwB;AACtB,eAAO,CAAC,GAAD,CAAP;AACD;;AACD,aAAO,CAACH,KAAK,CAAC,CAAD,CAAN,EAAW,GAAX,EAAgBA,KAAK,CAAC,CAAD,CAArB,CAAP;AACD,KArBmB,CAuBpB;;;AACA,WAAOhD,gBAAgB,CAACT,CAAD,EAAI,CAAJ,EAAOE,CAAP,EAAUC,CAAV,CAAvB;AACD,GAzBM,MAyBA,IAAID,CAAC,KAAK,GAAV,EAAe;AACpB,QAAIC,CAAC,KAAK,GAAV,EAAe;AACb;AACAuD,MAAAA,KAAK,GAAG,CAACzD,CAAD,GAAKD,CAAb;;AACA,UAAI0D,KAAK,GAAG,GAAZ,EAAiB;AACf,eAAO,CAACA,KAAD,EAAQ,GAAR,EAAa,GAAb,CAAP;AACD;;AACD,aAAO,CAAC,GAAD,EAAM,GAAN,EAAWA,KAAX,CAAP;AACD,KARmB,CASpB;;;AACA,WAAOjD,gBAAgB,CAACT,CAAD,EAAIC,CAAJ,EAAO,CAAP,EAAUE,CAAV,CAAvB;AACD,GAXM,MAWA,IAAIA,CAAC,KAAK,GAAV,EAAe;AACpB;AACAsD,IAAAA,KAAK,GAAG5D,uBAAuB,CAACY,gBAAxB,CAAyCT,CAAzC,EAA4CC,CAA5C,EAA+CC,CAA/C,CAAR,CAFoB,CAIpB;;AACA,QAAIuD,KAAK,CAACI,MAAN,KAAiB,CAArB,EAAwB;AACtB,aAAO,CAAC,GAAD,CAAP;AACD,KAFD,MAEO,IAAIJ,KAAK,CAAC,CAAD,CAAL,IAAY,GAAhB,EAAqB;AAC1B,aAAO,CAACA,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,EAAqB,GAArB,CAAP;AACD,KAFM,MAEA,IAAIA,KAAK,CAAC,CAAD,CAAL,IAAY,GAAhB,EAAqB;AAC1B,aAAO,CAAC,GAAD,EAAMA,KAAK,CAAC,CAAD,CAAX,EAAgBA,KAAK,CAAC,CAAD,CAArB,CAAP;AACD;;AACD,WAAO,CAACA,KAAK,CAAC,CAAD,CAAN,EAAW,GAAX,EAAgBA,KAAK,CAAC,CAAD,CAArB,CAAP;AACD;;AAED,SAAOhD,gBAAgB,CAACT,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,CAAvB;AACD,CAzED;;AA0EA,eAAeL,mBAAf","sourcesContent":["import DeveloperError from \"./DeveloperError.js\";\nimport QuadraticRealPolynomial from \"./QuadraticRealPolynomial.js\";\n\n/**\n * Defines functions for 3rd order polynomial functions of one variable with only real coefficients.\n *\n * @exports CubicRealPolynomial\n */\nvar CubicRealPolynomial = {};\n\n/**\n * Provides the discriminant of the cubic equation from the supplied coefficients.\n *\n * @param {Number} a The coefficient of the 3rd order monomial.\n * @param {Number} b The coefficient of the 2nd order monomial.\n * @param {Number} c The coefficient of the 1st order monomial.\n * @param {Number} d The coefficient of the 0th order monomial.\n * @returns {Number} The value of the discriminant.\n */\nCubicRealPolynomial.computeDiscriminant = function (a, b, c, d) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n  if (typeof d !== \"number\") {\n    throw new DeveloperError(\"d is a required number.\");\n  }\n  //>>includeEnd('debug');\n\n  var a2 = a * a;\n  var b2 = b * b;\n  var c2 = c * c;\n  var d2 = d * d;\n\n  var discriminant =\n    18.0 * a * b * c * d +\n    b2 * c2 -\n    27.0 * a2 * d2 -\n    4.0 * (a * c2 * c + b2 * b * d);\n  return discriminant;\n};\n\nfunction computeRealRoots(a, b, c, d) {\n  var A = a;\n  var B = b / 3.0;\n  var C = c / 3.0;\n  var D = d;\n\n  var AC = A * C;\n  var BD = B * D;\n  var B2 = B * B;\n  var C2 = C * C;\n  var delta1 = A * C - B2;\n  var delta2 = A * D - B * C;\n  var delta3 = B * D - C2;\n\n  var discriminant = 4.0 * delta1 * delta3 - delta2 * delta2;\n  var temp;\n  var temp1;\n\n  if (discriminant < 0.0) {\n    var ABar;\n    var CBar;\n    var DBar;\n\n    if (B2 * BD >= AC * C2) {\n      ABar = A;\n      CBar = delta1;\n      DBar = -2.0 * B * delta1 + A * delta2;\n    } else {\n      ABar = D;\n      CBar = delta3;\n      DBar = -D * delta2 + 2.0 * C * delta3;\n    }\n\n    var s = DBar < 0.0 ? -1.0 : 1.0; // This is not Math.Sign()!\n    var temp0 = -s * Math.abs(ABar) * Math.sqrt(-discriminant);\n    temp1 = -DBar + temp0;\n\n    var x = temp1 / 2.0;\n    var p = x < 0.0 ? -Math.pow(-x, 1.0 / 3.0) : Math.pow(x, 1.0 / 3.0);\n    var q = temp1 === temp0 ? -p : -CBar / p;\n\n    temp = CBar <= 0.0 ? p + q : -DBar / (p * p + q * q + CBar);\n\n    if (B2 * BD >= AC * C2) {\n      return [(temp - B) / A];\n    }\n\n    return [-D / (temp + C)];\n  }\n\n  var CBarA = delta1;\n  var DBarA = -2.0 * B * delta1 + A * delta2;\n\n  var CBarD = delta3;\n  var DBarD = -D * delta2 + 2.0 * C * delta3;\n\n  var squareRootOfDiscriminant = Math.sqrt(discriminant);\n  var halfSquareRootOf3 = Math.sqrt(3.0) / 2.0;\n\n  var theta = Math.abs(Math.atan2(A * squareRootOfDiscriminant, -DBarA) / 3.0);\n  temp = 2.0 * Math.sqrt(-CBarA);\n  var cosine = Math.cos(theta);\n  temp1 = temp * cosine;\n  var temp3 = temp * (-cosine / 2.0 - halfSquareRootOf3 * Math.sin(theta));\n\n  var numeratorLarge = temp1 + temp3 > 2.0 * B ? temp1 - B : temp3 - B;\n  var denominatorLarge = A;\n\n  var root1 = numeratorLarge / denominatorLarge;\n\n  theta = Math.abs(Math.atan2(D * squareRootOfDiscriminant, -DBarD) / 3.0);\n  temp = 2.0 * Math.sqrt(-CBarD);\n  cosine = Math.cos(theta);\n  temp1 = temp * cosine;\n  temp3 = temp * (-cosine / 2.0 - halfSquareRootOf3 * Math.sin(theta));\n\n  var numeratorSmall = -D;\n  var denominatorSmall = temp1 + temp3 < 2.0 * C ? temp1 + C : temp3 + C;\n\n  var root3 = numeratorSmall / denominatorSmall;\n\n  var E = denominatorLarge * denominatorSmall;\n  var F =\n    -numeratorLarge * denominatorSmall - denominatorLarge * numeratorSmall;\n  var G = numeratorLarge * numeratorSmall;\n\n  var root2 = (C * F - B * G) / (-B * F + C * E);\n\n  if (root1 <= root2) {\n    if (root1 <= root3) {\n      if (root2 <= root3) {\n        return [root1, root2, root3];\n      }\n      return [root1, root3, root2];\n    }\n    return [root3, root1, root2];\n  }\n  if (root1 <= root3) {\n    return [root2, root1, root3];\n  }\n  if (root2 <= root3) {\n    return [root2, root3, root1];\n  }\n  return [root3, root2, root1];\n}\n\n/**\n * Provides the real valued roots of the cubic polynomial with the provided coefficients.\n *\n * @param {Number} a The coefficient of the 3rd order monomial.\n * @param {Number} b The coefficient of the 2nd order monomial.\n * @param {Number} c The coefficient of the 1st order monomial.\n * @param {Number} d The coefficient of the 0th order monomial.\n * @returns {Number[]} The real valued roots.\n */\nCubicRealPolynomial.computeRealRoots = function (a, b, c, d) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n  if (typeof d !== \"number\") {\n    throw new DeveloperError(\"d is a required number.\");\n  }\n  //>>includeEnd('debug');\n\n  var roots;\n  var ratio;\n  if (a === 0.0) {\n    // Quadratic function: b * x^2 + c * x + d = 0.\n    return QuadraticRealPolynomial.computeRealRoots(b, c, d);\n  } else if (b === 0.0) {\n    if (c === 0.0) {\n      if (d === 0.0) {\n        // 3rd order monomial: a * x^3 = 0.\n        return [0.0, 0.0, 0.0];\n      }\n\n      // a * x^3 + d = 0\n      ratio = -d / a;\n      var root =\n        ratio < 0.0 ? -Math.pow(-ratio, 1.0 / 3.0) : Math.pow(ratio, 1.0 / 3.0);\n      return [root, root, root];\n    } else if (d === 0.0) {\n      // x * (a * x^2 + c) = 0.\n      roots = QuadraticRealPolynomial.computeRealRoots(a, 0, c);\n\n      // Return the roots in ascending order.\n      if (roots.Length === 0) {\n        return [0.0];\n      }\n      return [roots[0], 0.0, roots[1]];\n    }\n\n    // Deflated cubic polynomial: a * x^3 + c * x + d= 0.\n    return computeRealRoots(a, 0, c, d);\n  } else if (c === 0.0) {\n    if (d === 0.0) {\n      // x^2 * (a * x + b) = 0.\n      ratio = -b / a;\n      if (ratio < 0.0) {\n        return [ratio, 0.0, 0.0];\n      }\n      return [0.0, 0.0, ratio];\n    }\n    // a * x^3 + b * x^2 + d = 0.\n    return computeRealRoots(a, b, 0, d);\n  } else if (d === 0.0) {\n    // x * (a * x^2 + b * x + c) = 0\n    roots = QuadraticRealPolynomial.computeRealRoots(a, b, c);\n\n    // Return the roots in ascending order.\n    if (roots.length === 0) {\n      return [0.0];\n    } else if (roots[1] <= 0.0) {\n      return [roots[0], roots[1], 0.0];\n    } else if (roots[0] >= 0.0) {\n      return [0.0, roots[0], roots[1]];\n    }\n    return [roots[0], 0.0, roots[1]];\n  }\n\n  return computeRealRoots(a, b, c, d);\n};\nexport default CubicRealPolynomial;\n"]},"metadata":{},"sourceType":"module"}