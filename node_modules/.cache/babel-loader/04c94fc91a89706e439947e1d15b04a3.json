{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport ContextLimits from \"./ContextLimits.js\";\nimport PixelDatatype from \"./PixelDatatype.js\";\n\nfunction attachTexture(framebuffer, attachment, texture) {\n  var gl = framebuffer._gl;\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, texture._target, texture._texture, 0);\n}\n\nfunction attachRenderbuffer(framebuffer, attachment, renderbuffer) {\n  var gl = framebuffer._gl;\n  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, renderbuffer._getRenderbuffer());\n}\n/**\n * Creates a framebuffer with optional initial color, depth, and stencil attachments.\n * Framebuffers are used for render-to-texture effects; they allow us to render to\n * textures in one pass, and read from it in a later pass.\n *\n * @param {Object} options The initial framebuffer attachments as shown in the example below. <code>context</code> is required. The possible properties are <code>colorTextures</code>, <code>colorRenderbuffers</code>, <code>depthTexture</code>, <code>depthRenderbuffer</code>, <code>stencilRenderbuffer</code>, <code>depthStencilTexture</code>, and <code>depthStencilRenderbuffer</code>.\n *\n * @exception {DeveloperError} Cannot have both color texture and color renderbuffer attachments.\n * @exception {DeveloperError} Cannot have both a depth texture and depth renderbuffer attachment.\n * @exception {DeveloperError} Cannot have both a depth-stencil texture and depth-stencil renderbuffer attachment.\n * @exception {DeveloperError} Cannot have both a depth and depth-stencil renderbuffer.\n * @exception {DeveloperError} Cannot have both a stencil and depth-stencil renderbuffer.\n * @exception {DeveloperError} Cannot have both a depth and stencil renderbuffer.\n * @exception {DeveloperError} The color-texture pixel-format must be a color format.\n * @exception {DeveloperError} The depth-texture pixel-format must be DEPTH_COMPONENT.\n * @exception {DeveloperError} The depth-stencil-texture pixel-format must be DEPTH_STENCIL.\n * @exception {DeveloperError} The number of color attachments exceeds the number supported.\n * @exception {DeveloperError} The color-texture pixel datatype is HALF_FLOAT and the WebGL implementation does not support the EXT_color_buffer_half_float extension.\n * @exception {DeveloperError} The color-texture pixel datatype is FLOAT and the WebGL implementation does not support the EXT_color_buffer_float or WEBGL_color_buffer_float extensions.\n *\n * @example\n * // Create a framebuffer with color and depth texture attachments.\n * var width = context.canvas.clientWidth;\n * var height = context.canvas.clientHeight;\n * var framebuffer = new Framebuffer({\n *   context : context,\n *   colorTextures : [new Texture({\n *     context : context,\n *     width : width,\n *     height : height,\n *     pixelFormat : PixelFormat.RGBA\n *   })],\n *   depthTexture : new Texture({\n *     context : context,\n *     width : width,\n *     height : height,\n *     pixelFormat : PixelFormat.DEPTH_COMPONENT,\n *     pixelDatatype : PixelDatatype.UNSIGNED_SHORT\n *   })\n * });\n *\n * @private\n * @constructor\n */\n\n\nfunction Framebuffer(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var context = options.context; //>>includeStart('debug', pragmas.debug);\n\n  Check.defined(\"options.context\", context); //>>includeEnd('debug');\n\n  var gl = context._gl;\n  var maximumColorAttachments = ContextLimits.maximumColorAttachments;\n  this._gl = gl;\n  this._framebuffer = gl.createFramebuffer();\n  this._colorTextures = [];\n  this._colorRenderbuffers = [];\n  this._activeColorAttachments = [];\n  this._depthTexture = undefined;\n  this._depthRenderbuffer = undefined;\n  this._stencilRenderbuffer = undefined;\n  this._depthStencilTexture = undefined;\n  this._depthStencilRenderbuffer = undefined;\n  /**\n   * When true, the framebuffer owns its attachments so they will be destroyed when\n   * {@link Framebuffer#destroy} is called or when a new attachment is assigned\n   * to an attachment point.\n   *\n   * @type {Boolean}\n   * @default true\n   *\n   * @see Framebuffer#destroy\n   */\n\n  this.destroyAttachments = defaultValue(options.destroyAttachments, true); // Throw if a texture and renderbuffer are attached to the same point.  This won't\n  // cause a WebGL error (because only one will be attached), but is likely a developer error.\n  //>>includeStart('debug', pragmas.debug);\n\n  if (defined(options.colorTextures) && defined(options.colorRenderbuffers)) {\n    throw new DeveloperError(\"Cannot have both color texture and color renderbuffer attachments.\");\n  }\n\n  if (defined(options.depthTexture) && defined(options.depthRenderbuffer)) {\n    throw new DeveloperError(\"Cannot have both a depth texture and depth renderbuffer attachment.\");\n  }\n\n  if (defined(options.depthStencilTexture) && defined(options.depthStencilRenderbuffer)) {\n    throw new DeveloperError(\"Cannot have both a depth-stencil texture and depth-stencil renderbuffer attachment.\");\n  } //>>includeEnd('debug');\n  // Avoid errors defined in Section 6.5 of the WebGL spec\n\n\n  var depthAttachment = defined(options.depthTexture) || defined(options.depthRenderbuffer);\n  var depthStencilAttachment = defined(options.depthStencilTexture) || defined(options.depthStencilRenderbuffer); //>>includeStart('debug', pragmas.debug);\n\n  if (depthAttachment && depthStencilAttachment) {\n    throw new DeveloperError(\"Cannot have both a depth and depth-stencil attachment.\");\n  }\n\n  if (defined(options.stencilRenderbuffer) && depthStencilAttachment) {\n    throw new DeveloperError(\"Cannot have both a stencil and depth-stencil attachment.\");\n  }\n\n  if (depthAttachment && defined(options.stencilRenderbuffer)) {\n    throw new DeveloperError(\"Cannot have both a depth and stencil attachment.\");\n  } //>>includeEnd('debug');\n  ///////////////////////////////////////////////////////////////////\n\n\n  this._bind();\n\n  var texture;\n  var renderbuffer;\n  var i;\n  var length;\n  var attachmentEnum;\n\n  if (defined(options.colorTextures)) {\n    var textures = options.colorTextures;\n    length = this._colorTextures.length = this._activeColorAttachments.length = textures.length; //>>includeStart('debug', pragmas.debug);\n\n    if (length > maximumColorAttachments) {\n      throw new DeveloperError(\"The number of color attachments exceeds the number supported.\");\n    } //>>includeEnd('debug');\n\n\n    for (i = 0; i < length; ++i) {\n      texture = textures[i]; //>>includeStart('debug', pragmas.debug);\n\n      if (!PixelFormat.isColorFormat(texture.pixelFormat)) {\n        throw new DeveloperError(\"The color-texture pixel-format must be a color format.\");\n      }\n\n      if (texture.pixelDatatype === PixelDatatype.FLOAT && !context.colorBufferFloat) {\n        throw new DeveloperError(\"The color texture pixel datatype is FLOAT and the WebGL implementation does not support the EXT_color_buffer_float or WEBGL_color_buffer_float extensions. See Context.colorBufferFloat.\");\n      }\n\n      if (texture.pixelDatatype === PixelDatatype.HALF_FLOAT && !context.colorBufferHalfFloat) {\n        throw new DeveloperError(\"The color texture pixel datatype is HALF_FLOAT and the WebGL implementation does not support the EXT_color_buffer_half_float extension. See Context.colorBufferHalfFloat.\");\n      } //>>includeEnd('debug');\n\n\n      attachmentEnum = this._gl.COLOR_ATTACHMENT0 + i;\n      attachTexture(this, attachmentEnum, texture);\n      this._activeColorAttachments[i] = attachmentEnum;\n      this._colorTextures[i] = texture;\n    }\n  }\n\n  if (defined(options.colorRenderbuffers)) {\n    var renderbuffers = options.colorRenderbuffers;\n    length = this._colorRenderbuffers.length = this._activeColorAttachments.length = renderbuffers.length; //>>includeStart('debug', pragmas.debug);\n\n    if (length > maximumColorAttachments) {\n      throw new DeveloperError(\"The number of color attachments exceeds the number supported.\");\n    } //>>includeEnd('debug');\n\n\n    for (i = 0; i < length; ++i) {\n      renderbuffer = renderbuffers[i];\n      attachmentEnum = this._gl.COLOR_ATTACHMENT0 + i;\n      attachRenderbuffer(this, attachmentEnum, renderbuffer);\n      this._activeColorAttachments[i] = attachmentEnum;\n      this._colorRenderbuffers[i] = renderbuffer;\n    }\n  }\n\n  if (defined(options.depthTexture)) {\n    texture = options.depthTexture; //>>includeStart('debug', pragmas.debug);\n\n    if (texture.pixelFormat !== PixelFormat.DEPTH_COMPONENT) {\n      throw new DeveloperError(\"The depth-texture pixel-format must be DEPTH_COMPONENT.\");\n    } //>>includeEnd('debug');\n\n\n    attachTexture(this, this._gl.DEPTH_ATTACHMENT, texture);\n    this._depthTexture = texture;\n  }\n\n  if (defined(options.depthRenderbuffer)) {\n    renderbuffer = options.depthRenderbuffer;\n    attachRenderbuffer(this, this._gl.DEPTH_ATTACHMENT, renderbuffer);\n    this._depthRenderbuffer = renderbuffer;\n  }\n\n  if (defined(options.stencilRenderbuffer)) {\n    renderbuffer = options.stencilRenderbuffer;\n    attachRenderbuffer(this, this._gl.STENCIL_ATTACHMENT, renderbuffer);\n    this._stencilRenderbuffer = renderbuffer;\n  }\n\n  if (defined(options.depthStencilTexture)) {\n    texture = options.depthStencilTexture; //>>includeStart('debug', pragmas.debug);\n\n    if (texture.pixelFormat !== PixelFormat.DEPTH_STENCIL) {\n      throw new DeveloperError(\"The depth-stencil pixel-format must be DEPTH_STENCIL.\");\n    } //>>includeEnd('debug');\n\n\n    attachTexture(this, this._gl.DEPTH_STENCIL_ATTACHMENT, texture);\n    this._depthStencilTexture = texture;\n  }\n\n  if (defined(options.depthStencilRenderbuffer)) {\n    renderbuffer = options.depthStencilRenderbuffer;\n    attachRenderbuffer(this, this._gl.DEPTH_STENCIL_ATTACHMENT, renderbuffer);\n    this._depthStencilRenderbuffer = renderbuffer;\n  }\n\n  this._unBind();\n}\n\nObject.defineProperties(Framebuffer.prototype, {\n  /**\n   * The status of the framebuffer. If the status is not WebGLConstants.FRAMEBUFFER_COMPLETE,\n   * a {@link DeveloperError} will be thrown when attempting to render to the framebuffer.\n   * @memberof Framebuffer.prototype\n   * @type {Number}\n   */\n  status: {\n    get: function () {\n      this._bind();\n\n      var status = this._gl.checkFramebufferStatus(this._gl.FRAMEBUFFER);\n\n      this._unBind();\n\n      return status;\n    }\n  },\n  numberOfColorAttachments: {\n    get: function () {\n      return this._activeColorAttachments.length;\n    }\n  },\n  depthTexture: {\n    get: function () {\n      return this._depthTexture;\n    }\n  },\n  depthRenderbuffer: {\n    get: function () {\n      return this._depthRenderbuffer;\n    }\n  },\n  stencilRenderbuffer: {\n    get: function () {\n      return this._stencilRenderbuffer;\n    }\n  },\n  depthStencilTexture: {\n    get: function () {\n      return this._depthStencilTexture;\n    }\n  },\n  depthStencilRenderbuffer: {\n    get: function () {\n      return this._depthStencilRenderbuffer;\n    }\n  },\n\n  /**\n   * True if the framebuffer has a depth attachment.  Depth attachments include\n   * depth and depth-stencil textures, and depth and depth-stencil renderbuffers.  When\n   * rendering to a framebuffer, a depth attachment is required for the depth test to have effect.\n   * @memberof Framebuffer.prototype\n   * @type {Boolean}\n   */\n  hasDepthAttachment: {\n    get: function () {\n      return !!(this.depthTexture || this.depthRenderbuffer || this.depthStencilTexture || this.depthStencilRenderbuffer);\n    }\n  }\n});\n\nFramebuffer.prototype._bind = function () {\n  var gl = this._gl;\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this._framebuffer);\n};\n\nFramebuffer.prototype._unBind = function () {\n  var gl = this._gl;\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n};\n\nFramebuffer.prototype._getActiveColorAttachments = function () {\n  return this._activeColorAttachments;\n};\n\nFramebuffer.prototype.getColorTexture = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(index) || index < 0 || index >= this._colorTextures.length) {\n    throw new DeveloperError(\"index is required, must be greater than or equal to zero and must be less than the number of color attachments.\");\n  } //>>includeEnd('debug');\n\n\n  return this._colorTextures[index];\n};\n\nFramebuffer.prototype.getColorRenderbuffer = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(index) || index < 0 || index >= this._colorRenderbuffers.length) {\n    throw new DeveloperError(\"index is required, must be greater than or equal to zero and must be less than the number of color attachments.\");\n  } //>>includeEnd('debug');\n\n\n  return this._colorRenderbuffers[index];\n};\n\nFramebuffer.prototype.isDestroyed = function () {\n  return false;\n};\n\nFramebuffer.prototype.destroy = function () {\n  if (this.destroyAttachments) {\n    // If the color texture is a cube map face, it is owned by the cube map, and will not be destroyed.\n    var i = 0;\n    var textures = this._colorTextures;\n    var length = textures.length;\n\n    for (; i < length; ++i) {\n      var texture = textures[i];\n\n      if (defined(texture)) {\n        texture.destroy();\n      }\n    }\n\n    var renderbuffers = this._colorRenderbuffers;\n    length = renderbuffers.length;\n\n    for (i = 0; i < length; ++i) {\n      var renderbuffer = renderbuffers[i];\n\n      if (defined(renderbuffer)) {\n        renderbuffer.destroy();\n      }\n    }\n\n    this._depthTexture = this._depthTexture && this._depthTexture.destroy();\n    this._depthRenderbuffer = this._depthRenderbuffer && this._depthRenderbuffer.destroy();\n    this._stencilRenderbuffer = this._stencilRenderbuffer && this._stencilRenderbuffer.destroy();\n    this._depthStencilTexture = this._depthStencilTexture && this._depthStencilTexture.destroy();\n    this._depthStencilRenderbuffer = this._depthStencilRenderbuffer && this._depthStencilRenderbuffer.destroy();\n  }\n\n  this._gl.deleteFramebuffer(this._framebuffer);\n\n  return destroyObject(this);\n};\n\nexport default Framebuffer;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Renderer/Framebuffer.js"],"names":["Check","defaultValue","defined","destroyObject","DeveloperError","PixelFormat","ContextLimits","PixelDatatype","attachTexture","framebuffer","attachment","texture","gl","_gl","framebufferTexture2D","FRAMEBUFFER","_target","_texture","attachRenderbuffer","renderbuffer","framebufferRenderbuffer","RENDERBUFFER","_getRenderbuffer","Framebuffer","options","EMPTY_OBJECT","context","maximumColorAttachments","_framebuffer","createFramebuffer","_colorTextures","_colorRenderbuffers","_activeColorAttachments","_depthTexture","undefined","_depthRenderbuffer","_stencilRenderbuffer","_depthStencilTexture","_depthStencilRenderbuffer","destroyAttachments","colorTextures","colorRenderbuffers","depthTexture","depthRenderbuffer","depthStencilTexture","depthStencilRenderbuffer","depthAttachment","depthStencilAttachment","stencilRenderbuffer","_bind","i","length","attachmentEnum","textures","isColorFormat","pixelFormat","pixelDatatype","FLOAT","colorBufferFloat","HALF_FLOAT","colorBufferHalfFloat","COLOR_ATTACHMENT0","renderbuffers","DEPTH_COMPONENT","DEPTH_ATTACHMENT","STENCIL_ATTACHMENT","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","_unBind","Object","defineProperties","prototype","status","get","checkFramebufferStatus","numberOfColorAttachments","hasDepthAttachment","bindFramebuffer","_getActiveColorAttachments","getColorTexture","index","getColorRenderbuffer","isDestroyed","destroy","deleteFramebuffer"],"mappings":"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","sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport ContextLimits from \"./ContextLimits.js\";\nimport PixelDatatype from \"./PixelDatatype.js\";\n\nfunction attachTexture(framebuffer, attachment, texture) {\n  var gl = framebuffer._gl;\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    attachment,\n    texture._target,\n    texture._texture,\n    0\n  );\n}\n\nfunction attachRenderbuffer(framebuffer, attachment, renderbuffer) {\n  var gl = framebuffer._gl;\n  gl.framebufferRenderbuffer(\n    gl.FRAMEBUFFER,\n    attachment,\n    gl.RENDERBUFFER,\n    renderbuffer._getRenderbuffer()\n  );\n}\n\n/**\n * Creates a framebuffer with optional initial color, depth, and stencil attachments.\n * Framebuffers are used for render-to-texture effects; they allow us to render to\n * textures in one pass, and read from it in a later pass.\n *\n * @param {Object} options The initial framebuffer attachments as shown in the example below. <code>context</code> is required. The possible properties are <code>colorTextures</code>, <code>colorRenderbuffers</code>, <code>depthTexture</code>, <code>depthRenderbuffer</code>, <code>stencilRenderbuffer</code>, <code>depthStencilTexture</code>, and <code>depthStencilRenderbuffer</code>.\n *\n * @exception {DeveloperError} Cannot have both color texture and color renderbuffer attachments.\n * @exception {DeveloperError} Cannot have both a depth texture and depth renderbuffer attachment.\n * @exception {DeveloperError} Cannot have both a depth-stencil texture and depth-stencil renderbuffer attachment.\n * @exception {DeveloperError} Cannot have both a depth and depth-stencil renderbuffer.\n * @exception {DeveloperError} Cannot have both a stencil and depth-stencil renderbuffer.\n * @exception {DeveloperError} Cannot have both a depth and stencil renderbuffer.\n * @exception {DeveloperError} The color-texture pixel-format must be a color format.\n * @exception {DeveloperError} The depth-texture pixel-format must be DEPTH_COMPONENT.\n * @exception {DeveloperError} The depth-stencil-texture pixel-format must be DEPTH_STENCIL.\n * @exception {DeveloperError} The number of color attachments exceeds the number supported.\n * @exception {DeveloperError} The color-texture pixel datatype is HALF_FLOAT and the WebGL implementation does not support the EXT_color_buffer_half_float extension.\n * @exception {DeveloperError} The color-texture pixel datatype is FLOAT and the WebGL implementation does not support the EXT_color_buffer_float or WEBGL_color_buffer_float extensions.\n *\n * @example\n * // Create a framebuffer with color and depth texture attachments.\n * var width = context.canvas.clientWidth;\n * var height = context.canvas.clientHeight;\n * var framebuffer = new Framebuffer({\n *   context : context,\n *   colorTextures : [new Texture({\n *     context : context,\n *     width : width,\n *     height : height,\n *     pixelFormat : PixelFormat.RGBA\n *   })],\n *   depthTexture : new Texture({\n *     context : context,\n *     width : width,\n *     height : height,\n *     pixelFormat : PixelFormat.DEPTH_COMPONENT,\n *     pixelDatatype : PixelDatatype.UNSIGNED_SHORT\n *   })\n * });\n *\n * @private\n * @constructor\n */\nfunction Framebuffer(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var context = options.context;\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.context\", context);\n  //>>includeEnd('debug');\n\n  var gl = context._gl;\n  var maximumColorAttachments = ContextLimits.maximumColorAttachments;\n\n  this._gl = gl;\n  this._framebuffer = gl.createFramebuffer();\n\n  this._colorTextures = [];\n  this._colorRenderbuffers = [];\n  this._activeColorAttachments = [];\n\n  this._depthTexture = undefined;\n  this._depthRenderbuffer = undefined;\n  this._stencilRenderbuffer = undefined;\n  this._depthStencilTexture = undefined;\n  this._depthStencilRenderbuffer = undefined;\n\n  /**\n   * When true, the framebuffer owns its attachments so they will be destroyed when\n   * {@link Framebuffer#destroy} is called or when a new attachment is assigned\n   * to an attachment point.\n   *\n   * @type {Boolean}\n   * @default true\n   *\n   * @see Framebuffer#destroy\n   */\n  this.destroyAttachments = defaultValue(options.destroyAttachments, true);\n\n  // Throw if a texture and renderbuffer are attached to the same point.  This won't\n  // cause a WebGL error (because only one will be attached), but is likely a developer error.\n\n  //>>includeStart('debug', pragmas.debug);\n  if (defined(options.colorTextures) && defined(options.colorRenderbuffers)) {\n    throw new DeveloperError(\n      \"Cannot have both color texture and color renderbuffer attachments.\"\n    );\n  }\n  if (defined(options.depthTexture) && defined(options.depthRenderbuffer)) {\n    throw new DeveloperError(\n      \"Cannot have both a depth texture and depth renderbuffer attachment.\"\n    );\n  }\n  if (\n    defined(options.depthStencilTexture) &&\n    defined(options.depthStencilRenderbuffer)\n  ) {\n    throw new DeveloperError(\n      \"Cannot have both a depth-stencil texture and depth-stencil renderbuffer attachment.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  // Avoid errors defined in Section 6.5 of the WebGL spec\n  var depthAttachment =\n    defined(options.depthTexture) || defined(options.depthRenderbuffer);\n  var depthStencilAttachment =\n    defined(options.depthStencilTexture) ||\n    defined(options.depthStencilRenderbuffer);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (depthAttachment && depthStencilAttachment) {\n    throw new DeveloperError(\n      \"Cannot have both a depth and depth-stencil attachment.\"\n    );\n  }\n  if (defined(options.stencilRenderbuffer) && depthStencilAttachment) {\n    throw new DeveloperError(\n      \"Cannot have both a stencil and depth-stencil attachment.\"\n    );\n  }\n  if (depthAttachment && defined(options.stencilRenderbuffer)) {\n    throw new DeveloperError(\n      \"Cannot have both a depth and stencil attachment.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  ///////////////////////////////////////////////////////////////////\n\n  this._bind();\n\n  var texture;\n  var renderbuffer;\n  var i;\n  var length;\n  var attachmentEnum;\n\n  if (defined(options.colorTextures)) {\n    var textures = options.colorTextures;\n    length = this._colorTextures.length = this._activeColorAttachments.length =\n      textures.length;\n\n    //>>includeStart('debug', pragmas.debug);\n    if (length > maximumColorAttachments) {\n      throw new DeveloperError(\n        \"The number of color attachments exceeds the number supported.\"\n      );\n    }\n    //>>includeEnd('debug');\n\n    for (i = 0; i < length; ++i) {\n      texture = textures[i];\n\n      //>>includeStart('debug', pragmas.debug);\n      if (!PixelFormat.isColorFormat(texture.pixelFormat)) {\n        throw new DeveloperError(\n          \"The color-texture pixel-format must be a color format.\"\n        );\n      }\n      if (\n        texture.pixelDatatype === PixelDatatype.FLOAT &&\n        !context.colorBufferFloat\n      ) {\n        throw new DeveloperError(\n          \"The color texture pixel datatype is FLOAT and the WebGL implementation does not support the EXT_color_buffer_float or WEBGL_color_buffer_float extensions. See Context.colorBufferFloat.\"\n        );\n      }\n      if (\n        texture.pixelDatatype === PixelDatatype.HALF_FLOAT &&\n        !context.colorBufferHalfFloat\n      ) {\n        throw new DeveloperError(\n          \"The color texture pixel datatype is HALF_FLOAT and the WebGL implementation does not support the EXT_color_buffer_half_float extension. See Context.colorBufferHalfFloat.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      attachmentEnum = this._gl.COLOR_ATTACHMENT0 + i;\n      attachTexture(this, attachmentEnum, texture);\n      this._activeColorAttachments[i] = attachmentEnum;\n      this._colorTextures[i] = texture;\n    }\n  }\n\n  if (defined(options.colorRenderbuffers)) {\n    var renderbuffers = options.colorRenderbuffers;\n    length = this._colorRenderbuffers.length = this._activeColorAttachments.length =\n      renderbuffers.length;\n\n    //>>includeStart('debug', pragmas.debug);\n    if (length > maximumColorAttachments) {\n      throw new DeveloperError(\n        \"The number of color attachments exceeds the number supported.\"\n      );\n    }\n    //>>includeEnd('debug');\n\n    for (i = 0; i < length; ++i) {\n      renderbuffer = renderbuffers[i];\n      attachmentEnum = this._gl.COLOR_ATTACHMENT0 + i;\n      attachRenderbuffer(this, attachmentEnum, renderbuffer);\n      this._activeColorAttachments[i] = attachmentEnum;\n      this._colorRenderbuffers[i] = renderbuffer;\n    }\n  }\n\n  if (defined(options.depthTexture)) {\n    texture = options.depthTexture;\n\n    //>>includeStart('debug', pragmas.debug);\n    if (texture.pixelFormat !== PixelFormat.DEPTH_COMPONENT) {\n      throw new DeveloperError(\n        \"The depth-texture pixel-format must be DEPTH_COMPONENT.\"\n      );\n    }\n    //>>includeEnd('debug');\n\n    attachTexture(this, this._gl.DEPTH_ATTACHMENT, texture);\n    this._depthTexture = texture;\n  }\n\n  if (defined(options.depthRenderbuffer)) {\n    renderbuffer = options.depthRenderbuffer;\n    attachRenderbuffer(this, this._gl.DEPTH_ATTACHMENT, renderbuffer);\n    this._depthRenderbuffer = renderbuffer;\n  }\n\n  if (defined(options.stencilRenderbuffer)) {\n    renderbuffer = options.stencilRenderbuffer;\n    attachRenderbuffer(this, this._gl.STENCIL_ATTACHMENT, renderbuffer);\n    this._stencilRenderbuffer = renderbuffer;\n  }\n\n  if (defined(options.depthStencilTexture)) {\n    texture = options.depthStencilTexture;\n\n    //>>includeStart('debug', pragmas.debug);\n    if (texture.pixelFormat !== PixelFormat.DEPTH_STENCIL) {\n      throw new DeveloperError(\n        \"The depth-stencil pixel-format must be DEPTH_STENCIL.\"\n      );\n    }\n    //>>includeEnd('debug');\n\n    attachTexture(this, this._gl.DEPTH_STENCIL_ATTACHMENT, texture);\n    this._depthStencilTexture = texture;\n  }\n\n  if (defined(options.depthStencilRenderbuffer)) {\n    renderbuffer = options.depthStencilRenderbuffer;\n    attachRenderbuffer(this, this._gl.DEPTH_STENCIL_ATTACHMENT, renderbuffer);\n    this._depthStencilRenderbuffer = renderbuffer;\n  }\n\n  this._unBind();\n}\n\nObject.defineProperties(Framebuffer.prototype, {\n  /**\n   * The status of the framebuffer. If the status is not WebGLConstants.FRAMEBUFFER_COMPLETE,\n   * a {@link DeveloperError} will be thrown when attempting to render to the framebuffer.\n   * @memberof Framebuffer.prototype\n   * @type {Number}\n   */\n  status: {\n    get: function () {\n      this._bind();\n      var status = this._gl.checkFramebufferStatus(this._gl.FRAMEBUFFER);\n      this._unBind();\n      return status;\n    },\n  },\n  numberOfColorAttachments: {\n    get: function () {\n      return this._activeColorAttachments.length;\n    },\n  },\n  depthTexture: {\n    get: function () {\n      return this._depthTexture;\n    },\n  },\n  depthRenderbuffer: {\n    get: function () {\n      return this._depthRenderbuffer;\n    },\n  },\n  stencilRenderbuffer: {\n    get: function () {\n      return this._stencilRenderbuffer;\n    },\n  },\n  depthStencilTexture: {\n    get: function () {\n      return this._depthStencilTexture;\n    },\n  },\n  depthStencilRenderbuffer: {\n    get: function () {\n      return this._depthStencilRenderbuffer;\n    },\n  },\n\n  /**\n   * True if the framebuffer has a depth attachment.  Depth attachments include\n   * depth and depth-stencil textures, and depth and depth-stencil renderbuffers.  When\n   * rendering to a framebuffer, a depth attachment is required for the depth test to have effect.\n   * @memberof Framebuffer.prototype\n   * @type {Boolean}\n   */\n  hasDepthAttachment: {\n    get: function () {\n      return !!(\n        this.depthTexture ||\n        this.depthRenderbuffer ||\n        this.depthStencilTexture ||\n        this.depthStencilRenderbuffer\n      );\n    },\n  },\n});\n\nFramebuffer.prototype._bind = function () {\n  var gl = this._gl;\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this._framebuffer);\n};\n\nFramebuffer.prototype._unBind = function () {\n  var gl = this._gl;\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n};\n\nFramebuffer.prototype._getActiveColorAttachments = function () {\n  return this._activeColorAttachments;\n};\n\nFramebuffer.prototype.getColorTexture = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(index) || index < 0 || index >= this._colorTextures.length) {\n    throw new DeveloperError(\n      \"index is required, must be greater than or equal to zero and must be less than the number of color attachments.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  return this._colorTextures[index];\n};\n\nFramebuffer.prototype.getColorRenderbuffer = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    !defined(index) ||\n    index < 0 ||\n    index >= this._colorRenderbuffers.length\n  ) {\n    throw new DeveloperError(\n      \"index is required, must be greater than or equal to zero and must be less than the number of color attachments.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  return this._colorRenderbuffers[index];\n};\n\nFramebuffer.prototype.isDestroyed = function () {\n  return false;\n};\n\nFramebuffer.prototype.destroy = function () {\n  if (this.destroyAttachments) {\n    // If the color texture is a cube map face, it is owned by the cube map, and will not be destroyed.\n    var i = 0;\n    var textures = this._colorTextures;\n    var length = textures.length;\n    for (; i < length; ++i) {\n      var texture = textures[i];\n      if (defined(texture)) {\n        texture.destroy();\n      }\n    }\n\n    var renderbuffers = this._colorRenderbuffers;\n    length = renderbuffers.length;\n    for (i = 0; i < length; ++i) {\n      var renderbuffer = renderbuffers[i];\n      if (defined(renderbuffer)) {\n        renderbuffer.destroy();\n      }\n    }\n\n    this._depthTexture = this._depthTexture && this._depthTexture.destroy();\n    this._depthRenderbuffer =\n      this._depthRenderbuffer && this._depthRenderbuffer.destroy();\n    this._stencilRenderbuffer =\n      this._stencilRenderbuffer && this._stencilRenderbuffer.destroy();\n    this._depthStencilTexture =\n      this._depthStencilTexture && this._depthStencilTexture.destroy();\n    this._depthStencilRenderbuffer =\n      this._depthStencilRenderbuffer &&\n      this._depthStencilRenderbuffer.destroy();\n  }\n\n  this._gl.deleteFramebuffer(this._framebuffer);\n  return destroyObject(this);\n};\nexport default Framebuffer;\n"]},"metadata":{},"sourceType":"module"}