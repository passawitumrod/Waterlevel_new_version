{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport JulianDate from \"./JulianDate.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport TimeConstants from \"./TimeConstants.js\";\nimport TimeStandard from \"./TimeStandard.js\";\n/**\n * Contains functions for finding the Cartesian coordinates of the sun and the moon in the\n * Earth-centered inertial frame.\n *\n * @exports Simon1994PlanetaryPositions\n */\n\nvar Simon1994PlanetaryPositions = {};\n\nfunction computeTdbMinusTtSpice(daysSinceJ2000InTerrestrialTime) {\n  /* STK Comments ------------------------------------------------------\n   * This function uses constants designed to be consistent with\n   * the SPICE Toolkit from JPL version N0051 (unitim.c)\n   * M0 = 6.239996\n   * M0Dot = 1.99096871e-7 rad/s = 0.01720197 rad/d\n   * EARTH_ECC = 1.671e-2\n   * TDB_AMPL = 1.657e-3 secs\n   *--------------------------------------------------------------------*/\n  //* Values taken as specified in STK Comments except: 0.01720197 rad/day = 1.99096871e-7 rad/sec\n  //* Here we use the more precise value taken from the SPICE value 1.99096871e-7 rad/sec converted to rad/day\n  //* All other constants are consistent with the SPICE implementation of the TDB conversion\n  //* except where we treat the independent time parameter to be in TT instead of TDB.\n  //* This is an approximation made to facilitate performance due to the higher prevalance of\n  //* the TT2TDB conversion over TDB2TT in order to avoid having to iterate when converting to TDB for the JPL ephemeris.\n  //* Days are used instead of seconds to provide a slight improvement in numerical precision.\n  //* For more information see:\n  //* http://www.cv.nrao.edu/~rfisher/Ephemerides/times.html#TDB\n  //* ftp://ssd.jpl.nasa.gov/pub/eph/planets/ioms/ExplSupplChap8.pdf\n  var g = 6.239996 + 0.0172019696544 * daysSinceJ2000InTerrestrialTime;\n  return 1.657e-3 * Math.sin(g + 1.671e-2 * Math.sin(g));\n}\n\nvar TdtMinusTai = 32.184;\nvar J2000d = 2451545;\n\nfunction taiToTdb(date, result) {\n  //Converts TAI to TT\n  result = JulianDate.addSeconds(date, TdtMinusTai, result); //Converts TT to TDB\n\n  var days = JulianDate.totalDays(result) - J2000d;\n  result = JulianDate.addSeconds(result, computeTdbMinusTtSpice(days), result);\n  return result;\n}\n\nvar epoch = new JulianDate(2451545, 0, TimeStandard.TAI); //Actually TDB (not TAI)\n\nvar MetersPerKilometer = 1000.0;\nvar RadiansPerDegree = CesiumMath.RADIANS_PER_DEGREE;\nvar RadiansPerArcSecond = CesiumMath.RADIANS_PER_ARCSECOND;\nvar MetersPerAstronomicalUnit = 1.4959787e11; // IAU 1976 value\n\nvar perifocalToEquatorial = new Matrix3();\n\nfunction elementsToCartesian(semimajorAxis, eccentricity, inclination, longitudeOfPerigee, longitudeOfNode, meanLongitude, result) {\n  if (inclination < 0.0) {\n    inclination = -inclination;\n    longitudeOfNode += CesiumMath.PI;\n  } //>>includeStart('debug', pragmas.debug);\n\n\n  if (inclination < 0 || inclination > CesiumMath.PI) {\n    throw new DeveloperError(\"The inclination is out of range. Inclination must be greater than or equal to zero and less than or equal to Pi radians.\");\n  } //>>includeEnd('debug')\n\n\n  var radiusOfPeriapsis = semimajorAxis * (1.0 - eccentricity);\n  var argumentOfPeriapsis = longitudeOfPerigee - longitudeOfNode;\n  var rightAscensionOfAscendingNode = longitudeOfNode;\n  var trueAnomaly = meanAnomalyToTrueAnomaly(meanLongitude - longitudeOfPerigee, eccentricity);\n  var type = chooseOrbit(eccentricity, 0.0); //>>includeStart('debug', pragmas.debug);\n\n  if (type === \"Hyperbolic\" && Math.abs(CesiumMath.negativePiToPi(trueAnomaly)) >= Math.acos(-1.0 / eccentricity)) {\n    throw new DeveloperError(\"The true anomaly of the hyperbolic orbit lies outside of the bounds of the hyperbola.\");\n  } //>>includeEnd('debug')\n\n\n  perifocalToCartesianMatrix(argumentOfPeriapsis, inclination, rightAscensionOfAscendingNode, perifocalToEquatorial);\n  var semilatus = radiusOfPeriapsis * (1.0 + eccentricity);\n  var costheta = Math.cos(trueAnomaly);\n  var sintheta = Math.sin(trueAnomaly);\n  var denom = 1.0 + eccentricity * costheta; //>>includeStart('debug', pragmas.debug);\n\n  if (denom <= CesiumMath.Epsilon10) {\n    throw new DeveloperError(\"elements cannot be converted to cartesian\");\n  } //>>includeEnd('debug')\n\n\n  var radius = semilatus / denom;\n\n  if (!defined(result)) {\n    result = new Cartesian3(radius * costheta, radius * sintheta, 0.0);\n  } else {\n    result.x = radius * costheta;\n    result.y = radius * sintheta;\n    result.z = 0.0;\n  }\n\n  return Matrix3.multiplyByVector(perifocalToEquatorial, result, result);\n}\n\nfunction chooseOrbit(eccentricity, tolerance) {\n  //>>includeStart('debug', pragmas.debug);\n  if (eccentricity < 0) {\n    throw new DeveloperError(\"eccentricity cannot be negative.\");\n  } //>>includeEnd('debug')\n\n\n  if (eccentricity <= tolerance) {\n    return \"Circular\";\n  } else if (eccentricity < 1.0 - tolerance) {\n    return \"Elliptical\";\n  } else if (eccentricity <= 1.0 + tolerance) {\n    return \"Parabolic\";\n  }\n\n  return \"Hyperbolic\";\n} // Calculates the true anomaly given the mean anomaly and the eccentricity.\n\n\nfunction meanAnomalyToTrueAnomaly(meanAnomaly, eccentricity) {\n  //>>includeStart('debug', pragmas.debug);\n  if (eccentricity < 0.0 || eccentricity >= 1.0) {\n    throw new DeveloperError(\"eccentricity out of range.\");\n  } //>>includeEnd('debug')\n\n\n  var eccentricAnomaly = meanAnomalyToEccentricAnomaly(meanAnomaly, eccentricity);\n  return eccentricAnomalyToTrueAnomaly(eccentricAnomaly, eccentricity);\n}\n\nvar maxIterationCount = 50;\nvar keplerEqConvergence = CesiumMath.EPSILON8; // Calculates the eccentric anomaly given the mean anomaly and the eccentricity.\n\nfunction meanAnomalyToEccentricAnomaly(meanAnomaly, eccentricity) {\n  //>>includeStart('debug', pragmas.debug);\n  if (eccentricity < 0.0 || eccentricity >= 1.0) {\n    throw new DeveloperError(\"eccentricity out of range.\");\n  } //>>includeEnd('debug')\n\n\n  var revs = Math.floor(meanAnomaly / CesiumMath.TWO_PI); // Find angle in current revolution\n\n  meanAnomaly -= revs * CesiumMath.TWO_PI; // calculate starting value for iteration sequence\n\n  var iterationValue = meanAnomaly + eccentricity * Math.sin(meanAnomaly) / (1.0 - Math.sin(meanAnomaly + eccentricity) + Math.sin(meanAnomaly)); // Perform Newton-Raphson iteration on Kepler's equation\n\n  var eccentricAnomaly = Number.MAX_VALUE;\n  var count;\n\n  for (count = 0; count < maxIterationCount && Math.abs(eccentricAnomaly - iterationValue) > keplerEqConvergence; ++count) {\n    eccentricAnomaly = iterationValue;\n    var NRfunction = eccentricAnomaly - eccentricity * Math.sin(eccentricAnomaly) - meanAnomaly;\n    var dNRfunction = 1 - eccentricity * Math.cos(eccentricAnomaly);\n    iterationValue = eccentricAnomaly - NRfunction / dNRfunction;\n  } //>>includeStart('debug', pragmas.debug);\n\n\n  if (count >= maxIterationCount) {\n    throw new DeveloperError(\"Kepler equation did not converge\"); // STK Components uses a numerical method to find the eccentric anomaly in the case that Kepler's\n    // equation does not converge. We don't expect that to ever be necessary for the reasonable orbits used here.\n  } //>>includeEnd('debug')\n\n\n  eccentricAnomaly = iterationValue + revs * CesiumMath.TWO_PI;\n  return eccentricAnomaly;\n} // Calculates the true anomaly given the eccentric anomaly and the eccentricity.\n\n\nfunction eccentricAnomalyToTrueAnomaly(eccentricAnomaly, eccentricity) {\n  //>>includeStart('debug', pragmas.debug);\n  if (eccentricity < 0.0 || eccentricity >= 1.0) {\n    throw new DeveloperError(\"eccentricity out of range.\");\n  } //>>includeEnd('debug')\n  // Calculate the number of previous revolutions\n\n\n  var revs = Math.floor(eccentricAnomaly / CesiumMath.TWO_PI); // Find angle in current revolution\n\n  eccentricAnomaly -= revs * CesiumMath.TWO_PI; // Calculate true anomaly from eccentric anomaly\n\n  var trueAnomalyX = Math.cos(eccentricAnomaly) - eccentricity;\n  var trueAnomalyY = Math.sin(eccentricAnomaly) * Math.sqrt(1 - eccentricity * eccentricity);\n  var trueAnomaly = Math.atan2(trueAnomalyY, trueAnomalyX); // Ensure the correct quadrant\n\n  trueAnomaly = CesiumMath.zeroToTwoPi(trueAnomaly);\n\n  if (eccentricAnomaly < 0) {\n    trueAnomaly -= CesiumMath.TWO_PI;\n  } // Add on previous revolutions\n\n\n  trueAnomaly += revs * CesiumMath.TWO_PI;\n  return trueAnomaly;\n} // Calculates the transformation matrix to convert from the perifocal (PQW) coordinate\n// system to inertial cartesian coordinates.\n\n\nfunction perifocalToCartesianMatrix(argumentOfPeriapsis, inclination, rightAscension, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (inclination < 0 || inclination > CesiumMath.PI) {\n    throw new DeveloperError(\"inclination out of range\");\n  } //>>includeEnd('debug')\n\n\n  var cosap = Math.cos(argumentOfPeriapsis);\n  var sinap = Math.sin(argumentOfPeriapsis);\n  var cosi = Math.cos(inclination);\n  var sini = Math.sin(inclination);\n  var cosraan = Math.cos(rightAscension);\n  var sinraan = Math.sin(rightAscension);\n\n  if (!defined(result)) {\n    result = new Matrix3(cosraan * cosap - sinraan * sinap * cosi, -cosraan * sinap - sinraan * cosap * cosi, sinraan * sini, sinraan * cosap + cosraan * sinap * cosi, -sinraan * sinap + cosraan * cosap * cosi, -cosraan * sini, sinap * sini, cosap * sini, cosi);\n  } else {\n    result[0] = cosraan * cosap - sinraan * sinap * cosi;\n    result[1] = sinraan * cosap + cosraan * sinap * cosi;\n    result[2] = sinap * sini;\n    result[3] = -cosraan * sinap - sinraan * cosap * cosi;\n    result[4] = -sinraan * sinap + cosraan * cosap * cosi;\n    result[5] = cosap * sini;\n    result[6] = sinraan * sini;\n    result[7] = -cosraan * sini;\n    result[8] = cosi;\n  }\n\n  return result;\n} // From section 5.8\n\n\nvar semiMajorAxis0 = 1.0000010178 * MetersPerAstronomicalUnit;\nvar meanLongitude0 = 100.46645683 * RadiansPerDegree;\nvar meanLongitude1 = 1295977422.83429 * RadiansPerArcSecond; // From table 6\n\nvar p1u = 16002;\nvar p2u = 21863;\nvar p3u = 32004;\nvar p4u = 10931;\nvar p5u = 14529;\nvar p6u = 16368;\nvar p7u = 15318;\nvar p8u = 32794;\nvar Ca1 = 64 * 1e-7 * MetersPerAstronomicalUnit;\nvar Ca2 = -152 * 1e-7 * MetersPerAstronomicalUnit;\nvar Ca3 = 62 * 1e-7 * MetersPerAstronomicalUnit;\nvar Ca4 = -8 * 1e-7 * MetersPerAstronomicalUnit;\nvar Ca5 = 32 * 1e-7 * MetersPerAstronomicalUnit;\nvar Ca6 = -41 * 1e-7 * MetersPerAstronomicalUnit;\nvar Ca7 = 19 * 1e-7 * MetersPerAstronomicalUnit;\nvar Ca8 = -11 * 1e-7 * MetersPerAstronomicalUnit;\nvar Sa1 = -150 * 1e-7 * MetersPerAstronomicalUnit;\nvar Sa2 = -46 * 1e-7 * MetersPerAstronomicalUnit;\nvar Sa3 = 68 * 1e-7 * MetersPerAstronomicalUnit;\nvar Sa4 = 54 * 1e-7 * MetersPerAstronomicalUnit;\nvar Sa5 = 14 * 1e-7 * MetersPerAstronomicalUnit;\nvar Sa6 = 24 * 1e-7 * MetersPerAstronomicalUnit;\nvar Sa7 = -28 * 1e-7 * MetersPerAstronomicalUnit;\nvar Sa8 = 22 * 1e-7 * MetersPerAstronomicalUnit;\nvar q1u = 10;\nvar q2u = 16002;\nvar q3u = 21863;\nvar q4u = 10931;\nvar q5u = 1473;\nvar q6u = 32004;\nvar q7u = 4387;\nvar q8u = 73;\nvar Cl1 = -325 * 1e-7;\nvar Cl2 = -322 * 1e-7;\nvar Cl3 = -79 * 1e-7;\nvar Cl4 = 232 * 1e-7;\nvar Cl5 = -52 * 1e-7;\nvar Cl6 = 97 * 1e-7;\nvar Cl7 = 55 * 1e-7;\nvar Cl8 = -41 * 1e-7;\nvar Sl1 = -105 * 1e-7;\nvar Sl2 = -137 * 1e-7;\nvar Sl3 = 258 * 1e-7;\nvar Sl4 = 35 * 1e-7;\nvar Sl5 = -116 * 1e-7;\nvar Sl6 = -88 * 1e-7;\nvar Sl7 = -112 * 1e-7;\nvar Sl8 = -80 * 1e-7;\nvar scratchDate = new JulianDate(0, 0.0, TimeStandard.TAI); // Gets a point describing the motion of the Earth-Moon barycenter according to the equations described in section 6.\n\nfunction computeSimonEarthMoonBarycenter(date, result) {\n  // t is thousands of years from J2000 TDB\n  taiToTdb(date, scratchDate);\n  var x = scratchDate.dayNumber - epoch.dayNumber + (scratchDate.secondsOfDay - epoch.secondsOfDay) / TimeConstants.SECONDS_PER_DAY;\n  var t = x / (TimeConstants.DAYS_PER_JULIAN_CENTURY * 10.0);\n  var u = 0.3595362 * t;\n  var semimajorAxis = semiMajorAxis0 + Ca1 * Math.cos(p1u * u) + Sa1 * Math.sin(p1u * u) + Ca2 * Math.cos(p2u * u) + Sa2 * Math.sin(p2u * u) + Ca3 * Math.cos(p3u * u) + Sa3 * Math.sin(p3u * u) + Ca4 * Math.cos(p4u * u) + Sa4 * Math.sin(p4u * u) + Ca5 * Math.cos(p5u * u) + Sa5 * Math.sin(p5u * u) + Ca6 * Math.cos(p6u * u) + Sa6 * Math.sin(p6u * u) + Ca7 * Math.cos(p7u * u) + Sa7 * Math.sin(p7u * u) + Ca8 * Math.cos(p8u * u) + Sa8 * Math.sin(p8u * u);\n  var meanLongitude = meanLongitude0 + meanLongitude1 * t + Cl1 * Math.cos(q1u * u) + Sl1 * Math.sin(q1u * u) + Cl2 * Math.cos(q2u * u) + Sl2 * Math.sin(q2u * u) + Cl3 * Math.cos(q3u * u) + Sl3 * Math.sin(q3u * u) + Cl4 * Math.cos(q4u * u) + Sl4 * Math.sin(q4u * u) + Cl5 * Math.cos(q5u * u) + Sl5 * Math.sin(q5u * u) + Cl6 * Math.cos(q6u * u) + Sl6 * Math.sin(q6u * u) + Cl7 * Math.cos(q7u * u) + Sl7 * Math.sin(q7u * u) + Cl8 * Math.cos(q8u * u) + Sl8 * Math.sin(q8u * u); // All constants in this part are from section 5.8\n\n  var eccentricity = 0.0167086342 - 0.0004203654 * t;\n  var longitudeOfPerigee = 102.93734808 * RadiansPerDegree + 11612.3529 * RadiansPerArcSecond * t;\n  var inclination = 469.97289 * RadiansPerArcSecond * t;\n  var longitudeOfNode = 174.87317577 * RadiansPerDegree - 8679.27034 * RadiansPerArcSecond * t;\n  return elementsToCartesian(semimajorAxis, eccentricity, inclination, longitudeOfPerigee, longitudeOfNode, meanLongitude, result);\n} // Gets a point describing the position of the moon according to the equations described in section 4.\n\n\nfunction computeSimonMoon(date, result) {\n  taiToTdb(date, scratchDate);\n  var x = scratchDate.dayNumber - epoch.dayNumber + (scratchDate.secondsOfDay - epoch.secondsOfDay) / TimeConstants.SECONDS_PER_DAY;\n  var t = x / TimeConstants.DAYS_PER_JULIAN_CENTURY;\n  var t2 = t * t;\n  var t3 = t2 * t;\n  var t4 = t3 * t; // Terms from section 3.4 (b.1)\n\n  var semimajorAxis = 383397.7725 + 0.004 * t;\n  var eccentricity = 0.055545526 - 0.000000016 * t;\n  var inclinationConstant = 5.15668983 * RadiansPerDegree;\n  var inclinationSecPart = -0.00008 * t + 0.02966 * t2 - 0.000042 * t3 - 0.00000013 * t4;\n  var longitudeOfPerigeeConstant = 83.35324312 * RadiansPerDegree;\n  var longitudeOfPerigeeSecPart = 14643420.2669 * t - 38.2702 * t2 - 0.045047 * t3 + 0.00021301 * t4;\n  var longitudeOfNodeConstant = 125.04455501 * RadiansPerDegree;\n  var longitudeOfNodeSecPart = -6967919.3631 * t + 6.3602 * t2 + 0.007625 * t3 - 0.00003586 * t4;\n  var meanLongitudeConstant = 218.31664563 * RadiansPerDegree;\n  var meanLongitudeSecPart = 1732559343.4847 * t - 6.391 * t2 + 0.006588 * t3 - 0.00003169 * t4; // Delaunay arguments from section 3.5 b\n\n  var D = 297.85019547 * RadiansPerDegree + RadiansPerArcSecond * (1602961601.209 * t - 6.3706 * t2 + 0.006593 * t3 - 0.00003169 * t4);\n  var F = 93.27209062 * RadiansPerDegree + RadiansPerArcSecond * (1739527262.8478 * t - 12.7512 * t2 - 0.001037 * t3 + 0.00000417 * t4);\n  var l = 134.96340251 * RadiansPerDegree + RadiansPerArcSecond * (1717915923.2178 * t + 31.8792 * t2 + 0.051635 * t3 - 0.0002447 * t4);\n  var lprime = 357.52910918 * RadiansPerDegree + RadiansPerArcSecond * (129596581.0481 * t - 0.5532 * t2 + 0.000136 * t3 - 0.00001149 * t4);\n  var psi = 310.17137918 * RadiansPerDegree - RadiansPerArcSecond * (6967051.436 * t + 6.2068 * t2 + 0.007618 * t3 - 0.00003219 * t4); // Add terms from Table 4\n\n  var twoD = 2.0 * D;\n  var fourD = 4.0 * D;\n  var sixD = 6.0 * D;\n  var twol = 2.0 * l;\n  var threel = 3.0 * l;\n  var fourl = 4.0 * l;\n  var twoF = 2.0 * F;\n  semimajorAxis += 3400.4 * Math.cos(twoD) - 635.6 * Math.cos(twoD - l) - 235.6 * Math.cos(l) + 218.1 * Math.cos(twoD - lprime) + 181.0 * Math.cos(twoD + l);\n  eccentricity += 0.014216 * Math.cos(twoD - l) + 0.008551 * Math.cos(twoD - twol) - 0.001383 * Math.cos(l) + 0.001356 * Math.cos(twoD + l) - 0.001147 * Math.cos(fourD - threel) - 0.000914 * Math.cos(fourD - twol) + 0.000869 * Math.cos(twoD - lprime - l) - 0.000627 * Math.cos(twoD) - 0.000394 * Math.cos(fourD - fourl) + 0.000282 * Math.cos(twoD - lprime - twol) - 0.000279 * Math.cos(D - l) - 0.000236 * Math.cos(twol) + 0.000231 * Math.cos(fourD) + 0.000229 * Math.cos(sixD - fourl) - 0.000201 * Math.cos(twol - twoF);\n  inclinationSecPart += 486.26 * Math.cos(twoD - twoF) - 40.13 * Math.cos(twoD) + 37.51 * Math.cos(twoF) + 25.73 * Math.cos(twol - twoF) + 19.97 * Math.cos(twoD - lprime - twoF);\n  longitudeOfPerigeeSecPart += -55609 * Math.sin(twoD - l) - 34711 * Math.sin(twoD - twol) - 9792 * Math.sin(l) + 9385 * Math.sin(fourD - threel) + 7505 * Math.sin(fourD - twol) + 5318 * Math.sin(twoD + l) + 3484 * Math.sin(fourD - fourl) - 3417 * Math.sin(twoD - lprime - l) - 2530 * Math.sin(sixD - fourl) - 2376 * Math.sin(twoD) - 2075 * Math.sin(twoD - threel) - 1883 * Math.sin(twol) - 1736 * Math.sin(sixD - 5.0 * l) + 1626 * Math.sin(lprime) - 1370 * Math.sin(sixD - threel);\n  longitudeOfNodeSecPart += -5392 * Math.sin(twoD - twoF) - 540 * Math.sin(lprime) - 441 * Math.sin(twoD) + 423 * Math.sin(twoF) - 288 * Math.sin(twol - twoF);\n  meanLongitudeSecPart += -3332.9 * Math.sin(twoD) + 1197.4 * Math.sin(twoD - l) - 662.5 * Math.sin(lprime) + 396.3 * Math.sin(l) - 218.0 * Math.sin(twoD - lprime); // Add terms from Table 5\n\n  var twoPsi = 2.0 * psi;\n  var threePsi = 3.0 * psi;\n  inclinationSecPart += 46.997 * Math.cos(psi) * t - 0.614 * Math.cos(twoD - twoF + psi) * t + 0.614 * Math.cos(twoD - twoF - psi) * t - 0.0297 * Math.cos(twoPsi) * t2 - 0.0335 * Math.cos(psi) * t2 + 0.0012 * Math.cos(twoD - twoF + twoPsi) * t2 - 0.00016 * Math.cos(psi) * t3 + 0.00004 * Math.cos(threePsi) * t3 + 0.00004 * Math.cos(twoPsi) * t3;\n  var perigeeAndMean = 2.116 * Math.sin(psi) * t - 0.111 * Math.sin(twoD - twoF - psi) * t - 0.0015 * Math.sin(psi) * t2;\n  longitudeOfPerigeeSecPart += perigeeAndMean;\n  meanLongitudeSecPart += perigeeAndMean;\n  longitudeOfNodeSecPart += -520.77 * Math.sin(psi) * t + 13.66 * Math.sin(twoD - twoF + psi) * t + 1.12 * Math.sin(twoD - psi) * t - 1.06 * Math.sin(twoF - psi) * t + 0.66 * Math.sin(twoPsi) * t2 + 0.371 * Math.sin(psi) * t2 - 0.035 * Math.sin(twoD - twoF + twoPsi) * t2 - 0.015 * Math.sin(twoD - twoF + psi) * t2 + 0.0014 * Math.sin(psi) * t3 - 0.0011 * Math.sin(threePsi) * t3 - 0.0009 * Math.sin(twoPsi) * t3; // Add constants and convert units\n\n  semimajorAxis *= MetersPerKilometer;\n  var inclination = inclinationConstant + inclinationSecPart * RadiansPerArcSecond;\n  var longitudeOfPerigee = longitudeOfPerigeeConstant + longitudeOfPerigeeSecPart * RadiansPerArcSecond;\n  var meanLongitude = meanLongitudeConstant + meanLongitudeSecPart * RadiansPerArcSecond;\n  var longitudeOfNode = longitudeOfNodeConstant + longitudeOfNodeSecPart * RadiansPerArcSecond;\n  return elementsToCartesian(semimajorAxis, eccentricity, inclination, longitudeOfPerigee, longitudeOfNode, meanLongitude, result);\n} // Gets a point describing the motion of the Earth.  This point uses the Moon point and\n// the 1992 mu value (ratio between Moon and Earth masses) in Table 2 of the paper in order\n// to determine the position of the Earth relative to the Earth-Moon barycenter.\n\n\nvar moonEarthMassRatio = 0.012300034; // From 1992 mu value in Table 2\n\nvar factor = moonEarthMassRatio / (moonEarthMassRatio + 1.0) * -1;\n\nfunction computeSimonEarth(date, result) {\n  result = computeSimonMoon(date, result);\n  return Cartesian3.multiplyByScalar(result, factor, result);\n} // Values for the <code>axesTransformation</code> needed for the rotation were found using the STK Components\n// GreographicTransformer on the position of the sun center of mass point and the earth J2000 frame.\n\n\nvar axesTransformation = new Matrix3(1.0000000000000002, 5.619723173785822e-16, 4.690511510146299e-19, -5.154129427414611e-16, 0.9174820620691819, -0.39777715593191376, -2.23970096136568e-16, 0.39777715593191376, 0.9174820620691819);\nvar translation = new Cartesian3();\n/**\n * Computes the position of the Sun in the Earth-centered inertial frame\n *\n * @param {JulianDate} [julianDate] The time at which to compute the Sun's position, if not provided the current system time is used.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} Calculated sun position\n */\n\nSimon1994PlanetaryPositions.computeSunPositionInEarthInertialFrame = function (julianDate, result) {\n  if (!defined(julianDate)) {\n    julianDate = JulianDate.now();\n  }\n\n  if (!defined(result)) {\n    result = new Cartesian3();\n  } //first forward transformation\n\n\n  translation = computeSimonEarthMoonBarycenter(julianDate, translation);\n  result = Cartesian3.negate(translation, result); //second forward transformation\n\n  computeSimonEarth(julianDate, translation);\n  Cartesian3.subtract(result, translation, result);\n  Matrix3.multiplyByVector(axesTransformation, result, result);\n  return result;\n};\n/**\n * Computes the position of the Moon in the Earth-centered inertial frame\n *\n * @param {JulianDate} [julianDate] The time at which to compute the Sun's position, if not provided the current system time is used.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} Calculated moon position\n */\n\n\nSimon1994PlanetaryPositions.computeMoonPositionInEarthInertialFrame = function (julianDate, result) {\n  if (!defined(julianDate)) {\n    julianDate = JulianDate.now();\n  }\n\n  result = computeSimonMoon(julianDate, result);\n  Matrix3.multiplyByVector(axesTransformation, result, result);\n  return result;\n};\n\nexport default Simon1994PlanetaryPositions;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/Simon1994PlanetaryPositions.js"],"names":["Cartesian3","defined","DeveloperError","JulianDate","CesiumMath","Matrix3","TimeConstants","TimeStandard","Simon1994PlanetaryPositions","computeTdbMinusTtSpice","daysSinceJ2000InTerrestrialTime","g","Math","sin","TdtMinusTai","J2000d","taiToTdb","date","result","addSeconds","days","totalDays","epoch","TAI","MetersPerKilometer","RadiansPerDegree","RADIANS_PER_DEGREE","RadiansPerArcSecond","RADIANS_PER_ARCSECOND","MetersPerAstronomicalUnit","perifocalToEquatorial","elementsToCartesian","semimajorAxis","eccentricity","inclination","longitudeOfPerigee","longitudeOfNode","meanLongitude","PI","radiusOfPeriapsis","argumentOfPeriapsis","rightAscensionOfAscendingNode","trueAnomaly","meanAnomalyToTrueAnomaly","type","chooseOrbit","abs","negativePiToPi","acos","perifocalToCartesianMatrix","semilatus","costheta","cos","sintheta","denom","Epsilon10","radius","x","y","z","multiplyByVector","tolerance","meanAnomaly","eccentricAnomaly","meanAnomalyToEccentricAnomaly","eccentricAnomalyToTrueAnomaly","maxIterationCount","keplerEqConvergence","EPSILON8","revs","floor","TWO_PI","iterationValue","Number","MAX_VALUE","count","NRfunction","dNRfunction","trueAnomalyX","trueAnomalyY","sqrt","atan2","zeroToTwoPi","rightAscension","cosap","sinap","cosi","sini","cosraan","sinraan","semiMajorAxis0","meanLongitude0","meanLongitude1","p1u","p2u","p3u","p4u","p5u","p6u","p7u","p8u","Ca1","Ca2","Ca3","Ca4","Ca5","Ca6","Ca7","Ca8","Sa1","Sa2","Sa3","Sa4","Sa5","Sa6","Sa7","Sa8","q1u","q2u","q3u","q4u","q5u","q6u","q7u","q8u","Cl1","Cl2","Cl3","Cl4","Cl5","Cl6","Cl7","Cl8","Sl1","Sl2","Sl3","Sl4","Sl5","Sl6","Sl7","Sl8","scratchDate","computeSimonEarthMoonBarycenter","dayNumber","secondsOfDay","SECONDS_PER_DAY","t","DAYS_PER_JULIAN_CENTURY","u","computeSimonMoon","t2","t3","t4","inclinationConstant","inclinationSecPart","longitudeOfPerigeeConstant","longitudeOfPerigeeSecPart","longitudeOfNodeConstant","longitudeOfNodeSecPart","meanLongitudeConstant","meanLongitudeSecPart","D","F","l","lprime","psi","twoD","fourD","sixD","twol","threel","fourl","twoF","twoPsi","threePsi","perigeeAndMean","moonEarthMassRatio","factor","computeSimonEarth","multiplyByScalar","axesTransformation","translation","computeSunPositionInEarthInertialFrame","julianDate","now","negate","subtract","computeMoonPositionInEarthInertialFrame"],"mappings":"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","sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport JulianDate from \"./JulianDate.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport TimeConstants from \"./TimeConstants.js\";\nimport TimeStandard from \"./TimeStandard.js\";\n\n/**\n * Contains functions for finding the Cartesian coordinates of the sun and the moon in the\n * Earth-centered inertial frame.\n *\n * @exports Simon1994PlanetaryPositions\n */\nvar Simon1994PlanetaryPositions = {};\n\nfunction computeTdbMinusTtSpice(daysSinceJ2000InTerrestrialTime) {\n  /* STK Comments ------------------------------------------------------\n   * This function uses constants designed to be consistent with\n   * the SPICE Toolkit from JPL version N0051 (unitim.c)\n   * M0 = 6.239996\n   * M0Dot = 1.99096871e-7 rad/s = 0.01720197 rad/d\n   * EARTH_ECC = 1.671e-2\n   * TDB_AMPL = 1.657e-3 secs\n   *--------------------------------------------------------------------*/\n\n  //* Values taken as specified in STK Comments except: 0.01720197 rad/day = 1.99096871e-7 rad/sec\n  //* Here we use the more precise value taken from the SPICE value 1.99096871e-7 rad/sec converted to rad/day\n  //* All other constants are consistent with the SPICE implementation of the TDB conversion\n  //* except where we treat the independent time parameter to be in TT instead of TDB.\n  //* This is an approximation made to facilitate performance due to the higher prevalance of\n  //* the TT2TDB conversion over TDB2TT in order to avoid having to iterate when converting to TDB for the JPL ephemeris.\n  //* Days are used instead of seconds to provide a slight improvement in numerical precision.\n\n  //* For more information see:\n  //* http://www.cv.nrao.edu/~rfisher/Ephemerides/times.html#TDB\n  //* ftp://ssd.jpl.nasa.gov/pub/eph/planets/ioms/ExplSupplChap8.pdf\n\n  var g = 6.239996 + 0.0172019696544 * daysSinceJ2000InTerrestrialTime;\n  return 1.657e-3 * Math.sin(g + 1.671e-2 * Math.sin(g));\n}\n\nvar TdtMinusTai = 32.184;\nvar J2000d = 2451545;\nfunction taiToTdb(date, result) {\n  //Converts TAI to TT\n  result = JulianDate.addSeconds(date, TdtMinusTai, result);\n\n  //Converts TT to TDB\n  var days = JulianDate.totalDays(result) - J2000d;\n  result = JulianDate.addSeconds(result, computeTdbMinusTtSpice(days), result);\n\n  return result;\n}\n\nvar epoch = new JulianDate(2451545, 0, TimeStandard.TAI); //Actually TDB (not TAI)\nvar MetersPerKilometer = 1000.0;\nvar RadiansPerDegree = CesiumMath.RADIANS_PER_DEGREE;\nvar RadiansPerArcSecond = CesiumMath.RADIANS_PER_ARCSECOND;\nvar MetersPerAstronomicalUnit = 1.4959787e11; // IAU 1976 value\n\nvar perifocalToEquatorial = new Matrix3();\nfunction elementsToCartesian(\n  semimajorAxis,\n  eccentricity,\n  inclination,\n  longitudeOfPerigee,\n  longitudeOfNode,\n  meanLongitude,\n  result\n) {\n  if (inclination < 0.0) {\n    inclination = -inclination;\n    longitudeOfNode += CesiumMath.PI;\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (inclination < 0 || inclination > CesiumMath.PI) {\n    throw new DeveloperError(\n      \"The inclination is out of range. Inclination must be greater than or equal to zero and less than or equal to Pi radians.\"\n    );\n  }\n  //>>includeEnd('debug')\n\n  var radiusOfPeriapsis = semimajorAxis * (1.0 - eccentricity);\n  var argumentOfPeriapsis = longitudeOfPerigee - longitudeOfNode;\n  var rightAscensionOfAscendingNode = longitudeOfNode;\n  var trueAnomaly = meanAnomalyToTrueAnomaly(\n    meanLongitude - longitudeOfPerigee,\n    eccentricity\n  );\n  var type = chooseOrbit(eccentricity, 0.0);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    type === \"Hyperbolic\" &&\n    Math.abs(CesiumMath.negativePiToPi(trueAnomaly)) >=\n      Math.acos(-1.0 / eccentricity)\n  ) {\n    throw new DeveloperError(\n      \"The true anomaly of the hyperbolic orbit lies outside of the bounds of the hyperbola.\"\n    );\n  }\n  //>>includeEnd('debug')\n\n  perifocalToCartesianMatrix(\n    argumentOfPeriapsis,\n    inclination,\n    rightAscensionOfAscendingNode,\n    perifocalToEquatorial\n  );\n  var semilatus = radiusOfPeriapsis * (1.0 + eccentricity);\n  var costheta = Math.cos(trueAnomaly);\n  var sintheta = Math.sin(trueAnomaly);\n\n  var denom = 1.0 + eccentricity * costheta;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (denom <= CesiumMath.Epsilon10) {\n    throw new DeveloperError(\"elements cannot be converted to cartesian\");\n  }\n  //>>includeEnd('debug')\n\n  var radius = semilatus / denom;\n  if (!defined(result)) {\n    result = new Cartesian3(radius * costheta, radius * sintheta, 0.0);\n  } else {\n    result.x = radius * costheta;\n    result.y = radius * sintheta;\n    result.z = 0.0;\n  }\n\n  return Matrix3.multiplyByVector(perifocalToEquatorial, result, result);\n}\n\nfunction chooseOrbit(eccentricity, tolerance) {\n  //>>includeStart('debug', pragmas.debug);\n  if (eccentricity < 0) {\n    throw new DeveloperError(\"eccentricity cannot be negative.\");\n  }\n  //>>includeEnd('debug')\n\n  if (eccentricity <= tolerance) {\n    return \"Circular\";\n  } else if (eccentricity < 1.0 - tolerance) {\n    return \"Elliptical\";\n  } else if (eccentricity <= 1.0 + tolerance) {\n    return \"Parabolic\";\n  }\n  return \"Hyperbolic\";\n}\n\n// Calculates the true anomaly given the mean anomaly and the eccentricity.\nfunction meanAnomalyToTrueAnomaly(meanAnomaly, eccentricity) {\n  //>>includeStart('debug', pragmas.debug);\n  if (eccentricity < 0.0 || eccentricity >= 1.0) {\n    throw new DeveloperError(\"eccentricity out of range.\");\n  }\n  //>>includeEnd('debug')\n\n  var eccentricAnomaly = meanAnomalyToEccentricAnomaly(\n    meanAnomaly,\n    eccentricity\n  );\n  return eccentricAnomalyToTrueAnomaly(eccentricAnomaly, eccentricity);\n}\n\nvar maxIterationCount = 50;\nvar keplerEqConvergence = CesiumMath.EPSILON8;\n// Calculates the eccentric anomaly given the mean anomaly and the eccentricity.\nfunction meanAnomalyToEccentricAnomaly(meanAnomaly, eccentricity) {\n  //>>includeStart('debug', pragmas.debug);\n  if (eccentricity < 0.0 || eccentricity >= 1.0) {\n    throw new DeveloperError(\"eccentricity out of range.\");\n  }\n  //>>includeEnd('debug')\n\n  var revs = Math.floor(meanAnomaly / CesiumMath.TWO_PI);\n\n  // Find angle in current revolution\n  meanAnomaly -= revs * CesiumMath.TWO_PI;\n\n  // calculate starting value for iteration sequence\n  var iterationValue =\n    meanAnomaly +\n    (eccentricity * Math.sin(meanAnomaly)) /\n      (1.0 - Math.sin(meanAnomaly + eccentricity) + Math.sin(meanAnomaly));\n\n  // Perform Newton-Raphson iteration on Kepler's equation\n  var eccentricAnomaly = Number.MAX_VALUE;\n\n  var count;\n  for (\n    count = 0;\n    count < maxIterationCount &&\n    Math.abs(eccentricAnomaly - iterationValue) > keplerEqConvergence;\n    ++count\n  ) {\n    eccentricAnomaly = iterationValue;\n    var NRfunction =\n      eccentricAnomaly -\n      eccentricity * Math.sin(eccentricAnomaly) -\n      meanAnomaly;\n    var dNRfunction = 1 - eccentricity * Math.cos(eccentricAnomaly);\n    iterationValue = eccentricAnomaly - NRfunction / dNRfunction;\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (count >= maxIterationCount) {\n    throw new DeveloperError(\"Kepler equation did not converge\");\n    // STK Components uses a numerical method to find the eccentric anomaly in the case that Kepler's\n    // equation does not converge. We don't expect that to ever be necessary for the reasonable orbits used here.\n  }\n  //>>includeEnd('debug')\n\n  eccentricAnomaly = iterationValue + revs * CesiumMath.TWO_PI;\n  return eccentricAnomaly;\n}\n\n// Calculates the true anomaly given the eccentric anomaly and the eccentricity.\nfunction eccentricAnomalyToTrueAnomaly(eccentricAnomaly, eccentricity) {\n  //>>includeStart('debug', pragmas.debug);\n  if (eccentricity < 0.0 || eccentricity >= 1.0) {\n    throw new DeveloperError(\"eccentricity out of range.\");\n  }\n  //>>includeEnd('debug')\n\n  // Calculate the number of previous revolutions\n  var revs = Math.floor(eccentricAnomaly / CesiumMath.TWO_PI);\n\n  // Find angle in current revolution\n  eccentricAnomaly -= revs * CesiumMath.TWO_PI;\n\n  // Calculate true anomaly from eccentric anomaly\n  var trueAnomalyX = Math.cos(eccentricAnomaly) - eccentricity;\n  var trueAnomalyY =\n    Math.sin(eccentricAnomaly) * Math.sqrt(1 - eccentricity * eccentricity);\n\n  var trueAnomaly = Math.atan2(trueAnomalyY, trueAnomalyX);\n\n  // Ensure the correct quadrant\n  trueAnomaly = CesiumMath.zeroToTwoPi(trueAnomaly);\n  if (eccentricAnomaly < 0) {\n    trueAnomaly -= CesiumMath.TWO_PI;\n  }\n\n  // Add on previous revolutions\n  trueAnomaly += revs * CesiumMath.TWO_PI;\n\n  return trueAnomaly;\n}\n\n// Calculates the transformation matrix to convert from the perifocal (PQW) coordinate\n// system to inertial cartesian coordinates.\nfunction perifocalToCartesianMatrix(\n  argumentOfPeriapsis,\n  inclination,\n  rightAscension,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (inclination < 0 || inclination > CesiumMath.PI) {\n    throw new DeveloperError(\"inclination out of range\");\n  }\n  //>>includeEnd('debug')\n\n  var cosap = Math.cos(argumentOfPeriapsis);\n  var sinap = Math.sin(argumentOfPeriapsis);\n\n  var cosi = Math.cos(inclination);\n  var sini = Math.sin(inclination);\n\n  var cosraan = Math.cos(rightAscension);\n  var sinraan = Math.sin(rightAscension);\n  if (!defined(result)) {\n    result = new Matrix3(\n      cosraan * cosap - sinraan * sinap * cosi,\n      -cosraan * sinap - sinraan * cosap * cosi,\n      sinraan * sini,\n\n      sinraan * cosap + cosraan * sinap * cosi,\n      -sinraan * sinap + cosraan * cosap * cosi,\n      -cosraan * sini,\n\n      sinap * sini,\n      cosap * sini,\n      cosi\n    );\n  } else {\n    result[0] = cosraan * cosap - sinraan * sinap * cosi;\n    result[1] = sinraan * cosap + cosraan * sinap * cosi;\n    result[2] = sinap * sini;\n    result[3] = -cosraan * sinap - sinraan * cosap * cosi;\n    result[4] = -sinraan * sinap + cosraan * cosap * cosi;\n    result[5] = cosap * sini;\n    result[6] = sinraan * sini;\n    result[7] = -cosraan * sini;\n    result[8] = cosi;\n  }\n  return result;\n}\n\n// From section 5.8\nvar semiMajorAxis0 = 1.0000010178 * MetersPerAstronomicalUnit;\nvar meanLongitude0 = 100.46645683 * RadiansPerDegree;\nvar meanLongitude1 = 1295977422.83429 * RadiansPerArcSecond;\n\n// From table 6\nvar p1u = 16002;\nvar p2u = 21863;\nvar p3u = 32004;\nvar p4u = 10931;\nvar p5u = 14529;\nvar p6u = 16368;\nvar p7u = 15318;\nvar p8u = 32794;\n\nvar Ca1 = 64 * 1e-7 * MetersPerAstronomicalUnit;\nvar Ca2 = -152 * 1e-7 * MetersPerAstronomicalUnit;\nvar Ca3 = 62 * 1e-7 * MetersPerAstronomicalUnit;\nvar Ca4 = -8 * 1e-7 * MetersPerAstronomicalUnit;\nvar Ca5 = 32 * 1e-7 * MetersPerAstronomicalUnit;\nvar Ca6 = -41 * 1e-7 * MetersPerAstronomicalUnit;\nvar Ca7 = 19 * 1e-7 * MetersPerAstronomicalUnit;\nvar Ca8 = -11 * 1e-7 * MetersPerAstronomicalUnit;\n\nvar Sa1 = -150 * 1e-7 * MetersPerAstronomicalUnit;\nvar Sa2 = -46 * 1e-7 * MetersPerAstronomicalUnit;\nvar Sa3 = 68 * 1e-7 * MetersPerAstronomicalUnit;\nvar Sa4 = 54 * 1e-7 * MetersPerAstronomicalUnit;\nvar Sa5 = 14 * 1e-7 * MetersPerAstronomicalUnit;\nvar Sa6 = 24 * 1e-7 * MetersPerAstronomicalUnit;\nvar Sa7 = -28 * 1e-7 * MetersPerAstronomicalUnit;\nvar Sa8 = 22 * 1e-7 * MetersPerAstronomicalUnit;\n\nvar q1u = 10;\nvar q2u = 16002;\nvar q3u = 21863;\nvar q4u = 10931;\nvar q5u = 1473;\nvar q6u = 32004;\nvar q7u = 4387;\nvar q8u = 73;\n\nvar Cl1 = -325 * 1e-7;\nvar Cl2 = -322 * 1e-7;\nvar Cl3 = -79 * 1e-7;\nvar Cl4 = 232 * 1e-7;\nvar Cl5 = -52 * 1e-7;\nvar Cl6 = 97 * 1e-7;\nvar Cl7 = 55 * 1e-7;\nvar Cl8 = -41 * 1e-7;\n\nvar Sl1 = -105 * 1e-7;\nvar Sl2 = -137 * 1e-7;\nvar Sl3 = 258 * 1e-7;\nvar Sl4 = 35 * 1e-7;\nvar Sl5 = -116 * 1e-7;\nvar Sl6 = -88 * 1e-7;\nvar Sl7 = -112 * 1e-7;\nvar Sl8 = -80 * 1e-7;\n\nvar scratchDate = new JulianDate(0, 0.0, TimeStandard.TAI);\n// Gets a point describing the motion of the Earth-Moon barycenter according to the equations described in section 6.\nfunction computeSimonEarthMoonBarycenter(date, result) {\n  // t is thousands of years from J2000 TDB\n  taiToTdb(date, scratchDate);\n  var x =\n    scratchDate.dayNumber -\n    epoch.dayNumber +\n    (scratchDate.secondsOfDay - epoch.secondsOfDay) /\n      TimeConstants.SECONDS_PER_DAY;\n  var t = x / (TimeConstants.DAYS_PER_JULIAN_CENTURY * 10.0);\n\n  var u = 0.3595362 * t;\n  var semimajorAxis =\n    semiMajorAxis0 +\n    Ca1 * Math.cos(p1u * u) +\n    Sa1 * Math.sin(p1u * u) +\n    Ca2 * Math.cos(p2u * u) +\n    Sa2 * Math.sin(p2u * u) +\n    Ca3 * Math.cos(p3u * u) +\n    Sa3 * Math.sin(p3u * u) +\n    Ca4 * Math.cos(p4u * u) +\n    Sa4 * Math.sin(p4u * u) +\n    Ca5 * Math.cos(p5u * u) +\n    Sa5 * Math.sin(p5u * u) +\n    Ca6 * Math.cos(p6u * u) +\n    Sa6 * Math.sin(p6u * u) +\n    Ca7 * Math.cos(p7u * u) +\n    Sa7 * Math.sin(p7u * u) +\n    Ca8 * Math.cos(p8u * u) +\n    Sa8 * Math.sin(p8u * u);\n  var meanLongitude =\n    meanLongitude0 +\n    meanLongitude1 * t +\n    Cl1 * Math.cos(q1u * u) +\n    Sl1 * Math.sin(q1u * u) +\n    Cl2 * Math.cos(q2u * u) +\n    Sl2 * Math.sin(q2u * u) +\n    Cl3 * Math.cos(q3u * u) +\n    Sl3 * Math.sin(q3u * u) +\n    Cl4 * Math.cos(q4u * u) +\n    Sl4 * Math.sin(q4u * u) +\n    Cl5 * Math.cos(q5u * u) +\n    Sl5 * Math.sin(q5u * u) +\n    Cl6 * Math.cos(q6u * u) +\n    Sl6 * Math.sin(q6u * u) +\n    Cl7 * Math.cos(q7u * u) +\n    Sl7 * Math.sin(q7u * u) +\n    Cl8 * Math.cos(q8u * u) +\n    Sl8 * Math.sin(q8u * u);\n\n  // All constants in this part are from section 5.8\n  var eccentricity = 0.0167086342 - 0.0004203654 * t;\n  var longitudeOfPerigee =\n    102.93734808 * RadiansPerDegree + 11612.3529 * RadiansPerArcSecond * t;\n  var inclination = 469.97289 * RadiansPerArcSecond * t;\n  var longitudeOfNode =\n    174.87317577 * RadiansPerDegree - 8679.27034 * RadiansPerArcSecond * t;\n\n  return elementsToCartesian(\n    semimajorAxis,\n    eccentricity,\n    inclination,\n    longitudeOfPerigee,\n    longitudeOfNode,\n    meanLongitude,\n    result\n  );\n}\n\n// Gets a point describing the position of the moon according to the equations described in section 4.\nfunction computeSimonMoon(date, result) {\n  taiToTdb(date, scratchDate);\n  var x =\n    scratchDate.dayNumber -\n    epoch.dayNumber +\n    (scratchDate.secondsOfDay - epoch.secondsOfDay) /\n      TimeConstants.SECONDS_PER_DAY;\n  var t = x / TimeConstants.DAYS_PER_JULIAN_CENTURY;\n  var t2 = t * t;\n  var t3 = t2 * t;\n  var t4 = t3 * t;\n\n  // Terms from section 3.4 (b.1)\n  var semimajorAxis = 383397.7725 + 0.004 * t;\n  var eccentricity = 0.055545526 - 0.000000016 * t;\n  var inclinationConstant = 5.15668983 * RadiansPerDegree;\n  var inclinationSecPart =\n    -0.00008 * t + 0.02966 * t2 - 0.000042 * t3 - 0.00000013 * t4;\n  var longitudeOfPerigeeConstant = 83.35324312 * RadiansPerDegree;\n  var longitudeOfPerigeeSecPart =\n    14643420.2669 * t - 38.2702 * t2 - 0.045047 * t3 + 0.00021301 * t4;\n  var longitudeOfNodeConstant = 125.04455501 * RadiansPerDegree;\n  var longitudeOfNodeSecPart =\n    -6967919.3631 * t + 6.3602 * t2 + 0.007625 * t3 - 0.00003586 * t4;\n  var meanLongitudeConstant = 218.31664563 * RadiansPerDegree;\n  var meanLongitudeSecPart =\n    1732559343.4847 * t - 6.391 * t2 + 0.006588 * t3 - 0.00003169 * t4;\n\n  // Delaunay arguments from section 3.5 b\n  var D =\n    297.85019547 * RadiansPerDegree +\n    RadiansPerArcSecond *\n      (1602961601.209 * t - 6.3706 * t2 + 0.006593 * t3 - 0.00003169 * t4);\n  var F =\n    93.27209062 * RadiansPerDegree +\n    RadiansPerArcSecond *\n      (1739527262.8478 * t - 12.7512 * t2 - 0.001037 * t3 + 0.00000417 * t4);\n  var l =\n    134.96340251 * RadiansPerDegree +\n    RadiansPerArcSecond *\n      (1717915923.2178 * t + 31.8792 * t2 + 0.051635 * t3 - 0.0002447 * t4);\n  var lprime =\n    357.52910918 * RadiansPerDegree +\n    RadiansPerArcSecond *\n      (129596581.0481 * t - 0.5532 * t2 + 0.000136 * t3 - 0.00001149 * t4);\n  var psi =\n    310.17137918 * RadiansPerDegree -\n    RadiansPerArcSecond *\n      (6967051.436 * t + 6.2068 * t2 + 0.007618 * t3 - 0.00003219 * t4);\n\n  // Add terms from Table 4\n  var twoD = 2.0 * D;\n  var fourD = 4.0 * D;\n  var sixD = 6.0 * D;\n  var twol = 2.0 * l;\n  var threel = 3.0 * l;\n  var fourl = 4.0 * l;\n  var twoF = 2.0 * F;\n  semimajorAxis +=\n    3400.4 * Math.cos(twoD) -\n    635.6 * Math.cos(twoD - l) -\n    235.6 * Math.cos(l) +\n    218.1 * Math.cos(twoD - lprime) +\n    181.0 * Math.cos(twoD + l);\n  eccentricity +=\n    0.014216 * Math.cos(twoD - l) +\n    0.008551 * Math.cos(twoD - twol) -\n    0.001383 * Math.cos(l) +\n    0.001356 * Math.cos(twoD + l) -\n    0.001147 * Math.cos(fourD - threel) -\n    0.000914 * Math.cos(fourD - twol) +\n    0.000869 * Math.cos(twoD - lprime - l) -\n    0.000627 * Math.cos(twoD) -\n    0.000394 * Math.cos(fourD - fourl) +\n    0.000282 * Math.cos(twoD - lprime - twol) -\n    0.000279 * Math.cos(D - l) -\n    0.000236 * Math.cos(twol) +\n    0.000231 * Math.cos(fourD) +\n    0.000229 * Math.cos(sixD - fourl) -\n    0.000201 * Math.cos(twol - twoF);\n  inclinationSecPart +=\n    486.26 * Math.cos(twoD - twoF) -\n    40.13 * Math.cos(twoD) +\n    37.51 * Math.cos(twoF) +\n    25.73 * Math.cos(twol - twoF) +\n    19.97 * Math.cos(twoD - lprime - twoF);\n  longitudeOfPerigeeSecPart +=\n    -55609 * Math.sin(twoD - l) -\n    34711 * Math.sin(twoD - twol) -\n    9792 * Math.sin(l) +\n    9385 * Math.sin(fourD - threel) +\n    7505 * Math.sin(fourD - twol) +\n    5318 * Math.sin(twoD + l) +\n    3484 * Math.sin(fourD - fourl) -\n    3417 * Math.sin(twoD - lprime - l) -\n    2530 * Math.sin(sixD - fourl) -\n    2376 * Math.sin(twoD) -\n    2075 * Math.sin(twoD - threel) -\n    1883 * Math.sin(twol) -\n    1736 * Math.sin(sixD - 5.0 * l) +\n    1626 * Math.sin(lprime) -\n    1370 * Math.sin(sixD - threel);\n  longitudeOfNodeSecPart +=\n    -5392 * Math.sin(twoD - twoF) -\n    540 * Math.sin(lprime) -\n    441 * Math.sin(twoD) +\n    423 * Math.sin(twoF) -\n    288 * Math.sin(twol - twoF);\n  meanLongitudeSecPart +=\n    -3332.9 * Math.sin(twoD) +\n    1197.4 * Math.sin(twoD - l) -\n    662.5 * Math.sin(lprime) +\n    396.3 * Math.sin(l) -\n    218.0 * Math.sin(twoD - lprime);\n\n  // Add terms from Table 5\n  var twoPsi = 2.0 * psi;\n  var threePsi = 3.0 * psi;\n  inclinationSecPart +=\n    46.997 * Math.cos(psi) * t -\n    0.614 * Math.cos(twoD - twoF + psi) * t +\n    0.614 * Math.cos(twoD - twoF - psi) * t -\n    0.0297 * Math.cos(twoPsi) * t2 -\n    0.0335 * Math.cos(psi) * t2 +\n    0.0012 * Math.cos(twoD - twoF + twoPsi) * t2 -\n    0.00016 * Math.cos(psi) * t3 +\n    0.00004 * Math.cos(threePsi) * t3 +\n    0.00004 * Math.cos(twoPsi) * t3;\n  var perigeeAndMean =\n    2.116 * Math.sin(psi) * t -\n    0.111 * Math.sin(twoD - twoF - psi) * t -\n    0.0015 * Math.sin(psi) * t2;\n  longitudeOfPerigeeSecPart += perigeeAndMean;\n  meanLongitudeSecPart += perigeeAndMean;\n  longitudeOfNodeSecPart +=\n    -520.77 * Math.sin(psi) * t +\n    13.66 * Math.sin(twoD - twoF + psi) * t +\n    1.12 * Math.sin(twoD - psi) * t -\n    1.06 * Math.sin(twoF - psi) * t +\n    0.66 * Math.sin(twoPsi) * t2 +\n    0.371 * Math.sin(psi) * t2 -\n    0.035 * Math.sin(twoD - twoF + twoPsi) * t2 -\n    0.015 * Math.sin(twoD - twoF + psi) * t2 +\n    0.0014 * Math.sin(psi) * t3 -\n    0.0011 * Math.sin(threePsi) * t3 -\n    0.0009 * Math.sin(twoPsi) * t3;\n\n  // Add constants and convert units\n  semimajorAxis *= MetersPerKilometer;\n  var inclination =\n    inclinationConstant + inclinationSecPart * RadiansPerArcSecond;\n  var longitudeOfPerigee =\n    longitudeOfPerigeeConstant +\n    longitudeOfPerigeeSecPart * RadiansPerArcSecond;\n  var meanLongitude =\n    meanLongitudeConstant + meanLongitudeSecPart * RadiansPerArcSecond;\n  var longitudeOfNode =\n    longitudeOfNodeConstant + longitudeOfNodeSecPart * RadiansPerArcSecond;\n\n  return elementsToCartesian(\n    semimajorAxis,\n    eccentricity,\n    inclination,\n    longitudeOfPerigee,\n    longitudeOfNode,\n    meanLongitude,\n    result\n  );\n}\n\n// Gets a point describing the motion of the Earth.  This point uses the Moon point and\n// the 1992 mu value (ratio between Moon and Earth masses) in Table 2 of the paper in order\n// to determine the position of the Earth relative to the Earth-Moon barycenter.\nvar moonEarthMassRatio = 0.012300034; // From 1992 mu value in Table 2\nvar factor = (moonEarthMassRatio / (moonEarthMassRatio + 1.0)) * -1;\nfunction computeSimonEarth(date, result) {\n  result = computeSimonMoon(date, result);\n  return Cartesian3.multiplyByScalar(result, factor, result);\n}\n\n// Values for the <code>axesTransformation</code> needed for the rotation were found using the STK Components\n// GreographicTransformer on the position of the sun center of mass point and the earth J2000 frame.\n\nvar axesTransformation = new Matrix3(\n  1.0000000000000002,\n  5.619723173785822e-16,\n  4.690511510146299e-19,\n  -5.154129427414611e-16,\n  0.9174820620691819,\n  -0.39777715593191376,\n  -2.23970096136568e-16,\n  0.39777715593191376,\n  0.9174820620691819\n);\nvar translation = new Cartesian3();\n/**\n * Computes the position of the Sun in the Earth-centered inertial frame\n *\n * @param {JulianDate} [julianDate] The time at which to compute the Sun's position, if not provided the current system time is used.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} Calculated sun position\n */\nSimon1994PlanetaryPositions.computeSunPositionInEarthInertialFrame = function (\n  julianDate,\n  result\n) {\n  if (!defined(julianDate)) {\n    julianDate = JulianDate.now();\n  }\n\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n\n  //first forward transformation\n  translation = computeSimonEarthMoonBarycenter(julianDate, translation);\n  result = Cartesian3.negate(translation, result);\n\n  //second forward transformation\n  computeSimonEarth(julianDate, translation);\n\n  Cartesian3.subtract(result, translation, result);\n  Matrix3.multiplyByVector(axesTransformation, result, result);\n\n  return result;\n};\n\n/**\n * Computes the position of the Moon in the Earth-centered inertial frame\n *\n * @param {JulianDate} [julianDate] The time at which to compute the Sun's position, if not provided the current system time is used.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} Calculated moon position\n */\nSimon1994PlanetaryPositions.computeMoonPositionInEarthInertialFrame = function (\n  julianDate,\n  result\n) {\n  if (!defined(julianDate)) {\n    julianDate = JulianDate.now();\n  }\n\n  result = computeSimonMoon(julianDate, result);\n  Matrix3.multiplyByVector(axesTransformation, result, result);\n\n  return result;\n};\nexport default Simon1994PlanetaryPositions;\n"]},"metadata":{},"sourceType":"module"}