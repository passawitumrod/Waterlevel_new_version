{"ast":null,"code":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * @private\\n\\\n */\\n\\\nvec4 czm_translucentPhong(vec3 toEye, czm_material material, vec3 lightDirectionEC)\\n\\\n{\\n\\\n    // Diffuse from directional light sources at eye (for top-down and horizon views)\\n\\\n    float diffuse = czm_getLambertDiffuse(vec3(0.0, 0.0, 1.0), material.normal);\\n\\\n\\n\\\n    if (czm_sceneMode == czm_sceneMode3D) {\\n\\\n        // (and horizon views in 3D)\\n\\\n        diffuse += czm_getLambertDiffuse(vec3(0.0, 1.0, 0.0), material.normal);\\n\\\n    }\\n\\\n\\n\\\n    diffuse = clamp(diffuse, 0.0, 1.0);\\n\\\n\\n\\\n    float specular = czm_getSpecular(lightDirectionEC, toEye, material.normal, material.shininess);\\n\\\n\\n\\\n    // Temporary workaround for adding ambient.\\n\\\n    vec3 materialDiffuse = material.diffuse * 0.5;\\n\\\n\\n\\\n    vec3 ambient = materialDiffuse;\\n\\\n    vec3 color = ambient + material.emission;\\n\\\n    color += materialDiffuse * diffuse * czm_lightColor;\\n\\\n    color += material.specular * specular * czm_lightColor;\\n\\\n\\n\\\n    return vec4(color, material.alpha);\\n\\\n}\\n\\\n\";","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Shaders/Builtin/Functions/translucentPhong.js"],"names":[],"mappings":"AAAA;AACA,eAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAf","sourcesContent":["//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * @private\\n\\\n */\\n\\\nvec4 czm_translucentPhong(vec3 toEye, czm_material material, vec3 lightDirectionEC)\\n\\\n{\\n\\\n    // Diffuse from directional light sources at eye (for top-down and horizon views)\\n\\\n    float diffuse = czm_getLambertDiffuse(vec3(0.0, 0.0, 1.0), material.normal);\\n\\\n\\n\\\n    if (czm_sceneMode == czm_sceneMode3D) {\\n\\\n        // (and horizon views in 3D)\\n\\\n        diffuse += czm_getLambertDiffuse(vec3(0.0, 1.0, 0.0), material.normal);\\n\\\n    }\\n\\\n\\n\\\n    diffuse = clamp(diffuse, 0.0, 1.0);\\n\\\n\\n\\\n    float specular = czm_getSpecular(lightDirectionEC, toEye, material.normal, material.shininess);\\n\\\n\\n\\\n    // Temporary workaround for adding ambient.\\n\\\n    vec3 materialDiffuse = material.diffuse * 0.5;\\n\\\n\\n\\\n    vec3 ambient = materialDiffuse;\\n\\\n    vec3 color = ambient + material.emission;\\n\\\n    color += materialDiffuse * diffuse * czm_lightColor;\\n\\\n    color += material.specular * specular * czm_lightColor;\\n\\\n\\n\\\n    return vec4(color, material.alpha);\\n\\\n}\\n\\\n\";\n"]},"metadata":{},"sourceType":"module"}