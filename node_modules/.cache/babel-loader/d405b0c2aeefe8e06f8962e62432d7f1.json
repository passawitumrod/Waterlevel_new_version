{"ast":null,"code":"import buildModuleUrl from \"../Core/buildModuleUrl.js\";\nimport Color from \"../Core/Color.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport AcesTonemapping from \"../Shaders/PostProcessStages/AcesTonemappingStage.js\";\nimport AmbientOcclusionGenerate from \"../Shaders/PostProcessStages/AmbientOcclusionGenerate.js\";\nimport AmbientOcclusionModulate from \"../Shaders/PostProcessStages/AmbientOcclusionModulate.js\";\nimport BlackAndWhite from \"../Shaders/PostProcessStages/BlackAndWhite.js\";\nimport BloomComposite from \"../Shaders/PostProcessStages/BloomComposite.js\";\nimport Brightness from \"../Shaders/PostProcessStages/Brightness.js\";\nimport ContrastBias from \"../Shaders/PostProcessStages/ContrastBias.js\";\nimport DepthOfField from \"../Shaders/PostProcessStages/DepthOfField.js\";\nimport DepthView from \"../Shaders/PostProcessStages/DepthView.js\";\nimport EdgeDetection from \"../Shaders/PostProcessStages/EdgeDetection.js\";\nimport FilmicTonemapping from \"../Shaders/PostProcessStages/FilmicTonemapping.js\";\nimport FXAA from \"../Shaders/PostProcessStages/FXAA.js\";\nimport GaussianBlur1D from \"../Shaders/PostProcessStages/GaussianBlur1D.js\";\nimport LensFlare from \"../Shaders/PostProcessStages/LensFlare.js\";\nimport ModifiedReinhardTonemapping from \"../Shaders/PostProcessStages/ModifiedReinhardTonemapping.js\";\nimport NightVision from \"../Shaders/PostProcessStages/NightVision.js\";\nimport ReinhardTonemapping from \"../Shaders/PostProcessStages/ReinhardTonemapping.js\";\nimport Silhouette from \"../Shaders/PostProcessStages/Silhouette.js\";\nimport FXAA3_11 from \"../ThirdParty/Shaders/FXAA3_11.js\";\nimport AutoExposure from \"./AutoExposure.js\";\nimport PostProcessStage from \"./PostProcessStage.js\";\nimport PostProcessStageComposite from \"./PostProcessStageComposite.js\";\nimport PostProcessStageSampleMode from \"./PostProcessStageSampleMode.js\";\n/**\n * Contains functions for creating common post-process stages.\n *\n * @exports PostProcessStageLibrary\n */\n\nvar PostProcessStageLibrary = {};\n\nfunction createBlur(name) {\n  var delta = 1.0;\n  var sigma = 2.0;\n  var stepSize = 1.0;\n  var blurShader = \"#define USE_STEP_SIZE\\n\" + GaussianBlur1D;\n  var blurX = new PostProcessStage({\n    name: name + \"_x_direction\",\n    fragmentShader: blurShader,\n    uniforms: {\n      delta: delta,\n      sigma: sigma,\n      stepSize: stepSize,\n      direction: 0.0\n    },\n    sampleMode: PostProcessStageSampleMode.LINEAR\n  });\n  var blurY = new PostProcessStage({\n    name: name + \"_y_direction\",\n    fragmentShader: blurShader,\n    uniforms: {\n      delta: delta,\n      sigma: sigma,\n      stepSize: stepSize,\n      direction: 1.0\n    },\n    sampleMode: PostProcessStageSampleMode.LINEAR\n  });\n  var uniforms = {};\n  Object.defineProperties(uniforms, {\n    delta: {\n      get: function get() {\n        return blurX.uniforms.delta;\n      },\n      set: function set(value) {\n        var blurXUniforms = blurX.uniforms;\n        var blurYUniforms = blurY.uniforms;\n        blurXUniforms.delta = blurYUniforms.delta = value;\n      }\n    },\n    sigma: {\n      get: function get() {\n        return blurX.uniforms.sigma;\n      },\n      set: function set(value) {\n        var blurXUniforms = blurX.uniforms;\n        var blurYUniforms = blurY.uniforms;\n        blurXUniforms.sigma = blurYUniforms.sigma = value;\n      }\n    },\n    stepSize: {\n      get: function get() {\n        return blurX.uniforms.stepSize;\n      },\n      set: function set(value) {\n        var blurXUniforms = blurX.uniforms;\n        var blurYUniforms = blurY.uniforms;\n        blurXUniforms.stepSize = blurYUniforms.stepSize = value;\n      }\n    }\n  });\n  return new PostProcessStageComposite({\n    name: name,\n    stages: [blurX, blurY],\n    uniforms: uniforms\n  });\n}\n/**\n * Creates a post-process stage that applies a Gaussian blur to the input texture. This stage is usually applied in conjunction with another stage.\n * <p>\n * This stage has the following uniforms: <code>delta</code>, <code>sigma</code>, and <code>stepSize</code>.\n * </p>\n * <p>\n * <code>delta</code> and <code>sigma</code> are used to compute the weights of a Gaussian filter. The equation is <code>exp((-0.5 * delta * delta) / (sigma * sigma))</code>.\n * The default value for <code>delta</code> is <code>1.0</code>. The default value for <code>sigma</code> is <code>2.0</code>.\n * <code>stepSize</code> is the distance to the next texel. The default is <code>1.0</code>.\n * </p>\n * @return {PostProcessStageComposite} A post-process stage that applies a Gaussian blur to the input texture.\n */\n\n\nPostProcessStageLibrary.createBlurStage = function () {\n  return createBlur(\"czm_blur\");\n};\n/**\n * Creates a post-process stage that applies a depth of field effect.\n * <p>\n * Depth of field simulates camera focus. Objects in the scene that are in focus\n * will be clear whereas objects not in focus will be blurred.\n * </p>\n * <p>\n * This stage has the following uniforms: <code>focalDistance</code>, <code>delta</code>, <code>sigma</code>, and <code>stepSize</code>.\n * </p>\n * <p>\n * <code>focalDistance</code> is the distance in meters from the camera to set the camera focus.\n * </p>\n * <p>\n * <code>delta</code>, <code>sigma</code>, and <code>stepSize</code> are the same properties as {@link PostProcessStageLibrary#createBlurStage}.\n * The blur is applied to the areas out of focus.\n * </p>\n * @return {PostProcessStageComposite} A post-process stage that applies a depth of field effect.\n */\n\n\nPostProcessStageLibrary.createDepthOfFieldStage = function () {\n  var blur = createBlur(\"czm_depth_of_field_blur\");\n  var dof = new PostProcessStage({\n    name: \"czm_depth_of_field_composite\",\n    fragmentShader: DepthOfField,\n    uniforms: {\n      focalDistance: 5.0,\n      blurTexture: blur.name\n    }\n  });\n  var uniforms = {};\n  Object.defineProperties(uniforms, {\n    focalDistance: {\n      get: function get() {\n        return dof.uniforms.focalDistance;\n      },\n      set: function set(value) {\n        dof.uniforms.focalDistance = value;\n      }\n    },\n    delta: {\n      get: function get() {\n        return blur.uniforms.delta;\n      },\n      set: function set(value) {\n        blur.uniforms.delta = value;\n      }\n    },\n    sigma: {\n      get: function get() {\n        return blur.uniforms.sigma;\n      },\n      set: function set(value) {\n        blur.uniforms.sigma = value;\n      }\n    },\n    stepSize: {\n      get: function get() {\n        return blur.uniforms.stepSize;\n      },\n      set: function set(value) {\n        blur.uniforms.stepSize = value;\n      }\n    }\n  });\n  return new PostProcessStageComposite({\n    name: \"czm_depth_of_field\",\n    stages: [blur, dof],\n    inputPreviousStageTexture: false,\n    uniforms: uniforms\n  });\n};\n/**\n * Whether or not a depth of field stage is supported.\n * <p>\n * This stage requires the WEBGL_depth_texture extension.\n * </p>\n *\n * @param {Scene} scene The scene.\n * @return {Boolean} Whether this post process stage is supported.\n *\n * @see {Context#depthTexture}\n * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/|WEBGL_depth_texture}\n */\n\n\nPostProcessStageLibrary.isDepthOfFieldSupported = function (scene) {\n  return scene.context.depthTexture;\n};\n/**\n * Creates a post-process stage that detects edges.\n * <p>\n * Writes the color to the output texture with alpha set to 1.0 when it is on an edge.\n * </p>\n * <p>\n * This stage has the following uniforms: <code>color</code> and <code>length</code>\n * </p>\n * <ul>\n * <li><code>color</code> is the color of the highlighted edge. The default is {@link Color#BLACK}.</li>\n * <li><code>length</code> is the length of the edges in pixels. The default is <code>0.5</code>.</li>\n * </ul>\n * <p>\n * This stage is not supported in 2D.\n * </p>\n * @return {PostProcessStageComposite} A post-process stage that applies an edge detection effect.\n *\n * @example\n * // multiple silhouette effects\n * var yellowEdge = Cesium.PostProcessLibrary.createEdgeDetectionStage();\n * yellowEdge.uniforms.color = Cesium.Color.YELLOW;\n * yellowEdge.selected = [feature0];\n *\n * var greenEdge = Cesium.PostProcessLibrary.createEdgeDetectionStage();\n * greenEdge.uniforms.color = Cesium.Color.LIME;\n * greenEdge.selected = [feature1];\n *\n * // draw edges around feature0 and feature1\n * postProcessStages.add(Cesium.PostProcessLibrary.createSilhouetteEffect([yellowEdge, greenEdge]);\n */\n\n\nPostProcessStageLibrary.createEdgeDetectionStage = function () {\n  // unique name generated on call so more than one effect can be added\n  var name = createGuid();\n  return new PostProcessStage({\n    name: \"czm_edge_detection_\" + name,\n    fragmentShader: EdgeDetection,\n    uniforms: {\n      length: 0.25,\n      color: Color.clone(Color.BLACK)\n    }\n  });\n};\n/**\n * Whether or not an edge detection stage is supported.\n * <p>\n * This stage requires the WEBGL_depth_texture extension.\n * </p>\n *\n * @param {Scene} scene The scene.\n * @return {Boolean} Whether this post process stage is supported.\n *\n * @see {Context#depthTexture}\n * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/|WEBGL_depth_texture}\n */\n\n\nPostProcessStageLibrary.isEdgeDetectionSupported = function (scene) {\n  return scene.context.depthTexture;\n};\n\nfunction getSilhouetteEdgeDetection(edgeDetectionStages) {\n  if (!defined(edgeDetectionStages)) {\n    return PostProcessStageLibrary.createEdgeDetectionStage();\n  }\n\n  var edgeDetection = new PostProcessStageComposite({\n    name: \"czm_edge_detection_multiple\",\n    stages: edgeDetectionStages,\n    inputPreviousStageTexture: false\n  });\n  var compositeUniforms = {};\n  var fsDecl = \"\";\n  var fsLoop = \"\";\n\n  for (var i = 0; i < edgeDetectionStages.length; ++i) {\n    fsDecl += \"uniform sampler2D edgeTexture\" + i + \"; \\n\";\n    fsLoop += \"        vec4 edge\" + i + \" = texture2D(edgeTexture\" + i + \", v_textureCoordinates); \\n\" + \"        if (edge\" + i + \".a > 0.0) \\n\" + \"        { \\n\" + \"            color = edge\" + i + \"; \\n\" + \"            break; \\n\" + \"        } \\n\";\n    compositeUniforms[\"edgeTexture\" + i] = edgeDetectionStages[i].name;\n  }\n\n  var fs = fsDecl + \"varying vec2 v_textureCoordinates; \\n\" + \"void main() { \\n\" + \"    vec4 color = vec4(0.0); \\n\" + \"    for (int i = 0; i < \" + edgeDetectionStages.length + \"; i++) \\n\" + \"    { \\n\" + fsLoop + \"    } \\n\" + \"    gl_FragColor = color; \\n\" + \"} \\n\";\n  var edgeComposite = new PostProcessStage({\n    name: \"czm_edge_detection_combine\",\n    fragmentShader: fs,\n    uniforms: compositeUniforms\n  });\n  return new PostProcessStageComposite({\n    name: \"czm_edge_detection_composite\",\n    stages: [edgeDetection, edgeComposite]\n  });\n}\n/**\n * Creates a post-process stage that applies a silhouette effect.\n * <p>\n * A silhouette effect composites the color from the edge detection pass with input color texture.\n * </p>\n * <p>\n * This stage has the following uniforms when <code>edgeDetectionStages</code> is <code>undefined</code>: <code>color</code> and <code>length</code>\n * </p>\n * <p>\n * <code>color</code> is the color of the highlighted edge. The default is {@link Color#BLACK}.\n * <code>length</code> is the length of the edges in pixels. The default is <code>0.5</code>.\n * </p>\n * @return {PostProcessStageComposite} A post-process stage that applies a silhouette effect.\n */\n\n\nPostProcessStageLibrary.createSilhouetteStage = function (edgeDetectionStages) {\n  var edgeDetection = getSilhouetteEdgeDetection(edgeDetectionStages);\n  var silhouetteProcess = new PostProcessStage({\n    name: \"czm_silhouette_color_edges\",\n    fragmentShader: Silhouette,\n    uniforms: {\n      silhouetteTexture: edgeDetection.name\n    }\n  });\n  return new PostProcessStageComposite({\n    name: \"czm_silhouette\",\n    stages: [edgeDetection, silhouetteProcess],\n    inputPreviousStageTexture: false,\n    uniforms: edgeDetection.uniforms\n  });\n};\n/**\n * Whether or not a silhouette stage is supported.\n * <p>\n * This stage requires the WEBGL_depth_texture extension.\n * </p>\n *\n * @param {Scene} scene The scene.\n * @return {Boolean} Whether this post process stage is supported.\n *\n * @see {Context#depthTexture}\n * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/|WEBGL_depth_texture}\n */\n\n\nPostProcessStageLibrary.isSilhouetteSupported = function (scene) {\n  return scene.context.depthTexture;\n};\n/**\n * Creates a post-process stage that applies a bloom effect to the input texture.\n * <p>\n * A bloom effect adds glow effect, makes bright areas brighter, and dark areas darker.\n * </p>\n * <p>\n * This post-process stage has the following uniforms: <code>contrast</code>, <code>brightness</code>, <code>glowOnly</code>,\n * <code>delta</code>, <code>sigma</code>, and <code>stepSize</code>.\n * </p>\n * <ul>\n * <li><code>contrast</code> is a scalar value in the range [-255.0, 255.0] and affects the contract of the effect. The default value is <code>128.0</code>.</li>\n * <li><code>brightness</code> is a scalar value. The input texture RGB value is converted to hue, saturation, and brightness (HSB) then this value is\n * added to the brightness. The default value is <code>-0.3</code>.</li>\n * <li><code>glowOnly</code> is a boolean value. When <code>true</code>, only the glow effect will be shown. When <code>false</code>, the glow will be added to the input texture.\n * The default value is <code>false</code>. This is a debug option for viewing the effects when changing the other uniform values.</li>\n * </ul>\n * <p>\n * <code>delta</code>, <code>sigma</code>, and <code>stepSize</code> are the same properties as {@link PostProcessStageLibrary#createBlurStage}.\n * </p>\n * @return {PostProcessStageComposite} A post-process stage to applies a bloom effect.\n *\n * @private\n */\n\n\nPostProcessStageLibrary.createBloomStage = function () {\n  var contrastBias = new PostProcessStage({\n    name: \"czm_bloom_contrast_bias\",\n    fragmentShader: ContrastBias,\n    uniforms: {\n      contrast: 128.0,\n      brightness: -0.3\n    }\n  });\n  var blur = createBlur(\"czm_bloom_blur\");\n  var generateComposite = new PostProcessStageComposite({\n    name: \"czm_bloom_contrast_bias_blur\",\n    stages: [contrastBias, blur]\n  });\n  var bloomComposite = new PostProcessStage({\n    name: \"czm_bloom_generate_composite\",\n    fragmentShader: BloomComposite,\n    uniforms: {\n      glowOnly: false,\n      bloomTexture: generateComposite.name\n    }\n  });\n  var uniforms = {};\n  Object.defineProperties(uniforms, {\n    glowOnly: {\n      get: function get() {\n        return bloomComposite.uniforms.glowOnly;\n      },\n      set: function set(value) {\n        bloomComposite.uniforms.glowOnly = value;\n      }\n    },\n    contrast: {\n      get: function get() {\n        return contrastBias.uniforms.contrast;\n      },\n      set: function set(value) {\n        contrastBias.uniforms.contrast = value;\n      }\n    },\n    brightness: {\n      get: function get() {\n        return contrastBias.uniforms.brightness;\n      },\n      set: function set(value) {\n        contrastBias.uniforms.brightness = value;\n      }\n    },\n    delta: {\n      get: function get() {\n        return blur.uniforms.delta;\n      },\n      set: function set(value) {\n        blur.uniforms.delta = value;\n      }\n    },\n    sigma: {\n      get: function get() {\n        return blur.uniforms.sigma;\n      },\n      set: function set(value) {\n        blur.uniforms.sigma = value;\n      }\n    },\n    stepSize: {\n      get: function get() {\n        return blur.uniforms.stepSize;\n      },\n      set: function set(value) {\n        blur.uniforms.stepSize = value;\n      }\n    }\n  });\n  return new PostProcessStageComposite({\n    name: \"czm_bloom\",\n    stages: [generateComposite, bloomComposite],\n    inputPreviousStageTexture: false,\n    uniforms: uniforms\n  });\n};\n/**\n * Creates a post-process stage that Horizon-based Ambient Occlusion (HBAO) to the input texture.\n * <p>\n * Ambient occlusion simulates shadows from ambient light. These shadows would always be present when the\n * surface receives light and regardless of the light's position.\n * </p>\n * <p>\n * The uniforms have the following properties: <code>intensity</code>, <code>bias</code>, <code>lengthCap</code>,\n * <code>stepSize</code>, <code>frustumLength</code>, <code>randomTexture</code>, <code>ambientOcclusionOnly</code>,\n * <code>delta</code>, <code>sigma</code>, and <code>blurStepSize</code>.\n * </p>\n * <ul>\n * <li><code>intensity</code> is a scalar value used to lighten or darken the shadows exponentially. Higher values make the shadows darker. The default value is <code>3.0</code>.</li>\n * <li><code>bias</code> is a scalar value representing an angle in radians. If the dot product between the normal of the sample and the vector to the camera is less than this value,\n * sampling stops in the current direction. This is used to remove shadows from near planar edges. The default value is <code>0.1</code>.</li>\n * <li><code>lengthCap</code> is a scalar value representing a length in meters. If the distance from the current sample to first sample is greater than this value,\n * sampling stops in the current direction. The default value is <code>0.26</code>.</li>\n * <li><code>stepSize</code> is a scalar value indicating the distance to the next texel sample in the current direction. The default value is <code>1.95</code>.</li>\n * <li><code>frustumLength</code> is a scalar value in meters. If the current fragment has a distance from the camera greater than this value, ambient occlusion is not computed for the fragment.\n * The default value is <code>1000.0</code>.</li>\n * <li><code>randomTexture</code> is a texture where the red channel is a random value in [0.0, 1.0]. The default value is <code>undefined</code>. This texture needs to be set.</li>\n * <li><code>ambientOcclusionOnly</code> is a boolean value. When <code>true</code>, only the shadows generated are written to the output. When <code>false</code>, the input texture is modulated\n * with the ambient occlusion. This is a useful debug option for seeing the effects of changing the uniform values. The default value is <code>false</code>.</li>\n * </ul>\n * <p>\n * <code>delta</code>, <code>sigma</code>, and <code>blurStepSize</code> are the same properties as {@link PostProcessStageLibrary#createBlurStage}.\n * The blur is applied to the shadows generated from the image to make them smoother.\n * </p>\n * @return {PostProcessStageComposite} A post-process stage that applies an ambient occlusion effect.\n *\n * @private\n */\n\n\nPostProcessStageLibrary.createAmbientOcclusionStage = function () {\n  var generate = new PostProcessStage({\n    name: \"czm_ambient_occlusion_generate\",\n    fragmentShader: AmbientOcclusionGenerate,\n    uniforms: {\n      intensity: 3.0,\n      bias: 0.1,\n      lengthCap: 0.26,\n      stepSize: 1.95,\n      frustumLength: 1000.0,\n      randomTexture: undefined\n    }\n  });\n  var blur = createBlur(\"czm_ambient_occlusion_blur\");\n  blur.uniforms.stepSize = 0.86;\n  var generateAndBlur = new PostProcessStageComposite({\n    name: \"czm_ambient_occlusion_generate_blur\",\n    stages: [generate, blur]\n  });\n  var ambientOcclusionModulate = new PostProcessStage({\n    name: \"czm_ambient_occlusion_composite\",\n    fragmentShader: AmbientOcclusionModulate,\n    uniforms: {\n      ambientOcclusionOnly: false,\n      ambientOcclusionTexture: generateAndBlur.name\n    }\n  });\n  var uniforms = {};\n  Object.defineProperties(uniforms, {\n    intensity: {\n      get: function get() {\n        return generate.uniforms.intensity;\n      },\n      set: function set(value) {\n        generate.uniforms.intensity = value;\n      }\n    },\n    bias: {\n      get: function get() {\n        return generate.uniforms.bias;\n      },\n      set: function set(value) {\n        generate.uniforms.bias = value;\n      }\n    },\n    lengthCap: {\n      get: function get() {\n        return generate.uniforms.lengthCap;\n      },\n      set: function set(value) {\n        generate.uniforms.lengthCap = value;\n      }\n    },\n    stepSize: {\n      get: function get() {\n        return generate.uniforms.stepSize;\n      },\n      set: function set(value) {\n        generate.uniforms.stepSize = value;\n      }\n    },\n    frustumLength: {\n      get: function get() {\n        return generate.uniforms.frustumLength;\n      },\n      set: function set(value) {\n        generate.uniforms.frustumLength = value;\n      }\n    },\n    randomTexture: {\n      get: function get() {\n        return generate.uniforms.randomTexture;\n      },\n      set: function set(value) {\n        generate.uniforms.randomTexture = value;\n      }\n    },\n    delta: {\n      get: function get() {\n        return blur.uniforms.delta;\n      },\n      set: function set(value) {\n        blur.uniforms.delta = value;\n      }\n    },\n    sigma: {\n      get: function get() {\n        return blur.uniforms.sigma;\n      },\n      set: function set(value) {\n        blur.uniforms.sigma = value;\n      }\n    },\n    blurStepSize: {\n      get: function get() {\n        return blur.uniforms.stepSize;\n      },\n      set: function set(value) {\n        blur.uniforms.stepSize = value;\n      }\n    },\n    ambientOcclusionOnly: {\n      get: function get() {\n        return ambientOcclusionModulate.uniforms.ambientOcclusionOnly;\n      },\n      set: function set(value) {\n        ambientOcclusionModulate.uniforms.ambientOcclusionOnly = value;\n      }\n    }\n  });\n  return new PostProcessStageComposite({\n    name: \"czm_ambient_occlusion\",\n    stages: [generateAndBlur, ambientOcclusionModulate],\n    inputPreviousStageTexture: false,\n    uniforms: uniforms\n  });\n};\n/**\n * Whether or not an ambient occlusion stage is supported.\n * <p>\n * This stage requires the WEBGL_depth_texture extension.\n * </p>\n *\n * @param {Scene} scene The scene.\n * @return {Boolean} Whether this post process stage is supported.\n *\n * @see {Context#depthTexture}\n * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/|WEBGL_depth_texture}\n */\n\n\nPostProcessStageLibrary.isAmbientOcclusionSupported = function (scene) {\n  return scene.context.depthTexture;\n};\n\nvar fxaaFS = \"#define FXAA_QUALITY_PRESET 39 \\n\" + FXAA3_11 + \"\\n\" + FXAA;\n/**\n * Creates a post-process stage that applies Fast Approximate Anti-aliasing (FXAA) to the input texture.\n * @return {PostProcessStage} A post-process stage that applies Fast Approximate Anti-aliasing to the input texture.\n *\n * @private\n */\n\nPostProcessStageLibrary.createFXAAStage = function () {\n  return new PostProcessStage({\n    name: \"czm_FXAA\",\n    fragmentShader: fxaaFS,\n    sampleMode: PostProcessStageSampleMode.LINEAR\n  });\n};\n/**\n * Creates a post-process stage that applies ACES tonemapping operator.\n * @param {Boolean} useAutoExposure Whether or not to use auto-exposure.\n * @return {PostProcessStage} A post-process stage that applies ACES tonemapping operator.\n * @private\n */\n\n\nPostProcessStageLibrary.createAcesTonemappingStage = function (useAutoExposure) {\n  var fs = useAutoExposure ? \"#define AUTO_EXPOSURE\\n\" : \"\";\n  fs += AcesTonemapping;\n  return new PostProcessStage({\n    name: \"czm_aces\",\n    fragmentShader: fs,\n    uniforms: {\n      autoExposure: undefined\n    }\n  });\n};\n/**\n * Creates a post-process stage that applies filmic tonemapping operator.\n * @param {Boolean} useAutoExposure Whether or not to use auto-exposure.\n * @return {PostProcessStage} A post-process stage that applies filmic tonemapping operator.\n * @private\n */\n\n\nPostProcessStageLibrary.createFilmicTonemappingStage = function (useAutoExposure) {\n  var fs = useAutoExposure ? \"#define AUTO_EXPOSURE\\n\" : \"\";\n  fs += FilmicTonemapping;\n  return new PostProcessStage({\n    name: \"czm_filmic\",\n    fragmentShader: fs,\n    uniforms: {\n      autoExposure: undefined\n    }\n  });\n};\n/**\n * Creates a post-process stage that applies Reinhard tonemapping operator.\n * @param {Boolean} useAutoExposure Whether or not to use auto-exposure.\n * @return {PostProcessStage} A post-process stage that applies Reinhard tonemapping operator.\n * @private\n */\n\n\nPostProcessStageLibrary.createReinhardTonemappingStage = function (useAutoExposure) {\n  var fs = useAutoExposure ? \"#define AUTO_EXPOSURE\\n\" : \"\";\n  fs += ReinhardTonemapping;\n  return new PostProcessStage({\n    name: \"czm_reinhard\",\n    fragmentShader: fs,\n    uniforms: {\n      autoExposure: undefined\n    }\n  });\n};\n/**\n * Creates a post-process stage that applies modified Reinhard tonemapping operator.\n * @param {Boolean} useAutoExposure Whether or not to use auto-exposure.\n * @return {PostProcessStage} A post-process stage that applies modified Reinhard tonemapping operator.\n * @private\n */\n\n\nPostProcessStageLibrary.createModifiedReinhardTonemappingStage = function (useAutoExposure) {\n  var fs = useAutoExposure ? \"#define AUTO_EXPOSURE\\n\" : \"\";\n  fs += ModifiedReinhardTonemapping;\n  return new PostProcessStage({\n    name: \"czm_modified_reinhard\",\n    fragmentShader: fs,\n    uniforms: {\n      white: Color.WHITE,\n      autoExposure: undefined\n    }\n  });\n};\n/**\n * Creates a post-process stage that finds the average luminance of the input texture.\n * @return {PostProcessStage} A post-process stage that finds the average luminance of the input texture.\n * @private\n */\n\n\nPostProcessStageLibrary.createAutoExposureStage = function () {\n  return new AutoExposure();\n};\n/**\n * Creates a post-process stage that renders the input texture with black and white gradations.\n * <p>\n * This stage has one uniform value, <code>gradations</code>, which scales the luminance of each pixel.\n * </p>\n * @return {PostProcessStage} A post-process stage that renders the input texture with black and white gradations.\n */\n\n\nPostProcessStageLibrary.createBlackAndWhiteStage = function () {\n  return new PostProcessStage({\n    name: \"czm_black_and_white\",\n    fragmentShader: BlackAndWhite,\n    uniforms: {\n      gradations: 5.0\n    }\n  });\n};\n/**\n * Creates a post-process stage that saturates the input texture.\n * <p>\n * This stage has one uniform value, <code>brightness</code>, which scales the saturation of each pixel.\n * </p>\n * @return {PostProcessStage} A post-process stage that saturates the input texture.\n */\n\n\nPostProcessStageLibrary.createBrightnessStage = function () {\n  return new PostProcessStage({\n    name: \"czm_brightness\",\n    fragmentShader: Brightness,\n    uniforms: {\n      brightness: 0.5\n    }\n  });\n};\n/**\n * Creates a post-process stage that adds a night vision effect to the input texture.\n * @return {PostProcessStage} A post-process stage that adds a night vision effect to the input texture.\n */\n\n\nPostProcessStageLibrary.createNightVisionStage = function () {\n  return new PostProcessStage({\n    name: \"czm_night_vision\",\n    fragmentShader: NightVision\n  });\n};\n/**\n * Creates a post-process stage that replaces the input color texture with a black and white texture representing the fragment depth at each pixel.\n * @return {PostProcessStage} A post-process stage that replaces the input color texture with a black and white texture representing the fragment depth at each pixel.\n *\n * @private\n */\n\n\nPostProcessStageLibrary.createDepthViewStage = function () {\n  return new PostProcessStage({\n    name: \"czm_depth_view\",\n    fragmentShader: DepthView\n  });\n};\n/**\n * Creates a post-process stage that applies an effect simulating light flaring a camera lens.\n * <p>\n * This stage has the following uniforms: <code>dirtTexture</code>, <code>starTexture</code>, <code>intensity</code>, <code>distortion</code>, <code>ghostDispersal</code>,\n * <code>haloWidth</code>, <code>dirtAmount</code>, and <code>earthRadius</code>.\n * <ul>\n * <li><code>dirtTexture</code> is a texture sampled to simulate dirt on the lens.</li>\n * <li><code>starTexture</code> is the texture sampled for the star pattern of the flare.</li>\n * <li><code>intensity</code> is a scalar multiplied by the result of the lens flare. The default value is <code>2.0</code>.</li>\n * <li><code>distortion</code> is a scalar value that affects the chromatic effect distortion. The default value is <code>10.0</code>.</li>\n * <li><code>ghostDispersal</code> is a scalar indicating how far the halo effect is from the center of the texture. The default value is <code>0.4</code>.</li>\n * <li><code>haloWidth</code> is a scalar representing the width of the halo  from the ghost dispersal. The default value is <code>0.4</code>.</li>\n * <li><code>dirtAmount</code> is a scalar representing the amount of dirt on the lens. The default value is <code>0.4</code>.</li>\n * <li><code>earthRadius</code> is the maximum radius of the earth. The default value is <code>Ellipsoid.WGS84.maximumRadius</code>.</li>\n * </ul>\n * </p>\n * @return {PostProcessStage} A post-process stage for applying a lens flare effect.\n */\n\n\nPostProcessStageLibrary.createLensFlareStage = function () {\n  return new PostProcessStage({\n    name: \"czm_lens_flare\",\n    fragmentShader: LensFlare,\n    uniforms: {\n      dirtTexture: buildModuleUrl(\"Assets/Textures/LensFlare/DirtMask.jpg\"),\n      starTexture: buildModuleUrl(\"Assets/Textures/LensFlare/StarBurst.jpg\"),\n      intensity: 2.0,\n      distortion: 10.0,\n      ghostDispersal: 0.4,\n      haloWidth: 0.4,\n      dirtAmount: 0.4,\n      earthRadius: Ellipsoid.WGS84.maximumRadius\n    }\n  });\n};\n\nexport default PostProcessStageLibrary;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/PostProcessStageLibrary.js"],"names":["buildModuleUrl","Color","createGuid","defined","Ellipsoid","AcesTonemapping","AmbientOcclusionGenerate","AmbientOcclusionModulate","BlackAndWhite","BloomComposite","Brightness","ContrastBias","DepthOfField","DepthView","EdgeDetection","FilmicTonemapping","FXAA","GaussianBlur1D","LensFlare","ModifiedReinhardTonemapping","NightVision","ReinhardTonemapping","Silhouette","FXAA3_11","AutoExposure","PostProcessStage","PostProcessStageComposite","PostProcessStageSampleMode","PostProcessStageLibrary","createBlur","name","delta","sigma","stepSize","blurShader","blurX","fragmentShader","uniforms","direction","sampleMode","LINEAR","blurY","Object","defineProperties","get","set","value","blurXUniforms","blurYUniforms","stages","createBlurStage","createDepthOfFieldStage","blur","dof","focalDistance","blurTexture","inputPreviousStageTexture","isDepthOfFieldSupported","scene","context","depthTexture","createEdgeDetectionStage","length","color","clone","BLACK","isEdgeDetectionSupported","getSilhouetteEdgeDetection","edgeDetectionStages","edgeDetection","compositeUniforms","fsDecl","fsLoop","i","fs","edgeComposite","createSilhouetteStage","silhouetteProcess","silhouetteTexture","isSilhouetteSupported","createBloomStage","contrastBias","contrast","brightness","generateComposite","bloomComposite","glowOnly","bloomTexture","createAmbientOcclusionStage","generate","intensity","bias","lengthCap","frustumLength","randomTexture","undefined","generateAndBlur","ambientOcclusionModulate","ambientOcclusionOnly","ambientOcclusionTexture","blurStepSize","isAmbientOcclusionSupported","fxaaFS","createFXAAStage","createAcesTonemappingStage","useAutoExposure","autoExposure","createFilmicTonemappingStage","createReinhardTonemappingStage","createModifiedReinhardTonemappingStage","white","WHITE","createAutoExposureStage","createBlackAndWhiteStage","gradations","createBrightnessStage","createNightVisionStage","createDepthViewStage","createLensFlareStage","dirtTexture","starTexture","distortion","ghostDispersal","haloWidth","dirtAmount","earthRadius","WGS84","maximumRadius"],"mappings":"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","sourcesContent":["import buildModuleUrl from \"../Core/buildModuleUrl.js\";\nimport Color from \"../Core/Color.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport AcesTonemapping from \"../Shaders/PostProcessStages/AcesTonemappingStage.js\";\nimport AmbientOcclusionGenerate from \"../Shaders/PostProcessStages/AmbientOcclusionGenerate.js\";\nimport AmbientOcclusionModulate from \"../Shaders/PostProcessStages/AmbientOcclusionModulate.js\";\nimport BlackAndWhite from \"../Shaders/PostProcessStages/BlackAndWhite.js\";\nimport BloomComposite from \"../Shaders/PostProcessStages/BloomComposite.js\";\nimport Brightness from \"../Shaders/PostProcessStages/Brightness.js\";\nimport ContrastBias from \"../Shaders/PostProcessStages/ContrastBias.js\";\nimport DepthOfField from \"../Shaders/PostProcessStages/DepthOfField.js\";\nimport DepthView from \"../Shaders/PostProcessStages/DepthView.js\";\nimport EdgeDetection from \"../Shaders/PostProcessStages/EdgeDetection.js\";\nimport FilmicTonemapping from \"../Shaders/PostProcessStages/FilmicTonemapping.js\";\nimport FXAA from \"../Shaders/PostProcessStages/FXAA.js\";\nimport GaussianBlur1D from \"../Shaders/PostProcessStages/GaussianBlur1D.js\";\nimport LensFlare from \"../Shaders/PostProcessStages/LensFlare.js\";\nimport ModifiedReinhardTonemapping from \"../Shaders/PostProcessStages/ModifiedReinhardTonemapping.js\";\nimport NightVision from \"../Shaders/PostProcessStages/NightVision.js\";\nimport ReinhardTonemapping from \"../Shaders/PostProcessStages/ReinhardTonemapping.js\";\nimport Silhouette from \"../Shaders/PostProcessStages/Silhouette.js\";\nimport FXAA3_11 from \"../ThirdParty/Shaders/FXAA3_11.js\";\nimport AutoExposure from \"./AutoExposure.js\";\nimport PostProcessStage from \"./PostProcessStage.js\";\nimport PostProcessStageComposite from \"./PostProcessStageComposite.js\";\nimport PostProcessStageSampleMode from \"./PostProcessStageSampleMode.js\";\n\n/**\n * Contains functions for creating common post-process stages.\n *\n * @exports PostProcessStageLibrary\n */\nvar PostProcessStageLibrary = {};\n\nfunction createBlur(name) {\n  var delta = 1.0;\n  var sigma = 2.0;\n  var stepSize = 1.0;\n\n  var blurShader = \"#define USE_STEP_SIZE\\n\" + GaussianBlur1D;\n  var blurX = new PostProcessStage({\n    name: name + \"_x_direction\",\n    fragmentShader: blurShader,\n    uniforms: {\n      delta: delta,\n      sigma: sigma,\n      stepSize: stepSize,\n      direction: 0.0,\n    },\n    sampleMode: PostProcessStageSampleMode.LINEAR,\n  });\n  var blurY = new PostProcessStage({\n    name: name + \"_y_direction\",\n    fragmentShader: blurShader,\n    uniforms: {\n      delta: delta,\n      sigma: sigma,\n      stepSize: stepSize,\n      direction: 1.0,\n    },\n    sampleMode: PostProcessStageSampleMode.LINEAR,\n  });\n\n  var uniforms = {};\n  Object.defineProperties(uniforms, {\n    delta: {\n      get: function () {\n        return blurX.uniforms.delta;\n      },\n      set: function (value) {\n        var blurXUniforms = blurX.uniforms;\n        var blurYUniforms = blurY.uniforms;\n        blurXUniforms.delta = blurYUniforms.delta = value;\n      },\n    },\n    sigma: {\n      get: function () {\n        return blurX.uniforms.sigma;\n      },\n      set: function (value) {\n        var blurXUniforms = blurX.uniforms;\n        var blurYUniforms = blurY.uniforms;\n        blurXUniforms.sigma = blurYUniforms.sigma = value;\n      },\n    },\n    stepSize: {\n      get: function () {\n        return blurX.uniforms.stepSize;\n      },\n      set: function (value) {\n        var blurXUniforms = blurX.uniforms;\n        var blurYUniforms = blurY.uniforms;\n        blurXUniforms.stepSize = blurYUniforms.stepSize = value;\n      },\n    },\n  });\n  return new PostProcessStageComposite({\n    name: name,\n    stages: [blurX, blurY],\n    uniforms: uniforms,\n  });\n}\n\n/**\n * Creates a post-process stage that applies a Gaussian blur to the input texture. This stage is usually applied in conjunction with another stage.\n * <p>\n * This stage has the following uniforms: <code>delta</code>, <code>sigma</code>, and <code>stepSize</code>.\n * </p>\n * <p>\n * <code>delta</code> and <code>sigma</code> are used to compute the weights of a Gaussian filter. The equation is <code>exp((-0.5 * delta * delta) / (sigma * sigma))</code>.\n * The default value for <code>delta</code> is <code>1.0</code>. The default value for <code>sigma</code> is <code>2.0</code>.\n * <code>stepSize</code> is the distance to the next texel. The default is <code>1.0</code>.\n * </p>\n * @return {PostProcessStageComposite} A post-process stage that applies a Gaussian blur to the input texture.\n */\nPostProcessStageLibrary.createBlurStage = function () {\n  return createBlur(\"czm_blur\");\n};\n\n/**\n * Creates a post-process stage that applies a depth of field effect.\n * <p>\n * Depth of field simulates camera focus. Objects in the scene that are in focus\n * will be clear whereas objects not in focus will be blurred.\n * </p>\n * <p>\n * This stage has the following uniforms: <code>focalDistance</code>, <code>delta</code>, <code>sigma</code>, and <code>stepSize</code>.\n * </p>\n * <p>\n * <code>focalDistance</code> is the distance in meters from the camera to set the camera focus.\n * </p>\n * <p>\n * <code>delta</code>, <code>sigma</code>, and <code>stepSize</code> are the same properties as {@link PostProcessStageLibrary#createBlurStage}.\n * The blur is applied to the areas out of focus.\n * </p>\n * @return {PostProcessStageComposite} A post-process stage that applies a depth of field effect.\n */\nPostProcessStageLibrary.createDepthOfFieldStage = function () {\n  var blur = createBlur(\"czm_depth_of_field_blur\");\n  var dof = new PostProcessStage({\n    name: \"czm_depth_of_field_composite\",\n    fragmentShader: DepthOfField,\n    uniforms: {\n      focalDistance: 5.0,\n      blurTexture: blur.name,\n    },\n  });\n\n  var uniforms = {};\n  Object.defineProperties(uniforms, {\n    focalDistance: {\n      get: function () {\n        return dof.uniforms.focalDistance;\n      },\n      set: function (value) {\n        dof.uniforms.focalDistance = value;\n      },\n    },\n    delta: {\n      get: function () {\n        return blur.uniforms.delta;\n      },\n      set: function (value) {\n        blur.uniforms.delta = value;\n      },\n    },\n    sigma: {\n      get: function () {\n        return blur.uniforms.sigma;\n      },\n      set: function (value) {\n        blur.uniforms.sigma = value;\n      },\n    },\n    stepSize: {\n      get: function () {\n        return blur.uniforms.stepSize;\n      },\n      set: function (value) {\n        blur.uniforms.stepSize = value;\n      },\n    },\n  });\n  return new PostProcessStageComposite({\n    name: \"czm_depth_of_field\",\n    stages: [blur, dof],\n    inputPreviousStageTexture: false,\n    uniforms: uniforms,\n  });\n};\n\n/**\n * Whether or not a depth of field stage is supported.\n * <p>\n * This stage requires the WEBGL_depth_texture extension.\n * </p>\n *\n * @param {Scene} scene The scene.\n * @return {Boolean} Whether this post process stage is supported.\n *\n * @see {Context#depthTexture}\n * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/|WEBGL_depth_texture}\n */\nPostProcessStageLibrary.isDepthOfFieldSupported = function (scene) {\n  return scene.context.depthTexture;\n};\n\n/**\n * Creates a post-process stage that detects edges.\n * <p>\n * Writes the color to the output texture with alpha set to 1.0 when it is on an edge.\n * </p>\n * <p>\n * This stage has the following uniforms: <code>color</code> and <code>length</code>\n * </p>\n * <ul>\n * <li><code>color</code> is the color of the highlighted edge. The default is {@link Color#BLACK}.</li>\n * <li><code>length</code> is the length of the edges in pixels. The default is <code>0.5</code>.</li>\n * </ul>\n * <p>\n * This stage is not supported in 2D.\n * </p>\n * @return {PostProcessStageComposite} A post-process stage that applies an edge detection effect.\n *\n * @example\n * // multiple silhouette effects\n * var yellowEdge = Cesium.PostProcessLibrary.createEdgeDetectionStage();\n * yellowEdge.uniforms.color = Cesium.Color.YELLOW;\n * yellowEdge.selected = [feature0];\n *\n * var greenEdge = Cesium.PostProcessLibrary.createEdgeDetectionStage();\n * greenEdge.uniforms.color = Cesium.Color.LIME;\n * greenEdge.selected = [feature1];\n *\n * // draw edges around feature0 and feature1\n * postProcessStages.add(Cesium.PostProcessLibrary.createSilhouetteEffect([yellowEdge, greenEdge]);\n */\nPostProcessStageLibrary.createEdgeDetectionStage = function () {\n  // unique name generated on call so more than one effect can be added\n  var name = createGuid();\n  return new PostProcessStage({\n    name: \"czm_edge_detection_\" + name,\n    fragmentShader: EdgeDetection,\n    uniforms: {\n      length: 0.25,\n      color: Color.clone(Color.BLACK),\n    },\n  });\n};\n\n/**\n * Whether or not an edge detection stage is supported.\n * <p>\n * This stage requires the WEBGL_depth_texture extension.\n * </p>\n *\n * @param {Scene} scene The scene.\n * @return {Boolean} Whether this post process stage is supported.\n *\n * @see {Context#depthTexture}\n * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/|WEBGL_depth_texture}\n */\nPostProcessStageLibrary.isEdgeDetectionSupported = function (scene) {\n  return scene.context.depthTexture;\n};\n\nfunction getSilhouetteEdgeDetection(edgeDetectionStages) {\n  if (!defined(edgeDetectionStages)) {\n    return PostProcessStageLibrary.createEdgeDetectionStage();\n  }\n\n  var edgeDetection = new PostProcessStageComposite({\n    name: \"czm_edge_detection_multiple\",\n    stages: edgeDetectionStages,\n    inputPreviousStageTexture: false,\n  });\n\n  var compositeUniforms = {};\n  var fsDecl = \"\";\n  var fsLoop = \"\";\n  for (var i = 0; i < edgeDetectionStages.length; ++i) {\n    fsDecl += \"uniform sampler2D edgeTexture\" + i + \"; \\n\";\n    fsLoop +=\n      \"        vec4 edge\" +\n      i +\n      \" = texture2D(edgeTexture\" +\n      i +\n      \", v_textureCoordinates); \\n\" +\n      \"        if (edge\" +\n      i +\n      \".a > 0.0) \\n\" +\n      \"        { \\n\" +\n      \"            color = edge\" +\n      i +\n      \"; \\n\" +\n      \"            break; \\n\" +\n      \"        } \\n\";\n    compositeUniforms[\"edgeTexture\" + i] = edgeDetectionStages[i].name;\n  }\n\n  var fs =\n    fsDecl +\n    \"varying vec2 v_textureCoordinates; \\n\" +\n    \"void main() { \\n\" +\n    \"    vec4 color = vec4(0.0); \\n\" +\n    \"    for (int i = 0; i < \" +\n    edgeDetectionStages.length +\n    \"; i++) \\n\" +\n    \"    { \\n\" +\n    fsLoop +\n    \"    } \\n\" +\n    \"    gl_FragColor = color; \\n\" +\n    \"} \\n\";\n\n  var edgeComposite = new PostProcessStage({\n    name: \"czm_edge_detection_combine\",\n    fragmentShader: fs,\n    uniforms: compositeUniforms,\n  });\n  return new PostProcessStageComposite({\n    name: \"czm_edge_detection_composite\",\n    stages: [edgeDetection, edgeComposite],\n  });\n}\n\n/**\n * Creates a post-process stage that applies a silhouette effect.\n * <p>\n * A silhouette effect composites the color from the edge detection pass with input color texture.\n * </p>\n * <p>\n * This stage has the following uniforms when <code>edgeDetectionStages</code> is <code>undefined</code>: <code>color</code> and <code>length</code>\n * </p>\n * <p>\n * <code>color</code> is the color of the highlighted edge. The default is {@link Color#BLACK}.\n * <code>length</code> is the length of the edges in pixels. The default is <code>0.5</code>.\n * </p>\n * @return {PostProcessStageComposite} A post-process stage that applies a silhouette effect.\n */\nPostProcessStageLibrary.createSilhouetteStage = function (edgeDetectionStages) {\n  var edgeDetection = getSilhouetteEdgeDetection(edgeDetectionStages);\n  var silhouetteProcess = new PostProcessStage({\n    name: \"czm_silhouette_color_edges\",\n    fragmentShader: Silhouette,\n    uniforms: {\n      silhouetteTexture: edgeDetection.name,\n    },\n  });\n\n  return new PostProcessStageComposite({\n    name: \"czm_silhouette\",\n    stages: [edgeDetection, silhouetteProcess],\n    inputPreviousStageTexture: false,\n    uniforms: edgeDetection.uniforms,\n  });\n};\n\n/**\n * Whether or not a silhouette stage is supported.\n * <p>\n * This stage requires the WEBGL_depth_texture extension.\n * </p>\n *\n * @param {Scene} scene The scene.\n * @return {Boolean} Whether this post process stage is supported.\n *\n * @see {Context#depthTexture}\n * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/|WEBGL_depth_texture}\n */\nPostProcessStageLibrary.isSilhouetteSupported = function (scene) {\n  return scene.context.depthTexture;\n};\n\n/**\n * Creates a post-process stage that applies a bloom effect to the input texture.\n * <p>\n * A bloom effect adds glow effect, makes bright areas brighter, and dark areas darker.\n * </p>\n * <p>\n * This post-process stage has the following uniforms: <code>contrast</code>, <code>brightness</code>, <code>glowOnly</code>,\n * <code>delta</code>, <code>sigma</code>, and <code>stepSize</code>.\n * </p>\n * <ul>\n * <li><code>contrast</code> is a scalar value in the range [-255.0, 255.0] and affects the contract of the effect. The default value is <code>128.0</code>.</li>\n * <li><code>brightness</code> is a scalar value. The input texture RGB value is converted to hue, saturation, and brightness (HSB) then this value is\n * added to the brightness. The default value is <code>-0.3</code>.</li>\n * <li><code>glowOnly</code> is a boolean value. When <code>true</code>, only the glow effect will be shown. When <code>false</code>, the glow will be added to the input texture.\n * The default value is <code>false</code>. This is a debug option for viewing the effects when changing the other uniform values.</li>\n * </ul>\n * <p>\n * <code>delta</code>, <code>sigma</code>, and <code>stepSize</code> are the same properties as {@link PostProcessStageLibrary#createBlurStage}.\n * </p>\n * @return {PostProcessStageComposite} A post-process stage to applies a bloom effect.\n *\n * @private\n */\nPostProcessStageLibrary.createBloomStage = function () {\n  var contrastBias = new PostProcessStage({\n    name: \"czm_bloom_contrast_bias\",\n    fragmentShader: ContrastBias,\n    uniforms: {\n      contrast: 128.0,\n      brightness: -0.3,\n    },\n  });\n  var blur = createBlur(\"czm_bloom_blur\");\n  var generateComposite = new PostProcessStageComposite({\n    name: \"czm_bloom_contrast_bias_blur\",\n    stages: [contrastBias, blur],\n  });\n\n  var bloomComposite = new PostProcessStage({\n    name: \"czm_bloom_generate_composite\",\n    fragmentShader: BloomComposite,\n    uniforms: {\n      glowOnly: false,\n      bloomTexture: generateComposite.name,\n    },\n  });\n\n  var uniforms = {};\n  Object.defineProperties(uniforms, {\n    glowOnly: {\n      get: function () {\n        return bloomComposite.uniforms.glowOnly;\n      },\n      set: function (value) {\n        bloomComposite.uniforms.glowOnly = value;\n      },\n    },\n    contrast: {\n      get: function () {\n        return contrastBias.uniforms.contrast;\n      },\n      set: function (value) {\n        contrastBias.uniforms.contrast = value;\n      },\n    },\n    brightness: {\n      get: function () {\n        return contrastBias.uniforms.brightness;\n      },\n      set: function (value) {\n        contrastBias.uniforms.brightness = value;\n      },\n    },\n    delta: {\n      get: function () {\n        return blur.uniforms.delta;\n      },\n      set: function (value) {\n        blur.uniforms.delta = value;\n      },\n    },\n    sigma: {\n      get: function () {\n        return blur.uniforms.sigma;\n      },\n      set: function (value) {\n        blur.uniforms.sigma = value;\n      },\n    },\n    stepSize: {\n      get: function () {\n        return blur.uniforms.stepSize;\n      },\n      set: function (value) {\n        blur.uniforms.stepSize = value;\n      },\n    },\n  });\n\n  return new PostProcessStageComposite({\n    name: \"czm_bloom\",\n    stages: [generateComposite, bloomComposite],\n    inputPreviousStageTexture: false,\n    uniforms: uniforms,\n  });\n};\n\n/**\n * Creates a post-process stage that Horizon-based Ambient Occlusion (HBAO) to the input texture.\n * <p>\n * Ambient occlusion simulates shadows from ambient light. These shadows would always be present when the\n * surface receives light and regardless of the light's position.\n * </p>\n * <p>\n * The uniforms have the following properties: <code>intensity</code>, <code>bias</code>, <code>lengthCap</code>,\n * <code>stepSize</code>, <code>frustumLength</code>, <code>randomTexture</code>, <code>ambientOcclusionOnly</code>,\n * <code>delta</code>, <code>sigma</code>, and <code>blurStepSize</code>.\n * </p>\n * <ul>\n * <li><code>intensity</code> is a scalar value used to lighten or darken the shadows exponentially. Higher values make the shadows darker. The default value is <code>3.0</code>.</li>\n * <li><code>bias</code> is a scalar value representing an angle in radians. If the dot product between the normal of the sample and the vector to the camera is less than this value,\n * sampling stops in the current direction. This is used to remove shadows from near planar edges. The default value is <code>0.1</code>.</li>\n * <li><code>lengthCap</code> is a scalar value representing a length in meters. If the distance from the current sample to first sample is greater than this value,\n * sampling stops in the current direction. The default value is <code>0.26</code>.</li>\n * <li><code>stepSize</code> is a scalar value indicating the distance to the next texel sample in the current direction. The default value is <code>1.95</code>.</li>\n * <li><code>frustumLength</code> is a scalar value in meters. If the current fragment has a distance from the camera greater than this value, ambient occlusion is not computed for the fragment.\n * The default value is <code>1000.0</code>.</li>\n * <li><code>randomTexture</code> is a texture where the red channel is a random value in [0.0, 1.0]. The default value is <code>undefined</code>. This texture needs to be set.</li>\n * <li><code>ambientOcclusionOnly</code> is a boolean value. When <code>true</code>, only the shadows generated are written to the output. When <code>false</code>, the input texture is modulated\n * with the ambient occlusion. This is a useful debug option for seeing the effects of changing the uniform values. The default value is <code>false</code>.</li>\n * </ul>\n * <p>\n * <code>delta</code>, <code>sigma</code>, and <code>blurStepSize</code> are the same properties as {@link PostProcessStageLibrary#createBlurStage}.\n * The blur is applied to the shadows generated from the image to make them smoother.\n * </p>\n * @return {PostProcessStageComposite} A post-process stage that applies an ambient occlusion effect.\n *\n * @private\n */\nPostProcessStageLibrary.createAmbientOcclusionStage = function () {\n  var generate = new PostProcessStage({\n    name: \"czm_ambient_occlusion_generate\",\n    fragmentShader: AmbientOcclusionGenerate,\n    uniforms: {\n      intensity: 3.0,\n      bias: 0.1,\n      lengthCap: 0.26,\n      stepSize: 1.95,\n      frustumLength: 1000.0,\n      randomTexture: undefined,\n    },\n  });\n  var blur = createBlur(\"czm_ambient_occlusion_blur\");\n  blur.uniforms.stepSize = 0.86;\n  var generateAndBlur = new PostProcessStageComposite({\n    name: \"czm_ambient_occlusion_generate_blur\",\n    stages: [generate, blur],\n  });\n\n  var ambientOcclusionModulate = new PostProcessStage({\n    name: \"czm_ambient_occlusion_composite\",\n    fragmentShader: AmbientOcclusionModulate,\n    uniforms: {\n      ambientOcclusionOnly: false,\n      ambientOcclusionTexture: generateAndBlur.name,\n    },\n  });\n\n  var uniforms = {};\n  Object.defineProperties(uniforms, {\n    intensity: {\n      get: function () {\n        return generate.uniforms.intensity;\n      },\n      set: function (value) {\n        generate.uniforms.intensity = value;\n      },\n    },\n    bias: {\n      get: function () {\n        return generate.uniforms.bias;\n      },\n      set: function (value) {\n        generate.uniforms.bias = value;\n      },\n    },\n    lengthCap: {\n      get: function () {\n        return generate.uniforms.lengthCap;\n      },\n      set: function (value) {\n        generate.uniforms.lengthCap = value;\n      },\n    },\n    stepSize: {\n      get: function () {\n        return generate.uniforms.stepSize;\n      },\n      set: function (value) {\n        generate.uniforms.stepSize = value;\n      },\n    },\n    frustumLength: {\n      get: function () {\n        return generate.uniforms.frustumLength;\n      },\n      set: function (value) {\n        generate.uniforms.frustumLength = value;\n      },\n    },\n    randomTexture: {\n      get: function () {\n        return generate.uniforms.randomTexture;\n      },\n      set: function (value) {\n        generate.uniforms.randomTexture = value;\n      },\n    },\n    delta: {\n      get: function () {\n        return blur.uniforms.delta;\n      },\n      set: function (value) {\n        blur.uniforms.delta = value;\n      },\n    },\n    sigma: {\n      get: function () {\n        return blur.uniforms.sigma;\n      },\n      set: function (value) {\n        blur.uniforms.sigma = value;\n      },\n    },\n    blurStepSize: {\n      get: function () {\n        return blur.uniforms.stepSize;\n      },\n      set: function (value) {\n        blur.uniforms.stepSize = value;\n      },\n    },\n    ambientOcclusionOnly: {\n      get: function () {\n        return ambientOcclusionModulate.uniforms.ambientOcclusionOnly;\n      },\n      set: function (value) {\n        ambientOcclusionModulate.uniforms.ambientOcclusionOnly = value;\n      },\n    },\n  });\n\n  return new PostProcessStageComposite({\n    name: \"czm_ambient_occlusion\",\n    stages: [generateAndBlur, ambientOcclusionModulate],\n    inputPreviousStageTexture: false,\n    uniforms: uniforms,\n  });\n};\n\n/**\n * Whether or not an ambient occlusion stage is supported.\n * <p>\n * This stage requires the WEBGL_depth_texture extension.\n * </p>\n *\n * @param {Scene} scene The scene.\n * @return {Boolean} Whether this post process stage is supported.\n *\n * @see {Context#depthTexture}\n * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/|WEBGL_depth_texture}\n */\nPostProcessStageLibrary.isAmbientOcclusionSupported = function (scene) {\n  return scene.context.depthTexture;\n};\n\nvar fxaaFS = \"#define FXAA_QUALITY_PRESET 39 \\n\" + FXAA3_11 + \"\\n\" + FXAA;\n\n/**\n * Creates a post-process stage that applies Fast Approximate Anti-aliasing (FXAA) to the input texture.\n * @return {PostProcessStage} A post-process stage that applies Fast Approximate Anti-aliasing to the input texture.\n *\n * @private\n */\nPostProcessStageLibrary.createFXAAStage = function () {\n  return new PostProcessStage({\n    name: \"czm_FXAA\",\n    fragmentShader: fxaaFS,\n    sampleMode: PostProcessStageSampleMode.LINEAR,\n  });\n};\n\n/**\n * Creates a post-process stage that applies ACES tonemapping operator.\n * @param {Boolean} useAutoExposure Whether or not to use auto-exposure.\n * @return {PostProcessStage} A post-process stage that applies ACES tonemapping operator.\n * @private\n */\nPostProcessStageLibrary.createAcesTonemappingStage = function (\n  useAutoExposure\n) {\n  var fs = useAutoExposure ? \"#define AUTO_EXPOSURE\\n\" : \"\";\n  fs += AcesTonemapping;\n  return new PostProcessStage({\n    name: \"czm_aces\",\n    fragmentShader: fs,\n    uniforms: {\n      autoExposure: undefined,\n    },\n  });\n};\n\n/**\n * Creates a post-process stage that applies filmic tonemapping operator.\n * @param {Boolean} useAutoExposure Whether or not to use auto-exposure.\n * @return {PostProcessStage} A post-process stage that applies filmic tonemapping operator.\n * @private\n */\nPostProcessStageLibrary.createFilmicTonemappingStage = function (\n  useAutoExposure\n) {\n  var fs = useAutoExposure ? \"#define AUTO_EXPOSURE\\n\" : \"\";\n  fs += FilmicTonemapping;\n  return new PostProcessStage({\n    name: \"czm_filmic\",\n    fragmentShader: fs,\n    uniforms: {\n      autoExposure: undefined,\n    },\n  });\n};\n\n/**\n * Creates a post-process stage that applies Reinhard tonemapping operator.\n * @param {Boolean} useAutoExposure Whether or not to use auto-exposure.\n * @return {PostProcessStage} A post-process stage that applies Reinhard tonemapping operator.\n * @private\n */\nPostProcessStageLibrary.createReinhardTonemappingStage = function (\n  useAutoExposure\n) {\n  var fs = useAutoExposure ? \"#define AUTO_EXPOSURE\\n\" : \"\";\n  fs += ReinhardTonemapping;\n  return new PostProcessStage({\n    name: \"czm_reinhard\",\n    fragmentShader: fs,\n    uniforms: {\n      autoExposure: undefined,\n    },\n  });\n};\n\n/**\n * Creates a post-process stage that applies modified Reinhard tonemapping operator.\n * @param {Boolean} useAutoExposure Whether or not to use auto-exposure.\n * @return {PostProcessStage} A post-process stage that applies modified Reinhard tonemapping operator.\n * @private\n */\nPostProcessStageLibrary.createModifiedReinhardTonemappingStage = function (\n  useAutoExposure\n) {\n  var fs = useAutoExposure ? \"#define AUTO_EXPOSURE\\n\" : \"\";\n  fs += ModifiedReinhardTonemapping;\n  return new PostProcessStage({\n    name: \"czm_modified_reinhard\",\n    fragmentShader: fs,\n    uniforms: {\n      white: Color.WHITE,\n      autoExposure: undefined,\n    },\n  });\n};\n\n/**\n * Creates a post-process stage that finds the average luminance of the input texture.\n * @return {PostProcessStage} A post-process stage that finds the average luminance of the input texture.\n * @private\n */\nPostProcessStageLibrary.createAutoExposureStage = function () {\n  return new AutoExposure();\n};\n\n/**\n * Creates a post-process stage that renders the input texture with black and white gradations.\n * <p>\n * This stage has one uniform value, <code>gradations</code>, which scales the luminance of each pixel.\n * </p>\n * @return {PostProcessStage} A post-process stage that renders the input texture with black and white gradations.\n */\nPostProcessStageLibrary.createBlackAndWhiteStage = function () {\n  return new PostProcessStage({\n    name: \"czm_black_and_white\",\n    fragmentShader: BlackAndWhite,\n    uniforms: {\n      gradations: 5.0,\n    },\n  });\n};\n\n/**\n * Creates a post-process stage that saturates the input texture.\n * <p>\n * This stage has one uniform value, <code>brightness</code>, which scales the saturation of each pixel.\n * </p>\n * @return {PostProcessStage} A post-process stage that saturates the input texture.\n */\nPostProcessStageLibrary.createBrightnessStage = function () {\n  return new PostProcessStage({\n    name: \"czm_brightness\",\n    fragmentShader: Brightness,\n    uniforms: {\n      brightness: 0.5,\n    },\n  });\n};\n\n/**\n * Creates a post-process stage that adds a night vision effect to the input texture.\n * @return {PostProcessStage} A post-process stage that adds a night vision effect to the input texture.\n */\nPostProcessStageLibrary.createNightVisionStage = function () {\n  return new PostProcessStage({\n    name: \"czm_night_vision\",\n    fragmentShader: NightVision,\n  });\n};\n\n/**\n * Creates a post-process stage that replaces the input color texture with a black and white texture representing the fragment depth at each pixel.\n * @return {PostProcessStage} A post-process stage that replaces the input color texture with a black and white texture representing the fragment depth at each pixel.\n *\n * @private\n */\nPostProcessStageLibrary.createDepthViewStage = function () {\n  return new PostProcessStage({\n    name: \"czm_depth_view\",\n    fragmentShader: DepthView,\n  });\n};\n\n/**\n * Creates a post-process stage that applies an effect simulating light flaring a camera lens.\n * <p>\n * This stage has the following uniforms: <code>dirtTexture</code>, <code>starTexture</code>, <code>intensity</code>, <code>distortion</code>, <code>ghostDispersal</code>,\n * <code>haloWidth</code>, <code>dirtAmount</code>, and <code>earthRadius</code>.\n * <ul>\n * <li><code>dirtTexture</code> is a texture sampled to simulate dirt on the lens.</li>\n * <li><code>starTexture</code> is the texture sampled for the star pattern of the flare.</li>\n * <li><code>intensity</code> is a scalar multiplied by the result of the lens flare. The default value is <code>2.0</code>.</li>\n * <li><code>distortion</code> is a scalar value that affects the chromatic effect distortion. The default value is <code>10.0</code>.</li>\n * <li><code>ghostDispersal</code> is a scalar indicating how far the halo effect is from the center of the texture. The default value is <code>0.4</code>.</li>\n * <li><code>haloWidth</code> is a scalar representing the width of the halo  from the ghost dispersal. The default value is <code>0.4</code>.</li>\n * <li><code>dirtAmount</code> is a scalar representing the amount of dirt on the lens. The default value is <code>0.4</code>.</li>\n * <li><code>earthRadius</code> is the maximum radius of the earth. The default value is <code>Ellipsoid.WGS84.maximumRadius</code>.</li>\n * </ul>\n * </p>\n * @return {PostProcessStage} A post-process stage for applying a lens flare effect.\n */\nPostProcessStageLibrary.createLensFlareStage = function () {\n  return new PostProcessStage({\n    name: \"czm_lens_flare\",\n    fragmentShader: LensFlare,\n    uniforms: {\n      dirtTexture: buildModuleUrl(\"Assets/Textures/LensFlare/DirtMask.jpg\"),\n      starTexture: buildModuleUrl(\"Assets/Textures/LensFlare/StarBurst.jpg\"),\n      intensity: 2.0,\n      distortion: 10.0,\n      ghostDispersal: 0.4,\n      haloWidth: 0.4,\n      dirtAmount: 0.4,\n      earthRadius: Ellipsoid.WGS84.maximumRadius,\n    },\n  });\n};\nexport default PostProcessStageLibrary;\n"]},"metadata":{},"sourceType":"module"}