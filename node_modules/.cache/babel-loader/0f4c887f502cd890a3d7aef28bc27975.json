{"ast":null,"code":"import defined from \"../Core/defined.js\";\n/**\n * Describes a rasterized feature, such as a point, polygon, polyline, etc., in an imagery layer.\n *\n * @alias ImageryLayerFeatureInfo\n * @constructor\n */\n\nfunction ImageryLayerFeatureInfo() {\n  /**\n   * Gets or sets the name of the feature.\n   * @type {String}\n   */\n  this.name = undefined;\n  /**\n   * Gets or sets an HTML description of the feature.  The HTML is not trusted and should\n   * be sanitized before display to the user.\n   * @type {String}\n   */\n\n  this.description = undefined;\n  /**\n   * Gets or sets the position of the feature, or undefined if the position is not known.\n   *\n   * @type {Cartographic}\n   */\n\n  this.position = undefined;\n  /**\n   * Gets or sets the raw data describing the feature.  The raw data may be in any\n   * number of formats, such as GeoJSON, KML, etc.\n   * @type {Object}\n   */\n\n  this.data = undefined;\n  /**\n   * Gets or sets the image layer of the feature.\n   * @type {Object}\n   */\n\n  this.imageryLayer = undefined;\n}\n/**\n * Configures the name of this feature by selecting an appropriate property.  The name will be obtained from\n * one of the following sources, in this order: 1) the property with the name 'name', 2) the property with the name 'title',\n * 3) the first property containing the word 'name', 4) the first property containing the word 'title'.  If\n * the name cannot be obtained from any of these sources, the existing name will be left unchanged.\n *\n * @param {Object} properties An object literal containing the properties of the feature.\n */\n\n\nImageryLayerFeatureInfo.prototype.configureNameFromProperties = function (properties) {\n  var namePropertyPrecedence = 10;\n  var nameProperty;\n\n  for (var key in properties) {\n    if (properties.hasOwnProperty(key) && properties[key]) {\n      var lowerKey = key.toLowerCase();\n\n      if (namePropertyPrecedence > 1 && lowerKey === \"name\") {\n        namePropertyPrecedence = 1;\n        nameProperty = key;\n      } else if (namePropertyPrecedence > 2 && lowerKey === \"title\") {\n        namePropertyPrecedence = 2;\n        nameProperty = key;\n      } else if (namePropertyPrecedence > 3 && /name/i.test(key)) {\n        namePropertyPrecedence = 3;\n        nameProperty = key;\n      } else if (namePropertyPrecedence > 4 && /title/i.test(key)) {\n        namePropertyPrecedence = 4;\n        nameProperty = key;\n      }\n    }\n  }\n\n  if (defined(nameProperty)) {\n    this.name = properties[nameProperty];\n  }\n};\n/**\n * Configures the description of this feature by creating an HTML table of properties and their values.\n *\n * @param {Object} properties An object literal containing the properties of the feature.\n */\n\n\nImageryLayerFeatureInfo.prototype.configureDescriptionFromProperties = function (properties) {\n  function describe(properties) {\n    var html = '<table class=\"cesium-infoBox-defaultTable\">';\n\n    for (var key in properties) {\n      if (properties.hasOwnProperty(key)) {\n        var value = properties[key];\n\n        if (defined(value)) {\n          if (typeof value === \"object\") {\n            html += \"<tr><td>\" + key + \"</td><td>\" + describe(value) + \"</td></tr>\";\n          } else {\n            html += \"<tr><td>\" + key + \"</td><td>\" + value + \"</td></tr>\";\n          }\n        }\n      }\n    }\n\n    html += \"</table>\";\n    return html;\n  }\n\n  this.description = describe(properties);\n};\n\nexport default ImageryLayerFeatureInfo;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/ImageryLayerFeatureInfo.js"],"names":["defined","ImageryLayerFeatureInfo","name","undefined","description","position","data","imageryLayer","prototype","configureNameFromProperties","properties","namePropertyPrecedence","nameProperty","key","hasOwnProperty","lowerKey","toLowerCase","test","configureDescriptionFromProperties","describe","html","value"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,oBAApB;AAEA;;;;;;;AAMA,SAASC,uBAAT,GAAmC;AACjC;;;;AAIA,OAAKC,IAAL,GAAYC,SAAZ;AAEA;;;;;;AAKA,OAAKC,WAAL,GAAmBD,SAAnB;AAEA;;;;;;AAKA,OAAKE,QAAL,GAAgBF,SAAhB;AAEA;;;;;;AAKA,OAAKG,IAAL,GAAYH,SAAZ;AAEA;;;;;AAIA,OAAKI,YAAL,GAAoBJ,SAApB;AACD;AAED;;;;;;;;;;AAQAF,uBAAuB,CAACO,SAAxB,CAAkCC,2BAAlC,GAAgE,UAC9DC,UAD8D,EAE9D;AACA,MAAIC,sBAAsB,GAAG,EAA7B;AACA,MAAIC,YAAJ;;AAEA,OAAK,IAAIC,GAAT,IAAgBH,UAAhB,EAA4B;AAC1B,QAAIA,UAAU,CAACI,cAAX,CAA0BD,GAA1B,KAAkCH,UAAU,CAACG,GAAD,CAAhD,EAAuD;AACrD,UAAIE,QAAQ,GAAGF,GAAG,CAACG,WAAJ,EAAf;;AAEA,UAAIL,sBAAsB,GAAG,CAAzB,IAA8BI,QAAQ,KAAK,MAA/C,EAAuD;AACrDJ,QAAAA,sBAAsB,GAAG,CAAzB;AACAC,QAAAA,YAAY,GAAGC,GAAf;AACD,OAHD,MAGO,IAAIF,sBAAsB,GAAG,CAAzB,IAA8BI,QAAQ,KAAK,OAA/C,EAAwD;AAC7DJ,QAAAA,sBAAsB,GAAG,CAAzB;AACAC,QAAAA,YAAY,GAAGC,GAAf;AACD,OAHM,MAGA,IAAIF,sBAAsB,GAAG,CAAzB,IAA8B,QAAQM,IAAR,CAAaJ,GAAb,CAAlC,EAAqD;AAC1DF,QAAAA,sBAAsB,GAAG,CAAzB;AACAC,QAAAA,YAAY,GAAGC,GAAf;AACD,OAHM,MAGA,IAAIF,sBAAsB,GAAG,CAAzB,IAA8B,SAASM,IAAT,CAAcJ,GAAd,CAAlC,EAAsD;AAC3DF,QAAAA,sBAAsB,GAAG,CAAzB;AACAC,QAAAA,YAAY,GAAGC,GAAf;AACD;AACF;AACF;;AAED,MAAIb,OAAO,CAACY,YAAD,CAAX,EAA2B;AACzB,SAAKV,IAAL,GAAYQ,UAAU,CAACE,YAAD,CAAtB;AACD;AACF,CA7BD;AA+BA;;;;;;;AAKAX,uBAAuB,CAACO,SAAxB,CAAkCU,kCAAlC,GAAuE,UACrER,UADqE,EAErE;AACA,WAASS,QAAT,CAAkBT,UAAlB,EAA8B;AAC5B,QAAIU,IAAI,GAAG,6CAAX;;AACA,SAAK,IAAIP,GAAT,IAAgBH,UAAhB,EAA4B;AAC1B,UAAIA,UAAU,CAACI,cAAX,CAA0BD,GAA1B,CAAJ,EAAoC;AAClC,YAAIQ,KAAK,GAAGX,UAAU,CAACG,GAAD,CAAtB;;AACA,YAAIb,OAAO,CAACqB,KAAD,CAAX,EAAoB;AAClB,cAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BD,YAAAA,IAAI,IACF,aAAaP,GAAb,GAAmB,WAAnB,GAAiCM,QAAQ,CAACE,KAAD,CAAzC,GAAmD,YADrD;AAED,WAHD,MAGO;AACLD,YAAAA,IAAI,IAAI,aAAaP,GAAb,GAAmB,WAAnB,GAAiCQ,KAAjC,GAAyC,YAAjD;AACD;AACF;AACF;AACF;;AACDD,IAAAA,IAAI,IAAI,UAAR;AAEA,WAAOA,IAAP;AACD;;AAED,OAAKhB,WAAL,GAAmBe,QAAQ,CAACT,UAAD,CAA3B;AACD,CAxBD;;AAyBA,eAAeT,uBAAf","sourcesContent":["import defined from \"../Core/defined.js\";\n\n/**\n * Describes a rasterized feature, such as a point, polygon, polyline, etc., in an imagery layer.\n *\n * @alias ImageryLayerFeatureInfo\n * @constructor\n */\nfunction ImageryLayerFeatureInfo() {\n  /**\n   * Gets or sets the name of the feature.\n   * @type {String}\n   */\n  this.name = undefined;\n\n  /**\n   * Gets or sets an HTML description of the feature.  The HTML is not trusted and should\n   * be sanitized before display to the user.\n   * @type {String}\n   */\n  this.description = undefined;\n\n  /**\n   * Gets or sets the position of the feature, or undefined if the position is not known.\n   *\n   * @type {Cartographic}\n   */\n  this.position = undefined;\n\n  /**\n   * Gets or sets the raw data describing the feature.  The raw data may be in any\n   * number of formats, such as GeoJSON, KML, etc.\n   * @type {Object}\n   */\n  this.data = undefined;\n\n  /**\n   * Gets or sets the image layer of the feature.\n   * @type {Object}\n   */\n  this.imageryLayer = undefined;\n}\n\n/**\n * Configures the name of this feature by selecting an appropriate property.  The name will be obtained from\n * one of the following sources, in this order: 1) the property with the name 'name', 2) the property with the name 'title',\n * 3) the first property containing the word 'name', 4) the first property containing the word 'title'.  If\n * the name cannot be obtained from any of these sources, the existing name will be left unchanged.\n *\n * @param {Object} properties An object literal containing the properties of the feature.\n */\nImageryLayerFeatureInfo.prototype.configureNameFromProperties = function (\n  properties\n) {\n  var namePropertyPrecedence = 10;\n  var nameProperty;\n\n  for (var key in properties) {\n    if (properties.hasOwnProperty(key) && properties[key]) {\n      var lowerKey = key.toLowerCase();\n\n      if (namePropertyPrecedence > 1 && lowerKey === \"name\") {\n        namePropertyPrecedence = 1;\n        nameProperty = key;\n      } else if (namePropertyPrecedence > 2 && lowerKey === \"title\") {\n        namePropertyPrecedence = 2;\n        nameProperty = key;\n      } else if (namePropertyPrecedence > 3 && /name/i.test(key)) {\n        namePropertyPrecedence = 3;\n        nameProperty = key;\n      } else if (namePropertyPrecedence > 4 && /title/i.test(key)) {\n        namePropertyPrecedence = 4;\n        nameProperty = key;\n      }\n    }\n  }\n\n  if (defined(nameProperty)) {\n    this.name = properties[nameProperty];\n  }\n};\n\n/**\n * Configures the description of this feature by creating an HTML table of properties and their values.\n *\n * @param {Object} properties An object literal containing the properties of the feature.\n */\nImageryLayerFeatureInfo.prototype.configureDescriptionFromProperties = function (\n  properties\n) {\n  function describe(properties) {\n    var html = '<table class=\"cesium-infoBox-defaultTable\">';\n    for (var key in properties) {\n      if (properties.hasOwnProperty(key)) {\n        var value = properties[key];\n        if (defined(value)) {\n          if (typeof value === \"object\") {\n            html +=\n              \"<tr><td>\" + key + \"</td><td>\" + describe(value) + \"</td></tr>\";\n          } else {\n            html += \"<tr><td>\" + key + \"</td><td>\" + value + \"</td></tr>\";\n          }\n        }\n      }\n    }\n    html += \"</table>\";\n\n    return html;\n  }\n\n  this.description = describe(properties);\n};\nexport default ImageryLayerFeatureInfo;\n"]},"metadata":{},"sourceType":"module"}