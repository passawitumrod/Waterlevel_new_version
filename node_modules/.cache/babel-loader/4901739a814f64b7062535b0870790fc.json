{"ast":null,"code":"import Check from \"./Check.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ion from \"./Ion.js\";\nimport PeliasGeocoderService from \"./PeliasGeocoderService.js\";\nimport Resource from \"./Resource.js\";\n/**\n * Provides geocoding through Cesium ion.\n * @alias IonGeocoderService\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Scene} options.scene The scene\n * @param {String} [options.accessToken=Ion.defaultAccessToken] The access token to use.\n * @param {String} [options.accessToken=Ion.defaultAccessToken] The access token to use.\n * @param {String|Resource} [options.server=Ion.defaultServer] The resource to the Cesium ion API server.\n *\n * @see Ion\n */\n\nfunction IonGeocoderService(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT); //>>includeStart('debug', pragmas.debug);\n\n  Check.typeOf.object(\"options.scene\", options.scene); //>>includeEnd('debug');\n\n  var accessToken = defaultValue(options.accessToken, Ion.defaultAccessToken);\n  var server = Resource.createIfNeeded(defaultValue(options.server, Ion.defaultServer));\n  server.appendForwardSlash();\n  var defaultTokenCredit = Ion.getDefaultTokenCredit(accessToken);\n\n  if (defined(defaultTokenCredit)) {\n    options.scene.frameState.creditDisplay.addDefaultCredit(Credit.clone(defaultTokenCredit));\n  }\n\n  var searchEndpoint = server.getDerivedResource({\n    url: \"v1/geocode\"\n  });\n\n  if (defined(accessToken)) {\n    searchEndpoint.appendQueryParameters({\n      access_token: accessToken\n    });\n  }\n\n  this._accessToken = accessToken;\n  this._server = server;\n  this._pelias = new PeliasGeocoderService(searchEndpoint);\n}\n/**\n * @function\n *\n * @param {String} query The query to be sent to the geocoder service\n * @param {GeocodeType} [type=GeocodeType.SEARCH] The type of geocode to perform.\n * @returns {Promise<GeocoderService~Result[]>}\n */\n\n\nIonGeocoderService.prototype.geocode = function (query, geocodeType) {\n  return this._pelias.geocode(query, geocodeType);\n};\n\nexport default IonGeocoderService;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/IonGeocoderService.js"],"names":["Check","Credit","defaultValue","defined","Ion","PeliasGeocoderService","Resource","IonGeocoderService","options","EMPTY_OBJECT","typeOf","object","scene","accessToken","defaultAccessToken","server","createIfNeeded","defaultServer","appendForwardSlash","defaultTokenCredit","getDefaultTokenCredit","frameState","creditDisplay","addDefaultCredit","clone","searchEndpoint","getDerivedResource","url","appendQueryParameters","access_token","_accessToken","_server","_pelias","prototype","geocode","query","geocodeType"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,qBAAP,MAAkC,4BAAlC;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA;;;;;;;;;;;;;;AAaA,SAASC,kBAAT,CAA4BC,OAA5B,EAAqC;AACnCA,EAAAA,OAAO,GAAGN,YAAY,CAACM,OAAD,EAAUN,YAAY,CAACO,YAAvB,CAAtB,CADmC,CAGnC;;AACAT,EAAAA,KAAK,CAACU,MAAN,CAAaC,MAAb,CAAoB,eAApB,EAAqCH,OAAO,CAACI,KAA7C,EAJmC,CAKnC;;AAEA,MAAIC,WAAW,GAAGX,YAAY,CAACM,OAAO,CAACK,WAAT,EAAsBT,GAAG,CAACU,kBAA1B,CAA9B;AACA,MAAIC,MAAM,GAAGT,QAAQ,CAACU,cAAT,CACXd,YAAY,CAACM,OAAO,CAACO,MAAT,EAAiBX,GAAG,CAACa,aAArB,CADD,CAAb;AAGAF,EAAAA,MAAM,CAACG,kBAAP;AAEA,MAAIC,kBAAkB,GAAGf,GAAG,CAACgB,qBAAJ,CAA0BP,WAA1B,CAAzB;;AACA,MAAIV,OAAO,CAACgB,kBAAD,CAAX,EAAiC;AAC/BX,IAAAA,OAAO,CAACI,KAAR,CAAcS,UAAd,CAAyBC,aAAzB,CAAuCC,gBAAvC,CACEtB,MAAM,CAACuB,KAAP,CAAaL,kBAAb,CADF;AAGD;;AAED,MAAIM,cAAc,GAAGV,MAAM,CAACW,kBAAP,CAA0B;AAC7CC,IAAAA,GAAG,EAAE;AADwC,GAA1B,CAArB;;AAIA,MAAIxB,OAAO,CAACU,WAAD,CAAX,EAA0B;AACxBY,IAAAA,cAAc,CAACG,qBAAf,CAAqC;AAAEC,MAAAA,YAAY,EAAEhB;AAAhB,KAArC;AACD;;AAED,OAAKiB,YAAL,GAAoBjB,WAApB;AACA,OAAKkB,OAAL,GAAehB,MAAf;AACA,OAAKiB,OAAL,GAAe,IAAI3B,qBAAJ,CAA0BoB,cAA1B,CAAf;AACD;AAED;;;;;;;;;AAOAlB,kBAAkB,CAAC0B,SAAnB,CAA6BC,OAA7B,GAAuC,UAAUC,KAAV,EAAiBC,WAAjB,EAA8B;AACnE,SAAO,KAAKJ,OAAL,CAAaE,OAAb,CAAqBC,KAArB,EAA4BC,WAA5B,CAAP;AACD,CAFD;;AAGA,eAAe7B,kBAAf","sourcesContent":["import Check from \"./Check.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ion from \"./Ion.js\";\nimport PeliasGeocoderService from \"./PeliasGeocoderService.js\";\nimport Resource from \"./Resource.js\";\n\n/**\n * Provides geocoding through Cesium ion.\n * @alias IonGeocoderService\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Scene} options.scene The scene\n * @param {String} [options.accessToken=Ion.defaultAccessToken] The access token to use.\n * @param {String} [options.accessToken=Ion.defaultAccessToken] The access token to use.\n * @param {String|Resource} [options.server=Ion.defaultServer] The resource to the Cesium ion API server.\n *\n * @see Ion\n */\nfunction IonGeocoderService(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.scene\", options.scene);\n  //>>includeEnd('debug');\n\n  var accessToken = defaultValue(options.accessToken, Ion.defaultAccessToken);\n  var server = Resource.createIfNeeded(\n    defaultValue(options.server, Ion.defaultServer)\n  );\n  server.appendForwardSlash();\n\n  var defaultTokenCredit = Ion.getDefaultTokenCredit(accessToken);\n  if (defined(defaultTokenCredit)) {\n    options.scene.frameState.creditDisplay.addDefaultCredit(\n      Credit.clone(defaultTokenCredit)\n    );\n  }\n\n  var searchEndpoint = server.getDerivedResource({\n    url: \"v1/geocode\",\n  });\n\n  if (defined(accessToken)) {\n    searchEndpoint.appendQueryParameters({ access_token: accessToken });\n  }\n\n  this._accessToken = accessToken;\n  this._server = server;\n  this._pelias = new PeliasGeocoderService(searchEndpoint);\n}\n\n/**\n * @function\n *\n * @param {String} query The query to be sent to the geocoder service\n * @param {GeocodeType} [type=GeocodeType.SEARCH] The type of geocode to perform.\n * @returns {Promise<GeocoderService~Result[]>}\n */\nIonGeocoderService.prototype.geocode = function (query, geocodeType) {\n  return this._pelias.geocode(query, geocodeType);\n};\nexport default IonGeocoderService;\n"]},"metadata":{},"sourceType":"module"}