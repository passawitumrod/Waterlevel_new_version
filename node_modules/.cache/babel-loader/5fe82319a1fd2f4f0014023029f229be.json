{"ast":null,"code":"import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n/**\n * A convenience object that simplifies the common pattern of attaching event listeners\n * to several events, then removing all those listeners at once later, for example, in\n * a destroy method.\n *\n * @alias EventHelper\n * @constructor\n *\n *\n * @example\n * var helper = new Cesium.EventHelper();\n *\n * helper.add(someObject.event, listener1, this);\n * helper.add(otherObject.event, listener2, this);\n *\n * // later...\n * helper.removeAll();\n *\n * @see Event\n */\n\nfunction EventHelper() {\n  this._removalFunctions = [];\n}\n/**\n * Adds a listener to an event, and records the registration to be cleaned up later.\n *\n * @param {Event} event The event to attach to.\n * @param {Function} listener The function to be executed when the event is raised.\n * @param {Object} [scope] An optional object scope to serve as the <code>this</code>\n *        pointer in which the listener function will execute.\n * @returns {EventHelper~RemoveCallback} A function that will remove this event listener when invoked.\n *\n * @see Event#addEventListener\n */\n\n\nEventHelper.prototype.add = function (event, listener, scope) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(event)) {\n    throw new DeveloperError(\"event is required\");\n  } //>>includeEnd('debug');\n\n\n  var removalFunction = event.addEventListener(listener, scope);\n\n  this._removalFunctions.push(removalFunction);\n\n  var that = this;\n  return function () {\n    removalFunction();\n    var removalFunctions = that._removalFunctions;\n    removalFunctions.splice(removalFunctions.indexOf(removalFunction), 1);\n  };\n};\n/**\n * Unregisters all previously added listeners.\n *\n * @see Event#removeEventListener\n */\n\n\nEventHelper.prototype.removeAll = function () {\n  var removalFunctions = this._removalFunctions;\n\n  for (var i = 0, len = removalFunctions.length; i < len; ++i) {\n    removalFunctions[i]();\n  }\n\n  removalFunctions.length = 0;\n};\n/**\n * A function that removes a listener.\n * @callback EventHelper~RemoveCallback\n */\n\n\nexport default EventHelper;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/EventHelper.js"],"names":["defined","DeveloperError","EventHelper","_removalFunctions","prototype","add","event","listener","scope","removalFunction","addEventListener","push","that","removalFunctions","splice","indexOf","removeAll","i","len","length"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AAEA;;;;;;;;;;;;;;;;;;;;;AAoBA,SAASC,WAAT,GAAuB;AACrB,OAAKC,iBAAL,GAAyB,EAAzB;AACD;AAED;;;;;;;;;;;;;AAWAD,WAAW,CAACE,SAAZ,CAAsBC,GAAtB,GAA4B,UAAUC,KAAV,EAAiBC,QAAjB,EAA2BC,KAA3B,EAAkC;AAC5D;AACA,MAAI,CAACR,OAAO,CAACM,KAAD,CAAZ,EAAqB;AACnB,UAAM,IAAIL,cAAJ,CAAmB,mBAAnB,CAAN;AACD,GAJ2D,CAK5D;;;AAEA,MAAIQ,eAAe,GAAGH,KAAK,CAACI,gBAAN,CAAuBH,QAAvB,EAAiCC,KAAjC,CAAtB;;AACA,OAAKL,iBAAL,CAAuBQ,IAAvB,CAA4BF,eAA5B;;AAEA,MAAIG,IAAI,GAAG,IAAX;AACA,SAAO,YAAY;AACjBH,IAAAA,eAAe;AACf,QAAII,gBAAgB,GAAGD,IAAI,CAACT,iBAA5B;AACAU,IAAAA,gBAAgB,CAACC,MAAjB,CAAwBD,gBAAgB,CAACE,OAAjB,CAAyBN,eAAzB,CAAxB,EAAmE,CAAnE;AACD,GAJD;AAKD,CAhBD;AAkBA;;;;;;;AAKAP,WAAW,CAACE,SAAZ,CAAsBY,SAAtB,GAAkC,YAAY;AAC5C,MAAIH,gBAAgB,GAAG,KAAKV,iBAA5B;;AACA,OAAK,IAAIc,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,gBAAgB,CAACM,MAAvC,EAA+CF,CAAC,GAAGC,GAAnD,EAAwD,EAAED,CAA1D,EAA6D;AAC3DJ,IAAAA,gBAAgB,CAACI,CAAD,CAAhB;AACD;;AACDJ,EAAAA,gBAAgB,CAACM,MAAjB,GAA0B,CAA1B;AACD,CAND;AAQA;;;;;;AAIA,eAAejB,WAAf","sourcesContent":["import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * A convenience object that simplifies the common pattern of attaching event listeners\n * to several events, then removing all those listeners at once later, for example, in\n * a destroy method.\n *\n * @alias EventHelper\n * @constructor\n *\n *\n * @example\n * var helper = new Cesium.EventHelper();\n *\n * helper.add(someObject.event, listener1, this);\n * helper.add(otherObject.event, listener2, this);\n *\n * // later...\n * helper.removeAll();\n *\n * @see Event\n */\nfunction EventHelper() {\n  this._removalFunctions = [];\n}\n\n/**\n * Adds a listener to an event, and records the registration to be cleaned up later.\n *\n * @param {Event} event The event to attach to.\n * @param {Function} listener The function to be executed when the event is raised.\n * @param {Object} [scope] An optional object scope to serve as the <code>this</code>\n *        pointer in which the listener function will execute.\n * @returns {EventHelper~RemoveCallback} A function that will remove this event listener when invoked.\n *\n * @see Event#addEventListener\n */\nEventHelper.prototype.add = function (event, listener, scope) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(event)) {\n    throw new DeveloperError(\"event is required\");\n  }\n  //>>includeEnd('debug');\n\n  var removalFunction = event.addEventListener(listener, scope);\n  this._removalFunctions.push(removalFunction);\n\n  var that = this;\n  return function () {\n    removalFunction();\n    var removalFunctions = that._removalFunctions;\n    removalFunctions.splice(removalFunctions.indexOf(removalFunction), 1);\n  };\n};\n\n/**\n * Unregisters all previously added listeners.\n *\n * @see Event#removeEventListener\n */\nEventHelper.prototype.removeAll = function () {\n  var removalFunctions = this._removalFunctions;\n  for (var i = 0, len = removalFunctions.length; i < len; ++i) {\n    removalFunctions[i]();\n  }\n  removalFunctions.length = 0;\n};\n\n/**\n * A function that removes a listener.\n * @callback EventHelper~RemoveCallback\n */\nexport default EventHelper;\n"]},"metadata":{},"sourceType":"module"}