{"ast":null,"code":"import WebGLConstants from \"./WebGLConstants.js\";\n/**\n * The type of a geometric primitive, i.e., points, lines, and triangles.\n *\n * @exports PrimitiveType\n */\n\nvar PrimitiveType = {\n  /**\n   * Points primitive where each vertex (or index) is a separate point.\n   *\n   * @type {Number}\n   * @constant\n   */\n  POINTS: WebGLConstants.POINTS,\n\n  /**\n   * Lines primitive where each two vertices (or indices) is a line segment.  Line segments are not necessarily connected.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LINES: WebGLConstants.LINES,\n\n  /**\n   * Line loop primitive where each vertex (or index) after the first connects a line to\n   * the previous vertex, and the last vertex implicitly connects to the first.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LINE_LOOP: WebGLConstants.LINE_LOOP,\n\n  /**\n   * Line strip primitive where each vertex (or index) after the first connects a line to the previous vertex.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LINE_STRIP: WebGLConstants.LINE_STRIP,\n\n  /**\n   * Triangles primitive where each three vertices (or indices) is a triangle.  Triangles do not necessarily share edges.\n   *\n   * @type {Number}\n   * @constant\n   */\n  TRIANGLES: WebGLConstants.TRIANGLES,\n\n  /**\n   * Triangle strip primitive where each vertex (or index) after the first two connect to\n   * the previous two vertices forming a triangle.  For example, this can be used to model a wall.\n   *\n   * @type {Number}\n   * @constant\n   */\n  TRIANGLE_STRIP: WebGLConstants.TRIANGLE_STRIP,\n\n  /**\n   * Triangle fan primitive where each vertex (or index) after the first two connect to\n   * the previous vertex and the first vertex forming a triangle.  For example, this can be used\n   * to model a cone or circle.\n   *\n   * @type {Number}\n   * @constant\n   */\n  TRIANGLE_FAN: WebGLConstants.TRIANGLE_FAN,\n\n  /**\n   * @private\n   */\n  validate: function validate(primitiveType) {\n    return primitiveType === PrimitiveType.POINTS || primitiveType === PrimitiveType.LINES || primitiveType === PrimitiveType.LINE_LOOP || primitiveType === PrimitiveType.LINE_STRIP || primitiveType === PrimitiveType.TRIANGLES || primitiveType === PrimitiveType.TRIANGLE_STRIP || primitiveType === PrimitiveType.TRIANGLE_FAN;\n  }\n};\nexport default Object.freeze(PrimitiveType);","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/PrimitiveType.js"],"names":["WebGLConstants","PrimitiveType","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","validate","primitiveType","Object","freeze"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,qBAA3B;AAEA;;;;;;AAKA,IAAIC,aAAa,GAAG;AAClB;;;;;;AAMAC,EAAAA,MAAM,EAAEF,cAAc,CAACE,MAPL;;AASlB;;;;;;AAMAC,EAAAA,KAAK,EAAEH,cAAc,CAACG,KAfJ;;AAiBlB;;;;;;;AAOAC,EAAAA,SAAS,EAAEJ,cAAc,CAACI,SAxBR;;AA0BlB;;;;;;AAMAC,EAAAA,UAAU,EAAEL,cAAc,CAACK,UAhCT;;AAkClB;;;;;;AAMAC,EAAAA,SAAS,EAAEN,cAAc,CAACM,SAxCR;;AA0ClB;;;;;;;AAOAC,EAAAA,cAAc,EAAEP,cAAc,CAACO,cAjDb;;AAmDlB;;;;;;;;AAQAC,EAAAA,YAAY,EAAER,cAAc,CAACQ,YA3DX;;AA6DlB;;;AAGAC,EAAAA,QAAQ,EAAE,kBAAUC,aAAV,EAAyB;AACjC,WACEA,aAAa,KAAKT,aAAa,CAACC,MAAhC,IACAQ,aAAa,KAAKT,aAAa,CAACE,KADhC,IAEAO,aAAa,KAAKT,aAAa,CAACG,SAFhC,IAGAM,aAAa,KAAKT,aAAa,CAACI,UAHhC,IAIAK,aAAa,KAAKT,aAAa,CAACK,SAJhC,IAKAI,aAAa,KAAKT,aAAa,CAACM,cALhC,IAMAG,aAAa,KAAKT,aAAa,CAACO,YAPlC;AASD;AA1EiB,CAApB;AA4EA,eAAeG,MAAM,CAACC,MAAP,CAAcX,aAAd,CAAf","sourcesContent":["import WebGLConstants from \"./WebGLConstants.js\";\n\n/**\n * The type of a geometric primitive, i.e., points, lines, and triangles.\n *\n * @exports PrimitiveType\n */\nvar PrimitiveType = {\n  /**\n   * Points primitive where each vertex (or index) is a separate point.\n   *\n   * @type {Number}\n   * @constant\n   */\n  POINTS: WebGLConstants.POINTS,\n\n  /**\n   * Lines primitive where each two vertices (or indices) is a line segment.  Line segments are not necessarily connected.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LINES: WebGLConstants.LINES,\n\n  /**\n   * Line loop primitive where each vertex (or index) after the first connects a line to\n   * the previous vertex, and the last vertex implicitly connects to the first.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LINE_LOOP: WebGLConstants.LINE_LOOP,\n\n  /**\n   * Line strip primitive where each vertex (or index) after the first connects a line to the previous vertex.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LINE_STRIP: WebGLConstants.LINE_STRIP,\n\n  /**\n   * Triangles primitive where each three vertices (or indices) is a triangle.  Triangles do not necessarily share edges.\n   *\n   * @type {Number}\n   * @constant\n   */\n  TRIANGLES: WebGLConstants.TRIANGLES,\n\n  /**\n   * Triangle strip primitive where each vertex (or index) after the first two connect to\n   * the previous two vertices forming a triangle.  For example, this can be used to model a wall.\n   *\n   * @type {Number}\n   * @constant\n   */\n  TRIANGLE_STRIP: WebGLConstants.TRIANGLE_STRIP,\n\n  /**\n   * Triangle fan primitive where each vertex (or index) after the first two connect to\n   * the previous vertex and the first vertex forming a triangle.  For example, this can be used\n   * to model a cone or circle.\n   *\n   * @type {Number}\n   * @constant\n   */\n  TRIANGLE_FAN: WebGLConstants.TRIANGLE_FAN,\n\n  /**\n   * @private\n   */\n  validate: function (primitiveType) {\n    return (\n      primitiveType === PrimitiveType.POINTS ||\n      primitiveType === PrimitiveType.LINES ||\n      primitiveType === PrimitiveType.LINE_LOOP ||\n      primitiveType === PrimitiveType.LINE_STRIP ||\n      primitiveType === PrimitiveType.TRIANGLES ||\n      primitiveType === PrimitiveType.TRIANGLE_STRIP ||\n      primitiveType === PrimitiveType.TRIANGLE_FAN\n    );\n  },\n};\nexport default Object.freeze(PrimitiveType);\n"]},"metadata":{},"sourceType":"module"}