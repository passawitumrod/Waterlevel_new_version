{"ast":null,"code":"import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport WebGLConstants from \"../Core/WebGLConstants.js\";\nimport WindingOrder from \"../Core/WindingOrder.js\";\nimport ContextLimits from \"./ContextLimits.js\";\nimport freezeRenderState from \"./freezeRenderState.js\";\n\nfunction validateBlendEquation(blendEquation) {\n  return blendEquation === WebGLConstants.FUNC_ADD || blendEquation === WebGLConstants.FUNC_SUBTRACT || blendEquation === WebGLConstants.FUNC_REVERSE_SUBTRACT || blendEquation === WebGLConstants.MIN || blendEquation === WebGLConstants.MAX;\n}\n\nfunction validateBlendFunction(blendFunction) {\n  return blendFunction === WebGLConstants.ZERO || blendFunction === WebGLConstants.ONE || blendFunction === WebGLConstants.SRC_COLOR || blendFunction === WebGLConstants.ONE_MINUS_SRC_COLOR || blendFunction === WebGLConstants.DST_COLOR || blendFunction === WebGLConstants.ONE_MINUS_DST_COLOR || blendFunction === WebGLConstants.SRC_ALPHA || blendFunction === WebGLConstants.ONE_MINUS_SRC_ALPHA || blendFunction === WebGLConstants.DST_ALPHA || blendFunction === WebGLConstants.ONE_MINUS_DST_ALPHA || blendFunction === WebGLConstants.CONSTANT_COLOR || blendFunction === WebGLConstants.ONE_MINUS_CONSTANT_COLOR || blendFunction === WebGLConstants.CONSTANT_ALPHA || blendFunction === WebGLConstants.ONE_MINUS_CONSTANT_ALPHA || blendFunction === WebGLConstants.SRC_ALPHA_SATURATE;\n}\n\nfunction validateCullFace(cullFace) {\n  return cullFace === WebGLConstants.FRONT || cullFace === WebGLConstants.BACK || cullFace === WebGLConstants.FRONT_AND_BACK;\n}\n\nfunction validateDepthFunction(depthFunction) {\n  return depthFunction === WebGLConstants.NEVER || depthFunction === WebGLConstants.LESS || depthFunction === WebGLConstants.EQUAL || depthFunction === WebGLConstants.LEQUAL || depthFunction === WebGLConstants.GREATER || depthFunction === WebGLConstants.NOTEQUAL || depthFunction === WebGLConstants.GEQUAL || depthFunction === WebGLConstants.ALWAYS;\n}\n\nfunction validateStencilFunction(stencilFunction) {\n  return stencilFunction === WebGLConstants.NEVER || stencilFunction === WebGLConstants.LESS || stencilFunction === WebGLConstants.EQUAL || stencilFunction === WebGLConstants.LEQUAL || stencilFunction === WebGLConstants.GREATER || stencilFunction === WebGLConstants.NOTEQUAL || stencilFunction === WebGLConstants.GEQUAL || stencilFunction === WebGLConstants.ALWAYS;\n}\n\nfunction validateStencilOperation(stencilOperation) {\n  return stencilOperation === WebGLConstants.ZERO || stencilOperation === WebGLConstants.KEEP || stencilOperation === WebGLConstants.REPLACE || stencilOperation === WebGLConstants.INCR || stencilOperation === WebGLConstants.DECR || stencilOperation === WebGLConstants.INVERT || stencilOperation === WebGLConstants.INCR_WRAP || stencilOperation === WebGLConstants.DECR_WRAP;\n}\n/**\n * @private\n */\n\n\nfunction RenderState(renderState) {\n  var rs = defaultValue(renderState, defaultValue.EMPTY_OBJECT);\n  var cull = defaultValue(rs.cull, defaultValue.EMPTY_OBJECT);\n  var polygonOffset = defaultValue(rs.polygonOffset, defaultValue.EMPTY_OBJECT);\n  var scissorTest = defaultValue(rs.scissorTest, defaultValue.EMPTY_OBJECT);\n  var scissorTestRectangle = defaultValue(scissorTest.rectangle, defaultValue.EMPTY_OBJECT);\n  var depthRange = defaultValue(rs.depthRange, defaultValue.EMPTY_OBJECT);\n  var depthTest = defaultValue(rs.depthTest, defaultValue.EMPTY_OBJECT);\n  var colorMask = defaultValue(rs.colorMask, defaultValue.EMPTY_OBJECT);\n  var blending = defaultValue(rs.blending, defaultValue.EMPTY_OBJECT);\n  var blendingColor = defaultValue(blending.color, defaultValue.EMPTY_OBJECT);\n  var stencilTest = defaultValue(rs.stencilTest, defaultValue.EMPTY_OBJECT);\n  var stencilTestFrontOperation = defaultValue(stencilTest.frontOperation, defaultValue.EMPTY_OBJECT);\n  var stencilTestBackOperation = defaultValue(stencilTest.backOperation, defaultValue.EMPTY_OBJECT);\n  var sampleCoverage = defaultValue(rs.sampleCoverage, defaultValue.EMPTY_OBJECT);\n  var viewport = rs.viewport;\n  this.frontFace = defaultValue(rs.frontFace, WindingOrder.COUNTER_CLOCKWISE);\n  this.cull = {\n    enabled: defaultValue(cull.enabled, false),\n    face: defaultValue(cull.face, WebGLConstants.BACK)\n  };\n  this.lineWidth = defaultValue(rs.lineWidth, 1.0);\n  this.polygonOffset = {\n    enabled: defaultValue(polygonOffset.enabled, false),\n    factor: defaultValue(polygonOffset.factor, 0),\n    units: defaultValue(polygonOffset.units, 0)\n  };\n  this.scissorTest = {\n    enabled: defaultValue(scissorTest.enabled, false),\n    rectangle: BoundingRectangle.clone(scissorTestRectangle)\n  };\n  this.depthRange = {\n    near: defaultValue(depthRange.near, 0),\n    far: defaultValue(depthRange.far, 1)\n  };\n  this.depthTest = {\n    enabled: defaultValue(depthTest.enabled, false),\n    func: defaultValue(depthTest.func, WebGLConstants.LESS) // func, because function is a JavaScript keyword\n\n  };\n  this.colorMask = {\n    red: defaultValue(colorMask.red, true),\n    green: defaultValue(colorMask.green, true),\n    blue: defaultValue(colorMask.blue, true),\n    alpha: defaultValue(colorMask.alpha, true)\n  };\n  this.depthMask = defaultValue(rs.depthMask, true);\n  this.stencilMask = defaultValue(rs.stencilMask, ~0);\n  this.blending = {\n    enabled: defaultValue(blending.enabled, false),\n    color: new Color(defaultValue(blendingColor.red, 0.0), defaultValue(blendingColor.green, 0.0), defaultValue(blendingColor.blue, 0.0), defaultValue(blendingColor.alpha, 0.0)),\n    equationRgb: defaultValue(blending.equationRgb, WebGLConstants.FUNC_ADD),\n    equationAlpha: defaultValue(blending.equationAlpha, WebGLConstants.FUNC_ADD),\n    functionSourceRgb: defaultValue(blending.functionSourceRgb, WebGLConstants.ONE),\n    functionSourceAlpha: defaultValue(blending.functionSourceAlpha, WebGLConstants.ONE),\n    functionDestinationRgb: defaultValue(blending.functionDestinationRgb, WebGLConstants.ZERO),\n    functionDestinationAlpha: defaultValue(blending.functionDestinationAlpha, WebGLConstants.ZERO)\n  };\n  this.stencilTest = {\n    enabled: defaultValue(stencilTest.enabled, false),\n    frontFunction: defaultValue(stencilTest.frontFunction, WebGLConstants.ALWAYS),\n    backFunction: defaultValue(stencilTest.backFunction, WebGLConstants.ALWAYS),\n    reference: defaultValue(stencilTest.reference, 0),\n    mask: defaultValue(stencilTest.mask, ~0),\n    frontOperation: {\n      fail: defaultValue(stencilTestFrontOperation.fail, WebGLConstants.KEEP),\n      zFail: defaultValue(stencilTestFrontOperation.zFail, WebGLConstants.KEEP),\n      zPass: defaultValue(stencilTestFrontOperation.zPass, WebGLConstants.KEEP)\n    },\n    backOperation: {\n      fail: defaultValue(stencilTestBackOperation.fail, WebGLConstants.KEEP),\n      zFail: defaultValue(stencilTestBackOperation.zFail, WebGLConstants.KEEP),\n      zPass: defaultValue(stencilTestBackOperation.zPass, WebGLConstants.KEEP)\n    }\n  };\n  this.sampleCoverage = {\n    enabled: defaultValue(sampleCoverage.enabled, false),\n    value: defaultValue(sampleCoverage.value, 1.0),\n    invert: defaultValue(sampleCoverage.invert, false)\n  };\n  this.viewport = defined(viewport) ? new BoundingRectangle(viewport.x, viewport.y, viewport.width, viewport.height) : undefined; //>>includeStart('debug', pragmas.debug);\n\n  if (this.lineWidth < ContextLimits.minimumAliasedLineWidth || this.lineWidth > ContextLimits.maximumAliasedLineWidth) {\n    throw new DeveloperError(\"renderState.lineWidth is out of range.  Check minimumAliasedLineWidth and maximumAliasedLineWidth.\");\n  }\n\n  if (!WindingOrder.validate(this.frontFace)) {\n    throw new DeveloperError(\"Invalid renderState.frontFace.\");\n  }\n\n  if (!validateCullFace(this.cull.face)) {\n    throw new DeveloperError(\"Invalid renderState.cull.face.\");\n  }\n\n  if (this.scissorTest.rectangle.width < 0 || this.scissorTest.rectangle.height < 0) {\n    throw new DeveloperError(\"renderState.scissorTest.rectangle.width and renderState.scissorTest.rectangle.height must be greater than or equal to zero.\");\n  }\n\n  if (this.depthRange.near > this.depthRange.far) {\n    // WebGL specific - not an error in GL ES\n    throw new DeveloperError(\"renderState.depthRange.near can not be greater than renderState.depthRange.far.\");\n  }\n\n  if (this.depthRange.near < 0) {\n    // Would be clamped by GL\n    throw new DeveloperError(\"renderState.depthRange.near must be greater than or equal to zero.\");\n  }\n\n  if (this.depthRange.far > 1) {\n    // Would be clamped by GL\n    throw new DeveloperError(\"renderState.depthRange.far must be less than or equal to one.\");\n  }\n\n  if (!validateDepthFunction(this.depthTest.func)) {\n    throw new DeveloperError(\"Invalid renderState.depthTest.func.\");\n  }\n\n  if (this.blending.color.red < 0.0 || this.blending.color.red > 1.0 || this.blending.color.green < 0.0 || this.blending.color.green > 1.0 || this.blending.color.blue < 0.0 || this.blending.color.blue > 1.0 || this.blending.color.alpha < 0.0 || this.blending.color.alpha > 1.0) {\n    // Would be clamped by GL\n    throw new DeveloperError(\"renderState.blending.color components must be greater than or equal to zero and less than or equal to one.\");\n  }\n\n  if (!validateBlendEquation(this.blending.equationRgb)) {\n    throw new DeveloperError(\"Invalid renderState.blending.equationRgb.\");\n  }\n\n  if (!validateBlendEquation(this.blending.equationAlpha)) {\n    throw new DeveloperError(\"Invalid renderState.blending.equationAlpha.\");\n  }\n\n  if (!validateBlendFunction(this.blending.functionSourceRgb)) {\n    throw new DeveloperError(\"Invalid renderState.blending.functionSourceRgb.\");\n  }\n\n  if (!validateBlendFunction(this.blending.functionSourceAlpha)) {\n    throw new DeveloperError(\"Invalid renderState.blending.functionSourceAlpha.\");\n  }\n\n  if (!validateBlendFunction(this.blending.functionDestinationRgb)) {\n    throw new DeveloperError(\"Invalid renderState.blending.functionDestinationRgb.\");\n  }\n\n  if (!validateBlendFunction(this.blending.functionDestinationAlpha)) {\n    throw new DeveloperError(\"Invalid renderState.blending.functionDestinationAlpha.\");\n  }\n\n  if (!validateStencilFunction(this.stencilTest.frontFunction)) {\n    throw new DeveloperError(\"Invalid renderState.stencilTest.frontFunction.\");\n  }\n\n  if (!validateStencilFunction(this.stencilTest.backFunction)) {\n    throw new DeveloperError(\"Invalid renderState.stencilTest.backFunction.\");\n  }\n\n  if (!validateStencilOperation(this.stencilTest.frontOperation.fail)) {\n    throw new DeveloperError(\"Invalid renderState.stencilTest.frontOperation.fail.\");\n  }\n\n  if (!validateStencilOperation(this.stencilTest.frontOperation.zFail)) {\n    throw new DeveloperError(\"Invalid renderState.stencilTest.frontOperation.zFail.\");\n  }\n\n  if (!validateStencilOperation(this.stencilTest.frontOperation.zPass)) {\n    throw new DeveloperError(\"Invalid renderState.stencilTest.frontOperation.zPass.\");\n  }\n\n  if (!validateStencilOperation(this.stencilTest.backOperation.fail)) {\n    throw new DeveloperError(\"Invalid renderState.stencilTest.backOperation.fail.\");\n  }\n\n  if (!validateStencilOperation(this.stencilTest.backOperation.zFail)) {\n    throw new DeveloperError(\"Invalid renderState.stencilTest.backOperation.zFail.\");\n  }\n\n  if (!validateStencilOperation(this.stencilTest.backOperation.zPass)) {\n    throw new DeveloperError(\"Invalid renderState.stencilTest.backOperation.zPass.\");\n  }\n\n  if (defined(this.viewport)) {\n    if (this.viewport.width < 0) {\n      throw new DeveloperError(\"renderState.viewport.width must be greater than or equal to zero.\");\n    }\n\n    if (this.viewport.height < 0) {\n      throw new DeveloperError(\"renderState.viewport.height must be greater than or equal to zero.\");\n    }\n\n    if (this.viewport.width > ContextLimits.maximumViewportWidth) {\n      throw new DeveloperError(\"renderState.viewport.width must be less than or equal to the maximum viewport width (\" + ContextLimits.maximumViewportWidth.toString() + \").  Check maximumViewportWidth.\");\n    }\n\n    if (this.viewport.height > ContextLimits.maximumViewportHeight) {\n      throw new DeveloperError(\"renderState.viewport.height must be less than or equal to the maximum viewport height (\" + ContextLimits.maximumViewportHeight.toString() + \").  Check maximumViewportHeight.\");\n    }\n  } //>>includeEnd('debug');\n\n\n  this.id = 0;\n  this._applyFunctions = [];\n}\n\nvar nextRenderStateId = 0;\nvar renderStateCache = {};\n/**\n * Validates and then finds or creates an immutable render state, which defines the pipeline\n * state for a {@link DrawCommand} or {@link ClearCommand}.  All inputs states are optional.  Omitted states\n * use the defaults shown in the example below.\n *\n * @param {Object} [renderState] The states defining the render state as shown in the example below.\n *\n * @exception {RuntimeError} renderState.lineWidth is out of range.\n * @exception {DeveloperError} Invalid renderState.frontFace.\n * @exception {DeveloperError} Invalid renderState.cull.face.\n * @exception {DeveloperError} scissorTest.rectangle.width and scissorTest.rectangle.height must be greater than or equal to zero.\n * @exception {DeveloperError} renderState.depthRange.near can't be greater than renderState.depthRange.far.\n * @exception {DeveloperError} renderState.depthRange.near must be greater than or equal to zero.\n * @exception {DeveloperError} renderState.depthRange.far must be less than or equal to zero.\n * @exception {DeveloperError} Invalid renderState.depthTest.func.\n * @exception {DeveloperError} renderState.blending.color components must be greater than or equal to zero and less than or equal to one\n * @exception {DeveloperError} Invalid renderState.blending.equationRgb.\n * @exception {DeveloperError} Invalid renderState.blending.equationAlpha.\n * @exception {DeveloperError} Invalid renderState.blending.functionSourceRgb.\n * @exception {DeveloperError} Invalid renderState.blending.functionSourceAlpha.\n * @exception {DeveloperError} Invalid renderState.blending.functionDestinationRgb.\n * @exception {DeveloperError} Invalid renderState.blending.functionDestinationAlpha.\n * @exception {DeveloperError} Invalid renderState.stencilTest.frontFunction.\n * @exception {DeveloperError} Invalid renderState.stencilTest.backFunction.\n * @exception {DeveloperError} Invalid renderState.stencilTest.frontOperation.fail.\n * @exception {DeveloperError} Invalid renderState.stencilTest.frontOperation.zFail.\n * @exception {DeveloperError} Invalid renderState.stencilTest.frontOperation.zPass.\n * @exception {DeveloperError} Invalid renderState.stencilTest.backOperation.fail.\n * @exception {DeveloperError} Invalid renderState.stencilTest.backOperation.zFail.\n * @exception {DeveloperError} Invalid renderState.stencilTest.backOperation.zPass.\n * @exception {DeveloperError} renderState.viewport.width must be greater than or equal to zero.\n * @exception {DeveloperError} renderState.viewport.width must be less than or equal to the maximum viewport width.\n * @exception {DeveloperError} renderState.viewport.height must be greater than or equal to zero.\n * @exception {DeveloperError} renderState.viewport.height must be less than or equal to the maximum viewport height.\n *\n *\n * @example\n * var defaults = {\n *     frontFace : WindingOrder.COUNTER_CLOCKWISE,\n *     cull : {\n *         enabled : false,\n *         face : CullFace.BACK\n *     },\n *     lineWidth : 1,\n *     polygonOffset : {\n *         enabled : false,\n *         factor : 0,\n *         units : 0\n *     },\n *     scissorTest : {\n *         enabled : false,\n *         rectangle : {\n *             x : 0,\n *             y : 0,\n *             width : 0,\n *             height : 0\n *         }\n *     },\n *     depthRange : {\n *         near : 0,\n *         far : 1\n *     },\n *     depthTest : {\n *         enabled : false,\n *         func : DepthFunction.LESS\n *      },\n *     colorMask : {\n *         red : true,\n *         green : true,\n *         blue : true,\n *         alpha : true\n *     },\n *     depthMask : true,\n *     stencilMask : ~0,\n *     blending : {\n *         enabled : false,\n *         color : {\n *             red : 0.0,\n *             green : 0.0,\n *             blue : 0.0,\n *             alpha : 0.0\n *         },\n *         equationRgb : BlendEquation.ADD,\n *         equationAlpha : BlendEquation.ADD,\n *         functionSourceRgb : BlendFunction.ONE,\n *         functionSourceAlpha : BlendFunction.ONE,\n *         functionDestinationRgb : BlendFunction.ZERO,\n *         functionDestinationAlpha : BlendFunction.ZERO\n *     },\n *     stencilTest : {\n *         enabled : false,\n *         frontFunction : StencilFunction.ALWAYS,\n *         backFunction : StencilFunction.ALWAYS,\n *         reference : 0,\n *         mask : ~0,\n *         frontOperation : {\n *             fail : StencilOperation.KEEP,\n *             zFail : StencilOperation.KEEP,\n *             zPass : StencilOperation.KEEP\n *         },\n *         backOperation : {\n *             fail : StencilOperation.KEEP,\n *             zFail : StencilOperation.KEEP,\n *             zPass : StencilOperation.KEEP\n *         }\n *     },\n *     sampleCoverage : {\n *         enabled : false,\n *         value : 1.0,\n *         invert : false\n *      }\n * };\n *\n * var rs = RenderState.fromCache(defaults);\n *\n * @see DrawCommand\n * @see ClearCommand\n *\n * @private\n */\n\nRenderState.fromCache = function (renderState) {\n  var partialKey = JSON.stringify(renderState);\n  var cachedState = renderStateCache[partialKey];\n\n  if (defined(cachedState)) {\n    ++cachedState.referenceCount;\n    return cachedState.state;\n  } // Cache miss.  Fully define render state and try again.\n\n\n  var states = new RenderState(renderState);\n  var fullKey = JSON.stringify(states);\n  cachedState = renderStateCache[fullKey];\n\n  if (!defined(cachedState)) {\n    states.id = nextRenderStateId++; //>>includeStart('debug', pragmas.debug);\n\n    states = freezeRenderState(states); //>>includeEnd('debug');\n\n    cachedState = {\n      referenceCount: 0,\n      state: states\n    }; // Cache full render state.  Multiple partially defined render states may map to this.\n\n    renderStateCache[fullKey] = cachedState;\n  }\n\n  ++cachedState.referenceCount; // Cache partial render state so we can skip validation on a cache hit for a partially defined render state\n\n  renderStateCache[partialKey] = {\n    referenceCount: 1,\n    state: cachedState.state\n  };\n  return cachedState.state;\n};\n/**\n * @private\n */\n\n\nRenderState.removeFromCache = function (renderState) {\n  var states = new RenderState(renderState);\n  var fullKey = JSON.stringify(states);\n  var fullCachedState = renderStateCache[fullKey]; // decrement partial key reference count\n\n  var partialKey = JSON.stringify(renderState);\n  var cachedState = renderStateCache[partialKey];\n\n  if (defined(cachedState)) {\n    --cachedState.referenceCount;\n\n    if (cachedState.referenceCount === 0) {\n      // remove partial key\n      delete renderStateCache[partialKey]; // decrement full key reference count\n\n      if (defined(fullCachedState)) {\n        --fullCachedState.referenceCount;\n      }\n    }\n  } // remove full key if reference count is zero\n\n\n  if (defined(fullCachedState) && fullCachedState.referenceCount === 0) {\n    delete renderStateCache[fullKey];\n  }\n};\n/**\n * This function is for testing purposes only.\n * @private\n */\n\n\nRenderState.getCache = function () {\n  return renderStateCache;\n};\n/**\n * This function is for testing purposes only.\n * @private\n */\n\n\nRenderState.clearCache = function () {\n  renderStateCache = {};\n};\n\nfunction enableOrDisable(gl, glEnum, enable) {\n  if (enable) {\n    gl.enable(glEnum);\n  } else {\n    gl.disable(glEnum);\n  }\n}\n\nfunction applyFrontFace(gl, renderState) {\n  gl.frontFace(renderState.frontFace);\n}\n\nfunction applyCull(gl, renderState) {\n  var cull = renderState.cull;\n  var enabled = cull.enabled;\n  enableOrDisable(gl, gl.CULL_FACE, enabled);\n\n  if (enabled) {\n    gl.cullFace(cull.face);\n  }\n}\n\nfunction applyLineWidth(gl, renderState) {\n  gl.lineWidth(renderState.lineWidth);\n}\n\nfunction applyPolygonOffset(gl, renderState) {\n  var polygonOffset = renderState.polygonOffset;\n  var enabled = polygonOffset.enabled;\n  enableOrDisable(gl, gl.POLYGON_OFFSET_FILL, enabled);\n\n  if (enabled) {\n    gl.polygonOffset(polygonOffset.factor, polygonOffset.units);\n  }\n}\n\nfunction applyScissorTest(gl, renderState, passState) {\n  var scissorTest = renderState.scissorTest;\n  var enabled = defined(passState.scissorTest) ? passState.scissorTest.enabled : scissorTest.enabled;\n  enableOrDisable(gl, gl.SCISSOR_TEST, enabled);\n\n  if (enabled) {\n    var rectangle = defined(passState.scissorTest) ? passState.scissorTest.rectangle : scissorTest.rectangle;\n    gl.scissor(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n  }\n}\n\nfunction applyDepthRange(gl, renderState) {\n  var depthRange = renderState.depthRange;\n  gl.depthRange(depthRange.near, depthRange.far);\n}\n\nfunction applyDepthTest(gl, renderState) {\n  var depthTest = renderState.depthTest;\n  var enabled = depthTest.enabled;\n  enableOrDisable(gl, gl.DEPTH_TEST, enabled);\n\n  if (enabled) {\n    gl.depthFunc(depthTest.func);\n  }\n}\n\nfunction applyColorMask(gl, renderState) {\n  var colorMask = renderState.colorMask;\n  gl.colorMask(colorMask.red, colorMask.green, colorMask.blue, colorMask.alpha);\n}\n\nfunction applyDepthMask(gl, renderState) {\n  gl.depthMask(renderState.depthMask);\n}\n\nfunction applyStencilMask(gl, renderState) {\n  gl.stencilMask(renderState.stencilMask);\n}\n\nfunction applyBlendingColor(gl, color) {\n  gl.blendColor(color.red, color.green, color.blue, color.alpha);\n}\n\nfunction applyBlending(gl, renderState, passState) {\n  var blending = renderState.blending;\n  var enabled = defined(passState.blendingEnabled) ? passState.blendingEnabled : blending.enabled;\n  enableOrDisable(gl, gl.BLEND, enabled);\n\n  if (enabled) {\n    applyBlendingColor(gl, blending.color);\n    gl.blendEquationSeparate(blending.equationRgb, blending.equationAlpha);\n    gl.blendFuncSeparate(blending.functionSourceRgb, blending.functionDestinationRgb, blending.functionSourceAlpha, blending.functionDestinationAlpha);\n  }\n}\n\nfunction applyStencilTest(gl, renderState) {\n  var stencilTest = renderState.stencilTest;\n  var enabled = stencilTest.enabled;\n  enableOrDisable(gl, gl.STENCIL_TEST, enabled);\n\n  if (enabled) {\n    var frontFunction = stencilTest.frontFunction;\n    var backFunction = stencilTest.backFunction;\n    var reference = stencilTest.reference;\n    var mask = stencilTest.mask; // Section 6.8 of the WebGL spec requires the reference and masks to be the same for\n    // front- and back-face tests.  This call prevents invalid operation errors when calling\n    // stencilFuncSeparate on Firefox.  Perhaps they should delay validation to avoid requiring this.\n\n    gl.stencilFunc(frontFunction, reference, mask);\n    gl.stencilFuncSeparate(gl.BACK, backFunction, reference, mask);\n    gl.stencilFuncSeparate(gl.FRONT, frontFunction, reference, mask);\n    var frontOperation = stencilTest.frontOperation;\n    var frontOperationFail = frontOperation.fail;\n    var frontOperationZFail = frontOperation.zFail;\n    var frontOperationZPass = frontOperation.zPass;\n    gl.stencilOpSeparate(gl.FRONT, frontOperationFail, frontOperationZFail, frontOperationZPass);\n    var backOperation = stencilTest.backOperation;\n    var backOperationFail = backOperation.fail;\n    var backOperationZFail = backOperation.zFail;\n    var backOperationZPass = backOperation.zPass;\n    gl.stencilOpSeparate(gl.BACK, backOperationFail, backOperationZFail, backOperationZPass);\n  }\n}\n\nfunction applySampleCoverage(gl, renderState) {\n  var sampleCoverage = renderState.sampleCoverage;\n  var enabled = sampleCoverage.enabled;\n  enableOrDisable(gl, gl.SAMPLE_COVERAGE, enabled);\n\n  if (enabled) {\n    gl.sampleCoverage(sampleCoverage.value, sampleCoverage.invert);\n  }\n}\n\nvar scratchViewport = new BoundingRectangle();\n\nfunction applyViewport(gl, renderState, passState) {\n  var viewport = defaultValue(renderState.viewport, passState.viewport);\n\n  if (!defined(viewport)) {\n    viewport = scratchViewport;\n    viewport.width = passState.context.drawingBufferWidth;\n    viewport.height = passState.context.drawingBufferHeight;\n  }\n\n  passState.context.uniformState.viewport = viewport;\n  gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\n}\n\nRenderState.apply = function (gl, renderState, passState) {\n  applyFrontFace(gl, renderState);\n  applyCull(gl, renderState);\n  applyLineWidth(gl, renderState);\n  applyPolygonOffset(gl, renderState);\n  applyDepthRange(gl, renderState);\n  applyDepthTest(gl, renderState);\n  applyColorMask(gl, renderState);\n  applyDepthMask(gl, renderState);\n  applyStencilMask(gl, renderState);\n  applyStencilTest(gl, renderState);\n  applySampleCoverage(gl, renderState);\n  applyScissorTest(gl, renderState, passState);\n  applyBlending(gl, renderState, passState);\n  applyViewport(gl, renderState, passState);\n};\n\nfunction createFuncs(previousState, nextState) {\n  var funcs = [];\n\n  if (previousState.frontFace !== nextState.frontFace) {\n    funcs.push(applyFrontFace);\n  }\n\n  if (previousState.cull.enabled !== nextState.cull.enabled || previousState.cull.face !== nextState.cull.face) {\n    funcs.push(applyCull);\n  }\n\n  if (previousState.lineWidth !== nextState.lineWidth) {\n    funcs.push(applyLineWidth);\n  }\n\n  if (previousState.polygonOffset.enabled !== nextState.polygonOffset.enabled || previousState.polygonOffset.factor !== nextState.polygonOffset.factor || previousState.polygonOffset.units !== nextState.polygonOffset.units) {\n    funcs.push(applyPolygonOffset);\n  }\n\n  if (previousState.depthRange.near !== nextState.depthRange.near || previousState.depthRange.far !== nextState.depthRange.far) {\n    funcs.push(applyDepthRange);\n  }\n\n  if (previousState.depthTest.enabled !== nextState.depthTest.enabled || previousState.depthTest.func !== nextState.depthTest.func) {\n    funcs.push(applyDepthTest);\n  }\n\n  if (previousState.colorMask.red !== nextState.colorMask.red || previousState.colorMask.green !== nextState.colorMask.green || previousState.colorMask.blue !== nextState.colorMask.blue || previousState.colorMask.alpha !== nextState.colorMask.alpha) {\n    funcs.push(applyColorMask);\n  }\n\n  if (previousState.depthMask !== nextState.depthMask) {\n    funcs.push(applyDepthMask);\n  }\n\n  if (previousState.stencilMask !== nextState.stencilMask) {\n    funcs.push(applyStencilMask);\n  }\n\n  if (previousState.stencilTest.enabled !== nextState.stencilTest.enabled || previousState.stencilTest.frontFunction !== nextState.stencilTest.frontFunction || previousState.stencilTest.backFunction !== nextState.stencilTest.backFunction || previousState.stencilTest.reference !== nextState.stencilTest.reference || previousState.stencilTest.mask !== nextState.stencilTest.mask || previousState.stencilTest.frontOperation.fail !== nextState.stencilTest.frontOperation.fail || previousState.stencilTest.frontOperation.zFail !== nextState.stencilTest.frontOperation.zFail || previousState.stencilTest.backOperation.fail !== nextState.stencilTest.backOperation.fail || previousState.stencilTest.backOperation.zFail !== nextState.stencilTest.backOperation.zFail || previousState.stencilTest.backOperation.zPass !== nextState.stencilTest.backOperation.zPass) {\n    funcs.push(applyStencilTest);\n  }\n\n  if (previousState.sampleCoverage.enabled !== nextState.sampleCoverage.enabled || previousState.sampleCoverage.value !== nextState.sampleCoverage.value || previousState.sampleCoverage.invert !== nextState.sampleCoverage.invert) {\n    funcs.push(applySampleCoverage);\n  }\n\n  return funcs;\n}\n\nRenderState.partialApply = function (gl, previousRenderState, renderState, previousPassState, passState, clear) {\n  if (previousRenderState !== renderState) {\n    // When a new render state is applied, instead of making WebGL calls for all the states or first\n    // comparing the states one-by-one with the previous state (basically a linear search), we take\n    // advantage of RenderState's immutability, and store a dynamically populated sparse data structure\n    // containing functions that make the minimum number of WebGL calls when transitioning from one state\n    // to the other.  In practice, this works well since state-to-state transitions generally only require a\n    // few WebGL calls, especially if commands are stored by state.\n    var funcs = renderState._applyFunctions[previousRenderState.id];\n\n    if (!defined(funcs)) {\n      funcs = createFuncs(previousRenderState, renderState);\n      renderState._applyFunctions[previousRenderState.id] = funcs;\n    }\n\n    var len = funcs.length;\n\n    for (var i = 0; i < len; ++i) {\n      funcs[i](gl, renderState);\n    }\n  }\n\n  var previousScissorTest = defined(previousPassState.scissorTest) ? previousPassState.scissorTest : previousRenderState.scissorTest;\n  var scissorTest = defined(passState.scissorTest) ? passState.scissorTest : renderState.scissorTest; // Our scissor rectangle can get out of sync with the GL scissor rectangle on clears.\n  // Seems to be a problem only on ANGLE. See https://github.com/CesiumGS/cesium/issues/2994\n\n  if (previousScissorTest !== scissorTest || clear) {\n    applyScissorTest(gl, renderState, passState);\n  }\n\n  var previousBlendingEnabled = defined(previousPassState.blendingEnabled) ? previousPassState.blendingEnabled : previousRenderState.blending.enabled;\n  var blendingEnabled = defined(passState.blendingEnabled) ? passState.blendingEnabled : renderState.blending.enabled;\n\n  if (previousBlendingEnabled !== blendingEnabled || blendingEnabled && previousRenderState.blending !== renderState.blending) {\n    applyBlending(gl, renderState, passState);\n  }\n\n  if (previousRenderState !== renderState || previousPassState !== passState || previousPassState.context !== passState.context) {\n    applyViewport(gl, renderState, passState);\n  }\n};\n\nRenderState.getState = function (renderState) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(renderState)) {\n    throw new DeveloperError(\"renderState is required.\");\n  } //>>includeEnd('debug');\n\n\n  return {\n    frontFace: renderState.frontFace,\n    cull: {\n      enabled: renderState.cull.enabled,\n      face: renderState.cull.face\n    },\n    lineWidth: renderState.lineWidth,\n    polygonOffset: {\n      enabled: renderState.polygonOffset.enabled,\n      factor: renderState.polygonOffset.factor,\n      units: renderState.polygonOffset.units\n    },\n    scissorTest: {\n      enabled: renderState.scissorTest.enabled,\n      rectangle: BoundingRectangle.clone(renderState.scissorTest.rectangle)\n    },\n    depthRange: {\n      near: renderState.depthRange.near,\n      far: renderState.depthRange.far\n    },\n    depthTest: {\n      enabled: renderState.depthTest.enabled,\n      func: renderState.depthTest.func\n    },\n    colorMask: {\n      red: renderState.colorMask.red,\n      green: renderState.colorMask.green,\n      blue: renderState.colorMask.blue,\n      alpha: renderState.colorMask.alpha\n    },\n    depthMask: renderState.depthMask,\n    stencilMask: renderState.stencilMask,\n    blending: {\n      enabled: renderState.blending.enabled,\n      color: Color.clone(renderState.blending.color),\n      equationRgb: renderState.blending.equationRgb,\n      equationAlpha: renderState.blending.equationAlpha,\n      functionSourceRgb: renderState.blending.functionSourceRgb,\n      functionSourceAlpha: renderState.blending.functionSourceAlpha,\n      functionDestinationRgb: renderState.blending.functionDestinationRgb,\n      functionDestinationAlpha: renderState.blending.functionDestinationAlpha\n    },\n    stencilTest: {\n      enabled: renderState.stencilTest.enabled,\n      frontFunction: renderState.stencilTest.frontFunction,\n      backFunction: renderState.stencilTest.backFunction,\n      reference: renderState.stencilTest.reference,\n      mask: renderState.stencilTest.mask,\n      frontOperation: {\n        fail: renderState.stencilTest.frontOperation.fail,\n        zFail: renderState.stencilTest.frontOperation.zFail,\n        zPass: renderState.stencilTest.frontOperation.zPass\n      },\n      backOperation: {\n        fail: renderState.stencilTest.backOperation.fail,\n        zFail: renderState.stencilTest.backOperation.zFail,\n        zPass: renderState.stencilTest.backOperation.zPass\n      }\n    },\n    sampleCoverage: {\n      enabled: renderState.sampleCoverage.enabled,\n      value: renderState.sampleCoverage.value,\n      invert: renderState.sampleCoverage.invert\n    },\n    viewport: defined(renderState.viewport) ? BoundingRectangle.clone(renderState.viewport) : undefined\n  };\n};\n\nexport default RenderState;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Renderer/RenderState.js"],"names":["BoundingRectangle","Color","defaultValue","defined","DeveloperError","WebGLConstants","WindingOrder","ContextLimits","freezeRenderState","validateBlendEquation","blendEquation","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","MIN","MAX","validateBlendFunction","blendFunction","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","CONSTANT_COLOR","ONE_MINUS_CONSTANT_COLOR","CONSTANT_ALPHA","ONE_MINUS_CONSTANT_ALPHA","SRC_ALPHA_SATURATE","validateCullFace","cullFace","FRONT","BACK","FRONT_AND_BACK","validateDepthFunction","depthFunction","NEVER","LESS","EQUAL","LEQUAL","GREATER","NOTEQUAL","GEQUAL","ALWAYS","validateStencilFunction","stencilFunction","validateStencilOperation","stencilOperation","KEEP","REPLACE","INCR","DECR","INVERT","INCR_WRAP","DECR_WRAP","RenderState","renderState","rs","EMPTY_OBJECT","cull","polygonOffset","scissorTest","scissorTestRectangle","rectangle","depthRange","depthTest","colorMask","blending","blendingColor","color","stencilTest","stencilTestFrontOperation","frontOperation","stencilTestBackOperation","backOperation","sampleCoverage","viewport","frontFace","COUNTER_CLOCKWISE","enabled","face","lineWidth","factor","units","clone","near","far","func","red","green","blue","alpha","depthMask","stencilMask","equationRgb","equationAlpha","functionSourceRgb","functionSourceAlpha","functionDestinationRgb","functionDestinationAlpha","frontFunction","backFunction","reference","mask","fail","zFail","zPass","value","invert","x","y","width","height","undefined","minimumAliasedLineWidth","maximumAliasedLineWidth","validate","maximumViewportWidth","toString","maximumViewportHeight","id","_applyFunctions","nextRenderStateId","renderStateCache","fromCache","partialKey","JSON","stringify","cachedState","referenceCount","state","states","fullKey","removeFromCache","fullCachedState","getCache","clearCache","enableOrDisable","gl","glEnum","enable","disable","applyFrontFace","applyCull","CULL_FACE","applyLineWidth","applyPolygonOffset","POLYGON_OFFSET_FILL","applyScissorTest","passState","SCISSOR_TEST","scissor","applyDepthRange","applyDepthTest","DEPTH_TEST","depthFunc","applyColorMask","applyDepthMask","applyStencilMask","applyBlendingColor","blendColor","applyBlending","blendingEnabled","BLEND","blendEquationSeparate","blendFuncSeparate","applyStencilTest","STENCIL_TEST","stencilFunc","stencilFuncSeparate","frontOperationFail","frontOperationZFail","frontOperationZPass","stencilOpSeparate","backOperationFail","backOperationZFail","backOperationZPass","applySampleCoverage","SAMPLE_COVERAGE","scratchViewport","applyViewport","context","drawingBufferWidth","drawingBufferHeight","uniformState","apply","createFuncs","previousState","nextState","funcs","push","partialApply","previousRenderState","previousPassState","clear","len","length","i","previousScissorTest","previousBlendingEnabled","getState"],"mappings":"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","sourcesContent":["import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport WebGLConstants from \"../Core/WebGLConstants.js\";\nimport WindingOrder from \"../Core/WindingOrder.js\";\nimport ContextLimits from \"./ContextLimits.js\";\nimport freezeRenderState from \"./freezeRenderState.js\";\n\nfunction validateBlendEquation(blendEquation) {\n  return (\n    blendEquation === WebGLConstants.FUNC_ADD ||\n    blendEquation === WebGLConstants.FUNC_SUBTRACT ||\n    blendEquation === WebGLConstants.FUNC_REVERSE_SUBTRACT ||\n    blendEquation === WebGLConstants.MIN ||\n    blendEquation === WebGLConstants.MAX\n  );\n}\n\nfunction validateBlendFunction(blendFunction) {\n  return (\n    blendFunction === WebGLConstants.ZERO ||\n    blendFunction === WebGLConstants.ONE ||\n    blendFunction === WebGLConstants.SRC_COLOR ||\n    blendFunction === WebGLConstants.ONE_MINUS_SRC_COLOR ||\n    blendFunction === WebGLConstants.DST_COLOR ||\n    blendFunction === WebGLConstants.ONE_MINUS_DST_COLOR ||\n    blendFunction === WebGLConstants.SRC_ALPHA ||\n    blendFunction === WebGLConstants.ONE_MINUS_SRC_ALPHA ||\n    blendFunction === WebGLConstants.DST_ALPHA ||\n    blendFunction === WebGLConstants.ONE_MINUS_DST_ALPHA ||\n    blendFunction === WebGLConstants.CONSTANT_COLOR ||\n    blendFunction === WebGLConstants.ONE_MINUS_CONSTANT_COLOR ||\n    blendFunction === WebGLConstants.CONSTANT_ALPHA ||\n    blendFunction === WebGLConstants.ONE_MINUS_CONSTANT_ALPHA ||\n    blendFunction === WebGLConstants.SRC_ALPHA_SATURATE\n  );\n}\n\nfunction validateCullFace(cullFace) {\n  return (\n    cullFace === WebGLConstants.FRONT ||\n    cullFace === WebGLConstants.BACK ||\n    cullFace === WebGLConstants.FRONT_AND_BACK\n  );\n}\n\nfunction validateDepthFunction(depthFunction) {\n  return (\n    depthFunction === WebGLConstants.NEVER ||\n    depthFunction === WebGLConstants.LESS ||\n    depthFunction === WebGLConstants.EQUAL ||\n    depthFunction === WebGLConstants.LEQUAL ||\n    depthFunction === WebGLConstants.GREATER ||\n    depthFunction === WebGLConstants.NOTEQUAL ||\n    depthFunction === WebGLConstants.GEQUAL ||\n    depthFunction === WebGLConstants.ALWAYS\n  );\n}\n\nfunction validateStencilFunction(stencilFunction) {\n  return (\n    stencilFunction === WebGLConstants.NEVER ||\n    stencilFunction === WebGLConstants.LESS ||\n    stencilFunction === WebGLConstants.EQUAL ||\n    stencilFunction === WebGLConstants.LEQUAL ||\n    stencilFunction === WebGLConstants.GREATER ||\n    stencilFunction === WebGLConstants.NOTEQUAL ||\n    stencilFunction === WebGLConstants.GEQUAL ||\n    stencilFunction === WebGLConstants.ALWAYS\n  );\n}\n\nfunction validateStencilOperation(stencilOperation) {\n  return (\n    stencilOperation === WebGLConstants.ZERO ||\n    stencilOperation === WebGLConstants.KEEP ||\n    stencilOperation === WebGLConstants.REPLACE ||\n    stencilOperation === WebGLConstants.INCR ||\n    stencilOperation === WebGLConstants.DECR ||\n    stencilOperation === WebGLConstants.INVERT ||\n    stencilOperation === WebGLConstants.INCR_WRAP ||\n    stencilOperation === WebGLConstants.DECR_WRAP\n  );\n}\n\n/**\n * @private\n */\nfunction RenderState(renderState) {\n  var rs = defaultValue(renderState, defaultValue.EMPTY_OBJECT);\n  var cull = defaultValue(rs.cull, defaultValue.EMPTY_OBJECT);\n  var polygonOffset = defaultValue(rs.polygonOffset, defaultValue.EMPTY_OBJECT);\n  var scissorTest = defaultValue(rs.scissorTest, defaultValue.EMPTY_OBJECT);\n  var scissorTestRectangle = defaultValue(\n    scissorTest.rectangle,\n    defaultValue.EMPTY_OBJECT\n  );\n  var depthRange = defaultValue(rs.depthRange, defaultValue.EMPTY_OBJECT);\n  var depthTest = defaultValue(rs.depthTest, defaultValue.EMPTY_OBJECT);\n  var colorMask = defaultValue(rs.colorMask, defaultValue.EMPTY_OBJECT);\n  var blending = defaultValue(rs.blending, defaultValue.EMPTY_OBJECT);\n  var blendingColor = defaultValue(blending.color, defaultValue.EMPTY_OBJECT);\n  var stencilTest = defaultValue(rs.stencilTest, defaultValue.EMPTY_OBJECT);\n  var stencilTestFrontOperation = defaultValue(\n    stencilTest.frontOperation,\n    defaultValue.EMPTY_OBJECT\n  );\n  var stencilTestBackOperation = defaultValue(\n    stencilTest.backOperation,\n    defaultValue.EMPTY_OBJECT\n  );\n  var sampleCoverage = defaultValue(\n    rs.sampleCoverage,\n    defaultValue.EMPTY_OBJECT\n  );\n  var viewport = rs.viewport;\n\n  this.frontFace = defaultValue(rs.frontFace, WindingOrder.COUNTER_CLOCKWISE);\n  this.cull = {\n    enabled: defaultValue(cull.enabled, false),\n    face: defaultValue(cull.face, WebGLConstants.BACK),\n  };\n  this.lineWidth = defaultValue(rs.lineWidth, 1.0);\n  this.polygonOffset = {\n    enabled: defaultValue(polygonOffset.enabled, false),\n    factor: defaultValue(polygonOffset.factor, 0),\n    units: defaultValue(polygonOffset.units, 0),\n  };\n  this.scissorTest = {\n    enabled: defaultValue(scissorTest.enabled, false),\n    rectangle: BoundingRectangle.clone(scissorTestRectangle),\n  };\n  this.depthRange = {\n    near: defaultValue(depthRange.near, 0),\n    far: defaultValue(depthRange.far, 1),\n  };\n  this.depthTest = {\n    enabled: defaultValue(depthTest.enabled, false),\n    func: defaultValue(depthTest.func, WebGLConstants.LESS), // func, because function is a JavaScript keyword\n  };\n  this.colorMask = {\n    red: defaultValue(colorMask.red, true),\n    green: defaultValue(colorMask.green, true),\n    blue: defaultValue(colorMask.blue, true),\n    alpha: defaultValue(colorMask.alpha, true),\n  };\n  this.depthMask = defaultValue(rs.depthMask, true);\n  this.stencilMask = defaultValue(rs.stencilMask, ~0);\n  this.blending = {\n    enabled: defaultValue(blending.enabled, false),\n    color: new Color(\n      defaultValue(blendingColor.red, 0.0),\n      defaultValue(blendingColor.green, 0.0),\n      defaultValue(blendingColor.blue, 0.0),\n      defaultValue(blendingColor.alpha, 0.0)\n    ),\n    equationRgb: defaultValue(blending.equationRgb, WebGLConstants.FUNC_ADD),\n    equationAlpha: defaultValue(\n      blending.equationAlpha,\n      WebGLConstants.FUNC_ADD\n    ),\n    functionSourceRgb: defaultValue(\n      blending.functionSourceRgb,\n      WebGLConstants.ONE\n    ),\n    functionSourceAlpha: defaultValue(\n      blending.functionSourceAlpha,\n      WebGLConstants.ONE\n    ),\n    functionDestinationRgb: defaultValue(\n      blending.functionDestinationRgb,\n      WebGLConstants.ZERO\n    ),\n    functionDestinationAlpha: defaultValue(\n      blending.functionDestinationAlpha,\n      WebGLConstants.ZERO\n    ),\n  };\n  this.stencilTest = {\n    enabled: defaultValue(stencilTest.enabled, false),\n    frontFunction: defaultValue(\n      stencilTest.frontFunction,\n      WebGLConstants.ALWAYS\n    ),\n    backFunction: defaultValue(stencilTest.backFunction, WebGLConstants.ALWAYS),\n    reference: defaultValue(stencilTest.reference, 0),\n    mask: defaultValue(stencilTest.mask, ~0),\n    frontOperation: {\n      fail: defaultValue(stencilTestFrontOperation.fail, WebGLConstants.KEEP),\n      zFail: defaultValue(stencilTestFrontOperation.zFail, WebGLConstants.KEEP),\n      zPass: defaultValue(stencilTestFrontOperation.zPass, WebGLConstants.KEEP),\n    },\n    backOperation: {\n      fail: defaultValue(stencilTestBackOperation.fail, WebGLConstants.KEEP),\n      zFail: defaultValue(stencilTestBackOperation.zFail, WebGLConstants.KEEP),\n      zPass: defaultValue(stencilTestBackOperation.zPass, WebGLConstants.KEEP),\n    },\n  };\n  this.sampleCoverage = {\n    enabled: defaultValue(sampleCoverage.enabled, false),\n    value: defaultValue(sampleCoverage.value, 1.0),\n    invert: defaultValue(sampleCoverage.invert, false),\n  };\n  this.viewport = defined(viewport)\n    ? new BoundingRectangle(\n        viewport.x,\n        viewport.y,\n        viewport.width,\n        viewport.height\n      )\n    : undefined;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    this.lineWidth < ContextLimits.minimumAliasedLineWidth ||\n    this.lineWidth > ContextLimits.maximumAliasedLineWidth\n  ) {\n    throw new DeveloperError(\n      \"renderState.lineWidth is out of range.  Check minimumAliasedLineWidth and maximumAliasedLineWidth.\"\n    );\n  }\n  if (!WindingOrder.validate(this.frontFace)) {\n    throw new DeveloperError(\"Invalid renderState.frontFace.\");\n  }\n  if (!validateCullFace(this.cull.face)) {\n    throw new DeveloperError(\"Invalid renderState.cull.face.\");\n  }\n  if (\n    this.scissorTest.rectangle.width < 0 ||\n    this.scissorTest.rectangle.height < 0\n  ) {\n    throw new DeveloperError(\n      \"renderState.scissorTest.rectangle.width and renderState.scissorTest.rectangle.height must be greater than or equal to zero.\"\n    );\n  }\n  if (this.depthRange.near > this.depthRange.far) {\n    // WebGL specific - not an error in GL ES\n    throw new DeveloperError(\n      \"renderState.depthRange.near can not be greater than renderState.depthRange.far.\"\n    );\n  }\n  if (this.depthRange.near < 0) {\n    // Would be clamped by GL\n    throw new DeveloperError(\n      \"renderState.depthRange.near must be greater than or equal to zero.\"\n    );\n  }\n  if (this.depthRange.far > 1) {\n    // Would be clamped by GL\n    throw new DeveloperError(\n      \"renderState.depthRange.far must be less than or equal to one.\"\n    );\n  }\n  if (!validateDepthFunction(this.depthTest.func)) {\n    throw new DeveloperError(\"Invalid renderState.depthTest.func.\");\n  }\n  if (\n    this.blending.color.red < 0.0 ||\n    this.blending.color.red > 1.0 ||\n    this.blending.color.green < 0.0 ||\n    this.blending.color.green > 1.0 ||\n    this.blending.color.blue < 0.0 ||\n    this.blending.color.blue > 1.0 ||\n    this.blending.color.alpha < 0.0 ||\n    this.blending.color.alpha > 1.0\n  ) {\n    // Would be clamped by GL\n    throw new DeveloperError(\n      \"renderState.blending.color components must be greater than or equal to zero and less than or equal to one.\"\n    );\n  }\n  if (!validateBlendEquation(this.blending.equationRgb)) {\n    throw new DeveloperError(\"Invalid renderState.blending.equationRgb.\");\n  }\n  if (!validateBlendEquation(this.blending.equationAlpha)) {\n    throw new DeveloperError(\"Invalid renderState.blending.equationAlpha.\");\n  }\n  if (!validateBlendFunction(this.blending.functionSourceRgb)) {\n    throw new DeveloperError(\"Invalid renderState.blending.functionSourceRgb.\");\n  }\n  if (!validateBlendFunction(this.blending.functionSourceAlpha)) {\n    throw new DeveloperError(\n      \"Invalid renderState.blending.functionSourceAlpha.\"\n    );\n  }\n  if (!validateBlendFunction(this.blending.functionDestinationRgb)) {\n    throw new DeveloperError(\n      \"Invalid renderState.blending.functionDestinationRgb.\"\n    );\n  }\n  if (!validateBlendFunction(this.blending.functionDestinationAlpha)) {\n    throw new DeveloperError(\n      \"Invalid renderState.blending.functionDestinationAlpha.\"\n    );\n  }\n  if (!validateStencilFunction(this.stencilTest.frontFunction)) {\n    throw new DeveloperError(\"Invalid renderState.stencilTest.frontFunction.\");\n  }\n  if (!validateStencilFunction(this.stencilTest.backFunction)) {\n    throw new DeveloperError(\"Invalid renderState.stencilTest.backFunction.\");\n  }\n  if (!validateStencilOperation(this.stencilTest.frontOperation.fail)) {\n    throw new DeveloperError(\n      \"Invalid renderState.stencilTest.frontOperation.fail.\"\n    );\n  }\n  if (!validateStencilOperation(this.stencilTest.frontOperation.zFail)) {\n    throw new DeveloperError(\n      \"Invalid renderState.stencilTest.frontOperation.zFail.\"\n    );\n  }\n  if (!validateStencilOperation(this.stencilTest.frontOperation.zPass)) {\n    throw new DeveloperError(\n      \"Invalid renderState.stencilTest.frontOperation.zPass.\"\n    );\n  }\n  if (!validateStencilOperation(this.stencilTest.backOperation.fail)) {\n    throw new DeveloperError(\n      \"Invalid renderState.stencilTest.backOperation.fail.\"\n    );\n  }\n  if (!validateStencilOperation(this.stencilTest.backOperation.zFail)) {\n    throw new DeveloperError(\n      \"Invalid renderState.stencilTest.backOperation.zFail.\"\n    );\n  }\n  if (!validateStencilOperation(this.stencilTest.backOperation.zPass)) {\n    throw new DeveloperError(\n      \"Invalid renderState.stencilTest.backOperation.zPass.\"\n    );\n  }\n\n  if (defined(this.viewport)) {\n    if (this.viewport.width < 0) {\n      throw new DeveloperError(\n        \"renderState.viewport.width must be greater than or equal to zero.\"\n      );\n    }\n    if (this.viewport.height < 0) {\n      throw new DeveloperError(\n        \"renderState.viewport.height must be greater than or equal to zero.\"\n      );\n    }\n\n    if (this.viewport.width > ContextLimits.maximumViewportWidth) {\n      throw new DeveloperError(\n        \"renderState.viewport.width must be less than or equal to the maximum viewport width (\" +\n          ContextLimits.maximumViewportWidth.toString() +\n          \").  Check maximumViewportWidth.\"\n      );\n    }\n    if (this.viewport.height > ContextLimits.maximumViewportHeight) {\n      throw new DeveloperError(\n        \"renderState.viewport.height must be less than or equal to the maximum viewport height (\" +\n          ContextLimits.maximumViewportHeight.toString() +\n          \").  Check maximumViewportHeight.\"\n      );\n    }\n  }\n  //>>includeEnd('debug');\n\n  this.id = 0;\n  this._applyFunctions = [];\n}\n\nvar nextRenderStateId = 0;\nvar renderStateCache = {};\n\n/**\n * Validates and then finds or creates an immutable render state, which defines the pipeline\n * state for a {@link DrawCommand} or {@link ClearCommand}.  All inputs states are optional.  Omitted states\n * use the defaults shown in the example below.\n *\n * @param {Object} [renderState] The states defining the render state as shown in the example below.\n *\n * @exception {RuntimeError} renderState.lineWidth is out of range.\n * @exception {DeveloperError} Invalid renderState.frontFace.\n * @exception {DeveloperError} Invalid renderState.cull.face.\n * @exception {DeveloperError} scissorTest.rectangle.width and scissorTest.rectangle.height must be greater than or equal to zero.\n * @exception {DeveloperError} renderState.depthRange.near can't be greater than renderState.depthRange.far.\n * @exception {DeveloperError} renderState.depthRange.near must be greater than or equal to zero.\n * @exception {DeveloperError} renderState.depthRange.far must be less than or equal to zero.\n * @exception {DeveloperError} Invalid renderState.depthTest.func.\n * @exception {DeveloperError} renderState.blending.color components must be greater than or equal to zero and less than or equal to one\n * @exception {DeveloperError} Invalid renderState.blending.equationRgb.\n * @exception {DeveloperError} Invalid renderState.blending.equationAlpha.\n * @exception {DeveloperError} Invalid renderState.blending.functionSourceRgb.\n * @exception {DeveloperError} Invalid renderState.blending.functionSourceAlpha.\n * @exception {DeveloperError} Invalid renderState.blending.functionDestinationRgb.\n * @exception {DeveloperError} Invalid renderState.blending.functionDestinationAlpha.\n * @exception {DeveloperError} Invalid renderState.stencilTest.frontFunction.\n * @exception {DeveloperError} Invalid renderState.stencilTest.backFunction.\n * @exception {DeveloperError} Invalid renderState.stencilTest.frontOperation.fail.\n * @exception {DeveloperError} Invalid renderState.stencilTest.frontOperation.zFail.\n * @exception {DeveloperError} Invalid renderState.stencilTest.frontOperation.zPass.\n * @exception {DeveloperError} Invalid renderState.stencilTest.backOperation.fail.\n * @exception {DeveloperError} Invalid renderState.stencilTest.backOperation.zFail.\n * @exception {DeveloperError} Invalid renderState.stencilTest.backOperation.zPass.\n * @exception {DeveloperError} renderState.viewport.width must be greater than or equal to zero.\n * @exception {DeveloperError} renderState.viewport.width must be less than or equal to the maximum viewport width.\n * @exception {DeveloperError} renderState.viewport.height must be greater than or equal to zero.\n * @exception {DeveloperError} renderState.viewport.height must be less than or equal to the maximum viewport height.\n *\n *\n * @example\n * var defaults = {\n *     frontFace : WindingOrder.COUNTER_CLOCKWISE,\n *     cull : {\n *         enabled : false,\n *         face : CullFace.BACK\n *     },\n *     lineWidth : 1,\n *     polygonOffset : {\n *         enabled : false,\n *         factor : 0,\n *         units : 0\n *     },\n *     scissorTest : {\n *         enabled : false,\n *         rectangle : {\n *             x : 0,\n *             y : 0,\n *             width : 0,\n *             height : 0\n *         }\n *     },\n *     depthRange : {\n *         near : 0,\n *         far : 1\n *     },\n *     depthTest : {\n *         enabled : false,\n *         func : DepthFunction.LESS\n *      },\n *     colorMask : {\n *         red : true,\n *         green : true,\n *         blue : true,\n *         alpha : true\n *     },\n *     depthMask : true,\n *     stencilMask : ~0,\n *     blending : {\n *         enabled : false,\n *         color : {\n *             red : 0.0,\n *             green : 0.0,\n *             blue : 0.0,\n *             alpha : 0.0\n *         },\n *         equationRgb : BlendEquation.ADD,\n *         equationAlpha : BlendEquation.ADD,\n *         functionSourceRgb : BlendFunction.ONE,\n *         functionSourceAlpha : BlendFunction.ONE,\n *         functionDestinationRgb : BlendFunction.ZERO,\n *         functionDestinationAlpha : BlendFunction.ZERO\n *     },\n *     stencilTest : {\n *         enabled : false,\n *         frontFunction : StencilFunction.ALWAYS,\n *         backFunction : StencilFunction.ALWAYS,\n *         reference : 0,\n *         mask : ~0,\n *         frontOperation : {\n *             fail : StencilOperation.KEEP,\n *             zFail : StencilOperation.KEEP,\n *             zPass : StencilOperation.KEEP\n *         },\n *         backOperation : {\n *             fail : StencilOperation.KEEP,\n *             zFail : StencilOperation.KEEP,\n *             zPass : StencilOperation.KEEP\n *         }\n *     },\n *     sampleCoverage : {\n *         enabled : false,\n *         value : 1.0,\n *         invert : false\n *      }\n * };\n *\n * var rs = RenderState.fromCache(defaults);\n *\n * @see DrawCommand\n * @see ClearCommand\n *\n * @private\n */\nRenderState.fromCache = function (renderState) {\n  var partialKey = JSON.stringify(renderState);\n  var cachedState = renderStateCache[partialKey];\n  if (defined(cachedState)) {\n    ++cachedState.referenceCount;\n    return cachedState.state;\n  }\n\n  // Cache miss.  Fully define render state and try again.\n  var states = new RenderState(renderState);\n  var fullKey = JSON.stringify(states);\n  cachedState = renderStateCache[fullKey];\n  if (!defined(cachedState)) {\n    states.id = nextRenderStateId++;\n    //>>includeStart('debug', pragmas.debug);\n    states = freezeRenderState(states);\n    //>>includeEnd('debug');\n    cachedState = {\n      referenceCount: 0,\n      state: states,\n    };\n\n    // Cache full render state.  Multiple partially defined render states may map to this.\n    renderStateCache[fullKey] = cachedState;\n  }\n\n  ++cachedState.referenceCount;\n\n  // Cache partial render state so we can skip validation on a cache hit for a partially defined render state\n  renderStateCache[partialKey] = {\n    referenceCount: 1,\n    state: cachedState.state,\n  };\n\n  return cachedState.state;\n};\n\n/**\n * @private\n */\nRenderState.removeFromCache = function (renderState) {\n  var states = new RenderState(renderState);\n  var fullKey = JSON.stringify(states);\n  var fullCachedState = renderStateCache[fullKey];\n\n  // decrement partial key reference count\n  var partialKey = JSON.stringify(renderState);\n  var cachedState = renderStateCache[partialKey];\n  if (defined(cachedState)) {\n    --cachedState.referenceCount;\n\n    if (cachedState.referenceCount === 0) {\n      // remove partial key\n      delete renderStateCache[partialKey];\n\n      // decrement full key reference count\n      if (defined(fullCachedState)) {\n        --fullCachedState.referenceCount;\n      }\n    }\n  }\n\n  // remove full key if reference count is zero\n  if (defined(fullCachedState) && fullCachedState.referenceCount === 0) {\n    delete renderStateCache[fullKey];\n  }\n};\n\n/**\n * This function is for testing purposes only.\n * @private\n */\nRenderState.getCache = function () {\n  return renderStateCache;\n};\n\n/**\n * This function is for testing purposes only.\n * @private\n */\nRenderState.clearCache = function () {\n  renderStateCache = {};\n};\n\nfunction enableOrDisable(gl, glEnum, enable) {\n  if (enable) {\n    gl.enable(glEnum);\n  } else {\n    gl.disable(glEnum);\n  }\n}\n\nfunction applyFrontFace(gl, renderState) {\n  gl.frontFace(renderState.frontFace);\n}\n\nfunction applyCull(gl, renderState) {\n  var cull = renderState.cull;\n  var enabled = cull.enabled;\n\n  enableOrDisable(gl, gl.CULL_FACE, enabled);\n\n  if (enabled) {\n    gl.cullFace(cull.face);\n  }\n}\n\nfunction applyLineWidth(gl, renderState) {\n  gl.lineWidth(renderState.lineWidth);\n}\n\nfunction applyPolygonOffset(gl, renderState) {\n  var polygonOffset = renderState.polygonOffset;\n  var enabled = polygonOffset.enabled;\n\n  enableOrDisable(gl, gl.POLYGON_OFFSET_FILL, enabled);\n\n  if (enabled) {\n    gl.polygonOffset(polygonOffset.factor, polygonOffset.units);\n  }\n}\n\nfunction applyScissorTest(gl, renderState, passState) {\n  var scissorTest = renderState.scissorTest;\n  var enabled = defined(passState.scissorTest)\n    ? passState.scissorTest.enabled\n    : scissorTest.enabled;\n\n  enableOrDisable(gl, gl.SCISSOR_TEST, enabled);\n\n  if (enabled) {\n    var rectangle = defined(passState.scissorTest)\n      ? passState.scissorTest.rectangle\n      : scissorTest.rectangle;\n    gl.scissor(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n  }\n}\n\nfunction applyDepthRange(gl, renderState) {\n  var depthRange = renderState.depthRange;\n  gl.depthRange(depthRange.near, depthRange.far);\n}\n\nfunction applyDepthTest(gl, renderState) {\n  var depthTest = renderState.depthTest;\n  var enabled = depthTest.enabled;\n\n  enableOrDisable(gl, gl.DEPTH_TEST, enabled);\n\n  if (enabled) {\n    gl.depthFunc(depthTest.func);\n  }\n}\n\nfunction applyColorMask(gl, renderState) {\n  var colorMask = renderState.colorMask;\n  gl.colorMask(colorMask.red, colorMask.green, colorMask.blue, colorMask.alpha);\n}\n\nfunction applyDepthMask(gl, renderState) {\n  gl.depthMask(renderState.depthMask);\n}\n\nfunction applyStencilMask(gl, renderState) {\n  gl.stencilMask(renderState.stencilMask);\n}\n\nfunction applyBlendingColor(gl, color) {\n  gl.blendColor(color.red, color.green, color.blue, color.alpha);\n}\n\nfunction applyBlending(gl, renderState, passState) {\n  var blending = renderState.blending;\n  var enabled = defined(passState.blendingEnabled)\n    ? passState.blendingEnabled\n    : blending.enabled;\n\n  enableOrDisable(gl, gl.BLEND, enabled);\n\n  if (enabled) {\n    applyBlendingColor(gl, blending.color);\n    gl.blendEquationSeparate(blending.equationRgb, blending.equationAlpha);\n    gl.blendFuncSeparate(\n      blending.functionSourceRgb,\n      blending.functionDestinationRgb,\n      blending.functionSourceAlpha,\n      blending.functionDestinationAlpha\n    );\n  }\n}\n\nfunction applyStencilTest(gl, renderState) {\n  var stencilTest = renderState.stencilTest;\n  var enabled = stencilTest.enabled;\n\n  enableOrDisable(gl, gl.STENCIL_TEST, enabled);\n\n  if (enabled) {\n    var frontFunction = stencilTest.frontFunction;\n    var backFunction = stencilTest.backFunction;\n    var reference = stencilTest.reference;\n    var mask = stencilTest.mask;\n\n    // Section 6.8 of the WebGL spec requires the reference and masks to be the same for\n    // front- and back-face tests.  This call prevents invalid operation errors when calling\n    // stencilFuncSeparate on Firefox.  Perhaps they should delay validation to avoid requiring this.\n    gl.stencilFunc(frontFunction, reference, mask);\n    gl.stencilFuncSeparate(gl.BACK, backFunction, reference, mask);\n    gl.stencilFuncSeparate(gl.FRONT, frontFunction, reference, mask);\n\n    var frontOperation = stencilTest.frontOperation;\n    var frontOperationFail = frontOperation.fail;\n    var frontOperationZFail = frontOperation.zFail;\n    var frontOperationZPass = frontOperation.zPass;\n\n    gl.stencilOpSeparate(\n      gl.FRONT,\n      frontOperationFail,\n      frontOperationZFail,\n      frontOperationZPass\n    );\n\n    var backOperation = stencilTest.backOperation;\n    var backOperationFail = backOperation.fail;\n    var backOperationZFail = backOperation.zFail;\n    var backOperationZPass = backOperation.zPass;\n\n    gl.stencilOpSeparate(\n      gl.BACK,\n      backOperationFail,\n      backOperationZFail,\n      backOperationZPass\n    );\n  }\n}\n\nfunction applySampleCoverage(gl, renderState) {\n  var sampleCoverage = renderState.sampleCoverage;\n  var enabled = sampleCoverage.enabled;\n\n  enableOrDisable(gl, gl.SAMPLE_COVERAGE, enabled);\n\n  if (enabled) {\n    gl.sampleCoverage(sampleCoverage.value, sampleCoverage.invert);\n  }\n}\n\nvar scratchViewport = new BoundingRectangle();\n\nfunction applyViewport(gl, renderState, passState) {\n  var viewport = defaultValue(renderState.viewport, passState.viewport);\n  if (!defined(viewport)) {\n    viewport = scratchViewport;\n    viewport.width = passState.context.drawingBufferWidth;\n    viewport.height = passState.context.drawingBufferHeight;\n  }\n\n  passState.context.uniformState.viewport = viewport;\n  gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\n}\n\nRenderState.apply = function (gl, renderState, passState) {\n  applyFrontFace(gl, renderState);\n  applyCull(gl, renderState);\n  applyLineWidth(gl, renderState);\n  applyPolygonOffset(gl, renderState);\n  applyDepthRange(gl, renderState);\n  applyDepthTest(gl, renderState);\n  applyColorMask(gl, renderState);\n  applyDepthMask(gl, renderState);\n  applyStencilMask(gl, renderState);\n  applyStencilTest(gl, renderState);\n  applySampleCoverage(gl, renderState);\n  applyScissorTest(gl, renderState, passState);\n  applyBlending(gl, renderState, passState);\n  applyViewport(gl, renderState, passState);\n};\n\nfunction createFuncs(previousState, nextState) {\n  var funcs = [];\n\n  if (previousState.frontFace !== nextState.frontFace) {\n    funcs.push(applyFrontFace);\n  }\n\n  if (\n    previousState.cull.enabled !== nextState.cull.enabled ||\n    previousState.cull.face !== nextState.cull.face\n  ) {\n    funcs.push(applyCull);\n  }\n\n  if (previousState.lineWidth !== nextState.lineWidth) {\n    funcs.push(applyLineWidth);\n  }\n\n  if (\n    previousState.polygonOffset.enabled !== nextState.polygonOffset.enabled ||\n    previousState.polygonOffset.factor !== nextState.polygonOffset.factor ||\n    previousState.polygonOffset.units !== nextState.polygonOffset.units\n  ) {\n    funcs.push(applyPolygonOffset);\n  }\n\n  if (\n    previousState.depthRange.near !== nextState.depthRange.near ||\n    previousState.depthRange.far !== nextState.depthRange.far\n  ) {\n    funcs.push(applyDepthRange);\n  }\n\n  if (\n    previousState.depthTest.enabled !== nextState.depthTest.enabled ||\n    previousState.depthTest.func !== nextState.depthTest.func\n  ) {\n    funcs.push(applyDepthTest);\n  }\n\n  if (\n    previousState.colorMask.red !== nextState.colorMask.red ||\n    previousState.colorMask.green !== nextState.colorMask.green ||\n    previousState.colorMask.blue !== nextState.colorMask.blue ||\n    previousState.colorMask.alpha !== nextState.colorMask.alpha\n  ) {\n    funcs.push(applyColorMask);\n  }\n\n  if (previousState.depthMask !== nextState.depthMask) {\n    funcs.push(applyDepthMask);\n  }\n\n  if (previousState.stencilMask !== nextState.stencilMask) {\n    funcs.push(applyStencilMask);\n  }\n\n  if (\n    previousState.stencilTest.enabled !== nextState.stencilTest.enabled ||\n    previousState.stencilTest.frontFunction !==\n      nextState.stencilTest.frontFunction ||\n    previousState.stencilTest.backFunction !==\n      nextState.stencilTest.backFunction ||\n    previousState.stencilTest.reference !== nextState.stencilTest.reference ||\n    previousState.stencilTest.mask !== nextState.stencilTest.mask ||\n    previousState.stencilTest.frontOperation.fail !==\n      nextState.stencilTest.frontOperation.fail ||\n    previousState.stencilTest.frontOperation.zFail !==\n      nextState.stencilTest.frontOperation.zFail ||\n    previousState.stencilTest.backOperation.fail !==\n      nextState.stencilTest.backOperation.fail ||\n    previousState.stencilTest.backOperation.zFail !==\n      nextState.stencilTest.backOperation.zFail ||\n    previousState.stencilTest.backOperation.zPass !==\n      nextState.stencilTest.backOperation.zPass\n  ) {\n    funcs.push(applyStencilTest);\n  }\n\n  if (\n    previousState.sampleCoverage.enabled !== nextState.sampleCoverage.enabled ||\n    previousState.sampleCoverage.value !== nextState.sampleCoverage.value ||\n    previousState.sampleCoverage.invert !== nextState.sampleCoverage.invert\n  ) {\n    funcs.push(applySampleCoverage);\n  }\n\n  return funcs;\n}\n\nRenderState.partialApply = function (\n  gl,\n  previousRenderState,\n  renderState,\n  previousPassState,\n  passState,\n  clear\n) {\n  if (previousRenderState !== renderState) {\n    // When a new render state is applied, instead of making WebGL calls for all the states or first\n    // comparing the states one-by-one with the previous state (basically a linear search), we take\n    // advantage of RenderState's immutability, and store a dynamically populated sparse data structure\n    // containing functions that make the minimum number of WebGL calls when transitioning from one state\n    // to the other.  In practice, this works well since state-to-state transitions generally only require a\n    // few WebGL calls, especially if commands are stored by state.\n    var funcs = renderState._applyFunctions[previousRenderState.id];\n    if (!defined(funcs)) {\n      funcs = createFuncs(previousRenderState, renderState);\n      renderState._applyFunctions[previousRenderState.id] = funcs;\n    }\n\n    var len = funcs.length;\n    for (var i = 0; i < len; ++i) {\n      funcs[i](gl, renderState);\n    }\n  }\n\n  var previousScissorTest = defined(previousPassState.scissorTest)\n    ? previousPassState.scissorTest\n    : previousRenderState.scissorTest;\n  var scissorTest = defined(passState.scissorTest)\n    ? passState.scissorTest\n    : renderState.scissorTest;\n\n  // Our scissor rectangle can get out of sync with the GL scissor rectangle on clears.\n  // Seems to be a problem only on ANGLE. See https://github.com/CesiumGS/cesium/issues/2994\n  if (previousScissorTest !== scissorTest || clear) {\n    applyScissorTest(gl, renderState, passState);\n  }\n\n  var previousBlendingEnabled = defined(previousPassState.blendingEnabled)\n    ? previousPassState.blendingEnabled\n    : previousRenderState.blending.enabled;\n  var blendingEnabled = defined(passState.blendingEnabled)\n    ? passState.blendingEnabled\n    : renderState.blending.enabled;\n  if (\n    previousBlendingEnabled !== blendingEnabled ||\n    (blendingEnabled && previousRenderState.blending !== renderState.blending)\n  ) {\n    applyBlending(gl, renderState, passState);\n  }\n\n  if (\n    previousRenderState !== renderState ||\n    previousPassState !== passState ||\n    previousPassState.context !== passState.context\n  ) {\n    applyViewport(gl, renderState, passState);\n  }\n};\n\nRenderState.getState = function (renderState) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(renderState)) {\n    throw new DeveloperError(\"renderState is required.\");\n  }\n  //>>includeEnd('debug');\n\n  return {\n    frontFace: renderState.frontFace,\n    cull: {\n      enabled: renderState.cull.enabled,\n      face: renderState.cull.face,\n    },\n    lineWidth: renderState.lineWidth,\n    polygonOffset: {\n      enabled: renderState.polygonOffset.enabled,\n      factor: renderState.polygonOffset.factor,\n      units: renderState.polygonOffset.units,\n    },\n    scissorTest: {\n      enabled: renderState.scissorTest.enabled,\n      rectangle: BoundingRectangle.clone(renderState.scissorTest.rectangle),\n    },\n    depthRange: {\n      near: renderState.depthRange.near,\n      far: renderState.depthRange.far,\n    },\n    depthTest: {\n      enabled: renderState.depthTest.enabled,\n      func: renderState.depthTest.func,\n    },\n    colorMask: {\n      red: renderState.colorMask.red,\n      green: renderState.colorMask.green,\n      blue: renderState.colorMask.blue,\n      alpha: renderState.colorMask.alpha,\n    },\n    depthMask: renderState.depthMask,\n    stencilMask: renderState.stencilMask,\n    blending: {\n      enabled: renderState.blending.enabled,\n      color: Color.clone(renderState.blending.color),\n      equationRgb: renderState.blending.equationRgb,\n      equationAlpha: renderState.blending.equationAlpha,\n      functionSourceRgb: renderState.blending.functionSourceRgb,\n      functionSourceAlpha: renderState.blending.functionSourceAlpha,\n      functionDestinationRgb: renderState.blending.functionDestinationRgb,\n      functionDestinationAlpha: renderState.blending.functionDestinationAlpha,\n    },\n    stencilTest: {\n      enabled: renderState.stencilTest.enabled,\n      frontFunction: renderState.stencilTest.frontFunction,\n      backFunction: renderState.stencilTest.backFunction,\n      reference: renderState.stencilTest.reference,\n      mask: renderState.stencilTest.mask,\n      frontOperation: {\n        fail: renderState.stencilTest.frontOperation.fail,\n        zFail: renderState.stencilTest.frontOperation.zFail,\n        zPass: renderState.stencilTest.frontOperation.zPass,\n      },\n      backOperation: {\n        fail: renderState.stencilTest.backOperation.fail,\n        zFail: renderState.stencilTest.backOperation.zFail,\n        zPass: renderState.stencilTest.backOperation.zPass,\n      },\n    },\n    sampleCoverage: {\n      enabled: renderState.sampleCoverage.enabled,\n      value: renderState.sampleCoverage.value,\n      invert: renderState.sampleCoverage.invert,\n    },\n    viewport: defined(renderState.viewport)\n      ? BoundingRectangle.clone(renderState.viewport)\n      : undefined,\n  };\n};\nexport default RenderState;\n"]},"metadata":{},"sourceType":"module"}