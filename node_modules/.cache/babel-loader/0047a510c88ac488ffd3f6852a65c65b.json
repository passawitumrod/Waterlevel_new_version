{"ast":null,"code":"import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport AdditiveBlend from \"../Shaders/PostProcessStages/AdditiveBlend.js\";\nimport BrightPass from \"../Shaders/PostProcessStages/BrightPass.js\";\nimport GaussianBlur1D from \"../Shaders/PostProcessStages/GaussianBlur1D.js\";\nimport PassThrough from \"../Shaders/PostProcessStages/PassThrough.js\";\nimport PostProcessStage from \"./PostProcessStage.js\";\nimport PostProcessStageComposite from \"./PostProcessStageComposite.js\";\nimport PostProcessStageSampleMode from \"./PostProcessStageSampleMode.js\";\nimport PostProcessStageTextureCache from \"./PostProcessStageTextureCache.js\";\nimport SceneFramebuffer from \"./SceneFramebuffer.js\";\n\nfunction SunPostProcess() {\n  this._sceneFramebuffer = new SceneFramebuffer();\n  var scale = 0.125;\n  var stages = new Array(6);\n  stages[0] = new PostProcessStage({\n    fragmentShader: PassThrough,\n    textureScale: scale,\n    forcePowerOfTwo: true,\n    sampleMode: PostProcessStageSampleMode.LINEAR\n  });\n  var brightPass = stages[1] = new PostProcessStage({\n    fragmentShader: BrightPass,\n    uniforms: {\n      avgLuminance: 0.5,\n      // A guess at the average luminance across the entire scene\n      threshold: 0.25,\n      offset: 0.1\n    },\n    textureScale: scale,\n    forcePowerOfTwo: true\n  });\n  var that = this;\n  this._delta = 1.0;\n  this._sigma = 2.0;\n  this._blurStep = new Cartesian2();\n  stages[2] = new PostProcessStage({\n    fragmentShader: GaussianBlur1D,\n    uniforms: {\n      step: function () {\n        that._blurStep.x = that._blurStep.y = 1.0 / brightPass.outputTexture.width;\n        return that._blurStep;\n      },\n      delta: function () {\n        return that._delta;\n      },\n      sigma: function () {\n        return that._sigma;\n      },\n      direction: 0.0\n    },\n    textureScale: scale,\n    forcePowerOfTwo: true\n  });\n  stages[3] = new PostProcessStage({\n    fragmentShader: GaussianBlur1D,\n    uniforms: {\n      step: function () {\n        that._blurStep.x = that._blurStep.y = 1.0 / brightPass.outputTexture.width;\n        return that._blurStep;\n      },\n      delta: function () {\n        return that._delta;\n      },\n      sigma: function () {\n        return that._sigma;\n      },\n      direction: 1.0\n    },\n    textureScale: scale,\n    forcePowerOfTwo: true\n  });\n  stages[4] = new PostProcessStage({\n    fragmentShader: PassThrough,\n    sampleMode: PostProcessStageSampleMode.LINEAR\n  });\n  this._uCenter = new Cartesian2();\n  this._uRadius = undefined;\n  stages[5] = new PostProcessStage({\n    fragmentShader: AdditiveBlend,\n    uniforms: {\n      center: function () {\n        return that._uCenter;\n      },\n      radius: function () {\n        return that._uRadius;\n      },\n      colorTexture2: function () {\n        return that._sceneFramebuffer.getFramebuffer().getColorTexture(0);\n      }\n    }\n  });\n  this._stages = new PostProcessStageComposite({\n    stages: stages\n  });\n  var textureCache = new PostProcessStageTextureCache(this);\n  var length = stages.length;\n\n  for (var i = 0; i < length; ++i) {\n    stages[i]._textureCache = textureCache;\n  }\n\n  this._textureCache = textureCache;\n  this.length = stages.length;\n}\n\nSunPostProcess.prototype.get = function (index) {\n  return this._stages.get(index);\n};\n\nSunPostProcess.prototype.getStageByName = function (name) {\n  var length = this._stages.length;\n\n  for (var i = 0; i < length; ++i) {\n    var stage = this._stages.get(i);\n\n    if (stage.name === name) {\n      return stage;\n    }\n  }\n\n  return undefined;\n};\n\nvar sunPositionECScratch = new Cartesian4();\nvar sunPositionWCScratch = new Cartesian2();\nvar sizeScratch = new Cartesian2();\nvar postProcessMatrix4Scratch = new Matrix4();\n\nfunction updateSunPosition(postProcess, context, viewport) {\n  var us = context.uniformState;\n  var sunPosition = us.sunPositionWC;\n  var viewMatrix = us.view;\n  var viewProjectionMatrix = us.viewProjection;\n  var projectionMatrix = us.projection; // create up sampled render state\n\n  var viewportTransformation = Matrix4.computeViewportTransformation(viewport, 0.0, 1.0, postProcessMatrix4Scratch);\n  var sunPositionEC = Matrix4.multiplyByPoint(viewMatrix, sunPosition, sunPositionECScratch);\n  var sunPositionWC = Transforms.pointToGLWindowCoordinates(viewProjectionMatrix, viewportTransformation, sunPosition, sunPositionWCScratch);\n  sunPositionEC.x += CesiumMath.SOLAR_RADIUS;\n  var limbWC = Transforms.pointToGLWindowCoordinates(projectionMatrix, viewportTransformation, sunPositionEC, sunPositionEC);\n  var sunSize = Cartesian2.magnitude(Cartesian2.subtract(limbWC, sunPositionWC, limbWC)) * 30.0 * 2.0;\n  var size = sizeScratch;\n  size.x = sunSize;\n  size.y = sunSize;\n  postProcess._uCenter = Cartesian2.clone(sunPositionWC, postProcess._uCenter);\n  postProcess._uRadius = Math.max(size.x, size.y) * 0.15;\n  var width = context.drawingBufferWidth;\n  var height = context.drawingBufferHeight;\n  var stages = postProcess._stages;\n  var firstStage = stages.get(0);\n  var downSampleWidth = firstStage.outputTexture.width;\n  var downSampleHeight = firstStage.outputTexture.height;\n  var downSampleViewport = new BoundingRectangle();\n  downSampleViewport.width = downSampleWidth;\n  downSampleViewport.height = downSampleHeight; // create down sampled render state\n\n  viewportTransformation = Matrix4.computeViewportTransformation(downSampleViewport, 0.0, 1.0, postProcessMatrix4Scratch);\n  sunPositionWC = Transforms.pointToGLWindowCoordinates(viewProjectionMatrix, viewportTransformation, sunPosition, sunPositionWCScratch);\n  size.x *= downSampleWidth / width;\n  size.y *= downSampleHeight / height;\n  var scissorRectangle = firstStage.scissorRectangle;\n  scissorRectangle.x = Math.max(sunPositionWC.x - size.x * 0.5, 0.0);\n  scissorRectangle.y = Math.max(sunPositionWC.y - size.y * 0.5, 0.0);\n  scissorRectangle.width = Math.min(size.x, width);\n  scissorRectangle.height = Math.min(size.y, height);\n\n  for (var i = 1; i < 4; ++i) {\n    BoundingRectangle.clone(scissorRectangle, stages.get(i).scissorRectangle);\n  }\n}\n\nSunPostProcess.prototype.clear = function (context, passState, clearColor) {\n  this._sceneFramebuffer.clear(context, passState, clearColor);\n\n  this._textureCache.clear(context);\n};\n\nSunPostProcess.prototype.update = function (passState) {\n  var context = passState.context;\n  var viewport = passState.viewport;\n  var sceneFramebuffer = this._sceneFramebuffer;\n  sceneFramebuffer.update(context, viewport);\n  var framebuffer = sceneFramebuffer.getFramebuffer();\n\n  this._textureCache.update(context);\n\n  this._stages.update(context, false);\n\n  updateSunPosition(this, context, viewport);\n  return framebuffer;\n};\n\nSunPostProcess.prototype.execute = function (context) {\n  var colorTexture = this._sceneFramebuffer.getFramebuffer().getColorTexture(0);\n\n  var stages = this._stages;\n  var length = stages.length;\n  stages.get(0).execute(context, colorTexture);\n\n  for (var i = 1; i < length; ++i) {\n    stages.get(i).execute(context, stages.get(i - 1).outputTexture);\n  }\n};\n\nSunPostProcess.prototype.copy = function (context, framebuffer) {\n  if (!defined(this._copyColorCommand)) {\n    var that = this;\n    this._copyColorCommand = context.createViewportQuadCommand(PassThrough, {\n      uniformMap: {\n        colorTexture: function () {\n          return that._stages.get(that._stages.length - 1).outputTexture;\n        }\n      },\n      owner: this\n    });\n  }\n\n  this._copyColorCommand.framebuffer = framebuffer;\n\n  this._copyColorCommand.execute(context);\n};\n\nSunPostProcess.prototype.isDestroyed = function () {\n  return false;\n};\n\nSunPostProcess.prototype.destroy = function () {\n  this._textureCache.destroy();\n\n  this._stages.destroy();\n\n  return destroyObject(this);\n};\n\nexport default SunPostProcess;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/SunPostProcess.js"],"names":["BoundingRectangle","Cartesian2","Cartesian4","defined","destroyObject","CesiumMath","Matrix4","Transforms","AdditiveBlend","BrightPass","GaussianBlur1D","PassThrough","PostProcessStage","PostProcessStageComposite","PostProcessStageSampleMode","PostProcessStageTextureCache","SceneFramebuffer","SunPostProcess","_sceneFramebuffer","scale","stages","Array","fragmentShader","textureScale","forcePowerOfTwo","sampleMode","LINEAR","brightPass","uniforms","avgLuminance","threshold","offset","that","_delta","_sigma","_blurStep","step","x","y","outputTexture","width","delta","sigma","direction","_uCenter","_uRadius","undefined","center","radius","colorTexture2","getFramebuffer","getColorTexture","_stages","textureCache","length","i","_textureCache","prototype","get","index","getStageByName","name","stage","sunPositionECScratch","sunPositionWCScratch","sizeScratch","postProcessMatrix4Scratch","updateSunPosition","postProcess","context","viewport","us","uniformState","sunPosition","sunPositionWC","viewMatrix","view","viewProjectionMatrix","viewProjection","projectionMatrix","projection","viewportTransformation","computeViewportTransformation","sunPositionEC","multiplyByPoint","pointToGLWindowCoordinates","SOLAR_RADIUS","limbWC","sunSize","magnitude","subtract","size","clone","Math","max","drawingBufferWidth","height","drawingBufferHeight","firstStage","downSampleWidth","downSampleHeight","downSampleViewport","scissorRectangle","min","clear","passState","clearColor","update","sceneFramebuffer","framebuffer","execute","colorTexture","copy","_copyColorCommand","createViewportQuadCommand","uniformMap","owner","isDestroyed","destroy"],"mappings":"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","sourcesContent":["import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport AdditiveBlend from \"../Shaders/PostProcessStages/AdditiveBlend.js\";\nimport BrightPass from \"../Shaders/PostProcessStages/BrightPass.js\";\nimport GaussianBlur1D from \"../Shaders/PostProcessStages/GaussianBlur1D.js\";\nimport PassThrough from \"../Shaders/PostProcessStages/PassThrough.js\";\nimport PostProcessStage from \"./PostProcessStage.js\";\nimport PostProcessStageComposite from \"./PostProcessStageComposite.js\";\nimport PostProcessStageSampleMode from \"./PostProcessStageSampleMode.js\";\nimport PostProcessStageTextureCache from \"./PostProcessStageTextureCache.js\";\nimport SceneFramebuffer from \"./SceneFramebuffer.js\";\n\nfunction SunPostProcess() {\n  this._sceneFramebuffer = new SceneFramebuffer();\n\n  var scale = 0.125;\n  var stages = new Array(6);\n\n  stages[0] = new PostProcessStage({\n    fragmentShader: PassThrough,\n    textureScale: scale,\n    forcePowerOfTwo: true,\n    sampleMode: PostProcessStageSampleMode.LINEAR,\n  });\n\n  var brightPass = (stages[1] = new PostProcessStage({\n    fragmentShader: BrightPass,\n    uniforms: {\n      avgLuminance: 0.5, // A guess at the average luminance across the entire scene\n      threshold: 0.25,\n      offset: 0.1,\n    },\n    textureScale: scale,\n    forcePowerOfTwo: true,\n  }));\n\n  var that = this;\n  this._delta = 1.0;\n  this._sigma = 2.0;\n  this._blurStep = new Cartesian2();\n\n  stages[2] = new PostProcessStage({\n    fragmentShader: GaussianBlur1D,\n    uniforms: {\n      step: function () {\n        that._blurStep.x = that._blurStep.y =\n          1.0 / brightPass.outputTexture.width;\n        return that._blurStep;\n      },\n      delta: function () {\n        return that._delta;\n      },\n      sigma: function () {\n        return that._sigma;\n      },\n      direction: 0.0,\n    },\n    textureScale: scale,\n    forcePowerOfTwo: true,\n  });\n\n  stages[3] = new PostProcessStage({\n    fragmentShader: GaussianBlur1D,\n    uniforms: {\n      step: function () {\n        that._blurStep.x = that._blurStep.y =\n          1.0 / brightPass.outputTexture.width;\n        return that._blurStep;\n      },\n      delta: function () {\n        return that._delta;\n      },\n      sigma: function () {\n        return that._sigma;\n      },\n      direction: 1.0,\n    },\n    textureScale: scale,\n    forcePowerOfTwo: true,\n  });\n\n  stages[4] = new PostProcessStage({\n    fragmentShader: PassThrough,\n    sampleMode: PostProcessStageSampleMode.LINEAR,\n  });\n\n  this._uCenter = new Cartesian2();\n  this._uRadius = undefined;\n\n  stages[5] = new PostProcessStage({\n    fragmentShader: AdditiveBlend,\n    uniforms: {\n      center: function () {\n        return that._uCenter;\n      },\n      radius: function () {\n        return that._uRadius;\n      },\n      colorTexture2: function () {\n        return that._sceneFramebuffer.getFramebuffer().getColorTexture(0);\n      },\n    },\n  });\n\n  this._stages = new PostProcessStageComposite({\n    stages: stages,\n  });\n\n  var textureCache = new PostProcessStageTextureCache(this);\n  var length = stages.length;\n  for (var i = 0; i < length; ++i) {\n    stages[i]._textureCache = textureCache;\n  }\n\n  this._textureCache = textureCache;\n  this.length = stages.length;\n}\n\nSunPostProcess.prototype.get = function (index) {\n  return this._stages.get(index);\n};\n\nSunPostProcess.prototype.getStageByName = function (name) {\n  var length = this._stages.length;\n  for (var i = 0; i < length; ++i) {\n    var stage = this._stages.get(i);\n    if (stage.name === name) {\n      return stage;\n    }\n  }\n  return undefined;\n};\n\nvar sunPositionECScratch = new Cartesian4();\nvar sunPositionWCScratch = new Cartesian2();\nvar sizeScratch = new Cartesian2();\nvar postProcessMatrix4Scratch = new Matrix4();\n\nfunction updateSunPosition(postProcess, context, viewport) {\n  var us = context.uniformState;\n  var sunPosition = us.sunPositionWC;\n  var viewMatrix = us.view;\n  var viewProjectionMatrix = us.viewProjection;\n  var projectionMatrix = us.projection;\n\n  // create up sampled render state\n  var viewportTransformation = Matrix4.computeViewportTransformation(\n    viewport,\n    0.0,\n    1.0,\n    postProcessMatrix4Scratch\n  );\n  var sunPositionEC = Matrix4.multiplyByPoint(\n    viewMatrix,\n    sunPosition,\n    sunPositionECScratch\n  );\n  var sunPositionWC = Transforms.pointToGLWindowCoordinates(\n    viewProjectionMatrix,\n    viewportTransformation,\n    sunPosition,\n    sunPositionWCScratch\n  );\n\n  sunPositionEC.x += CesiumMath.SOLAR_RADIUS;\n  var limbWC = Transforms.pointToGLWindowCoordinates(\n    projectionMatrix,\n    viewportTransformation,\n    sunPositionEC,\n    sunPositionEC\n  );\n  var sunSize =\n    Cartesian2.magnitude(Cartesian2.subtract(limbWC, sunPositionWC, limbWC)) *\n    30.0 *\n    2.0;\n\n  var size = sizeScratch;\n  size.x = sunSize;\n  size.y = sunSize;\n\n  postProcess._uCenter = Cartesian2.clone(sunPositionWC, postProcess._uCenter);\n  postProcess._uRadius = Math.max(size.x, size.y) * 0.15;\n\n  var width = context.drawingBufferWidth;\n  var height = context.drawingBufferHeight;\n\n  var stages = postProcess._stages;\n  var firstStage = stages.get(0);\n\n  var downSampleWidth = firstStage.outputTexture.width;\n  var downSampleHeight = firstStage.outputTexture.height;\n\n  var downSampleViewport = new BoundingRectangle();\n  downSampleViewport.width = downSampleWidth;\n  downSampleViewport.height = downSampleHeight;\n\n  // create down sampled render state\n  viewportTransformation = Matrix4.computeViewportTransformation(\n    downSampleViewport,\n    0.0,\n    1.0,\n    postProcessMatrix4Scratch\n  );\n  sunPositionWC = Transforms.pointToGLWindowCoordinates(\n    viewProjectionMatrix,\n    viewportTransformation,\n    sunPosition,\n    sunPositionWCScratch\n  );\n\n  size.x *= downSampleWidth / width;\n  size.y *= downSampleHeight / height;\n\n  var scissorRectangle = firstStage.scissorRectangle;\n  scissorRectangle.x = Math.max(sunPositionWC.x - size.x * 0.5, 0.0);\n  scissorRectangle.y = Math.max(sunPositionWC.y - size.y * 0.5, 0.0);\n  scissorRectangle.width = Math.min(size.x, width);\n  scissorRectangle.height = Math.min(size.y, height);\n\n  for (var i = 1; i < 4; ++i) {\n    BoundingRectangle.clone(scissorRectangle, stages.get(i).scissorRectangle);\n  }\n}\n\nSunPostProcess.prototype.clear = function (context, passState, clearColor) {\n  this._sceneFramebuffer.clear(context, passState, clearColor);\n  this._textureCache.clear(context);\n};\n\nSunPostProcess.prototype.update = function (passState) {\n  var context = passState.context;\n  var viewport = passState.viewport;\n\n  var sceneFramebuffer = this._sceneFramebuffer;\n  sceneFramebuffer.update(context, viewport);\n  var framebuffer = sceneFramebuffer.getFramebuffer();\n\n  this._textureCache.update(context);\n  this._stages.update(context, false);\n\n  updateSunPosition(this, context, viewport);\n\n  return framebuffer;\n};\n\nSunPostProcess.prototype.execute = function (context) {\n  var colorTexture = this._sceneFramebuffer.getFramebuffer().getColorTexture(0);\n  var stages = this._stages;\n  var length = stages.length;\n  stages.get(0).execute(context, colorTexture);\n  for (var i = 1; i < length; ++i) {\n    stages.get(i).execute(context, stages.get(i - 1).outputTexture);\n  }\n};\n\nSunPostProcess.prototype.copy = function (context, framebuffer) {\n  if (!defined(this._copyColorCommand)) {\n    var that = this;\n    this._copyColorCommand = context.createViewportQuadCommand(PassThrough, {\n      uniformMap: {\n        colorTexture: function () {\n          return that._stages.get(that._stages.length - 1).outputTexture;\n        },\n      },\n      owner: this,\n    });\n  }\n\n  this._copyColorCommand.framebuffer = framebuffer;\n  this._copyColorCommand.execute(context);\n};\n\nSunPostProcess.prototype.isDestroyed = function () {\n  return false;\n};\n\nSunPostProcess.prototype.destroy = function () {\n  this._textureCache.destroy();\n  this._stages.destroy();\n  return destroyObject(this);\n};\nexport default SunPostProcess;\n"]},"metadata":{},"sourceType":"module"}