{"ast":null,"code":"import defined from \"../Core/defined.js\";\nimport DoublyLinkedList from \"../Core/DoublyLinkedList.js\";\n/**\n * Stores tiles with content loaded.\n *\n * @private\n */\n\nfunction Cesium3DTilesetCache() {\n  // [head, sentinel) -> tiles that weren't selected this frame and may be removed from the cache\n  // (sentinel, tail] -> tiles that were selected this frame\n  this._list = new DoublyLinkedList();\n  this._sentinel = this._list.add();\n  this._trimTiles = false;\n}\n\nCesium3DTilesetCache.prototype.reset = function () {\n  // Move sentinel node to the tail so, at the start of the frame, all tiles\n  // may be potentially replaced.  Tiles are moved to the right of the sentinel\n  // when they are selected so they will not be replaced.\n  this._list.splice(this._list.tail, this._sentinel);\n};\n\nCesium3DTilesetCache.prototype.touch = function (tile) {\n  var node = tile.cacheNode;\n\n  if (defined(node)) {\n    this._list.splice(this._sentinel, node);\n  }\n};\n\nCesium3DTilesetCache.prototype.add = function (tile) {\n  if (!defined(tile.cacheNode)) {\n    tile.cacheNode = this._list.add(tile);\n  }\n};\n\nCesium3DTilesetCache.prototype.unloadTile = function (tileset, tile, unloadCallback) {\n  var node = tile.cacheNode;\n\n  if (!defined(node)) {\n    return;\n  }\n\n  this._list.remove(node);\n\n  tile.cacheNode = undefined;\n  unloadCallback(tileset, tile);\n};\n\nCesium3DTilesetCache.prototype.unloadTiles = function (tileset, unloadCallback) {\n  var trimTiles = this._trimTiles;\n  this._trimTiles = false;\n  var list = this._list;\n  var maximumMemoryUsageInBytes = tileset.maximumMemoryUsage * 1024 * 1024; // Traverse the list only to the sentinel since tiles/nodes to the\n  // right of the sentinel were used this frame.\n  //\n  // The sub-list to the left of the sentinel is ordered from LRU to MRU.\n\n  var sentinel = this._sentinel;\n  var node = list.head;\n\n  while (node !== sentinel && (tileset.totalMemoryUsageInBytes > maximumMemoryUsageInBytes || trimTiles)) {\n    var tile = node.item;\n    node = node.next;\n    this.unloadTile(tileset, tile, unloadCallback);\n  }\n};\n\nCesium3DTilesetCache.prototype.trim = function () {\n  this._trimTiles = true;\n};\n\nexport default Cesium3DTilesetCache;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/Cesium3DTilesetCache.js"],"names":["defined","DoublyLinkedList","Cesium3DTilesetCache","_list","_sentinel","add","_trimTiles","prototype","reset","splice","tail","touch","tile","node","cacheNode","unloadTile","tileset","unloadCallback","remove","undefined","unloadTiles","trimTiles","list","maximumMemoryUsageInBytes","maximumMemoryUsage","sentinel","head","totalMemoryUsageInBytes","item","next","trim"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AAEA;;;;;;AAKA,SAASC,oBAAT,GAAgC;AAC9B;AACA;AACA,OAAKC,KAAL,GAAa,IAAIF,gBAAJ,EAAb;AACA,OAAKG,SAAL,GAAiB,KAAKD,KAAL,CAAWE,GAAX,EAAjB;AACA,OAAKC,UAAL,GAAkB,KAAlB;AACD;;AAEDJ,oBAAoB,CAACK,SAArB,CAA+BC,KAA/B,GAAuC,YAAY;AACjD;AACA;AACA;AACA,OAAKL,KAAL,CAAWM,MAAX,CAAkB,KAAKN,KAAL,CAAWO,IAA7B,EAAmC,KAAKN,SAAxC;AACD,CALD;;AAOAF,oBAAoB,CAACK,SAArB,CAA+BI,KAA/B,GAAuC,UAAUC,IAAV,EAAgB;AACrD,MAAIC,IAAI,GAAGD,IAAI,CAACE,SAAhB;;AACA,MAAId,OAAO,CAACa,IAAD,CAAX,EAAmB;AACjB,SAAKV,KAAL,CAAWM,MAAX,CAAkB,KAAKL,SAAvB,EAAkCS,IAAlC;AACD;AACF,CALD;;AAOAX,oBAAoB,CAACK,SAArB,CAA+BF,GAA/B,GAAqC,UAAUO,IAAV,EAAgB;AACnD,MAAI,CAACZ,OAAO,CAACY,IAAI,CAACE,SAAN,CAAZ,EAA8B;AAC5BF,IAAAA,IAAI,CAACE,SAAL,GAAiB,KAAKX,KAAL,CAAWE,GAAX,CAAeO,IAAf,CAAjB;AACD;AACF,CAJD;;AAMAV,oBAAoB,CAACK,SAArB,CAA+BQ,UAA/B,GAA4C,UAC1CC,OAD0C,EAE1CJ,IAF0C,EAG1CK,cAH0C,EAI1C;AACA,MAAIJ,IAAI,GAAGD,IAAI,CAACE,SAAhB;;AACA,MAAI,CAACd,OAAO,CAACa,IAAD,CAAZ,EAAoB;AAClB;AACD;;AAED,OAAKV,KAAL,CAAWe,MAAX,CAAkBL,IAAlB;;AACAD,EAAAA,IAAI,CAACE,SAAL,GAAiBK,SAAjB;AACAF,EAAAA,cAAc,CAACD,OAAD,EAAUJ,IAAV,CAAd;AACD,CAbD;;AAeAV,oBAAoB,CAACK,SAArB,CAA+Ba,WAA/B,GAA6C,UAC3CJ,OAD2C,EAE3CC,cAF2C,EAG3C;AACA,MAAII,SAAS,GAAG,KAAKf,UAArB;AACA,OAAKA,UAAL,GAAkB,KAAlB;AAEA,MAAIgB,IAAI,GAAG,KAAKnB,KAAhB;AAEA,MAAIoB,yBAAyB,GAAGP,OAAO,CAACQ,kBAAR,GAA6B,IAA7B,GAAoC,IAApE,CANA,CAQA;AACA;AACA;AACA;;AACA,MAAIC,QAAQ,GAAG,KAAKrB,SAApB;AACA,MAAIS,IAAI,GAAGS,IAAI,CAACI,IAAhB;;AACA,SACEb,IAAI,KAAKY,QAAT,KACCT,OAAO,CAACW,uBAAR,GAAkCJ,yBAAlC,IAA+DF,SADhE,CADF,EAGE;AACA,QAAIT,IAAI,GAAGC,IAAI,CAACe,IAAhB;AACAf,IAAAA,IAAI,GAAGA,IAAI,CAACgB,IAAZ;AACA,SAAKd,UAAL,CAAgBC,OAAhB,EAAyBJ,IAAzB,EAA+BK,cAA/B;AACD;AACF,CAzBD;;AA2BAf,oBAAoB,CAACK,SAArB,CAA+BuB,IAA/B,GAAsC,YAAY;AAChD,OAAKxB,UAAL,GAAkB,IAAlB;AACD,CAFD;;AAGA,eAAeJ,oBAAf","sourcesContent":["import defined from \"../Core/defined.js\";\nimport DoublyLinkedList from \"../Core/DoublyLinkedList.js\";\n\n/**\n * Stores tiles with content loaded.\n *\n * @private\n */\nfunction Cesium3DTilesetCache() {\n  // [head, sentinel) -> tiles that weren't selected this frame and may be removed from the cache\n  // (sentinel, tail] -> tiles that were selected this frame\n  this._list = new DoublyLinkedList();\n  this._sentinel = this._list.add();\n  this._trimTiles = false;\n}\n\nCesium3DTilesetCache.prototype.reset = function () {\n  // Move sentinel node to the tail so, at the start of the frame, all tiles\n  // may be potentially replaced.  Tiles are moved to the right of the sentinel\n  // when they are selected so they will not be replaced.\n  this._list.splice(this._list.tail, this._sentinel);\n};\n\nCesium3DTilesetCache.prototype.touch = function (tile) {\n  var node = tile.cacheNode;\n  if (defined(node)) {\n    this._list.splice(this._sentinel, node);\n  }\n};\n\nCesium3DTilesetCache.prototype.add = function (tile) {\n  if (!defined(tile.cacheNode)) {\n    tile.cacheNode = this._list.add(tile);\n  }\n};\n\nCesium3DTilesetCache.prototype.unloadTile = function (\n  tileset,\n  tile,\n  unloadCallback\n) {\n  var node = tile.cacheNode;\n  if (!defined(node)) {\n    return;\n  }\n\n  this._list.remove(node);\n  tile.cacheNode = undefined;\n  unloadCallback(tileset, tile);\n};\n\nCesium3DTilesetCache.prototype.unloadTiles = function (\n  tileset,\n  unloadCallback\n) {\n  var trimTiles = this._trimTiles;\n  this._trimTiles = false;\n\n  var list = this._list;\n\n  var maximumMemoryUsageInBytes = tileset.maximumMemoryUsage * 1024 * 1024;\n\n  // Traverse the list only to the sentinel since tiles/nodes to the\n  // right of the sentinel were used this frame.\n  //\n  // The sub-list to the left of the sentinel is ordered from LRU to MRU.\n  var sentinel = this._sentinel;\n  var node = list.head;\n  while (\n    node !== sentinel &&\n    (tileset.totalMemoryUsageInBytes > maximumMemoryUsageInBytes || trimTiles)\n  ) {\n    var tile = node.item;\n    node = node.next;\n    this.unloadTile(tileset, tile, unloadCallback);\n  }\n};\n\nCesium3DTilesetCache.prototype.trim = function () {\n  this._trimTiles = true;\n};\nexport default Cesium3DTilesetCache;\n"]},"metadata":{},"sourceType":"module"}