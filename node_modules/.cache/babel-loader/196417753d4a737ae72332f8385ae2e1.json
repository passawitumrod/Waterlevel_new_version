{"ast":null,"code":"import BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport ComponentDatatype from \"../Core/ComponentDatatype.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport IndexDatatype from \"../Core/IndexDatatype.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport PrimitiveType from \"../Core/PrimitiveType.js\";\nimport Buffer from \"../Renderer/Buffer.js\";\nimport BufferUsage from \"../Renderer/BufferUsage.js\";\nimport ComputeCommand from \"../Renderer/ComputeCommand.js\";\nimport DrawCommand from \"../Renderer/DrawCommand.js\";\nimport PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderProgram from \"../Renderer/ShaderProgram.js\";\nimport Texture from \"../Renderer/Texture.js\";\nimport VertexArray from \"../Renderer/VertexArray.js\";\nimport SunFS from \"../Shaders/SunFS.js\";\nimport SunTextureFS from \"../Shaders/SunTextureFS.js\";\nimport SunVS from \"../Shaders/SunVS.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport SceneMode from \"./SceneMode.js\";\nimport SceneTransforms from \"./SceneTransforms.js\";\n/**\n * Draws a sun billboard.\n * <p>This is only supported in 3D and Columbus view.</p>\n *\n * @alias Sun\n * @constructor\n *\n *\n * @example\n * scene.sun = new Cesium.Sun();\n *\n * @see Scene#sun\n */\n\nfunction Sun() {\n  /**\n   * Determines if the sun will be shown.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.show = true;\n  this._drawCommand = new DrawCommand({\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingVolume: new BoundingSphere(),\n    owner: this\n  });\n  this._commands = {\n    drawCommand: this._drawCommand,\n    computeCommand: undefined\n  };\n  this._boundingVolume = new BoundingSphere();\n  this._boundingVolume2D = new BoundingSphere();\n  this._texture = undefined;\n  this._drawingBufferWidth = undefined;\n  this._drawingBufferHeight = undefined;\n  this._radiusTS = undefined;\n  this._size = undefined;\n  this.glowFactor = 1.0;\n  this._glowFactorDirty = false;\n  this._useHdr = undefined;\n  var that = this;\n  this._uniformMap = {\n    u_texture: function () {\n      return that._texture;\n    },\n    u_size: function () {\n      return that._size;\n    }\n  };\n}\n\nObject.defineProperties(Sun.prototype, {\n  /**\n   * Gets or sets a number that controls how \"bright\" the Sun's lens flare appears\n   * to be.  Zero shows just the Sun's disc without any flare.\n   * Use larger values for a more pronounced flare around the Sun.\n   *\n   * @memberof Sun.prototype\n   * @type {Number}\n   * @default 1.0\n   */\n  glowFactor: {\n    get: function () {\n      return this._glowFactor;\n    },\n    set: function (glowFactor) {\n      glowFactor = Math.max(glowFactor, 0.0);\n      this._glowFactor = glowFactor;\n      this._glowFactorDirty = true;\n    }\n  }\n});\nvar scratchPositionWC = new Cartesian2();\nvar scratchLimbWC = new Cartesian2();\nvar scratchPositionEC = new Cartesian4();\nvar scratchCartesian4 = new Cartesian4();\n/**\n * @private\n */\n\nSun.prototype.update = function (frameState, passState, useHdr) {\n  if (!this.show) {\n    return undefined;\n  }\n\n  var mode = frameState.mode;\n\n  if (mode === SceneMode.SCENE2D || mode === SceneMode.MORPHING) {\n    return undefined;\n  }\n\n  if (!frameState.passes.render) {\n    return undefined;\n  }\n\n  var context = frameState.context;\n  var drawingBufferWidth = passState.viewport.width;\n  var drawingBufferHeight = passState.viewport.height;\n\n  if (!defined(this._texture) || drawingBufferWidth !== this._drawingBufferWidth || drawingBufferHeight !== this._drawingBufferHeight || this._glowFactorDirty || useHdr !== this._useHdr) {\n    this._texture = this._texture && this._texture.destroy();\n    this._drawingBufferWidth = drawingBufferWidth;\n    this._drawingBufferHeight = drawingBufferHeight;\n    this._glowFactorDirty = false;\n    this._useHdr = useHdr;\n    var size = Math.max(drawingBufferWidth, drawingBufferHeight);\n    size = Math.pow(2.0, Math.ceil(Math.log(size) / Math.log(2.0)) - 2.0); // The size computed above can be less than 1.0 if size < 4.0. This will probably\n    // never happen in practice, but does in the tests. Clamp to 1.0 to prevent WebGL\n    // errors in the tests.\n\n    size = Math.max(1.0, size);\n    var pixelDatatype = useHdr ? context.halfFloatingPointTexture ? PixelDatatype.HALF_FLOAT : PixelDatatype.FLOAT : PixelDatatype.UNSIGNED_BYTE;\n    this._texture = new Texture({\n      context: context,\n      width: size,\n      height: size,\n      pixelFormat: PixelFormat.RGBA,\n      pixelDatatype: pixelDatatype\n    });\n    this._glowLengthTS = this._glowFactor * 5.0;\n    this._radiusTS = 1.0 / (1.0 + 2.0 * this._glowLengthTS) * 0.5;\n    var that = this;\n    var uniformMap = {\n      u_radiusTS: function () {\n        return that._radiusTS;\n      }\n    };\n    this._commands.computeCommand = new ComputeCommand({\n      fragmentShaderSource: SunTextureFS,\n      outputTexture: this._texture,\n      uniformMap: uniformMap,\n      persists: false,\n      owner: this,\n      postExecute: function () {\n        that._commands.computeCommand = undefined;\n      }\n    });\n  }\n\n  var drawCommand = this._drawCommand;\n\n  if (!defined(drawCommand.vertexArray)) {\n    var attributeLocations = {\n      direction: 0\n    };\n    var directions = new Uint8Array(4 * 2);\n    directions[0] = 0;\n    directions[1] = 0;\n    directions[2] = 255;\n    directions[3] = 0.0;\n    directions[4] = 255;\n    directions[5] = 255;\n    directions[6] = 0.0;\n    directions[7] = 255;\n    var vertexBuffer = Buffer.createVertexBuffer({\n      context: context,\n      typedArray: directions,\n      usage: BufferUsage.STATIC_DRAW\n    });\n    var attributes = [{\n      index: attributeLocations.direction,\n      vertexBuffer: vertexBuffer,\n      componentsPerAttribute: 2,\n      normalize: true,\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE\n    }]; // Workaround Internet Explorer 11.0.8 lack of TRIANGLE_FAN\n\n    var indexBuffer = Buffer.createIndexBuffer({\n      context: context,\n      typedArray: new Uint16Array([0, 1, 2, 0, 2, 3]),\n      usage: BufferUsage.STATIC_DRAW,\n      indexDatatype: IndexDatatype.UNSIGNED_SHORT\n    });\n    drawCommand.vertexArray = new VertexArray({\n      context: context,\n      attributes: attributes,\n      indexBuffer: indexBuffer\n    });\n    drawCommand.shaderProgram = ShaderProgram.fromCache({\n      context: context,\n      vertexShaderSource: SunVS,\n      fragmentShaderSource: SunFS,\n      attributeLocations: attributeLocations\n    });\n    drawCommand.renderState = RenderState.fromCache({\n      blending: BlendingState.ALPHA_BLEND\n    });\n    drawCommand.uniformMap = this._uniformMap;\n  }\n\n  var sunPosition = context.uniformState.sunPositionWC;\n  var sunPositionCV = context.uniformState.sunPositionColumbusView;\n  var boundingVolume = this._boundingVolume;\n  var boundingVolume2D = this._boundingVolume2D;\n  Cartesian3.clone(sunPosition, boundingVolume.center);\n  boundingVolume2D.center.x = sunPositionCV.z;\n  boundingVolume2D.center.y = sunPositionCV.x;\n  boundingVolume2D.center.z = sunPositionCV.y;\n  boundingVolume.radius = CesiumMath.SOLAR_RADIUS + CesiumMath.SOLAR_RADIUS * this._glowLengthTS;\n  boundingVolume2D.radius = boundingVolume.radius;\n\n  if (mode === SceneMode.SCENE3D) {\n    BoundingSphere.clone(boundingVolume, drawCommand.boundingVolume);\n  } else if (mode === SceneMode.COLUMBUS_VIEW) {\n    BoundingSphere.clone(boundingVolume2D, drawCommand.boundingVolume);\n  }\n\n  var position = SceneTransforms.computeActualWgs84Position(frameState, sunPosition, scratchCartesian4);\n  var dist = Cartesian3.magnitude(Cartesian3.subtract(position, frameState.camera.position, scratchCartesian4));\n  var projMatrix = context.uniformState.projection;\n  var positionEC = scratchPositionEC;\n  positionEC.x = 0;\n  positionEC.y = 0;\n  positionEC.z = -dist;\n  positionEC.w = 1;\n  var positionCC = Matrix4.multiplyByVector(projMatrix, positionEC, scratchCartesian4);\n  var positionWC = SceneTransforms.clipToGLWindowCoordinates(passState.viewport, positionCC, scratchPositionWC);\n  positionEC.x = CesiumMath.SOLAR_RADIUS;\n  var limbCC = Matrix4.multiplyByVector(projMatrix, positionEC, scratchCartesian4);\n  var limbWC = SceneTransforms.clipToGLWindowCoordinates(passState.viewport, limbCC, scratchLimbWC);\n  this._size = Cartesian2.magnitude(Cartesian2.subtract(limbWC, positionWC, scratchCartesian4));\n  this._size = 2.0 * this._size * (1.0 + 2.0 * this._glowLengthTS);\n  this._size = Math.ceil(this._size);\n  return this._commands;\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see Sun#destroy\n */\n\n\nSun.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * sun = sun && sun.destroy();\n *\n *  @see Sun#isDestroyed\n */\n\n\nSun.prototype.destroy = function () {\n  var command = this._drawCommand;\n  command.vertexArray = command.vertexArray && command.vertexArray.destroy();\n  command.shaderProgram = command.shaderProgram && command.shaderProgram.destroy();\n  this._texture = this._texture && this._texture.destroy();\n  return destroyObject(this);\n};\n\nexport default Sun;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/Sun.js"],"names":["BoundingSphere","Cartesian2","Cartesian3","Cartesian4","ComponentDatatype","defined","destroyObject","IndexDatatype","CesiumMath","Matrix4","PixelFormat","PrimitiveType","Buffer","BufferUsage","ComputeCommand","DrawCommand","PixelDatatype","RenderState","ShaderProgram","Texture","VertexArray","SunFS","SunTextureFS","SunVS","BlendingState","SceneMode","SceneTransforms","Sun","show","_drawCommand","primitiveType","TRIANGLES","boundingVolume","owner","_commands","drawCommand","computeCommand","undefined","_boundingVolume","_boundingVolume2D","_texture","_drawingBufferWidth","_drawingBufferHeight","_radiusTS","_size","glowFactor","_glowFactorDirty","_useHdr","that","_uniformMap","u_texture","u_size","Object","defineProperties","prototype","get","_glowFactor","set","Math","max","scratchPositionWC","scratchLimbWC","scratchPositionEC","scratchCartesian4","update","frameState","passState","useHdr","mode","SCENE2D","MORPHING","passes","render","context","drawingBufferWidth","viewport","width","drawingBufferHeight","height","destroy","size","pow","ceil","log","pixelDatatype","halfFloatingPointTexture","HALF_FLOAT","FLOAT","UNSIGNED_BYTE","pixelFormat","RGBA","_glowLengthTS","uniformMap","u_radiusTS","fragmentShaderSource","outputTexture","persists","postExecute","vertexArray","attributeLocations","direction","directions","Uint8Array","vertexBuffer","createVertexBuffer","typedArray","usage","STATIC_DRAW","attributes","index","componentsPerAttribute","normalize","componentDatatype","indexBuffer","createIndexBuffer","Uint16Array","indexDatatype","UNSIGNED_SHORT","shaderProgram","fromCache","vertexShaderSource","renderState","blending","ALPHA_BLEND","sunPosition","uniformState","sunPositionWC","sunPositionCV","sunPositionColumbusView","boundingVolume2D","clone","center","x","z","y","radius","SOLAR_RADIUS","SCENE3D","COLUMBUS_VIEW","position","computeActualWgs84Position","dist","magnitude","subtract","camera","projMatrix","projection","positionEC","w","positionCC","multiplyByVector","positionWC","clipToGLWindowCoordinates","limbCC","limbWC","isDestroyed","command"],"mappings":"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","sourcesContent":["import BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport ComponentDatatype from \"../Core/ComponentDatatype.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport IndexDatatype from \"../Core/IndexDatatype.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport PrimitiveType from \"../Core/PrimitiveType.js\";\nimport Buffer from \"../Renderer/Buffer.js\";\nimport BufferUsage from \"../Renderer/BufferUsage.js\";\nimport ComputeCommand from \"../Renderer/ComputeCommand.js\";\nimport DrawCommand from \"../Renderer/DrawCommand.js\";\nimport PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderProgram from \"../Renderer/ShaderProgram.js\";\nimport Texture from \"../Renderer/Texture.js\";\nimport VertexArray from \"../Renderer/VertexArray.js\";\nimport SunFS from \"../Shaders/SunFS.js\";\nimport SunTextureFS from \"../Shaders/SunTextureFS.js\";\nimport SunVS from \"../Shaders/SunVS.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport SceneMode from \"./SceneMode.js\";\nimport SceneTransforms from \"./SceneTransforms.js\";\n\n/**\n * Draws a sun billboard.\n * <p>This is only supported in 3D and Columbus view.</p>\n *\n * @alias Sun\n * @constructor\n *\n *\n * @example\n * scene.sun = new Cesium.Sun();\n *\n * @see Scene#sun\n */\nfunction Sun() {\n  /**\n   * Determines if the sun will be shown.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.show = true;\n\n  this._drawCommand = new DrawCommand({\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingVolume: new BoundingSphere(),\n    owner: this,\n  });\n  this._commands = {\n    drawCommand: this._drawCommand,\n    computeCommand: undefined,\n  };\n  this._boundingVolume = new BoundingSphere();\n  this._boundingVolume2D = new BoundingSphere();\n\n  this._texture = undefined;\n  this._drawingBufferWidth = undefined;\n  this._drawingBufferHeight = undefined;\n  this._radiusTS = undefined;\n  this._size = undefined;\n\n  this.glowFactor = 1.0;\n  this._glowFactorDirty = false;\n\n  this._useHdr = undefined;\n\n  var that = this;\n  this._uniformMap = {\n    u_texture: function () {\n      return that._texture;\n    },\n    u_size: function () {\n      return that._size;\n    },\n  };\n}\n\nObject.defineProperties(Sun.prototype, {\n  /**\n   * Gets or sets a number that controls how \"bright\" the Sun's lens flare appears\n   * to be.  Zero shows just the Sun's disc without any flare.\n   * Use larger values for a more pronounced flare around the Sun.\n   *\n   * @memberof Sun.prototype\n   * @type {Number}\n   * @default 1.0\n   */\n  glowFactor: {\n    get: function () {\n      return this._glowFactor;\n    },\n    set: function (glowFactor) {\n      glowFactor = Math.max(glowFactor, 0.0);\n      this._glowFactor = glowFactor;\n      this._glowFactorDirty = true;\n    },\n  },\n});\n\nvar scratchPositionWC = new Cartesian2();\nvar scratchLimbWC = new Cartesian2();\nvar scratchPositionEC = new Cartesian4();\nvar scratchCartesian4 = new Cartesian4();\n\n/**\n * @private\n */\nSun.prototype.update = function (frameState, passState, useHdr) {\n  if (!this.show) {\n    return undefined;\n  }\n\n  var mode = frameState.mode;\n  if (mode === SceneMode.SCENE2D || mode === SceneMode.MORPHING) {\n    return undefined;\n  }\n\n  if (!frameState.passes.render) {\n    return undefined;\n  }\n\n  var context = frameState.context;\n  var drawingBufferWidth = passState.viewport.width;\n  var drawingBufferHeight = passState.viewport.height;\n\n  if (\n    !defined(this._texture) ||\n    drawingBufferWidth !== this._drawingBufferWidth ||\n    drawingBufferHeight !== this._drawingBufferHeight ||\n    this._glowFactorDirty ||\n    useHdr !== this._useHdr\n  ) {\n    this._texture = this._texture && this._texture.destroy();\n    this._drawingBufferWidth = drawingBufferWidth;\n    this._drawingBufferHeight = drawingBufferHeight;\n    this._glowFactorDirty = false;\n    this._useHdr = useHdr;\n\n    var size = Math.max(drawingBufferWidth, drawingBufferHeight);\n    size = Math.pow(2.0, Math.ceil(Math.log(size) / Math.log(2.0)) - 2.0);\n\n    // The size computed above can be less than 1.0 if size < 4.0. This will probably\n    // never happen in practice, but does in the tests. Clamp to 1.0 to prevent WebGL\n    // errors in the tests.\n    size = Math.max(1.0, size);\n\n    var pixelDatatype = useHdr\n      ? context.halfFloatingPointTexture\n        ? PixelDatatype.HALF_FLOAT\n        : PixelDatatype.FLOAT\n      : PixelDatatype.UNSIGNED_BYTE;\n    this._texture = new Texture({\n      context: context,\n      width: size,\n      height: size,\n      pixelFormat: PixelFormat.RGBA,\n      pixelDatatype: pixelDatatype,\n    });\n\n    this._glowLengthTS = this._glowFactor * 5.0;\n    this._radiusTS = (1.0 / (1.0 + 2.0 * this._glowLengthTS)) * 0.5;\n\n    var that = this;\n    var uniformMap = {\n      u_radiusTS: function () {\n        return that._radiusTS;\n      },\n    };\n\n    this._commands.computeCommand = new ComputeCommand({\n      fragmentShaderSource: SunTextureFS,\n      outputTexture: this._texture,\n      uniformMap: uniformMap,\n      persists: false,\n      owner: this,\n      postExecute: function () {\n        that._commands.computeCommand = undefined;\n      },\n    });\n  }\n\n  var drawCommand = this._drawCommand;\n\n  if (!defined(drawCommand.vertexArray)) {\n    var attributeLocations = {\n      direction: 0,\n    };\n\n    var directions = new Uint8Array(4 * 2);\n    directions[0] = 0;\n    directions[1] = 0;\n\n    directions[2] = 255;\n    directions[3] = 0.0;\n\n    directions[4] = 255;\n    directions[5] = 255;\n\n    directions[6] = 0.0;\n    directions[7] = 255;\n\n    var vertexBuffer = Buffer.createVertexBuffer({\n      context: context,\n      typedArray: directions,\n      usage: BufferUsage.STATIC_DRAW,\n    });\n    var attributes = [\n      {\n        index: attributeLocations.direction,\n        vertexBuffer: vertexBuffer,\n        componentsPerAttribute: 2,\n        normalize: true,\n        componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      },\n    ];\n    // Workaround Internet Explorer 11.0.8 lack of TRIANGLE_FAN\n    var indexBuffer = Buffer.createIndexBuffer({\n      context: context,\n      typedArray: new Uint16Array([0, 1, 2, 0, 2, 3]),\n      usage: BufferUsage.STATIC_DRAW,\n      indexDatatype: IndexDatatype.UNSIGNED_SHORT,\n    });\n    drawCommand.vertexArray = new VertexArray({\n      context: context,\n      attributes: attributes,\n      indexBuffer: indexBuffer,\n    });\n\n    drawCommand.shaderProgram = ShaderProgram.fromCache({\n      context: context,\n      vertexShaderSource: SunVS,\n      fragmentShaderSource: SunFS,\n      attributeLocations: attributeLocations,\n    });\n\n    drawCommand.renderState = RenderState.fromCache({\n      blending: BlendingState.ALPHA_BLEND,\n    });\n    drawCommand.uniformMap = this._uniformMap;\n  }\n\n  var sunPosition = context.uniformState.sunPositionWC;\n  var sunPositionCV = context.uniformState.sunPositionColumbusView;\n\n  var boundingVolume = this._boundingVolume;\n  var boundingVolume2D = this._boundingVolume2D;\n\n  Cartesian3.clone(sunPosition, boundingVolume.center);\n  boundingVolume2D.center.x = sunPositionCV.z;\n  boundingVolume2D.center.y = sunPositionCV.x;\n  boundingVolume2D.center.z = sunPositionCV.y;\n\n  boundingVolume.radius =\n    CesiumMath.SOLAR_RADIUS + CesiumMath.SOLAR_RADIUS * this._glowLengthTS;\n  boundingVolume2D.radius = boundingVolume.radius;\n\n  if (mode === SceneMode.SCENE3D) {\n    BoundingSphere.clone(boundingVolume, drawCommand.boundingVolume);\n  } else if (mode === SceneMode.COLUMBUS_VIEW) {\n    BoundingSphere.clone(boundingVolume2D, drawCommand.boundingVolume);\n  }\n\n  var position = SceneTransforms.computeActualWgs84Position(\n    frameState,\n    sunPosition,\n    scratchCartesian4\n  );\n\n  var dist = Cartesian3.magnitude(\n    Cartesian3.subtract(position, frameState.camera.position, scratchCartesian4)\n  );\n  var projMatrix = context.uniformState.projection;\n\n  var positionEC = scratchPositionEC;\n  positionEC.x = 0;\n  positionEC.y = 0;\n  positionEC.z = -dist;\n  positionEC.w = 1;\n\n  var positionCC = Matrix4.multiplyByVector(\n    projMatrix,\n    positionEC,\n    scratchCartesian4\n  );\n  var positionWC = SceneTransforms.clipToGLWindowCoordinates(\n    passState.viewport,\n    positionCC,\n    scratchPositionWC\n  );\n\n  positionEC.x = CesiumMath.SOLAR_RADIUS;\n  var limbCC = Matrix4.multiplyByVector(\n    projMatrix,\n    positionEC,\n    scratchCartesian4\n  );\n  var limbWC = SceneTransforms.clipToGLWindowCoordinates(\n    passState.viewport,\n    limbCC,\n    scratchLimbWC\n  );\n\n  this._size = Cartesian2.magnitude(\n    Cartesian2.subtract(limbWC, positionWC, scratchCartesian4)\n  );\n  this._size = 2.0 * this._size * (1.0 + 2.0 * this._glowLengthTS);\n  this._size = Math.ceil(this._size);\n\n  return this._commands;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see Sun#destroy\n */\nSun.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * sun = sun && sun.destroy();\n *\n *  @see Sun#isDestroyed\n */\nSun.prototype.destroy = function () {\n  var command = this._drawCommand;\n  command.vertexArray = command.vertexArray && command.vertexArray.destroy();\n  command.shaderProgram =\n    command.shaderProgram && command.shaderProgram.destroy();\n\n  this._texture = this._texture && this._texture.destroy();\n\n  return destroyObject(this);\n};\nexport default Sun;\n"]},"metadata":{},"sourceType":"module"}