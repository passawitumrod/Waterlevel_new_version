{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport EllipsoidOutlineGeometry from \"./EllipsoidOutlineGeometry.js\";\n/**\n * A description of the outline of a sphere.\n *\n * @alias SphereOutlineGeometry\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Number} [options.radius=1.0] The radius of the sphere.\n * @param {Number} [options.stackPartitions=10] The count of stacks for the sphere (1 greater than the number of parallel lines).\n * @param {Number} [options.slicePartitions=8] The count of slices for the sphere (Equal to the number of radial lines).\n * @param {Number} [options.subdivisions=200] The number of points per line, determining the granularity of the curvature .\n *\n * @exception {DeveloperError} options.stackPartitions must be greater than or equal to one.\n * @exception {DeveloperError} options.slicePartitions must be greater than or equal to zero.\n * @exception {DeveloperError} options.subdivisions must be greater than or equal to zero.\n *\n * @example\n * var sphere = new Cesium.SphereOutlineGeometry({\n *   radius : 100.0,\n *   stackPartitions : 6,\n *   slicePartitions: 5\n * });\n * var geometry = Cesium.SphereOutlineGeometry.createGeometry(sphere);\n */\n\nfunction SphereOutlineGeometry(options) {\n  var radius = defaultValue(options.radius, 1.0);\n  var radii = new Cartesian3(radius, radius, radius);\n  var ellipsoidOptions = {\n    radii: radii,\n    stackPartitions: options.stackPartitions,\n    slicePartitions: options.slicePartitions,\n    subdivisions: options.subdivisions\n  };\n  this._ellipsoidGeometry = new EllipsoidOutlineGeometry(ellipsoidOptions);\n  this._workerName = \"createSphereOutlineGeometry\";\n}\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\n\n\nSphereOutlineGeometry.packedLength = EllipsoidOutlineGeometry.packedLength;\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {SphereOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\n\nSphereOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value); //>>includeEnd('debug');\n\n  return EllipsoidOutlineGeometry.pack(value._ellipsoidGeometry, array, startingIndex);\n};\n\nvar scratchEllipsoidGeometry = new EllipsoidOutlineGeometry();\nvar scratchOptions = {\n  radius: undefined,\n  radii: new Cartesian3(),\n  stackPartitions: undefined,\n  slicePartitions: undefined,\n  subdivisions: undefined\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {SphereOutlineGeometry} [result] The object into which to store the result.\n * @returns {SphereOutlineGeometry} The modified result parameter or a new SphereOutlineGeometry instance if one was not provided.\n */\n\nSphereOutlineGeometry.unpack = function (array, startingIndex, result) {\n  var ellipsoidGeometry = EllipsoidOutlineGeometry.unpack(array, startingIndex, scratchEllipsoidGeometry);\n  scratchOptions.stackPartitions = ellipsoidGeometry._stackPartitions;\n  scratchOptions.slicePartitions = ellipsoidGeometry._slicePartitions;\n  scratchOptions.subdivisions = ellipsoidGeometry._subdivisions;\n\n  if (!defined(result)) {\n    scratchOptions.radius = ellipsoidGeometry._radii.x;\n    return new SphereOutlineGeometry(scratchOptions);\n  }\n\n  Cartesian3.clone(ellipsoidGeometry._radii, scratchOptions.radii);\n  result._ellipsoidGeometry = new EllipsoidOutlineGeometry(scratchOptions);\n  return result;\n};\n/**\n * Computes the geometric representation of an outline of a sphere, including its vertices, indices, and a bounding sphere.\n *\n * @param {SphereOutlineGeometry} sphereGeometry A description of the sphere outline.\n * @returns {Geometry} The computed vertices and indices.\n */\n\n\nSphereOutlineGeometry.createGeometry = function (sphereGeometry) {\n  return EllipsoidOutlineGeometry.createGeometry(sphereGeometry._ellipsoidGeometry);\n};\n\nexport default SphereOutlineGeometry;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/SphereOutlineGeometry.js"],"names":["Cartesian3","Check","defaultValue","defined","EllipsoidOutlineGeometry","SphereOutlineGeometry","options","radius","radii","ellipsoidOptions","stackPartitions","slicePartitions","subdivisions","_ellipsoidGeometry","_workerName","packedLength","pack","value","array","startingIndex","typeOf","object","scratchEllipsoidGeometry","scratchOptions","undefined","unpack","result","ellipsoidGeometry","_stackPartitions","_slicePartitions","_subdivisions","_radii","x","clone","createGeometry","sphereGeometry"],"mappings":"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","sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport EllipsoidOutlineGeometry from \"./EllipsoidOutlineGeometry.js\";\n\n/**\n * A description of the outline of a sphere.\n *\n * @alias SphereOutlineGeometry\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Number} [options.radius=1.0] The radius of the sphere.\n * @param {Number} [options.stackPartitions=10] The count of stacks for the sphere (1 greater than the number of parallel lines).\n * @param {Number} [options.slicePartitions=8] The count of slices for the sphere (Equal to the number of radial lines).\n * @param {Number} [options.subdivisions=200] The number of points per line, determining the granularity of the curvature .\n *\n * @exception {DeveloperError} options.stackPartitions must be greater than or equal to one.\n * @exception {DeveloperError} options.slicePartitions must be greater than or equal to zero.\n * @exception {DeveloperError} options.subdivisions must be greater than or equal to zero.\n *\n * @example\n * var sphere = new Cesium.SphereOutlineGeometry({\n *   radius : 100.0,\n *   stackPartitions : 6,\n *   slicePartitions: 5\n * });\n * var geometry = Cesium.SphereOutlineGeometry.createGeometry(sphere);\n */\nfunction SphereOutlineGeometry(options) {\n  var radius = defaultValue(options.radius, 1.0);\n  var radii = new Cartesian3(radius, radius, radius);\n  var ellipsoidOptions = {\n    radii: radii,\n    stackPartitions: options.stackPartitions,\n    slicePartitions: options.slicePartitions,\n    subdivisions: options.subdivisions,\n  };\n\n  this._ellipsoidGeometry = new EllipsoidOutlineGeometry(ellipsoidOptions);\n  this._workerName = \"createSphereOutlineGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nSphereOutlineGeometry.packedLength = EllipsoidOutlineGeometry.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {SphereOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nSphereOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  //>>includeEnd('debug');\n\n  return EllipsoidOutlineGeometry.pack(\n    value._ellipsoidGeometry,\n    array,\n    startingIndex\n  );\n};\n\nvar scratchEllipsoidGeometry = new EllipsoidOutlineGeometry();\nvar scratchOptions = {\n  radius: undefined,\n  radii: new Cartesian3(),\n  stackPartitions: undefined,\n  slicePartitions: undefined,\n  subdivisions: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {SphereOutlineGeometry} [result] The object into which to store the result.\n * @returns {SphereOutlineGeometry} The modified result parameter or a new SphereOutlineGeometry instance if one was not provided.\n */\nSphereOutlineGeometry.unpack = function (array, startingIndex, result) {\n  var ellipsoidGeometry = EllipsoidOutlineGeometry.unpack(\n    array,\n    startingIndex,\n    scratchEllipsoidGeometry\n  );\n  scratchOptions.stackPartitions = ellipsoidGeometry._stackPartitions;\n  scratchOptions.slicePartitions = ellipsoidGeometry._slicePartitions;\n  scratchOptions.subdivisions = ellipsoidGeometry._subdivisions;\n\n  if (!defined(result)) {\n    scratchOptions.radius = ellipsoidGeometry._radii.x;\n    return new SphereOutlineGeometry(scratchOptions);\n  }\n\n  Cartesian3.clone(ellipsoidGeometry._radii, scratchOptions.radii);\n  result._ellipsoidGeometry = new EllipsoidOutlineGeometry(scratchOptions);\n  return result;\n};\n\n/**\n * Computes the geometric representation of an outline of a sphere, including its vertices, indices, and a bounding sphere.\n *\n * @param {SphereOutlineGeometry} sphereGeometry A description of the sphere outline.\n * @returns {Geometry} The computed vertices and indices.\n */\nSphereOutlineGeometry.createGeometry = function (sphereGeometry) {\n  return EllipsoidOutlineGeometry.createGeometry(\n    sphereGeometry._ellipsoidGeometry\n  );\n};\nexport default SphereOutlineGeometry;\n"]},"metadata":{},"sourceType":"module"}