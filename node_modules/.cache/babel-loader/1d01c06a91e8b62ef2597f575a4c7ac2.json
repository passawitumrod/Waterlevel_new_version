{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport when from \"../ThirdParty/when.js\";\n/**\n * An {@link ImageryProvider} that draws a box around every rendered tile in the tiling scheme, and draws\n * a label inside it indicating the X, Y, Level coordinates of the tile.  This is mostly useful for\n * debugging terrain and imagery rendering problems.\n *\n * @alias TileCoordinatesImageryProvider\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {TilingScheme} [options.tilingScheme=new GeographicTilingScheme()] The tiling scheme for which to draw tiles.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n *                    this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *                    parameter is specified, the WGS84 ellipsoid is used.\n * @param {Color} [options.color=Color.YELLOW] The color to draw the tile box and label.\n * @param {Number} [options.tileWidth=256] The width of the tile for level-of-detail selection purposes.\n * @param {Number} [options.tileHeight=256] The height of the tile for level-of-detail selection purposes.\n */\n\nfunction TileCoordinatesImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._tilingScheme = defined(options.tilingScheme) ? options.tilingScheme : new GeographicTilingScheme({\n    ellipsoid: options.ellipsoid\n  });\n  this._color = defaultValue(options.color, Color.YELLOW);\n  this._errorEvent = new Event();\n  this._tileWidth = defaultValue(options.tileWidth, 256);\n  this._tileHeight = defaultValue(options.tileHeight, 256);\n  this._readyPromise = when.resolve(true);\n}\n\nObject.defineProperties(TileCoordinatesImageryProvider.prototype, {\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return undefined;\n    }\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    }\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    }\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return undefined;\n    }\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return undefined;\n    }\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    }\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._tilingScheme.rectangle;\n    }\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return undefined;\n    }\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return true;\n    }\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    }\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link TileCoordinatesImageryProvider#ready} returns true.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return undefined;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  Setting this property to false reduces memory usage\n   * and texture upload time.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return true;\n    }\n  }\n});\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\n\nTileCoordinatesImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return undefined;\n};\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<Image|Canvas>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n */\n\n\nTileCoordinatesImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  var canvas = document.createElement(\"canvas\");\n  canvas.width = 256;\n  canvas.height = 256;\n  var context = canvas.getContext(\"2d\");\n\n  var cssColor = this._color.toCssColorString();\n\n  context.strokeStyle = cssColor;\n  context.lineWidth = 2;\n  context.strokeRect(1, 1, 255, 255);\n  context.font = \"bold 25px Arial\";\n  context.textAlign = \"center\";\n  context.fillStyle = cssColor;\n  context.fillText(\"L: \" + level, 124, 86);\n  context.fillText(\"X: \" + x, 124, 136);\n  context.fillText(\"Y: \" + y, 124, 186);\n  return canvas;\n};\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n */\n\n\nTileCoordinatesImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  return undefined;\n};\n\nexport default TileCoordinatesImageryProvider;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/TileCoordinatesImageryProvider.js"],"names":["Color","defaultValue","defined","Event","GeographicTilingScheme","when","TileCoordinatesImageryProvider","options","EMPTY_OBJECT","_tilingScheme","tilingScheme","ellipsoid","_color","color","YELLOW","_errorEvent","_tileWidth","tileWidth","_tileHeight","tileHeight","_readyPromise","resolve","Object","defineProperties","prototype","proxy","get","undefined","maximumLevel","minimumLevel","rectangle","tileDiscardPolicy","errorEvent","ready","readyPromise","credit","hasAlphaChannel","getTileCredits","x","y","level","requestImage","request","canvas","document","createElement","width","height","context","getContext","cssColor","toCssColorString","strokeStyle","lineWidth","strokeRect","font","textAlign","fillStyle","fillText","pickFeatures","longitude","latitude"],"mappings":"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","sourcesContent":["import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport when from \"../ThirdParty/when.js\";\n\n/**\n * An {@link ImageryProvider} that draws a box around every rendered tile in the tiling scheme, and draws\n * a label inside it indicating the X, Y, Level coordinates of the tile.  This is mostly useful for\n * debugging terrain and imagery rendering problems.\n *\n * @alias TileCoordinatesImageryProvider\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {TilingScheme} [options.tilingScheme=new GeographicTilingScheme()] The tiling scheme for which to draw tiles.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n *                    this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *                    parameter is specified, the WGS84 ellipsoid is used.\n * @param {Color} [options.color=Color.YELLOW] The color to draw the tile box and label.\n * @param {Number} [options.tileWidth=256] The width of the tile for level-of-detail selection purposes.\n * @param {Number} [options.tileHeight=256] The height of the tile for level-of-detail selection purposes.\n */\nfunction TileCoordinatesImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._tilingScheme = defined(options.tilingScheme)\n    ? options.tilingScheme\n    : new GeographicTilingScheme({ ellipsoid: options.ellipsoid });\n  this._color = defaultValue(options.color, Color.YELLOW);\n  this._errorEvent = new Event();\n  this._tileWidth = defaultValue(options.tileWidth, 256);\n  this._tileHeight = defaultValue(options.tileHeight, 256);\n  this._readyPromise = when.resolve(true);\n}\n\nObject.defineProperties(TileCoordinatesImageryProvider.prototype, {\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._tilingScheme.rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return true;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link TileCoordinatesImageryProvider#ready} returns true.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  Setting this property to false reduces memory usage\n   * and texture upload time.\n   * @memberof TileCoordinatesImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return true;\n    },\n  },\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\nTileCoordinatesImageryProvider.prototype.getTileCredits = function (\n  x,\n  y,\n  level\n) {\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<Image|Canvas>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n */\nTileCoordinatesImageryProvider.prototype.requestImage = function (\n  x,\n  y,\n  level,\n  request\n) {\n  var canvas = document.createElement(\"canvas\");\n  canvas.width = 256;\n  canvas.height = 256;\n  var context = canvas.getContext(\"2d\");\n\n  var cssColor = this._color.toCssColorString();\n\n  context.strokeStyle = cssColor;\n  context.lineWidth = 2;\n  context.strokeRect(1, 1, 255, 255);\n\n  context.font = \"bold 25px Arial\";\n  context.textAlign = \"center\";\n  context.fillStyle = cssColor;\n  context.fillText(\"L: \" + level, 124, 86);\n  context.fillText(\"X: \" + x, 124, 136);\n  context.fillText(\"Y: \" + y, 124, 186);\n\n  return canvas;\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n */\nTileCoordinatesImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude\n) {\n  return undefined;\n};\nexport default TileCoordinatesImageryProvider;\n"]},"metadata":{},"sourceType":"module"}