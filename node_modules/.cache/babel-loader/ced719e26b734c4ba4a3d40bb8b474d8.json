{"ast":null,"code":"import defaultValue from \"./defaultValue.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\nfunction returnTrue() {\n  return true;\n}\n/**\n * Destroys an object.  Each of the object's functions, including functions in its prototype,\n * is replaced with a function that throws a {@link DeveloperError}, except for the object's\n * <code>isDestroyed</code> function, which is set to a function that returns <code>true</code>.\n * The object's properties are removed with <code>delete</code>.\n * <br /><br />\n * This function is used by objects that hold native resources, e.g., WebGL resources, which\n * need to be explicitly released.  Client code calls an object's <code>destroy</code> function,\n * which then releases the native resource and calls <code>destroyObject</code> to put itself\n * in a destroyed state.\n *\n * @exports destroyObject\n *\n * @param {Object} object The object to destroy.\n * @param {String} [message] The message to include in the exception that is thrown if\n *                           a destroyed object's function is called.\n *\n *\n * @example\n * // How a texture would destroy itself.\n * this.destroy = function () {\n *     _gl.deleteTexture(_texture);\n *     return Cesium.destroyObject(this);\n * };\n *\n * @see DeveloperError\n */\n\n\nfunction destroyObject(object, message) {\n  message = defaultValue(message, \"This object was destroyed, i.e., destroy() was called.\");\n\n  function throwOnDestroyed() {\n    //>>includeStart('debug', pragmas.debug);\n    throw new DeveloperError(message); //>>includeEnd('debug');\n  }\n\n  for (var key in object) {\n    if (typeof object[key] === \"function\") {\n      object[key] = throwOnDestroyed;\n    }\n  }\n\n  object.isDestroyed = returnTrue;\n  return undefined;\n}\n\nexport default destroyObject;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/destroyObject.js"],"names":["defaultValue","DeveloperError","returnTrue","destroyObject","object","message","throwOnDestroyed","key","isDestroyed","undefined"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,mBAAzB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;;AAEA,SAASC,UAAT,GAAsB;AACpB,SAAO,IAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,OAA/B,EAAwC;AACtCA,EAAAA,OAAO,GAAGL,YAAY,CACpBK,OADoB,EAEpB,wDAFoB,CAAtB;;AAKA,WAASC,gBAAT,GAA4B;AAC1B;AACA,UAAM,IAAIL,cAAJ,CAAmBI,OAAnB,CAAN,CAF0B,CAG1B;AACD;;AAED,OAAK,IAAIE,GAAT,IAAgBH,MAAhB,EAAwB;AACtB,QAAI,OAAOA,MAAM,CAACG,GAAD,CAAb,KAAuB,UAA3B,EAAuC;AACrCH,MAAAA,MAAM,CAACG,GAAD,CAAN,GAAcD,gBAAd;AACD;AACF;;AAEDF,EAAAA,MAAM,CAACI,WAAP,GAAqBN,UAArB;AAEA,SAAOO,SAAP;AACD;;AACD,eAAeN,aAAf","sourcesContent":["import defaultValue from \"./defaultValue.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\nfunction returnTrue() {\n  return true;\n}\n\n/**\n * Destroys an object.  Each of the object's functions, including functions in its prototype,\n * is replaced with a function that throws a {@link DeveloperError}, except for the object's\n * <code>isDestroyed</code> function, which is set to a function that returns <code>true</code>.\n * The object's properties are removed with <code>delete</code>.\n * <br /><br />\n * This function is used by objects that hold native resources, e.g., WebGL resources, which\n * need to be explicitly released.  Client code calls an object's <code>destroy</code> function,\n * which then releases the native resource and calls <code>destroyObject</code> to put itself\n * in a destroyed state.\n *\n * @exports destroyObject\n *\n * @param {Object} object The object to destroy.\n * @param {String} [message] The message to include in the exception that is thrown if\n *                           a destroyed object's function is called.\n *\n *\n * @example\n * // How a texture would destroy itself.\n * this.destroy = function () {\n *     _gl.deleteTexture(_texture);\n *     return Cesium.destroyObject(this);\n * };\n *\n * @see DeveloperError\n */\nfunction destroyObject(object, message) {\n  message = defaultValue(\n    message,\n    \"This object was destroyed, i.e., destroy() was called.\"\n  );\n\n  function throwOnDestroyed() {\n    //>>includeStart('debug', pragmas.debug);\n    throw new DeveloperError(message);\n    //>>includeEnd('debug');\n  }\n\n  for (var key in object) {\n    if (typeof object[key] === \"function\") {\n      object[key] = throwOnDestroyed;\n    }\n  }\n\n  object.isDestroyed = returnTrue;\n\n  return undefined;\n}\nexport default destroyObject;\n"]},"metadata":{},"sourceType":"module"}