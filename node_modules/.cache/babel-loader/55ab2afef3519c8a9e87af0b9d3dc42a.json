{"ast":null,"code":"import defined from \"./defined.js\";\n/**\n * Constructs an exception object that is thrown due to a developer error, e.g., invalid argument,\n * argument out of range, etc.  This exception should only be thrown during development;\n * it usually indicates a bug in the calling code.  This exception should never be\n * caught; instead the calling code should strive not to generate it.\n * <br /><br />\n * On the other hand, a {@link RuntimeError} indicates an exception that may\n * be thrown at runtime, e.g., out of memory, that the calling code should be prepared\n * to catch.\n *\n * @alias DeveloperError\n * @constructor\n * @extends Error\n *\n * @param {String} [message] The error message for this exception.\n *\n * @see RuntimeError\n */\n\nfunction DeveloperError(message) {\n  /**\n   * 'DeveloperError' indicating that this exception was thrown due to a developer error.\n   * @type {String}\n   * @readonly\n   */\n  this.name = \"DeveloperError\";\n  /**\n   * The explanation for why this exception was thrown.\n   * @type {String}\n   * @readonly\n   */\n\n  this.message = message; //Browsers such as IE don't have a stack property until you actually throw the error.\n\n  var stack;\n\n  try {\n    throw new Error();\n  } catch (e) {\n    stack = e.stack;\n  }\n  /**\n   * The stack trace of this exception, if available.\n   * @type {String}\n   * @readonly\n   */\n\n\n  this.stack = stack;\n}\n\nif (defined(Object.create)) {\n  DeveloperError.prototype = Object.create(Error.prototype);\n  DeveloperError.prototype.constructor = DeveloperError;\n}\n\nDeveloperError.prototype.toString = function () {\n  var str = this.name + \": \" + this.message;\n\n  if (defined(this.stack)) {\n    str += \"\\n\" + this.stack.toString();\n  }\n\n  return str;\n};\n/**\n * @private\n */\n\n\nDeveloperError.throwInstantiationError = function () {\n  throw new DeveloperError(\"This function defines an interface and should not be called directly.\");\n};\n\nexport default DeveloperError;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/DeveloperError.js"],"names":["defined","DeveloperError","message","name","stack","Error","e","Object","create","prototype","constructor","toString","str","throwInstantiationError"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,cAApB;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;AAC/B;;;;;AAKA,OAAKC,IAAL,GAAY,gBAAZ;AAEA;;;;;;AAKA,OAAKD,OAAL,GAAeA,OAAf,CAb+B,CAe/B;;AACA,MAAIE,KAAJ;;AACA,MAAI;AACF,UAAM,IAAIC,KAAJ,EAAN;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACVF,IAAAA,KAAK,GAAGE,CAAC,CAACF,KAAV;AACD;AAED;;;;;;;AAKA,OAAKA,KAAL,GAAaA,KAAb;AACD;;AAED,IAAIJ,OAAO,CAACO,MAAM,CAACC,MAAR,CAAX,EAA4B;AAC1BP,EAAAA,cAAc,CAACQ,SAAf,GAA2BF,MAAM,CAACC,MAAP,CAAcH,KAAK,CAACI,SAApB,CAA3B;AACAR,EAAAA,cAAc,CAACQ,SAAf,CAAyBC,WAAzB,GAAuCT,cAAvC;AACD;;AAEDA,cAAc,CAACQ,SAAf,CAAyBE,QAAzB,GAAoC,YAAY;AAC9C,MAAIC,GAAG,GAAG,KAAKT,IAAL,GAAY,IAAZ,GAAmB,KAAKD,OAAlC;;AAEA,MAAIF,OAAO,CAAC,KAAKI,KAAN,CAAX,EAAyB;AACvBQ,IAAAA,GAAG,IAAI,OAAO,KAAKR,KAAL,CAAWO,QAAX,EAAd;AACD;;AAED,SAAOC,GAAP;AACD,CARD;AAUA;;;;;AAGAX,cAAc,CAACY,uBAAf,GAAyC,YAAY;AACnD,QAAM,IAAIZ,cAAJ,CACJ,uEADI,CAAN;AAGD,CAJD;;AAKA,eAAeA,cAAf","sourcesContent":["import defined from \"./defined.js\";\n\n/**\n * Constructs an exception object that is thrown due to a developer error, e.g., invalid argument,\n * argument out of range, etc.  This exception should only be thrown during development;\n * it usually indicates a bug in the calling code.  This exception should never be\n * caught; instead the calling code should strive not to generate it.\n * <br /><br />\n * On the other hand, a {@link RuntimeError} indicates an exception that may\n * be thrown at runtime, e.g., out of memory, that the calling code should be prepared\n * to catch.\n *\n * @alias DeveloperError\n * @constructor\n * @extends Error\n *\n * @param {String} [message] The error message for this exception.\n *\n * @see RuntimeError\n */\nfunction DeveloperError(message) {\n  /**\n   * 'DeveloperError' indicating that this exception was thrown due to a developer error.\n   * @type {String}\n   * @readonly\n   */\n  this.name = \"DeveloperError\";\n\n  /**\n   * The explanation for why this exception was thrown.\n   * @type {String}\n   * @readonly\n   */\n  this.message = message;\n\n  //Browsers such as IE don't have a stack property until you actually throw the error.\n  var stack;\n  try {\n    throw new Error();\n  } catch (e) {\n    stack = e.stack;\n  }\n\n  /**\n   * The stack trace of this exception, if available.\n   * @type {String}\n   * @readonly\n   */\n  this.stack = stack;\n}\n\nif (defined(Object.create)) {\n  DeveloperError.prototype = Object.create(Error.prototype);\n  DeveloperError.prototype.constructor = DeveloperError;\n}\n\nDeveloperError.prototype.toString = function () {\n  var str = this.name + \": \" + this.message;\n\n  if (defined(this.stack)) {\n    str += \"\\n\" + this.stack.toString();\n  }\n\n  return str;\n};\n\n/**\n * @private\n */\nDeveloperError.throwInstantiationError = function () {\n  throw new DeveloperError(\n    \"This function defines an interface and should not be called directly.\"\n  );\n};\nexport default DeveloperError;\n"]},"metadata":{},"sourceType":"module"}