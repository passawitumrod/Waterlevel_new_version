{"ast":null,"code":"import arraySlice from \"../Core/arraySlice.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport ComponentDatatype from \"../Core/ComponentDatatype.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport FeatureDetection from \"../Core/FeatureDetection.js\";\nimport IndexDatatype from \"../Core/IndexDatatype.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport TaskProcessor from \"../Core/TaskProcessor.js\";\nimport Buffer from \"../Renderer/Buffer.js\";\nimport BufferUsage from \"../Renderer/BufferUsage.js\";\nimport DrawCommand from \"../Renderer/DrawCommand.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderProgram from \"../Renderer/ShaderProgram.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport VertexArray from \"../Renderer/VertexArray.js\";\nimport PolylineCommon from \"../Shaders/PolylineCommon.js\";\nimport Vector3DTilePolylinesVS from \"../Shaders/Vector3DTilePolylinesVS.js\";\nimport when from \"../ThirdParty/when.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport Cesium3DTileFeature from \"./Cesium3DTileFeature.js\";\n/**\n * Creates a batch of polylines that have been subdivided to be draped on terrain.\n *\n * @alias Vector3DTilePolylines\n * @constructor\n *\n * @param {Object} options An object with following properties:\n * @param {Uint16Array} options.positions The positions of the polylines\n * @param {Uint32Array} options.counts The number or positions in the each polyline.\n * @param {Uint16Array} options.widths The width of each polyline.\n * @param {Number} options.minimumHeight The minimum height of the terrain covered by the tile.\n * @param {Number} options.maximumHeight The maximum height of the terrain covered by the tile.\n * @param {Rectangle} options.rectangle The rectangle containing the tile.\n * @param {Cartesian3} [options.center=Cartesian3.ZERO] The RTC center.\n * @param {Cesium3DTileBatchTable} options.batchTable The batch table for the tile containing the batched polylines.\n * @param {Uint16Array} options.batchIds The batch ids for each polyline.\n * @param {BoundingSphere} options.boundingVolume The bounding volume for the entire batch of polylines.\n *\n * @private\n */\n\nfunction Vector3DTilePolylines(options) {\n  // these arrays are all released after the first update.\n  this._positions = options.positions;\n  this._widths = options.widths;\n  this._counts = options.counts;\n  this._batchIds = options.batchIds;\n  this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n  this._minimumHeight = options.minimumHeight;\n  this._maximumHeight = options.maximumHeight;\n  this._center = options.center;\n  this._rectangle = options.rectangle;\n  this._boundingVolume = options.boundingVolume;\n  this._batchTable = options.batchTable;\n  this._va = undefined;\n  this._sp = undefined;\n  this._rs = undefined;\n  this._uniformMap = undefined;\n  this._command = undefined;\n  this._transferrableBatchIds = undefined;\n  this._packedBuffer = undefined;\n  this._currentPositions = undefined;\n  this._previousPositions = undefined;\n  this._nextPositions = undefined;\n  this._expandAndWidth = undefined;\n  this._vertexBatchIds = undefined;\n  this._indices = undefined;\n  this._constantColor = Color.clone(Color.WHITE);\n  this._highlightColor = this._constantColor;\n  this._trianglesLength = 0;\n  this._geometryByteLength = 0;\n  this._ready = false;\n  this._readyPromise = when.defer();\n  this._verticesPromise = undefined;\n}\n\nObject.defineProperties(Vector3DTilePolylines.prototype, {\n  /**\n   * Gets the number of triangles.\n   *\n   * @memberof Vector3DTilePolylines.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  trianglesLength: {\n    get: function () {\n      return this._trianglesLength;\n    }\n  },\n\n  /**\n   * Gets the geometry memory in bytes.\n   *\n   * @memberof Vector3DTilePolylines.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  geometryByteLength: {\n    get: function () {\n      return this._geometryByteLength;\n    }\n  },\n\n  /**\n   * Gets a promise that resolves when the primitive is ready to render.\n   * @memberof Vector3DTilePolylines.prototype\n   * @type {Promise}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    }\n  }\n});\n\nfunction packBuffer(polylines) {\n  var rectangle = polylines._rectangle;\n  var minimumHeight = polylines._minimumHeight;\n  var maximumHeight = polylines._maximumHeight;\n  var ellipsoid = polylines._ellipsoid;\n  var center = polylines._center;\n  var packedLength = 2 + Rectangle.packedLength + Ellipsoid.packedLength + Cartesian3.packedLength;\n  var packedBuffer = new Float64Array(packedLength);\n  var offset = 0;\n  packedBuffer[offset++] = minimumHeight;\n  packedBuffer[offset++] = maximumHeight;\n  Rectangle.pack(rectangle, packedBuffer, offset);\n  offset += Rectangle.packedLength;\n  Ellipsoid.pack(ellipsoid, packedBuffer, offset);\n  offset += Ellipsoid.packedLength;\n  Cartesian3.pack(center, packedBuffer, offset);\n  return packedBuffer;\n}\n\nvar createVerticesTaskProcessor = new TaskProcessor(\"createVectorTilePolylines\");\nvar attributeLocations = {\n  previousPosition: 0,\n  currentPosition: 1,\n  nextPosition: 2,\n  expandAndWidth: 3,\n  a_batchId: 4\n};\n\nfunction createVertexArray(polylines, context) {\n  if (defined(polylines._va)) {\n    return;\n  }\n\n  if (!defined(polylines._verticesPromise)) {\n    var positions = polylines._positions;\n    var widths = polylines._widths;\n    var counts = polylines._counts;\n    var batchIds = polylines._transferrableBatchIds;\n    var packedBuffer = polylines._packedBuffer;\n\n    if (!defined(packedBuffer)) {\n      // Copy because they may be the views on the same buffer.\n      positions = polylines._positions = arraySlice(positions);\n      widths = polylines._widths = arraySlice(widths);\n      counts = polylines._counts = arraySlice(counts);\n      batchIds = polylines._transferrableBatchIds = arraySlice(polylines._batchIds);\n      packedBuffer = polylines._packedBuffer = packBuffer(polylines);\n    }\n\n    var transferrableObjects = [positions.buffer, widths.buffer, counts.buffer, batchIds.buffer, packedBuffer.buffer];\n    var parameters = {\n      positions: positions.buffer,\n      widths: widths.buffer,\n      counts: counts.buffer,\n      batchIds: batchIds.buffer,\n      packedBuffer: packedBuffer.buffer\n    };\n    var verticesPromise = polylines._verticesPromise = createVerticesTaskProcessor.scheduleTask(parameters, transferrableObjects);\n\n    if (!defined(verticesPromise)) {\n      // Postponed\n      return;\n    }\n\n    when(verticesPromise, function (result) {\n      polylines._currentPositions = new Float32Array(result.currentPositions);\n      polylines._previousPositions = new Float32Array(result.previousPositions);\n      polylines._nextPositions = new Float32Array(result.nextPositions);\n      polylines._expandAndWidth = new Float32Array(result.expandAndWidth);\n      polylines._vertexBatchIds = new Uint16Array(result.batchIds);\n      var indexDatatype = result.indexDatatype;\n      polylines._indices = indexDatatype === IndexDatatype.UNSIGNED_SHORT ? new Uint16Array(result.indices) : new Uint32Array(result.indices);\n      polylines._ready = true;\n    });\n  }\n\n  if (polylines._ready && !defined(polylines._va)) {\n    var curPositions = polylines._currentPositions;\n    var prevPositions = polylines._previousPositions;\n    var nextPositions = polylines._nextPositions;\n    var expandAndWidth = polylines._expandAndWidth;\n    var vertexBatchIds = polylines._vertexBatchIds;\n    var indices = polylines._indices;\n    var byteLength = prevPositions.byteLength + curPositions.byteLength + nextPositions.byteLength;\n    byteLength += expandAndWidth.byteLength + vertexBatchIds.byteLength + indices.byteLength;\n    polylines._trianglesLength = indices.length / 3;\n    polylines._geometryByteLength = byteLength;\n    var prevPositionBuffer = Buffer.createVertexBuffer({\n      context: context,\n      typedArray: prevPositions,\n      usage: BufferUsage.STATIC_DRAW\n    });\n    var curPositionBuffer = Buffer.createVertexBuffer({\n      context: context,\n      typedArray: curPositions,\n      usage: BufferUsage.STATIC_DRAW\n    });\n    var nextPositionBuffer = Buffer.createVertexBuffer({\n      context: context,\n      typedArray: nextPositions,\n      usage: BufferUsage.STATIC_DRAW\n    });\n    var expandAndWidthBuffer = Buffer.createVertexBuffer({\n      context: context,\n      typedArray: expandAndWidth,\n      usage: BufferUsage.STATIC_DRAW\n    });\n    var idBuffer = Buffer.createVertexBuffer({\n      context: context,\n      typedArray: vertexBatchIds,\n      usage: BufferUsage.STATIC_DRAW\n    });\n    var indexBuffer = Buffer.createIndexBuffer({\n      context: context,\n      typedArray: indices,\n      usage: BufferUsage.STATIC_DRAW,\n      indexDatatype: indices.BYTES_PER_ELEMENT === 2 ? IndexDatatype.UNSIGNED_SHORT : IndexDatatype.UNSIGNED_INT\n    });\n    var vertexAttributes = [{\n      index: attributeLocations.previousPosition,\n      vertexBuffer: prevPositionBuffer,\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3\n    }, {\n      index: attributeLocations.currentPosition,\n      vertexBuffer: curPositionBuffer,\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3\n    }, {\n      index: attributeLocations.nextPosition,\n      vertexBuffer: nextPositionBuffer,\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3\n    }, {\n      index: attributeLocations.expandAndWidth,\n      vertexBuffer: expandAndWidthBuffer,\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2\n    }, {\n      index: attributeLocations.a_batchId,\n      vertexBuffer: idBuffer,\n      componentDatatype: ComponentDatatype.UNSIGNED_SHORT,\n      componentsPerAttribute: 1\n    }];\n    polylines._va = new VertexArray({\n      context: context,\n      attributes: vertexAttributes,\n      indexBuffer: indexBuffer\n    });\n    polylines._positions = undefined;\n    polylines._widths = undefined;\n    polylines._counts = undefined;\n    polylines._ellipsoid = undefined;\n    polylines._minimumHeight = undefined;\n    polylines._maximumHeight = undefined;\n    polylines._rectangle = undefined;\n    polylines._transferrableBatchIds = undefined;\n    polylines._packedBuffer = undefined;\n    polylines._currentPositions = undefined;\n    polylines._previousPositions = undefined;\n    polylines._nextPositions = undefined;\n    polylines._expandAndWidth = undefined;\n    polylines._vertexBatchIds = undefined;\n    polylines._indices = undefined;\n\n    polylines._readyPromise.resolve();\n  }\n}\n\nvar modifiedModelViewScratch = new Matrix4();\nvar rtcScratch = new Cartesian3();\n\nfunction createUniformMap(primitive, context) {\n  if (defined(primitive._uniformMap)) {\n    return;\n  }\n\n  primitive._uniformMap = {\n    u_modifiedModelView: function () {\n      var viewMatrix = context.uniformState.view;\n      Matrix4.clone(viewMatrix, modifiedModelViewScratch);\n      Matrix4.multiplyByPoint(modifiedModelViewScratch, primitive._center, rtcScratch);\n      Matrix4.setTranslation(modifiedModelViewScratch, rtcScratch, modifiedModelViewScratch);\n      return modifiedModelViewScratch;\n    },\n    u_highlightColor: function () {\n      return primitive._highlightColor;\n    }\n  };\n}\n\nfunction createRenderStates(primitive) {\n  if (defined(primitive._rs)) {\n    return;\n  }\n\n  var polygonOffset = {\n    enabled: true,\n    factor: -5.0,\n    units: -5.0\n  };\n  primitive._rs = RenderState.fromCache({\n    blending: BlendingState.ALPHA_BLEND,\n    depthMask: false,\n    depthTest: {\n      enabled: true\n    },\n    polygonOffset: polygonOffset\n  });\n}\n\nvar PolylineFS = \"uniform vec4 u_highlightColor; \\n\" + \"void main()\\n\" + \"{\\n\" + \"    gl_FragColor = u_highlightColor;\\n\" + \"}\\n\";\n\nfunction createShaders(primitive, context) {\n  if (defined(primitive._sp)) {\n    return;\n  }\n\n  var batchTable = primitive._batchTable;\n  var vsSource = batchTable.getVertexShaderCallback(false, \"a_batchId\", undefined)(Vector3DTilePolylinesVS);\n  var fsSource = batchTable.getFragmentShaderCallback()(PolylineFS, false, undefined);\n  var vs = new ShaderSource({\n    defines: [\"VECTOR_TILE\", !FeatureDetection.isInternetExplorer() ? \"CLIP_POLYLINE\" : \"\"],\n    sources: [PolylineCommon, vsSource]\n  });\n  var fs = new ShaderSource({\n    defines: [\"VECTOR_TILE\"],\n    sources: [fsSource]\n  });\n  primitive._sp = ShaderProgram.fromCache({\n    context: context,\n    vertexShaderSource: vs,\n    fragmentShaderSource: fs,\n    attributeLocations: attributeLocations\n  });\n}\n\nfunction queueCommands(primitive, frameState) {\n  if (!defined(primitive._command)) {\n    var uniformMap = primitive._batchTable.getUniformMapCallback()(primitive._uniformMap);\n\n    primitive._command = new DrawCommand({\n      owner: primitive,\n      vertexArray: primitive._va,\n      renderState: primitive._rs,\n      shaderProgram: primitive._sp,\n      uniformMap: uniformMap,\n      boundingVolume: primitive._boundingVolume,\n      pass: Pass.TRANSLUCENT,\n      pickId: primitive._batchTable.getPickId()\n    });\n  }\n\n  frameState.commandList.push(primitive._command);\n}\n/**\n * Creates features for each polyline and places it at the batch id index of features.\n *\n * @param {Vector3DTileContent} content The vector tile content.\n * @param {Cesium3DTileFeature[]} features An array of features where the polygon features will be placed.\n */\n\n\nVector3DTilePolylines.prototype.createFeatures = function (content, features) {\n  var batchIds = this._batchIds;\n  var length = batchIds.length;\n\n  for (var i = 0; i < length; ++i) {\n    var batchId = batchIds[i];\n    features[batchId] = new Cesium3DTileFeature(content, batchId);\n  }\n};\n/**\n * Colors the entire tile when enabled is true. The resulting color will be (polyline batch table color * color).\n *\n * @param {Boolean} enabled Whether to enable debug coloring.\n * @param {Color} color The debug color.\n */\n\n\nVector3DTilePolylines.prototype.applyDebugSettings = function (enabled, color) {\n  this._highlightColor = enabled ? color : this._constantColor;\n};\n\nfunction clearStyle(polygons, features) {\n  var batchIds = polygons._batchIds;\n  var length = batchIds.length;\n\n  for (var i = 0; i < length; ++i) {\n    var batchId = batchIds[i];\n    var feature = features[batchId];\n    feature.show = true;\n    feature.color = Color.WHITE;\n  }\n}\n\nvar scratchColor = new Color();\nvar DEFAULT_COLOR_VALUE = Color.WHITE;\nvar DEFAULT_SHOW_VALUE = true;\n/**\n * Apply a style to the content.\n *\n * @param {Cesium3DTileStyle} style The style.\n * @param {Cesium3DTileFeature[]} features The array of features.\n */\n\nVector3DTilePolylines.prototype.applyStyle = function (style, features) {\n  if (!defined(style)) {\n    clearStyle(this, features);\n    return;\n  }\n\n  var batchIds = this._batchIds;\n  var length = batchIds.length;\n\n  for (var i = 0; i < length; ++i) {\n    var batchId = batchIds[i];\n    var feature = features[batchId];\n    feature.color = defined(style.color) ? style.color.evaluateColor(feature, scratchColor) : DEFAULT_COLOR_VALUE;\n    feature.show = defined(style.show) ? style.show.evaluate(feature) : DEFAULT_SHOW_VALUE;\n  }\n};\n/**\n * Updates the batches and queues the commands for rendering.\n *\n * @param {FrameState} frameState The current frame state.\n */\n\n\nVector3DTilePolylines.prototype.update = function (frameState) {\n  var context = frameState.context;\n  createVertexArray(this, context);\n  createUniformMap(this, context);\n  createShaders(this, context);\n  createRenderStates(this);\n\n  if (!this._ready) {\n    return;\n  }\n\n  var passes = frameState.passes;\n\n  if (passes.render || passes.pick) {\n    queueCommands(this, frameState);\n  }\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <p>\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * </p>\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n */\n\n\nVector3DTilePolylines.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <p>\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\n\n\nVector3DTilePolylines.prototype.destroy = function () {\n  this._va = this._va && this._va.destroy();\n  this._sp = this._sp && this._sp.destroy();\n  return destroyObject(this);\n};\n\nexport default Vector3DTilePolylines;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/Vector3DTilePolylines.js"],"names":["arraySlice","Cartesian3","Color","ComponentDatatype","defaultValue","defined","destroyObject","Ellipsoid","FeatureDetection","IndexDatatype","Matrix4","Rectangle","TaskProcessor","Buffer","BufferUsage","DrawCommand","Pass","RenderState","ShaderProgram","ShaderSource","VertexArray","PolylineCommon","Vector3DTilePolylinesVS","when","BlendingState","Cesium3DTileFeature","Vector3DTilePolylines","options","_positions","positions","_widths","widths","_counts","counts","_batchIds","batchIds","_ellipsoid","ellipsoid","WGS84","_minimumHeight","minimumHeight","_maximumHeight","maximumHeight","_center","center","_rectangle","rectangle","_boundingVolume","boundingVolume","_batchTable","batchTable","_va","undefined","_sp","_rs","_uniformMap","_command","_transferrableBatchIds","_packedBuffer","_currentPositions","_previousPositions","_nextPositions","_expandAndWidth","_vertexBatchIds","_indices","_constantColor","clone","WHITE","_highlightColor","_trianglesLength","_geometryByteLength","_ready","_readyPromise","defer","_verticesPromise","Object","defineProperties","prototype","trianglesLength","get","geometryByteLength","readyPromise","promise","packBuffer","polylines","packedLength","packedBuffer","Float64Array","offset","pack","createVerticesTaskProcessor","attributeLocations","previousPosition","currentPosition","nextPosition","expandAndWidth","a_batchId","createVertexArray","context","transferrableObjects","buffer","parameters","verticesPromise","scheduleTask","result","Float32Array","currentPositions","previousPositions","nextPositions","Uint16Array","indexDatatype","UNSIGNED_SHORT","indices","Uint32Array","curPositions","prevPositions","vertexBatchIds","byteLength","length","prevPositionBuffer","createVertexBuffer","typedArray","usage","STATIC_DRAW","curPositionBuffer","nextPositionBuffer","expandAndWidthBuffer","idBuffer","indexBuffer","createIndexBuffer","BYTES_PER_ELEMENT","UNSIGNED_INT","vertexAttributes","index","vertexBuffer","componentDatatype","FLOAT","componentsPerAttribute","attributes","resolve","modifiedModelViewScratch","rtcScratch","createUniformMap","primitive","u_modifiedModelView","viewMatrix","uniformState","view","multiplyByPoint","setTranslation","u_highlightColor","createRenderStates","polygonOffset","enabled","factor","units","fromCache","blending","ALPHA_BLEND","depthMask","depthTest","PolylineFS","createShaders","vsSource","getVertexShaderCallback","fsSource","getFragmentShaderCallback","vs","defines","isInternetExplorer","sources","fs","vertexShaderSource","fragmentShaderSource","queueCommands","frameState","uniformMap","getUniformMapCallback","owner","vertexArray","renderState","shaderProgram","pass","TRANSLUCENT","pickId","getPickId","commandList","push","createFeatures","content","features","i","batchId","applyDebugSettings","color","clearStyle","polygons","feature","show","scratchColor","DEFAULT_COLOR_VALUE","DEFAULT_SHOW_VALUE","applyStyle","style","evaluateColor","evaluate","update","passes","render","pick","isDestroyed","destroy"],"mappings":"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","sourcesContent":["import arraySlice from \"../Core/arraySlice.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport ComponentDatatype from \"../Core/ComponentDatatype.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport FeatureDetection from \"../Core/FeatureDetection.js\";\nimport IndexDatatype from \"../Core/IndexDatatype.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport TaskProcessor from \"../Core/TaskProcessor.js\";\nimport Buffer from \"../Renderer/Buffer.js\";\nimport BufferUsage from \"../Renderer/BufferUsage.js\";\nimport DrawCommand from \"../Renderer/DrawCommand.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderProgram from \"../Renderer/ShaderProgram.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport VertexArray from \"../Renderer/VertexArray.js\";\nimport PolylineCommon from \"../Shaders/PolylineCommon.js\";\nimport Vector3DTilePolylinesVS from \"../Shaders/Vector3DTilePolylinesVS.js\";\nimport when from \"../ThirdParty/when.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport Cesium3DTileFeature from \"./Cesium3DTileFeature.js\";\n\n/**\n * Creates a batch of polylines that have been subdivided to be draped on terrain.\n *\n * @alias Vector3DTilePolylines\n * @constructor\n *\n * @param {Object} options An object with following properties:\n * @param {Uint16Array} options.positions The positions of the polylines\n * @param {Uint32Array} options.counts The number or positions in the each polyline.\n * @param {Uint16Array} options.widths The width of each polyline.\n * @param {Number} options.minimumHeight The minimum height of the terrain covered by the tile.\n * @param {Number} options.maximumHeight The maximum height of the terrain covered by the tile.\n * @param {Rectangle} options.rectangle The rectangle containing the tile.\n * @param {Cartesian3} [options.center=Cartesian3.ZERO] The RTC center.\n * @param {Cesium3DTileBatchTable} options.batchTable The batch table for the tile containing the batched polylines.\n * @param {Uint16Array} options.batchIds The batch ids for each polyline.\n * @param {BoundingSphere} options.boundingVolume The bounding volume for the entire batch of polylines.\n *\n * @private\n */\nfunction Vector3DTilePolylines(options) {\n  // these arrays are all released after the first update.\n  this._positions = options.positions;\n  this._widths = options.widths;\n  this._counts = options.counts;\n  this._batchIds = options.batchIds;\n\n  this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n  this._minimumHeight = options.minimumHeight;\n  this._maximumHeight = options.maximumHeight;\n  this._center = options.center;\n  this._rectangle = options.rectangle;\n\n  this._boundingVolume = options.boundingVolume;\n  this._batchTable = options.batchTable;\n\n  this._va = undefined;\n  this._sp = undefined;\n  this._rs = undefined;\n  this._uniformMap = undefined;\n  this._command = undefined;\n\n  this._transferrableBatchIds = undefined;\n  this._packedBuffer = undefined;\n\n  this._currentPositions = undefined;\n  this._previousPositions = undefined;\n  this._nextPositions = undefined;\n  this._expandAndWidth = undefined;\n  this._vertexBatchIds = undefined;\n  this._indices = undefined;\n\n  this._constantColor = Color.clone(Color.WHITE);\n  this._highlightColor = this._constantColor;\n\n  this._trianglesLength = 0;\n  this._geometryByteLength = 0;\n\n  this._ready = false;\n  this._readyPromise = when.defer();\n\n  this._verticesPromise = undefined;\n}\n\nObject.defineProperties(Vector3DTilePolylines.prototype, {\n  /**\n   * Gets the number of triangles.\n   *\n   * @memberof Vector3DTilePolylines.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  trianglesLength: {\n    get: function () {\n      return this._trianglesLength;\n    },\n  },\n\n  /**\n   * Gets the geometry memory in bytes.\n   *\n   * @memberof Vector3DTilePolylines.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  geometryByteLength: {\n    get: function () {\n      return this._geometryByteLength;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves when the primitive is ready to render.\n   * @memberof Vector3DTilePolylines.prototype\n   * @type {Promise}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    },\n  },\n});\n\nfunction packBuffer(polylines) {\n  var rectangle = polylines._rectangle;\n  var minimumHeight = polylines._minimumHeight;\n  var maximumHeight = polylines._maximumHeight;\n  var ellipsoid = polylines._ellipsoid;\n  var center = polylines._center;\n\n  var packedLength =\n    2 +\n    Rectangle.packedLength +\n    Ellipsoid.packedLength +\n    Cartesian3.packedLength;\n  var packedBuffer = new Float64Array(packedLength);\n\n  var offset = 0;\n  packedBuffer[offset++] = minimumHeight;\n  packedBuffer[offset++] = maximumHeight;\n\n  Rectangle.pack(rectangle, packedBuffer, offset);\n  offset += Rectangle.packedLength;\n\n  Ellipsoid.pack(ellipsoid, packedBuffer, offset);\n  offset += Ellipsoid.packedLength;\n\n  Cartesian3.pack(center, packedBuffer, offset);\n\n  return packedBuffer;\n}\n\nvar createVerticesTaskProcessor = new TaskProcessor(\n  \"createVectorTilePolylines\"\n);\nvar attributeLocations = {\n  previousPosition: 0,\n  currentPosition: 1,\n  nextPosition: 2,\n  expandAndWidth: 3,\n  a_batchId: 4,\n};\n\nfunction createVertexArray(polylines, context) {\n  if (defined(polylines._va)) {\n    return;\n  }\n\n  if (!defined(polylines._verticesPromise)) {\n    var positions = polylines._positions;\n    var widths = polylines._widths;\n    var counts = polylines._counts;\n    var batchIds = polylines._transferrableBatchIds;\n\n    var packedBuffer = polylines._packedBuffer;\n\n    if (!defined(packedBuffer)) {\n      // Copy because they may be the views on the same buffer.\n      positions = polylines._positions = arraySlice(positions);\n      widths = polylines._widths = arraySlice(widths);\n      counts = polylines._counts = arraySlice(counts);\n\n      batchIds = polylines._transferrableBatchIds = arraySlice(\n        polylines._batchIds\n      );\n\n      packedBuffer = polylines._packedBuffer = packBuffer(polylines);\n    }\n\n    var transferrableObjects = [\n      positions.buffer,\n      widths.buffer,\n      counts.buffer,\n      batchIds.buffer,\n      packedBuffer.buffer,\n    ];\n    var parameters = {\n      positions: positions.buffer,\n      widths: widths.buffer,\n      counts: counts.buffer,\n      batchIds: batchIds.buffer,\n      packedBuffer: packedBuffer.buffer,\n    };\n\n    var verticesPromise = (polylines._verticesPromise = createVerticesTaskProcessor.scheduleTask(\n      parameters,\n      transferrableObjects\n    ));\n    if (!defined(verticesPromise)) {\n      // Postponed\n      return;\n    }\n\n    when(verticesPromise, function (result) {\n      polylines._currentPositions = new Float32Array(result.currentPositions);\n      polylines._previousPositions = new Float32Array(result.previousPositions);\n      polylines._nextPositions = new Float32Array(result.nextPositions);\n      polylines._expandAndWidth = new Float32Array(result.expandAndWidth);\n      polylines._vertexBatchIds = new Uint16Array(result.batchIds);\n\n      var indexDatatype = result.indexDatatype;\n      polylines._indices =\n        indexDatatype === IndexDatatype.UNSIGNED_SHORT\n          ? new Uint16Array(result.indices)\n          : new Uint32Array(result.indices);\n\n      polylines._ready = true;\n    });\n  }\n\n  if (polylines._ready && !defined(polylines._va)) {\n    var curPositions = polylines._currentPositions;\n    var prevPositions = polylines._previousPositions;\n    var nextPositions = polylines._nextPositions;\n    var expandAndWidth = polylines._expandAndWidth;\n    var vertexBatchIds = polylines._vertexBatchIds;\n    var indices = polylines._indices;\n\n    var byteLength =\n      prevPositions.byteLength +\n      curPositions.byteLength +\n      nextPositions.byteLength;\n    byteLength +=\n      expandAndWidth.byteLength +\n      vertexBatchIds.byteLength +\n      indices.byteLength;\n    polylines._trianglesLength = indices.length / 3;\n    polylines._geometryByteLength = byteLength;\n\n    var prevPositionBuffer = Buffer.createVertexBuffer({\n      context: context,\n      typedArray: prevPositions,\n      usage: BufferUsage.STATIC_DRAW,\n    });\n    var curPositionBuffer = Buffer.createVertexBuffer({\n      context: context,\n      typedArray: curPositions,\n      usage: BufferUsage.STATIC_DRAW,\n    });\n    var nextPositionBuffer = Buffer.createVertexBuffer({\n      context: context,\n      typedArray: nextPositions,\n      usage: BufferUsage.STATIC_DRAW,\n    });\n    var expandAndWidthBuffer = Buffer.createVertexBuffer({\n      context: context,\n      typedArray: expandAndWidth,\n      usage: BufferUsage.STATIC_DRAW,\n    });\n    var idBuffer = Buffer.createVertexBuffer({\n      context: context,\n      typedArray: vertexBatchIds,\n      usage: BufferUsage.STATIC_DRAW,\n    });\n\n    var indexBuffer = Buffer.createIndexBuffer({\n      context: context,\n      typedArray: indices,\n      usage: BufferUsage.STATIC_DRAW,\n      indexDatatype:\n        indices.BYTES_PER_ELEMENT === 2\n          ? IndexDatatype.UNSIGNED_SHORT\n          : IndexDatatype.UNSIGNED_INT,\n    });\n\n    var vertexAttributes = [\n      {\n        index: attributeLocations.previousPosition,\n        vertexBuffer: prevPositionBuffer,\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n      },\n      {\n        index: attributeLocations.currentPosition,\n        vertexBuffer: curPositionBuffer,\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n      },\n      {\n        index: attributeLocations.nextPosition,\n        vertexBuffer: nextPositionBuffer,\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n      },\n      {\n        index: attributeLocations.expandAndWidth,\n        vertexBuffer: expandAndWidthBuffer,\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 2,\n      },\n      {\n        index: attributeLocations.a_batchId,\n        vertexBuffer: idBuffer,\n        componentDatatype: ComponentDatatype.UNSIGNED_SHORT,\n        componentsPerAttribute: 1,\n      },\n    ];\n\n    polylines._va = new VertexArray({\n      context: context,\n      attributes: vertexAttributes,\n      indexBuffer: indexBuffer,\n    });\n\n    polylines._positions = undefined;\n    polylines._widths = undefined;\n    polylines._counts = undefined;\n\n    polylines._ellipsoid = undefined;\n    polylines._minimumHeight = undefined;\n    polylines._maximumHeight = undefined;\n    polylines._rectangle = undefined;\n\n    polylines._transferrableBatchIds = undefined;\n    polylines._packedBuffer = undefined;\n\n    polylines._currentPositions = undefined;\n    polylines._previousPositions = undefined;\n    polylines._nextPositions = undefined;\n    polylines._expandAndWidth = undefined;\n    polylines._vertexBatchIds = undefined;\n    polylines._indices = undefined;\n\n    polylines._readyPromise.resolve();\n  }\n}\n\nvar modifiedModelViewScratch = new Matrix4();\nvar rtcScratch = new Cartesian3();\n\nfunction createUniformMap(primitive, context) {\n  if (defined(primitive._uniformMap)) {\n    return;\n  }\n\n  primitive._uniformMap = {\n    u_modifiedModelView: function () {\n      var viewMatrix = context.uniformState.view;\n      Matrix4.clone(viewMatrix, modifiedModelViewScratch);\n      Matrix4.multiplyByPoint(\n        modifiedModelViewScratch,\n        primitive._center,\n        rtcScratch\n      );\n      Matrix4.setTranslation(\n        modifiedModelViewScratch,\n        rtcScratch,\n        modifiedModelViewScratch\n      );\n      return modifiedModelViewScratch;\n    },\n    u_highlightColor: function () {\n      return primitive._highlightColor;\n    },\n  };\n}\n\nfunction createRenderStates(primitive) {\n  if (defined(primitive._rs)) {\n    return;\n  }\n\n  var polygonOffset = {\n    enabled: true,\n    factor: -5.0,\n    units: -5.0,\n  };\n\n  primitive._rs = RenderState.fromCache({\n    blending: BlendingState.ALPHA_BLEND,\n    depthMask: false,\n    depthTest: {\n      enabled: true,\n    },\n    polygonOffset: polygonOffset,\n  });\n}\n\nvar PolylineFS =\n  \"uniform vec4 u_highlightColor; \\n\" +\n  \"void main()\\n\" +\n  \"{\\n\" +\n  \"    gl_FragColor = u_highlightColor;\\n\" +\n  \"}\\n\";\n\nfunction createShaders(primitive, context) {\n  if (defined(primitive._sp)) {\n    return;\n  }\n\n  var batchTable = primitive._batchTable;\n\n  var vsSource = batchTable.getVertexShaderCallback(\n    false,\n    \"a_batchId\",\n    undefined\n  )(Vector3DTilePolylinesVS);\n  var fsSource = batchTable.getFragmentShaderCallback()(\n    PolylineFS,\n    false,\n    undefined\n  );\n\n  var vs = new ShaderSource({\n    defines: [\n      \"VECTOR_TILE\",\n      !FeatureDetection.isInternetExplorer() ? \"CLIP_POLYLINE\" : \"\",\n    ],\n    sources: [PolylineCommon, vsSource],\n  });\n  var fs = new ShaderSource({\n    defines: [\"VECTOR_TILE\"],\n    sources: [fsSource],\n  });\n\n  primitive._sp = ShaderProgram.fromCache({\n    context: context,\n    vertexShaderSource: vs,\n    fragmentShaderSource: fs,\n    attributeLocations: attributeLocations,\n  });\n}\n\nfunction queueCommands(primitive, frameState) {\n  if (!defined(primitive._command)) {\n    var uniformMap = primitive._batchTable.getUniformMapCallback()(\n      primitive._uniformMap\n    );\n    primitive._command = new DrawCommand({\n      owner: primitive,\n      vertexArray: primitive._va,\n      renderState: primitive._rs,\n      shaderProgram: primitive._sp,\n      uniformMap: uniformMap,\n      boundingVolume: primitive._boundingVolume,\n      pass: Pass.TRANSLUCENT,\n      pickId: primitive._batchTable.getPickId(),\n    });\n  }\n\n  frameState.commandList.push(primitive._command);\n}\n\n/**\n * Creates features for each polyline and places it at the batch id index of features.\n *\n * @param {Vector3DTileContent} content The vector tile content.\n * @param {Cesium3DTileFeature[]} features An array of features where the polygon features will be placed.\n */\nVector3DTilePolylines.prototype.createFeatures = function (content, features) {\n  var batchIds = this._batchIds;\n  var length = batchIds.length;\n  for (var i = 0; i < length; ++i) {\n    var batchId = batchIds[i];\n    features[batchId] = new Cesium3DTileFeature(content, batchId);\n  }\n};\n\n/**\n * Colors the entire tile when enabled is true. The resulting color will be (polyline batch table color * color).\n *\n * @param {Boolean} enabled Whether to enable debug coloring.\n * @param {Color} color The debug color.\n */\nVector3DTilePolylines.prototype.applyDebugSettings = function (enabled, color) {\n  this._highlightColor = enabled ? color : this._constantColor;\n};\n\nfunction clearStyle(polygons, features) {\n  var batchIds = polygons._batchIds;\n  var length = batchIds.length;\n  for (var i = 0; i < length; ++i) {\n    var batchId = batchIds[i];\n    var feature = features[batchId];\n\n    feature.show = true;\n    feature.color = Color.WHITE;\n  }\n}\n\nvar scratchColor = new Color();\n\nvar DEFAULT_COLOR_VALUE = Color.WHITE;\nvar DEFAULT_SHOW_VALUE = true;\n\n/**\n * Apply a style to the content.\n *\n * @param {Cesium3DTileStyle} style The style.\n * @param {Cesium3DTileFeature[]} features The array of features.\n */\nVector3DTilePolylines.prototype.applyStyle = function (style, features) {\n  if (!defined(style)) {\n    clearStyle(this, features);\n    return;\n  }\n\n  var batchIds = this._batchIds;\n  var length = batchIds.length;\n  for (var i = 0; i < length; ++i) {\n    var batchId = batchIds[i];\n    var feature = features[batchId];\n\n    feature.color = defined(style.color)\n      ? style.color.evaluateColor(feature, scratchColor)\n      : DEFAULT_COLOR_VALUE;\n    feature.show = defined(style.show)\n      ? style.show.evaluate(feature)\n      : DEFAULT_SHOW_VALUE;\n  }\n};\n\n/**\n * Updates the batches and queues the commands for rendering.\n *\n * @param {FrameState} frameState The current frame state.\n */\nVector3DTilePolylines.prototype.update = function (frameState) {\n  var context = frameState.context;\n\n  createVertexArray(this, context);\n  createUniformMap(this, context);\n  createShaders(this, context);\n  createRenderStates(this);\n\n  if (!this._ready) {\n    return;\n  }\n\n  var passes = frameState.passes;\n  if (passes.render || passes.pick) {\n    queueCommands(this, frameState);\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <p>\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * </p>\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n */\nVector3DTilePolylines.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <p>\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nVector3DTilePolylines.prototype.destroy = function () {\n  this._va = this._va && this._va.destroy();\n  this._sp = this._sp && this._sp.destroy();\n  return destroyObject(this);\n};\nexport default Vector3DTilePolylines;\n"]},"metadata":{},"sourceType":"module"}