{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport TextureMagnificationFilter from \"./TextureMagnificationFilter.js\";\nimport TextureMinificationFilter from \"./TextureMinificationFilter.js\";\nimport TextureWrap from \"./TextureWrap.js\";\n/**\n * @private\n */\n\nfunction Sampler(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var wrapS = defaultValue(options.wrapS, TextureWrap.CLAMP_TO_EDGE);\n  var wrapT = defaultValue(options.wrapT, TextureWrap.CLAMP_TO_EDGE);\n  var minificationFilter = defaultValue(options.minificationFilter, TextureMinificationFilter.LINEAR);\n  var magnificationFilter = defaultValue(options.magnificationFilter, TextureMagnificationFilter.LINEAR);\n  var maximumAnisotropy = defined(options.maximumAnisotropy) ? options.maximumAnisotropy : 1.0; //>>includeStart('debug', pragmas.debug);\n\n  if (!TextureWrap.validate(wrapS)) {\n    throw new DeveloperError(\"Invalid sampler.wrapS.\");\n  }\n\n  if (!TextureWrap.validate(wrapT)) {\n    throw new DeveloperError(\"Invalid sampler.wrapT.\");\n  }\n\n  if (!TextureMinificationFilter.validate(minificationFilter)) {\n    throw new DeveloperError(\"Invalid sampler.minificationFilter.\");\n  }\n\n  if (!TextureMagnificationFilter.validate(magnificationFilter)) {\n    throw new DeveloperError(\"Invalid sampler.magnificationFilter.\");\n  }\n\n  Check.typeOf.number.greaterThanOrEquals(\"maximumAnisotropy\", maximumAnisotropy, 1.0); //>>includeEnd('debug');\n\n  this._wrapS = wrapS;\n  this._wrapT = wrapT;\n  this._minificationFilter = minificationFilter;\n  this._magnificationFilter = magnificationFilter;\n  this._maximumAnisotropy = maximumAnisotropy;\n}\n\nObject.defineProperties(Sampler.prototype, {\n  wrapS: {\n    get: function () {\n      return this._wrapS;\n    }\n  },\n  wrapT: {\n    get: function () {\n      return this._wrapT;\n    }\n  },\n  minificationFilter: {\n    get: function () {\n      return this._minificationFilter;\n    }\n  },\n  magnificationFilter: {\n    get: function () {\n      return this._magnificationFilter;\n    }\n  },\n  maximumAnisotropy: {\n    get: function () {\n      return this._maximumAnisotropy;\n    }\n  }\n});\n\nSampler.equals = function (left, right) {\n  return left === right || defined(left) && defined(right) && left._wrapS === right._wrapS && left._wrapT === right._wrapT && left._minificationFilter === right._minificationFilter && left._magnificationFilter === right._magnificationFilter && left._maximumAnisotropy === right._maximumAnisotropy;\n};\n\nSampler.NEAREST = Object.freeze(new Sampler({\n  wrapS: TextureWrap.CLAMP_TO_EDGE,\n  wrapT: TextureWrap.CLAMP_TO_EDGE,\n  minificationFilter: TextureMinificationFilter.NEAREST,\n  magnificationFilter: TextureMagnificationFilter.NEAREST\n}));\nexport default Sampler;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Renderer/Sampler.js"],"names":["Check","defaultValue","defined","DeveloperError","TextureMagnificationFilter","TextureMinificationFilter","TextureWrap","Sampler","options","EMPTY_OBJECT","wrapS","CLAMP_TO_EDGE","wrapT","minificationFilter","LINEAR","magnificationFilter","maximumAnisotropy","validate","typeOf","number","greaterThanOrEquals","_wrapS","_wrapT","_minificationFilter","_magnificationFilter","_maximumAnisotropy","Object","defineProperties","prototype","get","equals","left","right","NEAREST","freeze"],"mappings":"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","sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport TextureMagnificationFilter from \"./TextureMagnificationFilter.js\";\nimport TextureMinificationFilter from \"./TextureMinificationFilter.js\";\nimport TextureWrap from \"./TextureWrap.js\";\n\n/**\n * @private\n */\nfunction Sampler(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var wrapS = defaultValue(options.wrapS, TextureWrap.CLAMP_TO_EDGE);\n  var wrapT = defaultValue(options.wrapT, TextureWrap.CLAMP_TO_EDGE);\n  var minificationFilter = defaultValue(\n    options.minificationFilter,\n    TextureMinificationFilter.LINEAR\n  );\n  var magnificationFilter = defaultValue(\n    options.magnificationFilter,\n    TextureMagnificationFilter.LINEAR\n  );\n  var maximumAnisotropy = defined(options.maximumAnisotropy)\n    ? options.maximumAnisotropy\n    : 1.0;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!TextureWrap.validate(wrapS)) {\n    throw new DeveloperError(\"Invalid sampler.wrapS.\");\n  }\n\n  if (!TextureWrap.validate(wrapT)) {\n    throw new DeveloperError(\"Invalid sampler.wrapT.\");\n  }\n\n  if (!TextureMinificationFilter.validate(minificationFilter)) {\n    throw new DeveloperError(\"Invalid sampler.minificationFilter.\");\n  }\n\n  if (!TextureMagnificationFilter.validate(magnificationFilter)) {\n    throw new DeveloperError(\"Invalid sampler.magnificationFilter.\");\n  }\n\n  Check.typeOf.number.greaterThanOrEquals(\n    \"maximumAnisotropy\",\n    maximumAnisotropy,\n    1.0\n  );\n  //>>includeEnd('debug');\n\n  this._wrapS = wrapS;\n  this._wrapT = wrapT;\n  this._minificationFilter = minificationFilter;\n  this._magnificationFilter = magnificationFilter;\n  this._maximumAnisotropy = maximumAnisotropy;\n}\n\nObject.defineProperties(Sampler.prototype, {\n  wrapS: {\n    get: function () {\n      return this._wrapS;\n    },\n  },\n  wrapT: {\n    get: function () {\n      return this._wrapT;\n    },\n  },\n  minificationFilter: {\n    get: function () {\n      return this._minificationFilter;\n    },\n  },\n  magnificationFilter: {\n    get: function () {\n      return this._magnificationFilter;\n    },\n  },\n  maximumAnisotropy: {\n    get: function () {\n      return this._maximumAnisotropy;\n    },\n  },\n});\n\nSampler.equals = function (left, right) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      left._wrapS === right._wrapS &&\n      left._wrapT === right._wrapT &&\n      left._minificationFilter === right._minificationFilter &&\n      left._magnificationFilter === right._magnificationFilter &&\n      left._maximumAnisotropy === right._maximumAnisotropy)\n  );\n};\n\nSampler.NEAREST = Object.freeze(\n  new Sampler({\n    wrapS: TextureWrap.CLAMP_TO_EDGE,\n    wrapT: TextureWrap.CLAMP_TO_EDGE,\n    minificationFilter: TextureMinificationFilter.NEAREST,\n    magnificationFilter: TextureMagnificationFilter.NEAREST,\n  })\n);\nexport default Sampler;\n"]},"metadata":{},"sourceType":"module"}