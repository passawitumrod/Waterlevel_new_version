{"ast":null,"code":"import defined from \"./defined.js\";\nimport parseResponseHeaders from \"./parseResponseHeaders.js\";\n/**\n * An event that is raised when a request encounters an error.\n *\n * @constructor\n * @alias RequestErrorEvent\n *\n * @param {Number} [statusCode] The HTTP error status code, such as 404.\n * @param {Object} [response] The response included along with the error.\n * @param {String|Object} [responseHeaders] The response headers, represented either as an object literal or as a\n *                        string in the format returned by XMLHttpRequest's getAllResponseHeaders() function.\n */\n\nfunction RequestErrorEvent(statusCode, response, responseHeaders) {\n  /**\n   * The HTTP error status code, such as 404.  If the error does not have a particular\n   * HTTP code, this property will be undefined.\n   *\n   * @type {Number}\n   */\n  this.statusCode = statusCode;\n  /**\n   * The response included along with the error.  If the error does not include a response,\n   * this property will be undefined.\n   *\n   * @type {Object}\n   */\n\n  this.response = response;\n  /**\n   * The headers included in the response, represented as an object literal of key/value pairs.\n   * If the error does not include any headers, this property will be undefined.\n   *\n   * @type {Object}\n   */\n\n  this.responseHeaders = responseHeaders;\n\n  if (typeof this.responseHeaders === \"string\") {\n    this.responseHeaders = parseResponseHeaders(this.responseHeaders);\n  }\n}\n/**\n * Creates a string representing this RequestErrorEvent.\n * @memberof RequestErrorEvent\n *\n * @returns {String} A string representing the provided RequestErrorEvent.\n */\n\n\nRequestErrorEvent.prototype.toString = function () {\n  var str = \"Request has failed.\";\n\n  if (defined(this.statusCode)) {\n    str += \" Status Code: \" + this.statusCode;\n  }\n\n  return str;\n};\n\nexport default RequestErrorEvent;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/RequestErrorEvent.js"],"names":["defined","parseResponseHeaders","RequestErrorEvent","statusCode","response","responseHeaders","prototype","toString","str"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,OAAOC,oBAAP,MAAiC,2BAAjC;AAEA;;;;;;;;;;;;AAWA,SAASC,iBAAT,CAA2BC,UAA3B,EAAuCC,QAAvC,EAAiDC,eAAjD,EAAkE;AAChE;;;;;;AAMA,OAAKF,UAAL,GAAkBA,UAAlB;AAEA;;;;;;;AAMA,OAAKC,QAAL,GAAgBA,QAAhB;AAEA;;;;;;;AAMA,OAAKC,eAAL,GAAuBA,eAAvB;;AAEA,MAAI,OAAO,KAAKA,eAAZ,KAAgC,QAApC,EAA8C;AAC5C,SAAKA,eAAL,GAAuBJ,oBAAoB,CAAC,KAAKI,eAAN,CAA3C;AACD;AACF;AAED;;;;;;;;AAMAH,iBAAiB,CAACI,SAAlB,CAA4BC,QAA5B,GAAuC,YAAY;AACjD,MAAIC,GAAG,GAAG,qBAAV;;AACA,MAAIR,OAAO,CAAC,KAAKG,UAAN,CAAX,EAA8B;AAC5BK,IAAAA,GAAG,IAAI,mBAAmB,KAAKL,UAA/B;AACD;;AACD,SAAOK,GAAP;AACD,CAND;;AAOA,eAAeN,iBAAf","sourcesContent":["import defined from \"./defined.js\";\nimport parseResponseHeaders from \"./parseResponseHeaders.js\";\n\n/**\n * An event that is raised when a request encounters an error.\n *\n * @constructor\n * @alias RequestErrorEvent\n *\n * @param {Number} [statusCode] The HTTP error status code, such as 404.\n * @param {Object} [response] The response included along with the error.\n * @param {String|Object} [responseHeaders] The response headers, represented either as an object literal or as a\n *                        string in the format returned by XMLHttpRequest's getAllResponseHeaders() function.\n */\nfunction RequestErrorEvent(statusCode, response, responseHeaders) {\n  /**\n   * The HTTP error status code, such as 404.  If the error does not have a particular\n   * HTTP code, this property will be undefined.\n   *\n   * @type {Number}\n   */\n  this.statusCode = statusCode;\n\n  /**\n   * The response included along with the error.  If the error does not include a response,\n   * this property will be undefined.\n   *\n   * @type {Object}\n   */\n  this.response = response;\n\n  /**\n   * The headers included in the response, represented as an object literal of key/value pairs.\n   * If the error does not include any headers, this property will be undefined.\n   *\n   * @type {Object}\n   */\n  this.responseHeaders = responseHeaders;\n\n  if (typeof this.responseHeaders === \"string\") {\n    this.responseHeaders = parseResponseHeaders(this.responseHeaders);\n  }\n}\n\n/**\n * Creates a string representing this RequestErrorEvent.\n * @memberof RequestErrorEvent\n *\n * @returns {String} A string representing the provided RequestErrorEvent.\n */\nRequestErrorEvent.prototype.toString = function () {\n  var str = \"Request has failed.\";\n  if (defined(this.statusCode)) {\n    str += \" Status Code: \" + this.statusCode;\n  }\n  return str;\n};\nexport default RequestErrorEvent;\n"]},"metadata":{},"sourceType":"module"}