{"ast":null,"code":"import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n/**\n * Contains functions for checking that supplied arguments are of a specified type\n * or meet specified conditions\n * @private\n */\n\nvar Check = {};\n/**\n * Contains type checking functions, all using the typeof operator\n */\n\nCheck.typeOf = {};\n\nfunction getUndefinedErrorMessage(name) {\n  return name + \" is required, actual value was undefined\";\n}\n\nfunction getFailedTypeErrorMessage(actual, expected, name) {\n  return \"Expected \" + name + \" to be typeof \" + expected + \", actual typeof was \" + actual;\n}\n/**\n * Throws if test is not defined\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value that is to be checked\n * @exception {DeveloperError} test must be defined\n */\n\n\nCheck.defined = function (name, test) {\n  if (!defined(test)) {\n    throw new DeveloperError(getUndefinedErrorMessage(name));\n  }\n};\n/**\n * Throws if test is not typeof 'function'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'function'\n */\n\n\nCheck.typeOf.func = function (name, test) {\n  if (typeof test !== \"function\") {\n    throw new DeveloperError(getFailedTypeErrorMessage(typeof test, \"function\", name));\n  }\n};\n/**\n * Throws if test is not typeof 'string'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'string'\n */\n\n\nCheck.typeOf.string = function (name, test) {\n  if (typeof test !== \"string\") {\n    throw new DeveloperError(getFailedTypeErrorMessage(typeof test, \"string\", name));\n  }\n};\n/**\n * Throws if test is not typeof 'number'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'number'\n */\n\n\nCheck.typeOf.number = function (name, test) {\n  if (typeof test !== \"number\") {\n    throw new DeveloperError(getFailedTypeErrorMessage(typeof test, \"number\", name));\n  }\n};\n/**\n * Throws if test is not typeof 'number' and less than limit\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {Number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and less than limit\n */\n\n\nCheck.typeOf.number.lessThan = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n\n  if (test >= limit) {\n    throw new DeveloperError(\"Expected \" + name + \" to be less than \" + limit + \", actual value was \" + test);\n  }\n};\n/**\n * Throws if test is not typeof 'number' and less than or equal to limit\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {Number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and less than or equal to limit\n */\n\n\nCheck.typeOf.number.lessThanOrEquals = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n\n  if (test > limit) {\n    throw new DeveloperError(\"Expected \" + name + \" to be less than or equal to \" + limit + \", actual value was \" + test);\n  }\n};\n/**\n * Throws if test is not typeof 'number' and greater than limit\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {Number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and greater than limit\n */\n\n\nCheck.typeOf.number.greaterThan = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n\n  if (test <= limit) {\n    throw new DeveloperError(\"Expected \" + name + \" to be greater than \" + limit + \", actual value was \" + test);\n  }\n};\n/**\n * Throws if test is not typeof 'number' and greater than or equal to limit\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {Number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and greater than or equal to limit\n */\n\n\nCheck.typeOf.number.greaterThanOrEquals = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n\n  if (test < limit) {\n    throw new DeveloperError(\"Expected \" + name + \" to be greater than or equal to\" + limit + \", actual value was \" + test);\n  }\n};\n/**\n * Throws if test is not typeof 'object'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'object'\n */\n\n\nCheck.typeOf.object = function (name, test) {\n  if (typeof test !== \"object\") {\n    throw new DeveloperError(getFailedTypeErrorMessage(typeof test, \"object\", name));\n  }\n};\n/**\n * Throws if test is not typeof 'boolean'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'boolean'\n */\n\n\nCheck.typeOf.bool = function (name, test) {\n  if (typeof test !== \"boolean\") {\n    throw new DeveloperError(getFailedTypeErrorMessage(typeof test, \"boolean\", name));\n  }\n};\n/**\n * Throws if test1 and test2 is not typeof 'number' and not equal in value\n *\n * @param {String} name1 The name of the first variable being tested\n * @param {String} name2 The name of the second variable being tested against\n * @param {*} test1 The value to test\n * @param {*} test2 The value to test against\n * @exception {DeveloperError} test1 and test2 should be type of 'number' and be equal in value\n */\n\n\nCheck.typeOf.number.equals = function (name1, name2, test1, test2) {\n  Check.typeOf.number(name1, test1);\n  Check.typeOf.number(name2, test2);\n\n  if (test1 !== test2) {\n    throw new DeveloperError(name1 + \" must be equal to \" + name2 + \", the actual values are \" + test1 + \" and \" + test2);\n  }\n};\n\nexport default Check;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/Check.js"],"names":["defined","DeveloperError","Check","typeOf","getUndefinedErrorMessage","name","getFailedTypeErrorMessage","actual","expected","test","func","string","number","lessThan","limit","lessThanOrEquals","greaterThan","greaterThanOrEquals","object","bool","equals","name1","name2","test1","test2"],"mappings":"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","sourcesContent":["import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Contains functions for checking that supplied arguments are of a specified type\n * or meet specified conditions\n * @private\n */\nvar Check = {};\n\n/**\n * Contains type checking functions, all using the typeof operator\n */\nCheck.typeOf = {};\n\nfunction getUndefinedErrorMessage(name) {\n  return name + \" is required, actual value was undefined\";\n}\n\nfunction getFailedTypeErrorMessage(actual, expected, name) {\n  return (\n    \"Expected \" +\n    name +\n    \" to be typeof \" +\n    expected +\n    \", actual typeof was \" +\n    actual\n  );\n}\n\n/**\n * Throws if test is not defined\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value that is to be checked\n * @exception {DeveloperError} test must be defined\n */\nCheck.defined = function (name, test) {\n  if (!defined(test)) {\n    throw new DeveloperError(getUndefinedErrorMessage(name));\n  }\n};\n\n/**\n * Throws if test is not typeof 'function'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'function'\n */\nCheck.typeOf.func = function (name, test) {\n  if (typeof test !== \"function\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"function\", name)\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'string'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'string'\n */\nCheck.typeOf.string = function (name, test) {\n  if (typeof test !== \"string\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"string\", name)\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'number'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'number'\n */\nCheck.typeOf.number = function (name, test) {\n  if (typeof test !== \"number\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"number\", name)\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'number' and less than limit\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {Number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and less than limit\n */\nCheck.typeOf.number.lessThan = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n  if (test >= limit) {\n    throw new DeveloperError(\n      \"Expected \" +\n        name +\n        \" to be less than \" +\n        limit +\n        \", actual value was \" +\n        test\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'number' and less than or equal to limit\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {Number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and less than or equal to limit\n */\nCheck.typeOf.number.lessThanOrEquals = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n  if (test > limit) {\n    throw new DeveloperError(\n      \"Expected \" +\n        name +\n        \" to be less than or equal to \" +\n        limit +\n        \", actual value was \" +\n        test\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'number' and greater than limit\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {Number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and greater than limit\n */\nCheck.typeOf.number.greaterThan = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n  if (test <= limit) {\n    throw new DeveloperError(\n      \"Expected \" +\n        name +\n        \" to be greater than \" +\n        limit +\n        \", actual value was \" +\n        test\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'number' and greater than or equal to limit\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {Number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and greater than or equal to limit\n */\nCheck.typeOf.number.greaterThanOrEquals = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n  if (test < limit) {\n    throw new DeveloperError(\n      \"Expected \" +\n        name +\n        \" to be greater than or equal to\" +\n        limit +\n        \", actual value was \" +\n        test\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'object'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'object'\n */\nCheck.typeOf.object = function (name, test) {\n  if (typeof test !== \"object\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"object\", name)\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'boolean'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'boolean'\n */\nCheck.typeOf.bool = function (name, test) {\n  if (typeof test !== \"boolean\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"boolean\", name)\n    );\n  }\n};\n\n/**\n * Throws if test1 and test2 is not typeof 'number' and not equal in value\n *\n * @param {String} name1 The name of the first variable being tested\n * @param {String} name2 The name of the second variable being tested against\n * @param {*} test1 The value to test\n * @param {*} test2 The value to test against\n * @exception {DeveloperError} test1 and test2 should be type of 'number' and be equal in value\n */\nCheck.typeOf.number.equals = function (name1, name2, test1, test2) {\n  Check.typeOf.number(name1, test1);\n  Check.typeOf.number(name2, test2);\n  if (test1 !== test2) {\n    throw new DeveloperError(\n      name1 +\n        \" must be equal to \" +\n        name2 +\n        \", the actual values are \" +\n        test1 +\n        \" and \" +\n        test2\n    );\n  }\n};\nexport default Check;\n"]},"metadata":{},"sourceType":"module"}