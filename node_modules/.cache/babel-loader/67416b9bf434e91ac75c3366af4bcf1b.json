{"ast":null,"code":"import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport TimeIntervalCollection from \"../Core/TimeIntervalCollection.js\";\nimport Property from \"./Property.js\";\n\nfunction subscribeAll(property, eventHelper, definitionChanged, intervals) {\n  function callback() {\n    definitionChanged.raiseEvent(property);\n  }\n\n  var items = [];\n  eventHelper.removeAll();\n  var length = intervals.length;\n\n  for (var i = 0; i < length; i++) {\n    var interval = intervals.get(i);\n\n    if (defined(interval.data) && items.indexOf(interval.data) === -1) {\n      eventHelper.add(interval.data.definitionChanged, callback);\n    }\n  }\n}\n/**\n * A {@link Property} which is defined by a {@link TimeIntervalCollection}, where the\n * data property of each {@link TimeInterval} is another Property instance which is\n * evaluated at the provided time.\n *\n * @alias CompositeProperty\n * @constructor\n *\n *\n * @example\n * var constantProperty = ...;\n * var sampledProperty = ...;\n *\n * //Create a composite property from two previously defined properties\n * //where the property is valid on August 1st, 2012 and uses a constant\n * //property for the first half of the day and a sampled property for the\n * //remaining half.\n * var composite = new Cesium.CompositeProperty();\n * composite.intervals.addInterval(Cesium.TimeInterval.fromIso8601({\n *     iso8601 : '2012-08-01T00:00:00.00Z/2012-08-01T12:00:00.00Z',\n *     data : constantProperty\n * }));\n * composite.intervals.addInterval(Cesium.TimeInterval.fromIso8601({\n *     iso8601 : '2012-08-01T12:00:00.00Z/2012-08-02T00:00:00.00Z',\n *     isStartIncluded : false,\n *     isStopIncluded : false,\n *     data : sampledProperty\n * }));\n *\n * @see CompositeMaterialProperty\n * @see CompositePositionProperty\n */\n\n\nfunction CompositeProperty() {\n  this._eventHelper = new EventHelper();\n  this._definitionChanged = new Event();\n  this._intervals = new TimeIntervalCollection();\n\n  this._intervals.changedEvent.addEventListener(CompositeProperty.prototype._intervalsChanged, this);\n}\n\nObject.defineProperties(CompositeProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof CompositeProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function get() {\n      return this._intervals.isEmpty;\n    }\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value.\n   * @memberof CompositeProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function get() {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets the interval collection.\n   * @memberof CompositeProperty.prototype\n   *\n   * @type {TimeIntervalCollection}\n   */\n  intervals: {\n    get: function get() {\n      return this._intervals;\n    }\n  }\n});\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\nCompositeProperty.prototype.getValue = function (time, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required\");\n  } //>>includeEnd('debug');\n\n\n  var innerProperty = this._intervals.findDataForIntervalContainingDate(time);\n\n  if (defined(innerProperty)) {\n    return innerProperty.getValue(time, result);\n  }\n\n  return undefined;\n};\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nCompositeProperty.prototype.equals = function (other) {\n  return this === other || //\n  other instanceof CompositeProperty && //\n  this._intervals.equals(other._intervals, Property.equals);\n};\n/**\n * @private\n */\n\n\nCompositeProperty.prototype._intervalsChanged = function () {\n  subscribeAll(this, this._eventHelper, this._definitionChanged, this._intervals);\n\n  this._definitionChanged.raiseEvent(this);\n};\n\nexport default CompositeProperty;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/CompositeProperty.js"],"names":["defined","DeveloperError","Event","EventHelper","TimeIntervalCollection","Property","subscribeAll","property","eventHelper","definitionChanged","intervals","callback","raiseEvent","items","removeAll","length","i","interval","get","data","indexOf","add","CompositeProperty","_eventHelper","_definitionChanged","_intervals","changedEvent","addEventListener","prototype","_intervalsChanged","Object","defineProperties","isConstant","isEmpty","getValue","time","result","innerProperty","findDataForIntervalContainingDate","undefined","equals","other"],"mappings":"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","sourcesContent":["import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport TimeIntervalCollection from \"../Core/TimeIntervalCollection.js\";\nimport Property from \"./Property.js\";\n\nfunction subscribeAll(property, eventHelper, definitionChanged, intervals) {\n  function callback() {\n    definitionChanged.raiseEvent(property);\n  }\n  var items = [];\n  eventHelper.removeAll();\n  var length = intervals.length;\n  for (var i = 0; i < length; i++) {\n    var interval = intervals.get(i);\n    if (defined(interval.data) && items.indexOf(interval.data) === -1) {\n      eventHelper.add(interval.data.definitionChanged, callback);\n    }\n  }\n}\n\n/**\n * A {@link Property} which is defined by a {@link TimeIntervalCollection}, where the\n * data property of each {@link TimeInterval} is another Property instance which is\n * evaluated at the provided time.\n *\n * @alias CompositeProperty\n * @constructor\n *\n *\n * @example\n * var constantProperty = ...;\n * var sampledProperty = ...;\n *\n * //Create a composite property from two previously defined properties\n * //where the property is valid on August 1st, 2012 and uses a constant\n * //property for the first half of the day and a sampled property for the\n * //remaining half.\n * var composite = new Cesium.CompositeProperty();\n * composite.intervals.addInterval(Cesium.TimeInterval.fromIso8601({\n *     iso8601 : '2012-08-01T00:00:00.00Z/2012-08-01T12:00:00.00Z',\n *     data : constantProperty\n * }));\n * composite.intervals.addInterval(Cesium.TimeInterval.fromIso8601({\n *     iso8601 : '2012-08-01T12:00:00.00Z/2012-08-02T00:00:00.00Z',\n *     isStartIncluded : false,\n *     isStopIncluded : false,\n *     data : sampledProperty\n * }));\n *\n * @see CompositeMaterialProperty\n * @see CompositePositionProperty\n */\nfunction CompositeProperty() {\n  this._eventHelper = new EventHelper();\n  this._definitionChanged = new Event();\n  this._intervals = new TimeIntervalCollection();\n  this._intervals.changedEvent.addEventListener(\n    CompositeProperty.prototype._intervalsChanged,\n    this\n  );\n}\n\nObject.defineProperties(CompositeProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof CompositeProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return this._intervals.isEmpty;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value.\n   * @memberof CompositeProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets the interval collection.\n   * @memberof CompositeProperty.prototype\n   *\n   * @type {TimeIntervalCollection}\n   */\n  intervals: {\n    get: function () {\n      return this._intervals;\n    },\n  },\n});\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nCompositeProperty.prototype.getValue = function (time, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required\");\n  }\n  //>>includeEnd('debug');\n\n  var innerProperty = this._intervals.findDataForIntervalContainingDate(time);\n  if (defined(innerProperty)) {\n    return innerProperty.getValue(time, result);\n  }\n  return undefined;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCompositeProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof CompositeProperty && //\n      this._intervals.equals(other._intervals, Property.equals))\n  );\n};\n\n/**\n * @private\n */\nCompositeProperty.prototype._intervalsChanged = function () {\n  subscribeAll(\n    this,\n    this._eventHelper,\n    this._definitionChanged,\n    this._intervals\n  );\n  this._definitionChanged.raiseEvent(this);\n};\nexport default CompositeProperty;\n"]},"metadata":{},"sourceType":"module"}