{"ast":null,"code":"import DeveloperError from \"./DeveloperError.js\";\n/**\n * A tiling scheme for geometry or imagery on the surface of an ellipsoid.  At level-of-detail zero,\n * the coarsest, least-detailed level, the number of tiles is configurable.\n * At level of detail one, each of the level zero tiles has four children, two in each direction.\n * At level of detail two, each of the level one tiles has four children, two in each direction.\n * This continues for as many levels as are present in the geometry or imagery source.\n *\n * @alias TilingScheme\n * @constructor\n *\n * @see WebMercatorTilingScheme\n * @see GeographicTilingScheme\n */\n\nfunction TilingScheme(options) {\n  //>>includeStart('debug', pragmas.debug);\n  throw new DeveloperError(\"This type should not be instantiated directly.  Instead, use WebMercatorTilingScheme or GeographicTilingScheme.\"); //>>includeEnd('debug');\n}\n\nObject.defineProperties(TilingScheme.prototype, {\n  /**\n   * Gets the ellipsoid that is tiled by the tiling scheme.\n   * @memberof TilingScheme.prototype\n   * @type {Ellipsoid}\n   */\n  ellipsoid: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets the rectangle, in radians, covered by this tiling scheme.\n   * @memberof TilingScheme.prototype\n   * @type {Rectangle}\n   */\n  rectangle: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets the map projection used by the tiling scheme.\n   * @memberof TilingScheme.prototype\n   * @type {MapProjection}\n   */\n  projection: {\n    get: DeveloperError.throwInstantiationError\n  }\n});\n/**\n * Gets the total number of tiles in the X direction at a specified level-of-detail.\n * @function\n *\n * @param {Number} level The level-of-detail.\n * @returns {Number} The number of tiles in the X direction at the given level.\n */\n\nTilingScheme.prototype.getNumberOfXTilesAtLevel = DeveloperError.throwInstantiationError;\n/**\n * Gets the total number of tiles in the Y direction at a specified level-of-detail.\n * @function\n *\n * @param {Number} level The level-of-detail.\n * @returns {Number} The number of tiles in the Y direction at the given level.\n */\n\nTilingScheme.prototype.getNumberOfYTilesAtLevel = DeveloperError.throwInstantiationError;\n/**\n * Transforms a rectangle specified in geodetic radians to the native coordinate system\n * of this tiling scheme.\n * @function\n *\n * @param {Rectangle} rectangle The rectangle to transform.\n * @param {Rectangle} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the native rectangle if 'result'\n *          is undefined.\n */\n\nTilingScheme.prototype.rectangleToNativeRectangle = DeveloperError.throwInstantiationError;\n/**\n * Converts tile x, y coordinates and level to a rectangle expressed in the native coordinates\n * of the tiling scheme.\n * @function\n *\n * @param {Number} x The integer x coordinate of the tile.\n * @param {Number} y The integer y coordinate of the tile.\n * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {Object} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the rectangle\n *          if 'result' is undefined.\n */\n\nTilingScheme.prototype.tileXYToNativeRectangle = DeveloperError.throwInstantiationError;\n/**\n * Converts tile x, y coordinates and level to a cartographic rectangle in radians.\n * @function\n *\n * @param {Number} x The integer x coordinate of the tile.\n * @param {Number} y The integer y coordinate of the tile.\n * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {Object} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the rectangle\n *          if 'result' is undefined.\n */\n\nTilingScheme.prototype.tileXYToRectangle = DeveloperError.throwInstantiationError;\n/**\n * Calculates the tile x, y coordinates of the tile containing\n * a given cartographic position.\n * @function\n *\n * @param {Cartographic} position The position.\n * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {Cartesian2} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Cartesian2} The specified 'result', or a new object containing the tile x, y coordinates\n *          if 'result' is undefined.\n */\n\nTilingScheme.prototype.positionToTileXY = DeveloperError.throwInstantiationError;\nexport default TilingScheme;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/TilingScheme.js"],"names":["DeveloperError","TilingScheme","options","Object","defineProperties","prototype","ellipsoid","get","throwInstantiationError","rectangle","projection","getNumberOfXTilesAtLevel","getNumberOfYTilesAtLevel","rectangleToNativeRectangle","tileXYToNativeRectangle","tileXYToRectangle","positionToTileXY"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,qBAA3B;AAEA;;;;;;;;;;;;;;AAaA,SAASC,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B;AACA,QAAM,IAAIF,cAAJ,CACJ,iHADI,CAAN,CAF6B,CAK7B;AACD;;AAEDG,MAAM,CAACC,gBAAP,CAAwBH,YAAY,CAACI,SAArC,EAAgD;AAC9C;;;;;AAKAC,EAAAA,SAAS,EAAE;AACTC,IAAAA,GAAG,EAAEP,cAAc,CAACQ;AADX,GANmC;;AAU9C;;;;;AAKAC,EAAAA,SAAS,EAAE;AACTF,IAAAA,GAAG,EAAEP,cAAc,CAACQ;AADX,GAfmC;;AAmB9C;;;;;AAKAE,EAAAA,UAAU,EAAE;AACVH,IAAAA,GAAG,EAAEP,cAAc,CAACQ;AADV;AAxBkC,CAAhD;AA6BA;;;;;;;;AAOAP,YAAY,CAACI,SAAb,CAAuBM,wBAAvB,GACEX,cAAc,CAACQ,uBADjB;AAGA;;;;;;;;AAOAP,YAAY,CAACI,SAAb,CAAuBO,wBAAvB,GACEZ,cAAc,CAACQ,uBADjB;AAGA;;;;;;;;;;;;AAWAP,YAAY,CAACI,SAAb,CAAuBQ,0BAAvB,GACEb,cAAc,CAACQ,uBADjB;AAGA;;;;;;;;;;;;;;AAaAP,YAAY,CAACI,SAAb,CAAuBS,uBAAvB,GACEd,cAAc,CAACQ,uBADjB;AAGA;;;;;;;;;;;;;AAYAP,YAAY,CAACI,SAAb,CAAuBU,iBAAvB,GACEf,cAAc,CAACQ,uBADjB;AAGA;;;;;;;;;;;;;AAYAP,YAAY,CAACI,SAAb,CAAuBW,gBAAvB,GACEhB,cAAc,CAACQ,uBADjB;AAEA,eAAeP,YAAf","sourcesContent":["import DeveloperError from \"./DeveloperError.js\";\n\n/**\n * A tiling scheme for geometry or imagery on the surface of an ellipsoid.  At level-of-detail zero,\n * the coarsest, least-detailed level, the number of tiles is configurable.\n * At level of detail one, each of the level zero tiles has four children, two in each direction.\n * At level of detail two, each of the level one tiles has four children, two in each direction.\n * This continues for as many levels as are present in the geometry or imagery source.\n *\n * @alias TilingScheme\n * @constructor\n *\n * @see WebMercatorTilingScheme\n * @see GeographicTilingScheme\n */\nfunction TilingScheme(options) {\n  //>>includeStart('debug', pragmas.debug);\n  throw new DeveloperError(\n    \"This type should not be instantiated directly.  Instead, use WebMercatorTilingScheme or GeographicTilingScheme.\"\n  );\n  //>>includeEnd('debug');\n}\n\nObject.defineProperties(TilingScheme.prototype, {\n  /**\n   * Gets the ellipsoid that is tiled by the tiling scheme.\n   * @memberof TilingScheme.prototype\n   * @type {Ellipsoid}\n   */\n  ellipsoid: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the rectangle, in radians, covered by this tiling scheme.\n   * @memberof TilingScheme.prototype\n   * @type {Rectangle}\n   */\n  rectangle: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the map projection used by the tiling scheme.\n   * @memberof TilingScheme.prototype\n   * @type {MapProjection}\n   */\n  projection: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\n/**\n * Gets the total number of tiles in the X direction at a specified level-of-detail.\n * @function\n *\n * @param {Number} level The level-of-detail.\n * @returns {Number} The number of tiles in the X direction at the given level.\n */\nTilingScheme.prototype.getNumberOfXTilesAtLevel =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Gets the total number of tiles in the Y direction at a specified level-of-detail.\n * @function\n *\n * @param {Number} level The level-of-detail.\n * @returns {Number} The number of tiles in the Y direction at the given level.\n */\nTilingScheme.prototype.getNumberOfYTilesAtLevel =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Transforms a rectangle specified in geodetic radians to the native coordinate system\n * of this tiling scheme.\n * @function\n *\n * @param {Rectangle} rectangle The rectangle to transform.\n * @param {Rectangle} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the native rectangle if 'result'\n *          is undefined.\n */\nTilingScheme.prototype.rectangleToNativeRectangle =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Converts tile x, y coordinates and level to a rectangle expressed in the native coordinates\n * of the tiling scheme.\n * @function\n *\n * @param {Number} x The integer x coordinate of the tile.\n * @param {Number} y The integer y coordinate of the tile.\n * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {Object} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the rectangle\n *          if 'result' is undefined.\n */\nTilingScheme.prototype.tileXYToNativeRectangle =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Converts tile x, y coordinates and level to a cartographic rectangle in radians.\n * @function\n *\n * @param {Number} x The integer x coordinate of the tile.\n * @param {Number} y The integer y coordinate of the tile.\n * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {Object} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the rectangle\n *          if 'result' is undefined.\n */\nTilingScheme.prototype.tileXYToRectangle =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Calculates the tile x, y coordinates of the tile containing\n * a given cartographic position.\n * @function\n *\n * @param {Cartographic} position The position.\n * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {Cartesian2} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Cartesian2} The specified 'result', or a new object containing the tile x, y coordinates\n *          if 'result' is undefined.\n */\nTilingScheme.prototype.positionToTileXY =\n  DeveloperError.throwInstantiationError;\nexport default TilingScheme;\n"]},"metadata":{},"sourceType":"module"}