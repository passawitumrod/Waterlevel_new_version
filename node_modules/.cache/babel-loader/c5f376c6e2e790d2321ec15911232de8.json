{"ast":null,"code":"import defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\n/**\n * A {@link Property} whose value does not change with respect to simulation time.\n *\n * @alias ConstantProperty\n * @constructor\n *\n * @param {*} [value] The property value.\n *\n * @see ConstantPositionProperty\n */\n\nfunction ConstantProperty(value) {\n  this._value = undefined;\n  this._hasClone = false;\n  this._hasEquals = false;\n  this._definitionChanged = new Event();\n  this.setValue(value);\n}\n\nObject.defineProperties(ConstantProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * This property always returns <code>true</code>.\n   * @memberof ConstantProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    value: true\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value.\n   * @memberof ConstantProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function get() {\n      return this._definitionChanged;\n    }\n  }\n});\n/**\n * Gets the value of the property.\n *\n * @param {JulianDate} [time] The time for which to retrieve the value.  This parameter is unused since the value does not change with respect to time.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\nConstantProperty.prototype.getValue = function (time, result) {\n  return this._hasClone ? this._value.clone(result) : this._value;\n};\n/**\n * Sets the value of the property.\n *\n * @param {*} value The property value.\n */\n\n\nConstantProperty.prototype.setValue = function (value) {\n  var oldValue = this._value;\n\n  if (oldValue !== value) {\n    var isDefined = defined(value);\n    var hasClone = isDefined && typeof value.clone === \"function\";\n    var hasEquals = isDefined && typeof value.equals === \"function\";\n    var changed = !hasEquals || !value.equals(oldValue);\n\n    if (changed) {\n      this._hasClone = hasClone;\n      this._hasEquals = hasEquals;\n      this._value = !hasClone ? value : value.clone(this._value);\n\n      this._definitionChanged.raiseEvent(this);\n    }\n  }\n};\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nConstantProperty.prototype.equals = function (other) {\n  return this === other || //\n  other instanceof ConstantProperty && ( //\n  !this._hasEquals && this._value === other._value || //\n  this._hasEquals && this._value.equals(other._value));\n};\n/**\n * Gets this property's value.\n *\n * @returns {*} This property's value.\n */\n\n\nConstantProperty.prototype.valueOf = function () {\n  return this._value;\n};\n/**\n * Creates a string representing this property's value.\n *\n * @returns {String} A string representing the property's value.\n */\n\n\nConstantProperty.prototype.toString = function () {\n  return String(this._value);\n};\n\nexport default ConstantProperty;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/ConstantProperty.js"],"names":["defined","Event","ConstantProperty","value","_value","undefined","_hasClone","_hasEquals","_definitionChanged","setValue","Object","defineProperties","prototype","isConstant","definitionChanged","get","getValue","time","result","clone","oldValue","isDefined","hasClone","hasEquals","equals","changed","raiseEvent","other","valueOf","toString","String"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA;;;;;;;;;;;AAUA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B,OAAKC,MAAL,GAAcC,SAAd;AACA,OAAKC,SAAL,GAAiB,KAAjB;AACA,OAAKC,UAAL,GAAkB,KAAlB;AACA,OAAKC,kBAAL,GAA0B,IAAIP,KAAJ,EAA1B;AACA,OAAKQ,QAAL,CAAcN,KAAd;AACD;;AAEDO,MAAM,CAACC,gBAAP,CAAwBT,gBAAgB,CAACU,SAAzC,EAAoD;AAClD;;;;;;;;AAQAC,EAAAA,UAAU,EAAE;AACVV,IAAAA,KAAK,EAAE;AADG,GATsC;;AAYlD;;;;;;;;;AASAW,EAAAA,iBAAiB,EAAE;AACjBC,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKP,kBAAZ;AACD;AAHgB;AArB+B,CAApD;AA4BA;;;;;;;;AAOAN,gBAAgB,CAACU,SAAjB,CAA2BI,QAA3B,GAAsC,UAAUC,IAAV,EAAgBC,MAAhB,EAAwB;AAC5D,SAAO,KAAKZ,SAAL,GAAiB,KAAKF,MAAL,CAAYe,KAAZ,CAAkBD,MAAlB,CAAjB,GAA6C,KAAKd,MAAzD;AACD,CAFD;AAIA;;;;;;;AAKAF,gBAAgB,CAACU,SAAjB,CAA2BH,QAA3B,GAAsC,UAAUN,KAAV,EAAiB;AACrD,MAAIiB,QAAQ,GAAG,KAAKhB,MAApB;;AACA,MAAIgB,QAAQ,KAAKjB,KAAjB,EAAwB;AACtB,QAAIkB,SAAS,GAAGrB,OAAO,CAACG,KAAD,CAAvB;AACA,QAAImB,QAAQ,GAAGD,SAAS,IAAI,OAAOlB,KAAK,CAACgB,KAAb,KAAuB,UAAnD;AACA,QAAII,SAAS,GAAGF,SAAS,IAAI,OAAOlB,KAAK,CAACqB,MAAb,KAAwB,UAArD;AAEA,QAAIC,OAAO,GAAG,CAACF,SAAD,IAAc,CAACpB,KAAK,CAACqB,MAAN,CAAaJ,QAAb,CAA7B;;AACA,QAAIK,OAAJ,EAAa;AACX,WAAKnB,SAAL,GAAiBgB,QAAjB;AACA,WAAKf,UAAL,GAAkBgB,SAAlB;AACA,WAAKnB,MAAL,GAAc,CAACkB,QAAD,GAAYnB,KAAZ,GAAoBA,KAAK,CAACgB,KAAN,CAAY,KAAKf,MAAjB,CAAlC;;AACA,WAAKI,kBAAL,CAAwBkB,UAAxB,CAAmC,IAAnC;AACD;AACF;AACF,CAfD;AAiBA;;;;;;;;;AAOAxB,gBAAgB,CAACU,SAAjB,CAA2BY,MAA3B,GAAoC,UAAUG,KAAV,EAAiB;AACnD,SACE,SAASA,KAAT,IAAkB;AACjBA,EAAAA,KAAK,YAAYzB,gBAAjB,MAAqC;AAClC,GAAC,KAAKK,UAAN,IAAoB,KAAKH,MAAL,KAAgBuB,KAAK,CAACvB,MAA3C,IAAsD;AACpD,OAAKG,UAAL,IAAmB,KAAKH,MAAL,CAAYoB,MAAZ,CAAmBG,KAAK,CAACvB,MAAzB,CAFvB,CAFH;AAMD,CAPD;AASA;;;;;;;AAKAF,gBAAgB,CAACU,SAAjB,CAA2BgB,OAA3B,GAAqC,YAAY;AAC/C,SAAO,KAAKxB,MAAZ;AACD,CAFD;AAIA;;;;;;;AAKAF,gBAAgB,CAACU,SAAjB,CAA2BiB,QAA3B,GAAsC,YAAY;AAChD,SAAOC,MAAM,CAAC,KAAK1B,MAAN,CAAb;AACD,CAFD;;AAGA,eAAeF,gBAAf","sourcesContent":["import defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\n\n/**\n * A {@link Property} whose value does not change with respect to simulation time.\n *\n * @alias ConstantProperty\n * @constructor\n *\n * @param {*} [value] The property value.\n *\n * @see ConstantPositionProperty\n */\nfunction ConstantProperty(value) {\n  this._value = undefined;\n  this._hasClone = false;\n  this._hasEquals = false;\n  this._definitionChanged = new Event();\n  this.setValue(value);\n}\n\nObject.defineProperties(ConstantProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * This property always returns <code>true</code>.\n   * @memberof ConstantProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    value: true,\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value.\n   * @memberof ConstantProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n});\n\n/**\n * Gets the value of the property.\n *\n * @param {JulianDate} [time] The time for which to retrieve the value.  This parameter is unused since the value does not change with respect to time.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nConstantProperty.prototype.getValue = function (time, result) {\n  return this._hasClone ? this._value.clone(result) : this._value;\n};\n\n/**\n * Sets the value of the property.\n *\n * @param {*} value The property value.\n */\nConstantProperty.prototype.setValue = function (value) {\n  var oldValue = this._value;\n  if (oldValue !== value) {\n    var isDefined = defined(value);\n    var hasClone = isDefined && typeof value.clone === \"function\";\n    var hasEquals = isDefined && typeof value.equals === \"function\";\n\n    var changed = !hasEquals || !value.equals(oldValue);\n    if (changed) {\n      this._hasClone = hasClone;\n      this._hasEquals = hasEquals;\n      this._value = !hasClone ? value : value.clone(this._value);\n      this._definitionChanged.raiseEvent(this);\n    }\n  }\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nConstantProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof ConstantProperty && //\n      ((!this._hasEquals && this._value === other._value) || //\n        (this._hasEquals && this._value.equals(other._value))))\n  );\n};\n\n/**\n * Gets this property's value.\n *\n * @returns {*} This property's value.\n */\nConstantProperty.prototype.valueOf = function () {\n  return this._value;\n};\n\n/**\n * Creates a string representing this property's value.\n *\n * @returns {String} A string representing the property's value.\n */\nConstantProperty.prototype.toString = function () {\n  return String(this._value);\n};\nexport default ConstantProperty;\n"]},"metadata":{},"sourceType":"module"}