{"ast":null,"code":"import Batched3DModel3DTileContent from \"./Batched3DModel3DTileContent.js\";\nimport Composite3DTileContent from \"./Composite3DTileContent.js\";\nimport Geometry3DTileContent from \"./Geometry3DTileContent.js\";\nimport Instanced3DModel3DTileContent from \"./Instanced3DModel3DTileContent.js\";\nimport PointCloud3DTileContent from \"./PointCloud3DTileContent.js\";\nimport Tileset3DTileContent from \"./Tileset3DTileContent.js\";\nimport Vector3DTileContent from \"./Vector3DTileContent.js\";\n/**\n * Maps a tile's magic field in its header to a new content object for the tile's payload.\n *\n * @private\n */\n\nvar Cesium3DTileContentFactory = {\n  b3dm: function (tileset, tile, resource, arrayBuffer, byteOffset) {\n    return new Batched3DModel3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset);\n  },\n  pnts: function (tileset, tile, resource, arrayBuffer, byteOffset) {\n    return new PointCloud3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset);\n  },\n  i3dm: function (tileset, tile, resource, arrayBuffer, byteOffset) {\n    return new Instanced3DModel3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset);\n  },\n  cmpt: function (tileset, tile, resource, arrayBuffer, byteOffset) {\n    // Send in the factory in order to avoid a cyclical dependency\n    return new Composite3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset, Cesium3DTileContentFactory);\n  },\n  json: function (tileset, tile, resource, arrayBuffer, byteOffset) {\n    return new Tileset3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset);\n  },\n  geom: function (tileset, tile, resource, arrayBuffer, byteOffset) {\n    return new Geometry3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset);\n  },\n  vctr: function (tileset, tile, resource, arrayBuffer, byteOffset) {\n    return new Vector3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset);\n  }\n};\nexport default Cesium3DTileContentFactory;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/Cesium3DTileContentFactory.js"],"names":["Batched3DModel3DTileContent","Composite3DTileContent","Geometry3DTileContent","Instanced3DModel3DTileContent","PointCloud3DTileContent","Tileset3DTileContent","Vector3DTileContent","Cesium3DTileContentFactory","b3dm","tileset","tile","resource","arrayBuffer","byteOffset","pnts","i3dm","cmpt","json","geom","vctr"],"mappings":"AAAA,OAAOA,2BAAP,MAAwC,kCAAxC;AACA,OAAOC,sBAAP,MAAmC,6BAAnC;AACA,OAAOC,qBAAP,MAAkC,4BAAlC;AACA,OAAOC,6BAAP,MAA0C,oCAA1C;AACA,OAAOC,uBAAP,MAAoC,8BAApC;AACA,OAAOC,oBAAP,MAAiC,2BAAjC;AACA,OAAOC,mBAAP,MAAgC,0BAAhC;AAEA;;;;;;AAKA,IAAIC,0BAA0B,GAAG;AAC/BC,EAAAA,IAAI,EAAE,UAAUC,OAAV,EAAmBC,IAAnB,EAAyBC,QAAzB,EAAmCC,WAAnC,EAAgDC,UAAhD,EAA4D;AAChE,WAAO,IAAIb,2BAAJ,CACLS,OADK,EAELC,IAFK,EAGLC,QAHK,EAILC,WAJK,EAKLC,UALK,CAAP;AAOD,GAT8B;AAU/BC,EAAAA,IAAI,EAAE,UAAUL,OAAV,EAAmBC,IAAnB,EAAyBC,QAAzB,EAAmCC,WAAnC,EAAgDC,UAAhD,EAA4D;AAChE,WAAO,IAAIT,uBAAJ,CACLK,OADK,EAELC,IAFK,EAGLC,QAHK,EAILC,WAJK,EAKLC,UALK,CAAP;AAOD,GAlB8B;AAmB/BE,EAAAA,IAAI,EAAE,UAAUN,OAAV,EAAmBC,IAAnB,EAAyBC,QAAzB,EAAmCC,WAAnC,EAAgDC,UAAhD,EAA4D;AAChE,WAAO,IAAIV,6BAAJ,CACLM,OADK,EAELC,IAFK,EAGLC,QAHK,EAILC,WAJK,EAKLC,UALK,CAAP;AAOD,GA3B8B;AA4B/BG,EAAAA,IAAI,EAAE,UAAUP,OAAV,EAAmBC,IAAnB,EAAyBC,QAAzB,EAAmCC,WAAnC,EAAgDC,UAAhD,EAA4D;AAChE;AACA,WAAO,IAAIZ,sBAAJ,CACLQ,OADK,EAELC,IAFK,EAGLC,QAHK,EAILC,WAJK,EAKLC,UALK,EAMLN,0BANK,CAAP;AAQD,GAtC8B;AAuC/BU,EAAAA,IAAI,EAAE,UAAUR,OAAV,EAAmBC,IAAnB,EAAyBC,QAAzB,EAAmCC,WAAnC,EAAgDC,UAAhD,EAA4D;AAChE,WAAO,IAAIR,oBAAJ,CACLI,OADK,EAELC,IAFK,EAGLC,QAHK,EAILC,WAJK,EAKLC,UALK,CAAP;AAOD,GA/C8B;AAgD/BK,EAAAA,IAAI,EAAE,UAAUT,OAAV,EAAmBC,IAAnB,EAAyBC,QAAzB,EAAmCC,WAAnC,EAAgDC,UAAhD,EAA4D;AAChE,WAAO,IAAIX,qBAAJ,CACLO,OADK,EAELC,IAFK,EAGLC,QAHK,EAILC,WAJK,EAKLC,UALK,CAAP;AAOD,GAxD8B;AAyD/BM,EAAAA,IAAI,EAAE,UAAUV,OAAV,EAAmBC,IAAnB,EAAyBC,QAAzB,EAAmCC,WAAnC,EAAgDC,UAAhD,EAA4D;AAChE,WAAO,IAAIP,mBAAJ,CACLG,OADK,EAELC,IAFK,EAGLC,QAHK,EAILC,WAJK,EAKLC,UALK,CAAP;AAOD;AAjE8B,CAAjC;AAmEA,eAAeN,0BAAf","sourcesContent":["import Batched3DModel3DTileContent from \"./Batched3DModel3DTileContent.js\";\nimport Composite3DTileContent from \"./Composite3DTileContent.js\";\nimport Geometry3DTileContent from \"./Geometry3DTileContent.js\";\nimport Instanced3DModel3DTileContent from \"./Instanced3DModel3DTileContent.js\";\nimport PointCloud3DTileContent from \"./PointCloud3DTileContent.js\";\nimport Tileset3DTileContent from \"./Tileset3DTileContent.js\";\nimport Vector3DTileContent from \"./Vector3DTileContent.js\";\n\n/**\n * Maps a tile's magic field in its header to a new content object for the tile's payload.\n *\n * @private\n */\nvar Cesium3DTileContentFactory = {\n  b3dm: function (tileset, tile, resource, arrayBuffer, byteOffset) {\n    return new Batched3DModel3DTileContent(\n      tileset,\n      tile,\n      resource,\n      arrayBuffer,\n      byteOffset\n    );\n  },\n  pnts: function (tileset, tile, resource, arrayBuffer, byteOffset) {\n    return new PointCloud3DTileContent(\n      tileset,\n      tile,\n      resource,\n      arrayBuffer,\n      byteOffset\n    );\n  },\n  i3dm: function (tileset, tile, resource, arrayBuffer, byteOffset) {\n    return new Instanced3DModel3DTileContent(\n      tileset,\n      tile,\n      resource,\n      arrayBuffer,\n      byteOffset\n    );\n  },\n  cmpt: function (tileset, tile, resource, arrayBuffer, byteOffset) {\n    // Send in the factory in order to avoid a cyclical dependency\n    return new Composite3DTileContent(\n      tileset,\n      tile,\n      resource,\n      arrayBuffer,\n      byteOffset,\n      Cesium3DTileContentFactory\n    );\n  },\n  json: function (tileset, tile, resource, arrayBuffer, byteOffset) {\n    return new Tileset3DTileContent(\n      tileset,\n      tile,\n      resource,\n      arrayBuffer,\n      byteOffset\n    );\n  },\n  geom: function (tileset, tile, resource, arrayBuffer, byteOffset) {\n    return new Geometry3DTileContent(\n      tileset,\n      tile,\n      resource,\n      arrayBuffer,\n      byteOffset\n    );\n  },\n  vctr: function (tileset, tile, resource, arrayBuffer, byteOffset) {\n    return new Vector3DTileContent(\n      tileset,\n      tile,\n      resource,\n      arrayBuffer,\n      byteOffset\n    );\n  },\n};\nexport default Cesium3DTileContentFactory;\n"]},"metadata":{},"sourceType":"module"}