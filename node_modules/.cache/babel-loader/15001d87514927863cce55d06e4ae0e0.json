{"ast":null,"code":"import defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport destroyObject from \"../../Core/destroyObject.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport EventHelper from \"../../Core/EventHelper.js\";\nimport SceneMode from \"../../Scene/SceneMode.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\n/**\n * The view model for {@link SceneModePicker}.\n * @alias SceneModePickerViewModel\n * @constructor\n *\n * @param {Scene} scene The Scene to morph\n * @param {Number} [duration=2.0] The duration of scene morph animations, in seconds\n */\n\nfunction SceneModePickerViewModel(scene, duration) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  } //>>includeEnd('debug');\n\n\n  this._scene = scene;\n  var that = this;\n\n  var morphStart = function morphStart(transitioner, oldMode, newMode, isMorphing) {\n    that.sceneMode = newMode;\n    that.dropDownVisible = false;\n  };\n\n  this._eventHelper = new EventHelper();\n\n  this._eventHelper.add(scene.morphStart, morphStart);\n\n  this._duration = defaultValue(duration, 2.0);\n  /**\n   * Gets or sets the current SceneMode.  This property is observable.\n   * @type {SceneMode}\n   */\n\n  this.sceneMode = scene.mode;\n  /**\n   * Gets or sets whether the button drop-down is currently visible.  This property is observable.\n   * @type {Boolean}\n   * @default false\n   */\n\n  this.dropDownVisible = false;\n  /**\n   * Gets or sets the 2D tooltip.  This property is observable.\n   * @type {String}\n   * @default '2D'\n   */\n\n  this.tooltip2D = \"2D\";\n  /**\n   * Gets or sets the 3D tooltip.  This property is observable.\n   * @type {String}\n   * @default '3D'\n   */\n\n  this.tooltip3D = \"3D\";\n  /**\n   * Gets or sets the Columbus View tooltip.  This property is observable.\n   * @type {String}\n   * @default 'Columbus View'\n   */\n\n  this.tooltipColumbusView = \"Columbus View\";\n  knockout.track(this, [\"sceneMode\", \"dropDownVisible\", \"tooltip2D\", \"tooltip3D\", \"tooltipColumbusView\"]);\n  /**\n   * Gets the currently active tooltip.  This property is observable.\n   * @type {String}\n   */\n\n  this.selectedTooltip = undefined;\n  knockout.defineProperty(this, \"selectedTooltip\", function () {\n    var mode = that.sceneMode;\n\n    if (mode === SceneMode.SCENE2D) {\n      return that.tooltip2D;\n    }\n\n    if (mode === SceneMode.SCENE3D) {\n      return that.tooltip3D;\n    }\n\n    return that.tooltipColumbusView;\n  });\n  this._toggleDropDown = createCommand(function () {\n    that.dropDownVisible = !that.dropDownVisible;\n  });\n  this._morphTo2D = createCommand(function () {\n    scene.morphTo2D(that._duration);\n  });\n  this._morphTo3D = createCommand(function () {\n    scene.morphTo3D(that._duration);\n  });\n  this._morphToColumbusView = createCommand(function () {\n    scene.morphToColumbusView(that._duration);\n  }); //Used by knockout\n\n  this._sceneMode = SceneMode;\n}\n\nObject.defineProperties(SceneModePickerViewModel.prototype, {\n  /**\n   * Gets the scene\n   * @memberof SceneModePickerViewModel.prototype\n   * @type {Scene}\n   */\n  scene: {\n    get: function get() {\n      return this._scene;\n    }\n  },\n\n  /**\n   * Gets or sets the the duration of scene mode transition animations in seconds.\n   * A value of zero causes the scene to instantly change modes.\n   * @memberof SceneModePickerViewModel.prototype\n   * @type {Number}\n   */\n  duration: {\n    get: function get() {\n      return this._duration;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (value < 0.0) {\n        throw new DeveloperError(\"duration value must be positive.\");\n      } //>>includeEnd('debug');\n\n\n      this._duration = value;\n    }\n  },\n\n  /**\n   * Gets the command to toggle the drop down box.\n   * @memberof SceneModePickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  toggleDropDown: {\n    get: function get() {\n      return this._toggleDropDown;\n    }\n  },\n\n  /**\n   * Gets the command to morph to 2D.\n   * @memberof SceneModePickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  morphTo2D: {\n    get: function get() {\n      return this._morphTo2D;\n    }\n  },\n\n  /**\n   * Gets the command to morph to 3D.\n   * @memberof SceneModePickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  morphTo3D: {\n    get: function get() {\n      return this._morphTo3D;\n    }\n  },\n\n  /**\n   * Gets the command to morph to Columbus View.\n   * @memberof SceneModePickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  morphToColumbusView: {\n    get: function get() {\n      return this._morphToColumbusView;\n    }\n  }\n});\n/**\n * @returns {Boolean} true if the object has been destroyed, false otherwise.\n */\n\nSceneModePickerViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys the view model.\n */\n\n\nSceneModePickerViewModel.prototype.destroy = function () {\n  this._eventHelper.removeAll();\n\n  destroyObject(this);\n};\n\nexport default SceneModePickerViewModel;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Widgets/SceneModePicker/SceneModePickerViewModel.js"],"names":["defaultValue","defined","destroyObject","DeveloperError","EventHelper","SceneMode","knockout","createCommand","SceneModePickerViewModel","scene","duration","_scene","that","morphStart","transitioner","oldMode","newMode","isMorphing","sceneMode","dropDownVisible","_eventHelper","add","_duration","mode","tooltip2D","tooltip3D","tooltipColumbusView","track","selectedTooltip","undefined","defineProperty","SCENE2D","SCENE3D","_toggleDropDown","_morphTo2D","morphTo2D","_morphTo3D","morphTo3D","_morphToColumbusView","morphToColumbusView","_sceneMode","Object","defineProperties","prototype","get","set","value","toggleDropDown","isDestroyed","destroy","removeAll"],"mappings":"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","sourcesContent":["import defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport destroyObject from \"../../Core/destroyObject.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport EventHelper from \"../../Core/EventHelper.js\";\nimport SceneMode from \"../../Scene/SceneMode.js\";\nimport knockout from \"../../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\n\n/**\n * The view model for {@link SceneModePicker}.\n * @alias SceneModePickerViewModel\n * @constructor\n *\n * @param {Scene} scene The Scene to morph\n * @param {Number} [duration=2.0] The duration of scene morph animations, in seconds\n */\nfunction SceneModePickerViewModel(scene, duration) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._scene = scene;\n\n  var that = this;\n\n  var morphStart = function (transitioner, oldMode, newMode, isMorphing) {\n    that.sceneMode = newMode;\n    that.dropDownVisible = false;\n  };\n\n  this._eventHelper = new EventHelper();\n  this._eventHelper.add(scene.morphStart, morphStart);\n\n  this._duration = defaultValue(duration, 2.0);\n\n  /**\n   * Gets or sets the current SceneMode.  This property is observable.\n   * @type {SceneMode}\n   */\n  this.sceneMode = scene.mode;\n\n  /**\n   * Gets or sets whether the button drop-down is currently visible.  This property is observable.\n   * @type {Boolean}\n   * @default false\n   */\n  this.dropDownVisible = false;\n\n  /**\n   * Gets or sets the 2D tooltip.  This property is observable.\n   * @type {String}\n   * @default '2D'\n   */\n  this.tooltip2D = \"2D\";\n\n  /**\n   * Gets or sets the 3D tooltip.  This property is observable.\n   * @type {String}\n   * @default '3D'\n   */\n  this.tooltip3D = \"3D\";\n\n  /**\n   * Gets or sets the Columbus View tooltip.  This property is observable.\n   * @type {String}\n   * @default 'Columbus View'\n   */\n  this.tooltipColumbusView = \"Columbus View\";\n\n  knockout.track(this, [\n    \"sceneMode\",\n    \"dropDownVisible\",\n    \"tooltip2D\",\n    \"tooltip3D\",\n    \"tooltipColumbusView\",\n  ]);\n\n  /**\n   * Gets the currently active tooltip.  This property is observable.\n   * @type {String}\n   */\n  this.selectedTooltip = undefined;\n  knockout.defineProperty(this, \"selectedTooltip\", function () {\n    var mode = that.sceneMode;\n    if (mode === SceneMode.SCENE2D) {\n      return that.tooltip2D;\n    }\n    if (mode === SceneMode.SCENE3D) {\n      return that.tooltip3D;\n    }\n    return that.tooltipColumbusView;\n  });\n\n  this._toggleDropDown = createCommand(function () {\n    that.dropDownVisible = !that.dropDownVisible;\n  });\n\n  this._morphTo2D = createCommand(function () {\n    scene.morphTo2D(that._duration);\n  });\n\n  this._morphTo3D = createCommand(function () {\n    scene.morphTo3D(that._duration);\n  });\n\n  this._morphToColumbusView = createCommand(function () {\n    scene.morphToColumbusView(that._duration);\n  });\n\n  //Used by knockout\n  this._sceneMode = SceneMode;\n}\n\nObject.defineProperties(SceneModePickerViewModel.prototype, {\n  /**\n   * Gets the scene\n   * @memberof SceneModePickerViewModel.prototype\n   * @type {Scene}\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    },\n  },\n\n  /**\n   * Gets or sets the the duration of scene mode transition animations in seconds.\n   * A value of zero causes the scene to instantly change modes.\n   * @memberof SceneModePickerViewModel.prototype\n   * @type {Number}\n   */\n  duration: {\n    get: function () {\n      return this._duration;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (value < 0.0) {\n        throw new DeveloperError(\"duration value must be positive.\");\n      }\n      //>>includeEnd('debug');\n\n      this._duration = value;\n    },\n  },\n\n  /**\n   * Gets the command to toggle the drop down box.\n   * @memberof SceneModePickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  toggleDropDown: {\n    get: function () {\n      return this._toggleDropDown;\n    },\n  },\n\n  /**\n   * Gets the command to morph to 2D.\n   * @memberof SceneModePickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  morphTo2D: {\n    get: function () {\n      return this._morphTo2D;\n    },\n  },\n\n  /**\n   * Gets the command to morph to 3D.\n   * @memberof SceneModePickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  morphTo3D: {\n    get: function () {\n      return this._morphTo3D;\n    },\n  },\n\n  /**\n   * Gets the command to morph to Columbus View.\n   * @memberof SceneModePickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  morphToColumbusView: {\n    get: function () {\n      return this._morphToColumbusView;\n    },\n  },\n});\n\n/**\n * @returns {Boolean} true if the object has been destroyed, false otherwise.\n */\nSceneModePickerViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the view model.\n */\nSceneModePickerViewModel.prototype.destroy = function () {\n  this._eventHelper.removeAll();\n\n  destroyObject(this);\n};\nexport default SceneModePickerViewModel;\n"]},"metadata":{},"sourceType":"module"}