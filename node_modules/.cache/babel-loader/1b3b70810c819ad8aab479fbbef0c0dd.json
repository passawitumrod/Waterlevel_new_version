{"ast":null,"code":"import Check from \"./Check.js\";\nimport defined from \"./defined.js\";\n/**\n * A generic utility class for managing subscribers for a particular event.\n * This class is usually instantiated inside of a container class and\n * exposed as a property for others to subscribe to.\n *\n * @alias Event\n * @constructor\n * @example\n * MyObject.prototype.myListener = function(arg1, arg2) {\n *     this.myArg1Copy = arg1;\n *     this.myArg2Copy = arg2;\n * }\n *\n * var myObjectInstance = new MyObject();\n * var evt = new Cesium.Event();\n * evt.addEventListener(MyObject.prototype.myListener, myObjectInstance);\n * evt.raiseEvent('1', '2');\n * evt.removeEventListener(MyObject.prototype.myListener);\n */\n\nfunction Event() {\n  this._listeners = [];\n  this._scopes = [];\n  this._toRemove = [];\n  this._insideRaiseEvent = false;\n}\n\nObject.defineProperties(Event.prototype, {\n  /**\n   * The number of listeners currently subscribed to the event.\n   * @memberof Event.prototype\n   * @type {Number}\n   * @readonly\n   */\n  numberOfListeners: {\n    get: function get() {\n      return this._listeners.length - this._toRemove.length;\n    }\n  }\n});\n/**\n * Registers a callback function to be executed whenever the event is raised.\n * An optional scope can be provided to serve as the <code>this</code> pointer\n * in which the function will execute.\n *\n * @param {Function} listener The function to be executed when the event is raised.\n * @param {Object} [scope] An optional object scope to serve as the <code>this</code>\n *        pointer in which the listener function will execute.\n * @returns {Event~RemoveCallback} A function that will remove this event listener when invoked.\n *\n * @see Event#raiseEvent\n * @see Event#removeEventListener\n */\n\nEvent.prototype.addEventListener = function (listener, scope) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.func(\"listener\", listener); //>>includeEnd('debug');\n\n  this._listeners.push(listener);\n\n  this._scopes.push(scope);\n\n  var event = this;\n  return function () {\n    event.removeEventListener(listener, scope);\n  };\n};\n/**\n * Unregisters a previously registered callback.\n *\n * @param {Function} listener The function to be unregistered.\n * @param {Object} [scope] The scope that was originally passed to addEventListener.\n * @returns {Boolean} <code>true</code> if the listener was removed; <code>false</code> if the listener and scope are not registered with the event.\n *\n * @see Event#addEventListener\n * @see Event#raiseEvent\n */\n\n\nEvent.prototype.removeEventListener = function (listener, scope) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.func(\"listener\", listener); //>>includeEnd('debug');\n\n  var listeners = this._listeners;\n  var scopes = this._scopes;\n  var index = -1;\n\n  for (var i = 0; i < listeners.length; i++) {\n    if (listeners[i] === listener && scopes[i] === scope) {\n      index = i;\n      break;\n    }\n  }\n\n  if (index !== -1) {\n    if (this._insideRaiseEvent) {\n      //In order to allow removing an event subscription from within\n      //a callback, we don't actually remove the items here.  Instead\n      //remember the index they are at and undefined their value.\n      this._toRemove.push(index);\n\n      listeners[index] = undefined;\n      scopes[index] = undefined;\n    } else {\n      listeners.splice(index, 1);\n      scopes.splice(index, 1);\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nfunction compareNumber(a, b) {\n  return b - a;\n}\n/**\n * Raises the event by calling each registered listener with all supplied arguments.\n *\n * @param {*} arguments This method takes any number of parameters and passes them through to the listener functions.\n *\n * @see Event#addEventListener\n * @see Event#removeEventListener\n */\n\n\nEvent.prototype.raiseEvent = function () {\n  this._insideRaiseEvent = true;\n  var i;\n  var listeners = this._listeners;\n  var scopes = this._scopes;\n  var length = listeners.length;\n\n  for (i = 0; i < length; i++) {\n    var listener = listeners[i];\n\n    if (defined(listener)) {\n      listeners[i].apply(scopes[i], arguments);\n    }\n  } //Actually remove items removed in removeEventListener.\n\n\n  var toRemove = this._toRemove;\n  length = toRemove.length;\n\n  if (length > 0) {\n    toRemove.sort(compareNumber);\n\n    for (i = 0; i < length; i++) {\n      var index = toRemove[i];\n      listeners.splice(index, 1);\n      scopes.splice(index, 1);\n    }\n\n    toRemove.length = 0;\n  }\n\n  this._insideRaiseEvent = false;\n};\n/**\n * A function that removes a listener.\n * @callback Event~RemoveCallback\n */\n\n\nexport default Event;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/Event.js"],"names":["Check","defined","Event","_listeners","_scopes","_toRemove","_insideRaiseEvent","Object","defineProperties","prototype","numberOfListeners","get","length","addEventListener","listener","scope","typeOf","func","push","event","removeEventListener","listeners","scopes","index","i","undefined","splice","compareNumber","a","b","raiseEvent","apply","arguments","toRemove","sort"],"mappings":"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","sourcesContent":["import Check from \"./Check.js\";\nimport defined from \"./defined.js\";\n\n/**\n * A generic utility class for managing subscribers for a particular event.\n * This class is usually instantiated inside of a container class and\n * exposed as a property for others to subscribe to.\n *\n * @alias Event\n * @constructor\n * @example\n * MyObject.prototype.myListener = function(arg1, arg2) {\n *     this.myArg1Copy = arg1;\n *     this.myArg2Copy = arg2;\n * }\n *\n * var myObjectInstance = new MyObject();\n * var evt = new Cesium.Event();\n * evt.addEventListener(MyObject.prototype.myListener, myObjectInstance);\n * evt.raiseEvent('1', '2');\n * evt.removeEventListener(MyObject.prototype.myListener);\n */\nfunction Event() {\n  this._listeners = [];\n  this._scopes = [];\n  this._toRemove = [];\n  this._insideRaiseEvent = false;\n}\n\nObject.defineProperties(Event.prototype, {\n  /**\n   * The number of listeners currently subscribed to the event.\n   * @memberof Event.prototype\n   * @type {Number}\n   * @readonly\n   */\n  numberOfListeners: {\n    get: function () {\n      return this._listeners.length - this._toRemove.length;\n    },\n  },\n});\n\n/**\n * Registers a callback function to be executed whenever the event is raised.\n * An optional scope can be provided to serve as the <code>this</code> pointer\n * in which the function will execute.\n *\n * @param {Function} listener The function to be executed when the event is raised.\n * @param {Object} [scope] An optional object scope to serve as the <code>this</code>\n *        pointer in which the listener function will execute.\n * @returns {Event~RemoveCallback} A function that will remove this event listener when invoked.\n *\n * @see Event#raiseEvent\n * @see Event#removeEventListener\n */\nEvent.prototype.addEventListener = function (listener, scope) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.func(\"listener\", listener);\n  //>>includeEnd('debug');\n\n  this._listeners.push(listener);\n  this._scopes.push(scope);\n\n  var event = this;\n  return function () {\n    event.removeEventListener(listener, scope);\n  };\n};\n\n/**\n * Unregisters a previously registered callback.\n *\n * @param {Function} listener The function to be unregistered.\n * @param {Object} [scope] The scope that was originally passed to addEventListener.\n * @returns {Boolean} <code>true</code> if the listener was removed; <code>false</code> if the listener and scope are not registered with the event.\n *\n * @see Event#addEventListener\n * @see Event#raiseEvent\n */\nEvent.prototype.removeEventListener = function (listener, scope) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.func(\"listener\", listener);\n  //>>includeEnd('debug');\n\n  var listeners = this._listeners;\n  var scopes = this._scopes;\n\n  var index = -1;\n  for (var i = 0; i < listeners.length; i++) {\n    if (listeners[i] === listener && scopes[i] === scope) {\n      index = i;\n      break;\n    }\n  }\n\n  if (index !== -1) {\n    if (this._insideRaiseEvent) {\n      //In order to allow removing an event subscription from within\n      //a callback, we don't actually remove the items here.  Instead\n      //remember the index they are at and undefined their value.\n      this._toRemove.push(index);\n      listeners[index] = undefined;\n      scopes[index] = undefined;\n    } else {\n      listeners.splice(index, 1);\n      scopes.splice(index, 1);\n    }\n    return true;\n  }\n\n  return false;\n};\n\nfunction compareNumber(a, b) {\n  return b - a;\n}\n\n/**\n * Raises the event by calling each registered listener with all supplied arguments.\n *\n * @param {*} arguments This method takes any number of parameters and passes them through to the listener functions.\n *\n * @see Event#addEventListener\n * @see Event#removeEventListener\n */\nEvent.prototype.raiseEvent = function () {\n  this._insideRaiseEvent = true;\n\n  var i;\n  var listeners = this._listeners;\n  var scopes = this._scopes;\n  var length = listeners.length;\n\n  for (i = 0; i < length; i++) {\n    var listener = listeners[i];\n    if (defined(listener)) {\n      listeners[i].apply(scopes[i], arguments);\n    }\n  }\n\n  //Actually remove items removed in removeEventListener.\n  var toRemove = this._toRemove;\n  length = toRemove.length;\n  if (length > 0) {\n    toRemove.sort(compareNumber);\n    for (i = 0; i < length; i++) {\n      var index = toRemove[i];\n      listeners.splice(index, 1);\n      scopes.splice(index, 1);\n    }\n    toRemove.length = 0;\n  }\n\n  this._insideRaiseEvent = false;\n};\n\n/**\n * A function that removes a listener.\n * @callback Event~RemoveCallback\n */\nexport default Event;\n"]},"metadata":{},"sourceType":"module"}