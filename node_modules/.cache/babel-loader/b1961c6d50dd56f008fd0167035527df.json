{"ast":null,"code":"import AssociativeArray from \"./AssociativeArray.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport destroyObject from \"./destroyObject.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport FeatureDetection from \"./FeatureDetection.js\";\nimport getTimestamp from \"./getTimestamp.js\";\nimport KeyboardEventModifier from \"./KeyboardEventModifier.js\";\nimport ScreenSpaceEventType from \"./ScreenSpaceEventType.js\";\n\nfunction getPosition(screenSpaceEventHandler, event, result) {\n  var element = screenSpaceEventHandler._element;\n\n  if (element === document) {\n    result.x = event.clientX;\n    result.y = event.clientY;\n    return result;\n  }\n\n  var rect = element.getBoundingClientRect();\n  result.x = event.clientX - rect.left;\n  result.y = event.clientY - rect.top;\n  return result;\n}\n\nfunction getInputEventKey(type, modifier) {\n  var key = type;\n\n  if (defined(modifier)) {\n    key += \"+\" + modifier;\n  }\n\n  return key;\n}\n\nfunction getModifier(event) {\n  if (event.shiftKey) {\n    return KeyboardEventModifier.SHIFT;\n  } else if (event.ctrlKey) {\n    return KeyboardEventModifier.CTRL;\n  } else if (event.altKey) {\n    return KeyboardEventModifier.ALT;\n  }\n\n  return undefined;\n}\n\nvar MouseButton = {\n  LEFT: 0,\n  MIDDLE: 1,\n  RIGHT: 2\n};\n\nfunction registerListener(screenSpaceEventHandler, domType, element, callback) {\n  function listener(e) {\n    callback(screenSpaceEventHandler, e);\n  }\n\n  if (FeatureDetection.isInternetExplorer()) {\n    element.addEventListener(domType, listener, false);\n  } else {\n    element.addEventListener(domType, listener, {\n      capture: false,\n      passive: false\n    });\n  }\n\n  screenSpaceEventHandler._removalFunctions.push(function () {\n    element.removeEventListener(domType, listener, false);\n  });\n}\n\nfunction registerListeners(screenSpaceEventHandler) {\n  var element = screenSpaceEventHandler._element; // some listeners may be registered on the document, so we still get events even after\n  // leaving the bounds of element.\n  // this is affected by the existence of an undocumented disableRootEvents property on element.\n\n  var alternateElement = !defined(element.disableRootEvents) ? document : element;\n\n  if (FeatureDetection.supportsPointerEvents()) {\n    registerListener(screenSpaceEventHandler, \"pointerdown\", element, handlePointerDown);\n    registerListener(screenSpaceEventHandler, \"pointerup\", element, handlePointerUp);\n    registerListener(screenSpaceEventHandler, \"pointermove\", element, handlePointerMove);\n    registerListener(screenSpaceEventHandler, \"pointercancel\", element, handlePointerUp);\n  } else {\n    registerListener(screenSpaceEventHandler, \"mousedown\", element, handleMouseDown);\n    registerListener(screenSpaceEventHandler, \"mouseup\", alternateElement, handleMouseUp);\n    registerListener(screenSpaceEventHandler, \"mousemove\", alternateElement, handleMouseMove);\n    registerListener(screenSpaceEventHandler, \"touchstart\", element, handleTouchStart);\n    registerListener(screenSpaceEventHandler, \"touchend\", alternateElement, handleTouchEnd);\n    registerListener(screenSpaceEventHandler, \"touchmove\", alternateElement, handleTouchMove);\n    registerListener(screenSpaceEventHandler, \"touchcancel\", alternateElement, handleTouchEnd);\n  }\n\n  registerListener(screenSpaceEventHandler, \"dblclick\", element, handleDblClick); // detect available wheel event\n\n  var wheelEvent;\n\n  if (\"onwheel\" in element) {\n    // spec event type\n    wheelEvent = \"wheel\";\n  } else if (document.onmousewheel !== undefined) {\n    // legacy event type\n    wheelEvent = \"mousewheel\";\n  } else {\n    // older Firefox\n    wheelEvent = \"DOMMouseScroll\";\n  }\n\n  registerListener(screenSpaceEventHandler, wheelEvent, element, handleWheel);\n}\n\nfunction unregisterListeners(screenSpaceEventHandler) {\n  var removalFunctions = screenSpaceEventHandler._removalFunctions;\n\n  for (var i = 0; i < removalFunctions.length; ++i) {\n    removalFunctions[i]();\n  }\n}\n\nvar mouseDownEvent = {\n  position: new Cartesian2()\n};\n\nfunction gotTouchEvent(screenSpaceEventHandler) {\n  screenSpaceEventHandler._lastSeenTouchEvent = getTimestamp();\n}\n\nfunction canProcessMouseEvent(screenSpaceEventHandler) {\n  return getTimestamp() - screenSpaceEventHandler._lastSeenTouchEvent > ScreenSpaceEventHandler.mouseEmulationIgnoreMilliseconds;\n}\n\nfunction checkPixelTolerance(startPosition, endPosition, pixelTolerance) {\n  var xDiff = startPosition.x - endPosition.x;\n  var yDiff = startPosition.y - endPosition.y;\n  var totalPixels = Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n  return totalPixels < pixelTolerance;\n}\n\nfunction handleMouseDown(screenSpaceEventHandler, event) {\n  if (!canProcessMouseEvent(screenSpaceEventHandler)) {\n    return;\n  }\n\n  var button = event.button;\n  screenSpaceEventHandler._buttonDown[button] = true;\n  var screenSpaceEventType;\n\n  if (button === MouseButton.LEFT) {\n    screenSpaceEventType = ScreenSpaceEventType.LEFT_DOWN;\n  } else if (button === MouseButton.MIDDLE) {\n    screenSpaceEventType = ScreenSpaceEventType.MIDDLE_DOWN;\n  } else if (button === MouseButton.RIGHT) {\n    screenSpaceEventType = ScreenSpaceEventType.RIGHT_DOWN;\n  } else {\n    return;\n  }\n\n  var position = getPosition(screenSpaceEventHandler, event, screenSpaceEventHandler._primaryPosition);\n  Cartesian2.clone(position, screenSpaceEventHandler._primaryStartPosition);\n  Cartesian2.clone(position, screenSpaceEventHandler._primaryPreviousPosition);\n  var modifier = getModifier(event);\n  var action = screenSpaceEventHandler.getInputAction(screenSpaceEventType, modifier);\n\n  if (defined(action)) {\n    Cartesian2.clone(position, mouseDownEvent.position);\n    action(mouseDownEvent);\n    event.preventDefault();\n  }\n}\n\nvar mouseUpEvent = {\n  position: new Cartesian2()\n};\nvar mouseClickEvent = {\n  position: new Cartesian2()\n};\n\nfunction cancelMouseEvent(screenSpaceEventHandler, screenSpaceEventType, clickScreenSpaceEventType, event) {\n  var modifier = getModifier(event);\n  var action = screenSpaceEventHandler.getInputAction(screenSpaceEventType, modifier);\n  var clickAction = screenSpaceEventHandler.getInputAction(clickScreenSpaceEventType, modifier);\n\n  if (defined(action) || defined(clickAction)) {\n    var position = getPosition(screenSpaceEventHandler, event, screenSpaceEventHandler._primaryPosition);\n\n    if (defined(action)) {\n      Cartesian2.clone(position, mouseUpEvent.position);\n      action(mouseUpEvent);\n    }\n\n    if (defined(clickAction)) {\n      var startPosition = screenSpaceEventHandler._primaryStartPosition;\n\n      if (checkPixelTolerance(startPosition, position, screenSpaceEventHandler._clickPixelTolerance)) {\n        Cartesian2.clone(position, mouseClickEvent.position);\n        clickAction(mouseClickEvent);\n      }\n    }\n  }\n}\n\nfunction handleMouseUp(screenSpaceEventHandler, event) {\n  if (!canProcessMouseEvent(screenSpaceEventHandler)) {\n    return;\n  }\n\n  var button = event.button;\n\n  if (button !== MouseButton.LEFT && button !== MouseButton.MIDDLE && button !== MouseButton.RIGHT) {\n    return;\n  }\n\n  if (screenSpaceEventHandler._buttonDown[MouseButton.LEFT]) {\n    cancelMouseEvent(screenSpaceEventHandler, ScreenSpaceEventType.LEFT_UP, ScreenSpaceEventType.LEFT_CLICK, event);\n    screenSpaceEventHandler._buttonDown[MouseButton.LEFT] = false;\n  }\n\n  if (screenSpaceEventHandler._buttonDown[MouseButton.MIDDLE]) {\n    cancelMouseEvent(screenSpaceEventHandler, ScreenSpaceEventType.MIDDLE_UP, ScreenSpaceEventType.MIDDLE_CLICK, event);\n    screenSpaceEventHandler._buttonDown[MouseButton.MIDDLE] = false;\n  }\n\n  if (screenSpaceEventHandler._buttonDown[MouseButton.RIGHT]) {\n    cancelMouseEvent(screenSpaceEventHandler, ScreenSpaceEventType.RIGHT_UP, ScreenSpaceEventType.RIGHT_CLICK, event);\n    screenSpaceEventHandler._buttonDown[MouseButton.RIGHT] = false;\n  }\n}\n\nvar mouseMoveEvent = {\n  startPosition: new Cartesian2(),\n  endPosition: new Cartesian2()\n};\n\nfunction handleMouseMove(screenSpaceEventHandler, event) {\n  if (!canProcessMouseEvent(screenSpaceEventHandler)) {\n    return;\n  }\n\n  var modifier = getModifier(event);\n  var position = getPosition(screenSpaceEventHandler, event, screenSpaceEventHandler._primaryPosition);\n  var previousPosition = screenSpaceEventHandler._primaryPreviousPosition;\n  var action = screenSpaceEventHandler.getInputAction(ScreenSpaceEventType.MOUSE_MOVE, modifier);\n\n  if (defined(action)) {\n    Cartesian2.clone(previousPosition, mouseMoveEvent.startPosition);\n    Cartesian2.clone(position, mouseMoveEvent.endPosition);\n    action(mouseMoveEvent);\n  }\n\n  Cartesian2.clone(position, previousPosition);\n\n  if (screenSpaceEventHandler._buttonDown[MouseButton.LEFT] || screenSpaceEventHandler._buttonDown[MouseButton.MIDDLE] || screenSpaceEventHandler._buttonDown[MouseButton.RIGHT]) {\n    event.preventDefault();\n  }\n}\n\nvar mouseDblClickEvent = {\n  position: new Cartesian2()\n};\n\nfunction handleDblClick(screenSpaceEventHandler, event) {\n  var button = event.button;\n  var screenSpaceEventType;\n\n  if (button === MouseButton.LEFT) {\n    screenSpaceEventType = ScreenSpaceEventType.LEFT_DOUBLE_CLICK;\n  } else {\n    return;\n  }\n\n  var modifier = getModifier(event);\n  var action = screenSpaceEventHandler.getInputAction(screenSpaceEventType, modifier);\n\n  if (defined(action)) {\n    getPosition(screenSpaceEventHandler, event, mouseDblClickEvent.position);\n    action(mouseDblClickEvent);\n  }\n}\n\nfunction handleWheel(screenSpaceEventHandler, event) {\n  // currently this event exposes the delta value in terms of\n  // the obsolete mousewheel event type.  so, for now, we adapt the other\n  // values to that scheme.\n  var delta; // standard wheel event uses deltaY.  sign is opposite wheelDelta.\n  // deltaMode indicates what unit it is in.\n\n  if (defined(event.deltaY)) {\n    var deltaMode = event.deltaMode;\n\n    if (deltaMode === event.DOM_DELTA_PIXEL) {\n      delta = -event.deltaY;\n    } else if (deltaMode === event.DOM_DELTA_LINE) {\n      delta = -event.deltaY * 40;\n    } else {\n      // DOM_DELTA_PAGE\n      delta = -event.deltaY * 120;\n    }\n  } else if (event.detail > 0) {\n    // old Firefox versions use event.detail to count the number of clicks. The sign\n    // of the integer is the direction the wheel is scrolled.\n    delta = event.detail * -120;\n  } else {\n    delta = event.wheelDelta;\n  }\n\n  if (!defined(delta)) {\n    return;\n  }\n\n  var modifier = getModifier(event);\n  var action = screenSpaceEventHandler.getInputAction(ScreenSpaceEventType.WHEEL, modifier);\n\n  if (defined(action)) {\n    action(delta);\n    event.preventDefault();\n  }\n}\n\nfunction handleTouchStart(screenSpaceEventHandler, event) {\n  gotTouchEvent(screenSpaceEventHandler);\n  var changedTouches = event.changedTouches;\n  var i;\n  var length = changedTouches.length;\n  var touch;\n  var identifier;\n  var positions = screenSpaceEventHandler._positions;\n\n  for (i = 0; i < length; ++i) {\n    touch = changedTouches[i];\n    identifier = touch.identifier;\n    positions.set(identifier, getPosition(screenSpaceEventHandler, touch, new Cartesian2()));\n  }\n\n  fireTouchEvents(screenSpaceEventHandler, event);\n  var previousPositions = screenSpaceEventHandler._previousPositions;\n\n  for (i = 0; i < length; ++i) {\n    touch = changedTouches[i];\n    identifier = touch.identifier;\n    previousPositions.set(identifier, Cartesian2.clone(positions.get(identifier)));\n  }\n}\n\nfunction handleTouchEnd(screenSpaceEventHandler, event) {\n  gotTouchEvent(screenSpaceEventHandler);\n  var changedTouches = event.changedTouches;\n  var i;\n  var length = changedTouches.length;\n  var touch;\n  var identifier;\n  var positions = screenSpaceEventHandler._positions;\n\n  for (i = 0; i < length; ++i) {\n    touch = changedTouches[i];\n    identifier = touch.identifier;\n    positions.remove(identifier);\n  }\n\n  fireTouchEvents(screenSpaceEventHandler, event);\n  var previousPositions = screenSpaceEventHandler._previousPositions;\n\n  for (i = 0; i < length; ++i) {\n    touch = changedTouches[i];\n    identifier = touch.identifier;\n    previousPositions.remove(identifier);\n  }\n}\n\nvar touchStartEvent = {\n  position: new Cartesian2()\n};\nvar touch2StartEvent = {\n  position1: new Cartesian2(),\n  position2: new Cartesian2()\n};\nvar touchEndEvent = {\n  position: new Cartesian2()\n};\nvar touchClickEvent = {\n  position: new Cartesian2()\n};\nvar touchHoldEvent = {\n  position: new Cartesian2()\n};\n\nfunction fireTouchEvents(screenSpaceEventHandler, event) {\n  var modifier = getModifier(event);\n  var positions = screenSpaceEventHandler._positions;\n  var numberOfTouches = positions.length;\n  var action;\n  var clickAction;\n  var pinching = screenSpaceEventHandler._isPinching;\n\n  if (numberOfTouches !== 1 && screenSpaceEventHandler._buttonDown[MouseButton.LEFT]) {\n    // transitioning from single touch, trigger UP and might trigger CLICK\n    screenSpaceEventHandler._buttonDown[MouseButton.LEFT] = false;\n\n    if (defined(screenSpaceEventHandler._touchHoldTimer)) {\n      clearTimeout(screenSpaceEventHandler._touchHoldTimer);\n      screenSpaceEventHandler._touchHoldTimer = undefined;\n    }\n\n    action = screenSpaceEventHandler.getInputAction(ScreenSpaceEventType.LEFT_UP, modifier);\n\n    if (defined(action)) {\n      Cartesian2.clone(screenSpaceEventHandler._primaryPosition, touchEndEvent.position);\n      action(touchEndEvent);\n    }\n\n    if (numberOfTouches === 0 && !screenSpaceEventHandler._isTouchHolding) {\n      // releasing single touch, check for CLICK\n      clickAction = screenSpaceEventHandler.getInputAction(ScreenSpaceEventType.LEFT_CLICK, modifier);\n\n      if (defined(clickAction)) {\n        var startPosition = screenSpaceEventHandler._primaryStartPosition;\n        var endPosition = screenSpaceEventHandler._previousPositions.values[0];\n\n        if (checkPixelTolerance(startPosition, endPosition, screenSpaceEventHandler._clickPixelTolerance)) {\n          Cartesian2.clone(screenSpaceEventHandler._primaryPosition, touchClickEvent.position);\n          clickAction(touchClickEvent);\n        }\n      }\n    }\n\n    screenSpaceEventHandler._isTouchHolding = false; // Otherwise don't trigger CLICK, because we are adding more touches.\n  }\n\n  if (numberOfTouches === 0 && pinching) {\n    // transitioning from pinch, trigger PINCH_END\n    screenSpaceEventHandler._isPinching = false;\n    action = screenSpaceEventHandler.getInputAction(ScreenSpaceEventType.PINCH_END, modifier);\n\n    if (defined(action)) {\n      action();\n    }\n  }\n\n  if (numberOfTouches === 1 && !pinching) {\n    // transitioning to single touch, trigger DOWN\n    var position = positions.values[0];\n    Cartesian2.clone(position, screenSpaceEventHandler._primaryPosition);\n    Cartesian2.clone(position, screenSpaceEventHandler._primaryStartPosition);\n    Cartesian2.clone(position, screenSpaceEventHandler._primaryPreviousPosition);\n    screenSpaceEventHandler._buttonDown[MouseButton.LEFT] = true;\n    action = screenSpaceEventHandler.getInputAction(ScreenSpaceEventType.LEFT_DOWN, modifier);\n\n    if (defined(action)) {\n      Cartesian2.clone(position, touchStartEvent.position);\n      action(touchStartEvent);\n    }\n\n    screenSpaceEventHandler._touchHoldTimer = setTimeout(function () {\n      if (!screenSpaceEventHandler.isDestroyed()) {\n        screenSpaceEventHandler._touchHoldTimer = undefined;\n        screenSpaceEventHandler._isTouchHolding = true;\n        clickAction = screenSpaceEventHandler.getInputAction(ScreenSpaceEventType.RIGHT_CLICK, modifier);\n\n        if (defined(clickAction)) {\n          var startPosition = screenSpaceEventHandler._primaryStartPosition;\n          var endPosition = screenSpaceEventHandler._previousPositions.values[0];\n\n          if (checkPixelTolerance(startPosition, endPosition, screenSpaceEventHandler._holdPixelTolerance)) {\n            Cartesian2.clone(screenSpaceEventHandler._primaryPosition, touchHoldEvent.position);\n            clickAction(touchHoldEvent);\n          }\n        }\n      }\n    }, ScreenSpaceEventHandler.touchHoldDelayMilliseconds);\n    event.preventDefault();\n  }\n\n  if (numberOfTouches === 2 && !pinching) {\n    // transitioning to pinch, trigger PINCH_START\n    screenSpaceEventHandler._isPinching = true;\n    action = screenSpaceEventHandler.getInputAction(ScreenSpaceEventType.PINCH_START, modifier);\n\n    if (defined(action)) {\n      Cartesian2.clone(positions.values[0], touch2StartEvent.position1);\n      Cartesian2.clone(positions.values[1], touch2StartEvent.position2);\n      action(touch2StartEvent); // Touch-enabled devices, in particular iOS can have many default behaviours for\n      // \"pinch\" events, which can still be executed unless we prevent them here.\n\n      event.preventDefault();\n    }\n  }\n}\n\nfunction handleTouchMove(screenSpaceEventHandler, event) {\n  gotTouchEvent(screenSpaceEventHandler);\n  var changedTouches = event.changedTouches;\n  var i;\n  var length = changedTouches.length;\n  var touch;\n  var identifier;\n  var positions = screenSpaceEventHandler._positions;\n\n  for (i = 0; i < length; ++i) {\n    touch = changedTouches[i];\n    identifier = touch.identifier;\n    var position = positions.get(identifier);\n\n    if (defined(position)) {\n      getPosition(screenSpaceEventHandler, touch, position);\n    }\n  }\n\n  fireTouchMoveEvents(screenSpaceEventHandler, event);\n  var previousPositions = screenSpaceEventHandler._previousPositions;\n\n  for (i = 0; i < length; ++i) {\n    touch = changedTouches[i];\n    identifier = touch.identifier;\n    Cartesian2.clone(positions.get(identifier), previousPositions.get(identifier));\n  }\n}\n\nvar touchMoveEvent = {\n  startPosition: new Cartesian2(),\n  endPosition: new Cartesian2()\n};\nvar touchPinchMovementEvent = {\n  distance: {\n    startPosition: new Cartesian2(),\n    endPosition: new Cartesian2()\n  },\n  angleAndHeight: {\n    startPosition: new Cartesian2(),\n    endPosition: new Cartesian2()\n  }\n};\n\nfunction fireTouchMoveEvents(screenSpaceEventHandler, event) {\n  var modifier = getModifier(event);\n  var positions = screenSpaceEventHandler._positions;\n  var previousPositions = screenSpaceEventHandler._previousPositions;\n  var numberOfTouches = positions.length;\n  var action;\n\n  if (numberOfTouches === 1 && screenSpaceEventHandler._buttonDown[MouseButton.LEFT]) {\n    // moving single touch\n    var position = positions.values[0];\n    Cartesian2.clone(position, screenSpaceEventHandler._primaryPosition);\n    var previousPosition = screenSpaceEventHandler._primaryPreviousPosition;\n    action = screenSpaceEventHandler.getInputAction(ScreenSpaceEventType.MOUSE_MOVE, modifier);\n\n    if (defined(action)) {\n      Cartesian2.clone(previousPosition, touchMoveEvent.startPosition);\n      Cartesian2.clone(position, touchMoveEvent.endPosition);\n      action(touchMoveEvent);\n    }\n\n    Cartesian2.clone(position, previousPosition);\n    event.preventDefault();\n  } else if (numberOfTouches === 2 && screenSpaceEventHandler._isPinching) {\n    // moving pinch\n    action = screenSpaceEventHandler.getInputAction(ScreenSpaceEventType.PINCH_MOVE, modifier);\n\n    if (defined(action)) {\n      var position1 = positions.values[0];\n      var position2 = positions.values[1];\n      var previousPosition1 = previousPositions.values[0];\n      var previousPosition2 = previousPositions.values[1];\n      var dX = position2.x - position1.x;\n      var dY = position2.y - position1.y;\n      var dist = Math.sqrt(dX * dX + dY * dY) * 0.25;\n      var prevDX = previousPosition2.x - previousPosition1.x;\n      var prevDY = previousPosition2.y - previousPosition1.y;\n      var prevDist = Math.sqrt(prevDX * prevDX + prevDY * prevDY) * 0.25;\n      var cY = (position2.y + position1.y) * 0.125;\n      var prevCY = (previousPosition2.y + previousPosition1.y) * 0.125;\n      var angle = Math.atan2(dY, dX);\n      var prevAngle = Math.atan2(prevDY, prevDX);\n      Cartesian2.fromElements(0.0, prevDist, touchPinchMovementEvent.distance.startPosition);\n      Cartesian2.fromElements(0.0, dist, touchPinchMovementEvent.distance.endPosition);\n      Cartesian2.fromElements(prevAngle, prevCY, touchPinchMovementEvent.angleAndHeight.startPosition);\n      Cartesian2.fromElements(angle, cY, touchPinchMovementEvent.angleAndHeight.endPosition);\n      action(touchPinchMovementEvent);\n    }\n  }\n}\n\nfunction handlePointerDown(screenSpaceEventHandler, event) {\n  event.target.setPointerCapture(event.pointerId);\n\n  if (event.pointerType === \"touch\") {\n    var positions = screenSpaceEventHandler._positions;\n    var identifier = event.pointerId;\n    positions.set(identifier, getPosition(screenSpaceEventHandler, event, new Cartesian2()));\n    fireTouchEvents(screenSpaceEventHandler, event);\n    var previousPositions = screenSpaceEventHandler._previousPositions;\n    previousPositions.set(identifier, Cartesian2.clone(positions.get(identifier)));\n  } else {\n    handleMouseDown(screenSpaceEventHandler, event);\n  }\n}\n\nfunction handlePointerUp(screenSpaceEventHandler, event) {\n  if (event.pointerType === \"touch\") {\n    var positions = screenSpaceEventHandler._positions;\n    var identifier = event.pointerId;\n    positions.remove(identifier);\n    fireTouchEvents(screenSpaceEventHandler, event);\n    var previousPositions = screenSpaceEventHandler._previousPositions;\n    previousPositions.remove(identifier);\n  } else {\n    handleMouseUp(screenSpaceEventHandler, event);\n  }\n}\n\nfunction handlePointerMove(screenSpaceEventHandler, event) {\n  if (event.pointerType === \"touch\") {\n    var positions = screenSpaceEventHandler._positions;\n    var identifier = event.pointerId;\n    var position = positions.get(identifier);\n\n    if (!defined(position)) {\n      return;\n    }\n\n    getPosition(screenSpaceEventHandler, event, position);\n    fireTouchMoveEvents(screenSpaceEventHandler, event);\n    var previousPositions = screenSpaceEventHandler._previousPositions;\n    Cartesian2.clone(positions.get(identifier), previousPositions.get(identifier));\n  } else {\n    handleMouseMove(screenSpaceEventHandler, event);\n  }\n}\n/**\n * Handles user input events. Custom functions can be added to be executed on\n * when the user enters input.\n *\n * @alias ScreenSpaceEventHandler\n *\n * @param {Canvas} [element=document] The element to add events to.\n *\n * @constructor\n */\n\n\nfunction ScreenSpaceEventHandler(element) {\n  this._inputEvents = {};\n  this._buttonDown = {\n    LEFT: false,\n    MIDDLE: false,\n    RIGHT: false\n  };\n  this._isPinching = false;\n  this._isTouchHolding = false;\n  this._lastSeenTouchEvent = -ScreenSpaceEventHandler.mouseEmulationIgnoreMilliseconds;\n  this._primaryStartPosition = new Cartesian2();\n  this._primaryPosition = new Cartesian2();\n  this._primaryPreviousPosition = new Cartesian2();\n  this._positions = new AssociativeArray();\n  this._previousPositions = new AssociativeArray();\n  this._removalFunctions = [];\n  this._touchHoldTimer = undefined; // TODO: Revisit when doing mobile development. May need to be configurable\n  // or determined based on the platform?\n\n  this._clickPixelTolerance = 5;\n  this._holdPixelTolerance = 25;\n  this._element = defaultValue(element, document);\n  registerListeners(this);\n}\n/**\n * Set a function to be executed on an input event.\n *\n * @param {Function} action Function to be executed when the input event occurs.\n * @param {Number} type The ScreenSpaceEventType of input event.\n * @param {Number} [modifier] A KeyboardEventModifier key that is held when a <code>type</code>\n * event occurs.\n *\n * @see ScreenSpaceEventHandler#getInputAction\n * @see ScreenSpaceEventHandler#removeInputAction\n */\n\n\nScreenSpaceEventHandler.prototype.setInputAction = function (action, type, modifier) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(action)) {\n    throw new DeveloperError(\"action is required.\");\n  }\n\n  if (!defined(type)) {\n    throw new DeveloperError(\"type is required.\");\n  } //>>includeEnd('debug');\n\n\n  var key = getInputEventKey(type, modifier);\n  this._inputEvents[key] = action;\n};\n/**\n * Returns the function to be executed on an input event.\n *\n * @param {Number} type The ScreenSpaceEventType of input event.\n * @param {Number} [modifier] A KeyboardEventModifier key that is held when a <code>type</code>\n * event occurs.\n *\n * @see ScreenSpaceEventHandler#setInputAction\n * @see ScreenSpaceEventHandler#removeInputAction\n */\n\n\nScreenSpaceEventHandler.prototype.getInputAction = function (type, modifier) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(type)) {\n    throw new DeveloperError(\"type is required.\");\n  } //>>includeEnd('debug');\n\n\n  var key = getInputEventKey(type, modifier);\n  return this._inputEvents[key];\n};\n/**\n * Removes the function to be executed on an input event.\n *\n * @param {Number} type The ScreenSpaceEventType of input event.\n * @param {Number} [modifier] A KeyboardEventModifier key that is held when a <code>type</code>\n * event occurs.\n *\n * @see ScreenSpaceEventHandler#getInputAction\n * @see ScreenSpaceEventHandler#setInputAction\n */\n\n\nScreenSpaceEventHandler.prototype.removeInputAction = function (type, modifier) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(type)) {\n    throw new DeveloperError(\"type is required.\");\n  } //>>includeEnd('debug');\n\n\n  var key = getInputEventKey(type, modifier);\n  delete this._inputEvents[key];\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see ScreenSpaceEventHandler#destroy\n */\n\n\nScreenSpaceEventHandler.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Removes listeners held by this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * handler = handler && handler.destroy();\n *\n * @see ScreenSpaceEventHandler#isDestroyed\n */\n\n\nScreenSpaceEventHandler.prototype.destroy = function () {\n  unregisterListeners(this);\n  return destroyObject(this);\n};\n/**\n * The amount of time, in milliseconds, that mouse events will be disabled after\n * receiving any touch events, such that any emulated mouse events will be ignored.\n * @type {Number}\n * @default 800\n */\n\n\nScreenSpaceEventHandler.mouseEmulationIgnoreMilliseconds = 800;\n/**\n * The amount of time, in milliseconds, before a touch on the screen becomes a\n * touch and hold.\n * @type {Number}\n * @default 1500\n */\n\nScreenSpaceEventHandler.touchHoldDelayMilliseconds = 1500;\nexport default ScreenSpaceEventHandler;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/ScreenSpaceEventHandler.js"],"names":["AssociativeArray","Cartesian2","defaultValue","defined","destroyObject","DeveloperError","FeatureDetection","getTimestamp","KeyboardEventModifier","ScreenSpaceEventType","getPosition","screenSpaceEventHandler","event","result","element","_element","document","x","clientX","y","clientY","rect","getBoundingClientRect","left","top","getInputEventKey","type","modifier","key","getModifier","shiftKey","SHIFT","ctrlKey","CTRL","altKey","ALT","undefined","MouseButton","LEFT","MIDDLE","RIGHT","registerListener","domType","callback","listener","e","isInternetExplorer","addEventListener","capture","passive","_removalFunctions","push","removeEventListener","registerListeners","alternateElement","disableRootEvents","supportsPointerEvents","handlePointerDown","handlePointerUp","handlePointerMove","handleMouseDown","handleMouseUp","handleMouseMove","handleTouchStart","handleTouchEnd","handleTouchMove","handleDblClick","wheelEvent","onmousewheel","handleWheel","unregisterListeners","removalFunctions","i","length","mouseDownEvent","position","gotTouchEvent","_lastSeenTouchEvent","canProcessMouseEvent","ScreenSpaceEventHandler","mouseEmulationIgnoreMilliseconds","checkPixelTolerance","startPosition","endPosition","pixelTolerance","xDiff","yDiff","totalPixels","Math","sqrt","button","_buttonDown","screenSpaceEventType","LEFT_DOWN","MIDDLE_DOWN","RIGHT_DOWN","_primaryPosition","clone","_primaryStartPosition","_primaryPreviousPosition","action","getInputAction","preventDefault","mouseUpEvent","mouseClickEvent","cancelMouseEvent","clickScreenSpaceEventType","clickAction","_clickPixelTolerance","LEFT_UP","LEFT_CLICK","MIDDLE_UP","MIDDLE_CLICK","RIGHT_UP","RIGHT_CLICK","mouseMoveEvent","previousPosition","MOUSE_MOVE","mouseDblClickEvent","LEFT_DOUBLE_CLICK","delta","deltaY","deltaMode","DOM_DELTA_PIXEL","DOM_DELTA_LINE","detail","wheelDelta","WHEEL","changedTouches","touch","identifier","positions","_positions","set","fireTouchEvents","previousPositions","_previousPositions","get","remove","touchStartEvent","touch2StartEvent","position1","position2","touchEndEvent","touchClickEvent","touchHoldEvent","numberOfTouches","pinching","_isPinching","_touchHoldTimer","clearTimeout","_isTouchHolding","values","PINCH_END","setTimeout","isDestroyed","_holdPixelTolerance","touchHoldDelayMilliseconds","PINCH_START","fireTouchMoveEvents","touchMoveEvent","touchPinchMovementEvent","distance","angleAndHeight","PINCH_MOVE","previousPosition1","previousPosition2","dX","dY","dist","prevDX","prevDY","prevDist","cY","prevCY","angle","atan2","prevAngle","fromElements","target","setPointerCapture","pointerId","pointerType","_inputEvents","prototype","setInputAction","removeInputAction","destroy"],"mappings":"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","sourcesContent":["import AssociativeArray from \"./AssociativeArray.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport destroyObject from \"./destroyObject.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport FeatureDetection from \"./FeatureDetection.js\";\nimport getTimestamp from \"./getTimestamp.js\";\nimport KeyboardEventModifier from \"./KeyboardEventModifier.js\";\nimport ScreenSpaceEventType from \"./ScreenSpaceEventType.js\";\n\nfunction getPosition(screenSpaceEventHandler, event, result) {\n  var element = screenSpaceEventHandler._element;\n  if (element === document) {\n    result.x = event.clientX;\n    result.y = event.clientY;\n    return result;\n  }\n\n  var rect = element.getBoundingClientRect();\n  result.x = event.clientX - rect.left;\n  result.y = event.clientY - rect.top;\n  return result;\n}\n\nfunction getInputEventKey(type, modifier) {\n  var key = type;\n  if (defined(modifier)) {\n    key += \"+\" + modifier;\n  }\n  return key;\n}\n\nfunction getModifier(event) {\n  if (event.shiftKey) {\n    return KeyboardEventModifier.SHIFT;\n  } else if (event.ctrlKey) {\n    return KeyboardEventModifier.CTRL;\n  } else if (event.altKey) {\n    return KeyboardEventModifier.ALT;\n  }\n\n  return undefined;\n}\n\nvar MouseButton = {\n  LEFT: 0,\n  MIDDLE: 1,\n  RIGHT: 2,\n};\n\nfunction registerListener(screenSpaceEventHandler, domType, element, callback) {\n  function listener(e) {\n    callback(screenSpaceEventHandler, e);\n  }\n\n  if (FeatureDetection.isInternetExplorer()) {\n    element.addEventListener(domType, listener, false);\n  } else {\n    element.addEventListener(domType, listener, {\n      capture: false,\n      passive: false,\n    });\n  }\n\n  screenSpaceEventHandler._removalFunctions.push(function () {\n    element.removeEventListener(domType, listener, false);\n  });\n}\n\nfunction registerListeners(screenSpaceEventHandler) {\n  var element = screenSpaceEventHandler._element;\n\n  // some listeners may be registered on the document, so we still get events even after\n  // leaving the bounds of element.\n  // this is affected by the existence of an undocumented disableRootEvents property on element.\n  var alternateElement = !defined(element.disableRootEvents)\n    ? document\n    : element;\n\n  if (FeatureDetection.supportsPointerEvents()) {\n    registerListener(\n      screenSpaceEventHandler,\n      \"pointerdown\",\n      element,\n      handlePointerDown\n    );\n    registerListener(\n      screenSpaceEventHandler,\n      \"pointerup\",\n      element,\n      handlePointerUp\n    );\n    registerListener(\n      screenSpaceEventHandler,\n      \"pointermove\",\n      element,\n      handlePointerMove\n    );\n    registerListener(\n      screenSpaceEventHandler,\n      \"pointercancel\",\n      element,\n      handlePointerUp\n    );\n  } else {\n    registerListener(\n      screenSpaceEventHandler,\n      \"mousedown\",\n      element,\n      handleMouseDown\n    );\n    registerListener(\n      screenSpaceEventHandler,\n      \"mouseup\",\n      alternateElement,\n      handleMouseUp\n    );\n    registerListener(\n      screenSpaceEventHandler,\n      \"mousemove\",\n      alternateElement,\n      handleMouseMove\n    );\n    registerListener(\n      screenSpaceEventHandler,\n      \"touchstart\",\n      element,\n      handleTouchStart\n    );\n    registerListener(\n      screenSpaceEventHandler,\n      \"touchend\",\n      alternateElement,\n      handleTouchEnd\n    );\n    registerListener(\n      screenSpaceEventHandler,\n      \"touchmove\",\n      alternateElement,\n      handleTouchMove\n    );\n    registerListener(\n      screenSpaceEventHandler,\n      \"touchcancel\",\n      alternateElement,\n      handleTouchEnd\n    );\n  }\n\n  registerListener(\n    screenSpaceEventHandler,\n    \"dblclick\",\n    element,\n    handleDblClick\n  );\n\n  // detect available wheel event\n  var wheelEvent;\n  if (\"onwheel\" in element) {\n    // spec event type\n    wheelEvent = \"wheel\";\n  } else if (document.onmousewheel !== undefined) {\n    // legacy event type\n    wheelEvent = \"mousewheel\";\n  } else {\n    // older Firefox\n    wheelEvent = \"DOMMouseScroll\";\n  }\n\n  registerListener(screenSpaceEventHandler, wheelEvent, element, handleWheel);\n}\n\nfunction unregisterListeners(screenSpaceEventHandler) {\n  var removalFunctions = screenSpaceEventHandler._removalFunctions;\n  for (var i = 0; i < removalFunctions.length; ++i) {\n    removalFunctions[i]();\n  }\n}\n\nvar mouseDownEvent = {\n  position: new Cartesian2(),\n};\n\nfunction gotTouchEvent(screenSpaceEventHandler) {\n  screenSpaceEventHandler._lastSeenTouchEvent = getTimestamp();\n}\n\nfunction canProcessMouseEvent(screenSpaceEventHandler) {\n  return (\n    getTimestamp() - screenSpaceEventHandler._lastSeenTouchEvent >\n    ScreenSpaceEventHandler.mouseEmulationIgnoreMilliseconds\n  );\n}\n\nfunction checkPixelTolerance(startPosition, endPosition, pixelTolerance) {\n  var xDiff = startPosition.x - endPosition.x;\n  var yDiff = startPosition.y - endPosition.y;\n  var totalPixels = Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n\n  return totalPixels < pixelTolerance;\n}\n\nfunction handleMouseDown(screenSpaceEventHandler, event) {\n  if (!canProcessMouseEvent(screenSpaceEventHandler)) {\n    return;\n  }\n\n  var button = event.button;\n  screenSpaceEventHandler._buttonDown[button] = true;\n\n  var screenSpaceEventType;\n  if (button === MouseButton.LEFT) {\n    screenSpaceEventType = ScreenSpaceEventType.LEFT_DOWN;\n  } else if (button === MouseButton.MIDDLE) {\n    screenSpaceEventType = ScreenSpaceEventType.MIDDLE_DOWN;\n  } else if (button === MouseButton.RIGHT) {\n    screenSpaceEventType = ScreenSpaceEventType.RIGHT_DOWN;\n  } else {\n    return;\n  }\n\n  var position = getPosition(\n    screenSpaceEventHandler,\n    event,\n    screenSpaceEventHandler._primaryPosition\n  );\n  Cartesian2.clone(position, screenSpaceEventHandler._primaryStartPosition);\n  Cartesian2.clone(position, screenSpaceEventHandler._primaryPreviousPosition);\n\n  var modifier = getModifier(event);\n\n  var action = screenSpaceEventHandler.getInputAction(\n    screenSpaceEventType,\n    modifier\n  );\n\n  if (defined(action)) {\n    Cartesian2.clone(position, mouseDownEvent.position);\n\n    action(mouseDownEvent);\n\n    event.preventDefault();\n  }\n}\n\nvar mouseUpEvent = {\n  position: new Cartesian2(),\n};\nvar mouseClickEvent = {\n  position: new Cartesian2(),\n};\n\nfunction cancelMouseEvent(\n  screenSpaceEventHandler,\n  screenSpaceEventType,\n  clickScreenSpaceEventType,\n  event\n) {\n  var modifier = getModifier(event);\n\n  var action = screenSpaceEventHandler.getInputAction(\n    screenSpaceEventType,\n    modifier\n  );\n  var clickAction = screenSpaceEventHandler.getInputAction(\n    clickScreenSpaceEventType,\n    modifier\n  );\n\n  if (defined(action) || defined(clickAction)) {\n    var position = getPosition(\n      screenSpaceEventHandler,\n      event,\n      screenSpaceEventHandler._primaryPosition\n    );\n\n    if (defined(action)) {\n      Cartesian2.clone(position, mouseUpEvent.position);\n\n      action(mouseUpEvent);\n    }\n\n    if (defined(clickAction)) {\n      var startPosition = screenSpaceEventHandler._primaryStartPosition;\n      if (\n        checkPixelTolerance(\n          startPosition,\n          position,\n          screenSpaceEventHandler._clickPixelTolerance\n        )\n      ) {\n        Cartesian2.clone(position, mouseClickEvent.position);\n\n        clickAction(mouseClickEvent);\n      }\n    }\n  }\n}\n\nfunction handleMouseUp(screenSpaceEventHandler, event) {\n  if (!canProcessMouseEvent(screenSpaceEventHandler)) {\n    return;\n  }\n\n  var button = event.button;\n\n  if (\n    button !== MouseButton.LEFT &&\n    button !== MouseButton.MIDDLE &&\n    button !== MouseButton.RIGHT\n  ) {\n    return;\n  }\n\n  if (screenSpaceEventHandler._buttonDown[MouseButton.LEFT]) {\n    cancelMouseEvent(\n      screenSpaceEventHandler,\n      ScreenSpaceEventType.LEFT_UP,\n      ScreenSpaceEventType.LEFT_CLICK,\n      event\n    );\n    screenSpaceEventHandler._buttonDown[MouseButton.LEFT] = false;\n  }\n  if (screenSpaceEventHandler._buttonDown[MouseButton.MIDDLE]) {\n    cancelMouseEvent(\n      screenSpaceEventHandler,\n      ScreenSpaceEventType.MIDDLE_UP,\n      ScreenSpaceEventType.MIDDLE_CLICK,\n      event\n    );\n    screenSpaceEventHandler._buttonDown[MouseButton.MIDDLE] = false;\n  }\n  if (screenSpaceEventHandler._buttonDown[MouseButton.RIGHT]) {\n    cancelMouseEvent(\n      screenSpaceEventHandler,\n      ScreenSpaceEventType.RIGHT_UP,\n      ScreenSpaceEventType.RIGHT_CLICK,\n      event\n    );\n    screenSpaceEventHandler._buttonDown[MouseButton.RIGHT] = false;\n  }\n}\n\nvar mouseMoveEvent = {\n  startPosition: new Cartesian2(),\n  endPosition: new Cartesian2(),\n};\n\nfunction handleMouseMove(screenSpaceEventHandler, event) {\n  if (!canProcessMouseEvent(screenSpaceEventHandler)) {\n    return;\n  }\n\n  var modifier = getModifier(event);\n\n  var position = getPosition(\n    screenSpaceEventHandler,\n    event,\n    screenSpaceEventHandler._primaryPosition\n  );\n  var previousPosition = screenSpaceEventHandler._primaryPreviousPosition;\n\n  var action = screenSpaceEventHandler.getInputAction(\n    ScreenSpaceEventType.MOUSE_MOVE,\n    modifier\n  );\n\n  if (defined(action)) {\n    Cartesian2.clone(previousPosition, mouseMoveEvent.startPosition);\n    Cartesian2.clone(position, mouseMoveEvent.endPosition);\n\n    action(mouseMoveEvent);\n  }\n\n  Cartesian2.clone(position, previousPosition);\n\n  if (\n    screenSpaceEventHandler._buttonDown[MouseButton.LEFT] ||\n    screenSpaceEventHandler._buttonDown[MouseButton.MIDDLE] ||\n    screenSpaceEventHandler._buttonDown[MouseButton.RIGHT]\n  ) {\n    event.preventDefault();\n  }\n}\n\nvar mouseDblClickEvent = {\n  position: new Cartesian2(),\n};\n\nfunction handleDblClick(screenSpaceEventHandler, event) {\n  var button = event.button;\n\n  var screenSpaceEventType;\n  if (button === MouseButton.LEFT) {\n    screenSpaceEventType = ScreenSpaceEventType.LEFT_DOUBLE_CLICK;\n  } else {\n    return;\n  }\n\n  var modifier = getModifier(event);\n\n  var action = screenSpaceEventHandler.getInputAction(\n    screenSpaceEventType,\n    modifier\n  );\n\n  if (defined(action)) {\n    getPosition(screenSpaceEventHandler, event, mouseDblClickEvent.position);\n\n    action(mouseDblClickEvent);\n  }\n}\n\nfunction handleWheel(screenSpaceEventHandler, event) {\n  // currently this event exposes the delta value in terms of\n  // the obsolete mousewheel event type.  so, for now, we adapt the other\n  // values to that scheme.\n  var delta;\n\n  // standard wheel event uses deltaY.  sign is opposite wheelDelta.\n  // deltaMode indicates what unit it is in.\n  if (defined(event.deltaY)) {\n    var deltaMode = event.deltaMode;\n    if (deltaMode === event.DOM_DELTA_PIXEL) {\n      delta = -event.deltaY;\n    } else if (deltaMode === event.DOM_DELTA_LINE) {\n      delta = -event.deltaY * 40;\n    } else {\n      // DOM_DELTA_PAGE\n      delta = -event.deltaY * 120;\n    }\n  } else if (event.detail > 0) {\n    // old Firefox versions use event.detail to count the number of clicks. The sign\n    // of the integer is the direction the wheel is scrolled.\n    delta = event.detail * -120;\n  } else {\n    delta = event.wheelDelta;\n  }\n\n  if (!defined(delta)) {\n    return;\n  }\n\n  var modifier = getModifier(event);\n  var action = screenSpaceEventHandler.getInputAction(\n    ScreenSpaceEventType.WHEEL,\n    modifier\n  );\n\n  if (defined(action)) {\n    action(delta);\n\n    event.preventDefault();\n  }\n}\n\nfunction handleTouchStart(screenSpaceEventHandler, event) {\n  gotTouchEvent(screenSpaceEventHandler);\n\n  var changedTouches = event.changedTouches;\n\n  var i;\n  var length = changedTouches.length;\n  var touch;\n  var identifier;\n  var positions = screenSpaceEventHandler._positions;\n\n  for (i = 0; i < length; ++i) {\n    touch = changedTouches[i];\n    identifier = touch.identifier;\n    positions.set(\n      identifier,\n      getPosition(screenSpaceEventHandler, touch, new Cartesian2())\n    );\n  }\n\n  fireTouchEvents(screenSpaceEventHandler, event);\n\n  var previousPositions = screenSpaceEventHandler._previousPositions;\n\n  for (i = 0; i < length; ++i) {\n    touch = changedTouches[i];\n    identifier = touch.identifier;\n    previousPositions.set(\n      identifier,\n      Cartesian2.clone(positions.get(identifier))\n    );\n  }\n}\n\nfunction handleTouchEnd(screenSpaceEventHandler, event) {\n  gotTouchEvent(screenSpaceEventHandler);\n\n  var changedTouches = event.changedTouches;\n\n  var i;\n  var length = changedTouches.length;\n  var touch;\n  var identifier;\n  var positions = screenSpaceEventHandler._positions;\n\n  for (i = 0; i < length; ++i) {\n    touch = changedTouches[i];\n    identifier = touch.identifier;\n    positions.remove(identifier);\n  }\n\n  fireTouchEvents(screenSpaceEventHandler, event);\n\n  var previousPositions = screenSpaceEventHandler._previousPositions;\n\n  for (i = 0; i < length; ++i) {\n    touch = changedTouches[i];\n    identifier = touch.identifier;\n    previousPositions.remove(identifier);\n  }\n}\n\nvar touchStartEvent = {\n  position: new Cartesian2(),\n};\nvar touch2StartEvent = {\n  position1: new Cartesian2(),\n  position2: new Cartesian2(),\n};\nvar touchEndEvent = {\n  position: new Cartesian2(),\n};\nvar touchClickEvent = {\n  position: new Cartesian2(),\n};\nvar touchHoldEvent = {\n  position: new Cartesian2(),\n};\n\nfunction fireTouchEvents(screenSpaceEventHandler, event) {\n  var modifier = getModifier(event);\n  var positions = screenSpaceEventHandler._positions;\n  var numberOfTouches = positions.length;\n  var action;\n  var clickAction;\n  var pinching = screenSpaceEventHandler._isPinching;\n\n  if (\n    numberOfTouches !== 1 &&\n    screenSpaceEventHandler._buttonDown[MouseButton.LEFT]\n  ) {\n    // transitioning from single touch, trigger UP and might trigger CLICK\n    screenSpaceEventHandler._buttonDown[MouseButton.LEFT] = false;\n\n    if (defined(screenSpaceEventHandler._touchHoldTimer)) {\n      clearTimeout(screenSpaceEventHandler._touchHoldTimer);\n      screenSpaceEventHandler._touchHoldTimer = undefined;\n    }\n\n    action = screenSpaceEventHandler.getInputAction(\n      ScreenSpaceEventType.LEFT_UP,\n      modifier\n    );\n\n    if (defined(action)) {\n      Cartesian2.clone(\n        screenSpaceEventHandler._primaryPosition,\n        touchEndEvent.position\n      );\n\n      action(touchEndEvent);\n    }\n\n    if (numberOfTouches === 0 && !screenSpaceEventHandler._isTouchHolding) {\n      // releasing single touch, check for CLICK\n      clickAction = screenSpaceEventHandler.getInputAction(\n        ScreenSpaceEventType.LEFT_CLICK,\n        modifier\n      );\n\n      if (defined(clickAction)) {\n        var startPosition = screenSpaceEventHandler._primaryStartPosition;\n        var endPosition = screenSpaceEventHandler._previousPositions.values[0];\n        if (\n          checkPixelTolerance(\n            startPosition,\n            endPosition,\n            screenSpaceEventHandler._clickPixelTolerance\n          )\n        ) {\n          Cartesian2.clone(\n            screenSpaceEventHandler._primaryPosition,\n            touchClickEvent.position\n          );\n\n          clickAction(touchClickEvent);\n        }\n      }\n    }\n\n    screenSpaceEventHandler._isTouchHolding = false;\n\n    // Otherwise don't trigger CLICK, because we are adding more touches.\n  }\n\n  if (numberOfTouches === 0 && pinching) {\n    // transitioning from pinch, trigger PINCH_END\n    screenSpaceEventHandler._isPinching = false;\n\n    action = screenSpaceEventHandler.getInputAction(\n      ScreenSpaceEventType.PINCH_END,\n      modifier\n    );\n\n    if (defined(action)) {\n      action();\n    }\n  }\n\n  if (numberOfTouches === 1 && !pinching) {\n    // transitioning to single touch, trigger DOWN\n    var position = positions.values[0];\n    Cartesian2.clone(position, screenSpaceEventHandler._primaryPosition);\n    Cartesian2.clone(position, screenSpaceEventHandler._primaryStartPosition);\n    Cartesian2.clone(\n      position,\n      screenSpaceEventHandler._primaryPreviousPosition\n    );\n\n    screenSpaceEventHandler._buttonDown[MouseButton.LEFT] = true;\n\n    action = screenSpaceEventHandler.getInputAction(\n      ScreenSpaceEventType.LEFT_DOWN,\n      modifier\n    );\n\n    if (defined(action)) {\n      Cartesian2.clone(position, touchStartEvent.position);\n\n      action(touchStartEvent);\n    }\n\n    screenSpaceEventHandler._touchHoldTimer = setTimeout(function () {\n      if (!screenSpaceEventHandler.isDestroyed()) {\n        screenSpaceEventHandler._touchHoldTimer = undefined;\n        screenSpaceEventHandler._isTouchHolding = true;\n\n        clickAction = screenSpaceEventHandler.getInputAction(\n          ScreenSpaceEventType.RIGHT_CLICK,\n          modifier\n        );\n\n        if (defined(clickAction)) {\n          var startPosition = screenSpaceEventHandler._primaryStartPosition;\n          var endPosition =\n            screenSpaceEventHandler._previousPositions.values[0];\n          if (\n            checkPixelTolerance(\n              startPosition,\n              endPosition,\n              screenSpaceEventHandler._holdPixelTolerance\n            )\n          ) {\n            Cartesian2.clone(\n              screenSpaceEventHandler._primaryPosition,\n              touchHoldEvent.position\n            );\n\n            clickAction(touchHoldEvent);\n          }\n        }\n      }\n    }, ScreenSpaceEventHandler.touchHoldDelayMilliseconds);\n\n    event.preventDefault();\n  }\n\n  if (numberOfTouches === 2 && !pinching) {\n    // transitioning to pinch, trigger PINCH_START\n    screenSpaceEventHandler._isPinching = true;\n\n    action = screenSpaceEventHandler.getInputAction(\n      ScreenSpaceEventType.PINCH_START,\n      modifier\n    );\n\n    if (defined(action)) {\n      Cartesian2.clone(positions.values[0], touch2StartEvent.position1);\n      Cartesian2.clone(positions.values[1], touch2StartEvent.position2);\n\n      action(touch2StartEvent);\n\n      // Touch-enabled devices, in particular iOS can have many default behaviours for\n      // \"pinch\" events, which can still be executed unless we prevent them here.\n      event.preventDefault();\n    }\n  }\n}\n\nfunction handleTouchMove(screenSpaceEventHandler, event) {\n  gotTouchEvent(screenSpaceEventHandler);\n\n  var changedTouches = event.changedTouches;\n\n  var i;\n  var length = changedTouches.length;\n  var touch;\n  var identifier;\n  var positions = screenSpaceEventHandler._positions;\n\n  for (i = 0; i < length; ++i) {\n    touch = changedTouches[i];\n    identifier = touch.identifier;\n    var position = positions.get(identifier);\n    if (defined(position)) {\n      getPosition(screenSpaceEventHandler, touch, position);\n    }\n  }\n\n  fireTouchMoveEvents(screenSpaceEventHandler, event);\n\n  var previousPositions = screenSpaceEventHandler._previousPositions;\n\n  for (i = 0; i < length; ++i) {\n    touch = changedTouches[i];\n    identifier = touch.identifier;\n    Cartesian2.clone(\n      positions.get(identifier),\n      previousPositions.get(identifier)\n    );\n  }\n}\n\nvar touchMoveEvent = {\n  startPosition: new Cartesian2(),\n  endPosition: new Cartesian2(),\n};\nvar touchPinchMovementEvent = {\n  distance: {\n    startPosition: new Cartesian2(),\n    endPosition: new Cartesian2(),\n  },\n  angleAndHeight: {\n    startPosition: new Cartesian2(),\n    endPosition: new Cartesian2(),\n  },\n};\n\nfunction fireTouchMoveEvents(screenSpaceEventHandler, event) {\n  var modifier = getModifier(event);\n  var positions = screenSpaceEventHandler._positions;\n  var previousPositions = screenSpaceEventHandler._previousPositions;\n  var numberOfTouches = positions.length;\n  var action;\n\n  if (\n    numberOfTouches === 1 &&\n    screenSpaceEventHandler._buttonDown[MouseButton.LEFT]\n  ) {\n    // moving single touch\n    var position = positions.values[0];\n    Cartesian2.clone(position, screenSpaceEventHandler._primaryPosition);\n\n    var previousPosition = screenSpaceEventHandler._primaryPreviousPosition;\n\n    action = screenSpaceEventHandler.getInputAction(\n      ScreenSpaceEventType.MOUSE_MOVE,\n      modifier\n    );\n\n    if (defined(action)) {\n      Cartesian2.clone(previousPosition, touchMoveEvent.startPosition);\n      Cartesian2.clone(position, touchMoveEvent.endPosition);\n\n      action(touchMoveEvent);\n    }\n\n    Cartesian2.clone(position, previousPosition);\n\n    event.preventDefault();\n  } else if (numberOfTouches === 2 && screenSpaceEventHandler._isPinching) {\n    // moving pinch\n\n    action = screenSpaceEventHandler.getInputAction(\n      ScreenSpaceEventType.PINCH_MOVE,\n      modifier\n    );\n    if (defined(action)) {\n      var position1 = positions.values[0];\n      var position2 = positions.values[1];\n      var previousPosition1 = previousPositions.values[0];\n      var previousPosition2 = previousPositions.values[1];\n\n      var dX = position2.x - position1.x;\n      var dY = position2.y - position1.y;\n      var dist = Math.sqrt(dX * dX + dY * dY) * 0.25;\n\n      var prevDX = previousPosition2.x - previousPosition1.x;\n      var prevDY = previousPosition2.y - previousPosition1.y;\n      var prevDist = Math.sqrt(prevDX * prevDX + prevDY * prevDY) * 0.25;\n\n      var cY = (position2.y + position1.y) * 0.125;\n      var prevCY = (previousPosition2.y + previousPosition1.y) * 0.125;\n      var angle = Math.atan2(dY, dX);\n      var prevAngle = Math.atan2(prevDY, prevDX);\n\n      Cartesian2.fromElements(\n        0.0,\n        prevDist,\n        touchPinchMovementEvent.distance.startPosition\n      );\n      Cartesian2.fromElements(\n        0.0,\n        dist,\n        touchPinchMovementEvent.distance.endPosition\n      );\n\n      Cartesian2.fromElements(\n        prevAngle,\n        prevCY,\n        touchPinchMovementEvent.angleAndHeight.startPosition\n      );\n      Cartesian2.fromElements(\n        angle,\n        cY,\n        touchPinchMovementEvent.angleAndHeight.endPosition\n      );\n\n      action(touchPinchMovementEvent);\n    }\n  }\n}\n\nfunction handlePointerDown(screenSpaceEventHandler, event) {\n  event.target.setPointerCapture(event.pointerId);\n\n  if (event.pointerType === \"touch\") {\n    var positions = screenSpaceEventHandler._positions;\n\n    var identifier = event.pointerId;\n    positions.set(\n      identifier,\n      getPosition(screenSpaceEventHandler, event, new Cartesian2())\n    );\n\n    fireTouchEvents(screenSpaceEventHandler, event);\n\n    var previousPositions = screenSpaceEventHandler._previousPositions;\n    previousPositions.set(\n      identifier,\n      Cartesian2.clone(positions.get(identifier))\n    );\n  } else {\n    handleMouseDown(screenSpaceEventHandler, event);\n  }\n}\n\nfunction handlePointerUp(screenSpaceEventHandler, event) {\n  if (event.pointerType === \"touch\") {\n    var positions = screenSpaceEventHandler._positions;\n\n    var identifier = event.pointerId;\n    positions.remove(identifier);\n\n    fireTouchEvents(screenSpaceEventHandler, event);\n\n    var previousPositions = screenSpaceEventHandler._previousPositions;\n    previousPositions.remove(identifier);\n  } else {\n    handleMouseUp(screenSpaceEventHandler, event);\n  }\n}\n\nfunction handlePointerMove(screenSpaceEventHandler, event) {\n  if (event.pointerType === \"touch\") {\n    var positions = screenSpaceEventHandler._positions;\n\n    var identifier = event.pointerId;\n    var position = positions.get(identifier);\n    if (!defined(position)) {\n      return;\n    }\n\n    getPosition(screenSpaceEventHandler, event, position);\n    fireTouchMoveEvents(screenSpaceEventHandler, event);\n\n    var previousPositions = screenSpaceEventHandler._previousPositions;\n    Cartesian2.clone(\n      positions.get(identifier),\n      previousPositions.get(identifier)\n    );\n  } else {\n    handleMouseMove(screenSpaceEventHandler, event);\n  }\n}\n\n/**\n * Handles user input events. Custom functions can be added to be executed on\n * when the user enters input.\n *\n * @alias ScreenSpaceEventHandler\n *\n * @param {Canvas} [element=document] The element to add events to.\n *\n * @constructor\n */\nfunction ScreenSpaceEventHandler(element) {\n  this._inputEvents = {};\n  this._buttonDown = {\n    LEFT: false,\n    MIDDLE: false,\n    RIGHT: false,\n  };\n  this._isPinching = false;\n  this._isTouchHolding = false;\n  this._lastSeenTouchEvent = -ScreenSpaceEventHandler.mouseEmulationIgnoreMilliseconds;\n\n  this._primaryStartPosition = new Cartesian2();\n  this._primaryPosition = new Cartesian2();\n  this._primaryPreviousPosition = new Cartesian2();\n\n  this._positions = new AssociativeArray();\n  this._previousPositions = new AssociativeArray();\n\n  this._removalFunctions = [];\n\n  this._touchHoldTimer = undefined;\n\n  // TODO: Revisit when doing mobile development. May need to be configurable\n  // or determined based on the platform?\n  this._clickPixelTolerance = 5;\n  this._holdPixelTolerance = 25;\n\n  this._element = defaultValue(element, document);\n\n  registerListeners(this);\n}\n\n/**\n * Set a function to be executed on an input event.\n *\n * @param {Function} action Function to be executed when the input event occurs.\n * @param {Number} type The ScreenSpaceEventType of input event.\n * @param {Number} [modifier] A KeyboardEventModifier key that is held when a <code>type</code>\n * event occurs.\n *\n * @see ScreenSpaceEventHandler#getInputAction\n * @see ScreenSpaceEventHandler#removeInputAction\n */\nScreenSpaceEventHandler.prototype.setInputAction = function (\n  action,\n  type,\n  modifier\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(action)) {\n    throw new DeveloperError(\"action is required.\");\n  }\n  if (!defined(type)) {\n    throw new DeveloperError(\"type is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var key = getInputEventKey(type, modifier);\n  this._inputEvents[key] = action;\n};\n\n/**\n * Returns the function to be executed on an input event.\n *\n * @param {Number} type The ScreenSpaceEventType of input event.\n * @param {Number} [modifier] A KeyboardEventModifier key that is held when a <code>type</code>\n * event occurs.\n *\n * @see ScreenSpaceEventHandler#setInputAction\n * @see ScreenSpaceEventHandler#removeInputAction\n */\nScreenSpaceEventHandler.prototype.getInputAction = function (type, modifier) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(type)) {\n    throw new DeveloperError(\"type is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var key = getInputEventKey(type, modifier);\n  return this._inputEvents[key];\n};\n\n/**\n * Removes the function to be executed on an input event.\n *\n * @param {Number} type The ScreenSpaceEventType of input event.\n * @param {Number} [modifier] A KeyboardEventModifier key that is held when a <code>type</code>\n * event occurs.\n *\n * @see ScreenSpaceEventHandler#getInputAction\n * @see ScreenSpaceEventHandler#setInputAction\n */\nScreenSpaceEventHandler.prototype.removeInputAction = function (\n  type,\n  modifier\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(type)) {\n    throw new DeveloperError(\"type is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var key = getInputEventKey(type, modifier);\n  delete this._inputEvents[key];\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see ScreenSpaceEventHandler#destroy\n */\nScreenSpaceEventHandler.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Removes listeners held by this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * handler = handler && handler.destroy();\n *\n * @see ScreenSpaceEventHandler#isDestroyed\n */\nScreenSpaceEventHandler.prototype.destroy = function () {\n  unregisterListeners(this);\n\n  return destroyObject(this);\n};\n\n/**\n * The amount of time, in milliseconds, that mouse events will be disabled after\n * receiving any touch events, such that any emulated mouse events will be ignored.\n * @type {Number}\n * @default 800\n */\nScreenSpaceEventHandler.mouseEmulationIgnoreMilliseconds = 800;\n\n/**\n * The amount of time, in milliseconds, before a touch on the screen becomes a\n * touch and hold.\n * @type {Number}\n * @default 1500\n */\nScreenSpaceEventHandler.touchHoldDelayMilliseconds = 1500;\nexport default ScreenSpaceEventHandler;\n"]},"metadata":{},"sourceType":"module"}