{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\n/**\n * A Plane in Hessian Normal form to be used with {@link ClippingPlaneCollection}.\n * Compatible with mathematics functions in {@link Plane}\n *\n * @alias ClippingPlane\n * @constructor\n *\n * @param {Cartesian3} normal The plane's normal (normalized).\n * @param {Number} distance The shortest distance from the origin to the plane.  The sign of\n * <code>distance</code> determines which side of the plane the origin\n * is on.  If <code>distance</code> is positive, the origin is in the half-space\n * in the direction of the normal; if negative, the origin is in the half-space\n * opposite to the normal; if zero, the plane passes through the origin.\n */\n\nfunction ClippingPlane(normal, distance) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"normal\", normal);\n  Check.typeOf.number(\"distance\", distance); //>>includeEnd('debug');\n\n  this._distance = distance;\n  this._normal = new UpdateChangedCartesian3(normal, this);\n  this.onChangeCallback = undefined;\n  this.index = -1; // to be set by ClippingPlaneCollection\n}\n\nObject.defineProperties(ClippingPlane.prototype, {\n  /**\n   * The shortest distance from the origin to the plane.  The sign of\n   * <code>distance</code> determines which side of the plane the origin\n   * is on.  If <code>distance</code> is positive, the origin is in the half-space\n   * in the direction of the normal; if negative, the origin is in the half-space\n   * opposite to the normal; if zero, the plane passes through the origin.\n   *\n   * @type {Number}\n   * @memberof ClippingPlane.prototype\n   */\n  distance: {\n    get: function get() {\n      return this._distance;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number(\"value\", value); //>>includeEnd('debug');\n\n      if (defined(this.onChangeCallback) && value !== this._distance) {\n        this.onChangeCallback(this.index);\n      }\n\n      this._distance = value;\n    }\n  },\n\n  /**\n   * The plane's normal.\n   *\n   * @type {Cartesian3}\n   * @memberof ClippingPlane.prototype\n   */\n  normal: {\n    get: function get() {\n      return this._normal;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.object(\"value\", value); //>>includeEnd('debug');\n\n      if (defined(this.onChangeCallback) && !Cartesian3.equals(this._normal._cartesian3, value)) {\n        this.onChangeCallback(this.index);\n      } // Set without firing callback again\n\n\n      Cartesian3.clone(value, this._normal._cartesian3);\n    }\n  }\n});\n/**\n * Create a ClippingPlane from a Plane object.\n *\n * @param {Plane} plane The plane containing parameters to copy\n * @param {ClippingPlane} [result] The object on which to store the result\n * @returns {ClippingPlane} The ClippingPlane generated from the plane's parameters.\n */\n\nClippingPlane.fromPlane = function (plane, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"plane\", plane); //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new ClippingPlane(plane.normal, plane.distance);\n  } else {\n    result.normal = plane.normal;\n    result.distance = plane.distance;\n  }\n\n  return result;\n};\n/**\n * Clones the ClippingPlane without setting its ownership.\n * @param {ClippingPlane} clippingPlane The ClippingPlane to be cloned\n * @param {ClippingPlane} [result] The object on which to store the cloned parameters.\n * @returns {ClippingPlane} a clone of the input ClippingPlane\n */\n\n\nClippingPlane.clone = function (clippingPlane, result) {\n  if (!defined(result)) {\n    return new ClippingPlane(clippingPlane.normal, clippingPlane.distance);\n  }\n\n  result.normal = clippingPlane.normal;\n  result.distance = clippingPlane.distance;\n  return result;\n};\n/**\n * Wrapper on Cartesian3 that allows detection of Plane changes from \"members of members,\" for example:\n *\n * var clippingPlane = new ClippingPlane(...);\n * clippingPlane.normal.z = -1.0;\n *\n * @private\n */\n\n\nfunction UpdateChangedCartesian3(normal, clippingPlane) {\n  this._clippingPlane = clippingPlane;\n  this._cartesian3 = Cartesian3.clone(normal);\n}\n\nObject.defineProperties(UpdateChangedCartesian3.prototype, {\n  x: {\n    get: function get() {\n      return this._cartesian3.x;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number(\"value\", value); //>>includeEnd('debug');\n\n      if (defined(this._clippingPlane.onChangeCallback) && value !== this._cartesian3.x) {\n        this._clippingPlane.onChangeCallback(this._clippingPlane.index);\n      }\n\n      this._cartesian3.x = value;\n    }\n  },\n  y: {\n    get: function get() {\n      return this._cartesian3.y;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number(\"value\", value); //>>includeEnd('debug');\n\n      if (defined(this._clippingPlane.onChangeCallback) && value !== this._cartesian3.y) {\n        this._clippingPlane.onChangeCallback(this._clippingPlane.index);\n      }\n\n      this._cartesian3.y = value;\n    }\n  },\n  z: {\n    get: function get() {\n      return this._cartesian3.z;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number(\"value\", value); //>>includeEnd('debug');\n\n      if (defined(this._clippingPlane.onChangeCallback) && value !== this._cartesian3.z) {\n        this._clippingPlane.onChangeCallback(this._clippingPlane.index);\n      }\n\n      this._cartesian3.z = value;\n    }\n  }\n});\nexport default ClippingPlane;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/ClippingPlane.js"],"names":["Cartesian3","Check","defined","ClippingPlane","normal","distance","typeOf","object","number","_distance","_normal","UpdateChangedCartesian3","onChangeCallback","undefined","index","Object","defineProperties","prototype","get","set","value","equals","_cartesian3","clone","fromPlane","plane","result","clippingPlane","_clippingPlane","x","y","z"],"mappings":"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","sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\n\n/**\n * A Plane in Hessian Normal form to be used with {@link ClippingPlaneCollection}.\n * Compatible with mathematics functions in {@link Plane}\n *\n * @alias ClippingPlane\n * @constructor\n *\n * @param {Cartesian3} normal The plane's normal (normalized).\n * @param {Number} distance The shortest distance from the origin to the plane.  The sign of\n * <code>distance</code> determines which side of the plane the origin\n * is on.  If <code>distance</code> is positive, the origin is in the half-space\n * in the direction of the normal; if negative, the origin is in the half-space\n * opposite to the normal; if zero, the plane passes through the origin.\n */\nfunction ClippingPlane(normal, distance) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"normal\", normal);\n  Check.typeOf.number(\"distance\", distance);\n  //>>includeEnd('debug');\n\n  this._distance = distance;\n  this._normal = new UpdateChangedCartesian3(normal, this);\n  this.onChangeCallback = undefined;\n  this.index = -1; // to be set by ClippingPlaneCollection\n}\n\nObject.defineProperties(ClippingPlane.prototype, {\n  /**\n   * The shortest distance from the origin to the plane.  The sign of\n   * <code>distance</code> determines which side of the plane the origin\n   * is on.  If <code>distance</code> is positive, the origin is in the half-space\n   * in the direction of the normal; if negative, the origin is in the half-space\n   * opposite to the normal; if zero, the plane passes through the origin.\n   *\n   * @type {Number}\n   * @memberof ClippingPlane.prototype\n   */\n  distance: {\n    get: function () {\n      return this._distance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n      if (defined(this.onChangeCallback) && value !== this._distance) {\n        this.onChangeCallback(this.index);\n      }\n      this._distance = value;\n    },\n  },\n  /**\n   * The plane's normal.\n   *\n   * @type {Cartesian3}\n   * @memberof ClippingPlane.prototype\n   */\n  normal: {\n    get: function () {\n      return this._normal;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.object(\"value\", value);\n      //>>includeEnd('debug');\n      if (\n        defined(this.onChangeCallback) &&\n        !Cartesian3.equals(this._normal._cartesian3, value)\n      ) {\n        this.onChangeCallback(this.index);\n      }\n      // Set without firing callback again\n      Cartesian3.clone(value, this._normal._cartesian3);\n    },\n  },\n});\n\n/**\n * Create a ClippingPlane from a Plane object.\n *\n * @param {Plane} plane The plane containing parameters to copy\n * @param {ClippingPlane} [result] The object on which to store the result\n * @returns {ClippingPlane} The ClippingPlane generated from the plane's parameters.\n */\nClippingPlane.fromPlane = function (plane, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"plane\", plane);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new ClippingPlane(plane.normal, plane.distance);\n  } else {\n    result.normal = plane.normal;\n    result.distance = plane.distance;\n  }\n  return result;\n};\n\n/**\n * Clones the ClippingPlane without setting its ownership.\n * @param {ClippingPlane} clippingPlane The ClippingPlane to be cloned\n * @param {ClippingPlane} [result] The object on which to store the cloned parameters.\n * @returns {ClippingPlane} a clone of the input ClippingPlane\n */\nClippingPlane.clone = function (clippingPlane, result) {\n  if (!defined(result)) {\n    return new ClippingPlane(clippingPlane.normal, clippingPlane.distance);\n  }\n  result.normal = clippingPlane.normal;\n  result.distance = clippingPlane.distance;\n  return result;\n};\n\n/**\n * Wrapper on Cartesian3 that allows detection of Plane changes from \"members of members,\" for example:\n *\n * var clippingPlane = new ClippingPlane(...);\n * clippingPlane.normal.z = -1.0;\n *\n * @private\n */\nfunction UpdateChangedCartesian3(normal, clippingPlane) {\n  this._clippingPlane = clippingPlane;\n  this._cartesian3 = Cartesian3.clone(normal);\n}\n\nObject.defineProperties(UpdateChangedCartesian3.prototype, {\n  x: {\n    get: function () {\n      return this._cartesian3.x;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n      if (\n        defined(this._clippingPlane.onChangeCallback) &&\n        value !== this._cartesian3.x\n      ) {\n        this._clippingPlane.onChangeCallback(this._clippingPlane.index);\n      }\n      this._cartesian3.x = value;\n    },\n  },\n  y: {\n    get: function () {\n      return this._cartesian3.y;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n      if (\n        defined(this._clippingPlane.onChangeCallback) &&\n        value !== this._cartesian3.y\n      ) {\n        this._clippingPlane.onChangeCallback(this._clippingPlane.index);\n      }\n      this._cartesian3.y = value;\n    },\n  },\n  z: {\n    get: function () {\n      return this._cartesian3.z;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n      if (\n        defined(this._clippingPlane.onChangeCallback) &&\n        value !== this._cartesian3.z\n      ) {\n        this._clippingPlane.onChangeCallback(this._clippingPlane.index);\n      }\n      this._cartesian3.z = value;\n    },\n  },\n});\nexport default ClippingPlane;\n"]},"metadata":{},"sourceType":"module"}