{"ast":null,"code":"import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport CompositeProperty from \"./CompositeProperty.js\";\nimport Property from \"./Property.js\";\n/**\n * A {@link CompositeProperty} which is also a {@link MaterialProperty}.\n *\n * @alias CompositeMaterialProperty\n * @constructor\n */\n\nfunction CompositeMaterialProperty() {\n  this._definitionChanged = new Event();\n  this._composite = new CompositeProperty();\n\n  this._composite.definitionChanged.addEventListener(CompositeMaterialProperty.prototype._raiseDefinitionChanged, this);\n}\n\nObject.defineProperties(CompositeMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof CompositeMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return this._composite.isConstant;\n    }\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value.\n   * @memberof CompositeMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets the interval collection.\n   * @memberof CompositeMaterialProperty.prototype\n   *\n   * @type {TimeIntervalCollection}\n   */\n  intervals: {\n    get: function () {\n      return this._composite._intervals;\n    }\n  }\n});\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\n\nCompositeMaterialProperty.prototype.getType = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required\");\n  } //>>includeEnd('debug');\n\n\n  var innerProperty = this._composite._intervals.findDataForIntervalContainingDate(time);\n\n  if (defined(innerProperty)) {\n    return innerProperty.getType(time);\n  }\n\n  return undefined;\n};\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\n\nCompositeMaterialProperty.prototype.getValue = function (time, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required\");\n  } //>>includeEnd('debug');\n\n\n  var innerProperty = this._composite._intervals.findDataForIntervalContainingDate(time);\n\n  if (defined(innerProperty)) {\n    return innerProperty.getValue(time, result);\n  }\n\n  return undefined;\n};\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nCompositeMaterialProperty.prototype.equals = function (other) {\n  return this === other || //\n  other instanceof CompositeMaterialProperty && //\n  this._composite.equals(other._composite, Property.equals);\n};\n/**\n * @private\n */\n\n\nCompositeMaterialProperty.prototype._raiseDefinitionChanged = function () {\n  this._definitionChanged.raiseEvent(this);\n};\n\nexport default CompositeMaterialProperty;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/CompositeMaterialProperty.js"],"names":["defined","DeveloperError","Event","CompositeProperty","Property","CompositeMaterialProperty","_definitionChanged","_composite","definitionChanged","addEventListener","prototype","_raiseDefinitionChanged","Object","defineProperties","isConstant","get","intervals","_intervals","getType","time","innerProperty","findDataForIntervalContainingDate","undefined","getValue","result","equals","other","raiseEvent"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,iBAAP,MAA8B,wBAA9B;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA;;;;;;;AAMA,SAASC,yBAAT,GAAqC;AACnC,OAAKC,kBAAL,GAA0B,IAAIJ,KAAJ,EAA1B;AACA,OAAKK,UAAL,GAAkB,IAAIJ,iBAAJ,EAAlB;;AACA,OAAKI,UAAL,CAAgBC,iBAAhB,CAAkCC,gBAAlC,CACEJ,yBAAyB,CAACK,SAA1B,CAAoCC,uBADtC,EAEE,IAFF;AAID;;AAEDC,MAAM,CAACC,gBAAP,CAAwBR,yBAAyB,CAACK,SAAlD,EAA6D;AAC3D;;;;;;;;AAQAI,EAAAA,UAAU,EAAE;AACVC,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKR,UAAL,CAAgBO,UAAvB;AACD;AAHS,GAT+C;;AAc3D;;;;;;;;;AASAN,EAAAA,iBAAiB,EAAE;AACjBO,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKT,kBAAZ;AACD;AAHgB,GAvBwC;;AA4B3D;;;;;;AAMAU,EAAAA,SAAS,EAAE;AACTD,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKR,UAAL,CAAgBU,UAAvB;AACD;AAHQ;AAlCgD,CAA7D;AAyCA;;;;;;;AAMAZ,yBAAyB,CAACK,SAA1B,CAAoCQ,OAApC,GAA8C,UAAUC,IAAV,EAAgB;AAC5D;AACA,MAAI,CAACnB,OAAO,CAACmB,IAAD,CAAZ,EAAoB;AAClB,UAAM,IAAIlB,cAAJ,CAAmB,kBAAnB,CAAN;AACD,GAJ2D,CAK5D;;;AAEA,MAAImB,aAAa,GAAG,KAAKb,UAAL,CAAgBU,UAAhB,CAA2BI,iCAA3B,CAClBF,IADkB,CAApB;;AAGA,MAAInB,OAAO,CAACoB,aAAD,CAAX,EAA4B;AAC1B,WAAOA,aAAa,CAACF,OAAd,CAAsBC,IAAtB,CAAP;AACD;;AACD,SAAOG,SAAP;AACD,CAdD;AAgBA;;;;;;;;;AAOAjB,yBAAyB,CAACK,SAA1B,CAAoCa,QAApC,GAA+C,UAAUJ,IAAV,EAAgBK,MAAhB,EAAwB;AACrE;AACA,MAAI,CAACxB,OAAO,CAACmB,IAAD,CAAZ,EAAoB;AAClB,UAAM,IAAIlB,cAAJ,CAAmB,kBAAnB,CAAN;AACD,GAJoE,CAKrE;;;AAEA,MAAImB,aAAa,GAAG,KAAKb,UAAL,CAAgBU,UAAhB,CAA2BI,iCAA3B,CAClBF,IADkB,CAApB;;AAGA,MAAInB,OAAO,CAACoB,aAAD,CAAX,EAA4B;AAC1B,WAAOA,aAAa,CAACG,QAAd,CAAuBJ,IAAvB,EAA6BK,MAA7B,CAAP;AACD;;AACD,SAAOF,SAAP;AACD,CAdD;AAgBA;;;;;;;;;AAOAjB,yBAAyB,CAACK,SAA1B,CAAoCe,MAApC,GAA6C,UAAUC,KAAV,EAAiB;AAC5D,SACE,SAASA,KAAT,IAAkB;AACjBA,EAAAA,KAAK,YAAYrB,yBAAjB,IAA8C;AAC7C,OAAKE,UAAL,CAAgBkB,MAAhB,CAAuBC,KAAK,CAACnB,UAA7B,EAAyCH,QAAQ,CAACqB,MAAlD,CAHJ;AAKD,CAND;AAQA;;;;;AAGApB,yBAAyB,CAACK,SAA1B,CAAoCC,uBAApC,GAA8D,YAAY;AACxE,OAAKL,kBAAL,CAAwBqB,UAAxB,CAAmC,IAAnC;AACD,CAFD;;AAGA,eAAetB,yBAAf","sourcesContent":["import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport CompositeProperty from \"./CompositeProperty.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link CompositeProperty} which is also a {@link MaterialProperty}.\n *\n * @alias CompositeMaterialProperty\n * @constructor\n */\nfunction CompositeMaterialProperty() {\n  this._definitionChanged = new Event();\n  this._composite = new CompositeProperty();\n  this._composite.definitionChanged.addEventListener(\n    CompositeMaterialProperty.prototype._raiseDefinitionChanged,\n    this\n  );\n}\n\nObject.defineProperties(CompositeMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof CompositeMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return this._composite.isConstant;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value.\n   * @memberof CompositeMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets the interval collection.\n   * @memberof CompositeMaterialProperty.prototype\n   *\n   * @type {TimeIntervalCollection}\n   */\n  intervals: {\n    get: function () {\n      return this._composite._intervals;\n    },\n  },\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nCompositeMaterialProperty.prototype.getType = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required\");\n  }\n  //>>includeEnd('debug');\n\n  var innerProperty = this._composite._intervals.findDataForIntervalContainingDate(\n    time\n  );\n  if (defined(innerProperty)) {\n    return innerProperty.getType(time);\n  }\n  return undefined;\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nCompositeMaterialProperty.prototype.getValue = function (time, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required\");\n  }\n  //>>includeEnd('debug');\n\n  var innerProperty = this._composite._intervals.findDataForIntervalContainingDate(\n    time\n  );\n  if (defined(innerProperty)) {\n    return innerProperty.getValue(time, result);\n  }\n  return undefined;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCompositeMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof CompositeMaterialProperty && //\n      this._composite.equals(other._composite, Property.equals))\n  );\n};\n\n/**\n * @private\n */\nCompositeMaterialProperty.prototype._raiseDefinitionChanged = function () {\n  this._definitionChanged.raiseEvent(this);\n};\nexport default CompositeMaterialProperty;\n"]},"metadata":{},"sourceType":"module"}