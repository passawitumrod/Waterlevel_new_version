{"ast":null,"code":"import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport formatError from \"./formatError.js\";\n/**\n * Provides details about an error that occurred in an {@link ImageryProvider} or a {@link TerrainProvider}.\n *\n * @alias TileProviderError\n * @constructor\n *\n * @param {ImageryProvider|TerrainProvider} provider The imagery or terrain provider that experienced the error.\n * @param {String} message A message describing the error.\n * @param {Number} [x] The X coordinate of the tile that experienced the error, or undefined if the error\n *        is not specific to a particular tile.\n * @param {Number} [y] The Y coordinate of the tile that experienced the error, or undefined if the error\n *        is not specific to a particular tile.\n * @param {Number} [level] The level of the tile that experienced the error, or undefined if the error\n *        is not specific to a particular tile.\n * @param {Number} [timesRetried=0] The number of times this operation has been retried.\n * @param {Error} [error] The error or exception that occurred, if any.\n */\n\nfunction TileProviderError(provider, message, x, y, level, timesRetried, error) {\n  /**\n   * The {@link ImageryProvider} or {@link TerrainProvider} that experienced the error.\n   * @type {ImageryProvider|TerrainProvider}\n   */\n  this.provider = provider;\n  /**\n   * The message describing the error.\n   * @type {String}\n   */\n\n  this.message = message;\n  /**\n   * The X coordinate of the tile that experienced the error.  If the error is not specific\n   * to a particular tile, this property will be undefined.\n   * @type {Number}\n   */\n\n  this.x = x;\n  /**\n   * The Y coordinate of the tile that experienced the error.  If the error is not specific\n   * to a particular tile, this property will be undefined.\n   * @type {Number}\n   */\n\n  this.y = y;\n  /**\n   * The level-of-detail of the tile that experienced the error.  If the error is not specific\n   * to a particular tile, this property will be undefined.\n   * @type {Number}\n   */\n\n  this.level = level;\n  /**\n   * The number of times this operation has been retried.\n   * @type {Number}\n   * @default 0\n   */\n\n  this.timesRetried = defaultValue(timesRetried, 0);\n  /**\n   * True if the failed operation should be retried; otherwise, false.  The imagery or terrain provider\n   * will set the initial value of this property before raising the event, but any listeners\n   * can change it.  The value after the last listener is invoked will be acted upon.\n   * @type {Boolean}\n   * @default false\n   */\n\n  this.retry = false;\n  /**\n   * The error or exception that occurred, if any.\n   * @type {Error}\n   */\n\n  this.error = error;\n}\n/**\n * Handles an error in an {@link ImageryProvider} or {@link TerrainProvider} by raising an event if it has any listeners, or by\n * logging the error to the console if the event has no listeners.  This method also tracks the number\n * of times the operation has been retried and will automatically retry if requested to do so by the\n * event listeners.\n *\n * @param {TileProviderError} previousError The error instance returned by this function the last\n *        time it was called for this error, or undefined if this is the first time this error has\n *        occurred.\n * @param {ImageryProvider|TerrainProvider} provider The imagery or terrain provider that encountered the error.\n * @param {Event} event The event to raise to inform listeners of the error.\n * @param {String} message The message describing the error.\n * @param {Number} x The X coordinate of the tile that experienced the error, or undefined if the\n *        error is not specific to a particular tile.\n * @param {Number} y The Y coordinate of the tile that experienced the error, or undefined if the\n *        error is not specific to a particular tile.\n * @param {Number} level The level-of-detail of the tile that experienced the error, or undefined if the\n *        error is not specific to a particular tile.\n * @param {TileProviderError~RetryFunction} retryFunction The function to call to retry the operation.  If undefined, the\n *        operation will not be retried.\n * @param {Error} [errorDetails] The error or exception that occurred, if any.\n * @returns {TileProviderError} The error instance that was passed to the event listeners and that\n *          should be passed to this function the next time it is called for the same error in order\n *          to track retry counts.\n */\n\n\nTileProviderError.handleError = function (previousError, provider, event, message, x, y, level, retryFunction, errorDetails) {\n  var error = previousError;\n\n  if (!defined(previousError)) {\n    error = new TileProviderError(provider, message, x, y, level, 0, errorDetails);\n  } else {\n    error.provider = provider;\n    error.message = message;\n    error.x = x;\n    error.y = y;\n    error.level = level;\n    error.retry = false;\n    error.error = errorDetails;\n    ++error.timesRetried;\n  }\n\n  if (event.numberOfListeners > 0) {\n    event.raiseEvent(error);\n  } else {\n    console.log('An error occurred in \"' + provider.constructor.name + '\": ' + formatError(message));\n  }\n\n  if (error.retry && defined(retryFunction)) {\n    retryFunction();\n  }\n\n  return error;\n};\n/**\n * Handles success of an operation by resetting the retry count of a previous error, if any.  This way,\n * if the error occurs again in the future, the listeners will be informed that it has not yet been retried.\n *\n * @param {TileProviderError} previousError The previous error, or undefined if this operation has\n *        not previously resulted in an error.\n */\n\n\nTileProviderError.handleSuccess = function (previousError) {\n  if (defined(previousError)) {\n    previousError.timesRetried = -1;\n  }\n};\n/**\n * A function that will be called to retry the operation.\n * @callback TileProviderError~RetryFunction\n */\n\n\nexport default TileProviderError;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/TileProviderError.js"],"names":["defaultValue","defined","formatError","TileProviderError","provider","message","x","y","level","timesRetried","error","retry","handleError","previousError","event","retryFunction","errorDetails","numberOfListeners","raiseEvent","console","log","constructor","name","handleSuccess"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AAEA;;;;;;;;;;;;;;;;;;AAiBA,SAASC,iBAAT,CACEC,QADF,EAEEC,OAFF,EAGEC,CAHF,EAIEC,CAJF,EAKEC,KALF,EAMEC,YANF,EAOEC,KAPF,EAQE;AACA;;;;AAIA,OAAKN,QAAL,GAAgBA,QAAhB;AAEA;;;;;AAIA,OAAKC,OAAL,GAAeA,OAAf;AAEA;;;;;;AAKA,OAAKC,CAAL,GAASA,CAAT;AAEA;;;;;;AAKA,OAAKC,CAAL,GAASA,CAAT;AAEA;;;;;;AAKA,OAAKC,KAAL,GAAaA,KAAb;AAEA;;;;;;AAKA,OAAKC,YAAL,GAAoBT,YAAY,CAACS,YAAD,EAAe,CAAf,CAAhC;AAEA;;;;;;;;AAOA,OAAKE,KAAL,GAAa,KAAb;AAEA;;;;;AAIA,OAAKD,KAAL,GAAaA,KAAb;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBAP,iBAAiB,CAACS,WAAlB,GAAgC,UAC9BC,aAD8B,EAE9BT,QAF8B,EAG9BU,KAH8B,EAI9BT,OAJ8B,EAK9BC,CAL8B,EAM9BC,CAN8B,EAO9BC,KAP8B,EAQ9BO,aAR8B,EAS9BC,YAT8B,EAU9B;AACA,MAAIN,KAAK,GAAGG,aAAZ;;AACA,MAAI,CAACZ,OAAO,CAACY,aAAD,CAAZ,EAA6B;AAC3BH,IAAAA,KAAK,GAAG,IAAIP,iBAAJ,CACNC,QADM,EAENC,OAFM,EAGNC,CAHM,EAINC,CAJM,EAKNC,KALM,EAMN,CANM,EAONQ,YAPM,CAAR;AASD,GAVD,MAUO;AACLN,IAAAA,KAAK,CAACN,QAAN,GAAiBA,QAAjB;AACAM,IAAAA,KAAK,CAACL,OAAN,GAAgBA,OAAhB;AACAK,IAAAA,KAAK,CAACJ,CAAN,GAAUA,CAAV;AACAI,IAAAA,KAAK,CAACH,CAAN,GAAUA,CAAV;AACAG,IAAAA,KAAK,CAACF,KAAN,GAAcA,KAAd;AACAE,IAAAA,KAAK,CAACC,KAAN,GAAc,KAAd;AACAD,IAAAA,KAAK,CAACA,KAAN,GAAcM,YAAd;AACA,MAAEN,KAAK,CAACD,YAAR;AACD;;AAED,MAAIK,KAAK,CAACG,iBAAN,GAA0B,CAA9B,EAAiC;AAC/BH,IAAAA,KAAK,CAACI,UAAN,CAAiBR,KAAjB;AACD,GAFD,MAEO;AACLS,IAAAA,OAAO,CAACC,GAAR,CACE,2BACEhB,QAAQ,CAACiB,WAAT,CAAqBC,IADvB,GAEE,KAFF,GAGEpB,WAAW,CAACG,OAAD,CAJf;AAMD;;AAED,MAAIK,KAAK,CAACC,KAAN,IAAeV,OAAO,CAACc,aAAD,CAA1B,EAA2C;AACzCA,IAAAA,aAAa;AACd;;AAED,SAAOL,KAAP;AACD,CAjDD;AAmDA;;;;;;;;;AAOAP,iBAAiB,CAACoB,aAAlB,GAAkC,UAAUV,aAAV,EAAyB;AACzD,MAAIZ,OAAO,CAACY,aAAD,CAAX,EAA4B;AAC1BA,IAAAA,aAAa,CAACJ,YAAd,GAA6B,CAAC,CAA9B;AACD;AACF,CAJD;AAMA;;;;;;AAIA,eAAeN,iBAAf","sourcesContent":["import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport formatError from \"./formatError.js\";\n\n/**\n * Provides details about an error that occurred in an {@link ImageryProvider} or a {@link TerrainProvider}.\n *\n * @alias TileProviderError\n * @constructor\n *\n * @param {ImageryProvider|TerrainProvider} provider The imagery or terrain provider that experienced the error.\n * @param {String} message A message describing the error.\n * @param {Number} [x] The X coordinate of the tile that experienced the error, or undefined if the error\n *        is not specific to a particular tile.\n * @param {Number} [y] The Y coordinate of the tile that experienced the error, or undefined if the error\n *        is not specific to a particular tile.\n * @param {Number} [level] The level of the tile that experienced the error, or undefined if the error\n *        is not specific to a particular tile.\n * @param {Number} [timesRetried=0] The number of times this operation has been retried.\n * @param {Error} [error] The error or exception that occurred, if any.\n */\nfunction TileProviderError(\n  provider,\n  message,\n  x,\n  y,\n  level,\n  timesRetried,\n  error\n) {\n  /**\n   * The {@link ImageryProvider} or {@link TerrainProvider} that experienced the error.\n   * @type {ImageryProvider|TerrainProvider}\n   */\n  this.provider = provider;\n\n  /**\n   * The message describing the error.\n   * @type {String}\n   */\n  this.message = message;\n\n  /**\n   * The X coordinate of the tile that experienced the error.  If the error is not specific\n   * to a particular tile, this property will be undefined.\n   * @type {Number}\n   */\n  this.x = x;\n\n  /**\n   * The Y coordinate of the tile that experienced the error.  If the error is not specific\n   * to a particular tile, this property will be undefined.\n   * @type {Number}\n   */\n  this.y = y;\n\n  /**\n   * The level-of-detail of the tile that experienced the error.  If the error is not specific\n   * to a particular tile, this property will be undefined.\n   * @type {Number}\n   */\n  this.level = level;\n\n  /**\n   * The number of times this operation has been retried.\n   * @type {Number}\n   * @default 0\n   */\n  this.timesRetried = defaultValue(timesRetried, 0);\n\n  /**\n   * True if the failed operation should be retried; otherwise, false.  The imagery or terrain provider\n   * will set the initial value of this property before raising the event, but any listeners\n   * can change it.  The value after the last listener is invoked will be acted upon.\n   * @type {Boolean}\n   * @default false\n   */\n  this.retry = false;\n\n  /**\n   * The error or exception that occurred, if any.\n   * @type {Error}\n   */\n  this.error = error;\n}\n\n/**\n * Handles an error in an {@link ImageryProvider} or {@link TerrainProvider} by raising an event if it has any listeners, or by\n * logging the error to the console if the event has no listeners.  This method also tracks the number\n * of times the operation has been retried and will automatically retry if requested to do so by the\n * event listeners.\n *\n * @param {TileProviderError} previousError The error instance returned by this function the last\n *        time it was called for this error, or undefined if this is the first time this error has\n *        occurred.\n * @param {ImageryProvider|TerrainProvider} provider The imagery or terrain provider that encountered the error.\n * @param {Event} event The event to raise to inform listeners of the error.\n * @param {String} message The message describing the error.\n * @param {Number} x The X coordinate of the tile that experienced the error, or undefined if the\n *        error is not specific to a particular tile.\n * @param {Number} y The Y coordinate of the tile that experienced the error, or undefined if the\n *        error is not specific to a particular tile.\n * @param {Number} level The level-of-detail of the tile that experienced the error, or undefined if the\n *        error is not specific to a particular tile.\n * @param {TileProviderError~RetryFunction} retryFunction The function to call to retry the operation.  If undefined, the\n *        operation will not be retried.\n * @param {Error} [errorDetails] The error or exception that occurred, if any.\n * @returns {TileProviderError} The error instance that was passed to the event listeners and that\n *          should be passed to this function the next time it is called for the same error in order\n *          to track retry counts.\n */\nTileProviderError.handleError = function (\n  previousError,\n  provider,\n  event,\n  message,\n  x,\n  y,\n  level,\n  retryFunction,\n  errorDetails\n) {\n  var error = previousError;\n  if (!defined(previousError)) {\n    error = new TileProviderError(\n      provider,\n      message,\n      x,\n      y,\n      level,\n      0,\n      errorDetails\n    );\n  } else {\n    error.provider = provider;\n    error.message = message;\n    error.x = x;\n    error.y = y;\n    error.level = level;\n    error.retry = false;\n    error.error = errorDetails;\n    ++error.timesRetried;\n  }\n\n  if (event.numberOfListeners > 0) {\n    event.raiseEvent(error);\n  } else {\n    console.log(\n      'An error occurred in \"' +\n        provider.constructor.name +\n        '\": ' +\n        formatError(message)\n    );\n  }\n\n  if (error.retry && defined(retryFunction)) {\n    retryFunction();\n  }\n\n  return error;\n};\n\n/**\n * Handles success of an operation by resetting the retry count of a previous error, if any.  This way,\n * if the error occurs again in the future, the listeners will be informed that it has not yet been retried.\n *\n * @param {TileProviderError} previousError The previous error, or undefined if this operation has\n *        not previously resulted in an error.\n */\nTileProviderError.handleSuccess = function (previousError) {\n  if (defined(previousError)) {\n    previousError.timesRetried = -1;\n  }\n};\n\n/**\n * A function that will be called to retry the operation.\n * @callback TileProviderError~RetryFunction\n */\nexport default TileProviderError;\n"]},"metadata":{},"sourceType":"module"}