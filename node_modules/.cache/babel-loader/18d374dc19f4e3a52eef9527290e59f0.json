{"ast":null,"code":"import ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n/**\n * Value and type information for per-instance geometry attribute that determines if the geometry instance has a distance display condition.\n *\n * @alias DistanceDisplayConditionGeometryInstanceAttribute\n * @constructor\n *\n * @param {Number} [near=0.0] The near distance.\n * @param {Number} [far=Number.MAX_VALUE] The far distance.\n *\n * @exception {DeveloperError} far must be greater than near.\n *\n * @example\n * var instance = new Cesium.GeometryInstance({\n *   geometry : new Cesium.BoxGeometry({\n *     vertexFormat : Cesium.VertexFormat.POSITION_AND_NORMAL,\n *     minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0),\n *     maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0)\n *   }),\n *   modelMatrix : Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\n *     Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883)), new Cesium.Cartesian3(0.0, 0.0, 1000000.0), new Cesium.Matrix4()),\n *   id : 'box',\n *   attributes : {\n *     distanceDisplayCondition : new Cesium.DistanceDisplayConditionGeometryInstanceAttribute(100.0, 10000.0)\n *   }\n * });\n *\n * @see GeometryInstance\n * @see GeometryInstanceAttribute\n */\n\nfunction DistanceDisplayConditionGeometryInstanceAttribute(near, far) {\n  near = defaultValue(near, 0.0);\n  far = defaultValue(far, Number.MAX_VALUE); //>>includeStart('debug', pragmas.debug);\n\n  if (far <= near) {\n    throw new DeveloperError(\"far distance must be greater than near distance.\");\n  } //>>includeEnd('debug');\n\n  /**\n   * The values for the attributes stored in a typed array.\n   *\n   * @type Float32Array\n   *\n   * @default [0.0, 0.0, Number.MAX_VALUE]\n   */\n\n\n  this.value = new Float32Array([near, far]);\n}\n\nObject.defineProperties(DistanceDisplayConditionGeometryInstanceAttribute.prototype, {\n  /**\n   * The datatype of each component in the attribute, e.g., individual elements in\n   * {@link DistanceDisplayConditionGeometryInstanceAttribute#value}.\n   *\n   * @memberof DistanceDisplayConditionGeometryInstanceAttribute.prototype\n   *\n   * @type {ComponentDatatype}\n   * @readonly\n   *\n   * @default {@link ComponentDatatype.FLOAT}\n   */\n  componentDatatype: {\n    get: function () {\n      return ComponentDatatype.FLOAT;\n    }\n  },\n\n  /**\n   * The number of components in the attributes, i.e., {@link DistanceDisplayConditionGeometryInstanceAttribute#value}.\n   *\n   * @memberof DistanceDisplayConditionGeometryInstanceAttribute.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @default 3\n   */\n  componentsPerAttribute: {\n    get: function () {\n      return 2;\n    }\n  },\n\n  /**\n   * When <code>true</code> and <code>componentDatatype</code> is an integer format,\n   * indicate that the components should be mapped to the range [0, 1] (unsigned)\n   * or [-1, 1] (signed) when they are accessed as floating-point for rendering.\n   *\n   * @memberof DistanceDisplayConditionGeometryInstanceAttribute.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  normalize: {\n    get: function () {\n      return false;\n    }\n  }\n});\n/**\n * Creates a new {@link DistanceDisplayConditionGeometryInstanceAttribute} instance given the provided an enabled flag and {@link DistanceDisplayCondition}.\n *\n * @param {DistanceDisplayCondition} distanceDisplayCondition The distance display condition.\n * @returns {DistanceDisplayConditionGeometryInstanceAttribute} The new {@link DistanceDisplayConditionGeometryInstanceAttribute} instance.\n *\n * @exception {DeveloperError} distanceDisplayCondition.far must be greater than distanceDisplayCondition.near\n *\n * @example\n * var distanceDisplayCondition = new Cesium.DistanceDisplayCondition(100.0, 10000.0);\n * var instance = new Cesium.GeometryInstance({\n *   geometry : geometry,\n *   attributes : {\n *     distanceDisplayCondition : Cesium.DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition)\n *   }\n * });\n */\n\nDistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition = function (distanceDisplayCondition) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(distanceDisplayCondition)) {\n    throw new DeveloperError(\"distanceDisplayCondition is required.\");\n  }\n\n  if (distanceDisplayCondition.far <= distanceDisplayCondition.near) {\n    throw new DeveloperError(\"distanceDisplayCondition.far distance must be greater than distanceDisplayCondition.near distance.\");\n  } //>>includeEnd('debug');\n\n\n  return new DistanceDisplayConditionGeometryInstanceAttribute(distanceDisplayCondition.near, distanceDisplayCondition.far);\n};\n/**\n * Converts a distance display condition to a typed array that can be used to assign a distance display condition attribute.\n *\n * @param {DistanceDisplayCondition} distanceDisplayCondition The distance display condition value.\n * @param {Float32Array} [result] The array to store the result in, if undefined a new instance will be created.\n * @returns {Float32Array} The modified result parameter or a new instance if result was undefined.\n *\n * @example\n * var attributes = primitive.getGeometryInstanceAttributes('an id');\n * attributes.distanceDisplayCondition = Cesium.DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n */\n\n\nDistanceDisplayConditionGeometryInstanceAttribute.toValue = function (distanceDisplayCondition, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(distanceDisplayCondition)) {\n    throw new DeveloperError(\"distanceDisplayCondition is required.\");\n  } //>>includeEnd('debug');\n\n\n  if (!defined(result)) {\n    return new Float32Array([distanceDisplayCondition.near, distanceDisplayCondition.far]);\n  }\n\n  result[0] = distanceDisplayCondition.near;\n  result[1] = distanceDisplayCondition.far;\n  return result;\n};\n\nexport default DistanceDisplayConditionGeometryInstanceAttribute;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/DistanceDisplayConditionGeometryInstanceAttribute.js"],"names":["ComponentDatatype","defaultValue","defined","DeveloperError","DistanceDisplayConditionGeometryInstanceAttribute","near","far","Number","MAX_VALUE","value","Float32Array","Object","defineProperties","prototype","componentDatatype","get","FLOAT","componentsPerAttribute","normalize","fromDistanceDisplayCondition","distanceDisplayCondition","toValue","result"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,wBAA9B;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAASC,iDAAT,CAA2DC,IAA3D,EAAiEC,GAAjE,EAAsE;AACpED,EAAAA,IAAI,GAAGJ,YAAY,CAACI,IAAD,EAAO,GAAP,CAAnB;AACAC,EAAAA,GAAG,GAAGL,YAAY,CAACK,GAAD,EAAMC,MAAM,CAACC,SAAb,CAAlB,CAFoE,CAIpE;;AACA,MAAIF,GAAG,IAAID,IAAX,EAAiB;AACf,UAAM,IAAIF,cAAJ,CACJ,kDADI,CAAN;AAGD,GATmE,CAUpE;;AAEA;;;;;;;;;AAOA,OAAKM,KAAL,GAAa,IAAIC,YAAJ,CAAiB,CAACL,IAAD,EAAOC,GAAP,CAAjB,CAAb;AACD;;AAEDK,MAAM,CAACC,gBAAP,CACER,iDAAiD,CAACS,SADpD,EAEE;AACE;;;;;;;;;;;AAWAC,EAAAA,iBAAiB,EAAE;AACjBC,IAAAA,GAAG,EAAE,YAAY;AACf,aAAOf,iBAAiB,CAACgB,KAAzB;AACD;AAHgB,GAZrB;;AAkBE;;;;;;;;;;AAUAC,EAAAA,sBAAsB,EAAE;AACtBF,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,CAAP;AACD;AAHqB,GA5B1B;;AAkCE;;;;;;;;;;;;AAYAG,EAAAA,SAAS,EAAE;AACTH,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAP;AACD;AAHQ;AA9Cb,CAFF;AAwDA;;;;;;;;;;;;;;;;;;AAiBAX,iDAAiD,CAACe,4BAAlD,GAAiF,UAC/EC,wBAD+E,EAE/E;AACA;AACA,MAAI,CAAClB,OAAO,CAACkB,wBAAD,CAAZ,EAAwC;AACtC,UAAM,IAAIjB,cAAJ,CAAmB,uCAAnB,CAAN;AACD;;AACD,MAAIiB,wBAAwB,CAACd,GAAzB,IAAgCc,wBAAwB,CAACf,IAA7D,EAAmE;AACjE,UAAM,IAAIF,cAAJ,CACJ,oGADI,CAAN;AAGD,GATD,CAUA;;;AAEA,SAAO,IAAIC,iDAAJ,CACLgB,wBAAwB,CAACf,IADpB,EAELe,wBAAwB,CAACd,GAFpB,CAAP;AAID,CAlBD;AAoBA;;;;;;;;;;;;;AAWAF,iDAAiD,CAACiB,OAAlD,GAA4D,UAC1DD,wBAD0D,EAE1DE,MAF0D,EAG1D;AACA;AACA,MAAI,CAACpB,OAAO,CAACkB,wBAAD,CAAZ,EAAwC;AACtC,UAAM,IAAIjB,cAAJ,CAAmB,uCAAnB,CAAN;AACD,GAJD,CAKA;;;AAEA,MAAI,CAACD,OAAO,CAACoB,MAAD,CAAZ,EAAsB;AACpB,WAAO,IAAIZ,YAAJ,CAAiB,CACtBU,wBAAwB,CAACf,IADH,EAEtBe,wBAAwB,CAACd,GAFH,CAAjB,CAAP;AAID;;AACDgB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYF,wBAAwB,CAACf,IAArC;AACAiB,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYF,wBAAwB,CAACd,GAArC;AACA,SAAOgB,MAAP;AACD,CAnBD;;AAoBA,eAAelB,iDAAf","sourcesContent":["import ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Value and type information for per-instance geometry attribute that determines if the geometry instance has a distance display condition.\n *\n * @alias DistanceDisplayConditionGeometryInstanceAttribute\n * @constructor\n *\n * @param {Number} [near=0.0] The near distance.\n * @param {Number} [far=Number.MAX_VALUE] The far distance.\n *\n * @exception {DeveloperError} far must be greater than near.\n *\n * @example\n * var instance = new Cesium.GeometryInstance({\n *   geometry : new Cesium.BoxGeometry({\n *     vertexFormat : Cesium.VertexFormat.POSITION_AND_NORMAL,\n *     minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0),\n *     maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0)\n *   }),\n *   modelMatrix : Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\n *     Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883)), new Cesium.Cartesian3(0.0, 0.0, 1000000.0), new Cesium.Matrix4()),\n *   id : 'box',\n *   attributes : {\n *     distanceDisplayCondition : new Cesium.DistanceDisplayConditionGeometryInstanceAttribute(100.0, 10000.0)\n *   }\n * });\n *\n * @see GeometryInstance\n * @see GeometryInstanceAttribute\n */\nfunction DistanceDisplayConditionGeometryInstanceAttribute(near, far) {\n  near = defaultValue(near, 0.0);\n  far = defaultValue(far, Number.MAX_VALUE);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (far <= near) {\n    throw new DeveloperError(\n      \"far distance must be greater than near distance.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  /**\n   * The values for the attributes stored in a typed array.\n   *\n   * @type Float32Array\n   *\n   * @default [0.0, 0.0, Number.MAX_VALUE]\n   */\n  this.value = new Float32Array([near, far]);\n}\n\nObject.defineProperties(\n  DistanceDisplayConditionGeometryInstanceAttribute.prototype,\n  {\n    /**\n     * The datatype of each component in the attribute, e.g., individual elements in\n     * {@link DistanceDisplayConditionGeometryInstanceAttribute#value}.\n     *\n     * @memberof DistanceDisplayConditionGeometryInstanceAttribute.prototype\n     *\n     * @type {ComponentDatatype}\n     * @readonly\n     *\n     * @default {@link ComponentDatatype.FLOAT}\n     */\n    componentDatatype: {\n      get: function () {\n        return ComponentDatatype.FLOAT;\n      },\n    },\n\n    /**\n     * The number of components in the attributes, i.e., {@link DistanceDisplayConditionGeometryInstanceAttribute#value}.\n     *\n     * @memberof DistanceDisplayConditionGeometryInstanceAttribute.prototype\n     *\n     * @type {Number}\n     * @readonly\n     *\n     * @default 3\n     */\n    componentsPerAttribute: {\n      get: function () {\n        return 2;\n      },\n    },\n\n    /**\n     * When <code>true</code> and <code>componentDatatype</code> is an integer format,\n     * indicate that the components should be mapped to the range [0, 1] (unsigned)\n     * or [-1, 1] (signed) when they are accessed as floating-point for rendering.\n     *\n     * @memberof DistanceDisplayConditionGeometryInstanceAttribute.prototype\n     *\n     * @type {Boolean}\n     * @readonly\n     *\n     * @default false\n     */\n    normalize: {\n      get: function () {\n        return false;\n      },\n    },\n  }\n);\n\n/**\n * Creates a new {@link DistanceDisplayConditionGeometryInstanceAttribute} instance given the provided an enabled flag and {@link DistanceDisplayCondition}.\n *\n * @param {DistanceDisplayCondition} distanceDisplayCondition The distance display condition.\n * @returns {DistanceDisplayConditionGeometryInstanceAttribute} The new {@link DistanceDisplayConditionGeometryInstanceAttribute} instance.\n *\n * @exception {DeveloperError} distanceDisplayCondition.far must be greater than distanceDisplayCondition.near\n *\n * @example\n * var distanceDisplayCondition = new Cesium.DistanceDisplayCondition(100.0, 10000.0);\n * var instance = new Cesium.GeometryInstance({\n *   geometry : geometry,\n *   attributes : {\n *     distanceDisplayCondition : Cesium.DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition)\n *   }\n * });\n */\nDistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition = function (\n  distanceDisplayCondition\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(distanceDisplayCondition)) {\n    throw new DeveloperError(\"distanceDisplayCondition is required.\");\n  }\n  if (distanceDisplayCondition.far <= distanceDisplayCondition.near) {\n    throw new DeveloperError(\n      \"distanceDisplayCondition.far distance must be greater than distanceDisplayCondition.near distance.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  return new DistanceDisplayConditionGeometryInstanceAttribute(\n    distanceDisplayCondition.near,\n    distanceDisplayCondition.far\n  );\n};\n\n/**\n * Converts a distance display condition to a typed array that can be used to assign a distance display condition attribute.\n *\n * @param {DistanceDisplayCondition} distanceDisplayCondition The distance display condition value.\n * @param {Float32Array} [result] The array to store the result in, if undefined a new instance will be created.\n * @returns {Float32Array} The modified result parameter or a new instance if result was undefined.\n *\n * @example\n * var attributes = primitive.getGeometryInstanceAttributes('an id');\n * attributes.distanceDisplayCondition = Cesium.DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n */\nDistanceDisplayConditionGeometryInstanceAttribute.toValue = function (\n  distanceDisplayCondition,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(distanceDisplayCondition)) {\n    throw new DeveloperError(\"distanceDisplayCondition is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Float32Array([\n      distanceDisplayCondition.near,\n      distanceDisplayCondition.far,\n    ]);\n  }\n  result[0] = distanceDisplayCondition.near;\n  result[1] = distanceDisplayCondition.far;\n  return result;\n};\nexport default DistanceDisplayConditionGeometryInstanceAttribute;\n"]},"metadata":{},"sourceType":"module"}