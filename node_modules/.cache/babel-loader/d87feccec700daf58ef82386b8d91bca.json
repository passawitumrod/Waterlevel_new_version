{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport Transforms from \"../Core/Transforms.js\";\n/**\n * The interface for all {@link Property} objects that define a world\n * location as a {@link Cartesian3} with an associated {@link ReferenceFrame}.\n * This type defines an interface and cannot be instantiated directly.\n *\n * @alias PositionProperty\n * @constructor\n * @abstract\n *\n * @see CompositePositionProperty\n * @see ConstantPositionProperty\n * @see SampledPositionProperty\n * @see TimeIntervalCollectionPositionProperty\n */\n\nfunction PositionProperty() {\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(PositionProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof PositionProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof PositionProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets the reference frame that the position is defined in.\n   * @memberof PositionProperty.prototype\n   * @type {ReferenceFrame}\n   */\n  referenceFrame: {\n    get: DeveloperError.throwInstantiationError\n  }\n});\n/**\n * Gets the value of the property at the provided time in the fixed frame.\n * @function\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\nPositionProperty.prototype.getValue = DeveloperError.throwInstantiationError;\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n * @function\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\nPositionProperty.prototype.getValueInReferenceFrame = DeveloperError.throwInstantiationError;\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n * @function\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\nPositionProperty.prototype.equals = DeveloperError.throwInstantiationError;\nvar scratchMatrix3 = new Matrix3();\n/**\n * @private\n */\n\nPositionProperty.convertToReferenceFrame = function (time, value, inputFrame, outputFrame, result) {\n  if (!defined(value)) {\n    return value;\n  }\n\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n\n  if (inputFrame === outputFrame) {\n    return Cartesian3.clone(value, result);\n  }\n\n  var icrfToFixed = Transforms.computeIcrfToFixedMatrix(time, scratchMatrix3);\n\n  if (!defined(icrfToFixed)) {\n    icrfToFixed = Transforms.computeTemeToPseudoFixedMatrix(time, scratchMatrix3);\n  }\n\n  if (inputFrame === ReferenceFrame.INERTIAL) {\n    return Matrix3.multiplyByVector(icrfToFixed, value, result);\n  }\n\n  if (inputFrame === ReferenceFrame.FIXED) {\n    return Matrix3.multiplyByVector(Matrix3.transpose(icrfToFixed, scratchMatrix3), value, result);\n  }\n};\n\nexport default PositionProperty;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/DataSources/PositionProperty.js"],"names":["Cartesian3","defined","DeveloperError","Matrix3","ReferenceFrame","Transforms","PositionProperty","throwInstantiationError","Object","defineProperties","prototype","isConstant","get","definitionChanged","referenceFrame","getValue","getValueInReferenceFrame","equals","scratchMatrix3","convertToReferenceFrame","time","value","inputFrame","outputFrame","result","clone","icrfToFixed","computeIcrfToFixedMatrix","computeTemeToPseudoFixedMatrix","INERTIAL","multiplyByVector","FIXED","transpose"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,uBAAvB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAEA;;;;;;;;;;;;;;;AAcA,SAASC,gBAAT,GAA4B;AAC1BJ,EAAAA,cAAc,CAACK,uBAAf;AACD;;AAEDC,MAAM,CAACC,gBAAP,CAAwBH,gBAAgB,CAACI,SAAzC,EAAoD;AAClD;;;;;;;;AAQAC,EAAAA,UAAU,EAAE;AACVC,IAAAA,GAAG,EAAEV,cAAc,CAACK;AADV,GATsC;;AAYlD;;;;;;;;;AASAM,EAAAA,iBAAiB,EAAE;AACjBD,IAAAA,GAAG,EAAEV,cAAc,CAACK;AADH,GArB+B;;AAwBlD;;;;;AAKAO,EAAAA,cAAc,EAAE;AACdF,IAAAA,GAAG,EAAEV,cAAc,CAACK;AADN;AA7BkC,CAApD;AAkCA;;;;;;;;;AAQAD,gBAAgB,CAACI,SAAjB,CAA2BK,QAA3B,GAAsCb,cAAc,CAACK,uBAArD;AAEA;;;;;;;;;;AASAD,gBAAgB,CAACI,SAAjB,CAA2BM,wBAA3B,GACEd,cAAc,CAACK,uBADjB;AAGA;;;;;;;;;AAQAD,gBAAgB,CAACI,SAAjB,CAA2BO,MAA3B,GAAoCf,cAAc,CAACK,uBAAnD;AAEA,IAAIW,cAAc,GAAG,IAAIf,OAAJ,EAArB;AAEA;;;;AAGAG,gBAAgB,CAACa,uBAAjB,GAA2C,UACzCC,IADyC,EAEzCC,KAFyC,EAGzCC,UAHyC,EAIzCC,WAJyC,EAKzCC,MALyC,EAMzC;AACA,MAAI,CAACvB,OAAO,CAACoB,KAAD,CAAZ,EAAqB;AACnB,WAAOA,KAAP;AACD;;AACD,MAAI,CAACpB,OAAO,CAACuB,MAAD,CAAZ,EAAsB;AACpBA,IAAAA,MAAM,GAAG,IAAIxB,UAAJ,EAAT;AACD;;AAED,MAAIsB,UAAU,KAAKC,WAAnB,EAAgC;AAC9B,WAAOvB,UAAU,CAACyB,KAAX,CAAiBJ,KAAjB,EAAwBG,MAAxB,CAAP;AACD;;AAED,MAAIE,WAAW,GAAGrB,UAAU,CAACsB,wBAAX,CAAoCP,IAApC,EAA0CF,cAA1C,CAAlB;;AACA,MAAI,CAACjB,OAAO,CAACyB,WAAD,CAAZ,EAA2B;AACzBA,IAAAA,WAAW,GAAGrB,UAAU,CAACuB,8BAAX,CACZR,IADY,EAEZF,cAFY,CAAd;AAID;;AACD,MAAII,UAAU,KAAKlB,cAAc,CAACyB,QAAlC,EAA4C;AAC1C,WAAO1B,OAAO,CAAC2B,gBAAR,CAAyBJ,WAAzB,EAAsCL,KAAtC,EAA6CG,MAA7C,CAAP;AACD;;AACD,MAAIF,UAAU,KAAKlB,cAAc,CAAC2B,KAAlC,EAAyC;AACvC,WAAO5B,OAAO,CAAC2B,gBAAR,CACL3B,OAAO,CAAC6B,SAAR,CAAkBN,WAAlB,EAA+BR,cAA/B,CADK,EAELG,KAFK,EAGLG,MAHK,CAAP;AAKD;AACF,CAnCD;;AAoCA,eAAelB,gBAAf","sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport Transforms from \"../Core/Transforms.js\";\n\n/**\n * The interface for all {@link Property} objects that define a world\n * location as a {@link Cartesian3} with an associated {@link ReferenceFrame}.\n * This type defines an interface and cannot be instantiated directly.\n *\n * @alias PositionProperty\n * @constructor\n * @abstract\n *\n * @see CompositePositionProperty\n * @see ConstantPositionProperty\n * @see SampledPositionProperty\n * @see TimeIntervalCollectionPositionProperty\n */\nfunction PositionProperty() {\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(PositionProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof PositionProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof PositionProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets the reference frame that the position is defined in.\n   * @memberof PositionProperty.prototype\n   * @type {ReferenceFrame}\n   */\n  referenceFrame: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\n/**\n * Gets the value of the property at the provided time in the fixed frame.\n * @function\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPositionProperty.prototype.getValue = DeveloperError.throwInstantiationError;\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n * @function\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPositionProperty.prototype.getValueInReferenceFrame =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n * @function\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPositionProperty.prototype.equals = DeveloperError.throwInstantiationError;\n\nvar scratchMatrix3 = new Matrix3();\n\n/**\n * @private\n */\nPositionProperty.convertToReferenceFrame = function (\n  time,\n  value,\n  inputFrame,\n  outputFrame,\n  result\n) {\n  if (!defined(value)) {\n    return value;\n  }\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n\n  if (inputFrame === outputFrame) {\n    return Cartesian3.clone(value, result);\n  }\n\n  var icrfToFixed = Transforms.computeIcrfToFixedMatrix(time, scratchMatrix3);\n  if (!defined(icrfToFixed)) {\n    icrfToFixed = Transforms.computeTemeToPseudoFixedMatrix(\n      time,\n      scratchMatrix3\n    );\n  }\n  if (inputFrame === ReferenceFrame.INERTIAL) {\n    return Matrix3.multiplyByVector(icrfToFixed, value, result);\n  }\n  if (inputFrame === ReferenceFrame.FIXED) {\n    return Matrix3.multiplyByVector(\n      Matrix3.transpose(icrfToFixed, scratchMatrix3),\n      value,\n      result\n    );\n  }\n};\nexport default PositionProperty;\n"]},"metadata":{},"sourceType":"module"}