{"ast":null,"code":"import defined from \"./defined.js\";\nimport isBitSet from \"./isBitSet.js\"; // Bitmask for checking tile properties\n\nvar childrenBitmasks = [0x01, 0x02, 0x04, 0x08];\nvar anyChildBitmask = 0x0f;\nvar cacheFlagBitmask = 0x10; // True if there is a child subtree\n\nvar imageBitmask = 0x40;\nvar terrainBitmask = 0x80;\n/**\n * Contains information about each tile from a Google Earth Enterprise server\n *\n * @param {Number} bits Bitmask that contains the type of data and available children for each tile.\n * @param {Number} cnodeVersion Version of the request for subtree metadata.\n * @param {Number} imageryVersion Version of the request for imagery tile.\n * @param {Number} terrainVersion Version of the request for terrain tile.\n * @param {Number} imageryProvider Id of imagery provider.\n * @param {Number} terrainProvider Id of terrain provider.\n *\n * @private\n */\n\nfunction GoogleEarthEnterpriseTileInformation(bits, cnodeVersion, imageryVersion, terrainVersion, imageryProvider, terrainProvider) {\n  this._bits = bits;\n  this.cnodeVersion = cnodeVersion;\n  this.imageryVersion = imageryVersion;\n  this.terrainVersion = terrainVersion;\n  this.imageryProvider = imageryProvider;\n  this.terrainProvider = terrainProvider;\n  this.ancestorHasTerrain = false; // Set it later once we find its parent\n\n  this.terrainState = undefined;\n}\n/**\n * Creates GoogleEarthEnterpriseTileInformation from an object\n *\n * @param {Object} info Object to be cloned\n * @param {GoogleEarthEnterpriseTileInformation} [result] The object onto which to store the result.\n * @returns {GoogleEarthEnterpriseTileInformation} The modified result parameter or a new GoogleEarthEnterpriseTileInformation instance if none was provided.\n */\n\n\nGoogleEarthEnterpriseTileInformation.clone = function (info, result) {\n  if (!defined(result)) {\n    result = new GoogleEarthEnterpriseTileInformation(info._bits, info.cnodeVersion, info.imageryVersion, info.terrainVersion, info.imageryProvider, info.terrainProvider);\n  } else {\n    result._bits = info._bits;\n    result.cnodeVersion = info.cnodeVersion;\n    result.imageryVersion = info.imageryVersion;\n    result.terrainVersion = info.terrainVersion;\n    result.imageryProvider = info.imageryProvider;\n    result.terrainProvider = info.terrainProvider;\n  }\n\n  result.ancestorHasTerrain = info.ancestorHasTerrain;\n  result.terrainState = info.terrainState;\n  return result;\n};\n/**\n * Sets the parent for the tile\n *\n * @param {GoogleEarthEnterpriseTileInformation} parent Parent tile\n */\n\n\nGoogleEarthEnterpriseTileInformation.prototype.setParent = function (parent) {\n  this.ancestorHasTerrain = parent.ancestorHasTerrain || this.hasTerrain();\n};\n/**\n * Gets whether a subtree is available\n *\n * @returns {Boolean} true if subtree is available, false otherwise.\n */\n\n\nGoogleEarthEnterpriseTileInformation.prototype.hasSubtree = function () {\n  return isBitSet(this._bits, cacheFlagBitmask);\n};\n/**\n * Gets whether imagery is available\n *\n * @returns {Boolean} true if imagery is available, false otherwise.\n */\n\n\nGoogleEarthEnterpriseTileInformation.prototype.hasImagery = function () {\n  return isBitSet(this._bits, imageBitmask);\n};\n/**\n * Gets whether terrain is available\n *\n * @returns {Boolean} true if terrain is available, false otherwise.\n */\n\n\nGoogleEarthEnterpriseTileInformation.prototype.hasTerrain = function () {\n  return isBitSet(this._bits, terrainBitmask);\n};\n/**\n * Gets whether any children are present\n *\n * @returns {Boolean} true if any children are available, false otherwise.\n */\n\n\nGoogleEarthEnterpriseTileInformation.prototype.hasChildren = function () {\n  return isBitSet(this._bits, anyChildBitmask);\n};\n/**\n * Gets whether a specified child is available\n *\n * @param {Number} index Index of child tile\n *\n * @returns {Boolean} true if child is available, false otherwise\n */\n\n\nGoogleEarthEnterpriseTileInformation.prototype.hasChild = function (index) {\n  return isBitSet(this._bits, childrenBitmasks[index]);\n};\n/**\n * Gets bitmask containing children\n *\n * @returns {Number} Children bitmask\n */\n\n\nGoogleEarthEnterpriseTileInformation.prototype.getChildBitmask = function () {\n  return this._bits & anyChildBitmask;\n};\n\nexport default GoogleEarthEnterpriseTileInformation;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/GoogleEarthEnterpriseTileInformation.js"],"names":["defined","isBitSet","childrenBitmasks","anyChildBitmask","cacheFlagBitmask","imageBitmask","terrainBitmask","GoogleEarthEnterpriseTileInformation","bits","cnodeVersion","imageryVersion","terrainVersion","imageryProvider","terrainProvider","_bits","ancestorHasTerrain","terrainState","undefined","clone","info","result","prototype","setParent","parent","hasTerrain","hasSubtree","hasImagery","hasChildren","hasChild","index","getChildBitmask"],"mappings":"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","sourcesContent":["import defined from \"./defined.js\";\nimport isBitSet from \"./isBitSet.js\";\n\n// Bitmask for checking tile properties\nvar childrenBitmasks = [0x01, 0x02, 0x04, 0x08];\nvar anyChildBitmask = 0x0f;\nvar cacheFlagBitmask = 0x10; // True if there is a child subtree\nvar imageBitmask = 0x40;\nvar terrainBitmask = 0x80;\n\n/**\n * Contains information about each tile from a Google Earth Enterprise server\n *\n * @param {Number} bits Bitmask that contains the type of data and available children for each tile.\n * @param {Number} cnodeVersion Version of the request for subtree metadata.\n * @param {Number} imageryVersion Version of the request for imagery tile.\n * @param {Number} terrainVersion Version of the request for terrain tile.\n * @param {Number} imageryProvider Id of imagery provider.\n * @param {Number} terrainProvider Id of terrain provider.\n *\n * @private\n */\nfunction GoogleEarthEnterpriseTileInformation(\n  bits,\n  cnodeVersion,\n  imageryVersion,\n  terrainVersion,\n  imageryProvider,\n  terrainProvider\n) {\n  this._bits = bits;\n  this.cnodeVersion = cnodeVersion;\n  this.imageryVersion = imageryVersion;\n  this.terrainVersion = terrainVersion;\n  this.imageryProvider = imageryProvider;\n  this.terrainProvider = terrainProvider;\n  this.ancestorHasTerrain = false; // Set it later once we find its parent\n  this.terrainState = undefined;\n}\n\n/**\n * Creates GoogleEarthEnterpriseTileInformation from an object\n *\n * @param {Object} info Object to be cloned\n * @param {GoogleEarthEnterpriseTileInformation} [result] The object onto which to store the result.\n * @returns {GoogleEarthEnterpriseTileInformation} The modified result parameter or a new GoogleEarthEnterpriseTileInformation instance if none was provided.\n */\nGoogleEarthEnterpriseTileInformation.clone = function (info, result) {\n  if (!defined(result)) {\n    result = new GoogleEarthEnterpriseTileInformation(\n      info._bits,\n      info.cnodeVersion,\n      info.imageryVersion,\n      info.terrainVersion,\n      info.imageryProvider,\n      info.terrainProvider\n    );\n  } else {\n    result._bits = info._bits;\n    result.cnodeVersion = info.cnodeVersion;\n    result.imageryVersion = info.imageryVersion;\n    result.terrainVersion = info.terrainVersion;\n    result.imageryProvider = info.imageryProvider;\n    result.terrainProvider = info.terrainProvider;\n  }\n  result.ancestorHasTerrain = info.ancestorHasTerrain;\n  result.terrainState = info.terrainState;\n\n  return result;\n};\n\n/**\n * Sets the parent for the tile\n *\n * @param {GoogleEarthEnterpriseTileInformation} parent Parent tile\n */\nGoogleEarthEnterpriseTileInformation.prototype.setParent = function (parent) {\n  this.ancestorHasTerrain = parent.ancestorHasTerrain || this.hasTerrain();\n};\n\n/**\n * Gets whether a subtree is available\n *\n * @returns {Boolean} true if subtree is available, false otherwise.\n */\nGoogleEarthEnterpriseTileInformation.prototype.hasSubtree = function () {\n  return isBitSet(this._bits, cacheFlagBitmask);\n};\n\n/**\n * Gets whether imagery is available\n *\n * @returns {Boolean} true if imagery is available, false otherwise.\n */\nGoogleEarthEnterpriseTileInformation.prototype.hasImagery = function () {\n  return isBitSet(this._bits, imageBitmask);\n};\n\n/**\n * Gets whether terrain is available\n *\n * @returns {Boolean} true if terrain is available, false otherwise.\n */\nGoogleEarthEnterpriseTileInformation.prototype.hasTerrain = function () {\n  return isBitSet(this._bits, terrainBitmask);\n};\n\n/**\n * Gets whether any children are present\n *\n * @returns {Boolean} true if any children are available, false otherwise.\n */\nGoogleEarthEnterpriseTileInformation.prototype.hasChildren = function () {\n  return isBitSet(this._bits, anyChildBitmask);\n};\n\n/**\n * Gets whether a specified child is available\n *\n * @param {Number} index Index of child tile\n *\n * @returns {Boolean} true if child is available, false otherwise\n */\nGoogleEarthEnterpriseTileInformation.prototype.hasChild = function (index) {\n  return isBitSet(this._bits, childrenBitmasks[index]);\n};\n\n/**\n * Gets bitmask containing children\n *\n * @returns {Number} Children bitmask\n */\nGoogleEarthEnterpriseTileInformation.prototype.getChildBitmask = function () {\n  return this._bits & anyChildBitmask;\n};\nexport default GoogleEarthEnterpriseTileInformation;\n"]},"metadata":{},"sourceType":"module"}