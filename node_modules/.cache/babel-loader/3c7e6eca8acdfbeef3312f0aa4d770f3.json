{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\n/**\n * A simple map projection where longitude and latitude are linearly mapped to X and Y by multiplying\n * them by the {@link Ellipsoid#maximumRadius}.  This projection\n * is commonly known as geographic, equirectangular, equidistant cylindrical, or plate carrée.  It\n * is also known as EPSG:4326.\n *\n * @alias GeographicProjection\n * @constructor\n *\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid.\n *\n * @see WebMercatorProjection\n */\n\nfunction GeographicProjection(ellipsoid) {\n  this._ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n  this._semimajorAxis = this._ellipsoid.maximumRadius;\n  this._oneOverSemimajorAxis = 1.0 / this._semimajorAxis;\n}\n\nObject.defineProperties(GeographicProjection.prototype, {\n  /**\n   * Gets the {@link Ellipsoid}.\n   *\n   * @memberof GeographicProjection.prototype\n   *\n   * @type {Ellipsoid}\n   * @readonly\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    }\n  }\n});\n/**\n * Projects a set of {@link Cartographic} coordinates, in radians, to map coordinates, in meters.\n * X and Y are the longitude and latitude, respectively, multiplied by the maximum radius of the\n * ellipsoid.  Z is the unmodified height.\n *\n * @param {Cartographic} cartographic The coordinates to project.\n * @param {Cartesian3} [result] An instance into which to copy the result.  If this parameter is\n *        undefined, a new instance is created and returned.\n * @returns {Cartesian3} The projected coordinates.  If the result parameter is not undefined, the\n *          coordinates are copied there and that instance is returned.  Otherwise, a new instance is\n *          created and returned.\n */\n\nGeographicProjection.prototype.project = function (cartographic, result) {\n  // Actually this is the special case of equidistant cylindrical called the plate carree\n  var semimajorAxis = this._semimajorAxis;\n  var x = cartographic.longitude * semimajorAxis;\n  var y = cartographic.latitude * semimajorAxis;\n  var z = cartographic.height;\n\n  if (!defined(result)) {\n    return new Cartesian3(x, y, z);\n  }\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  return result;\n};\n/**\n * Unprojects a set of projected {@link Cartesian3} coordinates, in meters, to {@link Cartographic}\n * coordinates, in radians.  Longitude and Latitude are the X and Y coordinates, respectively,\n * divided by the maximum radius of the ellipsoid.  Height is the unmodified Z coordinate.\n *\n * @param {Cartesian3} cartesian The Cartesian position to unproject with height (z) in meters.\n * @param {Cartographic} [result] An instance into which to copy the result.  If this parameter is\n *        undefined, a new instance is created and returned.\n * @returns {Cartographic} The unprojected coordinates.  If the result parameter is not undefined, the\n *          coordinates are copied there and that instance is returned.  Otherwise, a new instance is\n *          created and returned.\n */\n\n\nGeographicProjection.prototype.unproject = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(cartesian)) {\n    throw new DeveloperError(\"cartesian is required\");\n  } //>>includeEnd('debug');\n\n\n  var oneOverEarthSemimajorAxis = this._oneOverSemimajorAxis;\n  var longitude = cartesian.x * oneOverEarthSemimajorAxis;\n  var latitude = cartesian.y * oneOverEarthSemimajorAxis;\n  var height = cartesian.z;\n\n  if (!defined(result)) {\n    return new Cartographic(longitude, latitude, height);\n  }\n\n  result.longitude = longitude;\n  result.latitude = latitude;\n  result.height = height;\n  return result;\n};\n\nexport default GeographicProjection;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/GeographicProjection.js"],"names":["Cartesian3","Cartographic","defaultValue","defined","DeveloperError","Ellipsoid","GeographicProjection","ellipsoid","_ellipsoid","WGS84","_semimajorAxis","maximumRadius","_oneOverSemimajorAxis","Object","defineProperties","prototype","get","project","cartographic","result","semimajorAxis","x","longitude","y","latitude","z","height","unproject","cartesian","oneOverEarthSemimajorAxis"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,iBAAvB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA;;;;;;;;;;;;;;AAaA,SAASC,oBAAT,CAA8BC,SAA9B,EAAyC;AACvC,OAAKC,UAAL,GAAkBN,YAAY,CAACK,SAAD,EAAYF,SAAS,CAACI,KAAtB,CAA9B;AACA,OAAKC,cAAL,GAAsB,KAAKF,UAAL,CAAgBG,aAAtC;AACA,OAAKC,qBAAL,GAA6B,MAAM,KAAKF,cAAxC;AACD;;AAEDG,MAAM,CAACC,gBAAP,CAAwBR,oBAAoB,CAACS,SAA7C,EAAwD;AACtD;;;;;;;;AAQAR,EAAAA,SAAS,EAAE;AACTS,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKR,UAAZ;AACD;AAHQ;AAT2C,CAAxD;AAgBA;;;;;;;;;;;;;AAYAF,oBAAoB,CAACS,SAArB,CAA+BE,OAA/B,GAAyC,UAAUC,YAAV,EAAwBC,MAAxB,EAAgC;AACvE;AACA,MAAIC,aAAa,GAAG,KAAKV,cAAzB;AACA,MAAIW,CAAC,GAAGH,YAAY,CAACI,SAAb,GAAyBF,aAAjC;AACA,MAAIG,CAAC,GAAGL,YAAY,CAACM,QAAb,GAAwBJ,aAAhC;AACA,MAAIK,CAAC,GAAGP,YAAY,CAACQ,MAArB;;AAEA,MAAI,CAACvB,OAAO,CAACgB,MAAD,CAAZ,EAAsB;AACpB,WAAO,IAAInB,UAAJ,CAAeqB,CAAf,EAAkBE,CAAlB,EAAqBE,CAArB,CAAP;AACD;;AAEDN,EAAAA,MAAM,CAACE,CAAP,GAAWA,CAAX;AACAF,EAAAA,MAAM,CAACI,CAAP,GAAWA,CAAX;AACAJ,EAAAA,MAAM,CAACM,CAAP,GAAWA,CAAX;AACA,SAAON,MAAP;AACD,CAfD;AAiBA;;;;;;;;;;;;;;AAYAb,oBAAoB,CAACS,SAArB,CAA+BY,SAA/B,GAA2C,UAAUC,SAAV,EAAqBT,MAArB,EAA6B;AACtE;AACA,MAAI,CAAChB,OAAO,CAACyB,SAAD,CAAZ,EAAyB;AACvB,UAAM,IAAIxB,cAAJ,CAAmB,uBAAnB,CAAN;AACD,GAJqE,CAKtE;;;AAEA,MAAIyB,yBAAyB,GAAG,KAAKjB,qBAArC;AACA,MAAIU,SAAS,GAAGM,SAAS,CAACP,CAAV,GAAcQ,yBAA9B;AACA,MAAIL,QAAQ,GAAGI,SAAS,CAACL,CAAV,GAAcM,yBAA7B;AACA,MAAIH,MAAM,GAAGE,SAAS,CAACH,CAAvB;;AAEA,MAAI,CAACtB,OAAO,CAACgB,MAAD,CAAZ,EAAsB;AACpB,WAAO,IAAIlB,YAAJ,CAAiBqB,SAAjB,EAA4BE,QAA5B,EAAsCE,MAAtC,CAAP;AACD;;AAEDP,EAAAA,MAAM,CAACG,SAAP,GAAmBA,SAAnB;AACAH,EAAAA,MAAM,CAACK,QAAP,GAAkBA,QAAlB;AACAL,EAAAA,MAAM,CAACO,MAAP,GAAgBA,MAAhB;AACA,SAAOP,MAAP;AACD,CApBD;;AAqBA,eAAeb,oBAAf","sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\n\n/**\n * A simple map projection where longitude and latitude are linearly mapped to X and Y by multiplying\n * them by the {@link Ellipsoid#maximumRadius}.  This projection\n * is commonly known as geographic, equirectangular, equidistant cylindrical, or plate carrée.  It\n * is also known as EPSG:4326.\n *\n * @alias GeographicProjection\n * @constructor\n *\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid.\n *\n * @see WebMercatorProjection\n */\nfunction GeographicProjection(ellipsoid) {\n  this._ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n  this._semimajorAxis = this._ellipsoid.maximumRadius;\n  this._oneOverSemimajorAxis = 1.0 / this._semimajorAxis;\n}\n\nObject.defineProperties(GeographicProjection.prototype, {\n  /**\n   * Gets the {@link Ellipsoid}.\n   *\n   * @memberof GeographicProjection.prototype\n   *\n   * @type {Ellipsoid}\n   * @readonly\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n  },\n});\n\n/**\n * Projects a set of {@link Cartographic} coordinates, in radians, to map coordinates, in meters.\n * X and Y are the longitude and latitude, respectively, multiplied by the maximum radius of the\n * ellipsoid.  Z is the unmodified height.\n *\n * @param {Cartographic} cartographic The coordinates to project.\n * @param {Cartesian3} [result] An instance into which to copy the result.  If this parameter is\n *        undefined, a new instance is created and returned.\n * @returns {Cartesian3} The projected coordinates.  If the result parameter is not undefined, the\n *          coordinates are copied there and that instance is returned.  Otherwise, a new instance is\n *          created and returned.\n */\nGeographicProjection.prototype.project = function (cartographic, result) {\n  // Actually this is the special case of equidistant cylindrical called the plate carree\n  var semimajorAxis = this._semimajorAxis;\n  var x = cartographic.longitude * semimajorAxis;\n  var y = cartographic.latitude * semimajorAxis;\n  var z = cartographic.height;\n\n  if (!defined(result)) {\n    return new Cartesian3(x, y, z);\n  }\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  return result;\n};\n\n/**\n * Unprojects a set of projected {@link Cartesian3} coordinates, in meters, to {@link Cartographic}\n * coordinates, in radians.  Longitude and Latitude are the X and Y coordinates, respectively,\n * divided by the maximum radius of the ellipsoid.  Height is the unmodified Z coordinate.\n *\n * @param {Cartesian3} cartesian The Cartesian position to unproject with height (z) in meters.\n * @param {Cartographic} [result] An instance into which to copy the result.  If this parameter is\n *        undefined, a new instance is created and returned.\n * @returns {Cartographic} The unprojected coordinates.  If the result parameter is not undefined, the\n *          coordinates are copied there and that instance is returned.  Otherwise, a new instance is\n *          created and returned.\n */\nGeographicProjection.prototype.unproject = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(cartesian)) {\n    throw new DeveloperError(\"cartesian is required\");\n  }\n  //>>includeEnd('debug');\n\n  var oneOverEarthSemimajorAxis = this._oneOverSemimajorAxis;\n  var longitude = cartesian.x * oneOverEarthSemimajorAxis;\n  var latitude = cartesian.y * oneOverEarthSemimajorAxis;\n  var height = cartesian.z;\n\n  if (!defined(result)) {\n    return new Cartographic(longitude, latitude, height);\n  }\n\n  result.longitude = longitude;\n  result.latitude = latitude;\n  result.height = height;\n  return result;\n};\nexport default GeographicProjection;\n"]},"metadata":{},"sourceType":"module"}