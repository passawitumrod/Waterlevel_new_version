{"ast":null,"code":"import BoundingSphere from \"../Core/BoundingSphere.js\";\nimport combine from \"../Core/combine.js\";\nimport defined from \"../Core/defined.js\";\nimport EasingFunction from \"../Core/EasingFunction.js\";\n/**\n * @alias KmlTourFlyTo\n * @constructor\n *\n * @param {Number} duration entry duration\n * @param {String} flyToMode KML fly to mode: bounce, smooth, etc\n * @param {KmlCamera|KmlLookAt} view KmlCamera or KmlLookAt\n */\n\nfunction KmlTourFlyTo(duration, flyToMode, view) {\n  this.type = \"KmlTourFlyTo\";\n  this.blocking = true;\n  this.activeCamera = null;\n  this.activeCallback = null;\n  this.duration = duration;\n  this.view = view;\n  this.flyToMode = flyToMode;\n}\n/**\n * Play this playlist entry\n *\n * @param {KmlTourFlyTo~DoneCallback} done function which will be called when playback ends\n * @param {Camera} camera Cesium camera\n * @param {Object} [cameraOptions] which will be merged with camera flyTo options. See {@link Camera#flyTo}\n */\n\n\nKmlTourFlyTo.prototype.play = function (done, camera, cameraOptions) {\n  this.activeCamera = camera;\n\n  if (defined(done) && done !== null) {\n    var self = this;\n\n    this.activeCallback = function (terminated) {\n      delete self.activeCallback;\n      delete self.activeCamera;\n      done(defined(terminated) ? false : terminated);\n    };\n  }\n\n  var options = this.getCameraOptions(cameraOptions);\n\n  if (this.view.headingPitchRoll) {\n    camera.flyTo(options);\n  } else if (this.view.headingPitchRange) {\n    var target = new BoundingSphere(this.view.position);\n    camera.flyToBoundingSphere(target, options);\n  }\n};\n/**\n * Stop execution of curent entry. Cancel camera flyTo\n */\n\n\nKmlTourFlyTo.prototype.stop = function () {\n  if (defined(this.activeCamera)) {\n    this.activeCamera.cancelFlight();\n  }\n\n  if (defined(this.activeCallback)) {\n    this.activeCallback(true);\n  }\n};\n/**\n * Returns options for {@link Camera#flyTo} or {@link Camera#flyToBoundingSphere}\n * depends on this.view type.\n *\n * @param {Object} cameraOptions options to merge with generated. See {@link Camera#flyTo}\n * @returns {Object} {@link Camera#flyTo} or {@link Camera#flyToBoundingSphere} options\n */\n\n\nKmlTourFlyTo.prototype.getCameraOptions = function (cameraOptions) {\n  var options = {\n    duration: this.duration\n  };\n\n  if (defined(this.activeCallback)) {\n    options.complete = this.activeCallback;\n  }\n\n  if (this.flyToMode === \"smooth\") {\n    options.easingFunction = EasingFunction.LINEAR_NONE;\n  }\n\n  if (this.view.headingPitchRoll) {\n    options.destination = this.view.position;\n    options.orientation = this.view.headingPitchRoll;\n  } else if (this.view.headingPitchRange) {\n    options.offset = this.view.headingPitchRange;\n  }\n\n  if (defined(cameraOptions)) {\n    options = combine(options, cameraOptions);\n  }\n\n  return options;\n};\n/**\n * A function that will be executed when the flight completes.\n * @callback KmlTourFlyTo~DoneCallback\n *\n * @param {Boolean} terminated true if {@link KmlTourFlyTo#stop} was\n * called before entry done playback.\n */\n\n\nexport default KmlTourFlyTo;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/DataSources/KmlTourFlyTo.js"],"names":["BoundingSphere","combine","defined","EasingFunction","KmlTourFlyTo","duration","flyToMode","view","type","blocking","activeCamera","activeCallback","prototype","play","done","camera","cameraOptions","self","terminated","options","getCameraOptions","headingPitchRoll","flyTo","headingPitchRange","target","position","flyToBoundingSphere","stop","cancelFlight","complete","easingFunction","LINEAR_NONE","destination","orientation","offset"],"mappings":"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","sourcesContent":["import BoundingSphere from \"../Core/BoundingSphere.js\";\nimport combine from \"../Core/combine.js\";\nimport defined from \"../Core/defined.js\";\nimport EasingFunction from \"../Core/EasingFunction.js\";\n/**\n * @alias KmlTourFlyTo\n * @constructor\n *\n * @param {Number} duration entry duration\n * @param {String} flyToMode KML fly to mode: bounce, smooth, etc\n * @param {KmlCamera|KmlLookAt} view KmlCamera or KmlLookAt\n */\nfunction KmlTourFlyTo(duration, flyToMode, view) {\n  this.type = \"KmlTourFlyTo\";\n  this.blocking = true;\n  this.activeCamera = null;\n  this.activeCallback = null;\n\n  this.duration = duration;\n  this.view = view;\n  this.flyToMode = flyToMode;\n}\n\n/**\n * Play this playlist entry\n *\n * @param {KmlTourFlyTo~DoneCallback} done function which will be called when playback ends\n * @param {Camera} camera Cesium camera\n * @param {Object} [cameraOptions] which will be merged with camera flyTo options. See {@link Camera#flyTo}\n */\nKmlTourFlyTo.prototype.play = function (done, camera, cameraOptions) {\n  this.activeCamera = camera;\n  if (defined(done) && done !== null) {\n    var self = this;\n    this.activeCallback = function (terminated) {\n      delete self.activeCallback;\n      delete self.activeCamera;\n      done(defined(terminated) ? false : terminated);\n    };\n  }\n\n  var options = this.getCameraOptions(cameraOptions);\n  if (this.view.headingPitchRoll) {\n    camera.flyTo(options);\n  } else if (this.view.headingPitchRange) {\n    var target = new BoundingSphere(this.view.position);\n    camera.flyToBoundingSphere(target, options);\n  }\n};\n\n/**\n * Stop execution of curent entry. Cancel camera flyTo\n */\nKmlTourFlyTo.prototype.stop = function () {\n  if (defined(this.activeCamera)) {\n    this.activeCamera.cancelFlight();\n  }\n  if (defined(this.activeCallback)) {\n    this.activeCallback(true);\n  }\n};\n\n/**\n * Returns options for {@link Camera#flyTo} or {@link Camera#flyToBoundingSphere}\n * depends on this.view type.\n *\n * @param {Object} cameraOptions options to merge with generated. See {@link Camera#flyTo}\n * @returns {Object} {@link Camera#flyTo} or {@link Camera#flyToBoundingSphere} options\n */\nKmlTourFlyTo.prototype.getCameraOptions = function (cameraOptions) {\n  var options = {\n    duration: this.duration,\n  };\n\n  if (defined(this.activeCallback)) {\n    options.complete = this.activeCallback;\n  }\n\n  if (this.flyToMode === \"smooth\") {\n    options.easingFunction = EasingFunction.LINEAR_NONE;\n  }\n\n  if (this.view.headingPitchRoll) {\n    options.destination = this.view.position;\n    options.orientation = this.view.headingPitchRoll;\n  } else if (this.view.headingPitchRange) {\n    options.offset = this.view.headingPitchRange;\n  }\n\n  if (defined(cameraOptions)) {\n    options = combine(options, cameraOptions);\n  }\n  return options;\n};\n\n/**\n * A function that will be executed when the flight completes.\n * @callback KmlTourFlyTo~DoneCallback\n *\n * @param {Boolean} terminated true if {@link KmlTourFlyTo#stop} was\n * called before entry done playback.\n */\nexport default KmlTourFlyTo;\n"]},"metadata":{},"sourceType":"module"}