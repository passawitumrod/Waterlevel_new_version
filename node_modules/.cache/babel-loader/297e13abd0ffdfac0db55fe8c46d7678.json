{"ast":null,"code":"import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n/**\n * Converts an object representing a set of name/value pairs into a query string,\n * with names and values encoded properly for use in a URL.  Values that are arrays\n * will produce multiple values with the same name.\n * @exports objectToQuery\n *\n * @param {Object} obj The object containing data to encode.\n * @returns {String} An encoded query string.\n *\n *\n * @example\n * var str = Cesium.objectToQuery({\n *     key1 : 'some value',\n *     key2 : 'a/b',\n *     key3 : ['x', 'y']\n * });\n *\n * @see queryToObject\n * // str will be:\n * // 'key1=some%20value&key2=a%2Fb&key3=x&key3=y'\n */\n\nfunction objectToQuery(obj) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(obj)) {\n    throw new DeveloperError(\"obj is required.\");\n  } //>>includeEnd('debug');\n\n\n  var result = \"\";\n\n  for (var propName in obj) {\n    if (obj.hasOwnProperty(propName)) {\n      var value = obj[propName];\n      var part = encodeURIComponent(propName) + \"=\";\n\n      if (Array.isArray(value)) {\n        for (var i = 0, len = value.length; i < len; ++i) {\n          result += part + encodeURIComponent(value[i]) + \"&\";\n        }\n      } else {\n        result += part + encodeURIComponent(value) + \"&\";\n      }\n    }\n  } // trim last &\n\n\n  result = result.slice(0, -1); // This function used to replace %20 with + which is more compact and readable.\n  // However, some servers didn't properly handle + as a space.\n  // https://github.com/CesiumGS/cesium/issues/2192\n\n  return result;\n}\n\nexport default objectToQuery;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/objectToQuery.js"],"names":["defined","DeveloperError","objectToQuery","obj","result","propName","hasOwnProperty","value","part","encodeURIComponent","Array","isArray","i","len","length","slice"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AAEA;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AAC1B;AACA,MAAI,CAACH,OAAO,CAACG,GAAD,CAAZ,EAAmB;AACjB,UAAM,IAAIF,cAAJ,CAAmB,kBAAnB,CAAN;AACD,GAJyB,CAK1B;;;AAEA,MAAIG,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,QAAT,IAAqBF,GAArB,EAA0B;AACxB,QAAIA,GAAG,CAACG,cAAJ,CAAmBD,QAAnB,CAAJ,EAAkC;AAChC,UAAIE,KAAK,GAAGJ,GAAG,CAACE,QAAD,CAAf;AAEA,UAAIG,IAAI,GAAGC,kBAAkB,CAACJ,QAAD,CAAlB,GAA+B,GAA1C;;AACA,UAAIK,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAJ,EAA0B;AACxB,aAAK,IAAIK,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGN,KAAK,CAACO,MAA5B,EAAoCF,CAAC,GAAGC,GAAxC,EAA6C,EAAED,CAA/C,EAAkD;AAChDR,UAAAA,MAAM,IAAII,IAAI,GAAGC,kBAAkB,CAACF,KAAK,CAACK,CAAD,CAAN,CAAzB,GAAsC,GAAhD;AACD;AACF,OAJD,MAIO;AACLR,QAAAA,MAAM,IAAII,IAAI,GAAGC,kBAAkB,CAACF,KAAD,CAAzB,GAAmC,GAA7C;AACD;AACF;AACF,GArByB,CAuB1B;;;AACAH,EAAAA,MAAM,GAAGA,MAAM,CAACW,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,CAAT,CAxB0B,CA0B1B;AACA;AACA;;AAEA,SAAOX,MAAP;AACD;;AACD,eAAeF,aAAf","sourcesContent":["import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Converts an object representing a set of name/value pairs into a query string,\n * with names and values encoded properly for use in a URL.  Values that are arrays\n * will produce multiple values with the same name.\n * @exports objectToQuery\n *\n * @param {Object} obj The object containing data to encode.\n * @returns {String} An encoded query string.\n *\n *\n * @example\n * var str = Cesium.objectToQuery({\n *     key1 : 'some value',\n *     key2 : 'a/b',\n *     key3 : ['x', 'y']\n * });\n *\n * @see queryToObject\n * // str will be:\n * // 'key1=some%20value&key2=a%2Fb&key3=x&key3=y'\n */\nfunction objectToQuery(obj) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(obj)) {\n    throw new DeveloperError(\"obj is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var result = \"\";\n  for (var propName in obj) {\n    if (obj.hasOwnProperty(propName)) {\n      var value = obj[propName];\n\n      var part = encodeURIComponent(propName) + \"=\";\n      if (Array.isArray(value)) {\n        for (var i = 0, len = value.length; i < len; ++i) {\n          result += part + encodeURIComponent(value[i]) + \"&\";\n        }\n      } else {\n        result += part + encodeURIComponent(value) + \"&\";\n      }\n    }\n  }\n\n  // trim last &\n  result = result.slice(0, -1);\n\n  // This function used to replace %20 with + which is more compact and readable.\n  // However, some servers didn't properly handle + as a space.\n  // https://github.com/CesiumGS/cesium/issues/2192\n\n  return result;\n}\nexport default objectToQuery;\n"]},"metadata":{},"sourceType":"module"}