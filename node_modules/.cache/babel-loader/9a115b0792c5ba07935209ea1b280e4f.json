{"ast":null,"code":"import ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n/**\n * Value and type information for per-instance geometry attribute that determines if the geometry instance will be shown.\n *\n * @alias ShowGeometryInstanceAttribute\n * @constructor\n *\n * @param {Boolean} [show=true] Determines if the geometry instance will be shown.\n *\n *\n * @example\n * var instance = new Cesium.GeometryInstance({\n *   geometry : new Cesium.BoxGeometry({\n *     vertexFormat : Cesium.VertexFormat.POSITION_AND_NORMAL,\n *     minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0),\n *     maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0)\n *   }),\n *   modelMatrix : Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\n *     Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883)), new Cesium.Cartesian3(0.0, 0.0, 1000000.0), new Cesium.Matrix4()),\n *   id : 'box',\n *   attributes : {\n *     show : new Cesium.ShowGeometryInstanceAttribute(false)\n *   }\n * });\n *\n * @see GeometryInstance\n * @see GeometryInstanceAttribute\n */\n\nfunction ShowGeometryInstanceAttribute(show) {\n  show = defaultValue(show, true);\n  /**\n   * The values for the attributes stored in a typed array.\n   *\n   * @type Uint8Array\n   *\n   * @default [1.0]\n   */\n\n  this.value = ShowGeometryInstanceAttribute.toValue(show);\n}\n\nObject.defineProperties(ShowGeometryInstanceAttribute.prototype, {\n  /**\n   * The datatype of each component in the attribute, e.g., individual elements in\n   * {@link ColorGeometryInstanceAttribute#value}.\n   *\n   * @memberof ShowGeometryInstanceAttribute.prototype\n   *\n   * @type {ComponentDatatype}\n   * @readonly\n   *\n   * @default {@link ComponentDatatype.UNSIGNED_BYTE}\n   */\n  componentDatatype: {\n    get: function () {\n      return ComponentDatatype.UNSIGNED_BYTE;\n    }\n  },\n\n  /**\n   * The number of components in the attributes, i.e., {@link ColorGeometryInstanceAttribute#value}.\n   *\n   * @memberof ShowGeometryInstanceAttribute.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @default 1\n   */\n  componentsPerAttribute: {\n    get: function () {\n      return 1;\n    }\n  },\n\n  /**\n   * When <code>true</code> and <code>componentDatatype</code> is an integer format,\n   * indicate that the components should be mapped to the range [0, 1] (unsigned)\n   * or [-1, 1] (signed) when they are accessed as floating-point for rendering.\n   *\n   * @memberof ShowGeometryInstanceAttribute.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  normalize: {\n    get: function () {\n      return false;\n    }\n  }\n});\n/**\n * Converts a boolean show to a typed array that can be used to assign a show attribute.\n *\n * @param {Boolean} show The show value.\n * @param {Uint8Array} [result] The array to store the result in, if undefined a new instance will be created.\n * @returns {Uint8Array} The modified result parameter or a new instance if result was undefined.\n *\n * @example\n * var attributes = primitive.getGeometryInstanceAttributes('an id');\n * attributes.show = Cesium.ShowGeometryInstanceAttribute.toValue(true, attributes.show);\n */\n\nShowGeometryInstanceAttribute.toValue = function (show, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(show)) {\n    throw new DeveloperError(\"show is required.\");\n  } //>>includeEnd('debug');\n\n\n  if (!defined(result)) {\n    return new Uint8Array([show]);\n  }\n\n  result[0] = show;\n  return result;\n};\n\nexport default ShowGeometryInstanceAttribute;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/ShowGeometryInstanceAttribute.js"],"names":["ComponentDatatype","defaultValue","defined","DeveloperError","ShowGeometryInstanceAttribute","show","value","toValue","Object","defineProperties","prototype","componentDatatype","get","UNSIGNED_BYTE","componentsPerAttribute","normalize","result","Uint8Array"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,wBAA9B;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAASC,6BAAT,CAAuCC,IAAvC,EAA6C;AAC3CA,EAAAA,IAAI,GAAGJ,YAAY,CAACI,IAAD,EAAO,IAAP,CAAnB;AAEA;;;;;;;;AAOA,OAAKC,KAAL,GAAaF,6BAA6B,CAACG,OAA9B,CAAsCF,IAAtC,CAAb;AACD;;AAEDG,MAAM,CAACC,gBAAP,CAAwBL,6BAA6B,CAACM,SAAtD,EAAiE;AAC/D;;;;;;;;;;;AAWAC,EAAAA,iBAAiB,EAAE;AACjBC,IAAAA,GAAG,EAAE,YAAY;AACf,aAAOZ,iBAAiB,CAACa,aAAzB;AACD;AAHgB,GAZ4C;;AAkB/D;;;;;;;;;;AAUAC,EAAAA,sBAAsB,EAAE;AACtBF,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,CAAP;AACD;AAHqB,GA5BuC;;AAkC/D;;;;;;;;;;;;AAYAG,EAAAA,SAAS,EAAE;AACTH,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAP;AACD;AAHQ;AA9CoD,CAAjE;AAqDA;;;;;;;;;;;;AAWAR,6BAA6B,CAACG,OAA9B,GAAwC,UAAUF,IAAV,EAAgBW,MAAhB,EAAwB;AAC9D;AACA,MAAI,CAACd,OAAO,CAACG,IAAD,CAAZ,EAAoB;AAClB,UAAM,IAAIF,cAAJ,CAAmB,mBAAnB,CAAN;AACD,GAJ6D,CAK9D;;;AAEA,MAAI,CAACD,OAAO,CAACc,MAAD,CAAZ,EAAsB;AACpB,WAAO,IAAIC,UAAJ,CAAe,CAACZ,IAAD,CAAf,CAAP;AACD;;AACDW,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYX,IAAZ;AACA,SAAOW,MAAP;AACD,CAZD;;AAaA,eAAeZ,6BAAf","sourcesContent":["import ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Value and type information for per-instance geometry attribute that determines if the geometry instance will be shown.\n *\n * @alias ShowGeometryInstanceAttribute\n * @constructor\n *\n * @param {Boolean} [show=true] Determines if the geometry instance will be shown.\n *\n *\n * @example\n * var instance = new Cesium.GeometryInstance({\n *   geometry : new Cesium.BoxGeometry({\n *     vertexFormat : Cesium.VertexFormat.POSITION_AND_NORMAL,\n *     minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0),\n *     maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0)\n *   }),\n *   modelMatrix : Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\n *     Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883)), new Cesium.Cartesian3(0.0, 0.0, 1000000.0), new Cesium.Matrix4()),\n *   id : 'box',\n *   attributes : {\n *     show : new Cesium.ShowGeometryInstanceAttribute(false)\n *   }\n * });\n *\n * @see GeometryInstance\n * @see GeometryInstanceAttribute\n */\nfunction ShowGeometryInstanceAttribute(show) {\n  show = defaultValue(show, true);\n\n  /**\n   * The values for the attributes stored in a typed array.\n   *\n   * @type Uint8Array\n   *\n   * @default [1.0]\n   */\n  this.value = ShowGeometryInstanceAttribute.toValue(show);\n}\n\nObject.defineProperties(ShowGeometryInstanceAttribute.prototype, {\n  /**\n   * The datatype of each component in the attribute, e.g., individual elements in\n   * {@link ColorGeometryInstanceAttribute#value}.\n   *\n   * @memberof ShowGeometryInstanceAttribute.prototype\n   *\n   * @type {ComponentDatatype}\n   * @readonly\n   *\n   * @default {@link ComponentDatatype.UNSIGNED_BYTE}\n   */\n  componentDatatype: {\n    get: function () {\n      return ComponentDatatype.UNSIGNED_BYTE;\n    },\n  },\n\n  /**\n   * The number of components in the attributes, i.e., {@link ColorGeometryInstanceAttribute#value}.\n   *\n   * @memberof ShowGeometryInstanceAttribute.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @default 1\n   */\n  componentsPerAttribute: {\n    get: function () {\n      return 1;\n    },\n  },\n\n  /**\n   * When <code>true</code> and <code>componentDatatype</code> is an integer format,\n   * indicate that the components should be mapped to the range [0, 1] (unsigned)\n   * or [-1, 1] (signed) when they are accessed as floating-point for rendering.\n   *\n   * @memberof ShowGeometryInstanceAttribute.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  normalize: {\n    get: function () {\n      return false;\n    },\n  },\n});\n\n/**\n * Converts a boolean show to a typed array that can be used to assign a show attribute.\n *\n * @param {Boolean} show The show value.\n * @param {Uint8Array} [result] The array to store the result in, if undefined a new instance will be created.\n * @returns {Uint8Array} The modified result parameter or a new instance if result was undefined.\n *\n * @example\n * var attributes = primitive.getGeometryInstanceAttributes('an id');\n * attributes.show = Cesium.ShowGeometryInstanceAttribute.toValue(true, attributes.show);\n */\nShowGeometryInstanceAttribute.toValue = function (show, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(show)) {\n    throw new DeveloperError(\"show is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Uint8Array([show]);\n  }\n  result[0] = show;\n  return result;\n};\nexport default ShowGeometryInstanceAttribute;\n"]},"metadata":{},"sourceType":"module"}