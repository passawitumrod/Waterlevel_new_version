{"ast":null,"code":"import BlendEquation from \"./BlendEquation.js\";\nimport BlendFunction from \"./BlendFunction.js\";\n/**\n * The blending state combines {@link BlendEquation} and {@link BlendFunction} and the\n * <code>enabled</code> flag to define the full blending state for combining source and\n * destination fragments when rendering.\n * <p>\n * This is a helper when using custom render states with {@link Appearance#renderState}.\n * </p>\n *\n * @exports BlendingState\n */\n\nvar BlendingState = {\n  /**\n   * Blending is disabled.\n   *\n   * @type {Object}\n   * @constant\n   */\n  DISABLED: Object.freeze({\n    enabled: false\n  }),\n\n  /**\n   * Blending is enabled using alpha blending, <code>source(source.alpha) + destination(1 - source.alpha)</code>.\n   *\n   * @type {Object}\n   * @constant\n   */\n  ALPHA_BLEND: Object.freeze({\n    enabled: true,\n    equationRgb: BlendEquation.ADD,\n    equationAlpha: BlendEquation.ADD,\n    functionSourceRgb: BlendFunction.SOURCE_ALPHA,\n    functionSourceAlpha: BlendFunction.ONE,\n    functionDestinationRgb: BlendFunction.ONE_MINUS_SOURCE_ALPHA,\n    functionDestinationAlpha: BlendFunction.ONE_MINUS_SOURCE_ALPHA\n  }),\n\n  /**\n   * Blending is enabled using alpha blending with premultiplied alpha, <code>source + destination(1 - source.alpha)</code>.\n   *\n   * @type {Object}\n   * @constant\n   */\n  PRE_MULTIPLIED_ALPHA_BLEND: Object.freeze({\n    enabled: true,\n    equationRgb: BlendEquation.ADD,\n    equationAlpha: BlendEquation.ADD,\n    functionSourceRgb: BlendFunction.ONE,\n    functionSourceAlpha: BlendFunction.ONE,\n    functionDestinationRgb: BlendFunction.ONE_MINUS_SOURCE_ALPHA,\n    functionDestinationAlpha: BlendFunction.ONE_MINUS_SOURCE_ALPHA\n  }),\n\n  /**\n   * Blending is enabled using additive blending, <code>source(source.alpha) + destination</code>.\n   *\n   * @type {Object}\n   * @constant\n   */\n  ADDITIVE_BLEND: Object.freeze({\n    enabled: true,\n    equationRgb: BlendEquation.ADD,\n    equationAlpha: BlendEquation.ADD,\n    functionSourceRgb: BlendFunction.SOURCE_ALPHA,\n    functionSourceAlpha: BlendFunction.ONE,\n    functionDestinationRgb: BlendFunction.ONE,\n    functionDestinationAlpha: BlendFunction.ONE\n  })\n};\nexport default Object.freeze(BlendingState);","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/BlendingState.js"],"names":["BlendEquation","BlendFunction","BlendingState","DISABLED","Object","freeze","enabled","ALPHA_BLEND","equationRgb","ADD","equationAlpha","functionSourceRgb","SOURCE_ALPHA","functionSourceAlpha","ONE","functionDestinationRgb","ONE_MINUS_SOURCE_ALPHA","functionDestinationAlpha","PRE_MULTIPLIED_ALPHA_BLEND","ADDITIVE_BLEND"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,oBAA1B;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AAEA;;;;;;;;;;;AAUA,IAAIC,aAAa,GAAG;AAClB;;;;;;AAMAC,EAAAA,QAAQ,EAAEC,MAAM,CAACC,MAAP,CAAc;AACtBC,IAAAA,OAAO,EAAE;AADa,GAAd,CAPQ;;AAWlB;;;;;;AAMAC,EAAAA,WAAW,EAAEH,MAAM,CAACC,MAAP,CAAc;AACzBC,IAAAA,OAAO,EAAE,IADgB;AAEzBE,IAAAA,WAAW,EAAER,aAAa,CAACS,GAFF;AAGzBC,IAAAA,aAAa,EAAEV,aAAa,CAACS,GAHJ;AAIzBE,IAAAA,iBAAiB,EAAEV,aAAa,CAACW,YAJR;AAKzBC,IAAAA,mBAAmB,EAAEZ,aAAa,CAACa,GALV;AAMzBC,IAAAA,sBAAsB,EAAEd,aAAa,CAACe,sBANb;AAOzBC,IAAAA,wBAAwB,EAAEhB,aAAa,CAACe;AAPf,GAAd,CAjBK;;AA2BlB;;;;;;AAMAE,EAAAA,0BAA0B,EAAEd,MAAM,CAACC,MAAP,CAAc;AACxCC,IAAAA,OAAO,EAAE,IAD+B;AAExCE,IAAAA,WAAW,EAAER,aAAa,CAACS,GAFa;AAGxCC,IAAAA,aAAa,EAAEV,aAAa,CAACS,GAHW;AAIxCE,IAAAA,iBAAiB,EAAEV,aAAa,CAACa,GAJO;AAKxCD,IAAAA,mBAAmB,EAAEZ,aAAa,CAACa,GALK;AAMxCC,IAAAA,sBAAsB,EAAEd,aAAa,CAACe,sBANE;AAOxCC,IAAAA,wBAAwB,EAAEhB,aAAa,CAACe;AAPA,GAAd,CAjCV;;AA2ClB;;;;;;AAMAG,EAAAA,cAAc,EAAEf,MAAM,CAACC,MAAP,CAAc;AAC5BC,IAAAA,OAAO,EAAE,IADmB;AAE5BE,IAAAA,WAAW,EAAER,aAAa,CAACS,GAFC;AAG5BC,IAAAA,aAAa,EAAEV,aAAa,CAACS,GAHD;AAI5BE,IAAAA,iBAAiB,EAAEV,aAAa,CAACW,YAJL;AAK5BC,IAAAA,mBAAmB,EAAEZ,aAAa,CAACa,GALP;AAM5BC,IAAAA,sBAAsB,EAAEd,aAAa,CAACa,GANV;AAO5BG,IAAAA,wBAAwB,EAAEhB,aAAa,CAACa;AAPZ,GAAd;AAjDE,CAApB;AA2DA,eAAeV,MAAM,CAACC,MAAP,CAAcH,aAAd,CAAf","sourcesContent":["import BlendEquation from \"./BlendEquation.js\";\nimport BlendFunction from \"./BlendFunction.js\";\n\n/**\n * The blending state combines {@link BlendEquation} and {@link BlendFunction} and the\n * <code>enabled</code> flag to define the full blending state for combining source and\n * destination fragments when rendering.\n * <p>\n * This is a helper when using custom render states with {@link Appearance#renderState}.\n * </p>\n *\n * @exports BlendingState\n */\nvar BlendingState = {\n  /**\n   * Blending is disabled.\n   *\n   * @type {Object}\n   * @constant\n   */\n  DISABLED: Object.freeze({\n    enabled: false,\n  }),\n\n  /**\n   * Blending is enabled using alpha blending, <code>source(source.alpha) + destination(1 - source.alpha)</code>.\n   *\n   * @type {Object}\n   * @constant\n   */\n  ALPHA_BLEND: Object.freeze({\n    enabled: true,\n    equationRgb: BlendEquation.ADD,\n    equationAlpha: BlendEquation.ADD,\n    functionSourceRgb: BlendFunction.SOURCE_ALPHA,\n    functionSourceAlpha: BlendFunction.ONE,\n    functionDestinationRgb: BlendFunction.ONE_MINUS_SOURCE_ALPHA,\n    functionDestinationAlpha: BlendFunction.ONE_MINUS_SOURCE_ALPHA,\n  }),\n\n  /**\n   * Blending is enabled using alpha blending with premultiplied alpha, <code>source + destination(1 - source.alpha)</code>.\n   *\n   * @type {Object}\n   * @constant\n   */\n  PRE_MULTIPLIED_ALPHA_BLEND: Object.freeze({\n    enabled: true,\n    equationRgb: BlendEquation.ADD,\n    equationAlpha: BlendEquation.ADD,\n    functionSourceRgb: BlendFunction.ONE,\n    functionSourceAlpha: BlendFunction.ONE,\n    functionDestinationRgb: BlendFunction.ONE_MINUS_SOURCE_ALPHA,\n    functionDestinationAlpha: BlendFunction.ONE_MINUS_SOURCE_ALPHA,\n  }),\n\n  /**\n   * Blending is enabled using additive blending, <code>source(source.alpha) + destination</code>.\n   *\n   * @type {Object}\n   * @constant\n   */\n  ADDITIVE_BLEND: Object.freeze({\n    enabled: true,\n    equationRgb: BlendEquation.ADD,\n    equationAlpha: BlendEquation.ADD,\n    functionSourceRgb: BlendFunction.SOURCE_ALPHA,\n    functionSourceAlpha: BlendFunction.ONE,\n    functionDestinationRgb: BlendFunction.ONE,\n    functionDestinationAlpha: BlendFunction.ONE,\n  }),\n};\nexport default Object.freeze(BlendingState);\n"]},"metadata":{},"sourceType":"module"}