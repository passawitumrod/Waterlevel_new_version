{"ast":null,"code":"import BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defined from \"./defined.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\n/**\n * Describes geometry representing the outline of a plane centered at the origin, with a unit width and length.\n *\n * @alias PlaneOutlineGeometry\n * @constructor\n *\n */\n\nfunction PlaneOutlineGeometry() {\n  this._workerName = \"createPlaneOutlineGeometry\";\n}\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\n\n\nPlaneOutlineGeometry.packedLength = 0;\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PlaneOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n *\n * @returns {Number[]} The array that was packed into\n */\n\nPlaneOutlineGeometry.pack = function (value, array) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"value\", value);\n  Check.defined(\"array\", array); //>>includeEnd('debug');\n\n  return array;\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PlaneOutlineGeometry} [result] The object into which to store the result.\n * @returns {PlaneOutlineGeometry} The modified result parameter or a new PlaneOutlineGeometry instance if one was not provided.\n */\n\n\nPlaneOutlineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array); //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new PlaneOutlineGeometry();\n  }\n\n  return result;\n};\n\nvar min = new Cartesian3(-0.5, -0.5, 0.0);\nvar max = new Cartesian3(0.5, 0.5, 0.0);\n/**\n * Computes the geometric representation of an outline of a plane, including its vertices, indices, and a bounding sphere.\n *\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\n\nPlaneOutlineGeometry.createGeometry = function () {\n  var attributes = new GeometryAttributes();\n  var indices = new Uint16Array(4 * 2);\n  var positions = new Float64Array(4 * 3);\n  positions[0] = min.x;\n  positions[1] = min.y;\n  positions[2] = min.z;\n  positions[3] = max.x;\n  positions[4] = min.y;\n  positions[5] = min.z;\n  positions[6] = max.x;\n  positions[7] = max.y;\n  positions[8] = min.z;\n  positions[9] = min.x;\n  positions[10] = max.y;\n  positions[11] = min.z;\n  attributes.position = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: positions\n  });\n  indices[0] = 0;\n  indices[1] = 1;\n  indices[2] = 1;\n  indices[3] = 2;\n  indices[4] = 2;\n  indices[5] = 3;\n  indices[6] = 3;\n  indices[7] = 0;\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.LINES,\n    boundingSphere: new BoundingSphere(Cartesian3.ZERO, Math.sqrt(2.0))\n  });\n};\n\nexport default PlaneOutlineGeometry;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/PlaneOutlineGeometry.js"],"names":["BoundingSphere","Cartesian3","Check","ComponentDatatype","defined","Geometry","GeometryAttribute","GeometryAttributes","PrimitiveType","PlaneOutlineGeometry","_workerName","packedLength","pack","value","array","unpack","startingIndex","result","min","max","createGeometry","attributes","indices","Uint16Array","positions","Float64Array","x","y","z","position","componentDatatype","DOUBLE","componentsPerAttribute","values","primitiveType","LINES","boundingSphere","ZERO","Math","sqrt"],"mappings":"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","sourcesContent":["import BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defined from \"./defined.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\n\n/**\n * Describes geometry representing the outline of a plane centered at the origin, with a unit width and length.\n *\n * @alias PlaneOutlineGeometry\n * @constructor\n *\n */\nfunction PlaneOutlineGeometry() {\n  this._workerName = \"createPlaneOutlineGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nPlaneOutlineGeometry.packedLength = 0;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PlaneOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n *\n * @returns {Number[]} The array that was packed into\n */\nPlaneOutlineGeometry.pack = function (value, array) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PlaneOutlineGeometry} [result] The object into which to store the result.\n * @returns {PlaneOutlineGeometry} The modified result parameter or a new PlaneOutlineGeometry instance if one was not provided.\n */\nPlaneOutlineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new PlaneOutlineGeometry();\n  }\n\n  return result;\n};\n\nvar min = new Cartesian3(-0.5, -0.5, 0.0);\nvar max = new Cartesian3(0.5, 0.5, 0.0);\n\n/**\n * Computes the geometric representation of an outline of a plane, including its vertices, indices, and a bounding sphere.\n *\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPlaneOutlineGeometry.createGeometry = function () {\n  var attributes = new GeometryAttributes();\n  var indices = new Uint16Array(4 * 2);\n  var positions = new Float64Array(4 * 3);\n\n  positions[0] = min.x;\n  positions[1] = min.y;\n  positions[2] = min.z;\n  positions[3] = max.x;\n  positions[4] = min.y;\n  positions[5] = min.z;\n  positions[6] = max.x;\n  positions[7] = max.y;\n  positions[8] = min.z;\n  positions[9] = min.x;\n  positions[10] = max.y;\n  positions[11] = min.z;\n\n  attributes.position = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: positions,\n  });\n\n  indices[0] = 0;\n  indices[1] = 1;\n  indices[2] = 1;\n  indices[3] = 2;\n  indices[4] = 2;\n  indices[5] = 3;\n  indices[6] = 3;\n  indices[7] = 0;\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.LINES,\n    boundingSphere: new BoundingSphere(Cartesian3.ZERO, Math.sqrt(2.0)),\n  });\n};\nexport default PlaneOutlineGeometry;\n"]},"metadata":{},"sourceType":"module"}