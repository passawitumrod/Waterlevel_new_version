{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport ClearCommand from \"../Renderer/ClearCommand.js\";\nimport Framebuffer from \"../Renderer/Framebuffer.js\";\nimport PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport Sampler from \"../Renderer/Sampler.js\";\nimport Texture from \"../Renderer/Texture.js\";\n/**\n * A post process stage that will get the luminance value at each pixel and\n * uses parallel reduction to compute the average luminance in a 1x1 texture.\n * This texture can be used as input for tone mapping.\n *\n * @constructor\n * @private\n */\n\nfunction AutoExposure() {\n  this._uniformMap = undefined;\n  this._command = undefined;\n  this._colorTexture = undefined;\n  this._depthTexture = undefined;\n  this._ready = false;\n  this._name = \"czm_autoexposure\";\n  this._logDepthChanged = undefined;\n  this._useLogDepth = undefined;\n  this._framebuffers = undefined;\n  this._previousLuminance = undefined;\n  this._commands = undefined;\n  this._clearCommand = undefined;\n  this._minMaxLuminance = new Cartesian2();\n  /**\n   * Whether or not to execute this post-process stage when ready.\n   *\n   * @type {Boolean}\n   */\n\n  this.enabled = true;\n  this._enabled = true;\n  /**\n   * The minimum value used to clamp the luminance.\n   *\n   * @type {Number}\n   * @default 0.1\n   */\n\n  this.minimumLuminance = 0.1;\n  /**\n   * The maximum value used to clamp the luminance.\n   *\n   * @type {Number}\n   * @default 10.0\n   */\n\n  this.maximumLuminance = 10.0;\n}\n\nObject.defineProperties(AutoExposure.prototype, {\n  /**\n   * Determines if this post-process stage is ready to be executed. A stage is only executed when both <code>ready</code>\n   * and {@link AutoExposure#enabled} are <code>true</code>. A stage will not be ready while it is waiting on textures\n   * to load.\n   *\n   * @memberof AutoExposure.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function get() {\n      return this._ready;\n    }\n  },\n\n  /**\n   * The unique name of this post-process stage for reference by other stages.\n   *\n   * @memberof AutoExposure.prototype\n   * @type {String}\n   * @readonly\n   */\n  name: {\n    get: function get() {\n      return this._name;\n    }\n  },\n\n  /**\n   * A reference to the texture written to when executing this post process stage.\n   *\n   * @memberof AutoExposure.prototype\n   * @type {Texture}\n   * @readonly\n   * @private\n   */\n  outputTexture: {\n    get: function get() {\n      var framebuffers = this._framebuffers;\n\n      if (!defined(framebuffers)) {\n        return undefined;\n      }\n\n      return framebuffers[framebuffers.length - 1].getColorTexture(0);\n    }\n  }\n});\n\nfunction destroyFramebuffers(autoexposure) {\n  var framebuffers = autoexposure._framebuffers;\n\n  if (!defined(framebuffers)) {\n    return;\n  }\n\n  var length = framebuffers.length;\n\n  for (var i = 0; i < length; ++i) {\n    framebuffers[i].destroy();\n  }\n\n  autoexposure._framebuffers = undefined;\n\n  autoexposure._previousLuminance.destroy();\n\n  autoexposure._previousLuminance = undefined;\n}\n\nfunction createFramebuffers(autoexposure, context) {\n  destroyFramebuffers(autoexposure);\n  var width = autoexposure._width;\n  var height = autoexposure._height;\n  var pixelFormat = PixelFormat.RGBA;\n  var pixelDatatype = context.halfFloatingPointTexture ? PixelDatatype.HALF_FLOAT : PixelDatatype.FLOAT;\n  var length = Math.ceil(Math.log(Math.max(width, height)) / Math.log(3.0));\n  var framebuffers = new Array(length);\n\n  for (var i = 0; i < length; ++i) {\n    width = Math.max(Math.ceil(width / 3.0), 1.0);\n    height = Math.max(Math.ceil(height / 3.0), 1.0);\n    framebuffers[i] = new Framebuffer({\n      context: context,\n      colorTextures: [new Texture({\n        context: context,\n        width: width,\n        height: height,\n        pixelFormat: pixelFormat,\n        pixelDatatype: pixelDatatype,\n        sampler: Sampler.NEAREST\n      })]\n    });\n  }\n\n  var lastTexture = framebuffers[length - 1].getColorTexture(0);\n  autoexposure._previousLuminance = new Framebuffer({\n    context: context,\n    colorTextures: [new Texture({\n      context: context,\n      width: lastTexture.width,\n      height: lastTexture.height,\n      pixelFormat: pixelFormat,\n      pixelDatatype: pixelDatatype,\n      sampler: Sampler.NEAREST\n    })]\n  });\n  autoexposure._framebuffers = framebuffers;\n}\n\nfunction destroyCommands(autoexposure) {\n  var commands = autoexposure._commands;\n\n  if (!defined(commands)) {\n    return;\n  }\n\n  var length = commands.length;\n\n  for (var i = 0; i < length; ++i) {\n    commands[i].shaderProgram.destroy();\n  }\n\n  autoexposure._commands = undefined;\n}\n\nfunction createUniformMap(autoexposure, index) {\n  var uniforms;\n\n  if (index === 0) {\n    uniforms = {\n      colorTexture: function colorTexture() {\n        return autoexposure._colorTexture;\n      },\n      colorTextureDimensions: function colorTextureDimensions() {\n        return autoexposure._colorTexture.dimensions;\n      }\n    };\n  } else {\n    var texture = autoexposure._framebuffers[index - 1].getColorTexture(0);\n\n    uniforms = {\n      colorTexture: function colorTexture() {\n        return texture;\n      },\n      colorTextureDimensions: function colorTextureDimensions() {\n        return texture.dimensions;\n      }\n    };\n  }\n\n  uniforms.minMaxLuminance = function () {\n    return autoexposure._minMaxLuminance;\n  };\n\n  uniforms.previousLuminance = function () {\n    return autoexposure._previousLuminance.getColorTexture(0);\n  };\n\n  return uniforms;\n}\n\nfunction getShaderSource(index, length) {\n  var source = \"uniform sampler2D colorTexture; \\n\" + \"varying vec2 v_textureCoordinates; \\n\" + \"float sampleTexture(vec2 offset) { \\n\";\n\n  if (index === 0) {\n    source += \"    vec4 color = texture2D(colorTexture, v_textureCoordinates + offset); \\n\" + \"    return czm_luminance(color.rgb); \\n\";\n  } else {\n    source += \"    return texture2D(colorTexture, v_textureCoordinates + offset).r; \\n\";\n  }\n\n  source += \"}\\n\\n\";\n  source += \"uniform vec2 colorTextureDimensions; \\n\" + \"uniform vec2 minMaxLuminance; \\n\" + \"uniform sampler2D previousLuminance; \\n\" + \"void main() { \\n\" + \"    float color = 0.0; \\n\" + \"    float xStep = 1.0 / colorTextureDimensions.x; \\n\" + \"    float yStep = 1.0 / colorTextureDimensions.y; \\n\" + \"    int count = 0; \\n\" + \"    for (int i = 0; i < 3; ++i) { \\n\" + \"        for (int j = 0; j < 3; ++j) { \\n\" + \"            vec2 offset; \\n\" + \"            offset.x = -xStep + float(i) * xStep; \\n\" + \"            offset.y = -yStep + float(j) * yStep; \\n\" + \"            if (offset.x < 0.0 || offset.x > 1.0 || offset.y < 0.0 || offset.y > 1.0) { \\n\" + \"                continue; \\n\" + \"            } \\n\" + \"            color += sampleTexture(offset); \\n\" + \"            ++count; \\n\" + \"        } \\n\" + \"    } \\n\" + \"    if (count > 0) { \\n\" + \"        color /= float(count); \\n\" + \"    } \\n\";\n\n  if (index === length - 1) {\n    source += \"    float previous = texture2D(previousLuminance, vec2(0.5)).r; \\n\" + \"    color = clamp(color, minMaxLuminance.x, minMaxLuminance.y); \\n\" + \"    color = previous + (color - previous) / (60.0 * 1.5); \\n\" + \"    color = clamp(color, minMaxLuminance.x, minMaxLuminance.y); \\n\";\n  }\n\n  source += \"    gl_FragColor = vec4(color); \\n\" + \"} \\n\";\n  return source;\n}\n\nfunction createCommands(autoexposure, context) {\n  destroyCommands(autoexposure);\n  var framebuffers = autoexposure._framebuffers;\n  var length = framebuffers.length;\n  var commands = new Array(length);\n\n  for (var i = 0; i < length; ++i) {\n    commands[i] = context.createViewportQuadCommand(getShaderSource(i, length), {\n      framebuffer: framebuffers[i],\n      uniformMap: createUniformMap(autoexposure, i)\n    });\n  }\n\n  autoexposure._commands = commands;\n}\n/**\n * A function that will be called before execute. Used to clear any textures attached to framebuffers.\n * @param {Context} context The context.\n * @private\n */\n\n\nAutoExposure.prototype.clear = function (context) {\n  var framebuffers = this._framebuffers;\n\n  if (!defined(framebuffers)) {\n    return;\n  }\n\n  var clearCommand = this._clearCommand;\n\n  if (!defined(clearCommand)) {\n    clearCommand = this._clearCommand = new ClearCommand({\n      color: new Color(0.0, 0.0, 0.0, 0.0),\n      framebuffer: undefined\n    });\n  }\n\n  var length = framebuffers.length;\n\n  for (var i = 0; i < length; ++i) {\n    clearCommand.framebuffer = framebuffers[i];\n    clearCommand.execute(context);\n  }\n};\n/**\n * A function that will be called before execute. Used to create WebGL resources and load any textures.\n * @param {Context} context The context.\n * @private\n */\n\n\nAutoExposure.prototype.update = function (context) {\n  var width = context.drawingBufferWidth;\n  var height = context.drawingBufferHeight;\n\n  if (width !== this._width || height !== this._height) {\n    this._width = width;\n    this._height = height;\n    createFramebuffers(this, context);\n    createCommands(this, context);\n\n    if (!this._ready) {\n      this._ready = true;\n    }\n  }\n\n  this._minMaxLuminance.x = this.minimumLuminance;\n  this._minMaxLuminance.y = this.maximumLuminance;\n  var framebuffers = this._framebuffers;\n  var temp = framebuffers[framebuffers.length - 1];\n  framebuffers[framebuffers.length - 1] = this._previousLuminance;\n  this._commands[this._commands.length - 1].framebuffer = this._previousLuminance;\n  this._previousLuminance = temp;\n};\n/**\n * Executes the post-process stage. The color texture is the texture rendered to by the scene or from the previous stage.\n * @param {Context} context The context.\n * @param {Texture} colorTexture The input color texture.\n * @private\n */\n\n\nAutoExposure.prototype.execute = function (context, colorTexture) {\n  this._colorTexture = colorTexture;\n  var commands = this._commands;\n\n  if (!defined(commands)) {\n    return;\n  }\n\n  var length = commands.length;\n\n  for (var i = 0; i < length; ++i) {\n    commands[i].execute(context);\n  }\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <p>\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * </p>\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see AutoExposure#destroy\n */\n\n\nAutoExposure.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <p>\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see AutoExposure#isDestroyed\n */\n\n\nAutoExposure.prototype.destroy = function () {\n  destroyFramebuffers(this);\n  destroyCommands(this);\n  return destroyObject(this);\n};\n\nexport default AutoExposure;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/AutoExposure.js"],"names":["Cartesian2","Color","defined","destroyObject","PixelFormat","ClearCommand","Framebuffer","PixelDatatype","Sampler","Texture","AutoExposure","_uniformMap","undefined","_command","_colorTexture","_depthTexture","_ready","_name","_logDepthChanged","_useLogDepth","_framebuffers","_previousLuminance","_commands","_clearCommand","_minMaxLuminance","enabled","_enabled","minimumLuminance","maximumLuminance","Object","defineProperties","prototype","ready","get","name","outputTexture","framebuffers","length","getColorTexture","destroyFramebuffers","autoexposure","i","destroy","createFramebuffers","context","width","_width","height","_height","pixelFormat","RGBA","pixelDatatype","halfFloatingPointTexture","HALF_FLOAT","FLOAT","Math","ceil","log","max","Array","colorTextures","sampler","NEAREST","lastTexture","destroyCommands","commands","shaderProgram","createUniformMap","index","uniforms","colorTexture","colorTextureDimensions","dimensions","texture","minMaxLuminance","previousLuminance","getShaderSource","source","createCommands","createViewportQuadCommand","framebuffer","uniformMap","clear","clearCommand","color","execute","update","drawingBufferWidth","drawingBufferHeight","x","y","temp","isDestroyed"],"mappings":"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","sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport ClearCommand from \"../Renderer/ClearCommand.js\";\nimport Framebuffer from \"../Renderer/Framebuffer.js\";\nimport PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport Sampler from \"../Renderer/Sampler.js\";\nimport Texture from \"../Renderer/Texture.js\";\n\n/**\n * A post process stage that will get the luminance value at each pixel and\n * uses parallel reduction to compute the average luminance in a 1x1 texture.\n * This texture can be used as input for tone mapping.\n *\n * @constructor\n * @private\n */\nfunction AutoExposure() {\n  this._uniformMap = undefined;\n  this._command = undefined;\n\n  this._colorTexture = undefined;\n  this._depthTexture = undefined;\n\n  this._ready = false;\n\n  this._name = \"czm_autoexposure\";\n\n  this._logDepthChanged = undefined;\n  this._useLogDepth = undefined;\n\n  this._framebuffers = undefined;\n  this._previousLuminance = undefined;\n\n  this._commands = undefined;\n  this._clearCommand = undefined;\n\n  this._minMaxLuminance = new Cartesian2();\n\n  /**\n   * Whether or not to execute this post-process stage when ready.\n   *\n   * @type {Boolean}\n   */\n  this.enabled = true;\n  this._enabled = true;\n\n  /**\n   * The minimum value used to clamp the luminance.\n   *\n   * @type {Number}\n   * @default 0.1\n   */\n  this.minimumLuminance = 0.1;\n\n  /**\n   * The maximum value used to clamp the luminance.\n   *\n   * @type {Number}\n   * @default 10.0\n   */\n  this.maximumLuminance = 10.0;\n}\n\nObject.defineProperties(AutoExposure.prototype, {\n  /**\n   * Determines if this post-process stage is ready to be executed. A stage is only executed when both <code>ready</code>\n   * and {@link AutoExposure#enabled} are <code>true</code>. A stage will not be ready while it is waiting on textures\n   * to load.\n   *\n   * @memberof AutoExposure.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n  /**\n   * The unique name of this post-process stage for reference by other stages.\n   *\n   * @memberof AutoExposure.prototype\n   * @type {String}\n   * @readonly\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n  },\n\n  /**\n   * A reference to the texture written to when executing this post process stage.\n   *\n   * @memberof AutoExposure.prototype\n   * @type {Texture}\n   * @readonly\n   * @private\n   */\n  outputTexture: {\n    get: function () {\n      var framebuffers = this._framebuffers;\n      if (!defined(framebuffers)) {\n        return undefined;\n      }\n      return framebuffers[framebuffers.length - 1].getColorTexture(0);\n    },\n  },\n});\n\nfunction destroyFramebuffers(autoexposure) {\n  var framebuffers = autoexposure._framebuffers;\n  if (!defined(framebuffers)) {\n    return;\n  }\n\n  var length = framebuffers.length;\n  for (var i = 0; i < length; ++i) {\n    framebuffers[i].destroy();\n  }\n  autoexposure._framebuffers = undefined;\n\n  autoexposure._previousLuminance.destroy();\n  autoexposure._previousLuminance = undefined;\n}\n\nfunction createFramebuffers(autoexposure, context) {\n  destroyFramebuffers(autoexposure);\n\n  var width = autoexposure._width;\n  var height = autoexposure._height;\n\n  var pixelFormat = PixelFormat.RGBA;\n  var pixelDatatype = context.halfFloatingPointTexture\n    ? PixelDatatype.HALF_FLOAT\n    : PixelDatatype.FLOAT;\n\n  var length = Math.ceil(Math.log(Math.max(width, height)) / Math.log(3.0));\n  var framebuffers = new Array(length);\n  for (var i = 0; i < length; ++i) {\n    width = Math.max(Math.ceil(width / 3.0), 1.0);\n    height = Math.max(Math.ceil(height / 3.0), 1.0);\n    framebuffers[i] = new Framebuffer({\n      context: context,\n      colorTextures: [\n        new Texture({\n          context: context,\n          width: width,\n          height: height,\n          pixelFormat: pixelFormat,\n          pixelDatatype: pixelDatatype,\n          sampler: Sampler.NEAREST,\n        }),\n      ],\n    });\n  }\n\n  var lastTexture = framebuffers[length - 1].getColorTexture(0);\n  autoexposure._previousLuminance = new Framebuffer({\n    context: context,\n    colorTextures: [\n      new Texture({\n        context: context,\n        width: lastTexture.width,\n        height: lastTexture.height,\n        pixelFormat: pixelFormat,\n        pixelDatatype: pixelDatatype,\n        sampler: Sampler.NEAREST,\n      }),\n    ],\n  });\n\n  autoexposure._framebuffers = framebuffers;\n}\n\nfunction destroyCommands(autoexposure) {\n  var commands = autoexposure._commands;\n  if (!defined(commands)) {\n    return;\n  }\n\n  var length = commands.length;\n  for (var i = 0; i < length; ++i) {\n    commands[i].shaderProgram.destroy();\n  }\n  autoexposure._commands = undefined;\n}\n\nfunction createUniformMap(autoexposure, index) {\n  var uniforms;\n  if (index === 0) {\n    uniforms = {\n      colorTexture: function () {\n        return autoexposure._colorTexture;\n      },\n      colorTextureDimensions: function () {\n        return autoexposure._colorTexture.dimensions;\n      },\n    };\n  } else {\n    var texture = autoexposure._framebuffers[index - 1].getColorTexture(0);\n    uniforms = {\n      colorTexture: function () {\n        return texture;\n      },\n      colorTextureDimensions: function () {\n        return texture.dimensions;\n      },\n    };\n  }\n\n  uniforms.minMaxLuminance = function () {\n    return autoexposure._minMaxLuminance;\n  };\n  uniforms.previousLuminance = function () {\n    return autoexposure._previousLuminance.getColorTexture(0);\n  };\n\n  return uniforms;\n}\n\nfunction getShaderSource(index, length) {\n  var source =\n    \"uniform sampler2D colorTexture; \\n\" +\n    \"varying vec2 v_textureCoordinates; \\n\" +\n    \"float sampleTexture(vec2 offset) { \\n\";\n\n  if (index === 0) {\n    source +=\n      \"    vec4 color = texture2D(colorTexture, v_textureCoordinates + offset); \\n\" +\n      \"    return czm_luminance(color.rgb); \\n\";\n  } else {\n    source +=\n      \"    return texture2D(colorTexture, v_textureCoordinates + offset).r; \\n\";\n  }\n\n  source += \"}\\n\\n\";\n\n  source +=\n    \"uniform vec2 colorTextureDimensions; \\n\" +\n    \"uniform vec2 minMaxLuminance; \\n\" +\n    \"uniform sampler2D previousLuminance; \\n\" +\n    \"void main() { \\n\" +\n    \"    float color = 0.0; \\n\" +\n    \"    float xStep = 1.0 / colorTextureDimensions.x; \\n\" +\n    \"    float yStep = 1.0 / colorTextureDimensions.y; \\n\" +\n    \"    int count = 0; \\n\" +\n    \"    for (int i = 0; i < 3; ++i) { \\n\" +\n    \"        for (int j = 0; j < 3; ++j) { \\n\" +\n    \"            vec2 offset; \\n\" +\n    \"            offset.x = -xStep + float(i) * xStep; \\n\" +\n    \"            offset.y = -yStep + float(j) * yStep; \\n\" +\n    \"            if (offset.x < 0.0 || offset.x > 1.0 || offset.y < 0.0 || offset.y > 1.0) { \\n\" +\n    \"                continue; \\n\" +\n    \"            } \\n\" +\n    \"            color += sampleTexture(offset); \\n\" +\n    \"            ++count; \\n\" +\n    \"        } \\n\" +\n    \"    } \\n\" +\n    \"    if (count > 0) { \\n\" +\n    \"        color /= float(count); \\n\" +\n    \"    } \\n\";\n\n  if (index === length - 1) {\n    source +=\n      \"    float previous = texture2D(previousLuminance, vec2(0.5)).r; \\n\" +\n      \"    color = clamp(color, minMaxLuminance.x, minMaxLuminance.y); \\n\" +\n      \"    color = previous + (color - previous) / (60.0 * 1.5); \\n\" +\n      \"    color = clamp(color, minMaxLuminance.x, minMaxLuminance.y); \\n\";\n  }\n\n  source += \"    gl_FragColor = vec4(color); \\n\" + \"} \\n\";\n  return source;\n}\n\nfunction createCommands(autoexposure, context) {\n  destroyCommands(autoexposure);\n  var framebuffers = autoexposure._framebuffers;\n  var length = framebuffers.length;\n\n  var commands = new Array(length);\n\n  for (var i = 0; i < length; ++i) {\n    commands[i] = context.createViewportQuadCommand(\n      getShaderSource(i, length),\n      {\n        framebuffer: framebuffers[i],\n        uniformMap: createUniformMap(autoexposure, i),\n      }\n    );\n  }\n  autoexposure._commands = commands;\n}\n\n/**\n * A function that will be called before execute. Used to clear any textures attached to framebuffers.\n * @param {Context} context The context.\n * @private\n */\nAutoExposure.prototype.clear = function (context) {\n  var framebuffers = this._framebuffers;\n  if (!defined(framebuffers)) {\n    return;\n  }\n\n  var clearCommand = this._clearCommand;\n  if (!defined(clearCommand)) {\n    clearCommand = this._clearCommand = new ClearCommand({\n      color: new Color(0.0, 0.0, 0.0, 0.0),\n      framebuffer: undefined,\n    });\n  }\n\n  var length = framebuffers.length;\n  for (var i = 0; i < length; ++i) {\n    clearCommand.framebuffer = framebuffers[i];\n    clearCommand.execute(context);\n  }\n};\n\n/**\n * A function that will be called before execute. Used to create WebGL resources and load any textures.\n * @param {Context} context The context.\n * @private\n */\nAutoExposure.prototype.update = function (context) {\n  var width = context.drawingBufferWidth;\n  var height = context.drawingBufferHeight;\n\n  if (width !== this._width || height !== this._height) {\n    this._width = width;\n    this._height = height;\n\n    createFramebuffers(this, context);\n    createCommands(this, context);\n\n    if (!this._ready) {\n      this._ready = true;\n    }\n  }\n\n  this._minMaxLuminance.x = this.minimumLuminance;\n  this._minMaxLuminance.y = this.maximumLuminance;\n\n  var framebuffers = this._framebuffers;\n  var temp = framebuffers[framebuffers.length - 1];\n  framebuffers[framebuffers.length - 1] = this._previousLuminance;\n  this._commands[\n    this._commands.length - 1\n  ].framebuffer = this._previousLuminance;\n  this._previousLuminance = temp;\n};\n\n/**\n * Executes the post-process stage. The color texture is the texture rendered to by the scene or from the previous stage.\n * @param {Context} context The context.\n * @param {Texture} colorTexture The input color texture.\n * @private\n */\nAutoExposure.prototype.execute = function (context, colorTexture) {\n  this._colorTexture = colorTexture;\n\n  var commands = this._commands;\n  if (!defined(commands)) {\n    return;\n  }\n\n  var length = commands.length;\n  for (var i = 0; i < length; ++i) {\n    commands[i].execute(context);\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <p>\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * </p>\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see AutoExposure#destroy\n */\nAutoExposure.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <p>\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see AutoExposure#isDestroyed\n */\nAutoExposure.prototype.destroy = function () {\n  destroyFramebuffers(this);\n  destroyCommands(this);\n  return destroyObject(this);\n};\nexport default AutoExposure;\n"]},"metadata":{},"sourceType":"module"}