{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport Event from \"../Core/Event.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Quaternion from \"../Core/Quaternion.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport Property from \"./Property.js\";\nimport VelocityVectorProperty from \"./VelocityVectorProperty.js\";\n/**\n * A {@link Property} which evaluates to a {@link Quaternion} rotation\n * based on the velocity of the provided {@link PositionProperty}.\n *\n * @alias VelocityOrientationProperty\n * @constructor\n *\n * @param {Property} [position] The position property used to compute the orientation.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid used to determine which way is up.\n *\n * @example\n * //Create an entity with position and orientation.\n * var position = new Cesium.SampledProperty();\n * position.addSamples(...);\n * var entity = viewer.entities.add({\n *   position : position,\n *   orientation : new Cesium.VelocityOrientationProperty(position)\n * }));\n */\n\nfunction VelocityOrientationProperty(position, ellipsoid) {\n  this._velocityVectorProperty = new VelocityVectorProperty(position, true);\n  this._subscription = undefined;\n  this._ellipsoid = undefined;\n  this._definitionChanged = new Event();\n  this.ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n  var that = this;\n\n  this._velocityVectorProperty.definitionChanged.addEventListener(function () {\n    that._definitionChanged.raiseEvent(that);\n  });\n}\n\nObject.defineProperties(VelocityOrientationProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * @memberof VelocityOrientationProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._velocityVectorProperty);\n    }\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * @memberof VelocityOrientationProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the position property used to compute orientation.\n   * @memberof VelocityOrientationProperty.prototype\n   *\n   * @type {Property}\n   */\n  position: {\n    get: function () {\n      return this._velocityVectorProperty.position;\n    },\n    set: function (value) {\n      this._velocityVectorProperty.position = value;\n    }\n  },\n\n  /**\n   * Gets or sets the ellipsoid used to determine which way is up.\n   * @memberof VelocityOrientationProperty.prototype\n   *\n   * @type {Property}\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n    set: function (value) {\n      var oldValue = this._ellipsoid;\n\n      if (oldValue !== value) {\n        this._ellipsoid = value;\n\n        this._definitionChanged.raiseEvent(this);\n      }\n    }\n  }\n});\nvar positionScratch = new Cartesian3();\nvar velocityScratch = new Cartesian3();\nvar rotationScratch = new Matrix3();\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} [time] The time for which to retrieve the value.\n * @param {Quaternion} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Quaternion} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\nVelocityOrientationProperty.prototype.getValue = function (time, result) {\n  var velocity = this._velocityVectorProperty._getValue(time, velocityScratch, positionScratch);\n\n  if (!defined(velocity)) {\n    return undefined;\n  }\n\n  Transforms.rotationMatrixFromPositionVelocity(positionScratch, velocity, this._ellipsoid, rotationScratch);\n  return Quaternion.fromRotationMatrix(rotationScratch, result);\n};\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nVelocityOrientationProperty.prototype.equals = function (other) {\n  return this === other || //\n  other instanceof VelocityOrientationProperty && Property.equals(this._velocityVectorProperty, other._velocityVectorProperty) && (this._ellipsoid === other._ellipsoid || this._ellipsoid.equals(other._ellipsoid));\n};\n\nexport default VelocityOrientationProperty;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/VelocityOrientationProperty.js"],"names":["Cartesian3","defaultValue","defined","Ellipsoid","Event","Matrix3","Quaternion","Transforms","Property","VelocityVectorProperty","VelocityOrientationProperty","position","ellipsoid","_velocityVectorProperty","_subscription","undefined","_ellipsoid","_definitionChanged","WGS84","that","definitionChanged","addEventListener","raiseEvent","Object","defineProperties","prototype","isConstant","get","set","value","oldValue","positionScratch","velocityScratch","rotationScratch","getValue","time","result","velocity","_getValue","rotationMatrixFromPositionVelocity","fromRotationMatrix","equals","other"],"mappings":"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","sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport Event from \"../Core/Event.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Quaternion from \"../Core/Quaternion.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport Property from \"./Property.js\";\nimport VelocityVectorProperty from \"./VelocityVectorProperty.js\";\n\n/**\n * A {@link Property} which evaluates to a {@link Quaternion} rotation\n * based on the velocity of the provided {@link PositionProperty}.\n *\n * @alias VelocityOrientationProperty\n * @constructor\n *\n * @param {Property} [position] The position property used to compute the orientation.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid used to determine which way is up.\n *\n * @example\n * //Create an entity with position and orientation.\n * var position = new Cesium.SampledProperty();\n * position.addSamples(...);\n * var entity = viewer.entities.add({\n *   position : position,\n *   orientation : new Cesium.VelocityOrientationProperty(position)\n * }));\n */\nfunction VelocityOrientationProperty(position, ellipsoid) {\n  this._velocityVectorProperty = new VelocityVectorProperty(position, true);\n  this._subscription = undefined;\n  this._ellipsoid = undefined;\n  this._definitionChanged = new Event();\n\n  this.ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n\n  var that = this;\n  this._velocityVectorProperty.definitionChanged.addEventListener(function () {\n    that._definitionChanged.raiseEvent(that);\n  });\n}\n\nObject.defineProperties(VelocityOrientationProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * @memberof VelocityOrientationProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._velocityVectorProperty);\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * @memberof VelocityOrientationProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets or sets the position property used to compute orientation.\n   * @memberof VelocityOrientationProperty.prototype\n   *\n   * @type {Property}\n   */\n  position: {\n    get: function () {\n      return this._velocityVectorProperty.position;\n    },\n    set: function (value) {\n      this._velocityVectorProperty.position = value;\n    },\n  },\n  /**\n   * Gets or sets the ellipsoid used to determine which way is up.\n   * @memberof VelocityOrientationProperty.prototype\n   *\n   * @type {Property}\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n    set: function (value) {\n      var oldValue = this._ellipsoid;\n      if (oldValue !== value) {\n        this._ellipsoid = value;\n        this._definitionChanged.raiseEvent(this);\n      }\n    },\n  },\n});\n\nvar positionScratch = new Cartesian3();\nvar velocityScratch = new Cartesian3();\nvar rotationScratch = new Matrix3();\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} [time] The time for which to retrieve the value.\n * @param {Quaternion} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Quaternion} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nVelocityOrientationProperty.prototype.getValue = function (time, result) {\n  var velocity = this._velocityVectorProperty._getValue(\n    time,\n    velocityScratch,\n    positionScratch\n  );\n\n  if (!defined(velocity)) {\n    return undefined;\n  }\n\n  Transforms.rotationMatrixFromPositionVelocity(\n    positionScratch,\n    velocity,\n    this._ellipsoid,\n    rotationScratch\n  );\n  return Quaternion.fromRotationMatrix(rotationScratch, result);\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nVelocityOrientationProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof VelocityOrientationProperty &&\n      Property.equals(\n        this._velocityVectorProperty,\n        other._velocityVectorProperty\n      ) &&\n      (this._ellipsoid === other._ellipsoid ||\n        this._ellipsoid.equals(other._ellipsoid)))\n  );\n};\nexport default VelocityOrientationProperty;\n"]},"metadata":{},"sourceType":"module"}