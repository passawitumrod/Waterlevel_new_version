{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport WallGeometry from \"../Core/WallGeometry.js\";\nimport WallOutlineGeometry from \"../Core/WallOutlineGeometry.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport Property from \"./Property.js\";\nvar scratchColor = new Color();\n\nfunction WallGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.positions = undefined;\n  this.minimumHeights = undefined;\n  this.maximumHeights = undefined;\n  this.granularity = undefined;\n}\n/**\n * A {@link GeometryUpdater} for walls.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias WallGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\n\n\nfunction WallGeometryUpdater(entity, scene) {\n  GeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new WallGeometryOptions(entity),\n    geometryPropertyName: \"wall\",\n    observedPropertyNames: [\"availability\", \"wall\"]\n  });\n\n  this._onEntityPropertyChanged(entity, \"wall\", entity.wall, undefined);\n}\n\nif (defined(Object.create)) {\n  WallGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n  WallGeometryUpdater.prototype.constructor = WallGeometryUpdater;\n}\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\n\n\nWallGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\"This instance does not represent a filled geometry.\");\n  } //>>includeEnd('debug');\n\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n  var attributes;\n  var color;\n  var show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time));\n\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n  var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    var currentColor;\n\n    if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n\n    color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute,\n      color: color\n    };\n  } else {\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute\n    };\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new WallGeometry(this._options),\n    attributes: attributes\n  });\n};\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\n\n\nWallGeometryUpdater.prototype.createOutlineGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\"This instance does not represent an outlined geometry.\");\n  } //>>includeEnd('debug');\n\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n  var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new WallOutlineGeometry(this._options),\n    attributes: {\n      show: new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n      color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n      distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition)\n    }\n  });\n};\n\nWallGeometryUpdater.prototype._isHidden = function (entity, wall) {\n  return !defined(wall.positions) || GeometryUpdater.prototype._isHidden.call(this, entity, wall);\n};\n\nWallGeometryUpdater.prototype._getIsClosed = function (options) {\n  return false;\n};\n\nWallGeometryUpdater.prototype._isDynamic = function (entity, wall) {\n  return !wall.positions.isConstant || //\n  !Property.isConstant(wall.minimumHeights) || //\n  !Property.isConstant(wall.maximumHeights) || //\n  !Property.isConstant(wall.outlineWidth) || //\n  !Property.isConstant(wall.granularity);\n};\n\nWallGeometryUpdater.prototype._setStaticOptions = function (entity, wall) {\n  var minimumHeights = wall.minimumHeights;\n  var maximumHeights = wall.maximumHeights;\n  var granularity = wall.granularity;\n  var isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n  var options = this._options;\n  options.vertexFormat = isColorMaterial ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.positions = wall.positions.getValue(Iso8601.MINIMUM_VALUE, options.positions);\n  options.minimumHeights = defined(minimumHeights) ? minimumHeights.getValue(Iso8601.MINIMUM_VALUE, options.minimumHeights) : undefined;\n  options.maximumHeights = defined(maximumHeights) ? maximumHeights.getValue(Iso8601.MINIMUM_VALUE, options.maximumHeights) : undefined;\n  options.granularity = defined(granularity) ? granularity.getValue(Iso8601.MINIMUM_VALUE) : undefined;\n};\n\nWallGeometryUpdater.DynamicGeometryUpdater = DynamicWallGeometryUpdater;\n/**\n * @private\n */\n\nfunction DynamicWallGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n  DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n}\n\nif (defined(Object.create)) {\n  DynamicWallGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n  DynamicWallGeometryUpdater.prototype.constructor = DynamicWallGeometryUpdater;\n}\n\nDynamicWallGeometryUpdater.prototype._isHidden = function (entity, wall, time) {\n  return !defined(this._options.positions) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, wall, time);\n};\n\nDynamicWallGeometryUpdater.prototype._setOptions = function (entity, wall, time) {\n  var options = this._options;\n  options.positions = Property.getValueOrUndefined(wall.positions, time, options.positions);\n  options.minimumHeights = Property.getValueOrUndefined(wall.minimumHeights, time, options.minimumHeights);\n  options.maximumHeights = Property.getValueOrUndefined(wall.maximumHeights, time, options.maximumHeights);\n  options.granularity = Property.getValueOrUndefined(wall.granularity, time);\n};\n\nexport default WallGeometryUpdater;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/DataSources/WallGeometryUpdater.js"],"names":["Check","Color","ColorGeometryInstanceAttribute","defined","DeveloperError","DistanceDisplayConditionGeometryInstanceAttribute","GeometryInstance","Iso8601","ShowGeometryInstanceAttribute","WallGeometry","WallOutlineGeometry","MaterialAppearance","PerInstanceColorAppearance","ColorMaterialProperty","DynamicGeometryUpdater","GeometryUpdater","Property","scratchColor","WallGeometryOptions","entity","id","vertexFormat","undefined","positions","minimumHeights","maximumHeights","granularity","WallGeometryUpdater","scene","call","geometryOptions","geometryPropertyName","observedPropertyNames","_onEntityPropertyChanged","wall","Object","create","prototype","constructor","createFillGeometryInstance","time","_fillEnabled","_entity","isAvailable","attributes","color","show","isShowing","_showProperty","getValue","_fillProperty","distanceDisplayCondition","_distanceDisplayConditionProperty","distanceDisplayConditionAttribute","fromDistanceDisplayCondition","_materialProperty","currentColor","isConstant","WHITE","fromColor","geometry","_options","createOutlineGeometryInstance","_outlineEnabled","outlineColor","getValueOrDefault","_outlineColorProperty","BLACK","_showOutlineProperty","_isHidden","_getIsClosed","options","_isDynamic","outlineWidth","_setStaticOptions","isColorMaterial","VERTEX_FORMAT","MaterialSupport","TEXTURED","MINIMUM_VALUE","DynamicWallGeometryUpdater","geometryUpdater","primitives","groundPrimitives","_setOptions","getValueOrUndefined"],"mappings":"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","sourcesContent":["import Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport WallGeometry from \"../Core/WallGeometry.js\";\nimport WallOutlineGeometry from \"../Core/WallOutlineGeometry.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport Property from \"./Property.js\";\n\nvar scratchColor = new Color();\n\nfunction WallGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.positions = undefined;\n  this.minimumHeights = undefined;\n  this.maximumHeights = undefined;\n  this.granularity = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for walls.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias WallGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction WallGeometryUpdater(entity, scene) {\n  GeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new WallGeometryOptions(entity),\n    geometryPropertyName: \"wall\",\n    observedPropertyNames: [\"availability\", \"wall\"],\n  });\n\n  this._onEntityPropertyChanged(entity, \"wall\", entity.wall, undefined);\n}\n\nif (defined(Object.create)) {\n  WallGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n  WallGeometryUpdater.prototype.constructor = WallGeometryUpdater;\n}\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nWallGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent a filled geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n\n  var attributes;\n\n  var color;\n  var show = new ShowGeometryInstanceAttribute(\n    isAvailable &&\n      entity.isShowing &&\n      this._showProperty.getValue(time) &&\n      this._fillProperty.getValue(time)\n  );\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n  var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n    distanceDisplayCondition\n  );\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    var currentColor;\n    if (\n      defined(this._materialProperty.color) &&\n      (this._materialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute,\n      color: color,\n    };\n  } else {\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute,\n    };\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new WallGeometry(this._options),\n    attributes: attributes,\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nWallGeometryUpdater.prototype.createOutlineGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent an outlined geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n  var outlineColor = Property.getValueOrDefault(\n    this._outlineColorProperty,\n    time,\n    Color.BLACK,\n    scratchColor\n  );\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new WallOutlineGeometry(this._options),\n    attributes: {\n      show: new ShowGeometryInstanceAttribute(\n        isAvailable &&\n          entity.isShowing &&\n          this._showProperty.getValue(time) &&\n          this._showOutlineProperty.getValue(time)\n      ),\n      color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n      distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n        distanceDisplayCondition\n      ),\n    },\n  });\n};\n\nWallGeometryUpdater.prototype._isHidden = function (entity, wall) {\n  return (\n    !defined(wall.positions) ||\n    GeometryUpdater.prototype._isHidden.call(this, entity, wall)\n  );\n};\n\nWallGeometryUpdater.prototype._getIsClosed = function (options) {\n  return false;\n};\n\nWallGeometryUpdater.prototype._isDynamic = function (entity, wall) {\n  return (\n    !wall.positions.isConstant || //\n    !Property.isConstant(wall.minimumHeights) || //\n    !Property.isConstant(wall.maximumHeights) || //\n    !Property.isConstant(wall.outlineWidth) || //\n    !Property.isConstant(wall.granularity)\n  );\n};\n\nWallGeometryUpdater.prototype._setStaticOptions = function (entity, wall) {\n  var minimumHeights = wall.minimumHeights;\n  var maximumHeights = wall.maximumHeights;\n  var granularity = wall.granularity;\n  var isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n\n  var options = this._options;\n  options.vertexFormat = isColorMaterial\n    ? PerInstanceColorAppearance.VERTEX_FORMAT\n    : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.positions = wall.positions.getValue(\n    Iso8601.MINIMUM_VALUE,\n    options.positions\n  );\n  options.minimumHeights = defined(minimumHeights)\n    ? minimumHeights.getValue(Iso8601.MINIMUM_VALUE, options.minimumHeights)\n    : undefined;\n  options.maximumHeights = defined(maximumHeights)\n    ? maximumHeights.getValue(Iso8601.MINIMUM_VALUE, options.maximumHeights)\n    : undefined;\n  options.granularity = defined(granularity)\n    ? granularity.getValue(Iso8601.MINIMUM_VALUE)\n    : undefined;\n};\n\nWallGeometryUpdater.DynamicGeometryUpdater = DynamicWallGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicWallGeometryUpdater(\n  geometryUpdater,\n  primitives,\n  groundPrimitives\n) {\n  DynamicGeometryUpdater.call(\n    this,\n    geometryUpdater,\n    primitives,\n    groundPrimitives\n  );\n}\n\nif (defined(Object.create)) {\n  DynamicWallGeometryUpdater.prototype = Object.create(\n    DynamicGeometryUpdater.prototype\n  );\n  DynamicWallGeometryUpdater.prototype.constructor = DynamicWallGeometryUpdater;\n}\n\nDynamicWallGeometryUpdater.prototype._isHidden = function (entity, wall, time) {\n  return (\n    !defined(this._options.positions) ||\n    DynamicGeometryUpdater.prototype._isHidden.call(this, entity, wall, time)\n  );\n};\n\nDynamicWallGeometryUpdater.prototype._setOptions = function (\n  entity,\n  wall,\n  time\n) {\n  var options = this._options;\n  options.positions = Property.getValueOrUndefined(\n    wall.positions,\n    time,\n    options.positions\n  );\n  options.minimumHeights = Property.getValueOrUndefined(\n    wall.minimumHeights,\n    time,\n    options.minimumHeights\n  );\n  options.maximumHeights = Property.getValueOrUndefined(\n    wall.maximumHeights,\n    time,\n    options.maximumHeights\n  );\n  options.granularity = Property.getValueOrUndefined(wall.granularity, time);\n};\nexport default WallGeometryUpdater;\n"]},"metadata":{},"sourceType":"module"}