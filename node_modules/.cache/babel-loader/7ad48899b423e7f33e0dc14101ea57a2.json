{"ast":null,"code":"import CubicRealPolynomial from \"./CubicRealPolynomial.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\nimport QuadraticRealPolynomial from \"./QuadraticRealPolynomial.js\";\n/**\n * Defines functions for 4th order polynomial functions of one variable with only real coefficients.\n *\n * @exports QuarticRealPolynomial\n */\n\nvar QuarticRealPolynomial = {};\n/**\n * Provides the discriminant of the quartic equation from the supplied coefficients.\n *\n * @param {Number} a The coefficient of the 4th order monomial.\n * @param {Number} b The coefficient of the 3rd order monomial.\n * @param {Number} c The coefficient of the 2nd order monomial.\n * @param {Number} d The coefficient of the 1st order monomial.\n * @param {Number} e The coefficient of the 0th order monomial.\n * @returns {Number} The value of the discriminant.\n */\n\nQuarticRealPolynomial.computeDiscriminant = function (a, b, c, d, e) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n\n  if (typeof d !== \"number\") {\n    throw new DeveloperError(\"d is a required number.\");\n  }\n\n  if (typeof e !== \"number\") {\n    throw new DeveloperError(\"e is a required number.\");\n  } //>>includeEnd('debug');\n\n\n  var a2 = a * a;\n  var a3 = a2 * a;\n  var b2 = b * b;\n  var b3 = b2 * b;\n  var c2 = c * c;\n  var c3 = c2 * c;\n  var d2 = d * d;\n  var d3 = d2 * d;\n  var e2 = e * e;\n  var e3 = e2 * e;\n  var discriminant = b2 * c2 * d2 - 4.0 * b3 * d3 - 4.0 * a * c3 * d2 + 18 * a * b * c * d3 - 27.0 * a2 * d2 * d2 + 256.0 * a3 * e3 + e * (18.0 * b3 * c * d - 4.0 * b2 * c3 + 16.0 * a * c2 * c2 - 80.0 * a * b * c2 * d - 6.0 * a * b2 * d2 + 144.0 * a2 * c * d2) + e2 * (144.0 * a * b2 * c - 27.0 * b2 * b2 - 128.0 * a2 * c2 - 192.0 * a2 * b * d);\n  return discriminant;\n};\n\nfunction original(a3, a2, a1, a0) {\n  var a3Squared = a3 * a3;\n  var p = a2 - 3.0 * a3Squared / 8.0;\n  var q = a1 - a2 * a3 / 2.0 + a3Squared * a3 / 8.0;\n  var r = a0 - a1 * a3 / 4.0 + a2 * a3Squared / 16.0 - 3.0 * a3Squared * a3Squared / 256.0; // Find the roots of the cubic equations:  h^6 + 2 p h^4 + (p^2 - 4 r) h^2 - q^2 = 0.\n\n  var cubicRoots = CubicRealPolynomial.computeRealRoots(1.0, 2.0 * p, p * p - 4.0 * r, -q * q);\n\n  if (cubicRoots.length > 0) {\n    var temp = -a3 / 4.0; // Use the largest positive root.\n\n    var hSquared = cubicRoots[cubicRoots.length - 1];\n\n    if (Math.abs(hSquared) < CesiumMath.EPSILON14) {\n      // y^4 + p y^2 + r = 0.\n      var roots = QuadraticRealPolynomial.computeRealRoots(1.0, p, r);\n\n      if (roots.length === 2) {\n        var root0 = roots[0];\n        var root1 = roots[1];\n        var y;\n\n        if (root0 >= 0.0 && root1 >= 0.0) {\n          var y0 = Math.sqrt(root0);\n          var y1 = Math.sqrt(root1);\n          return [temp - y1, temp - y0, temp + y0, temp + y1];\n        } else if (root0 >= 0.0 && root1 < 0.0) {\n          y = Math.sqrt(root0);\n          return [temp - y, temp + y];\n        } else if (root0 < 0.0 && root1 >= 0.0) {\n          y = Math.sqrt(root1);\n          return [temp - y, temp + y];\n        }\n      }\n\n      return [];\n    } else if (hSquared > 0.0) {\n      var h = Math.sqrt(hSquared);\n      var m = (p + hSquared - q / h) / 2.0;\n      var n = (p + hSquared + q / h) / 2.0; // Now solve the two quadratic factors:  (y^2 + h y + m)(y^2 - h y + n);\n\n      var roots1 = QuadraticRealPolynomial.computeRealRoots(1.0, h, m);\n      var roots2 = QuadraticRealPolynomial.computeRealRoots(1.0, -h, n);\n\n      if (roots1.length !== 0) {\n        roots1[0] += temp;\n        roots1[1] += temp;\n\n        if (roots2.length !== 0) {\n          roots2[0] += temp;\n          roots2[1] += temp;\n\n          if (roots1[1] <= roots2[0]) {\n            return [roots1[0], roots1[1], roots2[0], roots2[1]];\n          } else if (roots2[1] <= roots1[0]) {\n            return [roots2[0], roots2[1], roots1[0], roots1[1]];\n          } else if (roots1[0] >= roots2[0] && roots1[1] <= roots2[1]) {\n            return [roots2[0], roots1[0], roots1[1], roots2[1]];\n          } else if (roots2[0] >= roots1[0] && roots2[1] <= roots1[1]) {\n            return [roots1[0], roots2[0], roots2[1], roots1[1]];\n          } else if (roots1[0] > roots2[0] && roots1[0] < roots2[1]) {\n            return [roots2[0], roots1[0], roots2[1], roots1[1]];\n          }\n\n          return [roots1[0], roots2[0], roots1[1], roots2[1]];\n        }\n\n        return roots1;\n      }\n\n      if (roots2.length !== 0) {\n        roots2[0] += temp;\n        roots2[1] += temp;\n        return roots2;\n      }\n\n      return [];\n    }\n  }\n\n  return [];\n}\n\nfunction neumark(a3, a2, a1, a0) {\n  var a1Squared = a1 * a1;\n  var a2Squared = a2 * a2;\n  var a3Squared = a3 * a3;\n  var p = -2.0 * a2;\n  var q = a1 * a3 + a2Squared - 4.0 * a0;\n  var r = a3Squared * a0 - a1 * a2 * a3 + a1Squared;\n  var cubicRoots = CubicRealPolynomial.computeRealRoots(1.0, p, q, r);\n\n  if (cubicRoots.length > 0) {\n    // Use the most positive root\n    var y = cubicRoots[0];\n    var temp = a2 - y;\n    var tempSquared = temp * temp;\n    var g1 = a3 / 2.0;\n    var h1 = temp / 2.0;\n    var m = tempSquared - 4.0 * a0;\n    var mError = tempSquared + 4.0 * Math.abs(a0);\n    var n = a3Squared - 4.0 * y;\n    var nError = a3Squared + 4.0 * Math.abs(y);\n    var g2;\n    var h2;\n\n    if (y < 0.0 || m * nError < n * mError) {\n      var squareRootOfN = Math.sqrt(n);\n      g2 = squareRootOfN / 2.0;\n      h2 = squareRootOfN === 0.0 ? 0.0 : (a3 * h1 - a1) / squareRootOfN;\n    } else {\n      var squareRootOfM = Math.sqrt(m);\n      g2 = squareRootOfM === 0.0 ? 0.0 : (a3 * h1 - a1) / squareRootOfM;\n      h2 = squareRootOfM / 2.0;\n    }\n\n    var G;\n    var g;\n\n    if (g1 === 0.0 && g2 === 0.0) {\n      G = 0.0;\n      g = 0.0;\n    } else if (CesiumMath.sign(g1) === CesiumMath.sign(g2)) {\n      G = g1 + g2;\n      g = y / G;\n    } else {\n      g = g1 - g2;\n      G = y / g;\n    }\n\n    var H;\n    var h;\n\n    if (h1 === 0.0 && h2 === 0.0) {\n      H = 0.0;\n      h = 0.0;\n    } else if (CesiumMath.sign(h1) === CesiumMath.sign(h2)) {\n      H = h1 + h2;\n      h = a0 / H;\n    } else {\n      h = h1 - h2;\n      H = a0 / h;\n    } // Now solve the two quadratic factors:  (y^2 + G y + H)(y^2 + g y + h);\n\n\n    var roots1 = QuadraticRealPolynomial.computeRealRoots(1.0, G, H);\n    var roots2 = QuadraticRealPolynomial.computeRealRoots(1.0, g, h);\n\n    if (roots1.length !== 0) {\n      if (roots2.length !== 0) {\n        if (roots1[1] <= roots2[0]) {\n          return [roots1[0], roots1[1], roots2[0], roots2[1]];\n        } else if (roots2[1] <= roots1[0]) {\n          return [roots2[0], roots2[1], roots1[0], roots1[1]];\n        } else if (roots1[0] >= roots2[0] && roots1[1] <= roots2[1]) {\n          return [roots2[0], roots1[0], roots1[1], roots2[1]];\n        } else if (roots2[0] >= roots1[0] && roots2[1] <= roots1[1]) {\n          return [roots1[0], roots2[0], roots2[1], roots1[1]];\n        } else if (roots1[0] > roots2[0] && roots1[0] < roots2[1]) {\n          return [roots2[0], roots1[0], roots2[1], roots1[1]];\n        }\n\n        return [roots1[0], roots2[0], roots1[1], roots2[1]];\n      }\n\n      return roots1;\n    }\n\n    if (roots2.length !== 0) {\n      return roots2;\n    }\n  }\n\n  return [];\n}\n/**\n * Provides the real valued roots of the quartic polynomial with the provided coefficients.\n *\n * @param {Number} a The coefficient of the 4th order monomial.\n * @param {Number} b The coefficient of the 3rd order monomial.\n * @param {Number} c The coefficient of the 2nd order monomial.\n * @param {Number} d The coefficient of the 1st order monomial.\n * @param {Number} e The coefficient of the 0th order monomial.\n * @returns {Number[]} The real valued roots.\n */\n\n\nQuarticRealPolynomial.computeRealRoots = function (a, b, c, d, e) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n\n  if (typeof d !== \"number\") {\n    throw new DeveloperError(\"d is a required number.\");\n  }\n\n  if (typeof e !== \"number\") {\n    throw new DeveloperError(\"e is a required number.\");\n  } //>>includeEnd('debug');\n\n\n  if (Math.abs(a) < CesiumMath.EPSILON15) {\n    return CubicRealPolynomial.computeRealRoots(b, c, d, e);\n  }\n\n  var a3 = b / a;\n  var a2 = c / a;\n  var a1 = d / a;\n  var a0 = e / a;\n  var k = a3 < 0.0 ? 1 : 0;\n  k += a2 < 0.0 ? k + 1 : k;\n  k += a1 < 0.0 ? k + 1 : k;\n  k += a0 < 0.0 ? k + 1 : k;\n\n  switch (k) {\n    case 0:\n      return original(a3, a2, a1, a0);\n\n    case 1:\n      return neumark(a3, a2, a1, a0);\n\n    case 2:\n      return neumark(a3, a2, a1, a0);\n\n    case 3:\n      return original(a3, a2, a1, a0);\n\n    case 4:\n      return original(a3, a2, a1, a0);\n\n    case 5:\n      return neumark(a3, a2, a1, a0);\n\n    case 6:\n      return original(a3, a2, a1, a0);\n\n    case 7:\n      return original(a3, a2, a1, a0);\n\n    case 8:\n      return neumark(a3, a2, a1, a0);\n\n    case 9:\n      return original(a3, a2, a1, a0);\n\n    case 10:\n      return original(a3, a2, a1, a0);\n\n    case 11:\n      return neumark(a3, a2, a1, a0);\n\n    case 12:\n      return original(a3, a2, a1, a0);\n\n    case 13:\n      return original(a3, a2, a1, a0);\n\n    case 14:\n      return original(a3, a2, a1, a0);\n\n    case 15:\n      return original(a3, a2, a1, a0);\n\n    default:\n      return undefined;\n  }\n};\n\nexport default QuarticRealPolynomial;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/QuarticRealPolynomial.js"],"names":["CubicRealPolynomial","DeveloperError","CesiumMath","QuadraticRealPolynomial","QuarticRealPolynomial","computeDiscriminant","a","b","c","d","e","a2","a3","b2","b3","c2","c3","d2","d3","e2","e3","discriminant","original","a1","a0","a3Squared","p","q","r","cubicRoots","computeRealRoots","length","temp","hSquared","Math","abs","EPSILON14","roots","root0","root1","y","y0","sqrt","y1","h","m","n","roots1","roots2","neumark","a1Squared","a2Squared","tempSquared","g1","h1","mError","nError","g2","h2","squareRootOfN","squareRootOfM","G","g","sign","H","EPSILON15","k","undefined"],"mappings":"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","sourcesContent":["import CubicRealPolynomial from \"./CubicRealPolynomial.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\nimport QuadraticRealPolynomial from \"./QuadraticRealPolynomial.js\";\n\n/**\n * Defines functions for 4th order polynomial functions of one variable with only real coefficients.\n *\n * @exports QuarticRealPolynomial\n */\nvar QuarticRealPolynomial = {};\n\n/**\n * Provides the discriminant of the quartic equation from the supplied coefficients.\n *\n * @param {Number} a The coefficient of the 4th order monomial.\n * @param {Number} b The coefficient of the 3rd order monomial.\n * @param {Number} c The coefficient of the 2nd order monomial.\n * @param {Number} d The coefficient of the 1st order monomial.\n * @param {Number} e The coefficient of the 0th order monomial.\n * @returns {Number} The value of the discriminant.\n */\nQuarticRealPolynomial.computeDiscriminant = function (a, b, c, d, e) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n  if (typeof d !== \"number\") {\n    throw new DeveloperError(\"d is a required number.\");\n  }\n  if (typeof e !== \"number\") {\n    throw new DeveloperError(\"e is a required number.\");\n  }\n  //>>includeEnd('debug');\n\n  var a2 = a * a;\n  var a3 = a2 * a;\n  var b2 = b * b;\n  var b3 = b2 * b;\n  var c2 = c * c;\n  var c3 = c2 * c;\n  var d2 = d * d;\n  var d3 = d2 * d;\n  var e2 = e * e;\n  var e3 = e2 * e;\n\n  var discriminant =\n    b2 * c2 * d2 -\n    4.0 * b3 * d3 -\n    4.0 * a * c3 * d2 +\n    18 * a * b * c * d3 -\n    27.0 * a2 * d2 * d2 +\n    256.0 * a3 * e3 +\n    e *\n      (18.0 * b3 * c * d -\n        4.0 * b2 * c3 +\n        16.0 * a * c2 * c2 -\n        80.0 * a * b * c2 * d -\n        6.0 * a * b2 * d2 +\n        144.0 * a2 * c * d2) +\n    e2 *\n      (144.0 * a * b2 * c -\n        27.0 * b2 * b2 -\n        128.0 * a2 * c2 -\n        192.0 * a2 * b * d);\n  return discriminant;\n};\n\nfunction original(a3, a2, a1, a0) {\n  var a3Squared = a3 * a3;\n\n  var p = a2 - (3.0 * a3Squared) / 8.0;\n  var q = a1 - (a2 * a3) / 2.0 + (a3Squared * a3) / 8.0;\n  var r =\n    a0 -\n    (a1 * a3) / 4.0 +\n    (a2 * a3Squared) / 16.0 -\n    (3.0 * a3Squared * a3Squared) / 256.0;\n\n  // Find the roots of the cubic equations:  h^6 + 2 p h^4 + (p^2 - 4 r) h^2 - q^2 = 0.\n  var cubicRoots = CubicRealPolynomial.computeRealRoots(\n    1.0,\n    2.0 * p,\n    p * p - 4.0 * r,\n    -q * q\n  );\n\n  if (cubicRoots.length > 0) {\n    var temp = -a3 / 4.0;\n\n    // Use the largest positive root.\n    var hSquared = cubicRoots[cubicRoots.length - 1];\n\n    if (Math.abs(hSquared) < CesiumMath.EPSILON14) {\n      // y^4 + p y^2 + r = 0.\n      var roots = QuadraticRealPolynomial.computeRealRoots(1.0, p, r);\n\n      if (roots.length === 2) {\n        var root0 = roots[0];\n        var root1 = roots[1];\n\n        var y;\n        if (root0 >= 0.0 && root1 >= 0.0) {\n          var y0 = Math.sqrt(root0);\n          var y1 = Math.sqrt(root1);\n\n          return [temp - y1, temp - y0, temp + y0, temp + y1];\n        } else if (root0 >= 0.0 && root1 < 0.0) {\n          y = Math.sqrt(root0);\n          return [temp - y, temp + y];\n        } else if (root0 < 0.0 && root1 >= 0.0) {\n          y = Math.sqrt(root1);\n          return [temp - y, temp + y];\n        }\n      }\n      return [];\n    } else if (hSquared > 0.0) {\n      var h = Math.sqrt(hSquared);\n\n      var m = (p + hSquared - q / h) / 2.0;\n      var n = (p + hSquared + q / h) / 2.0;\n\n      // Now solve the two quadratic factors:  (y^2 + h y + m)(y^2 - h y + n);\n      var roots1 = QuadraticRealPolynomial.computeRealRoots(1.0, h, m);\n      var roots2 = QuadraticRealPolynomial.computeRealRoots(1.0, -h, n);\n\n      if (roots1.length !== 0) {\n        roots1[0] += temp;\n        roots1[1] += temp;\n\n        if (roots2.length !== 0) {\n          roots2[0] += temp;\n          roots2[1] += temp;\n\n          if (roots1[1] <= roots2[0]) {\n            return [roots1[0], roots1[1], roots2[0], roots2[1]];\n          } else if (roots2[1] <= roots1[0]) {\n            return [roots2[0], roots2[1], roots1[0], roots1[1]];\n          } else if (roots1[0] >= roots2[0] && roots1[1] <= roots2[1]) {\n            return [roots2[0], roots1[0], roots1[1], roots2[1]];\n          } else if (roots2[0] >= roots1[0] && roots2[1] <= roots1[1]) {\n            return [roots1[0], roots2[0], roots2[1], roots1[1]];\n          } else if (roots1[0] > roots2[0] && roots1[0] < roots2[1]) {\n            return [roots2[0], roots1[0], roots2[1], roots1[1]];\n          }\n          return [roots1[0], roots2[0], roots1[1], roots2[1]];\n        }\n        return roots1;\n      }\n\n      if (roots2.length !== 0) {\n        roots2[0] += temp;\n        roots2[1] += temp;\n\n        return roots2;\n      }\n      return [];\n    }\n  }\n  return [];\n}\n\nfunction neumark(a3, a2, a1, a0) {\n  var a1Squared = a1 * a1;\n  var a2Squared = a2 * a2;\n  var a3Squared = a3 * a3;\n\n  var p = -2.0 * a2;\n  var q = a1 * a3 + a2Squared - 4.0 * a0;\n  var r = a3Squared * a0 - a1 * a2 * a3 + a1Squared;\n\n  var cubicRoots = CubicRealPolynomial.computeRealRoots(1.0, p, q, r);\n\n  if (cubicRoots.length > 0) {\n    // Use the most positive root\n    var y = cubicRoots[0];\n\n    var temp = a2 - y;\n    var tempSquared = temp * temp;\n\n    var g1 = a3 / 2.0;\n    var h1 = temp / 2.0;\n\n    var m = tempSquared - 4.0 * a0;\n    var mError = tempSquared + 4.0 * Math.abs(a0);\n\n    var n = a3Squared - 4.0 * y;\n    var nError = a3Squared + 4.0 * Math.abs(y);\n\n    var g2;\n    var h2;\n\n    if (y < 0.0 || m * nError < n * mError) {\n      var squareRootOfN = Math.sqrt(n);\n      g2 = squareRootOfN / 2.0;\n      h2 = squareRootOfN === 0.0 ? 0.0 : (a3 * h1 - a1) / squareRootOfN;\n    } else {\n      var squareRootOfM = Math.sqrt(m);\n      g2 = squareRootOfM === 0.0 ? 0.0 : (a3 * h1 - a1) / squareRootOfM;\n      h2 = squareRootOfM / 2.0;\n    }\n\n    var G;\n    var g;\n    if (g1 === 0.0 && g2 === 0.0) {\n      G = 0.0;\n      g = 0.0;\n    } else if (CesiumMath.sign(g1) === CesiumMath.sign(g2)) {\n      G = g1 + g2;\n      g = y / G;\n    } else {\n      g = g1 - g2;\n      G = y / g;\n    }\n\n    var H;\n    var h;\n    if (h1 === 0.0 && h2 === 0.0) {\n      H = 0.0;\n      h = 0.0;\n    } else if (CesiumMath.sign(h1) === CesiumMath.sign(h2)) {\n      H = h1 + h2;\n      h = a0 / H;\n    } else {\n      h = h1 - h2;\n      H = a0 / h;\n    }\n\n    // Now solve the two quadratic factors:  (y^2 + G y + H)(y^2 + g y + h);\n    var roots1 = QuadraticRealPolynomial.computeRealRoots(1.0, G, H);\n    var roots2 = QuadraticRealPolynomial.computeRealRoots(1.0, g, h);\n\n    if (roots1.length !== 0) {\n      if (roots2.length !== 0) {\n        if (roots1[1] <= roots2[0]) {\n          return [roots1[0], roots1[1], roots2[0], roots2[1]];\n        } else if (roots2[1] <= roots1[0]) {\n          return [roots2[0], roots2[1], roots1[0], roots1[1]];\n        } else if (roots1[0] >= roots2[0] && roots1[1] <= roots2[1]) {\n          return [roots2[0], roots1[0], roots1[1], roots2[1]];\n        } else if (roots2[0] >= roots1[0] && roots2[1] <= roots1[1]) {\n          return [roots1[0], roots2[0], roots2[1], roots1[1]];\n        } else if (roots1[0] > roots2[0] && roots1[0] < roots2[1]) {\n          return [roots2[0], roots1[0], roots2[1], roots1[1]];\n        }\n        return [roots1[0], roots2[0], roots1[1], roots2[1]];\n      }\n      return roots1;\n    }\n    if (roots2.length !== 0) {\n      return roots2;\n    }\n  }\n  return [];\n}\n\n/**\n * Provides the real valued roots of the quartic polynomial with the provided coefficients.\n *\n * @param {Number} a The coefficient of the 4th order monomial.\n * @param {Number} b The coefficient of the 3rd order monomial.\n * @param {Number} c The coefficient of the 2nd order monomial.\n * @param {Number} d The coefficient of the 1st order monomial.\n * @param {Number} e The coefficient of the 0th order monomial.\n * @returns {Number[]} The real valued roots.\n */\nQuarticRealPolynomial.computeRealRoots = function (a, b, c, d, e) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n  if (typeof d !== \"number\") {\n    throw new DeveloperError(\"d is a required number.\");\n  }\n  if (typeof e !== \"number\") {\n    throw new DeveloperError(\"e is a required number.\");\n  }\n  //>>includeEnd('debug');\n\n  if (Math.abs(a) < CesiumMath.EPSILON15) {\n    return CubicRealPolynomial.computeRealRoots(b, c, d, e);\n  }\n  var a3 = b / a;\n  var a2 = c / a;\n  var a1 = d / a;\n  var a0 = e / a;\n\n  var k = a3 < 0.0 ? 1 : 0;\n  k += a2 < 0.0 ? k + 1 : k;\n  k += a1 < 0.0 ? k + 1 : k;\n  k += a0 < 0.0 ? k + 1 : k;\n\n  switch (k) {\n    case 0:\n      return original(a3, a2, a1, a0);\n    case 1:\n      return neumark(a3, a2, a1, a0);\n    case 2:\n      return neumark(a3, a2, a1, a0);\n    case 3:\n      return original(a3, a2, a1, a0);\n    case 4:\n      return original(a3, a2, a1, a0);\n    case 5:\n      return neumark(a3, a2, a1, a0);\n    case 6:\n      return original(a3, a2, a1, a0);\n    case 7:\n      return original(a3, a2, a1, a0);\n    case 8:\n      return neumark(a3, a2, a1, a0);\n    case 9:\n      return original(a3, a2, a1, a0);\n    case 10:\n      return original(a3, a2, a1, a0);\n    case 11:\n      return neumark(a3, a2, a1, a0);\n    case 12:\n      return original(a3, a2, a1, a0);\n    case 13:\n      return original(a3, a2, a1, a0);\n    case 14:\n      return original(a3, a2, a1, a0);\n    case 15:\n      return original(a3, a2, a1, a0);\n    default:\n      return undefined;\n  }\n};\nexport default QuarticRealPolynomial;\n"]},"metadata":{},"sourceType":"module"}