{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n/**\n * Describes graphics for a {@link Rectangle}.\n * The rectangle conforms to the curvature of the globe and can be placed on the surface or\n * at altitude and can optionally be extruded into a volume.\n *\n * @alias RectangleGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the rectangle.\n * @param {Property} [options.coordinates] The Property specifying the {@link Rectangle}.\n * @param {Property} [options.height=0] A numeric Property specifying the altitude of the rectangle relative to the ellipsoid surface.\n * @param {Property} [options.heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @param {Property} [options.extrudedHeight] A numeric Property specifying the altitude of the rectangle's extruded face relative to the ellipsoid surface.\n * @param {Property} [options.extrudedHeightReference=HeightReference.NONE] A Property specifying what the extrudedHeight is relative to.\n * @param {Property} [options.rotation=0.0] A numeric property specifying the rotation of the rectangle clockwise from north.\n * @param {Property} [options.stRotation=0.0] A numeric property specifying the rotation of the rectangle texture counter-clockwise from north.\n * @param {Property} [options.granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the angular distance between points on the rectangle.\n * @param {Property} [options.fill=true] A boolean Property specifying whether the rectangle is filled with the provided material.\n * @param {MaterialProperty} [options.material=Color.WHITE] A Property specifying the material used to fill the rectangle.\n * @param {Property} [options.outline=false] A boolean Property specifying whether the rectangle is outlined.\n * @param {Property} [options.outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @param {Property} [options.outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @param {Property} [options.shadows=ShadowMode.DISABLED] An enum Property specifying whether the rectangle casts or receives shadows from light sources.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this rectangle will be displayed.\n * @param {Property} [options.classificationType=ClassificationType.BOTH] An enum Property specifying whether this rectangle will classify terrain, 3D Tiles, or both when on the ground.\n * @param {Property} [options.zIndex=0] A Property specifying the zIndex used for ordering ground geometry.  Only has an effect if the rectangle is constant and neither height or extrudedHeight are specified.\n *\n * @see Entity\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Rectangle.html|Cesium Sandcastle Rectangle Demo}\n */\n\nfunction RectangleGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._coordinates = undefined;\n  this._coordinatesSubscription = undefined;\n  this._height = undefined;\n  this._heightSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._extrudedHeight = undefined;\n  this._extrudedHeightSubscription = undefined;\n  this._extrudedHeightReference = undefined;\n  this._extrudedHeightReferenceSubscription = undefined;\n  this._rotation = undefined;\n  this._rotationSubscription = undefined;\n  this._stRotation = undefined;\n  this._stRotationSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distancedisplayConditionSubscription = undefined;\n  this._classificationType = undefined;\n  this._classificationTypeSubscription = undefined;\n  this._zIndex = undefined;\n  this._zIndexSubscription = undefined;\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(RectangleGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof RectangleGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the rectangle.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Rectangle}.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   */\n  coordinates: createPropertyDescriptor(\"coordinates\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the rectangle.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default 0.0\n   */\n  height: createPropertyDescriptor(\"height\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the rectangle extrusion.\n   * Setting this property creates volume starting at height and ending at this altitude.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   */\n  extrudedHeight: createPropertyDescriptor(\"extrudedHeight\"),\n\n  /**\n   * Gets or sets the Property specifying the extruded {@link HeightReference}.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default HeightReference.NONE\n   */\n  extrudedHeightReference: createPropertyDescriptor(\"extrudedHeightReference\"),\n\n  /**\n   * Gets or sets the numeric property specifying the rotation of the rectangle clockwise from north.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default 0\n   */\n  rotation: createPropertyDescriptor(\"rotation\"),\n\n  /**\n   * Gets or sets the numeric property specifying the rotation of the rectangle texture counter-clockwise from north.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default 0\n   */\n  stRotation: createPropertyDescriptor(\"stRotation\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the angular distance between points on the rectangle.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default {CesiumMath.RADIANS_PER_DEGREE}\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the rectangle is filled with the provided material.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the rectangle.\n   * @memberof RectangleGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the rectangle is outlined.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the rectangle\n   * casts or receives shadows from light sources.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this rectangle will be displayed.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\"distanceDisplayCondition\"),\n\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying whether this rectangle will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default ClassificationType.BOTH\n   */\n  classificationType: createPropertyDescriptor(\"classificationType\"),\n\n  /**\n   * Gets or sets the zIndex Property specifying the ordering of the rectangle.  Only has an effect if the rectangle is constant and neither height or extrudedHeight are specified.\n   * @memberof RectangleGraphics.prototype\n   * @type {ConstantProperty}\n   * @default 0\n   */\n  zIndex: createPropertyDescriptor(\"zIndex\")\n});\n/**\n * Duplicates this instance.\n *\n * @param {RectangleGraphics} [result] The object onto which to store the result.\n * @returns {RectangleGraphics} The modified result parameter or a new instance if one was not provided.\n */\n\nRectangleGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new RectangleGraphics(this);\n  }\n\n  result.show = this.show;\n  result.coordinates = this.coordinates;\n  result.height = this.height;\n  result.heightReference = this.heightReference;\n  result.extrudedHeight = this.extrudedHeight;\n  result.extrudedHeightReference = this.extrudedHeightReference;\n  result.rotation = this.rotation;\n  result.stRotation = this.stRotation;\n  result.granularity = this.granularity;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.classificationType = this.classificationType;\n  result.zIndex = this.zIndex;\n  return result;\n};\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {RectangleGraphics} source The object to be merged into this object.\n */\n\n\nRectangleGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  } //>>includeEnd('debug');\n\n\n  this.show = defaultValue(this.show, source.show);\n  this.coordinates = defaultValue(this.coordinates, source.coordinates);\n  this.height = defaultValue(this.height, source.height);\n  this.heightReference = defaultValue(this.heightReference, source.heightReference);\n  this.extrudedHeight = defaultValue(this.extrudedHeight, source.extrudedHeight);\n  this.extrudedHeightReference = defaultValue(this.extrudedHeightReference, source.extrudedHeightReference);\n  this.rotation = defaultValue(this.rotation, source.rotation);\n  this.stRotation = defaultValue(this.stRotation, source.stRotation);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(this.distanceDisplayCondition, source.distanceDisplayCondition);\n  this.classificationType = defaultValue(this.classificationType, source.classificationType);\n  this.zIndex = defaultValue(this.zIndex, source.zIndex);\n};\n\nexport default RectangleGraphics;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/RectangleGraphics.js"],"names":["defaultValue","defined","DeveloperError","Event","createMaterialPropertyDescriptor","createPropertyDescriptor","RectangleGraphics","options","_definitionChanged","_show","undefined","_showSubscription","_coordinates","_coordinatesSubscription","_height","_heightSubscription","_heightReference","_heightReferenceSubscription","_extrudedHeight","_extrudedHeightSubscription","_extrudedHeightReference","_extrudedHeightReferenceSubscription","_rotation","_rotationSubscription","_stRotation","_stRotationSubscription","_granularity","_granularitySubscription","_fill","_fillSubscription","_material","_materialSubscription","_outline","_outlineSubscription","_outlineColor","_outlineColorSubscription","_outlineWidth","_outlineWidthSubscription","_shadows","_shadowsSubscription","_distanceDisplayCondition","_distancedisplayConditionSubscription","_classificationType","_classificationTypeSubscription","_zIndex","_zIndexSubscription","merge","EMPTY_OBJECT","Object","defineProperties","prototype","definitionChanged","get","show","coordinates","height","heightReference","extrudedHeight","extrudedHeightReference","rotation","stRotation","granularity","fill","material","outline","outlineColor","outlineWidth","shadows","distanceDisplayCondition","classificationType","zIndex","clone","result","source"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * Describes graphics for a {@link Rectangle}.\n * The rectangle conforms to the curvature of the globe and can be placed on the surface or\n * at altitude and can optionally be extruded into a volume.\n *\n * @alias RectangleGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the rectangle.\n * @param {Property} [options.coordinates] The Property specifying the {@link Rectangle}.\n * @param {Property} [options.height=0] A numeric Property specifying the altitude of the rectangle relative to the ellipsoid surface.\n * @param {Property} [options.heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @param {Property} [options.extrudedHeight] A numeric Property specifying the altitude of the rectangle's extruded face relative to the ellipsoid surface.\n * @param {Property} [options.extrudedHeightReference=HeightReference.NONE] A Property specifying what the extrudedHeight is relative to.\n * @param {Property} [options.rotation=0.0] A numeric property specifying the rotation of the rectangle clockwise from north.\n * @param {Property} [options.stRotation=0.0] A numeric property specifying the rotation of the rectangle texture counter-clockwise from north.\n * @param {Property} [options.granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the angular distance between points on the rectangle.\n * @param {Property} [options.fill=true] A boolean Property specifying whether the rectangle is filled with the provided material.\n * @param {MaterialProperty} [options.material=Color.WHITE] A Property specifying the material used to fill the rectangle.\n * @param {Property} [options.outline=false] A boolean Property specifying whether the rectangle is outlined.\n * @param {Property} [options.outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @param {Property} [options.outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @param {Property} [options.shadows=ShadowMode.DISABLED] An enum Property specifying whether the rectangle casts or receives shadows from light sources.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this rectangle will be displayed.\n * @param {Property} [options.classificationType=ClassificationType.BOTH] An enum Property specifying whether this rectangle will classify terrain, 3D Tiles, or both when on the ground.\n * @param {Property} [options.zIndex=0] A Property specifying the zIndex used for ordering ground geometry.  Only has an effect if the rectangle is constant and neither height or extrudedHeight are specified.\n *\n * @see Entity\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Rectangle.html|Cesium Sandcastle Rectangle Demo}\n */\nfunction RectangleGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._coordinates = undefined;\n  this._coordinatesSubscription = undefined;\n  this._height = undefined;\n  this._heightSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._extrudedHeight = undefined;\n  this._extrudedHeightSubscription = undefined;\n  this._extrudedHeightReference = undefined;\n  this._extrudedHeightReferenceSubscription = undefined;\n  this._rotation = undefined;\n  this._rotationSubscription = undefined;\n  this._stRotation = undefined;\n  this._stRotationSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distancedisplayConditionSubscription = undefined;\n  this._classificationType = undefined;\n  this._classificationTypeSubscription = undefined;\n  this._zIndex = undefined;\n  this._zIndexSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(RectangleGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof RectangleGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the rectangle.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Rectangle}.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   */\n  coordinates: createPropertyDescriptor(\"coordinates\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the rectangle.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default 0.0\n   */\n  height: createPropertyDescriptor(\"height\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the rectangle extrusion.\n   * Setting this property creates volume starting at height and ending at this altitude.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   */\n  extrudedHeight: createPropertyDescriptor(\"extrudedHeight\"),\n\n  /**\n   * Gets or sets the Property specifying the extruded {@link HeightReference}.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default HeightReference.NONE\n   */\n  extrudedHeightReference: createPropertyDescriptor(\"extrudedHeightReference\"),\n\n  /**\n   * Gets or sets the numeric property specifying the rotation of the rectangle clockwise from north.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default 0\n   */\n  rotation: createPropertyDescriptor(\"rotation\"),\n\n  /**\n   * Gets or sets the numeric property specifying the rotation of the rectangle texture counter-clockwise from north.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default 0\n   */\n  stRotation: createPropertyDescriptor(\"stRotation\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the angular distance between points on the rectangle.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default {CesiumMath.RADIANS_PER_DEGREE}\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the rectangle is filled with the provided material.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the rectangle.\n   * @memberof RectangleGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the rectangle is outlined.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the rectangle\n   * casts or receives shadows from light sources.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this rectangle will be displayed.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying whether this rectangle will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property}\n   * @default ClassificationType.BOTH\n   */\n  classificationType: createPropertyDescriptor(\"classificationType\"),\n\n  /**\n   * Gets or sets the zIndex Property specifying the ordering of the rectangle.  Only has an effect if the rectangle is constant and neither height or extrudedHeight are specified.\n   * @memberof RectangleGraphics.prototype\n   * @type {ConstantProperty}\n   * @default 0\n   */\n  zIndex: createPropertyDescriptor(\"zIndex\"),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {RectangleGraphics} [result] The object onto which to store the result.\n * @returns {RectangleGraphics} The modified result parameter or a new instance if one was not provided.\n */\nRectangleGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new RectangleGraphics(this);\n  }\n  result.show = this.show;\n  result.coordinates = this.coordinates;\n  result.height = this.height;\n  result.heightReference = this.heightReference;\n  result.extrudedHeight = this.extrudedHeight;\n  result.extrudedHeightReference = this.extrudedHeightReference;\n  result.rotation = this.rotation;\n  result.stRotation = this.stRotation;\n  result.granularity = this.granularity;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.classificationType = this.classificationType;\n  result.zIndex = this.zIndex;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {RectangleGraphics} source The object to be merged into this object.\n */\nRectangleGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.coordinates = defaultValue(this.coordinates, source.coordinates);\n  this.height = defaultValue(this.height, source.height);\n  this.heightReference = defaultValue(\n    this.heightReference,\n    source.heightReference\n  );\n  this.extrudedHeight = defaultValue(\n    this.extrudedHeight,\n    source.extrudedHeight\n  );\n  this.extrudedHeightReference = defaultValue(\n    this.extrudedHeightReference,\n    source.extrudedHeightReference\n  );\n  this.rotation = defaultValue(this.rotation, source.rotation);\n  this.stRotation = defaultValue(this.stRotation, source.stRotation);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n  this.classificationType = defaultValue(\n    this.classificationType,\n    source.classificationType\n  );\n  this.zIndex = defaultValue(this.zIndex, source.zIndex);\n};\nexport default RectangleGraphics;\n"]},"metadata":{},"sourceType":"module"}