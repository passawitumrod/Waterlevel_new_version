{"ast":null,"code":"import when from \"../ThirdParty/when.js\";\nimport CompressedTextureBuffer from \"./CompressedTextureBuffer.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Resource from \"./Resource.js\";\nimport TaskProcessor from \"./TaskProcessor.js\";\nvar transcodeTaskProcessor = new TaskProcessor(\"transcodeCRNToDXT\", Number.POSITIVE_INFINITY);\n/**\n * Asynchronously loads and parses the given URL to a CRN file or parses the raw binary data of a CRN file.\n * Returns a promise that will resolve to an object containing the image buffer, width, height and format once loaded,\n * or reject if the URL failed to load or failed to parse the data.  The data is loaded\n * using XMLHttpRequest, which means that in order to make requests to another origin,\n * the server must have Cross-Origin Resource Sharing (CORS) headers enabled.\n *\n * @exports loadCRN\n *\n * @param {Resource|String|ArrayBuffer} resourceOrUrlOrBuffer The URL of the binary data or an ArrayBuffer.\n * @returns {Promise.<CompressedTextureBuffer>|undefined} A promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\n *\n * @exception {RuntimeError} Unsupported compressed format.\n *\n * @example\n * // load a single URL asynchronously\n * Cesium.loadCRN('some/url').then(function(textureData) {\n *     var width = textureData.width;\n *     var height = textureData.height;\n *     var format = textureData.internalFormat;\n *     var arrayBufferView = textureData.bufferView;\n *     // use the data to create a texture\n * }).otherwise(function(error) {\n *     // an error occurred\n * });\n *\n * @see {@link https://github.com/BinomialLLC/crunch|crunch DXTc texture compression and transcoding library}\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\n */\n\nfunction loadCRN(resourceOrUrlOrBuffer) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(resourceOrUrlOrBuffer)) {\n    throw new DeveloperError(\"resourceOrUrlOrBuffer is required.\");\n  } //>>includeEnd('debug');\n\n\n  var loadPromise;\n\n  if (resourceOrUrlOrBuffer instanceof ArrayBuffer || ArrayBuffer.isView(resourceOrUrlOrBuffer)) {\n    loadPromise = when.resolve(resourceOrUrlOrBuffer);\n  } else {\n    var resource = Resource.createIfNeeded(resourceOrUrlOrBuffer);\n    loadPromise = resource.fetchArrayBuffer();\n  }\n\n  if (!defined(loadPromise)) {\n    return undefined;\n  }\n\n  return loadPromise.then(function (data) {\n    if (!defined(data)) {\n      return;\n    }\n\n    var transferrableObjects = [];\n\n    if (data instanceof ArrayBuffer) {\n      transferrableObjects.push(data);\n    } else if (data.byteOffset === 0 && data.byteLength === data.buffer.byteLength) {\n      transferrableObjects.push(data.buffer);\n    } else {\n      // data is a view of an array buffer. need to copy so it is transferrable to web worker\n      data = data.slice(0, data.length);\n      transferrableObjects.push(data.buffer);\n    }\n\n    return transcodeTaskProcessor.scheduleTask(data, transferrableObjects);\n  }).then(function (compressedTextureBuffer) {\n    return CompressedTextureBuffer.clone(compressedTextureBuffer);\n  });\n}\n\nexport default loadCRN;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/loadCRN.js"],"names":["when","CompressedTextureBuffer","defined","DeveloperError","Resource","TaskProcessor","transcodeTaskProcessor","Number","POSITIVE_INFINITY","loadCRN","resourceOrUrlOrBuffer","loadPromise","ArrayBuffer","isView","resolve","resource","createIfNeeded","fetchArrayBuffer","undefined","then","data","transferrableObjects","push","byteOffset","byteLength","buffer","slice","length","scheduleTask","compressedTextureBuffer","clone"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,uBAAjB;AACA,OAAOC,uBAAP,MAAoC,8BAApC;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AAEA,IAAIC,sBAAsB,GAAG,IAAID,aAAJ,CAC3B,mBAD2B,EAE3BE,MAAM,CAACC,iBAFoB,CAA7B;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,SAASC,OAAT,CAAiBC,qBAAjB,EAAwC;AACtC;AACA,MAAI,CAACR,OAAO,CAACQ,qBAAD,CAAZ,EAAqC;AACnC,UAAM,IAAIP,cAAJ,CAAmB,oCAAnB,CAAN;AACD,GAJqC,CAKtC;;;AAEA,MAAIQ,WAAJ;;AACA,MACED,qBAAqB,YAAYE,WAAjC,IACAA,WAAW,CAACC,MAAZ,CAAmBH,qBAAnB,CAFF,EAGE;AACAC,IAAAA,WAAW,GAAGX,IAAI,CAACc,OAAL,CAAaJ,qBAAb,CAAd;AACD,GALD,MAKO;AACL,QAAIK,QAAQ,GAAGX,QAAQ,CAACY,cAAT,CAAwBN,qBAAxB,CAAf;AACAC,IAAAA,WAAW,GAAGI,QAAQ,CAACE,gBAAT,EAAd;AACD;;AAED,MAAI,CAACf,OAAO,CAACS,WAAD,CAAZ,EAA2B;AACzB,WAAOO,SAAP;AACD;;AAED,SAAOP,WAAW,CACfQ,IADI,CACC,UAAUC,IAAV,EAAgB;AACpB,QAAI,CAAClB,OAAO,CAACkB,IAAD,CAAZ,EAAoB;AAClB;AACD;;AACD,QAAIC,oBAAoB,GAAG,EAA3B;;AACA,QAAID,IAAI,YAAYR,WAApB,EAAiC;AAC/BS,MAAAA,oBAAoB,CAACC,IAArB,CAA0BF,IAA1B;AACD,KAFD,MAEO,IACLA,IAAI,CAACG,UAAL,KAAoB,CAApB,IACAH,IAAI,CAACI,UAAL,KAAoBJ,IAAI,CAACK,MAAL,CAAYD,UAF3B,EAGL;AACAH,MAAAA,oBAAoB,CAACC,IAArB,CAA0BF,IAAI,CAACK,MAA/B;AACD,KALM,MAKA;AACL;AACAL,MAAAA,IAAI,GAAGA,IAAI,CAACM,KAAL,CAAW,CAAX,EAAcN,IAAI,CAACO,MAAnB,CAAP;AACAN,MAAAA,oBAAoB,CAACC,IAArB,CAA0BF,IAAI,CAACK,MAA/B;AACD;;AAED,WAAOnB,sBAAsB,CAACsB,YAAvB,CAAoCR,IAApC,EAA0CC,oBAA1C,CAAP;AACD,GApBI,EAqBJF,IArBI,CAqBC,UAAUU,uBAAV,EAAmC;AACvC,WAAO5B,uBAAuB,CAAC6B,KAAxB,CAA8BD,uBAA9B,CAAP;AACD,GAvBI,CAAP;AAwBD;;AACD,eAAepB,OAAf","sourcesContent":["import when from \"../ThirdParty/when.js\";\nimport CompressedTextureBuffer from \"./CompressedTextureBuffer.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Resource from \"./Resource.js\";\nimport TaskProcessor from \"./TaskProcessor.js\";\n\nvar transcodeTaskProcessor = new TaskProcessor(\n  \"transcodeCRNToDXT\",\n  Number.POSITIVE_INFINITY\n);\n\n/**\n * Asynchronously loads and parses the given URL to a CRN file or parses the raw binary data of a CRN file.\n * Returns a promise that will resolve to an object containing the image buffer, width, height and format once loaded,\n * or reject if the URL failed to load or failed to parse the data.  The data is loaded\n * using XMLHttpRequest, which means that in order to make requests to another origin,\n * the server must have Cross-Origin Resource Sharing (CORS) headers enabled.\n *\n * @exports loadCRN\n *\n * @param {Resource|String|ArrayBuffer} resourceOrUrlOrBuffer The URL of the binary data or an ArrayBuffer.\n * @returns {Promise.<CompressedTextureBuffer>|undefined} A promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\n *\n * @exception {RuntimeError} Unsupported compressed format.\n *\n * @example\n * // load a single URL asynchronously\n * Cesium.loadCRN('some/url').then(function(textureData) {\n *     var width = textureData.width;\n *     var height = textureData.height;\n *     var format = textureData.internalFormat;\n *     var arrayBufferView = textureData.bufferView;\n *     // use the data to create a texture\n * }).otherwise(function(error) {\n *     // an error occurred\n * });\n *\n * @see {@link https://github.com/BinomialLLC/crunch|crunch DXTc texture compression and transcoding library}\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\n */\nfunction loadCRN(resourceOrUrlOrBuffer) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(resourceOrUrlOrBuffer)) {\n    throw new DeveloperError(\"resourceOrUrlOrBuffer is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var loadPromise;\n  if (\n    resourceOrUrlOrBuffer instanceof ArrayBuffer ||\n    ArrayBuffer.isView(resourceOrUrlOrBuffer)\n  ) {\n    loadPromise = when.resolve(resourceOrUrlOrBuffer);\n  } else {\n    var resource = Resource.createIfNeeded(resourceOrUrlOrBuffer);\n    loadPromise = resource.fetchArrayBuffer();\n  }\n\n  if (!defined(loadPromise)) {\n    return undefined;\n  }\n\n  return loadPromise\n    .then(function (data) {\n      if (!defined(data)) {\n        return;\n      }\n      var transferrableObjects = [];\n      if (data instanceof ArrayBuffer) {\n        transferrableObjects.push(data);\n      } else if (\n        data.byteOffset === 0 &&\n        data.byteLength === data.buffer.byteLength\n      ) {\n        transferrableObjects.push(data.buffer);\n      } else {\n        // data is a view of an array buffer. need to copy so it is transferrable to web worker\n        data = data.slice(0, data.length);\n        transferrableObjects.push(data.buffer);\n      }\n\n      return transcodeTaskProcessor.scheduleTask(data, transferrableObjects);\n    })\n    .then(function (compressedTextureBuffer) {\n      return CompressedTextureBuffer.clone(compressedTextureBuffer);\n    });\n}\nexport default loadCRN;\n"]},"metadata":{},"sourceType":"module"}