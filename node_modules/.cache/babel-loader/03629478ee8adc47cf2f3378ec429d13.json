{"ast":null,"code":"import DeveloperError from \"../Core/DeveloperError.js\";\n/**\n * An expression for a style applied to a {@link Cesium3DTileset}.\n * <p>\n * Derived classes of this interface evaluate expressions in the\n * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/Styling|3D Tiles Styling language}.\n * </p>\n * <p>\n * This type describes an interface and is not intended to be instantiated directly.\n * </p>\n *\n * @alias StyleExpression\n * @constructor\n *\n * @see Expression\n * @see ConditionsExpression\n */\n\nfunction StyleExpression() {}\n/**\n * Evaluates the result of an expression, optionally using the provided feature's properties. If the result of\n * the expression in the\n * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/Styling|3D Tiles Styling language}\n * is of type <code>Boolean</code>, <code>Number</code>, or <code>String</code>, the corresponding JavaScript\n * primitive type will be returned. If the result is a <code>RegExp</code>, a Javascript <code>RegExp</code>\n * object will be returned. If the result is a <code>Cartesian2</code>, <code>Cartesian3</code>, or <code>Cartesian4</code>,\n * a {@link Cartesian2}, {@link Cartesian3}, or {@link Cartesian4} object will be returned. If the <code>result</code> argument is\n * a {@link Color}, the {@link Cartesian4} value is converted to a {@link Color} and then returned.\n *\n * @param {Cesium3DTileFeature} feature The feature whose properties may be used as variables in the expression.\n * @param {Object} [result] The object onto which to store the result.\n * @returns {Boolean|Number|String|RegExp|Cartesian2|Cartesian3|Cartesian4|Color} The result of evaluating the expression.\n */\n\n\nStyleExpression.prototype.evaluate = function (feature, result) {\n  DeveloperError.throwInstantiationError();\n};\n/**\n * Evaluates the result of a Color expression, optionally using the provided feature's properties.\n * <p>\n * This is equivalent to {@link StyleExpression#evaluate} but always returns a {@link Color} object.\n * </p>\n *\n * @param {Cesium3DTileFeature} feature The feature whose properties may be used as variables in the expression.\n * @param {Color} [result] The object in which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\n\n\nStyleExpression.prototype.evaluateColor = function (feature, result) {\n  DeveloperError.throwInstantiationError();\n};\n/**\n * Gets the shader function for this expression.\n * Returns undefined if the shader function can't be generated from this expression.\n *\n * @param {String} functionName Name to give to the generated function.\n * @param {String} attributePrefix Prefix that is added to any variable names to access vertex attributes.\n * @param {Object} shaderState Stores information about the generated shader function, including whether it is translucent.\n * @param {String} returnType The return type of the generated function.\n *\n * @returns {String} The shader function.\n *\n * @private\n */\n\n\nStyleExpression.prototype.getShaderFunction = function (functionName, attributePrefix, shaderState, returnType) {\n  DeveloperError.throwInstantiationError();\n};\n\nexport default StyleExpression;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/StyleExpression.js"],"names":["DeveloperError","StyleExpression","prototype","evaluate","feature","result","throwInstantiationError","evaluateColor","getShaderFunction","functionName","attributePrefix","shaderState","returnType"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,2BAA3B;AAEA;;;;;;;;;;;;;;;;;AAgBA,SAASC,eAAT,GAA2B,CAAE;AAE7B;;;;;;;;;;;;;;;;AAcAA,eAAe,CAACC,SAAhB,CAA0BC,QAA1B,GAAqC,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC9DL,EAAAA,cAAc,CAACM,uBAAf;AACD,CAFD;AAIA;;;;;;;;;;;;AAUAL,eAAe,CAACC,SAAhB,CAA0BK,aAA1B,GAA0C,UAAUH,OAAV,EAAmBC,MAAnB,EAA2B;AACnEL,EAAAA,cAAc,CAACM,uBAAf;AACD,CAFD;AAIA;;;;;;;;;;;;;;;AAaAL,eAAe,CAACC,SAAhB,CAA0BM,iBAA1B,GAA8C,UAC5CC,YAD4C,EAE5CC,eAF4C,EAG5CC,WAH4C,EAI5CC,UAJ4C,EAK5C;AACAZ,EAAAA,cAAc,CAACM,uBAAf;AACD,CAPD;;AAQA,eAAeL,eAAf","sourcesContent":["import DeveloperError from \"../Core/DeveloperError.js\";\n\n/**\n * An expression for a style applied to a {@link Cesium3DTileset}.\n * <p>\n * Derived classes of this interface evaluate expressions in the\n * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/Styling|3D Tiles Styling language}.\n * </p>\n * <p>\n * This type describes an interface and is not intended to be instantiated directly.\n * </p>\n *\n * @alias StyleExpression\n * @constructor\n *\n * @see Expression\n * @see ConditionsExpression\n */\nfunction StyleExpression() {}\n\n/**\n * Evaluates the result of an expression, optionally using the provided feature's properties. If the result of\n * the expression in the\n * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/Styling|3D Tiles Styling language}\n * is of type <code>Boolean</code>, <code>Number</code>, or <code>String</code>, the corresponding JavaScript\n * primitive type will be returned. If the result is a <code>RegExp</code>, a Javascript <code>RegExp</code>\n * object will be returned. If the result is a <code>Cartesian2</code>, <code>Cartesian3</code>, or <code>Cartesian4</code>,\n * a {@link Cartesian2}, {@link Cartesian3}, or {@link Cartesian4} object will be returned. If the <code>result</code> argument is\n * a {@link Color}, the {@link Cartesian4} value is converted to a {@link Color} and then returned.\n *\n * @param {Cesium3DTileFeature} feature The feature whose properties may be used as variables in the expression.\n * @param {Object} [result] The object onto which to store the result.\n * @returns {Boolean|Number|String|RegExp|Cartesian2|Cartesian3|Cartesian4|Color} The result of evaluating the expression.\n */\nStyleExpression.prototype.evaluate = function (feature, result) {\n  DeveloperError.throwInstantiationError();\n};\n\n/**\n * Evaluates the result of a Color expression, optionally using the provided feature's properties.\n * <p>\n * This is equivalent to {@link StyleExpression#evaluate} but always returns a {@link Color} object.\n * </p>\n *\n * @param {Cesium3DTileFeature} feature The feature whose properties may be used as variables in the expression.\n * @param {Color} [result] The object in which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\nStyleExpression.prototype.evaluateColor = function (feature, result) {\n  DeveloperError.throwInstantiationError();\n};\n\n/**\n * Gets the shader function for this expression.\n * Returns undefined if the shader function can't be generated from this expression.\n *\n * @param {String} functionName Name to give to the generated function.\n * @param {String} attributePrefix Prefix that is added to any variable names to access vertex attributes.\n * @param {Object} shaderState Stores information about the generated shader function, including whether it is translucent.\n * @param {String} returnType The return type of the generated function.\n *\n * @returns {String} The shader function.\n *\n * @private\n */\nStyleExpression.prototype.getShaderFunction = function (\n  functionName,\n  attributePrefix,\n  shaderState,\n  returnType\n) {\n  DeveloperError.throwInstantiationError();\n};\nexport default StyleExpression;\n"]},"metadata":{},"sourceType":"module"}