{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport formatError from \"../Core/formatError.js\";\nimport when from \"../ThirdParty/when.js\"; // createXXXGeometry functions may return Geometry or a Promise that resolves to Geometry\n// if the function requires access to ApproximateTerrainHeights.\n// For fully synchronous functions, just wrapping the function call in a `when` Promise doesn't\n// handle errors correctly, hence try-catch\n\nfunction callAndWrap(workerFunction, parameters, transferableObjects) {\n  var resultOrPromise;\n\n  try {\n    resultOrPromise = workerFunction(parameters, transferableObjects);\n    return resultOrPromise; // errors handled by Promise\n  } catch (e) {\n    return when.reject(e);\n  }\n}\n/**\n * Creates an adapter function to allow a calculation function to operate as a Web Worker,\n * paired with TaskProcessor, to receive tasks and return results.\n *\n * @exports createTaskProcessorWorker\n *\n * @param {createTaskProcessorWorker~WorkerFunction} workerFunction The calculation function,\n *        which takes parameters and returns a result.\n * @returns {createTaskProcessorWorker~TaskProcessorWorkerFunction} A function that adapts the\n *          calculation function to work as a Web Worker onmessage listener with TaskProcessor.\n *\n *\n * @example\n * function doCalculation(parameters, transferableObjects) {\n *   // calculate some result using the inputs in parameters\n *   return result;\n * }\n *\n * return Cesium.createTaskProcessorWorker(doCalculation);\n * // the resulting function is compatible with TaskProcessor\n *\n * @see TaskProcessor\n * @see {@link http://www.w3.org/TR/workers/|Web Workers}\n * @see {@link http://www.w3.org/TR/html5/common-dom-interfaces.html#transferable-objects|Transferable objects}\n */\n\n\nfunction createTaskProcessorWorker(workerFunction) {\n  var postMessage;\n  return function (event) {\n    var data = event.data;\n    var transferableObjects = [];\n    var responseMessage = {\n      id: data.id,\n      result: undefined,\n      error: undefined\n    };\n    return when(callAndWrap(workerFunction, data.parameters, transferableObjects)).then(function (result) {\n      responseMessage.result = result;\n    }).otherwise(function (e) {\n      if (e instanceof Error) {\n        // Errors can't be posted in a message, copy the properties\n        responseMessage.error = {\n          name: e.name,\n          message: e.message,\n          stack: e.stack\n        };\n      } else {\n        responseMessage.error = e;\n      }\n    }).always(function () {\n      if (!defined(postMessage)) {\n        postMessage = defaultValue(self.webkitPostMessage, self.postMessage);\n      }\n\n      if (!data.canTransferArrayBuffer) {\n        transferableObjects.length = 0;\n      }\n\n      try {\n        postMessage(responseMessage, transferableObjects);\n      } catch (e) {\n        // something went wrong trying to post the message, post a simpler\n        // error that we can be sure will be cloneable\n        responseMessage.result = undefined;\n        responseMessage.error = \"postMessage failed with error: \" + formatError(e) + \"\\n  with responseMessage: \" + JSON.stringify(responseMessage);\n        postMessage(responseMessage);\n      }\n    });\n  };\n}\n/**\n * A function that performs a calculation in a Web Worker.\n * @callback createTaskProcessorWorker~WorkerFunction\n *\n * @param {Object} parameters Parameters to the calculation.\n * @param {Array} transferableObjects An array that should be filled with references to objects inside\n *        the result that should be transferred back to the main document instead of copied.\n * @returns {Object} The result of the calculation.\n *\n * @example\n * function calculate(parameters, transferableObjects) {\n *   // perform whatever calculation is necessary.\n *   var typedArray = new Float32Array(0);\n *\n *   // typed arrays are transferable\n *   transferableObjects.push(typedArray)\n *\n *   return {\n *      typedArray : typedArray\n *   };\n * }\n */\n\n/**\n * A Web Worker message event handler function that handles the interaction with TaskProcessor,\n * specifically, task ID management and posting a response message containing the result.\n * @callback createTaskProcessorWorker~TaskProcessorWorkerFunction\n *\n * @param {Object} event The onmessage event object.\n */\n\n\nexport default createTaskProcessorWorker;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/WorkersES6/createTaskProcessorWorker.js"],"names":["defaultValue","defined","formatError","when","callAndWrap","workerFunction","parameters","transferableObjects","resultOrPromise","e","reject","createTaskProcessorWorker","postMessage","event","data","responseMessage","id","result","undefined","error","then","otherwise","Error","name","message","stack","always","self","webkitPostMessage","canTransferArrayBuffer","length","JSON","stringify"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,yBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,IAAP,MAAiB,uBAAjB,C,CAEA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBC,cAArB,EAAqCC,UAArC,EAAiDC,mBAAjD,EAAsE;AACpE,MAAIC,eAAJ;;AACA,MAAI;AACFA,IAAAA,eAAe,GAAGH,cAAc,CAACC,UAAD,EAAaC,mBAAb,CAAhC;AACA,WAAOC,eAAP,CAFE,CAEsB;AACzB,GAHD,CAGE,OAAOC,CAAP,EAAU;AACV,WAAON,IAAI,CAACO,MAAL,CAAYD,CAAZ,CAAP;AACD;AACF;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAASE,yBAAT,CAAmCN,cAAnC,EAAmD;AACjD,MAAIO,WAAJ;AAEA,SAAO,UAAUC,KAAV,EAAiB;AACtB,QAAIC,IAAI,GAAGD,KAAK,CAACC,IAAjB;AAEA,QAAIP,mBAAmB,GAAG,EAA1B;AACA,QAAIQ,eAAe,GAAG;AACpBC,MAAAA,EAAE,EAAEF,IAAI,CAACE,EADW;AAEpBC,MAAAA,MAAM,EAAEC,SAFY;AAGpBC,MAAAA,KAAK,EAAED;AAHa,KAAtB;AAMA,WAAOf,IAAI,CACTC,WAAW,CAACC,cAAD,EAAiBS,IAAI,CAACR,UAAtB,EAAkCC,mBAAlC,CADF,CAAJ,CAGJa,IAHI,CAGC,UAAUH,MAAV,EAAkB;AACtBF,MAAAA,eAAe,CAACE,MAAhB,GAAyBA,MAAzB;AACD,KALI,EAMJI,SANI,CAMM,UAAUZ,CAAV,EAAa;AACtB,UAAIA,CAAC,YAAYa,KAAjB,EAAwB;AACtB;AACAP,QAAAA,eAAe,CAACI,KAAhB,GAAwB;AACtBI,UAAAA,IAAI,EAAEd,CAAC,CAACc,IADc;AAEtBC,UAAAA,OAAO,EAAEf,CAAC,CAACe,OAFW;AAGtBC,UAAAA,KAAK,EAAEhB,CAAC,CAACgB;AAHa,SAAxB;AAKD,OAPD,MAOO;AACLV,QAAAA,eAAe,CAACI,KAAhB,GAAwBV,CAAxB;AACD;AACF,KAjBI,EAkBJiB,MAlBI,CAkBG,YAAY;AAClB,UAAI,CAACzB,OAAO,CAACW,WAAD,CAAZ,EAA2B;AACzBA,QAAAA,WAAW,GAAGZ,YAAY,CAAC2B,IAAI,CAACC,iBAAN,EAAyBD,IAAI,CAACf,WAA9B,CAA1B;AACD;;AAED,UAAI,CAACE,IAAI,CAACe,sBAAV,EAAkC;AAChCtB,QAAAA,mBAAmB,CAACuB,MAApB,GAA6B,CAA7B;AACD;;AAED,UAAI;AACFlB,QAAAA,WAAW,CAACG,eAAD,EAAkBR,mBAAlB,CAAX;AACD,OAFD,CAEE,OAAOE,CAAP,EAAU;AACV;AACA;AACAM,QAAAA,eAAe,CAACE,MAAhB,GAAyBC,SAAzB;AACAH,QAAAA,eAAe,CAACI,KAAhB,GACE,oCACAjB,WAAW,CAACO,CAAD,CADX,GAEA,4BAFA,GAGAsB,IAAI,CAACC,SAAL,CAAejB,eAAf,CAJF;AAKAH,QAAAA,WAAW,CAACG,eAAD,CAAX;AACD;AACF,KAxCI,CAAP;AAyCD,GAnDD;AAoDD;AAED;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;AAOA,eAAeJ,yBAAf","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport formatError from \"../Core/formatError.js\";\nimport when from \"../ThirdParty/when.js\";\n\n// createXXXGeometry functions may return Geometry or a Promise that resolves to Geometry\n// if the function requires access to ApproximateTerrainHeights.\n// For fully synchronous functions, just wrapping the function call in a `when` Promise doesn't\n// handle errors correctly, hence try-catch\nfunction callAndWrap(workerFunction, parameters, transferableObjects) {\n  var resultOrPromise;\n  try {\n    resultOrPromise = workerFunction(parameters, transferableObjects);\n    return resultOrPromise; // errors handled by Promise\n  } catch (e) {\n    return when.reject(e);\n  }\n}\n\n/**\n * Creates an adapter function to allow a calculation function to operate as a Web Worker,\n * paired with TaskProcessor, to receive tasks and return results.\n *\n * @exports createTaskProcessorWorker\n *\n * @param {createTaskProcessorWorker~WorkerFunction} workerFunction The calculation function,\n *        which takes parameters and returns a result.\n * @returns {createTaskProcessorWorker~TaskProcessorWorkerFunction} A function that adapts the\n *          calculation function to work as a Web Worker onmessage listener with TaskProcessor.\n *\n *\n * @example\n * function doCalculation(parameters, transferableObjects) {\n *   // calculate some result using the inputs in parameters\n *   return result;\n * }\n *\n * return Cesium.createTaskProcessorWorker(doCalculation);\n * // the resulting function is compatible with TaskProcessor\n *\n * @see TaskProcessor\n * @see {@link http://www.w3.org/TR/workers/|Web Workers}\n * @see {@link http://www.w3.org/TR/html5/common-dom-interfaces.html#transferable-objects|Transferable objects}\n */\nfunction createTaskProcessorWorker(workerFunction) {\n  var postMessage;\n\n  return function (event) {\n    var data = event.data;\n\n    var transferableObjects = [];\n    var responseMessage = {\n      id: data.id,\n      result: undefined,\n      error: undefined,\n    };\n\n    return when(\n      callAndWrap(workerFunction, data.parameters, transferableObjects)\n    )\n      .then(function (result) {\n        responseMessage.result = result;\n      })\n      .otherwise(function (e) {\n        if (e instanceof Error) {\n          // Errors can't be posted in a message, copy the properties\n          responseMessage.error = {\n            name: e.name,\n            message: e.message,\n            stack: e.stack,\n          };\n        } else {\n          responseMessage.error = e;\n        }\n      })\n      .always(function () {\n        if (!defined(postMessage)) {\n          postMessage = defaultValue(self.webkitPostMessage, self.postMessage);\n        }\n\n        if (!data.canTransferArrayBuffer) {\n          transferableObjects.length = 0;\n        }\n\n        try {\n          postMessage(responseMessage, transferableObjects);\n        } catch (e) {\n          // something went wrong trying to post the message, post a simpler\n          // error that we can be sure will be cloneable\n          responseMessage.result = undefined;\n          responseMessage.error =\n            \"postMessage failed with error: \" +\n            formatError(e) +\n            \"\\n  with responseMessage: \" +\n            JSON.stringify(responseMessage);\n          postMessage(responseMessage);\n        }\n      });\n  };\n}\n\n/**\n * A function that performs a calculation in a Web Worker.\n * @callback createTaskProcessorWorker~WorkerFunction\n *\n * @param {Object} parameters Parameters to the calculation.\n * @param {Array} transferableObjects An array that should be filled with references to objects inside\n *        the result that should be transferred back to the main document instead of copied.\n * @returns {Object} The result of the calculation.\n *\n * @example\n * function calculate(parameters, transferableObjects) {\n *   // perform whatever calculation is necessary.\n *   var typedArray = new Float32Array(0);\n *\n *   // typed arrays are transferable\n *   transferableObjects.push(typedArray)\n *\n *   return {\n *      typedArray : typedArray\n *   };\n * }\n */\n\n/**\n * A Web Worker message event handler function that handles the interaction with TaskProcessor,\n * specifically, task ID management and posting a response message containing the result.\n * @callback createTaskProcessorWorker~TaskProcessorWorkerFunction\n *\n * @param {Object} event The onmessage event object.\n */\nexport default createTaskProcessorWorker;\n"]},"metadata":{},"sourceType":"module"}