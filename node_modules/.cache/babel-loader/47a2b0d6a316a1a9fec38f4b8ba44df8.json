{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\nvar defaultEvenColor = Color.WHITE;\nvar defaultOddColor = Color.BLACK;\nvar defaultRepeat = new Cartesian2(2.0, 2.0);\n/**\n * A {@link MaterialProperty} that maps to checkerboard {@link Material} uniforms.\n * @alias CheckerboardMaterialProperty\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.evenColor=Color.WHITE] A Property specifying the first {@link Color}.\n * @param {Property} [options.oddColor=Color.BLACK] A Property specifying the second {@link Color}.\n * @param {Property} [options.repeat=new Cartesian2(2.0, 2.0)] A {@link Cartesian2} Property specifying how many times the tiles repeat in each direction.\n */\n\nfunction CheckerboardMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._definitionChanged = new Event();\n  this._evenColor = undefined;\n  this._evenColorSubscription = undefined;\n  this._oddColor = undefined;\n  this._oddColorSubscription = undefined;\n  this._repeat = undefined;\n  this._repeatSubscription = undefined;\n  this.evenColor = options.evenColor;\n  this.oddColor = options.oddColor;\n  this.repeat = options.repeat;\n}\n\nObject.defineProperties(CheckerboardMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof CheckerboardMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._evenColor) && //\n      Property.isConstant(this._oddColor) && //\n      Property.isConstant(this._repeat);\n    }\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof CheckerboardMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the Property specifying the first {@link Color}.\n   * @memberof CheckerboardMaterialProperty.prototype\n   * @type {Property}\n   * @default Color.WHITE\n   */\n  evenColor: createPropertyDescriptor(\"evenColor\"),\n\n  /**\n   * Gets or sets the Property specifying the second {@link Color}.\n   * @memberof CheckerboardMaterialProperty.prototype\n   * @type {Property}\n   * @default Color.BLACK\n   */\n  oddColor: createPropertyDescriptor(\"oddColor\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying how many times the tiles repeat in each direction.\n   * @memberof CheckerboardMaterialProperty.prototype\n   * @type {Property}\n   * @default new Cartesian2(2.0, 2.0)\n   */\n  repeat: createPropertyDescriptor(\"repeat\")\n});\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\n\nCheckerboardMaterialProperty.prototype.getType = function (time) {\n  return \"Checkerboard\";\n};\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\n\nCheckerboardMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n\n  result.lightColor = Property.getValueOrClonedDefault(this._evenColor, time, defaultEvenColor, result.lightColor);\n  result.darkColor = Property.getValueOrClonedDefault(this._oddColor, time, defaultOddColor, result.darkColor);\n  result.repeat = Property.getValueOrDefault(this._repeat, time, defaultRepeat);\n  return result;\n};\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nCheckerboardMaterialProperty.prototype.equals = function (other) {\n  return this === other || //\n  other instanceof CheckerboardMaterialProperty && //\n  Property.equals(this._evenColor, other._evenColor) && //\n  Property.equals(this._oddColor, other._oddColor) && //\n  Property.equals(this._repeat, other._repeat);\n};\n\nexport default CheckerboardMaterialProperty;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/DataSources/CheckerboardMaterialProperty.js"],"names":["Cartesian2","Color","defaultValue","defined","Event","createPropertyDescriptor","Property","defaultEvenColor","WHITE","defaultOddColor","BLACK","defaultRepeat","CheckerboardMaterialProperty","options","EMPTY_OBJECT","_definitionChanged","_evenColor","undefined","_evenColorSubscription","_oddColor","_oddColorSubscription","_repeat","_repeatSubscription","evenColor","oddColor","repeat","Object","defineProperties","prototype","isConstant","get","definitionChanged","getType","time","getValue","result","lightColor","getValueOrClonedDefault","darkColor","getValueOrDefault","equals","other"],"mappings":"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","sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\nvar defaultEvenColor = Color.WHITE;\nvar defaultOddColor = Color.BLACK;\nvar defaultRepeat = new Cartesian2(2.0, 2.0);\n\n/**\n * A {@link MaterialProperty} that maps to checkerboard {@link Material} uniforms.\n * @alias CheckerboardMaterialProperty\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.evenColor=Color.WHITE] A Property specifying the first {@link Color}.\n * @param {Property} [options.oddColor=Color.BLACK] A Property specifying the second {@link Color}.\n * @param {Property} [options.repeat=new Cartesian2(2.0, 2.0)] A {@link Cartesian2} Property specifying how many times the tiles repeat in each direction.\n */\nfunction CheckerboardMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._definitionChanged = new Event();\n  this._evenColor = undefined;\n  this._evenColorSubscription = undefined;\n  this._oddColor = undefined;\n  this._oddColorSubscription = undefined;\n  this._repeat = undefined;\n  this._repeatSubscription = undefined;\n\n  this.evenColor = options.evenColor;\n  this.oddColor = options.oddColor;\n  this.repeat = options.repeat;\n}\n\nObject.defineProperties(CheckerboardMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof CheckerboardMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        Property.isConstant(this._evenColor) && //\n        Property.isConstant(this._oddColor) && //\n        Property.isConstant(this._repeat)\n      );\n    },\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof CheckerboardMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the Property specifying the first {@link Color}.\n   * @memberof CheckerboardMaterialProperty.prototype\n   * @type {Property}\n   * @default Color.WHITE\n   */\n  evenColor: createPropertyDescriptor(\"evenColor\"),\n\n  /**\n   * Gets or sets the Property specifying the second {@link Color}.\n   * @memberof CheckerboardMaterialProperty.prototype\n   * @type {Property}\n   * @default Color.BLACK\n   */\n  oddColor: createPropertyDescriptor(\"oddColor\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying how many times the tiles repeat in each direction.\n   * @memberof CheckerboardMaterialProperty.prototype\n   * @type {Property}\n   * @default new Cartesian2(2.0, 2.0)\n   */\n  repeat: createPropertyDescriptor(\"repeat\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nCheckerboardMaterialProperty.prototype.getType = function (time) {\n  return \"Checkerboard\";\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nCheckerboardMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n  result.lightColor = Property.getValueOrClonedDefault(\n    this._evenColor,\n    time,\n    defaultEvenColor,\n    result.lightColor\n  );\n  result.darkColor = Property.getValueOrClonedDefault(\n    this._oddColor,\n    time,\n    defaultOddColor,\n    result.darkColor\n  );\n  result.repeat = Property.getValueOrDefault(this._repeat, time, defaultRepeat);\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCheckerboardMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof CheckerboardMaterialProperty && //\n    Property.equals(this._evenColor, other._evenColor) && //\n    Property.equals(this._oddColor, other._oddColor) && //\n      Property.equals(this._repeat, other._repeat))\n  );\n};\nexport default CheckerboardMaterialProperty;\n"]},"metadata":{},"sourceType":"module"}