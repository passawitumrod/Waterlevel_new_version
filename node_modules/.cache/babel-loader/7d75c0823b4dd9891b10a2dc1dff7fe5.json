{"ast":null,"code":"import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport DataSource from \"./DataSource.js\";\nimport EntityCluster from \"./EntityCluster.js\";\nimport EntityCollection from \"./EntityCollection.js\";\n/**\n * A {@link DataSource} implementation which can be used to manually manage a group of entities.\n *\n * @alias CustomDataSource\n * @constructor\n *\n * @param {String} [name] A human-readable name for this instance.\n *\n * @example\n * var dataSource = new Cesium.CustomDataSource('myData');\n *\n * var entity = dataSource.entities.add({\n *    position : Cesium.Cartesian3.fromDegrees(1, 2, 0),\n *    billboard : {\n *        image : 'image.png'\n *    }\n * });\n *\n * viewer.dataSources.add(dataSource);\n */\n\nfunction CustomDataSource(name) {\n  this._name = name;\n  this._clock = undefined;\n  this._changed = new Event();\n  this._error = new Event();\n  this._isLoading = false;\n  this._loading = new Event();\n  this._entityCollection = new EntityCollection(this);\n  this._entityCluster = new EntityCluster();\n}\n\nObject.defineProperties(CustomDataSource.prototype, {\n  /**\n   * Gets or sets a human-readable name for this instance.\n   * @memberof CustomDataSource.prototype\n   * @type {String}\n   */\n  name: {\n    get: function get() {\n      return this._name;\n    },\n    set: function set(value) {\n      if (this._name !== value) {\n        this._name = value;\n\n        this._changed.raiseEvent(this);\n      }\n    }\n  },\n\n  /**\n   * Gets or sets the clock for this instance.\n   * @memberof CustomDataSource.prototype\n   * @type {DataSourceClock}\n   */\n  clock: {\n    get: function get() {\n      return this._clock;\n    },\n    set: function set(value) {\n      if (this._clock !== value) {\n        this._clock = value;\n\n        this._changed.raiseEvent(this);\n      }\n    }\n  },\n\n  /**\n   * Gets the collection of {@link Entity} instances.\n   * @memberof CustomDataSource.prototype\n   * @type {EntityCollection}\n   */\n  entities: {\n    get: function get() {\n      return this._entityCollection;\n    }\n  },\n\n  /**\n   * Gets or sets whether the data source is currently loading data.\n   * @memberof CustomDataSource.prototype\n   * @type {Boolean}\n   */\n  isLoading: {\n    get: function get() {\n      return this._isLoading;\n    },\n    set: function set(value) {\n      DataSource.setLoading(this, value);\n    }\n  },\n\n  /**\n   * Gets an event that will be raised when the underlying data changes.\n   * @memberof CustomDataSource.prototype\n   * @type {Event}\n   */\n  changedEvent: {\n    get: function get() {\n      return this._changed;\n    }\n  },\n\n  /**\n   * Gets an event that will be raised if an error is encountered during processing.\n   * @memberof CustomDataSource.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: function get() {\n      return this._error;\n    }\n  },\n\n  /**\n   * Gets an event that will be raised when the data source either starts or stops loading.\n   * @memberof CustomDataSource.prototype\n   * @type {Event}\n   */\n  loadingEvent: {\n    get: function get() {\n      return this._loading;\n    }\n  },\n\n  /**\n   * Gets whether or not this data source should be displayed.\n   * @memberof CustomDataSource.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function get() {\n      return this._entityCollection.show;\n    },\n    set: function set(value) {\n      this._entityCollection.show = value;\n    }\n  },\n\n  /**\n   * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.\n   *\n   * @memberof CustomDataSource.prototype\n   * @type {EntityCluster}\n   */\n  clustering: {\n    get: function get() {\n      return this._entityCluster;\n    },\n    set: function set(value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value must be defined.\");\n      } //>>includeEnd('debug');\n\n\n      this._entityCluster = value;\n    }\n  }\n});\nexport default CustomDataSource;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/CustomDataSource.js"],"names":["defined","DeveloperError","Event","DataSource","EntityCluster","EntityCollection","CustomDataSource","name","_name","_clock","undefined","_changed","_error","_isLoading","_loading","_entityCollection","_entityCluster","Object","defineProperties","prototype","get","set","value","raiseEvent","clock","entities","isLoading","setLoading","changedEvent","errorEvent","loadingEvent","show","clustering"],"mappings":"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","sourcesContent":["import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport DataSource from \"./DataSource.js\";\nimport EntityCluster from \"./EntityCluster.js\";\nimport EntityCollection from \"./EntityCollection.js\";\n\n/**\n * A {@link DataSource} implementation which can be used to manually manage a group of entities.\n *\n * @alias CustomDataSource\n * @constructor\n *\n * @param {String} [name] A human-readable name for this instance.\n *\n * @example\n * var dataSource = new Cesium.CustomDataSource('myData');\n *\n * var entity = dataSource.entities.add({\n *    position : Cesium.Cartesian3.fromDegrees(1, 2, 0),\n *    billboard : {\n *        image : 'image.png'\n *    }\n * });\n *\n * viewer.dataSources.add(dataSource);\n */\nfunction CustomDataSource(name) {\n  this._name = name;\n  this._clock = undefined;\n  this._changed = new Event();\n  this._error = new Event();\n  this._isLoading = false;\n  this._loading = new Event();\n  this._entityCollection = new EntityCollection(this);\n  this._entityCluster = new EntityCluster();\n}\n\nObject.defineProperties(CustomDataSource.prototype, {\n  /**\n   * Gets or sets a human-readable name for this instance.\n   * @memberof CustomDataSource.prototype\n   * @type {String}\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n    set: function (value) {\n      if (this._name !== value) {\n        this._name = value;\n        this._changed.raiseEvent(this);\n      }\n    },\n  },\n  /**\n   * Gets or sets the clock for this instance.\n   * @memberof CustomDataSource.prototype\n   * @type {DataSourceClock}\n   */\n  clock: {\n    get: function () {\n      return this._clock;\n    },\n    set: function (value) {\n      if (this._clock !== value) {\n        this._clock = value;\n        this._changed.raiseEvent(this);\n      }\n    },\n  },\n  /**\n   * Gets the collection of {@link Entity} instances.\n   * @memberof CustomDataSource.prototype\n   * @type {EntityCollection}\n   */\n  entities: {\n    get: function () {\n      return this._entityCollection;\n    },\n  },\n  /**\n   * Gets or sets whether the data source is currently loading data.\n   * @memberof CustomDataSource.prototype\n   * @type {Boolean}\n   */\n  isLoading: {\n    get: function () {\n      return this._isLoading;\n    },\n    set: function (value) {\n      DataSource.setLoading(this, value);\n    },\n  },\n  /**\n   * Gets an event that will be raised when the underlying data changes.\n   * @memberof CustomDataSource.prototype\n   * @type {Event}\n   */\n  changedEvent: {\n    get: function () {\n      return this._changed;\n    },\n  },\n  /**\n   * Gets an event that will be raised if an error is encountered during processing.\n   * @memberof CustomDataSource.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: function () {\n      return this._error;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the data source either starts or stops loading.\n   * @memberof CustomDataSource.prototype\n   * @type {Event}\n   */\n  loadingEvent: {\n    get: function () {\n      return this._loading;\n    },\n  },\n  /**\n   * Gets whether or not this data source should be displayed.\n   * @memberof CustomDataSource.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function () {\n      return this._entityCollection.show;\n    },\n    set: function (value) {\n      this._entityCollection.show = value;\n    },\n  },\n\n  /**\n   * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.\n   *\n   * @memberof CustomDataSource.prototype\n   * @type {EntityCluster}\n   */\n  clustering: {\n    get: function () {\n      return this._entityCluster;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value must be defined.\");\n      }\n      //>>includeEnd('debug');\n      this._entityCluster = value;\n    },\n  },\n});\nexport default CustomDataSource;\n"]},"metadata":{},"sourceType":"module"}