{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport PolygonHierarchy from \"../Core/PolygonHierarchy.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\nfunction createPolygonHierarchyProperty(value) {\n  if (Array.isArray(value)) {\n    // convert array of positions to PolygonHierarchy object\n    value = new PolygonHierarchy(value);\n  }\n\n  return new ConstantProperty(value);\n}\n/**\n * Describes a polygon defined by an hierarchy of linear rings which make up the outer shape and any nested holes.\n * The polygon conforms to the curvature of the globe and can be placed on the surface or\n * at altitude and can optionally be extruded into a volume.\n *\n * @alias PolygonGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the polygon.\n * @param {Property} [options.hierarchy] A Property specifying the {@link PolygonHierarchy}.\n * @param {Property} [options.height=0] A numeric Property specifying the altitude of the polygon relative to the ellipsoid surface.\n * @param {Property} [options.heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @param {Property} [options.extrudedHeight] A numeric Property specifying the altitude of the polygon's extruded face relative to the ellipsoid surface.\n * @param {Property} [options.extrudedHeightReference=HeightReference.NONE] A Property specifying what the extrudedHeight is relative to.\n * @param {Property} [options.stRotation=0.0] A numeric property specifying the rotation of the polygon texture counter-clockwise from north.\n * @param {Property} [options.granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the angular distance between each latitude and longitude point.\n * @param {Property} [options.fill=true] A boolean Property specifying whether the polygon is filled with the provided material.\n * @param {MaterialProperty} [options.material=Color.WHITE] A Property specifying the material used to fill the polygon.\n * @param {Property} [options.outline=false] A boolean Property specifying whether the polygon is outlined.\n * @param {Property} [options.outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @param {Property} [options.outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @param {Property} [options.perPositionHeight=false] A boolean specifying whether or not the the height of each position is used.\n * @param {Boolean} [options.closeTop=true] When false, leaves off the top of an extruded polygon open.\n * @param {Boolean} [options.closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\n * @param {Property} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow.\n * @param {Property} [options.shadows=ShadowMode.DISABLED] An enum Property specifying whether the polygon casts or receives shadows from light sources.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this polygon will be displayed.\n * @param {Property} [options.classificationType=ClassificationType.BOTH] An enum Property specifying whether this polygon will classify terrain, 3D Tiles, or both when on the ground.\n * @param {ConstantProperty} [options.zIndex=0] A property specifying the zIndex used for ordering ground geometry.  Only has an effect if the polygon is constant and neither height or extrudedHeight are specified.\n *\n * @see Entity\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polygon.html|Cesium Sandcastle Polygon Demo}\n */\n\n\nfunction PolygonGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._hierarchy = undefined;\n  this._hierarchySubscription = undefined;\n  this._height = undefined;\n  this._heightSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._extrudedHeight = undefined;\n  this._extrudedHeightSubscription = undefined;\n  this._extrudedHeightReference = undefined;\n  this._extrudedHeightReferenceSubscription = undefined;\n  this._stRotation = undefined;\n  this._stRotationSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._perPositionHeight = undefined;\n  this._perPositionHeightSubscription = undefined;\n  this._closeTop = undefined;\n  this._closeTopSubscription = undefined;\n  this._closeBottom = undefined;\n  this._closeBottomSubscription = undefined;\n  this._arcType = undefined;\n  this._arcTypeSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._classificationType = undefined;\n  this._classificationTypeSubscription = undefined;\n  this._zIndex = undefined;\n  this._zIndexSubscription = undefined;\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(PolygonGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof PolygonGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the polygon.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link PolygonHierarchy}.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   */\n  hierarchy: createPropertyDescriptor(\"hierarchy\", undefined, createPolygonHierarchyProperty),\n\n  /**\n   * Gets or sets the numeric Property specifying the constant altitude of the polygon.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default 0.0\n   */\n  height: createPropertyDescriptor(\"height\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the polygon extrusion.\n   * If {@link PolygonGraphics#perPositionHeight} is false, the volume starts at {@link PolygonGraphics#height} and ends at this altitude.\n   * If {@link PolygonGraphics#perPositionHeight} is true, the volume starts at the height of each {@link PolygonGraphics#hierarchy} position and ends at this altitude.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   */\n  extrudedHeight: createPropertyDescriptor(\"extrudedHeight\"),\n\n  /**\n   * Gets or sets the Property specifying the extruded {@link HeightReference}.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default HeightReference.NONE\n   */\n  extrudedHeightReference: createPropertyDescriptor(\"extrudedHeightReference\"),\n\n  /**\n   * Gets or sets the numeric property specifying the rotation of the polygon texture counter-clockwise from north.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default 0\n   */\n  stRotation: createPropertyDescriptor(\"stRotation\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the angular distance between points on the polygon.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default {CesiumMath.RADIANS_PER_DEGREE}\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the polygon is filled with the provided material.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the polygon.\n   * @memberof PolygonGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the polygon is outlined.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Gets or sets the boolean specifying whether or not the the height of each position is used.\n   * If true, the shape will have non-uniform altitude defined by the height of each {@link PolygonGraphics#hierarchy} position.\n   * If false, the shape will have a constant altitude as specified by {@link PolygonGraphics#height}.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   */\n  perPositionHeight: createPropertyDescriptor(\"perPositionHeight\"),\n\n  /**\n   * Gets or sets a boolean specifying whether or not the top of an extruded polygon is included.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   */\n  closeTop: createPropertyDescriptor(\"closeTop\"),\n\n  /**\n   * Gets or sets a boolean specifying whether or not the bottom of an extruded polygon is included.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   */\n  closeBottom: createPropertyDescriptor(\"closeBottom\"),\n\n  /**\n   * Gets or sets the {@link ArcType} Property specifying the type of lines the polygon edges use.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default ArcType.GEODESIC\n   */\n  arcType: createPropertyDescriptor(\"arcType\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the polygon\n   * casts or receives shadows from light sources.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this polygon will be displayed.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\"distanceDisplayCondition\"),\n\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying whether this polygon will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default ClassificationType.BOTH\n   */\n  classificationType: createPropertyDescriptor(\"classificationType\"),\n\n  /**\n   * Gets or sets the zIndex Prperty specifying the ordering of ground geometry.  Only has an effect if the polygon is constant and neither height or extrudedHeight are specified.\n   * @memberof PolygonGraphics.prototype\n   * @type {ConstantProperty}\n   * @default 0\n   */\n  zIndex: createPropertyDescriptor(\"zIndex\")\n});\n/**\n * Duplicates this instance.\n *\n * @param {PolygonGraphics} [result] The object onto which to store the result.\n * @returns {PolygonGraphics} The modified result parameter or a new instance if one was not provided.\n */\n\nPolygonGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new PolygonGraphics(this);\n  }\n\n  result.show = this.show;\n  result.hierarchy = this.hierarchy;\n  result.height = this.height;\n  result.heightReference = this.heightReference;\n  result.extrudedHeight = this.extrudedHeight;\n  result.extrudedHeightReference = this.extrudedHeightReference;\n  result.stRotation = this.stRotation;\n  result.granularity = this.granularity;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.perPositionHeight = this.perPositionHeight;\n  result.closeTop = this.closeTop;\n  result.closeBottom = this.closeBottom;\n  result.arcType = this.arcType;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.classificationType = this.classificationType;\n  result.zIndex = this.zIndex;\n  return result;\n};\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {PolygonGraphics} source The object to be merged into this object.\n */\n\n\nPolygonGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  } //>>includeEnd('debug');\n\n\n  this.show = defaultValue(this.show, source.show);\n  this.hierarchy = defaultValue(this.hierarchy, source.hierarchy);\n  this.height = defaultValue(this.height, source.height);\n  this.heightReference = defaultValue(this.heightReference, source.heightReference);\n  this.extrudedHeight = defaultValue(this.extrudedHeight, source.extrudedHeight);\n  this.extrudedHeightReference = defaultValue(this.extrudedHeightReference, source.extrudedHeightReference);\n  this.stRotation = defaultValue(this.stRotation, source.stRotation);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.perPositionHeight = defaultValue(this.perPositionHeight, source.perPositionHeight);\n  this.closeTop = defaultValue(this.closeTop, source.closeTop);\n  this.closeBottom = defaultValue(this.closeBottom, source.closeBottom);\n  this.arcType = defaultValue(this.arcType, source.arcType);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(this.distanceDisplayCondition, source.distanceDisplayCondition);\n  this.classificationType = defaultValue(this.classificationType, source.classificationType);\n  this.zIndex = defaultValue(this.zIndex, source.zIndex);\n};\n\nexport default PolygonGraphics;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/PolygonGraphics.js"],"names":["defaultValue","defined","DeveloperError","Event","PolygonHierarchy","ConstantProperty","createMaterialPropertyDescriptor","createPropertyDescriptor","createPolygonHierarchyProperty","value","Array","isArray","PolygonGraphics","options","_definitionChanged","_show","undefined","_showSubscription","_hierarchy","_hierarchySubscription","_height","_heightSubscription","_heightReference","_heightReferenceSubscription","_extrudedHeight","_extrudedHeightSubscription","_extrudedHeightReference","_extrudedHeightReferenceSubscription","_stRotation","_stRotationSubscription","_granularity","_granularitySubscription","_fill","_fillSubscription","_material","_materialSubscription","_outline","_outlineSubscription","_outlineColor","_outlineColorSubscription","_outlineWidth","_outlineWidthSubscription","_perPositionHeight","_perPositionHeightSubscription","_closeTop","_closeTopSubscription","_closeBottom","_closeBottomSubscription","_arcType","_arcTypeSubscription","_shadows","_shadowsSubscription","_distanceDisplayCondition","_distanceDisplayConditionSubscription","_classificationType","_classificationTypeSubscription","_zIndex","_zIndexSubscription","merge","EMPTY_OBJECT","Object","defineProperties","prototype","definitionChanged","get","show","hierarchy","height","heightReference","extrudedHeight","extrudedHeightReference","stRotation","granularity","fill","material","outline","outlineColor","outlineWidth","perPositionHeight","closeTop","closeBottom","arcType","shadows","distanceDisplayCondition","classificationType","zIndex","clone","result","source"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,yBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AACA,OAAOC,gCAAP,MAA6C,uCAA7C;AACA,OAAOC,wBAAP,MAAqC,+BAArC;;AAEA,SAASC,8BAAT,CAAwCC,KAAxC,EAA+C;AAC7C,MAAIC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACxB;AACAA,IAAAA,KAAK,GAAG,IAAIL,gBAAJ,CAAqBK,KAArB,CAAR;AACD;;AACD,SAAO,IAAIJ,gBAAJ,CAAqBI,KAArB,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,SAASG,eAAT,CAAyBC,OAAzB,EAAkC;AAChC,OAAKC,kBAAL,GAA0B,IAAIX,KAAJ,EAA1B;AACA,OAAKY,KAAL,GAAaC,SAAb;AACA,OAAKC,iBAAL,GAAyBD,SAAzB;AACA,OAAKE,UAAL,GAAkBF,SAAlB;AACA,OAAKG,sBAAL,GAA8BH,SAA9B;AACA,OAAKI,OAAL,GAAeJ,SAAf;AACA,OAAKK,mBAAL,GAA2BL,SAA3B;AACA,OAAKM,gBAAL,GAAwBN,SAAxB;AACA,OAAKO,4BAAL,GAAoCP,SAApC;AACA,OAAKQ,eAAL,GAAuBR,SAAvB;AACA,OAAKS,2BAAL,GAAmCT,SAAnC;AACA,OAAKU,wBAAL,GAAgCV,SAAhC;AACA,OAAKW,oCAAL,GAA4CX,SAA5C;AACA,OAAKY,WAAL,GAAmBZ,SAAnB;AACA,OAAKa,uBAAL,GAA+Bb,SAA/B;AACA,OAAKc,YAAL,GAAoBd,SAApB;AACA,OAAKe,wBAAL,GAAgCf,SAAhC;AACA,OAAKgB,KAAL,GAAahB,SAAb;AACA,OAAKiB,iBAAL,GAAyBjB,SAAzB;AACA,OAAKkB,SAAL,GAAiBlB,SAAjB;AACA,OAAKmB,qBAAL,GAA6BnB,SAA7B;AACA,OAAKoB,QAAL,GAAgBpB,SAAhB;AACA,OAAKqB,oBAAL,GAA4BrB,SAA5B;AACA,OAAKsB,aAAL,GAAqBtB,SAArB;AACA,OAAKuB,yBAAL,GAAiCvB,SAAjC;AACA,OAAKwB,aAAL,GAAqBxB,SAArB;AACA,OAAKyB,yBAAL,GAAiCzB,SAAjC;AACA,OAAK0B,kBAAL,GAA0B1B,SAA1B;AACA,OAAK2B,8BAAL,GAAsC3B,SAAtC;AACA,OAAK4B,SAAL,GAAiB5B,SAAjB;AACA,OAAK6B,qBAAL,GAA6B7B,SAA7B;AACA,OAAK8B,YAAL,GAAoB9B,SAApB;AACA,OAAK+B,wBAAL,GAAgC/B,SAAhC;AACA,OAAKgC,QAAL,GAAgBhC,SAAhB;AACA,OAAKiC,oBAAL,GAA4BjC,SAA5B;AACA,OAAKkC,QAAL,GAAgBlC,SAAhB;AACA,OAAKmC,oBAAL,GAA4BnC,SAA5B;AACA,OAAKoC,yBAAL,GAAiCpC,SAAjC;AACA,OAAKqC,qCAAL,GAA6CrC,SAA7C;AACA,OAAKsC,mBAAL,GAA2BtC,SAA3B;AACA,OAAKuC,+BAAL,GAAuCvC,SAAvC;AACA,OAAKwC,OAAL,GAAexC,SAAf;AACA,OAAKyC,mBAAL,GAA2BzC,SAA3B;AAEA,OAAK0C,KAAL,CAAW1D,YAAY,CAACa,OAAD,EAAUb,YAAY,CAAC2D,YAAvB,CAAvB;AACD;;AAEDC,MAAM,CAACC,gBAAP,CAAwBjD,eAAe,CAACkD,SAAxC,EAAmD;AACjD;;;;;;;AAOAC,EAAAA,iBAAiB,EAAE;AACjBC,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKlD,kBAAZ;AACD;AAHgB,GAR8B;;AAcjD;;;;;;AAMAmD,EAAAA,IAAI,EAAE1D,wBAAwB,CAAC,MAAD,CApBmB;;AAsBjD;;;;;AAKA2D,EAAAA,SAAS,EAAE3D,wBAAwB,CACjC,WADiC,EAEjCS,SAFiC,EAGjCR,8BAHiC,CA3Bc;;AAiCjD;;;;;;AAMA2D,EAAAA,MAAM,EAAE5D,wBAAwB,CAAC,QAAD,CAvCiB;;AAyCjD;;;;;;AAMA6D,EAAAA,eAAe,EAAE7D,wBAAwB,CAAC,iBAAD,CA/CQ;;AAiDjD;;;;;;;AAOA8D,EAAAA,cAAc,EAAE9D,wBAAwB,CAAC,gBAAD,CAxDS;;AA0DjD;;;;;;AAMA+D,EAAAA,uBAAuB,EAAE/D,wBAAwB,CAAC,yBAAD,CAhEA;;AAkEjD;;;;;;AAMAgE,EAAAA,UAAU,EAAEhE,wBAAwB,CAAC,YAAD,CAxEa;;AA0EjD;;;;;;AAMAiE,EAAAA,WAAW,EAAEjE,wBAAwB,CAAC,aAAD,CAhFY;;AAkFjD;;;;;;AAMAkE,EAAAA,IAAI,EAAElE,wBAAwB,CAAC,MAAD,CAxFmB;;AA0FjD;;;;;;AAMAmE,EAAAA,QAAQ,EAAEpE,gCAAgC,CAAC,UAAD,CAhGO;;AAkGjD;;;;;;AAMAqE,EAAAA,OAAO,EAAEpE,wBAAwB,CAAC,SAAD,CAxGgB;;AA0GjD;;;;;;AAMAqE,EAAAA,YAAY,EAAErE,wBAAwB,CAAC,cAAD,CAhHW;;AAkHjD;;;;;;AAMAsE,EAAAA,YAAY,EAAEtE,wBAAwB,CAAC,cAAD,CAxHW;;AA0HjD;;;;;;;AAOAuE,EAAAA,iBAAiB,EAAEvE,wBAAwB,CAAC,mBAAD,CAjIM;;AAmIjD;;;;;AAKAwE,EAAAA,QAAQ,EAAExE,wBAAwB,CAAC,UAAD,CAxIe;;AA0IjD;;;;;AAKAyE,EAAAA,WAAW,EAAEzE,wBAAwB,CAAC,aAAD,CA/IY;;AAiJjD;;;;;;AAMA0E,EAAAA,OAAO,EAAE1E,wBAAwB,CAAC,SAAD,CAvJgB;;AAyJjD;;;;;;;AAOA2E,EAAAA,OAAO,EAAE3E,wBAAwB,CAAC,SAAD,CAhKgB;;AAkKjD;;;;;AAKA4E,EAAAA,wBAAwB,EAAE5E,wBAAwB,CAChD,0BADgD,CAvKD;;AA2KjD;;;;;;AAMA6E,EAAAA,kBAAkB,EAAE7E,wBAAwB,CAAC,oBAAD,CAjLK;;AAmLjD;;;;;;AAMA8E,EAAAA,MAAM,EAAE9E,wBAAwB,CAAC,QAAD;AAzLiB,CAAnD;AA4LA;;;;;;;AAMAK,eAAe,CAACkD,SAAhB,CAA0BwB,KAA1B,GAAkC,UAAUC,MAAV,EAAkB;AAClD,MAAI,CAACtF,OAAO,CAACsF,MAAD,CAAZ,EAAsB;AACpB,WAAO,IAAI3E,eAAJ,CAAoB,IAApB,CAAP;AACD;;AACD2E,EAAAA,MAAM,CAACtB,IAAP,GAAc,KAAKA,IAAnB;AACAsB,EAAAA,MAAM,CAACrB,SAAP,GAAmB,KAAKA,SAAxB;AACAqB,EAAAA,MAAM,CAACpB,MAAP,GAAgB,KAAKA,MAArB;AACAoB,EAAAA,MAAM,CAACnB,eAAP,GAAyB,KAAKA,eAA9B;AACAmB,EAAAA,MAAM,CAAClB,cAAP,GAAwB,KAAKA,cAA7B;AACAkB,EAAAA,MAAM,CAACjB,uBAAP,GAAiC,KAAKA,uBAAtC;AACAiB,EAAAA,MAAM,CAAChB,UAAP,GAAoB,KAAKA,UAAzB;AACAgB,EAAAA,MAAM,CAACf,WAAP,GAAqB,KAAKA,WAA1B;AACAe,EAAAA,MAAM,CAACd,IAAP,GAAc,KAAKA,IAAnB;AACAc,EAAAA,MAAM,CAACb,QAAP,GAAkB,KAAKA,QAAvB;AACAa,EAAAA,MAAM,CAACZ,OAAP,GAAiB,KAAKA,OAAtB;AACAY,EAAAA,MAAM,CAACX,YAAP,GAAsB,KAAKA,YAA3B;AACAW,EAAAA,MAAM,CAACV,YAAP,GAAsB,KAAKA,YAA3B;AACAU,EAAAA,MAAM,CAACT,iBAAP,GAA2B,KAAKA,iBAAhC;AACAS,EAAAA,MAAM,CAACR,QAAP,GAAkB,KAAKA,QAAvB;AACAQ,EAAAA,MAAM,CAACP,WAAP,GAAqB,KAAKA,WAA1B;AACAO,EAAAA,MAAM,CAACN,OAAP,GAAiB,KAAKA,OAAtB;AACAM,EAAAA,MAAM,CAACL,OAAP,GAAiB,KAAKA,OAAtB;AACAK,EAAAA,MAAM,CAACJ,wBAAP,GAAkC,KAAKA,wBAAvC;AACAI,EAAAA,MAAM,CAACH,kBAAP,GAA4B,KAAKA,kBAAjC;AACAG,EAAAA,MAAM,CAACF,MAAP,GAAgB,KAAKA,MAArB;AACA,SAAOE,MAAP;AACD,CA1BD;AA4BA;;;;;;;;AAMA3E,eAAe,CAACkD,SAAhB,CAA0BJ,KAA1B,GAAkC,UAAU8B,MAAV,EAAkB;AAClD;AACA,MAAI,CAACvF,OAAO,CAACuF,MAAD,CAAZ,EAAsB;AACpB,UAAM,IAAItF,cAAJ,CAAmB,qBAAnB,CAAN;AACD,GAJiD,CAKlD;;;AAEA,OAAK+D,IAAL,GAAYjE,YAAY,CAAC,KAAKiE,IAAN,EAAYuB,MAAM,CAACvB,IAAnB,CAAxB;AACA,OAAKC,SAAL,GAAiBlE,YAAY,CAAC,KAAKkE,SAAN,EAAiBsB,MAAM,CAACtB,SAAxB,CAA7B;AACA,OAAKC,MAAL,GAAcnE,YAAY,CAAC,KAAKmE,MAAN,EAAcqB,MAAM,CAACrB,MAArB,CAA1B;AACA,OAAKC,eAAL,GAAuBpE,YAAY,CACjC,KAAKoE,eAD4B,EAEjCoB,MAAM,CAACpB,eAF0B,CAAnC;AAIA,OAAKC,cAAL,GAAsBrE,YAAY,CAChC,KAAKqE,cAD2B,EAEhCmB,MAAM,CAACnB,cAFyB,CAAlC;AAIA,OAAKC,uBAAL,GAA+BtE,YAAY,CACzC,KAAKsE,uBADoC,EAEzCkB,MAAM,CAAClB,uBAFkC,CAA3C;AAIA,OAAKC,UAAL,GAAkBvE,YAAY,CAAC,KAAKuE,UAAN,EAAkBiB,MAAM,CAACjB,UAAzB,CAA9B;AACA,OAAKC,WAAL,GAAmBxE,YAAY,CAAC,KAAKwE,WAAN,EAAmBgB,MAAM,CAAChB,WAA1B,CAA/B;AACA,OAAKC,IAAL,GAAYzE,YAAY,CAAC,KAAKyE,IAAN,EAAYe,MAAM,CAACf,IAAnB,CAAxB;AACA,OAAKC,QAAL,GAAgB1E,YAAY,CAAC,KAAK0E,QAAN,EAAgBc,MAAM,CAACd,QAAvB,CAA5B;AACA,OAAKC,OAAL,GAAe3E,YAAY,CAAC,KAAK2E,OAAN,EAAea,MAAM,CAACb,OAAtB,CAA3B;AACA,OAAKC,YAAL,GAAoB5E,YAAY,CAAC,KAAK4E,YAAN,EAAoBY,MAAM,CAACZ,YAA3B,CAAhC;AACA,OAAKC,YAAL,GAAoB7E,YAAY,CAAC,KAAK6E,YAAN,EAAoBW,MAAM,CAACX,YAA3B,CAAhC;AACA,OAAKC,iBAAL,GAAyB9E,YAAY,CACnC,KAAK8E,iBAD8B,EAEnCU,MAAM,CAACV,iBAF4B,CAArC;AAIA,OAAKC,QAAL,GAAgB/E,YAAY,CAAC,KAAK+E,QAAN,EAAgBS,MAAM,CAACT,QAAvB,CAA5B;AACA,OAAKC,WAAL,GAAmBhF,YAAY,CAAC,KAAKgF,WAAN,EAAmBQ,MAAM,CAACR,WAA1B,CAA/B;AACA,OAAKC,OAAL,GAAejF,YAAY,CAAC,KAAKiF,OAAN,EAAeO,MAAM,CAACP,OAAtB,CAA3B;AACA,OAAKC,OAAL,GAAelF,YAAY,CAAC,KAAKkF,OAAN,EAAeM,MAAM,CAACN,OAAtB,CAA3B;AACA,OAAKC,wBAAL,GAAgCnF,YAAY,CAC1C,KAAKmF,wBADqC,EAE1CK,MAAM,CAACL,wBAFmC,CAA5C;AAIA,OAAKC,kBAAL,GAA0BpF,YAAY,CACpC,KAAKoF,kBAD+B,EAEpCI,MAAM,CAACJ,kBAF6B,CAAtC;AAIA,OAAKC,MAAL,GAAcrF,YAAY,CAAC,KAAKqF,MAAN,EAAcG,MAAM,CAACH,MAArB,CAA1B;AACD,CA9CD;;AA+CA,eAAezE,eAAf","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport PolygonHierarchy from \"../Core/PolygonHierarchy.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\nfunction createPolygonHierarchyProperty(value) {\n  if (Array.isArray(value)) {\n    // convert array of positions to PolygonHierarchy object\n    value = new PolygonHierarchy(value);\n  }\n  return new ConstantProperty(value);\n}\n\n/**\n * Describes a polygon defined by an hierarchy of linear rings which make up the outer shape and any nested holes.\n * The polygon conforms to the curvature of the globe and can be placed on the surface or\n * at altitude and can optionally be extruded into a volume.\n *\n * @alias PolygonGraphics\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property} [options.show=true] A boolean Property specifying the visibility of the polygon.\n * @param {Property} [options.hierarchy] A Property specifying the {@link PolygonHierarchy}.\n * @param {Property} [options.height=0] A numeric Property specifying the altitude of the polygon relative to the ellipsoid surface.\n * @param {Property} [options.heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @param {Property} [options.extrudedHeight] A numeric Property specifying the altitude of the polygon's extruded face relative to the ellipsoid surface.\n * @param {Property} [options.extrudedHeightReference=HeightReference.NONE] A Property specifying what the extrudedHeight is relative to.\n * @param {Property} [options.stRotation=0.0] A numeric property specifying the rotation of the polygon texture counter-clockwise from north.\n * @param {Property} [options.granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the angular distance between each latitude and longitude point.\n * @param {Property} [options.fill=true] A boolean Property specifying whether the polygon is filled with the provided material.\n * @param {MaterialProperty} [options.material=Color.WHITE] A Property specifying the material used to fill the polygon.\n * @param {Property} [options.outline=false] A boolean Property specifying whether the polygon is outlined.\n * @param {Property} [options.outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @param {Property} [options.outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @param {Property} [options.perPositionHeight=false] A boolean specifying whether or not the the height of each position is used.\n * @param {Boolean} [options.closeTop=true] When false, leaves off the top of an extruded polygon open.\n * @param {Boolean} [options.closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\n * @param {Property} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow.\n * @param {Property} [options.shadows=ShadowMode.DISABLED] An enum Property specifying whether the polygon casts or receives shadows from light sources.\n * @param {Property} [options.distanceDisplayCondition] A Property specifying at what distance from the camera that this polygon will be displayed.\n * @param {Property} [options.classificationType=ClassificationType.BOTH] An enum Property specifying whether this polygon will classify terrain, 3D Tiles, or both when on the ground.\n * @param {ConstantProperty} [options.zIndex=0] A property specifying the zIndex used for ordering ground geometry.  Only has an effect if the polygon is constant and neither height or extrudedHeight are specified.\n *\n * @see Entity\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polygon.html|Cesium Sandcastle Polygon Demo}\n */\nfunction PolygonGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._hierarchy = undefined;\n  this._hierarchySubscription = undefined;\n  this._height = undefined;\n  this._heightSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._extrudedHeight = undefined;\n  this._extrudedHeightSubscription = undefined;\n  this._extrudedHeightReference = undefined;\n  this._extrudedHeightReferenceSubscription = undefined;\n  this._stRotation = undefined;\n  this._stRotationSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._perPositionHeight = undefined;\n  this._perPositionHeightSubscription = undefined;\n  this._closeTop = undefined;\n  this._closeTopSubscription = undefined;\n  this._closeBottom = undefined;\n  this._closeBottomSubscription = undefined;\n  this._arcType = undefined;\n  this._arcTypeSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._classificationType = undefined;\n  this._classificationTypeSubscription = undefined;\n  this._zIndex = undefined;\n  this._zIndexSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(PolygonGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof PolygonGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the polygon.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link PolygonHierarchy}.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   */\n  hierarchy: createPropertyDescriptor(\n    \"hierarchy\",\n    undefined,\n    createPolygonHierarchyProperty\n  ),\n\n  /**\n   * Gets or sets the numeric Property specifying the constant altitude of the polygon.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default 0.0\n   */\n  height: createPropertyDescriptor(\"height\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the polygon extrusion.\n   * If {@link PolygonGraphics#perPositionHeight} is false, the volume starts at {@link PolygonGraphics#height} and ends at this altitude.\n   * If {@link PolygonGraphics#perPositionHeight} is true, the volume starts at the height of each {@link PolygonGraphics#hierarchy} position and ends at this altitude.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   */\n  extrudedHeight: createPropertyDescriptor(\"extrudedHeight\"),\n\n  /**\n   * Gets or sets the Property specifying the extruded {@link HeightReference}.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default HeightReference.NONE\n   */\n  extrudedHeightReference: createPropertyDescriptor(\"extrudedHeightReference\"),\n\n  /**\n   * Gets or sets the numeric property specifying the rotation of the polygon texture counter-clockwise from north.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default 0\n   */\n  stRotation: createPropertyDescriptor(\"stRotation\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the angular distance between points on the polygon.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default {CesiumMath.RADIANS_PER_DEGREE}\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the polygon is filled with the provided material.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the polygon.\n   * @memberof PolygonGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the polygon is outlined.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Gets or sets the boolean specifying whether or not the the height of each position is used.\n   * If true, the shape will have non-uniform altitude defined by the height of each {@link PolygonGraphics#hierarchy} position.\n   * If false, the shape will have a constant altitude as specified by {@link PolygonGraphics#height}.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   */\n  perPositionHeight: createPropertyDescriptor(\"perPositionHeight\"),\n\n  /**\n   * Gets or sets a boolean specifying whether or not the top of an extruded polygon is included.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   */\n  closeTop: createPropertyDescriptor(\"closeTop\"),\n\n  /**\n   * Gets or sets a boolean specifying whether or not the bottom of an extruded polygon is included.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   */\n  closeBottom: createPropertyDescriptor(\"closeBottom\"),\n\n  /**\n   * Gets or sets the {@link ArcType} Property specifying the type of lines the polygon edges use.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default ArcType.GEODESIC\n   */\n  arcType: createPropertyDescriptor(\"arcType\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the polygon\n   * casts or receives shadows from light sources.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this polygon will be displayed.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying whether this polygon will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property}\n   * @default ClassificationType.BOTH\n   */\n  classificationType: createPropertyDescriptor(\"classificationType\"),\n\n  /**\n   * Gets or sets the zIndex Prperty specifying the ordering of ground geometry.  Only has an effect if the polygon is constant and neither height or extrudedHeight are specified.\n   * @memberof PolygonGraphics.prototype\n   * @type {ConstantProperty}\n   * @default 0\n   */\n  zIndex: createPropertyDescriptor(\"zIndex\"),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {PolygonGraphics} [result] The object onto which to store the result.\n * @returns {PolygonGraphics} The modified result parameter or a new instance if one was not provided.\n */\nPolygonGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new PolygonGraphics(this);\n  }\n  result.show = this.show;\n  result.hierarchy = this.hierarchy;\n  result.height = this.height;\n  result.heightReference = this.heightReference;\n  result.extrudedHeight = this.extrudedHeight;\n  result.extrudedHeightReference = this.extrudedHeightReference;\n  result.stRotation = this.stRotation;\n  result.granularity = this.granularity;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.perPositionHeight = this.perPositionHeight;\n  result.closeTop = this.closeTop;\n  result.closeBottom = this.closeBottom;\n  result.arcType = this.arcType;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.classificationType = this.classificationType;\n  result.zIndex = this.zIndex;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {PolygonGraphics} source The object to be merged into this object.\n */\nPolygonGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.hierarchy = defaultValue(this.hierarchy, source.hierarchy);\n  this.height = defaultValue(this.height, source.height);\n  this.heightReference = defaultValue(\n    this.heightReference,\n    source.heightReference\n  );\n  this.extrudedHeight = defaultValue(\n    this.extrudedHeight,\n    source.extrudedHeight\n  );\n  this.extrudedHeightReference = defaultValue(\n    this.extrudedHeightReference,\n    source.extrudedHeightReference\n  );\n  this.stRotation = defaultValue(this.stRotation, source.stRotation);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.perPositionHeight = defaultValue(\n    this.perPositionHeight,\n    source.perPositionHeight\n  );\n  this.closeTop = defaultValue(this.closeTop, source.closeTop);\n  this.closeBottom = defaultValue(this.closeBottom, source.closeBottom);\n  this.arcType = defaultValue(this.arcType, source.arcType);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n  this.classificationType = defaultValue(\n    this.classificationType,\n    source.classificationType\n  );\n  this.zIndex = defaultValue(this.zIndex, source.zIndex);\n};\nexport default PolygonGraphics;\n"]},"metadata":{},"sourceType":"module"}