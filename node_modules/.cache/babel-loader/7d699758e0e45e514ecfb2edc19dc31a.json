{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport defined from \"./defined.js\";\nimport Iau2000Orientation from \"./Iau2000Orientation.js\";\nimport JulianDate from \"./JulianDate.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport Quaternion from \"./Quaternion.js\";\n/**\n * The Axes representing the orientation of a Globe as represented by the data\n * from the IAU/IAG Working Group reports on rotational elements.\n * @alias IauOrientationAxes\n * @constructor\n *\n * @param {IauOrientationAxes~ComputeFunction} [computeFunction] The function that computes the {@link IauOrientationParameters} given a {@link JulianDate}.\n *\n * @see Iau2000Orientation\n *\n * @private\n */\n\nfunction IauOrientationAxes(computeFunction) {\n  if (!defined(computeFunction) || typeof computeFunction !== \"function\") {\n    computeFunction = Iau2000Orientation.ComputeMoon;\n  }\n\n  this._computeFunction = computeFunction;\n}\n\nvar xAxisScratch = new Cartesian3();\nvar yAxisScratch = new Cartesian3();\nvar zAxisScratch = new Cartesian3();\n\nfunction computeRotationMatrix(alpha, delta, result) {\n  var xAxis = xAxisScratch;\n  xAxis.x = Math.cos(alpha + CesiumMath.PI_OVER_TWO);\n  xAxis.y = Math.sin(alpha + CesiumMath.PI_OVER_TWO);\n  xAxis.z = 0.0;\n  var cosDec = Math.cos(delta);\n  var zAxis = zAxisScratch;\n  zAxis.x = cosDec * Math.cos(alpha);\n  zAxis.y = cosDec * Math.sin(alpha);\n  zAxis.z = Math.sin(delta);\n  var yAxis = Cartesian3.cross(zAxis, xAxis, yAxisScratch);\n\n  if (!defined(result)) {\n    result = new Matrix3();\n  }\n\n  result[0] = xAxis.x;\n  result[1] = yAxis.x;\n  result[2] = zAxis.x;\n  result[3] = xAxis.y;\n  result[4] = yAxis.y;\n  result[5] = zAxis.y;\n  result[6] = xAxis.z;\n  result[7] = yAxis.z;\n  result[8] = zAxis.z;\n  return result;\n}\n\nvar rotMtxScratch = new Matrix3();\nvar quatScratch = new Quaternion();\n/**\n * Computes a rotation from ICRF to a Globe's Fixed axes.\n *\n * @param {JulianDate} date The date to evaluate the matrix.\n * @param {Matrix3} result The object onto which to store the result.\n * @returns {Matrix3} The modified result parameter or a new instance of the rotation from ICRF to Fixed.\n */\n\nIauOrientationAxes.prototype.evaluate = function (date, result) {\n  if (!defined(date)) {\n    date = JulianDate.now();\n  }\n\n  var alphaDeltaW = this._computeFunction(date);\n\n  var precMtx = computeRotationMatrix(alphaDeltaW.rightAscension, alphaDeltaW.declination, result);\n  var rot = CesiumMath.zeroToTwoPi(alphaDeltaW.rotation);\n  var quat = Quaternion.fromAxisAngle(Cartesian3.UNIT_Z, rot, quatScratch);\n  var rotMtx = Matrix3.fromQuaternion(Quaternion.conjugate(quat, quat), rotMtxScratch);\n  var cbi2cbf = Matrix3.multiply(rotMtx, precMtx, precMtx);\n  return cbi2cbf;\n};\n/**\n * A function that computes the {@link IauOrientationParameters} for a {@link JulianDate}.\n * @callback IauOrientationAxes~ComputeFunction\n * @param {JulianDate} date The date to evaluate the parameters.\n * @returns {IauOrientationParameters} The orientation parameters.\n */\n\n\nexport default IauOrientationAxes;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/IauOrientationAxes.js"],"names":["Cartesian3","defined","Iau2000Orientation","JulianDate","CesiumMath","Matrix3","Quaternion","IauOrientationAxes","computeFunction","ComputeMoon","_computeFunction","xAxisScratch","yAxisScratch","zAxisScratch","computeRotationMatrix","alpha","delta","result","xAxis","x","Math","cos","PI_OVER_TWO","y","sin","z","cosDec","zAxis","yAxis","cross","rotMtxScratch","quatScratch","prototype","evaluate","date","now","alphaDeltaW","precMtx","rightAscension","declination","rot","zeroToTwoPi","rotation","quat","fromAxisAngle","UNIT_Z","rotMtx","fromQuaternion","conjugate","cbi2cbf","multiply"],"mappings":"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","sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport defined from \"./defined.js\";\nimport Iau2000Orientation from \"./Iau2000Orientation.js\";\nimport JulianDate from \"./JulianDate.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport Quaternion from \"./Quaternion.js\";\n\n/**\n * The Axes representing the orientation of a Globe as represented by the data\n * from the IAU/IAG Working Group reports on rotational elements.\n * @alias IauOrientationAxes\n * @constructor\n *\n * @param {IauOrientationAxes~ComputeFunction} [computeFunction] The function that computes the {@link IauOrientationParameters} given a {@link JulianDate}.\n *\n * @see Iau2000Orientation\n *\n * @private\n */\nfunction IauOrientationAxes(computeFunction) {\n  if (!defined(computeFunction) || typeof computeFunction !== \"function\") {\n    computeFunction = Iau2000Orientation.ComputeMoon;\n  }\n\n  this._computeFunction = computeFunction;\n}\n\nvar xAxisScratch = new Cartesian3();\nvar yAxisScratch = new Cartesian3();\nvar zAxisScratch = new Cartesian3();\n\nfunction computeRotationMatrix(alpha, delta, result) {\n  var xAxis = xAxisScratch;\n  xAxis.x = Math.cos(alpha + CesiumMath.PI_OVER_TWO);\n  xAxis.y = Math.sin(alpha + CesiumMath.PI_OVER_TWO);\n  xAxis.z = 0.0;\n\n  var cosDec = Math.cos(delta);\n\n  var zAxis = zAxisScratch;\n  zAxis.x = cosDec * Math.cos(alpha);\n  zAxis.y = cosDec * Math.sin(alpha);\n  zAxis.z = Math.sin(delta);\n\n  var yAxis = Cartesian3.cross(zAxis, xAxis, yAxisScratch);\n\n  if (!defined(result)) {\n    result = new Matrix3();\n  }\n\n  result[0] = xAxis.x;\n  result[1] = yAxis.x;\n  result[2] = zAxis.x;\n  result[3] = xAxis.y;\n  result[4] = yAxis.y;\n  result[5] = zAxis.y;\n  result[6] = xAxis.z;\n  result[7] = yAxis.z;\n  result[8] = zAxis.z;\n\n  return result;\n}\n\nvar rotMtxScratch = new Matrix3();\nvar quatScratch = new Quaternion();\n\n/**\n * Computes a rotation from ICRF to a Globe's Fixed axes.\n *\n * @param {JulianDate} date The date to evaluate the matrix.\n * @param {Matrix3} result The object onto which to store the result.\n * @returns {Matrix3} The modified result parameter or a new instance of the rotation from ICRF to Fixed.\n */\nIauOrientationAxes.prototype.evaluate = function (date, result) {\n  if (!defined(date)) {\n    date = JulianDate.now();\n  }\n\n  var alphaDeltaW = this._computeFunction(date);\n  var precMtx = computeRotationMatrix(\n    alphaDeltaW.rightAscension,\n    alphaDeltaW.declination,\n    result\n  );\n\n  var rot = CesiumMath.zeroToTwoPi(alphaDeltaW.rotation);\n  var quat = Quaternion.fromAxisAngle(Cartesian3.UNIT_Z, rot, quatScratch);\n  var rotMtx = Matrix3.fromQuaternion(\n    Quaternion.conjugate(quat, quat),\n    rotMtxScratch\n  );\n\n  var cbi2cbf = Matrix3.multiply(rotMtx, precMtx, precMtx);\n  return cbi2cbf;\n};\n\n/**\n * A function that computes the {@link IauOrientationParameters} for a {@link JulianDate}.\n * @callback IauOrientationAxes~ComputeFunction\n * @param {JulianDate} date The date to evaluate the parameters.\n * @returns {IauOrientationParameters} The orientation parameters.\n */\nexport default IauOrientationAxes;\n"]},"metadata":{},"sourceType":"module"}