{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport TimeIntervalCollection from \"../Core/TimeIntervalCollection.js\";\nimport PositionProperty from \"./PositionProperty.js\";\nimport Property from \"./Property.js\";\n/**\n * A {@link TimeIntervalCollectionProperty} which is also a {@link PositionProperty}.\n *\n * @alias TimeIntervalCollectionPositionProperty\n * @constructor\n *\n * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n */\n\nfunction TimeIntervalCollectionPositionProperty(referenceFrame) {\n  this._definitionChanged = new Event();\n  this._intervals = new TimeIntervalCollection();\n\n  this._intervals.changedEvent.addEventListener(TimeIntervalCollectionPositionProperty.prototype._intervalsChanged, this);\n\n  this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n}\n\nObject.defineProperties(TimeIntervalCollectionPositionProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof TimeIntervalCollectionPositionProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function get() {\n      return this._intervals.isEmpty;\n    }\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof TimeIntervalCollectionPositionProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function get() {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets the interval collection.\n   * @memberof TimeIntervalCollectionPositionProperty.prototype\n   * @type {TimeIntervalCollection}\n   */\n  intervals: {\n    get: function get() {\n      return this._intervals;\n    }\n  },\n\n  /**\n   * Gets the reference frame in which the position is defined.\n   * @memberof TimeIntervalCollectionPositionProperty.prototype\n   * @type {ReferenceFrame}\n   * @default ReferenceFrame.FIXED;\n   */\n  referenceFrame: {\n    get: function get() {\n      return this._referenceFrame;\n    }\n  }\n});\n/**\n * Gets the value of the property at the provided time in the fixed frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\nTimeIntervalCollectionPositionProperty.prototype.getValue = function (time, result) {\n  return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n};\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\n\nTimeIntervalCollectionPositionProperty.prototype.getValueInReferenceFrame = function (time, referenceFrame, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n\n  if (!defined(referenceFrame)) {\n    throw new DeveloperError(\"referenceFrame is required.\");\n  } //>>includeEnd('debug');\n\n\n  var position = this._intervals.findDataForIntervalContainingDate(time);\n\n  if (defined(position)) {\n    return PositionProperty.convertToReferenceFrame(time, position, this._referenceFrame, referenceFrame, result);\n  }\n\n  return undefined;\n};\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nTimeIntervalCollectionPositionProperty.prototype.equals = function (other) {\n  return this === other || //\n  other instanceof TimeIntervalCollectionPositionProperty && //\n  this._intervals.equals(other._intervals, Property.equals) && //\n  this._referenceFrame === other._referenceFrame;\n};\n/**\n * @private\n */\n\n\nTimeIntervalCollectionPositionProperty.prototype._intervalsChanged = function () {\n  this._definitionChanged.raiseEvent(this);\n};\n\nexport default TimeIntervalCollectionPositionProperty;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/TimeIntervalCollectionPositionProperty.js"],"names":["defaultValue","defined","DeveloperError","Event","ReferenceFrame","TimeIntervalCollection","PositionProperty","Property","TimeIntervalCollectionPositionProperty","referenceFrame","_definitionChanged","_intervals","changedEvent","addEventListener","prototype","_intervalsChanged","_referenceFrame","FIXED","Object","defineProperties","isConstant","get","isEmpty","definitionChanged","intervals","getValue","time","result","getValueInReferenceFrame","position","findDataForIntervalContainingDate","convertToReferenceFrame","undefined","equals","other","raiseEvent"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport TimeIntervalCollection from \"../Core/TimeIntervalCollection.js\";\nimport PositionProperty from \"./PositionProperty.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link TimeIntervalCollectionProperty} which is also a {@link PositionProperty}.\n *\n * @alias TimeIntervalCollectionPositionProperty\n * @constructor\n *\n * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n */\nfunction TimeIntervalCollectionPositionProperty(referenceFrame) {\n  this._definitionChanged = new Event();\n  this._intervals = new TimeIntervalCollection();\n  this._intervals.changedEvent.addEventListener(\n    TimeIntervalCollectionPositionProperty.prototype._intervalsChanged,\n    this\n  );\n  this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n}\n\nObject.defineProperties(TimeIntervalCollectionPositionProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof TimeIntervalCollectionPositionProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return this._intervals.isEmpty;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof TimeIntervalCollectionPositionProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets the interval collection.\n   * @memberof TimeIntervalCollectionPositionProperty.prototype\n   * @type {TimeIntervalCollection}\n   */\n  intervals: {\n    get: function () {\n      return this._intervals;\n    },\n  },\n  /**\n   * Gets the reference frame in which the position is defined.\n   * @memberof TimeIntervalCollectionPositionProperty.prototype\n   * @type {ReferenceFrame}\n   * @default ReferenceFrame.FIXED;\n   */\n  referenceFrame: {\n    get: function () {\n      return this._referenceFrame;\n    },\n  },\n});\n\n/**\n * Gets the value of the property at the provided time in the fixed frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nTimeIntervalCollectionPositionProperty.prototype.getValue = function (\n  time,\n  result\n) {\n  return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n};\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nTimeIntervalCollectionPositionProperty.prototype.getValueInReferenceFrame = function (\n  time,\n  referenceFrame,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  if (!defined(referenceFrame)) {\n    throw new DeveloperError(\"referenceFrame is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var position = this._intervals.findDataForIntervalContainingDate(time);\n  if (defined(position)) {\n    return PositionProperty.convertToReferenceFrame(\n      time,\n      position,\n      this._referenceFrame,\n      referenceFrame,\n      result\n    );\n  }\n  return undefined;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nTimeIntervalCollectionPositionProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof TimeIntervalCollectionPositionProperty && //\n    this._intervals.equals(other._intervals, Property.equals) && //\n      this._referenceFrame === other._referenceFrame)\n  );\n};\n\n/**\n * @private\n */\nTimeIntervalCollectionPositionProperty.prototype._intervalsChanged = function () {\n  this._definitionChanged.raiseEvent(this);\n};\nexport default TimeIntervalCollectionPositionProperty;\n"]},"metadata":{},"sourceType":"module"}