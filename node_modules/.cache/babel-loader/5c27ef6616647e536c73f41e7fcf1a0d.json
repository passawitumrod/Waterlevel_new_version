{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport CylinderGeometry from \"../Core/CylinderGeometry.js\";\nimport CylinderOutlineGeometry from \"../Core/CylinderOutlineGeometry.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport GeometryOffsetAttribute from \"../Core/GeometryOffsetAttribute.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport heightReferenceOnEntityPropertyChanged from \"./heightReferenceOnEntityPropertyChanged.js\";\nimport Property from \"./Property.js\";\nvar defaultOffset = Cartesian3.ZERO;\nvar offsetScratch = new Cartesian3();\nvar positionScratch = new Cartesian3();\nvar scratchColor = new Color();\n\nfunction CylinderGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.length = undefined;\n  this.topRadius = undefined;\n  this.bottomRadius = undefined;\n  this.slices = undefined;\n  this.numberOfVerticalLines = undefined;\n  this.offsetAttribute = undefined;\n}\n/**\n * A {@link GeometryUpdater} for cylinders.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias CylinderGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\n\n\nfunction CylinderGeometryUpdater(entity, scene) {\n  GeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new CylinderGeometryOptions(entity),\n    geometryPropertyName: \"cylinder\",\n    observedPropertyNames: [\"availability\", \"position\", \"orientation\", \"cylinder\"]\n  });\n\n  this._onEntityPropertyChanged(entity, \"cylinder\", entity.cylinder, undefined);\n}\n\nif (defined(Object.create)) {\n  CylinderGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n  CylinderGeometryUpdater.prototype.constructor = CylinderGeometryUpdater;\n}\n\nObject.defineProperties(CylinderGeometryUpdater.prototype, {\n  /**\n   * Gets the terrain offset property\n   * @type {TerrainOffsetProperty}\n   * @memberof CylinderGeometryUpdater.prototype\n   * @readonly\n   */\n  terrainOffsetProperty: {\n    get: function () {\n      return this._terrainOffsetProperty;\n    }\n  }\n});\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\n\nCylinderGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\"This instance does not represent a filled geometry.\");\n  } //>>includeEnd('debug');\n\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n  var show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time));\n\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n  var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n  var attributes = {\n    show: show,\n    distanceDisplayCondition: distanceDisplayConditionAttribute,\n    color: undefined,\n    offset: undefined\n  };\n\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    var currentColor;\n\n    if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n\n    attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n  }\n\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new CylinderGeometry(this._options),\n    modelMatrix: entity.computeModelMatrixForHeightReference(time, entity.cylinder.heightReference, this._options.length * 0.5, this._scene.mapProjection.ellipsoid),\n    attributes: attributes\n  });\n};\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\n\n\nCylinderGeometryUpdater.prototype.createOutlineGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\"This instance does not represent an outlined geometry.\");\n  } //>>includeEnd('debug');\n\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n  var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n  var attributes = {\n    show: new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n    color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition),\n    offset: undefined\n  };\n\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new CylinderOutlineGeometry(this._options),\n    modelMatrix: entity.computeModelMatrixForHeightReference(time, entity.cylinder.heightReference, this._options.length * 0.5, this._scene.mapProjection.ellipsoid),\n    attributes: attributes\n  });\n};\n\nCylinderGeometryUpdater.prototype._computeCenter = function (time, result) {\n  return Property.getValueOrUndefined(this._entity.position, time, result);\n};\n\nCylinderGeometryUpdater.prototype._isHidden = function (entity, cylinder) {\n  return !defined(entity.position) || !defined(cylinder.length) || !defined(cylinder.topRadius) || !defined(cylinder.bottomRadius) || GeometryUpdater.prototype._isHidden.call(this, entity, cylinder);\n};\n\nCylinderGeometryUpdater.prototype._isDynamic = function (entity, cylinder) {\n  return !entity.position.isConstant || //\n  !Property.isConstant(entity.orientation) || //\n  !cylinder.length.isConstant || //\n  !cylinder.topRadius.isConstant || //\n  !cylinder.bottomRadius.isConstant || //\n  !Property.isConstant(cylinder.slices) || //\n  !Property.isConstant(cylinder.outlineWidth) || //\n  !Property.isConstant(cylinder.numberOfVerticalLines);\n};\n\nCylinderGeometryUpdater.prototype._setStaticOptions = function (entity, cylinder) {\n  var heightReference = Property.getValueOrDefault(cylinder.heightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n  var options = this._options;\n  options.vertexFormat = this._materialProperty instanceof ColorMaterialProperty ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.length = cylinder.length.getValue(Iso8601.MINIMUM_VALUE);\n  options.topRadius = cylinder.topRadius.getValue(Iso8601.MINIMUM_VALUE);\n  options.bottomRadius = cylinder.bottomRadius.getValue(Iso8601.MINIMUM_VALUE);\n  options.slices = Property.getValueOrUndefined(cylinder.slices, Iso8601.MINIMUM_VALUE);\n  options.numberOfVerticalLines = Property.getValueOrUndefined(cylinder.numberOfVerticalLines, Iso8601.MINIMUM_VALUE);\n  options.offsetAttribute = heightReference !== HeightReference.NONE ? GeometryOffsetAttribute.ALL : undefined;\n};\n\nCylinderGeometryUpdater.prototype._onEntityPropertyChanged = heightReferenceOnEntityPropertyChanged;\nCylinderGeometryUpdater.DynamicGeometryUpdater = DynamicCylinderGeometryUpdater;\n/**\n * @private\n */\n\nfunction DynamicCylinderGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n  DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n}\n\nif (defined(Object.create)) {\n  DynamicCylinderGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n  DynamicCylinderGeometryUpdater.prototype.constructor = DynamicCylinderGeometryUpdater;\n}\n\nDynamicCylinderGeometryUpdater.prototype._isHidden = function (entity, cylinder, time) {\n  var options = this._options;\n  var position = Property.getValueOrUndefined(entity.position, time, positionScratch);\n  return !defined(position) || !defined(options.length) || !defined(options.topRadius) || //\n  !defined(options.bottomRadius) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, cylinder, time);\n};\n\nDynamicCylinderGeometryUpdater.prototype._setOptions = function (entity, cylinder, time) {\n  var heightReference = Property.getValueOrDefault(cylinder.heightReference, time, HeightReference.NONE);\n  var options = this._options;\n  options.length = Property.getValueOrUndefined(cylinder.length, time);\n  options.topRadius = Property.getValueOrUndefined(cylinder.topRadius, time);\n  options.bottomRadius = Property.getValueOrUndefined(cylinder.bottomRadius, time);\n  options.slices = Property.getValueOrUndefined(cylinder.slices, time);\n  options.numberOfVerticalLines = Property.getValueOrUndefined(cylinder.numberOfVerticalLines, time);\n  options.offsetAttribute = heightReference !== HeightReference.NONE ? GeometryOffsetAttribute.ALL : undefined;\n};\n\nexport default CylinderGeometryUpdater;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/DataSources/CylinderGeometryUpdater.js"],"names":["Cartesian3","Check","Color","ColorGeometryInstanceAttribute","CylinderGeometry","CylinderOutlineGeometry","defined","DeveloperError","DistanceDisplayConditionGeometryInstanceAttribute","GeometryInstance","GeometryOffsetAttribute","Iso8601","OffsetGeometryInstanceAttribute","ShowGeometryInstanceAttribute","HeightReference","MaterialAppearance","PerInstanceColorAppearance","ColorMaterialProperty","DynamicGeometryUpdater","GeometryUpdater","heightReferenceOnEntityPropertyChanged","Property","defaultOffset","ZERO","offsetScratch","positionScratch","scratchColor","CylinderGeometryOptions","entity","id","vertexFormat","undefined","length","topRadius","bottomRadius","slices","numberOfVerticalLines","offsetAttribute","CylinderGeometryUpdater","scene","call","geometryOptions","geometryPropertyName","observedPropertyNames","_onEntityPropertyChanged","cylinder","Object","create","prototype","constructor","defineProperties","terrainOffsetProperty","get","_terrainOffsetProperty","createFillGeometryInstance","time","_fillEnabled","_entity","isAvailable","show","isShowing","_showProperty","getValue","_fillProperty","distanceDisplayCondition","_distanceDisplayConditionProperty","distanceDisplayConditionAttribute","fromDistanceDisplayCondition","attributes","color","offset","_materialProperty","currentColor","isConstant","WHITE","fromColor","_options","fromCartesian3","getValueOrDefault","geometry","modelMatrix","computeModelMatrixForHeightReference","heightReference","_scene","mapProjection","ellipsoid","createOutlineGeometryInstance","_outlineEnabled","outlineColor","_outlineColorProperty","BLACK","_showOutlineProperty","_computeCenter","result","getValueOrUndefined","position","_isHidden","_isDynamic","orientation","outlineWidth","_setStaticOptions","MINIMUM_VALUE","NONE","options","VERTEX_FORMAT","MaterialSupport","TEXTURED","ALL","DynamicCylinderGeometryUpdater","geometryUpdater","primitives","groundPrimitives","_setOptions"],"mappings":"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","sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport CylinderGeometry from \"../Core/CylinderGeometry.js\";\nimport CylinderOutlineGeometry from \"../Core/CylinderOutlineGeometry.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport GeometryOffsetAttribute from \"../Core/GeometryOffsetAttribute.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport heightReferenceOnEntityPropertyChanged from \"./heightReferenceOnEntityPropertyChanged.js\";\nimport Property from \"./Property.js\";\n\nvar defaultOffset = Cartesian3.ZERO;\n\nvar offsetScratch = new Cartesian3();\nvar positionScratch = new Cartesian3();\nvar scratchColor = new Color();\n\nfunction CylinderGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.length = undefined;\n  this.topRadius = undefined;\n  this.bottomRadius = undefined;\n  this.slices = undefined;\n  this.numberOfVerticalLines = undefined;\n  this.offsetAttribute = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for cylinders.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias CylinderGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction CylinderGeometryUpdater(entity, scene) {\n  GeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new CylinderGeometryOptions(entity),\n    geometryPropertyName: \"cylinder\",\n    observedPropertyNames: [\n      \"availability\",\n      \"position\",\n      \"orientation\",\n      \"cylinder\",\n    ],\n  });\n\n  this._onEntityPropertyChanged(entity, \"cylinder\", entity.cylinder, undefined);\n}\n\nif (defined(Object.create)) {\n  CylinderGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n  CylinderGeometryUpdater.prototype.constructor = CylinderGeometryUpdater;\n}\n\nObject.defineProperties(CylinderGeometryUpdater.prototype, {\n  /**\n   * Gets the terrain offset property\n   * @type {TerrainOffsetProperty}\n   * @memberof CylinderGeometryUpdater.prototype\n   * @readonly\n   */\n  terrainOffsetProperty: {\n    get: function () {\n      return this._terrainOffsetProperty;\n    },\n  },\n});\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nCylinderGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent a filled geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n\n  var show = new ShowGeometryInstanceAttribute(\n    isAvailable &&\n      entity.isShowing &&\n      this._showProperty.getValue(time) &&\n      this._fillProperty.getValue(time)\n  );\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n  var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n    distanceDisplayCondition\n  );\n\n  var attributes = {\n    show: show,\n    distanceDisplayCondition: distanceDisplayConditionAttribute,\n    color: undefined,\n    offset: undefined,\n  };\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    var currentColor;\n    if (\n      defined(this._materialProperty.color) &&\n      (this._materialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n  }\n\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch\n      )\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new CylinderGeometry(this._options),\n    modelMatrix: entity.computeModelMatrixForHeightReference(\n      time,\n      entity.cylinder.heightReference,\n      this._options.length * 0.5,\n      this._scene.mapProjection.ellipsoid\n    ),\n    attributes: attributes,\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nCylinderGeometryUpdater.prototype.createOutlineGeometryInstance = function (\n  time\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent an outlined geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n  var outlineColor = Property.getValueOrDefault(\n    this._outlineColorProperty,\n    time,\n    Color.BLACK,\n    scratchColor\n  );\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n\n  var attributes = {\n    show: new ShowGeometryInstanceAttribute(\n      isAvailable &&\n        entity.isShowing &&\n        this._showProperty.getValue(time) &&\n        this._showOutlineProperty.getValue(time)\n    ),\n    color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n      distanceDisplayCondition\n    ),\n    offset: undefined,\n  };\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch\n      )\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new CylinderOutlineGeometry(this._options),\n    modelMatrix: entity.computeModelMatrixForHeightReference(\n      time,\n      entity.cylinder.heightReference,\n      this._options.length * 0.5,\n      this._scene.mapProjection.ellipsoid\n    ),\n    attributes: attributes,\n  });\n};\n\nCylinderGeometryUpdater.prototype._computeCenter = function (time, result) {\n  return Property.getValueOrUndefined(this._entity.position, time, result);\n};\n\nCylinderGeometryUpdater.prototype._isHidden = function (entity, cylinder) {\n  return (\n    !defined(entity.position) ||\n    !defined(cylinder.length) ||\n    !defined(cylinder.topRadius) ||\n    !defined(cylinder.bottomRadius) ||\n    GeometryUpdater.prototype._isHidden.call(this, entity, cylinder)\n  );\n};\n\nCylinderGeometryUpdater.prototype._isDynamic = function (entity, cylinder) {\n  return (\n    !entity.position.isConstant || //\n    !Property.isConstant(entity.orientation) || //\n    !cylinder.length.isConstant || //\n    !cylinder.topRadius.isConstant || //\n    !cylinder.bottomRadius.isConstant || //\n    !Property.isConstant(cylinder.slices) || //\n    !Property.isConstant(cylinder.outlineWidth) || //\n    !Property.isConstant(cylinder.numberOfVerticalLines)\n  );\n};\n\nCylinderGeometryUpdater.prototype._setStaticOptions = function (\n  entity,\n  cylinder\n) {\n  var heightReference = Property.getValueOrDefault(\n    cylinder.heightReference,\n    Iso8601.MINIMUM_VALUE,\n    HeightReference.NONE\n  );\n  var options = this._options;\n  options.vertexFormat =\n    this._materialProperty instanceof ColorMaterialProperty\n      ? PerInstanceColorAppearance.VERTEX_FORMAT\n      : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.length = cylinder.length.getValue(Iso8601.MINIMUM_VALUE);\n  options.topRadius = cylinder.topRadius.getValue(Iso8601.MINIMUM_VALUE);\n  options.bottomRadius = cylinder.bottomRadius.getValue(Iso8601.MINIMUM_VALUE);\n  options.slices = Property.getValueOrUndefined(\n    cylinder.slices,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.numberOfVerticalLines = Property.getValueOrUndefined(\n    cylinder.numberOfVerticalLines,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.offsetAttribute =\n    heightReference !== HeightReference.NONE\n      ? GeometryOffsetAttribute.ALL\n      : undefined;\n};\n\nCylinderGeometryUpdater.prototype._onEntityPropertyChanged = heightReferenceOnEntityPropertyChanged;\n\nCylinderGeometryUpdater.DynamicGeometryUpdater = DynamicCylinderGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicCylinderGeometryUpdater(\n  geometryUpdater,\n  primitives,\n  groundPrimitives\n) {\n  DynamicGeometryUpdater.call(\n    this,\n    geometryUpdater,\n    primitives,\n    groundPrimitives\n  );\n}\n\nif (defined(Object.create)) {\n  DynamicCylinderGeometryUpdater.prototype = Object.create(\n    DynamicGeometryUpdater.prototype\n  );\n  DynamicCylinderGeometryUpdater.prototype.constructor = DynamicCylinderGeometryUpdater;\n}\n\nDynamicCylinderGeometryUpdater.prototype._isHidden = function (\n  entity,\n  cylinder,\n  time\n) {\n  var options = this._options;\n  var position = Property.getValueOrUndefined(\n    entity.position,\n    time,\n    positionScratch\n  );\n  return (\n    !defined(position) ||\n    !defined(options.length) ||\n    !defined(options.topRadius) || //\n    !defined(options.bottomRadius) ||\n    DynamicGeometryUpdater.prototype._isHidden.call(\n      this,\n      entity,\n      cylinder,\n      time\n    )\n  );\n};\n\nDynamicCylinderGeometryUpdater.prototype._setOptions = function (\n  entity,\n  cylinder,\n  time\n) {\n  var heightReference = Property.getValueOrDefault(\n    cylinder.heightReference,\n    time,\n    HeightReference.NONE\n  );\n  var options = this._options;\n  options.length = Property.getValueOrUndefined(cylinder.length, time);\n  options.topRadius = Property.getValueOrUndefined(cylinder.topRadius, time);\n  options.bottomRadius = Property.getValueOrUndefined(\n    cylinder.bottomRadius,\n    time\n  );\n  options.slices = Property.getValueOrUndefined(cylinder.slices, time);\n  options.numberOfVerticalLines = Property.getValueOrUndefined(\n    cylinder.numberOfVerticalLines,\n    time\n  );\n  options.offsetAttribute =\n    heightReference !== HeightReference.NONE\n      ? GeometryOffsetAttribute.ALL\n      : undefined;\n};\nexport default CylinderGeometryUpdater;\n"]},"metadata":{},"sourceType":"module"}