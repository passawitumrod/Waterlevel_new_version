{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport Property from \"./Property.js\";\n/**\n * A {@link PositionProperty} whose value is an array whose items are the computed value\n * of other PositionProperty instances.\n *\n * @alias PositionPropertyArray\n * @constructor\n *\n * @param {Property[]} [value] An array of Property instances.\n * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n */\n\nfunction PositionPropertyArray(value, referenceFrame) {\n  this._value = undefined;\n  this._definitionChanged = new Event();\n  this._eventHelper = new EventHelper();\n  this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n  this.setValue(value);\n}\n\nObject.defineProperties(PositionPropertyArray.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  This property\n   * is considered constant if all property items in the array are constant.\n   * @memberof PositionPropertyArray.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function get() {\n      var value = this._value;\n\n      if (!defined(value)) {\n        return true;\n      }\n\n      var length = value.length;\n\n      for (var i = 0; i < length; i++) {\n        if (!Property.isConstant(value[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value or one of the properties in the array also changes.\n   * @memberof PositionPropertyArray.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function get() {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets the reference frame in which the position is defined.\n   * @memberof PositionPropertyArray.prototype\n   * @type {ReferenceFrame}\n   * @default ReferenceFrame.FIXED;\n   */\n  referenceFrame: {\n    get: function get() {\n      return this._referenceFrame;\n    }\n  }\n});\n/**\n * Gets the value of the property.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Cartesian3[]} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3[]} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\nPositionPropertyArray.prototype.getValue = function (time, result) {\n  return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n};\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3[]} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3[]} The modified result parameter or a new instance if the result parameter was not supplied.\n */\n\n\nPositionPropertyArray.prototype.getValueInReferenceFrame = function (time, referenceFrame, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n\n  if (!defined(referenceFrame)) {\n    throw new DeveloperError(\"referenceFrame is required.\");\n  } //>>includeEnd('debug');\n\n\n  var value = this._value;\n\n  if (!defined(value)) {\n    return undefined;\n  }\n\n  var length = value.length;\n\n  if (!defined(result)) {\n    result = new Array(length);\n  }\n\n  var i = 0;\n  var x = 0;\n\n  while (i < length) {\n    var property = value[i];\n    var itemValue = property.getValueInReferenceFrame(time, referenceFrame, result[i]);\n\n    if (defined(itemValue)) {\n      result[x] = itemValue;\n      x++;\n    }\n\n    i++;\n  }\n\n  result.length = x;\n  return result;\n};\n/**\n * Sets the value of the property.\n *\n * @param {Property[]} value An array of Property instances.\n */\n\n\nPositionPropertyArray.prototype.setValue = function (value) {\n  var eventHelper = this._eventHelper;\n  eventHelper.removeAll();\n\n  if (defined(value)) {\n    this._value = value.slice();\n    var length = value.length;\n\n    for (var i = 0; i < length; i++) {\n      var property = value[i];\n\n      if (defined(property)) {\n        eventHelper.add(property.definitionChanged, PositionPropertyArray.prototype._raiseDefinitionChanged, this);\n      }\n    }\n  } else {\n    this._value = undefined;\n  }\n\n  this._definitionChanged.raiseEvent(this);\n};\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\n\n\nPositionPropertyArray.prototype.equals = function (other) {\n  return this === other || //\n  other instanceof PositionPropertyArray && //\n  this._referenceFrame === other._referenceFrame && //\n  Property.arrayEquals(this._value, other._value);\n};\n\nPositionPropertyArray.prototype._raiseDefinitionChanged = function () {\n  this._definitionChanged.raiseEvent(this);\n};\n\nexport default PositionPropertyArray;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/PositionPropertyArray.js"],"names":["defaultValue","defined","DeveloperError","Event","EventHelper","ReferenceFrame","Property","PositionPropertyArray","value","referenceFrame","_value","undefined","_definitionChanged","_eventHelper","_referenceFrame","FIXED","setValue","Object","defineProperties","prototype","isConstant","get","length","i","definitionChanged","getValue","time","result","getValueInReferenceFrame","Array","x","property","itemValue","eventHelper","removeAll","slice","add","_raiseDefinitionChanged","raiseEvent","equals","other","arrayEquals"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,yBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA;;;;;;;;;;;AAUA,SAASC,qBAAT,CAA+BC,KAA/B,EAAsCC,cAAtC,EAAsD;AACpD,OAAKC,MAAL,GAAcC,SAAd;AACA,OAAKC,kBAAL,GAA0B,IAAIT,KAAJ,EAA1B;AACA,OAAKU,YAAL,GAAoB,IAAIT,WAAJ,EAApB;AACA,OAAKU,eAAL,GAAuBd,YAAY,CAACS,cAAD,EAAiBJ,cAAc,CAACU,KAAhC,CAAnC;AACA,OAAKC,QAAL,CAAcR,KAAd;AACD;;AAEDS,MAAM,CAACC,gBAAP,CAAwBX,qBAAqB,CAACY,SAA9C,EAAyD;AACvD;;;;;;;;AAQAC,EAAAA,UAAU,EAAE;AACVC,IAAAA,GAAG,EAAE,eAAY;AACf,UAAIb,KAAK,GAAG,KAAKE,MAAjB;;AACA,UAAI,CAACT,OAAO,CAACO,KAAD,CAAZ,EAAqB;AACnB,eAAO,IAAP;AACD;;AAED,UAAIc,MAAM,GAAGd,KAAK,CAACc,MAAnB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAiC;AAC/B,YAAI,CAACjB,QAAQ,CAACc,UAAT,CAAoBZ,KAAK,CAACe,CAAD,CAAzB,CAAL,EAAoC;AAClC,iBAAO,KAAP;AACD;AACF;;AACD,aAAO,IAAP;AACD;AAdS,GAT2C;;AAyBvD;;;;;;;;;AASAC,EAAAA,iBAAiB,EAAE;AACjBH,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKT,kBAAZ;AACD;AAHgB,GAlCoC;;AAuCvD;;;;;;AAMAH,EAAAA,cAAc,EAAE;AACdY,IAAAA,GAAG,EAAE,eAAY;AACf,aAAO,KAAKP,eAAZ;AACD;AAHa;AA7CuC,CAAzD;AAoDA;;;;;;;;AAOAP,qBAAqB,CAACY,SAAtB,CAAgCM,QAAhC,GAA2C,UAAUC,IAAV,EAAgBC,MAAhB,EAAwB;AACjE,SAAO,KAAKC,wBAAL,CAA8BF,IAA9B,EAAoCrB,cAAc,CAACU,KAAnD,EAA0DY,MAA1D,CAAP;AACD,CAFD;AAIA;;;;;;;;;;AAQApB,qBAAqB,CAACY,SAAtB,CAAgCS,wBAAhC,GAA2D,UACzDF,IADyD,EAEzDjB,cAFyD,EAGzDkB,MAHyD,EAIzD;AACA;AACA,MAAI,CAAC1B,OAAO,CAACyB,IAAD,CAAZ,EAAoB;AAClB,UAAM,IAAIxB,cAAJ,CAAmB,mBAAnB,CAAN;AACD;;AACD,MAAI,CAACD,OAAO,CAACQ,cAAD,CAAZ,EAA8B;AAC5B,UAAM,IAAIP,cAAJ,CAAmB,6BAAnB,CAAN;AACD,GAPD,CAQA;;;AAEA,MAAIM,KAAK,GAAG,KAAKE,MAAjB;;AACA,MAAI,CAACT,OAAO,CAACO,KAAD,CAAZ,EAAqB;AACnB,WAAOG,SAAP;AACD;;AAED,MAAIW,MAAM,GAAGd,KAAK,CAACc,MAAnB;;AACA,MAAI,CAACrB,OAAO,CAAC0B,MAAD,CAAZ,EAAsB;AACpBA,IAAAA,MAAM,GAAG,IAAIE,KAAJ,CAAUP,MAAV,CAAT;AACD;;AACD,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIO,CAAC,GAAG,CAAR;;AACA,SAAOP,CAAC,GAAGD,MAAX,EAAmB;AACjB,QAAIS,QAAQ,GAAGvB,KAAK,CAACe,CAAD,CAApB;AACA,QAAIS,SAAS,GAAGD,QAAQ,CAACH,wBAAT,CACdF,IADc,EAEdjB,cAFc,EAGdkB,MAAM,CAACJ,CAAD,CAHQ,CAAhB;;AAKA,QAAItB,OAAO,CAAC+B,SAAD,CAAX,EAAwB;AACtBL,MAAAA,MAAM,CAACG,CAAD,CAAN,GAAYE,SAAZ;AACAF,MAAAA,CAAC;AACF;;AACDP,IAAAA,CAAC;AACF;;AACDI,EAAAA,MAAM,CAACL,MAAP,GAAgBQ,CAAhB;AACA,SAAOH,MAAP;AACD,CAxCD;AA0CA;;;;;;;AAKApB,qBAAqB,CAACY,SAAtB,CAAgCH,QAAhC,GAA2C,UAAUR,KAAV,EAAiB;AAC1D,MAAIyB,WAAW,GAAG,KAAKpB,YAAvB;AACAoB,EAAAA,WAAW,CAACC,SAAZ;;AAEA,MAAIjC,OAAO,CAACO,KAAD,CAAX,EAAoB;AAClB,SAAKE,MAAL,GAAcF,KAAK,CAAC2B,KAAN,EAAd;AACA,QAAIb,MAAM,GAAGd,KAAK,CAACc,MAAnB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAiC;AAC/B,UAAIQ,QAAQ,GAAGvB,KAAK,CAACe,CAAD,CAApB;;AACA,UAAItB,OAAO,CAAC8B,QAAD,CAAX,EAAuB;AACrBE,QAAAA,WAAW,CAACG,GAAZ,CACEL,QAAQ,CAACP,iBADX,EAEEjB,qBAAqB,CAACY,SAAtB,CAAgCkB,uBAFlC,EAGE,IAHF;AAKD;AACF;AACF,GAbD,MAaO;AACL,SAAK3B,MAAL,GAAcC,SAAd;AACD;;AACD,OAAKC,kBAAL,CAAwB0B,UAAxB,CAAmC,IAAnC;AACD,CArBD;AAuBA;;;;;;;;;AAOA/B,qBAAqB,CAACY,SAAtB,CAAgCoB,MAAhC,GAAyC,UAAUC,KAAV,EAAiB;AACxD,SACE,SAASA,KAAT,IAAkB;AACjBA,EAAAA,KAAK,YAAYjC,qBAAjB,IAA0C;AAC3C,OAAKO,eAAL,KAAyB0B,KAAK,CAAC1B,eAD9B,IACiD;AAChDR,EAAAA,QAAQ,CAACmC,WAAT,CAAqB,KAAK/B,MAA1B,EAAkC8B,KAAK,CAAC9B,MAAxC,CAJJ;AAMD,CAPD;;AASAH,qBAAqB,CAACY,SAAtB,CAAgCkB,uBAAhC,GAA0D,YAAY;AACpE,OAAKzB,kBAAL,CAAwB0B,UAAxB,CAAmC,IAAnC;AACD,CAFD;;AAGA,eAAe/B,qBAAf","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link PositionProperty} whose value is an array whose items are the computed value\n * of other PositionProperty instances.\n *\n * @alias PositionPropertyArray\n * @constructor\n *\n * @param {Property[]} [value] An array of Property instances.\n * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n */\nfunction PositionPropertyArray(value, referenceFrame) {\n  this._value = undefined;\n  this._definitionChanged = new Event();\n  this._eventHelper = new EventHelper();\n  this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n  this.setValue(value);\n}\n\nObject.defineProperties(PositionPropertyArray.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  This property\n   * is considered constant if all property items in the array are constant.\n   * @memberof PositionPropertyArray.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      var value = this._value;\n      if (!defined(value)) {\n        return true;\n      }\n\n      var length = value.length;\n      for (var i = 0; i < length; i++) {\n        if (!Property.isConstant(value[i])) {\n          return false;\n        }\n      }\n      return true;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value or one of the properties in the array also changes.\n   * @memberof PositionPropertyArray.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets the reference frame in which the position is defined.\n   * @memberof PositionPropertyArray.prototype\n   * @type {ReferenceFrame}\n   * @default ReferenceFrame.FIXED;\n   */\n  referenceFrame: {\n    get: function () {\n      return this._referenceFrame;\n    },\n  },\n});\n\n/**\n * Gets the value of the property.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Cartesian3[]} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3[]} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPositionPropertyArray.prototype.getValue = function (time, result) {\n  return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n};\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3[]} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3[]} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPositionPropertyArray.prototype.getValueInReferenceFrame = function (\n  time,\n  referenceFrame,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  if (!defined(referenceFrame)) {\n    throw new DeveloperError(\"referenceFrame is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var value = this._value;\n  if (!defined(value)) {\n    return undefined;\n  }\n\n  var length = value.length;\n  if (!defined(result)) {\n    result = new Array(length);\n  }\n  var i = 0;\n  var x = 0;\n  while (i < length) {\n    var property = value[i];\n    var itemValue = property.getValueInReferenceFrame(\n      time,\n      referenceFrame,\n      result[i]\n    );\n    if (defined(itemValue)) {\n      result[x] = itemValue;\n      x++;\n    }\n    i++;\n  }\n  result.length = x;\n  return result;\n};\n\n/**\n * Sets the value of the property.\n *\n * @param {Property[]} value An array of Property instances.\n */\nPositionPropertyArray.prototype.setValue = function (value) {\n  var eventHelper = this._eventHelper;\n  eventHelper.removeAll();\n\n  if (defined(value)) {\n    this._value = value.slice();\n    var length = value.length;\n    for (var i = 0; i < length; i++) {\n      var property = value[i];\n      if (defined(property)) {\n        eventHelper.add(\n          property.definitionChanged,\n          PositionPropertyArray.prototype._raiseDefinitionChanged,\n          this\n        );\n      }\n    }\n  } else {\n    this._value = undefined;\n  }\n  this._definitionChanged.raiseEvent(this);\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPositionPropertyArray.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof PositionPropertyArray && //\n    this._referenceFrame === other._referenceFrame && //\n      Property.arrayEquals(this._value, other._value))\n  );\n};\n\nPositionPropertyArray.prototype._raiseDefinitionChanged = function () {\n  this._definitionChanged.raiseEvent(this);\n};\nexport default PositionPropertyArray;\n"]},"metadata":{},"sourceType":"module"}