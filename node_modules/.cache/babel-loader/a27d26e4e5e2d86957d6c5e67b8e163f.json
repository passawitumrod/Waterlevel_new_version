{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport EllipseOutlineGeometry from \"./EllipseOutlineGeometry.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\n/**\n * A description of the outline of a circle on the ellipsoid.\n *\n * @alias CircleOutlineGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.center The circle's center point in the fixed frame.\n * @param {Number} options.radius The radius in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the circle will be on.\n * @param {Number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\n * @param {Number} [options.granularity=0.02] The angular distance between points on the circle in radians.\n * @param {Number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\n * @param {Number} [options.numberOfVerticalLines=16] Number of lines to draw between the top and bottom of an extruded circle.\n *\n * @exception {DeveloperError} radius must be greater than zero.\n * @exception {DeveloperError} granularity must be greater than zero.\n *\n * @see CircleOutlineGeometry.createGeometry\n * @see Packable\n *\n * @example\n * // Create a circle.\n * var circle = new Cesium.CircleOutlineGeometry({\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n *   radius : 100000.0\n * });\n * var geometry = Cesium.CircleOutlineGeometry.createGeometry(circle);\n */\n\nfunction CircleOutlineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var radius = options.radius; //>>includeStart('debug', pragmas.debug);\n\n  Check.typeOf.number(\"radius\", radius); //>>includeEnd('debug');\n\n  var ellipseGeometryOptions = {\n    center: options.center,\n    semiMajorAxis: radius,\n    semiMinorAxis: radius,\n    ellipsoid: options.ellipsoid,\n    height: options.height,\n    extrudedHeight: options.extrudedHeight,\n    granularity: options.granularity,\n    numberOfVerticalLines: options.numberOfVerticalLines\n  };\n  this._ellipseGeometry = new EllipseOutlineGeometry(ellipseGeometryOptions);\n  this._workerName = \"createCircleOutlineGeometry\";\n}\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\n\n\nCircleOutlineGeometry.packedLength = EllipseOutlineGeometry.packedLength;\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CircleOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\n\nCircleOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value); //>>includeEnd('debug');\n\n  return EllipseOutlineGeometry.pack(value._ellipseGeometry, array, startingIndex);\n};\n\nvar scratchEllipseGeometry = new EllipseOutlineGeometry({\n  center: new Cartesian3(),\n  semiMajorAxis: 1.0,\n  semiMinorAxis: 1.0\n});\nvar scratchOptions = {\n  center: new Cartesian3(),\n  radius: undefined,\n  ellipsoid: Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\n  height: undefined,\n  extrudedHeight: undefined,\n  granularity: undefined,\n  numberOfVerticalLines: undefined,\n  semiMajorAxis: undefined,\n  semiMinorAxis: undefined\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CircleOutlineGeometry} [result] The object into which to store the result.\n * @returns {CircleOutlineGeometry} The modified result parameter or a new CircleOutlineGeometry instance if one was not provided.\n */\n\nCircleOutlineGeometry.unpack = function (array, startingIndex, result) {\n  var ellipseGeometry = EllipseOutlineGeometry.unpack(array, startingIndex, scratchEllipseGeometry);\n  scratchOptions.center = Cartesian3.clone(ellipseGeometry._center, scratchOptions.center);\n  scratchOptions.ellipsoid = Ellipsoid.clone(ellipseGeometry._ellipsoid, scratchOptions.ellipsoid);\n  scratchOptions.height = ellipseGeometry._height;\n  scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\n  scratchOptions.granularity = ellipseGeometry._granularity;\n  scratchOptions.numberOfVerticalLines = ellipseGeometry._numberOfVerticalLines;\n\n  if (!defined(result)) {\n    scratchOptions.radius = ellipseGeometry._semiMajorAxis;\n    return new CircleOutlineGeometry(scratchOptions);\n  }\n\n  scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\n  scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\n  result._ellipseGeometry = new EllipseOutlineGeometry(scratchOptions);\n  return result;\n};\n/**\n * Computes the geometric representation of an outline of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\n *\n * @param {CircleOutlineGeometry} circleGeometry A description of the circle.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\n\n\nCircleOutlineGeometry.createGeometry = function (circleGeometry) {\n  return EllipseOutlineGeometry.createGeometry(circleGeometry._ellipseGeometry);\n};\n\nexport default CircleOutlineGeometry;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/CircleOutlineGeometry.js"],"names":["Cartesian3","Check","defaultValue","defined","EllipseOutlineGeometry","Ellipsoid","CircleOutlineGeometry","options","EMPTY_OBJECT","radius","typeOf","number","ellipseGeometryOptions","center","semiMajorAxis","semiMinorAxis","ellipsoid","height","extrudedHeight","granularity","numberOfVerticalLines","_ellipseGeometry","_workerName","packedLength","pack","value","array","startingIndex","object","scratchEllipseGeometry","scratchOptions","undefined","clone","UNIT_SPHERE","unpack","result","ellipseGeometry","_center","_ellipsoid","_height","_extrudedHeight","_granularity","_numberOfVerticalLines","_semiMajorAxis","_semiMinorAxis","createGeometry","circleGeometry"],"mappings":"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","sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport EllipseOutlineGeometry from \"./EllipseOutlineGeometry.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\n\n/**\n * A description of the outline of a circle on the ellipsoid.\n *\n * @alias CircleOutlineGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.center The circle's center point in the fixed frame.\n * @param {Number} options.radius The radius in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the circle will be on.\n * @param {Number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\n * @param {Number} [options.granularity=0.02] The angular distance between points on the circle in radians.\n * @param {Number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\n * @param {Number} [options.numberOfVerticalLines=16] Number of lines to draw between the top and bottom of an extruded circle.\n *\n * @exception {DeveloperError} radius must be greater than zero.\n * @exception {DeveloperError} granularity must be greater than zero.\n *\n * @see CircleOutlineGeometry.createGeometry\n * @see Packable\n *\n * @example\n * // Create a circle.\n * var circle = new Cesium.CircleOutlineGeometry({\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n *   radius : 100000.0\n * });\n * var geometry = Cesium.CircleOutlineGeometry.createGeometry(circle);\n */\nfunction CircleOutlineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var radius = options.radius;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"radius\", radius);\n  //>>includeEnd('debug');\n\n  var ellipseGeometryOptions = {\n    center: options.center,\n    semiMajorAxis: radius,\n    semiMinorAxis: radius,\n    ellipsoid: options.ellipsoid,\n    height: options.height,\n    extrudedHeight: options.extrudedHeight,\n    granularity: options.granularity,\n    numberOfVerticalLines: options.numberOfVerticalLines,\n  };\n  this._ellipseGeometry = new EllipseOutlineGeometry(ellipseGeometryOptions);\n  this._workerName = \"createCircleOutlineGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nCircleOutlineGeometry.packedLength = EllipseOutlineGeometry.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CircleOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCircleOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  //>>includeEnd('debug');\n  return EllipseOutlineGeometry.pack(\n    value._ellipseGeometry,\n    array,\n    startingIndex\n  );\n};\n\nvar scratchEllipseGeometry = new EllipseOutlineGeometry({\n  center: new Cartesian3(),\n  semiMajorAxis: 1.0,\n  semiMinorAxis: 1.0,\n});\nvar scratchOptions = {\n  center: new Cartesian3(),\n  radius: undefined,\n  ellipsoid: Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\n  height: undefined,\n  extrudedHeight: undefined,\n  granularity: undefined,\n  numberOfVerticalLines: undefined,\n  semiMajorAxis: undefined,\n  semiMinorAxis: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CircleOutlineGeometry} [result] The object into which to store the result.\n * @returns {CircleOutlineGeometry} The modified result parameter or a new CircleOutlineGeometry instance if one was not provided.\n */\nCircleOutlineGeometry.unpack = function (array, startingIndex, result) {\n  var ellipseGeometry = EllipseOutlineGeometry.unpack(\n    array,\n    startingIndex,\n    scratchEllipseGeometry\n  );\n  scratchOptions.center = Cartesian3.clone(\n    ellipseGeometry._center,\n    scratchOptions.center\n  );\n  scratchOptions.ellipsoid = Ellipsoid.clone(\n    ellipseGeometry._ellipsoid,\n    scratchOptions.ellipsoid\n  );\n  scratchOptions.height = ellipseGeometry._height;\n  scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\n  scratchOptions.granularity = ellipseGeometry._granularity;\n  scratchOptions.numberOfVerticalLines = ellipseGeometry._numberOfVerticalLines;\n\n  if (!defined(result)) {\n    scratchOptions.radius = ellipseGeometry._semiMajorAxis;\n    return new CircleOutlineGeometry(scratchOptions);\n  }\n\n  scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\n  scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\n  result._ellipseGeometry = new EllipseOutlineGeometry(scratchOptions);\n  return result;\n};\n\n/**\n * Computes the geometric representation of an outline of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\n *\n * @param {CircleOutlineGeometry} circleGeometry A description of the circle.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCircleOutlineGeometry.createGeometry = function (circleGeometry) {\n  return EllipseOutlineGeometry.createGeometry(circleGeometry._ellipseGeometry);\n};\nexport default CircleOutlineGeometry;\n"]},"metadata":{},"sourceType":"module"}