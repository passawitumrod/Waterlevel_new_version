{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport getTimestamp from \"../Core/getTimestamp.js\";\nimport getElement from \"../Widgets/getElement.js\";\n/**\n * @private\n */\n\nfunction PerformanceDisplay(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var container = getElement(options.container); //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(container)) {\n    throw new DeveloperError(\"container is required\");\n  } //>>includeEnd('debug');\n\n\n  this._container = container;\n  var display = document.createElement(\"div\");\n  display.className = \"cesium-performanceDisplay\";\n  var fpsElement = document.createElement(\"div\");\n  fpsElement.className = \"cesium-performanceDisplay-fps\";\n  this._fpsText = document.createTextNode(\"\");\n  fpsElement.appendChild(this._fpsText);\n  var msElement = document.createElement(\"div\");\n  msElement.className = \"cesium-performanceDisplay-ms\";\n  this._msText = document.createTextNode(\"\");\n  msElement.appendChild(this._msText);\n  display.appendChild(msElement);\n  display.appendChild(fpsElement);\n\n  this._container.appendChild(display);\n\n  this._lastFpsSampleTime = getTimestamp();\n  this._lastMsSampleTime = getTimestamp();\n  this._fpsFrameCount = 0;\n  this._msFrameCount = 0;\n  this._throttled = false;\n  var throttledElement = document.createElement(\"div\");\n  throttledElement.className = \"cesium-performanceDisplay-throttled\";\n  this._throttledText = document.createTextNode(\"\");\n  throttledElement.appendChild(this._throttledText);\n  display.appendChild(throttledElement);\n}\n\nObject.defineProperties(PerformanceDisplay.prototype, {\n  /**\n   * The display should indicate the FPS is being throttled.\n   * @memberof PerformanceDisplay.prototype\n   *\n   * @type {Boolean}\n   */\n  throttled: {\n    get: function get() {\n      return this._throttled;\n    },\n    set: function set(value) {\n      if (this._throttled === value) {\n        return;\n      }\n\n      if (value) {\n        this._throttledText.nodeValue = \"(throttled)\";\n      } else {\n        this._throttledText.nodeValue = \"\";\n      }\n\n      this._throttled = value;\n    }\n  }\n});\n/**\n * Update the display.  This function should only be called once per frame, because\n * each call records a frame in the internal buffer and redraws the display.\n *\n * @param {Boolean} [renderedThisFrame=true] If provided, the FPS count will only update and display if true.\n */\n\nPerformanceDisplay.prototype.update = function (renderedThisFrame) {\n  var time = getTimestamp();\n  var updateDisplay = defaultValue(renderedThisFrame, true);\n  this._fpsFrameCount++;\n  var fpsElapsedTime = time - this._lastFpsSampleTime;\n\n  if (fpsElapsedTime > 1000) {\n    var fps = \"N/A\";\n\n    if (updateDisplay) {\n      fps = this._fpsFrameCount * 1000 / fpsElapsedTime | 0;\n    }\n\n    this._fpsText.nodeValue = fps + \" FPS\";\n    this._lastFpsSampleTime = time;\n    this._fpsFrameCount = 0;\n  }\n\n  this._msFrameCount++;\n  var msElapsedTime = time - this._lastMsSampleTime;\n\n  if (msElapsedTime > 200) {\n    var ms = \"N/A\";\n\n    if (updateDisplay) {\n      ms = (msElapsedTime / this._msFrameCount).toFixed(2);\n    }\n\n    this._msText.nodeValue = ms + \" MS\";\n    this._lastMsSampleTime = time;\n    this._msFrameCount = 0;\n  }\n};\n/**\n * Destroys the WebGL resources held by this object.\n */\n\n\nPerformanceDisplay.prototype.destroy = function () {\n  return destroyObject(this);\n};\n\nexport default PerformanceDisplay;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/PerformanceDisplay.js"],"names":["defaultValue","defined","destroyObject","DeveloperError","getTimestamp","getElement","PerformanceDisplay","options","EMPTY_OBJECT","container","_container","display","document","createElement","className","fpsElement","_fpsText","createTextNode","appendChild","msElement","_msText","_lastFpsSampleTime","_lastMsSampleTime","_fpsFrameCount","_msFrameCount","_throttled","throttledElement","_throttledText","Object","defineProperties","prototype","throttled","get","set","value","nodeValue","update","renderedThisFrame","time","updateDisplay","fpsElapsedTime","fps","msElapsedTime","ms","toFixed","destroy"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport getTimestamp from \"../Core/getTimestamp.js\";\nimport getElement from \"../Widgets/getElement.js\";\n\n/**\n * @private\n */\nfunction PerformanceDisplay(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var container = getElement(options.container);\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(container)) {\n    throw new DeveloperError(\"container is required\");\n  }\n  //>>includeEnd('debug');\n\n  this._container = container;\n\n  var display = document.createElement(\"div\");\n  display.className = \"cesium-performanceDisplay\";\n  var fpsElement = document.createElement(\"div\");\n  fpsElement.className = \"cesium-performanceDisplay-fps\";\n  this._fpsText = document.createTextNode(\"\");\n  fpsElement.appendChild(this._fpsText);\n  var msElement = document.createElement(\"div\");\n  msElement.className = \"cesium-performanceDisplay-ms\";\n  this._msText = document.createTextNode(\"\");\n  msElement.appendChild(this._msText);\n  display.appendChild(msElement);\n  display.appendChild(fpsElement);\n  this._container.appendChild(display);\n\n  this._lastFpsSampleTime = getTimestamp();\n  this._lastMsSampleTime = getTimestamp();\n  this._fpsFrameCount = 0;\n  this._msFrameCount = 0;\n\n  this._throttled = false;\n  var throttledElement = document.createElement(\"div\");\n  throttledElement.className = \"cesium-performanceDisplay-throttled\";\n  this._throttledText = document.createTextNode(\"\");\n  throttledElement.appendChild(this._throttledText);\n  display.appendChild(throttledElement);\n}\n\nObject.defineProperties(PerformanceDisplay.prototype, {\n  /**\n   * The display should indicate the FPS is being throttled.\n   * @memberof PerformanceDisplay.prototype\n   *\n   * @type {Boolean}\n   */\n  throttled: {\n    get: function () {\n      return this._throttled;\n    },\n    set: function (value) {\n      if (this._throttled === value) {\n        return;\n      }\n\n      if (value) {\n        this._throttledText.nodeValue = \"(throttled)\";\n      } else {\n        this._throttledText.nodeValue = \"\";\n      }\n\n      this._throttled = value;\n    },\n  },\n});\n\n/**\n * Update the display.  This function should only be called once per frame, because\n * each call records a frame in the internal buffer and redraws the display.\n *\n * @param {Boolean} [renderedThisFrame=true] If provided, the FPS count will only update and display if true.\n */\nPerformanceDisplay.prototype.update = function (renderedThisFrame) {\n  var time = getTimestamp();\n  var updateDisplay = defaultValue(renderedThisFrame, true);\n\n  this._fpsFrameCount++;\n  var fpsElapsedTime = time - this._lastFpsSampleTime;\n  if (fpsElapsedTime > 1000) {\n    var fps = \"N/A\";\n    if (updateDisplay) {\n      fps = ((this._fpsFrameCount * 1000) / fpsElapsedTime) | 0;\n    }\n\n    this._fpsText.nodeValue = fps + \" FPS\";\n    this._lastFpsSampleTime = time;\n    this._fpsFrameCount = 0;\n  }\n\n  this._msFrameCount++;\n  var msElapsedTime = time - this._lastMsSampleTime;\n  if (msElapsedTime > 200) {\n    var ms = \"N/A\";\n    if (updateDisplay) {\n      ms = (msElapsedTime / this._msFrameCount).toFixed(2);\n    }\n\n    this._msText.nodeValue = ms + \" MS\";\n    this._lastMsSampleTime = time;\n    this._msFrameCount = 0;\n  }\n};\n\n/**\n * Destroys the WebGL resources held by this object.\n */\nPerformanceDisplay.prototype.destroy = function () {\n  return destroyObject(this);\n};\nexport default PerformanceDisplay;\n"]},"metadata":{},"sourceType":"module"}