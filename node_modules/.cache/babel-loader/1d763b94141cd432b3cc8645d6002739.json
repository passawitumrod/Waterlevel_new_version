{"ast":null,"code":"import arraySlice from \"../Core/arraySlice.js\";\nimport Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport Sampler from \"../Renderer/Sampler.js\";\nimport Texture from \"../Renderer/Texture.js\";\nimport TextureMagnificationFilter from \"../Renderer/TextureMagnificationFilter.js\";\nimport TextureMinificationFilter from \"../Renderer/TextureMinificationFilter.js\";\nimport TextureWrap from \"../Renderer/TextureWrap.js\";\nimport PassThrough from \"../Shaders/PostProcessStages/PassThrough.js\";\nimport PostProcessStageLibrary from \"./PostProcessStageLibrary.js\";\nimport PostProcessStageTextureCache from \"./PostProcessStageTextureCache.js\";\nimport Tonemapper from \"./Tonemapper.js\";\nvar stackScratch = [];\n/**\n * A collection of {@link PostProcessStage}s and/or {@link PostProcessStageComposite}s.\n * <p>\n * The input texture for each post-process stage is the texture rendered to by the scene or the texture rendered\n * to by the previous stage in the collection.\n * </p>\n * <p>\n * If the ambient occlusion or bloom stages are enabled, they will execute before all other stages.\n * </p>\n * <p>\n * If the FXAA stage is enabled, it will execute after all other stages.\n * </p>\n *\n * @alias PostProcessStageCollection\n * @constructor\n */\n\nfunction PostProcessStageCollection() {\n  var fxaa = PostProcessStageLibrary.createFXAAStage();\n  var ao = PostProcessStageLibrary.createAmbientOcclusionStage();\n  var bloom = PostProcessStageLibrary.createBloomStage(); // Auto-exposure is currently disabled because most shaders output a value in [0.0, 1.0].\n  // Some shaders, such as the atmosphere and ground atmosphere, output values slightly over 1.0.\n\n  this._autoExposureEnabled = false;\n  this._autoExposure = PostProcessStageLibrary.createAutoExposureStage();\n  this._tonemapping = undefined;\n  this._tonemapper = undefined; // set tonemapper and tonemapping\n\n  this.tonemapper = Tonemapper.ACES;\n  var tonemapping = this._tonemapping;\n  fxaa.enabled = false;\n  ao.enabled = false;\n  bloom.enabled = false;\n  tonemapping.enabled = false; // will be enabled if necessary in update\n\n  var textureCache = new PostProcessStageTextureCache(this);\n  var stageNames = {};\n  var stack = stackScratch;\n  stack.push(fxaa, ao, bloom, tonemapping);\n\n  while (stack.length > 0) {\n    var stage = stack.pop();\n    stageNames[stage.name] = stage;\n    stage._textureCache = textureCache;\n    var length = stage.length;\n\n    if (defined(length)) {\n      for (var i = 0; i < length; ++i) {\n        stack.push(stage.get(i));\n      }\n    }\n  }\n\n  this._stages = [];\n  this._activeStages = [];\n  this._previousActiveStages = [];\n  this._randomTexture = undefined; // For AO\n\n  var that = this;\n\n  ao.uniforms.randomTexture = function () {\n    return that._randomTexture;\n  };\n\n  this._ao = ao;\n  this._bloom = bloom;\n  this._fxaa = fxaa;\n  this._lastLength = undefined;\n  this._aoEnabled = undefined;\n  this._bloomEnabled = undefined;\n  this._tonemappingEnabled = undefined;\n  this._fxaaEnabled = undefined;\n  this._stagesRemoved = false;\n  this._textureCacheDirty = false;\n  this._stageNames = stageNames;\n  this._textureCache = textureCache;\n}\n\nObject.defineProperties(PostProcessStageCollection.prototype, {\n  /**\n   * Determines if all of the post-process stages in the collection are ready to be executed.\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      var readyAndEnabled = false;\n      var stages = this._stages;\n      var length = stages.length;\n\n      for (var i = length - 1; i >= 0; --i) {\n        var stage = stages[i];\n        readyAndEnabled = readyAndEnabled || stage.ready && stage.enabled;\n      }\n\n      var fxaa = this._fxaa;\n      var ao = this._ao;\n      var bloom = this._bloom;\n      var tonemapping = this._tonemapping;\n      readyAndEnabled = readyAndEnabled || fxaa.ready && fxaa.enabled;\n      readyAndEnabled = readyAndEnabled || ao.ready && ao.enabled;\n      readyAndEnabled = readyAndEnabled || bloom.ready && bloom.enabled;\n      readyAndEnabled = readyAndEnabled || tonemapping.ready && tonemapping.enabled;\n      return readyAndEnabled;\n    }\n  },\n\n  /**\n   * A post-process stage for Fast Approximate Anti-aliasing.\n   * <p>\n   * When enabled, this stage will execute after all others.\n   * </p>\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {PostProcessStage}\n   * @readonly\n   */\n  fxaa: {\n    get: function () {\n      return this._fxaa;\n    }\n  },\n\n  /**\n   * A post-process stage that applies Horizon-based Ambient Occlusion (HBAO) to the input texture.\n   * <p>\n   * Ambient occlusion simulates shadows from ambient light. These shadows would always be present when the\n   * surface receives light and regardless of the light's position.\n   * </p>\n   * <p>\n   * The uniforms have the following properties: <code>intensity</code>, <code>bias</code>, <code>lengthCap</code>,\n   * <code>stepSize</code>, <code>frustumLength</code>, <code>ambientOcclusionOnly</code>,\n   * <code>delta</code>, <code>sigma</code>, and <code>blurStepSize</code>.\n   * </p>\n   * <ul>\n   * <li><code>intensity</code> is a scalar value used to lighten or darken the shadows exponentially. Higher values make the shadows darker. The default value is <code>3.0</code>.</li>\n   *\n   * <li><code>bias</code> is a scalar value representing an angle in radians. If the dot product between the normal of the sample and the vector to the camera is less than this value,\n   * sampling stops in the current direction. This is used to remove shadows from near planar edges. The default value is <code>0.1</code>.</li>\n   *\n   * <li><code>lengthCap</code> is a scalar value representing a length in meters. If the distance from the current sample to first sample is greater than this value,\n   * sampling stops in the current direction. The default value is <code>0.26</code>.</li>\n   *\n   * <li><code>stepSize</code> is a scalar value indicating the distance to the next texel sample in the current direction. The default value is <code>1.95</code>.</li>\n   *\n   * <li><code>frustumLength</code> is a scalar value in meters. If the current fragment has a distance from the camera greater than this value, ambient occlusion is not computed for the fragment.\n   * The default value is <code>1000.0</code>.</li>\n   *\n   * <li><code>ambientOcclusionOnly</code> is a boolean value. When <code>true</code>, only the shadows generated are written to the output. When <code>false</code>, the input texture is modulated\n   * with the ambient occlusion. This is a useful debug option for seeing the effects of changing the uniform values. The default value is <code>false</code>.</li>\n   * </ul>\n   * <p>\n   * <code>delta</code>, <code>sigma</code>, and <code>blurStepSize</code> are the same properties as {@link PostProcessStageLibrary#createBlurStage}.\n   * The blur is applied to the shadows generated from the image to make them smoother.\n   * </p>\n   * <p>\n   * When enabled, this stage will execute before all others.\n   * </p>\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {PostProcessStageComposite}\n   * @readonly\n   */\n  ambientOcclusion: {\n    get: function () {\n      return this._ao;\n    }\n  },\n\n  /**\n   * A post-process stage for a bloom effect.\n   * <p>\n   * A bloom effect adds glow effect, makes bright areas brighter, and dark areas darker.\n   * </p>\n   * <p>\n   * This stage has the following uniforms: <code>contrast</code>, <code>brightness</code>, <code>glowOnly</code>,\n   * <code>delta</code>, <code>sigma</code>, and <code>stepSize</code>.\n   * </p>\n   * <ul>\n   * <li><code>contrast</code> is a scalar value in the range [-255.0, 255.0] and affects the contract of the effect. The default value is <code>128.0</code>.</li>\n   *\n   * <li><code>brightness</code> is a scalar value. The input texture RGB value is converted to hue, saturation, and brightness (HSB) then this value is\n   * added to the brightness. The default value is <code>-0.3</code>.</li>\n   *\n   * <li><code>glowOnly</code> is a boolean value. When <code>true</code>, only the glow effect will be shown. When <code>false</code>, the glow will be added to the input texture.\n   * The default value is <code>false</code>. This is a debug option for viewing the effects when changing the other uniform values.</li>\n   * </ul>\n   * <p>\n   * <code>delta</code>, <code>sigma</code>, and <code>stepSize</code> are the same properties as {@link PostProcessStageLibrary#createBlurStage}.\n   * The blur is applied to the shadows generated from the image to make them smoother.\n   * </p>\n   * <p>\n   * When enabled, this stage will execute before all others.\n   * </p>\n   *\n   * @memberOf PostProcessStageCollection.prototype\n   * @type {PostProcessStageComposite}\n   * @readonly\n   */\n  bloom: {\n    get: function () {\n      return this._bloom;\n    }\n  },\n\n  /**\n   * The number of post-process stages in this collection.\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {Number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      removeStages(this);\n      return this._stages.length;\n    }\n  },\n\n  /**\n   * A reference to the last texture written to when executing the post-process stages in this collection.\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {Texture}\n   * @readonly\n   * @private\n   */\n  outputTexture: {\n    get: function () {\n      var fxaa = this._fxaa;\n\n      if (fxaa.enabled && fxaa.ready) {\n        return this.getOutputTexture(fxaa.name);\n      }\n\n      var stages = this._stages;\n      var length = stages.length;\n\n      for (var i = length - 1; i >= 0; --i) {\n        var stage = stages[i];\n\n        if (defined(stage) && stage.ready && stage.enabled) {\n          return this.getOutputTexture(stage.name);\n        }\n      }\n\n      var tonemapping = this._tonemapping;\n\n      if (tonemapping.enabled && tonemapping.ready) {\n        return this.getOutputTexture(tonemapping.name);\n      }\n\n      var bloom = this._bloom;\n\n      if (bloom.enabled && bloom.ready) {\n        return this.getOutputTexture(bloom.name);\n      }\n\n      var ao = this._ao;\n\n      if (ao.enabled && ao.ready) {\n        return this.getOutputTexture(ao.name);\n      }\n\n      return undefined;\n    }\n  },\n\n  /**\n   * Whether the collection has a stage that has selected features.\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {Boolean}\n   * @readonly\n   * @private\n   */\n  hasSelected: {\n    get: function () {\n      var stages = arraySlice(this._stages);\n\n      while (stages.length > 0) {\n        var stage = stages.pop();\n\n        if (!defined(stage)) {\n          continue;\n        }\n\n        if (defined(stage.selected)) {\n          return true;\n        }\n\n        var length = stage.length;\n\n        if (defined(length)) {\n          for (var i = 0; i < length; ++i) {\n            stages.push(stage.get(i));\n          }\n        }\n      }\n\n      return false;\n    }\n  },\n\n  /**\n   * Gets and sets the tonemapping algorithm used when rendering with high dynamic range.\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {Tonemapper}\n   * @private\n   */\n  tonemapper: {\n    get: function () {\n      return this._tonemapper;\n    },\n    set: function (value) {\n      if (this._tonemapper === value) {\n        return;\n      } //>>includeStart('debug', pragmas.debug);\n\n\n      if (!Tonemapper.validate(value)) {\n        throw new DeveloperError(\"tonemapper was set to an invalid value.\");\n      } //>>includeEnd('debug');\n\n\n      if (defined(this._tonemapping)) {\n        delete this._stageNames[this._tonemapping.name];\n\n        this._tonemapping.destroy();\n      }\n\n      var useAutoExposure = this._autoExposureEnabled;\n      var tonemapper;\n\n      switch (value) {\n        case Tonemapper.REINHARD:\n          tonemapper = PostProcessStageLibrary.createReinhardTonemappingStage(useAutoExposure);\n          break;\n\n        case Tonemapper.MODIFIED_REINHARD:\n          tonemapper = PostProcessStageLibrary.createModifiedReinhardTonemappingStage(useAutoExposure);\n          break;\n\n        case Tonemapper.FILMIC:\n          tonemapper = PostProcessStageLibrary.createFilmicTonemappingStage(useAutoExposure);\n          break;\n\n        default:\n          tonemapper = PostProcessStageLibrary.createAcesTonemappingStage(useAutoExposure);\n          break;\n      }\n\n      if (useAutoExposure) {\n        var autoexposure = this._autoExposure;\n\n        tonemapper.uniforms.autoExposure = function () {\n          return autoexposure.outputTexture;\n        };\n      }\n\n      this._tonemapper = value;\n      this._tonemapping = tonemapper;\n\n      if (defined(this._stageNames)) {\n        this._stageNames[tonemapper.name] = tonemapper;\n        tonemapper._textureCache = this._textureCache;\n      }\n\n      this._textureCacheDirty = true;\n    }\n  }\n});\n\nfunction removeStages(collection) {\n  if (!collection._stagesRemoved) {\n    return;\n  }\n\n  collection._stagesRemoved = false;\n  var newStages = [];\n  var stages = collection._stages;\n  var length = stages.length;\n\n  for (var i = 0, j = 0; i < length; ++i) {\n    var stage = stages[i];\n\n    if (stage) {\n      stage._index = j++;\n      newStages.push(stage);\n    }\n  }\n\n  collection._stages = newStages;\n}\n/**\n * Adds the post-process stage to the collection.\n *\n * @param {PostProcessStage|PostProcessStageComposite} stage The post-process stage to add to the collection.\n * @return {PostProcessStage|PostProcessStageComposite} The post-process stage that was added to the collection.\n *\n * @exception {DeveloperError} The post-process stage has already been added to the collection or does not have a unique name.\n */\n\n\nPostProcessStageCollection.prototype.add = function (stage) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"stage\", stage); //>>includeEnd('debug');\n\n  var stageNames = this._stageNames;\n  var stack = stackScratch;\n  stack.push(stage);\n\n  while (stack.length > 0) {\n    var currentStage = stack.pop(); //>>includeStart('debug', pragmas.debug);\n\n    if (defined(stageNames[currentStage.name])) {\n      throw new DeveloperError(currentStage.name + \" has already been added to the collection or does not have a unique name.\");\n    } //>>includeEnd('debug');\n\n\n    stageNames[currentStage.name] = currentStage;\n    currentStage._textureCache = this._textureCache;\n    var length = currentStage.length;\n\n    if (defined(length)) {\n      for (var i = 0; i < length; ++i) {\n        stack.push(currentStage.get(i));\n      }\n    }\n  }\n\n  var stages = this._stages;\n  stage._index = stages.length;\n  stages.push(stage);\n  this._textureCacheDirty = true;\n  return stage;\n};\n/**\n * Removes a post-process stage from the collection and destroys it.\n *\n * @param {PostProcessStage|PostProcessStageComposite} stage The post-process stage to remove from the collection.\n * @return {Boolean} Whether the post-process stage was removed.\n */\n\n\nPostProcessStageCollection.prototype.remove = function (stage) {\n  if (!this.contains(stage)) {\n    return false;\n  }\n\n  var stageNames = this._stageNames;\n  var stack = stackScratch;\n  stack.push(stage);\n\n  while (stack.length > 0) {\n    var currentStage = stack.pop();\n    delete stageNames[currentStage.name];\n    var length = currentStage.length;\n\n    if (defined(length)) {\n      for (var i = 0; i < length; ++i) {\n        stack.push(currentStage.get(i));\n      }\n    }\n  }\n\n  this._stages[stage._index] = undefined;\n  this._stagesRemoved = true;\n  this._textureCacheDirty = true;\n  stage._index = undefined;\n  stage._textureCache = undefined;\n  stage.destroy();\n  return true;\n};\n/**\n * Returns whether the collection contains a post-process stage.\n *\n * @param {PostProcessStage|PostProcessStageComposite} stage The post-process stage.\n * @return {Boolean} Whether the collection contains the post-process stage.\n */\n\n\nPostProcessStageCollection.prototype.contains = function (stage) {\n  return defined(stage) && defined(stage._index) && stage._textureCache === this._textureCache;\n};\n/**\n * Gets the post-process stage at <code>index</code>.\n *\n * @param {Number} index The index of the post-process stage.\n * @return {PostProcessStage|PostProcessStageComposite} The post-process stage at index.\n */\n\n\nPostProcessStageCollection.prototype.get = function (index) {\n  removeStages(this);\n  var stages = this._stages; //>>includeStart('debug', pragmas.debug);\n\n  var length = stages.length;\n  Check.typeOf.number.greaterThanOrEquals(\"stages length\", length, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  Check.typeOf.number.lessThan(\"index\", index, length); //>>includeEnd('debug');\n\n  return stages[index];\n};\n/**\n * Removes all post-process stages from the collection and destroys them.\n */\n\n\nPostProcessStageCollection.prototype.removeAll = function () {\n  var stages = this._stages;\n  var length = stages.length;\n\n  for (var i = 0; i < length; ++i) {\n    this.remove(stages[i]);\n  }\n\n  stages.length = 0;\n};\n/**\n * Gets a post-process stage in the collection by its name.\n *\n * @param {String} name The name of the post-process stage.\n * @return {PostProcessStage|PostProcessStageComposite} The post-process stage.\n *\n * @private\n */\n\n\nPostProcessStageCollection.prototype.getStageByName = function (name) {\n  return this._stageNames[name];\n};\n/**\n * Called before the post-process stages in the collection are executed. Calls update for each stage and creates WebGL resources.\n *\n * @param {Context} context The context.\n * @param {Boolean} useLogDepth Whether the scene uses a logarithmic depth buffer.\n *\n * @private\n */\n\n\nPostProcessStageCollection.prototype.update = function (context, useLogDepth, useHdr) {\n  removeStages(this);\n  var previousActiveStages = this._activeStages;\n  var activeStages = this._activeStages = this._previousActiveStages;\n  this._previousActiveStages = previousActiveStages;\n  var stages = this._stages;\n  var length = activeStages.length = stages.length;\n  var i;\n  var stage;\n  var count = 0;\n\n  for (i = 0; i < length; ++i) {\n    stage = stages[i];\n\n    if (stage.ready && stage.enabled && stage._isSupported(context)) {\n      activeStages[count++] = stage;\n    }\n  }\n\n  activeStages.length = count;\n  var activeStagesChanged = count !== previousActiveStages.length;\n\n  if (!activeStagesChanged) {\n    for (i = 0; i < count; ++i) {\n      if (activeStages[i] !== previousActiveStages[i]) {\n        activeStagesChanged = true;\n        break;\n      }\n    }\n  }\n\n  var ao = this._ao;\n  var bloom = this._bloom;\n  var autoexposure = this._autoExposure;\n  var tonemapping = this._tonemapping;\n  var fxaa = this._fxaa;\n  tonemapping.enabled = useHdr;\n\n  var aoEnabled = ao.enabled && ao._isSupported(context);\n\n  var bloomEnabled = bloom.enabled && bloom._isSupported(context);\n\n  var tonemappingEnabled = tonemapping.enabled && tonemapping._isSupported(context);\n\n  var fxaaEnabled = fxaa.enabled && fxaa._isSupported(context);\n\n  if (activeStagesChanged || this._textureCacheDirty || count !== this._lastLength || aoEnabled !== this._aoEnabled || bloomEnabled !== this._bloomEnabled || tonemappingEnabled !== this._tonemappingEnabled || fxaaEnabled !== this._fxaaEnabled) {\n    // The number of stages to execute has changed.\n    // Update dependencies and recreate framebuffers.\n    this._textureCache.updateDependencies();\n\n    this._lastLength = count;\n    this._aoEnabled = aoEnabled;\n    this._bloomEnabled = bloomEnabled;\n    this._tonemappingEnabled = tonemappingEnabled;\n    this._fxaaEnabled = fxaaEnabled;\n    this._textureCacheDirty = false;\n  }\n\n  if (defined(this._randomTexture) && !aoEnabled) {\n    this._randomTexture.destroy();\n\n    this._randomTexture = undefined;\n  }\n\n  if (!defined(this._randomTexture) && aoEnabled) {\n    length = 256 * 256 * 3;\n    var random = new Uint8Array(length);\n\n    for (i = 0; i < length; i += 3) {\n      random[i] = Math.floor(Math.random() * 255.0);\n    }\n\n    this._randomTexture = new Texture({\n      context: context,\n      pixelFormat: PixelFormat.RGB,\n      pixelDatatype: PixelDatatype.UNSIGNED_BYTE,\n      source: {\n        arrayBufferView: random,\n        width: 256,\n        height: 256\n      },\n      sampler: new Sampler({\n        wrapS: TextureWrap.REPEAT,\n        wrapT: TextureWrap.REPEAT,\n        minificationFilter: TextureMinificationFilter.NEAREST,\n        magnificationFilter: TextureMagnificationFilter.NEAREST\n      })\n    });\n  }\n\n  this._textureCache.update(context);\n\n  fxaa.update(context, useLogDepth);\n  ao.update(context, useLogDepth);\n  bloom.update(context, useLogDepth);\n  tonemapping.update(context, useLogDepth);\n\n  if (this._autoExposureEnabled) {\n    autoexposure.update(context, useLogDepth);\n  }\n\n  length = stages.length;\n\n  for (i = 0; i < length; ++i) {\n    stages[i].update(context, useLogDepth);\n  }\n};\n/**\n * Clears all of the framebuffers used by the stages.\n *\n * @param {Context} context The context.\n *\n * @private\n */\n\n\nPostProcessStageCollection.prototype.clear = function (context) {\n  this._textureCache.clear(context);\n\n  if (this._autoExposureEnabled) {\n    this._autoExposure.clear(context);\n  }\n};\n\nfunction getOutputTexture(stage) {\n  while (defined(stage.length)) {\n    stage = stage.get(stage.length - 1);\n  }\n\n  return stage.outputTexture;\n}\n/**\n * Gets the output texture of a stage with the given name.\n *\n * @param {String} stageName The name of the stage.\n * @return {Texture|undefined} The texture rendered to by the stage with the given name.\n *\n * @private\n */\n\n\nPostProcessStageCollection.prototype.getOutputTexture = function (stageName) {\n  var stage = this.getStageByName(stageName);\n\n  if (!defined(stage)) {\n    return undefined;\n  }\n\n  return getOutputTexture(stage);\n};\n\nfunction execute(stage, context, colorTexture, depthTexture, idTexture) {\n  if (defined(stage.execute)) {\n    stage.execute(context, colorTexture, depthTexture, idTexture);\n    return;\n  }\n\n  var length = stage.length;\n  var i;\n\n  if (stage.inputPreviousStageTexture) {\n    execute(stage.get(0), context, colorTexture, depthTexture, idTexture);\n\n    for (i = 1; i < length; ++i) {\n      execute(stage.get(i), context, getOutputTexture(stage.get(i - 1)), depthTexture, idTexture);\n    }\n  } else {\n    for (i = 0; i < length; ++i) {\n      execute(stage.get(i), context, colorTexture, depthTexture, idTexture);\n    }\n  }\n}\n/**\n * Executes all ready and enabled stages in the collection.\n *\n * @param {Context} context The context.\n * @param {Texture} colorTexture The color texture rendered to by the scene.\n * @param {Texture} depthTexture The depth texture written to by the scene.\n * @param {Texture} idTexture The id texture written to by the scene.\n *\n * @private\n */\n\n\nPostProcessStageCollection.prototype.execute = function (context, colorTexture, depthTexture, idTexture) {\n  var activeStages = this._activeStages;\n  var length = activeStages.length;\n  var fxaa = this._fxaa;\n  var ao = this._ao;\n  var bloom = this._bloom;\n  var autoexposure = this._autoExposure;\n  var tonemapping = this._tonemapping;\n\n  var aoEnabled = ao.enabled && ao._isSupported(context);\n\n  var bloomEnabled = bloom.enabled && bloom._isSupported(context);\n\n  var autoExposureEnabled = this._autoExposureEnabled;\n\n  var tonemappingEnabled = tonemapping.enabled && tonemapping._isSupported(context);\n\n  var fxaaEnabled = fxaa.enabled && fxaa._isSupported(context);\n\n  if (!fxaaEnabled && !aoEnabled && !bloomEnabled && !tonemappingEnabled && length === 0) {\n    return;\n  }\n\n  var initialTexture = colorTexture;\n\n  if (aoEnabled && ao.ready) {\n    execute(ao, context, initialTexture, depthTexture, idTexture);\n    initialTexture = getOutputTexture(ao);\n  }\n\n  if (bloomEnabled && bloom.ready) {\n    execute(bloom, context, initialTexture, depthTexture, idTexture);\n    initialTexture = getOutputTexture(bloom);\n  }\n\n  if (autoExposureEnabled && autoexposure.ready) {\n    execute(autoexposure, context, initialTexture, depthTexture, idTexture);\n  }\n\n  if (tonemappingEnabled && tonemapping.ready) {\n    execute(tonemapping, context, initialTexture, depthTexture, idTexture);\n    initialTexture = getOutputTexture(tonemapping);\n  }\n\n  var lastTexture = initialTexture;\n\n  if (length > 0) {\n    execute(activeStages[0], context, initialTexture, depthTexture, idTexture);\n\n    for (var i = 1; i < length; ++i) {\n      execute(activeStages[i], context, getOutputTexture(activeStages[i - 1]), depthTexture, idTexture);\n    }\n\n    lastTexture = getOutputTexture(activeStages[length - 1]);\n  }\n\n  if (fxaaEnabled && fxaa.ready) {\n    execute(fxaa, context, lastTexture, depthTexture, idTexture);\n  }\n};\n/**\n * Copies the output of all executed stages to the color texture of a framebuffer.\n *\n * @param {Context} context The context.\n * @param {Framebuffer} framebuffer The framebuffer to copy to.\n *\n * @private\n */\n\n\nPostProcessStageCollection.prototype.copy = function (context, framebuffer) {\n  if (!defined(this._copyColorCommand)) {\n    var that = this;\n    this._copyColorCommand = context.createViewportQuadCommand(PassThrough, {\n      uniformMap: {\n        colorTexture: function () {\n          return that.outputTexture;\n        }\n      },\n      owner: this\n    });\n  }\n\n  this._copyColorCommand.framebuffer = framebuffer;\n\n  this._copyColorCommand.execute(context);\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <p>\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * </p>\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see PostProcessStageCollection#destroy\n */\n\n\nPostProcessStageCollection.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <p>\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PostProcessStageCollection#isDestroyed\n */\n\n\nPostProcessStageCollection.prototype.destroy = function () {\n  this._fxaa.destroy();\n\n  this._ao.destroy();\n\n  this._bloom.destroy();\n\n  this._autoExposure.destroy();\n\n  this._tonemapping.destroy();\n\n  this.removeAll();\n  this._textureCache = this._textureCache && this._textureCache.destroy();\n  return destroyObject(this);\n};\n\nexport default PostProcessStageCollection;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/PostProcessStageCollection.js"],"names":["arraySlice","Check","defined","destroyObject","DeveloperError","PixelFormat","PixelDatatype","Sampler","Texture","TextureMagnificationFilter","TextureMinificationFilter","TextureWrap","PassThrough","PostProcessStageLibrary","PostProcessStageTextureCache","Tonemapper","stackScratch","PostProcessStageCollection","fxaa","createFXAAStage","ao","createAmbientOcclusionStage","bloom","createBloomStage","_autoExposureEnabled","_autoExposure","createAutoExposureStage","_tonemapping","undefined","_tonemapper","tonemapper","ACES","tonemapping","enabled","textureCache","stageNames","stack","push","length","stage","pop","name","_textureCache","i","get","_stages","_activeStages","_previousActiveStages","_randomTexture","that","uniforms","randomTexture","_ao","_bloom","_fxaa","_lastLength","_aoEnabled","_bloomEnabled","_tonemappingEnabled","_fxaaEnabled","_stagesRemoved","_textureCacheDirty","_stageNames","Object","defineProperties","prototype","ready","readyAndEnabled","stages","ambientOcclusion","removeStages","outputTexture","getOutputTexture","hasSelected","selected","set","value","validate","destroy","useAutoExposure","REINHARD","createReinhardTonemappingStage","MODIFIED_REINHARD","createModifiedReinhardTonemappingStage","FILMIC","createFilmicTonemappingStage","createAcesTonemappingStage","autoexposure","autoExposure","collection","newStages","j","_index","add","typeOf","object","currentStage","remove","contains","index","number","greaterThanOrEquals","lessThan","removeAll","getStageByName","update","context","useLogDepth","useHdr","previousActiveStages","activeStages","count","_isSupported","activeStagesChanged","aoEnabled","bloomEnabled","tonemappingEnabled","fxaaEnabled","updateDependencies","random","Uint8Array","Math","floor","pixelFormat","RGB","pixelDatatype","UNSIGNED_BYTE","source","arrayBufferView","width","height","sampler","wrapS","REPEAT","wrapT","minificationFilter","NEAREST","magnificationFilter","clear","stageName","execute","colorTexture","depthTexture","idTexture","inputPreviousStageTexture","autoExposureEnabled","initialTexture","lastTexture","copy","framebuffer","_copyColorCommand","createViewportQuadCommand","uniformMap","owner","isDestroyed"],"mappings":"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","sourcesContent":["import arraySlice from \"../Core/arraySlice.js\";\nimport Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport Sampler from \"../Renderer/Sampler.js\";\nimport Texture from \"../Renderer/Texture.js\";\nimport TextureMagnificationFilter from \"../Renderer/TextureMagnificationFilter.js\";\nimport TextureMinificationFilter from \"../Renderer/TextureMinificationFilter.js\";\nimport TextureWrap from \"../Renderer/TextureWrap.js\";\nimport PassThrough from \"../Shaders/PostProcessStages/PassThrough.js\";\nimport PostProcessStageLibrary from \"./PostProcessStageLibrary.js\";\nimport PostProcessStageTextureCache from \"./PostProcessStageTextureCache.js\";\nimport Tonemapper from \"./Tonemapper.js\";\n\nvar stackScratch = [];\n\n/**\n * A collection of {@link PostProcessStage}s and/or {@link PostProcessStageComposite}s.\n * <p>\n * The input texture for each post-process stage is the texture rendered to by the scene or the texture rendered\n * to by the previous stage in the collection.\n * </p>\n * <p>\n * If the ambient occlusion or bloom stages are enabled, they will execute before all other stages.\n * </p>\n * <p>\n * If the FXAA stage is enabled, it will execute after all other stages.\n * </p>\n *\n * @alias PostProcessStageCollection\n * @constructor\n */\nfunction PostProcessStageCollection() {\n  var fxaa = PostProcessStageLibrary.createFXAAStage();\n  var ao = PostProcessStageLibrary.createAmbientOcclusionStage();\n  var bloom = PostProcessStageLibrary.createBloomStage();\n\n  // Auto-exposure is currently disabled because most shaders output a value in [0.0, 1.0].\n  // Some shaders, such as the atmosphere and ground atmosphere, output values slightly over 1.0.\n  this._autoExposureEnabled = false;\n  this._autoExposure = PostProcessStageLibrary.createAutoExposureStage();\n  this._tonemapping = undefined;\n  this._tonemapper = undefined;\n\n  // set tonemapper and tonemapping\n  this.tonemapper = Tonemapper.ACES;\n\n  var tonemapping = this._tonemapping;\n\n  fxaa.enabled = false;\n  ao.enabled = false;\n  bloom.enabled = false;\n  tonemapping.enabled = false; // will be enabled if necessary in update\n\n  var textureCache = new PostProcessStageTextureCache(this);\n\n  var stageNames = {};\n  var stack = stackScratch;\n  stack.push(fxaa, ao, bloom, tonemapping);\n  while (stack.length > 0) {\n    var stage = stack.pop();\n    stageNames[stage.name] = stage;\n    stage._textureCache = textureCache;\n\n    var length = stage.length;\n    if (defined(length)) {\n      for (var i = 0; i < length; ++i) {\n        stack.push(stage.get(i));\n      }\n    }\n  }\n\n  this._stages = [];\n  this._activeStages = [];\n  this._previousActiveStages = [];\n\n  this._randomTexture = undefined; // For AO\n\n  var that = this;\n  ao.uniforms.randomTexture = function () {\n    return that._randomTexture;\n  };\n\n  this._ao = ao;\n  this._bloom = bloom;\n  this._fxaa = fxaa;\n\n  this._lastLength = undefined;\n  this._aoEnabled = undefined;\n  this._bloomEnabled = undefined;\n  this._tonemappingEnabled = undefined;\n  this._fxaaEnabled = undefined;\n\n  this._stagesRemoved = false;\n  this._textureCacheDirty = false;\n\n  this._stageNames = stageNames;\n  this._textureCache = textureCache;\n}\n\nObject.defineProperties(PostProcessStageCollection.prototype, {\n  /**\n   * Determines if all of the post-process stages in the collection are ready to be executed.\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      var readyAndEnabled = false;\n      var stages = this._stages;\n      var length = stages.length;\n      for (var i = length - 1; i >= 0; --i) {\n        var stage = stages[i];\n        readyAndEnabled = readyAndEnabled || (stage.ready && stage.enabled);\n      }\n\n      var fxaa = this._fxaa;\n      var ao = this._ao;\n      var bloom = this._bloom;\n      var tonemapping = this._tonemapping;\n\n      readyAndEnabled = readyAndEnabled || (fxaa.ready && fxaa.enabled);\n      readyAndEnabled = readyAndEnabled || (ao.ready && ao.enabled);\n      readyAndEnabled = readyAndEnabled || (bloom.ready && bloom.enabled);\n      readyAndEnabled =\n        readyAndEnabled || (tonemapping.ready && tonemapping.enabled);\n\n      return readyAndEnabled;\n    },\n  },\n  /**\n   * A post-process stage for Fast Approximate Anti-aliasing.\n   * <p>\n   * When enabled, this stage will execute after all others.\n   * </p>\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {PostProcessStage}\n   * @readonly\n   */\n  fxaa: {\n    get: function () {\n      return this._fxaa;\n    },\n  },\n  /**\n   * A post-process stage that applies Horizon-based Ambient Occlusion (HBAO) to the input texture.\n   * <p>\n   * Ambient occlusion simulates shadows from ambient light. These shadows would always be present when the\n   * surface receives light and regardless of the light's position.\n   * </p>\n   * <p>\n   * The uniforms have the following properties: <code>intensity</code>, <code>bias</code>, <code>lengthCap</code>,\n   * <code>stepSize</code>, <code>frustumLength</code>, <code>ambientOcclusionOnly</code>,\n   * <code>delta</code>, <code>sigma</code>, and <code>blurStepSize</code>.\n   * </p>\n   * <ul>\n   * <li><code>intensity</code> is a scalar value used to lighten or darken the shadows exponentially. Higher values make the shadows darker. The default value is <code>3.0</code>.</li>\n   *\n   * <li><code>bias</code> is a scalar value representing an angle in radians. If the dot product between the normal of the sample and the vector to the camera is less than this value,\n   * sampling stops in the current direction. This is used to remove shadows from near planar edges. The default value is <code>0.1</code>.</li>\n   *\n   * <li><code>lengthCap</code> is a scalar value representing a length in meters. If the distance from the current sample to first sample is greater than this value,\n   * sampling stops in the current direction. The default value is <code>0.26</code>.</li>\n   *\n   * <li><code>stepSize</code> is a scalar value indicating the distance to the next texel sample in the current direction. The default value is <code>1.95</code>.</li>\n   *\n   * <li><code>frustumLength</code> is a scalar value in meters. If the current fragment has a distance from the camera greater than this value, ambient occlusion is not computed for the fragment.\n   * The default value is <code>1000.0</code>.</li>\n   *\n   * <li><code>ambientOcclusionOnly</code> is a boolean value. When <code>true</code>, only the shadows generated are written to the output. When <code>false</code>, the input texture is modulated\n   * with the ambient occlusion. This is a useful debug option for seeing the effects of changing the uniform values. The default value is <code>false</code>.</li>\n   * </ul>\n   * <p>\n   * <code>delta</code>, <code>sigma</code>, and <code>blurStepSize</code> are the same properties as {@link PostProcessStageLibrary#createBlurStage}.\n   * The blur is applied to the shadows generated from the image to make them smoother.\n   * </p>\n   * <p>\n   * When enabled, this stage will execute before all others.\n   * </p>\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {PostProcessStageComposite}\n   * @readonly\n   */\n  ambientOcclusion: {\n    get: function () {\n      return this._ao;\n    },\n  },\n  /**\n   * A post-process stage for a bloom effect.\n   * <p>\n   * A bloom effect adds glow effect, makes bright areas brighter, and dark areas darker.\n   * </p>\n   * <p>\n   * This stage has the following uniforms: <code>contrast</code>, <code>brightness</code>, <code>glowOnly</code>,\n   * <code>delta</code>, <code>sigma</code>, and <code>stepSize</code>.\n   * </p>\n   * <ul>\n   * <li><code>contrast</code> is a scalar value in the range [-255.0, 255.0] and affects the contract of the effect. The default value is <code>128.0</code>.</li>\n   *\n   * <li><code>brightness</code> is a scalar value. The input texture RGB value is converted to hue, saturation, and brightness (HSB) then this value is\n   * added to the brightness. The default value is <code>-0.3</code>.</li>\n   *\n   * <li><code>glowOnly</code> is a boolean value. When <code>true</code>, only the glow effect will be shown. When <code>false</code>, the glow will be added to the input texture.\n   * The default value is <code>false</code>. This is a debug option for viewing the effects when changing the other uniform values.</li>\n   * </ul>\n   * <p>\n   * <code>delta</code>, <code>sigma</code>, and <code>stepSize</code> are the same properties as {@link PostProcessStageLibrary#createBlurStage}.\n   * The blur is applied to the shadows generated from the image to make them smoother.\n   * </p>\n   * <p>\n   * When enabled, this stage will execute before all others.\n   * </p>\n   *\n   * @memberOf PostProcessStageCollection.prototype\n   * @type {PostProcessStageComposite}\n   * @readonly\n   */\n  bloom: {\n    get: function () {\n      return this._bloom;\n    },\n  },\n  /**\n   * The number of post-process stages in this collection.\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {Number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      removeStages(this);\n      return this._stages.length;\n    },\n  },\n  /**\n   * A reference to the last texture written to when executing the post-process stages in this collection.\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {Texture}\n   * @readonly\n   * @private\n   */\n  outputTexture: {\n    get: function () {\n      var fxaa = this._fxaa;\n      if (fxaa.enabled && fxaa.ready) {\n        return this.getOutputTexture(fxaa.name);\n      }\n\n      var stages = this._stages;\n      var length = stages.length;\n      for (var i = length - 1; i >= 0; --i) {\n        var stage = stages[i];\n        if (defined(stage) && stage.ready && stage.enabled) {\n          return this.getOutputTexture(stage.name);\n        }\n      }\n\n      var tonemapping = this._tonemapping;\n      if (tonemapping.enabled && tonemapping.ready) {\n        return this.getOutputTexture(tonemapping.name);\n      }\n\n      var bloom = this._bloom;\n      if (bloom.enabled && bloom.ready) {\n        return this.getOutputTexture(bloom.name);\n      }\n\n      var ao = this._ao;\n      if (ao.enabled && ao.ready) {\n        return this.getOutputTexture(ao.name);\n      }\n\n      return undefined;\n    },\n  },\n  /**\n   * Whether the collection has a stage that has selected features.\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {Boolean}\n   * @readonly\n   * @private\n   */\n  hasSelected: {\n    get: function () {\n      var stages = arraySlice(this._stages);\n      while (stages.length > 0) {\n        var stage = stages.pop();\n        if (!defined(stage)) {\n          continue;\n        }\n        if (defined(stage.selected)) {\n          return true;\n        }\n        var length = stage.length;\n        if (defined(length)) {\n          for (var i = 0; i < length; ++i) {\n            stages.push(stage.get(i));\n          }\n        }\n      }\n      return false;\n    },\n  },\n  /**\n   * Gets and sets the tonemapping algorithm used when rendering with high dynamic range.\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {Tonemapper}\n   * @private\n   */\n  tonemapper: {\n    get: function () {\n      return this._tonemapper;\n    },\n    set: function (value) {\n      if (this._tonemapper === value) {\n        return;\n      }\n      //>>includeStart('debug', pragmas.debug);\n      if (!Tonemapper.validate(value)) {\n        throw new DeveloperError(\"tonemapper was set to an invalid value.\");\n      }\n      //>>includeEnd('debug');\n\n      if (defined(this._tonemapping)) {\n        delete this._stageNames[this._tonemapping.name];\n        this._tonemapping.destroy();\n      }\n\n      var useAutoExposure = this._autoExposureEnabled;\n      var tonemapper;\n\n      switch (value) {\n        case Tonemapper.REINHARD:\n          tonemapper = PostProcessStageLibrary.createReinhardTonemappingStage(\n            useAutoExposure\n          );\n          break;\n        case Tonemapper.MODIFIED_REINHARD:\n          tonemapper = PostProcessStageLibrary.createModifiedReinhardTonemappingStage(\n            useAutoExposure\n          );\n          break;\n        case Tonemapper.FILMIC:\n          tonemapper = PostProcessStageLibrary.createFilmicTonemappingStage(\n            useAutoExposure\n          );\n          break;\n        default:\n          tonemapper = PostProcessStageLibrary.createAcesTonemappingStage(\n            useAutoExposure\n          );\n          break;\n      }\n\n      if (useAutoExposure) {\n        var autoexposure = this._autoExposure;\n        tonemapper.uniforms.autoExposure = function () {\n          return autoexposure.outputTexture;\n        };\n      }\n\n      this._tonemapper = value;\n      this._tonemapping = tonemapper;\n\n      if (defined(this._stageNames)) {\n        this._stageNames[tonemapper.name] = tonemapper;\n        tonemapper._textureCache = this._textureCache;\n      }\n\n      this._textureCacheDirty = true;\n    },\n  },\n});\n\nfunction removeStages(collection) {\n  if (!collection._stagesRemoved) {\n    return;\n  }\n\n  collection._stagesRemoved = false;\n\n  var newStages = [];\n  var stages = collection._stages;\n  var length = stages.length;\n  for (var i = 0, j = 0; i < length; ++i) {\n    var stage = stages[i];\n    if (stage) {\n      stage._index = j++;\n      newStages.push(stage);\n    }\n  }\n\n  collection._stages = newStages;\n}\n\n/**\n * Adds the post-process stage to the collection.\n *\n * @param {PostProcessStage|PostProcessStageComposite} stage The post-process stage to add to the collection.\n * @return {PostProcessStage|PostProcessStageComposite} The post-process stage that was added to the collection.\n *\n * @exception {DeveloperError} The post-process stage has already been added to the collection or does not have a unique name.\n */\nPostProcessStageCollection.prototype.add = function (stage) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"stage\", stage);\n  //>>includeEnd('debug');\n\n  var stageNames = this._stageNames;\n\n  var stack = stackScratch;\n  stack.push(stage);\n  while (stack.length > 0) {\n    var currentStage = stack.pop();\n    //>>includeStart('debug', pragmas.debug);\n    if (defined(stageNames[currentStage.name])) {\n      throw new DeveloperError(\n        currentStage.name +\n          \" has already been added to the collection or does not have a unique name.\"\n      );\n    }\n    //>>includeEnd('debug');\n    stageNames[currentStage.name] = currentStage;\n    currentStage._textureCache = this._textureCache;\n\n    var length = currentStage.length;\n    if (defined(length)) {\n      for (var i = 0; i < length; ++i) {\n        stack.push(currentStage.get(i));\n      }\n    }\n  }\n\n  var stages = this._stages;\n  stage._index = stages.length;\n  stages.push(stage);\n  this._textureCacheDirty = true;\n  return stage;\n};\n\n/**\n * Removes a post-process stage from the collection and destroys it.\n *\n * @param {PostProcessStage|PostProcessStageComposite} stage The post-process stage to remove from the collection.\n * @return {Boolean} Whether the post-process stage was removed.\n */\nPostProcessStageCollection.prototype.remove = function (stage) {\n  if (!this.contains(stage)) {\n    return false;\n  }\n\n  var stageNames = this._stageNames;\n\n  var stack = stackScratch;\n  stack.push(stage);\n  while (stack.length > 0) {\n    var currentStage = stack.pop();\n    delete stageNames[currentStage.name];\n\n    var length = currentStage.length;\n    if (defined(length)) {\n      for (var i = 0; i < length; ++i) {\n        stack.push(currentStage.get(i));\n      }\n    }\n  }\n\n  this._stages[stage._index] = undefined;\n  this._stagesRemoved = true;\n  this._textureCacheDirty = true;\n  stage._index = undefined;\n  stage._textureCache = undefined;\n  stage.destroy();\n  return true;\n};\n\n/**\n * Returns whether the collection contains a post-process stage.\n *\n * @param {PostProcessStage|PostProcessStageComposite} stage The post-process stage.\n * @return {Boolean} Whether the collection contains the post-process stage.\n */\nPostProcessStageCollection.prototype.contains = function (stage) {\n  return (\n    defined(stage) &&\n    defined(stage._index) &&\n    stage._textureCache === this._textureCache\n  );\n};\n\n/**\n * Gets the post-process stage at <code>index</code>.\n *\n * @param {Number} index The index of the post-process stage.\n * @return {PostProcessStage|PostProcessStageComposite} The post-process stage at index.\n */\nPostProcessStageCollection.prototype.get = function (index) {\n  removeStages(this);\n  var stages = this._stages;\n  //>>includeStart('debug', pragmas.debug);\n  var length = stages.length;\n  Check.typeOf.number.greaterThanOrEquals(\"stages length\", length, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  Check.typeOf.number.lessThan(\"index\", index, length);\n  //>>includeEnd('debug');\n  return stages[index];\n};\n\n/**\n * Removes all post-process stages from the collection and destroys them.\n */\nPostProcessStageCollection.prototype.removeAll = function () {\n  var stages = this._stages;\n  var length = stages.length;\n  for (var i = 0; i < length; ++i) {\n    this.remove(stages[i]);\n  }\n  stages.length = 0;\n};\n\n/**\n * Gets a post-process stage in the collection by its name.\n *\n * @param {String} name The name of the post-process stage.\n * @return {PostProcessStage|PostProcessStageComposite} The post-process stage.\n *\n * @private\n */\nPostProcessStageCollection.prototype.getStageByName = function (name) {\n  return this._stageNames[name];\n};\n\n/**\n * Called before the post-process stages in the collection are executed. Calls update for each stage and creates WebGL resources.\n *\n * @param {Context} context The context.\n * @param {Boolean} useLogDepth Whether the scene uses a logarithmic depth buffer.\n *\n * @private\n */\nPostProcessStageCollection.prototype.update = function (\n  context,\n  useLogDepth,\n  useHdr\n) {\n  removeStages(this);\n\n  var previousActiveStages = this._activeStages;\n  var activeStages = (this._activeStages = this._previousActiveStages);\n  this._previousActiveStages = previousActiveStages;\n\n  var stages = this._stages;\n  var length = (activeStages.length = stages.length);\n\n  var i;\n  var stage;\n  var count = 0;\n  for (i = 0; i < length; ++i) {\n    stage = stages[i];\n    if (stage.ready && stage.enabled && stage._isSupported(context)) {\n      activeStages[count++] = stage;\n    }\n  }\n  activeStages.length = count;\n\n  var activeStagesChanged = count !== previousActiveStages.length;\n  if (!activeStagesChanged) {\n    for (i = 0; i < count; ++i) {\n      if (activeStages[i] !== previousActiveStages[i]) {\n        activeStagesChanged = true;\n        break;\n      }\n    }\n  }\n\n  var ao = this._ao;\n  var bloom = this._bloom;\n  var autoexposure = this._autoExposure;\n  var tonemapping = this._tonemapping;\n  var fxaa = this._fxaa;\n\n  tonemapping.enabled = useHdr;\n\n  var aoEnabled = ao.enabled && ao._isSupported(context);\n  var bloomEnabled = bloom.enabled && bloom._isSupported(context);\n  var tonemappingEnabled =\n    tonemapping.enabled && tonemapping._isSupported(context);\n  var fxaaEnabled = fxaa.enabled && fxaa._isSupported(context);\n\n  if (\n    activeStagesChanged ||\n    this._textureCacheDirty ||\n    count !== this._lastLength ||\n    aoEnabled !== this._aoEnabled ||\n    bloomEnabled !== this._bloomEnabled ||\n    tonemappingEnabled !== this._tonemappingEnabled ||\n    fxaaEnabled !== this._fxaaEnabled\n  ) {\n    // The number of stages to execute has changed.\n    // Update dependencies and recreate framebuffers.\n    this._textureCache.updateDependencies();\n\n    this._lastLength = count;\n    this._aoEnabled = aoEnabled;\n    this._bloomEnabled = bloomEnabled;\n    this._tonemappingEnabled = tonemappingEnabled;\n    this._fxaaEnabled = fxaaEnabled;\n    this._textureCacheDirty = false;\n  }\n\n  if (defined(this._randomTexture) && !aoEnabled) {\n    this._randomTexture.destroy();\n    this._randomTexture = undefined;\n  }\n\n  if (!defined(this._randomTexture) && aoEnabled) {\n    length = 256 * 256 * 3;\n    var random = new Uint8Array(length);\n    for (i = 0; i < length; i += 3) {\n      random[i] = Math.floor(Math.random() * 255.0);\n    }\n\n    this._randomTexture = new Texture({\n      context: context,\n      pixelFormat: PixelFormat.RGB,\n      pixelDatatype: PixelDatatype.UNSIGNED_BYTE,\n      source: {\n        arrayBufferView: random,\n        width: 256,\n        height: 256,\n      },\n      sampler: new Sampler({\n        wrapS: TextureWrap.REPEAT,\n        wrapT: TextureWrap.REPEAT,\n        minificationFilter: TextureMinificationFilter.NEAREST,\n        magnificationFilter: TextureMagnificationFilter.NEAREST,\n      }),\n    });\n  }\n\n  this._textureCache.update(context);\n\n  fxaa.update(context, useLogDepth);\n  ao.update(context, useLogDepth);\n  bloom.update(context, useLogDepth);\n  tonemapping.update(context, useLogDepth);\n\n  if (this._autoExposureEnabled) {\n    autoexposure.update(context, useLogDepth);\n  }\n\n  length = stages.length;\n  for (i = 0; i < length; ++i) {\n    stages[i].update(context, useLogDepth);\n  }\n};\n\n/**\n * Clears all of the framebuffers used by the stages.\n *\n * @param {Context} context The context.\n *\n * @private\n */\nPostProcessStageCollection.prototype.clear = function (context) {\n  this._textureCache.clear(context);\n\n  if (this._autoExposureEnabled) {\n    this._autoExposure.clear(context);\n  }\n};\n\nfunction getOutputTexture(stage) {\n  while (defined(stage.length)) {\n    stage = stage.get(stage.length - 1);\n  }\n  return stage.outputTexture;\n}\n\n/**\n * Gets the output texture of a stage with the given name.\n *\n * @param {String} stageName The name of the stage.\n * @return {Texture|undefined} The texture rendered to by the stage with the given name.\n *\n * @private\n */\nPostProcessStageCollection.prototype.getOutputTexture = function (stageName) {\n  var stage = this.getStageByName(stageName);\n  if (!defined(stage)) {\n    return undefined;\n  }\n  return getOutputTexture(stage);\n};\n\nfunction execute(stage, context, colorTexture, depthTexture, idTexture) {\n  if (defined(stage.execute)) {\n    stage.execute(context, colorTexture, depthTexture, idTexture);\n    return;\n  }\n\n  var length = stage.length;\n  var i;\n\n  if (stage.inputPreviousStageTexture) {\n    execute(stage.get(0), context, colorTexture, depthTexture, idTexture);\n    for (i = 1; i < length; ++i) {\n      execute(\n        stage.get(i),\n        context,\n        getOutputTexture(stage.get(i - 1)),\n        depthTexture,\n        idTexture\n      );\n    }\n  } else {\n    for (i = 0; i < length; ++i) {\n      execute(stage.get(i), context, colorTexture, depthTexture, idTexture);\n    }\n  }\n}\n\n/**\n * Executes all ready and enabled stages in the collection.\n *\n * @param {Context} context The context.\n * @param {Texture} colorTexture The color texture rendered to by the scene.\n * @param {Texture} depthTexture The depth texture written to by the scene.\n * @param {Texture} idTexture The id texture written to by the scene.\n *\n * @private\n */\nPostProcessStageCollection.prototype.execute = function (\n  context,\n  colorTexture,\n  depthTexture,\n  idTexture\n) {\n  var activeStages = this._activeStages;\n  var length = activeStages.length;\n\n  var fxaa = this._fxaa;\n  var ao = this._ao;\n  var bloom = this._bloom;\n  var autoexposure = this._autoExposure;\n  var tonemapping = this._tonemapping;\n\n  var aoEnabled = ao.enabled && ao._isSupported(context);\n  var bloomEnabled = bloom.enabled && bloom._isSupported(context);\n  var autoExposureEnabled = this._autoExposureEnabled;\n  var tonemappingEnabled =\n    tonemapping.enabled && tonemapping._isSupported(context);\n  var fxaaEnabled = fxaa.enabled && fxaa._isSupported(context);\n\n  if (\n    !fxaaEnabled &&\n    !aoEnabled &&\n    !bloomEnabled &&\n    !tonemappingEnabled &&\n    length === 0\n  ) {\n    return;\n  }\n\n  var initialTexture = colorTexture;\n  if (aoEnabled && ao.ready) {\n    execute(ao, context, initialTexture, depthTexture, idTexture);\n    initialTexture = getOutputTexture(ao);\n  }\n  if (bloomEnabled && bloom.ready) {\n    execute(bloom, context, initialTexture, depthTexture, idTexture);\n    initialTexture = getOutputTexture(bloom);\n  }\n  if (autoExposureEnabled && autoexposure.ready) {\n    execute(autoexposure, context, initialTexture, depthTexture, idTexture);\n  }\n  if (tonemappingEnabled && tonemapping.ready) {\n    execute(tonemapping, context, initialTexture, depthTexture, idTexture);\n    initialTexture = getOutputTexture(tonemapping);\n  }\n\n  var lastTexture = initialTexture;\n\n  if (length > 0) {\n    execute(activeStages[0], context, initialTexture, depthTexture, idTexture);\n    for (var i = 1; i < length; ++i) {\n      execute(\n        activeStages[i],\n        context,\n        getOutputTexture(activeStages[i - 1]),\n        depthTexture,\n        idTexture\n      );\n    }\n    lastTexture = getOutputTexture(activeStages[length - 1]);\n  }\n\n  if (fxaaEnabled && fxaa.ready) {\n    execute(fxaa, context, lastTexture, depthTexture, idTexture);\n  }\n};\n\n/**\n * Copies the output of all executed stages to the color texture of a framebuffer.\n *\n * @param {Context} context The context.\n * @param {Framebuffer} framebuffer The framebuffer to copy to.\n *\n * @private\n */\nPostProcessStageCollection.prototype.copy = function (context, framebuffer) {\n  if (!defined(this._copyColorCommand)) {\n    var that = this;\n    this._copyColorCommand = context.createViewportQuadCommand(PassThrough, {\n      uniformMap: {\n        colorTexture: function () {\n          return that.outputTexture;\n        },\n      },\n      owner: this,\n    });\n  }\n\n  this._copyColorCommand.framebuffer = framebuffer;\n  this._copyColorCommand.execute(context);\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <p>\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * </p>\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see PostProcessStageCollection#destroy\n */\nPostProcessStageCollection.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <p>\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PostProcessStageCollection#isDestroyed\n */\nPostProcessStageCollection.prototype.destroy = function () {\n  this._fxaa.destroy();\n  this._ao.destroy();\n  this._bloom.destroy();\n  this._autoExposure.destroy();\n  this._tonemapping.destroy();\n  this.removeAll();\n  this._textureCache = this._textureCache && this._textureCache.destroy();\n  return destroyObject(this);\n};\nexport default PostProcessStageCollection;\n"]},"metadata":{},"sourceType":"module"}