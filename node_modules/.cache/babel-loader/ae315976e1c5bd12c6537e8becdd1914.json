{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n/**\n * Uses the Tridiagonal Matrix Algorithm, also known as the Thomas Algorithm, to solve\n * a system of linear equations where the coefficient matrix is a tridiagonal matrix.\n *\n * @exports TridiagonalSystemSolver\n */\n\nvar TridiagonalSystemSolver = {};\n/**\n * Solves a tridiagonal system of linear equations.\n *\n * @param {Number[]} diagonal An array with length <code>n</code> that contains the diagonal of the coefficient matrix.\n * @param {Number[]} lower An array with length <code>n - 1</code> that contains the lower diagonal of the coefficient matrix.\n * @param {Number[]} upper An array with length <code>n - 1</code> that contains the upper diagonal of the coefficient matrix.\n * @param {Cartesian3[]} right An array of Cartesians with length <code>n</code> that is the right side of the system of equations.\n *\n * @exception {DeveloperError} diagonal and right must have the same lengths.\n * @exception {DeveloperError} lower and upper must have the same lengths.\n * @exception {DeveloperError} lower and upper must be one less than the length of diagonal.\n *\n * @performance Linear time.\n *\n * @example\n * var lowerDiagonal = [1.0, 1.0, 1.0, 1.0];\n * var diagonal = [2.0, 4.0, 4.0, 4.0, 2.0];\n * var upperDiagonal = [1.0, 1.0, 1.0, 1.0];\n * var rightHandSide = [\n *     new Cesium.Cartesian3(410757.0, -1595711.0, 1375302.0),\n *     new Cesium.Cartesian3(-5986705.0, -2190640.0, 1099600.0),\n *     new Cesium.Cartesian3(-12593180.0, 288588.0, -1755549.0),\n *     new Cesium.Cartesian3(-5349898.0, 2457005.0, -2685438.0),\n *     new Cesium.Cartesian3(845820.0, 1573488.0, -1205591.0)\n * ];\n *\n * var solution = Cesium.TridiagonalSystemSolver.solve(lowerDiagonal, diagonal, upperDiagonal, rightHandSide);\n *\n * @returns {Cartesian3[]} An array of Cartesians with length <code>n</code> that is the solution to the tridiagonal system of equations.\n */\n\nTridiagonalSystemSolver.solve = function (lower, diagonal, upper, right) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(lower) || !(lower instanceof Array)) {\n    throw new DeveloperError(\"The array lower is required.\");\n  }\n\n  if (!defined(diagonal) || !(diagonal instanceof Array)) {\n    throw new DeveloperError(\"The array diagonal is required.\");\n  }\n\n  if (!defined(upper) || !(upper instanceof Array)) {\n    throw new DeveloperError(\"The array upper is required.\");\n  }\n\n  if (!defined(right) || !(right instanceof Array)) {\n    throw new DeveloperError(\"The array right is required.\");\n  }\n\n  if (diagonal.length !== right.length) {\n    throw new DeveloperError(\"diagonal and right must have the same lengths.\");\n  }\n\n  if (lower.length !== upper.length) {\n    throw new DeveloperError(\"lower and upper must have the same lengths.\");\n  } else if (lower.length !== diagonal.length - 1) {\n    throw new DeveloperError(\"lower and upper must be one less than the length of diagonal.\");\n  } //>>includeEnd('debug');\n\n\n  var c = new Array(upper.length);\n  var d = new Array(right.length);\n  var x = new Array(right.length);\n  var i;\n\n  for (i = 0; i < d.length; i++) {\n    d[i] = new Cartesian3();\n    x[i] = new Cartesian3();\n  }\n\n  c[0] = upper[0] / diagonal[0];\n  d[0] = Cartesian3.multiplyByScalar(right[0], 1.0 / diagonal[0], d[0]);\n  var scalar;\n\n  for (i = 1; i < c.length; ++i) {\n    scalar = 1.0 / (diagonal[i] - c[i - 1] * lower[i - 1]);\n    c[i] = upper[i] * scalar;\n    d[i] = Cartesian3.subtract(right[i], Cartesian3.multiplyByScalar(d[i - 1], lower[i - 1], d[i]), d[i]);\n    d[i] = Cartesian3.multiplyByScalar(d[i], scalar, d[i]);\n  }\n\n  scalar = 1.0 / (diagonal[i] - c[i - 1] * lower[i - 1]);\n  d[i] = Cartesian3.subtract(right[i], Cartesian3.multiplyByScalar(d[i - 1], lower[i - 1], d[i]), d[i]);\n  d[i] = Cartesian3.multiplyByScalar(d[i], scalar, d[i]);\n  x[x.length - 1] = d[d.length - 1];\n\n  for (i = x.length - 2; i >= 0; --i) {\n    x[i] = Cartesian3.subtract(d[i], Cartesian3.multiplyByScalar(x[i + 1], c[i], x[i]), x[i]);\n  }\n\n  return x;\n};\n\nexport default TridiagonalSystemSolver;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/TridiagonalSystemSolver.js"],"names":["Cartesian3","defined","DeveloperError","TridiagonalSystemSolver","solve","lower","diagonal","upper","right","Array","length","c","d","x","i","multiplyByScalar","scalar","subtract"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,iBAAvB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AAEA;;;;;;;AAMA,IAAIC,uBAAuB,GAAG,EAA9B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BAA,uBAAuB,CAACC,KAAxB,GAAgC,UAAUC,KAAV,EAAiBC,QAAjB,EAA2BC,KAA3B,EAAkCC,KAAlC,EAAyC;AACvE;AACA,MAAI,CAACP,OAAO,CAACI,KAAD,CAAR,IAAmB,EAAEA,KAAK,YAAYI,KAAnB,CAAvB,EAAkD;AAChD,UAAM,IAAIP,cAAJ,CAAmB,8BAAnB,CAAN;AACD;;AACD,MAAI,CAACD,OAAO,CAACK,QAAD,CAAR,IAAsB,EAAEA,QAAQ,YAAYG,KAAtB,CAA1B,EAAwD;AACtD,UAAM,IAAIP,cAAJ,CAAmB,iCAAnB,CAAN;AACD;;AACD,MAAI,CAACD,OAAO,CAACM,KAAD,CAAR,IAAmB,EAAEA,KAAK,YAAYE,KAAnB,CAAvB,EAAkD;AAChD,UAAM,IAAIP,cAAJ,CAAmB,8BAAnB,CAAN;AACD;;AACD,MAAI,CAACD,OAAO,CAACO,KAAD,CAAR,IAAmB,EAAEA,KAAK,YAAYC,KAAnB,CAAvB,EAAkD;AAChD,UAAM,IAAIP,cAAJ,CAAmB,8BAAnB,CAAN;AACD;;AACD,MAAII,QAAQ,CAACI,MAAT,KAAoBF,KAAK,CAACE,MAA9B,EAAsC;AACpC,UAAM,IAAIR,cAAJ,CAAmB,gDAAnB,CAAN;AACD;;AACD,MAAIG,KAAK,CAACK,MAAN,KAAiBH,KAAK,CAACG,MAA3B,EAAmC;AACjC,UAAM,IAAIR,cAAJ,CAAmB,6CAAnB,CAAN;AACD,GAFD,MAEO,IAAIG,KAAK,CAACK,MAAN,KAAiBJ,QAAQ,CAACI,MAAT,GAAkB,CAAvC,EAA0C;AAC/C,UAAM,IAAIR,cAAJ,CACJ,+DADI,CAAN;AAGD,GAvBsE,CAwBvE;;;AAEA,MAAIS,CAAC,GAAG,IAAIF,KAAJ,CAAUF,KAAK,CAACG,MAAhB,CAAR;AACA,MAAIE,CAAC,GAAG,IAAIH,KAAJ,CAAUD,KAAK,CAACE,MAAhB,CAAR;AACA,MAAIG,CAAC,GAAG,IAAIJ,KAAJ,CAAUD,KAAK,CAACE,MAAhB,CAAR;AAEA,MAAII,CAAJ;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGF,CAAC,CAACF,MAAlB,EAA0BI,CAAC,EAA3B,EAA+B;AAC7BF,IAAAA,CAAC,CAACE,CAAD,CAAD,GAAO,IAAId,UAAJ,EAAP;AACAa,IAAAA,CAAC,CAACC,CAAD,CAAD,GAAO,IAAId,UAAJ,EAAP;AACD;;AAEDW,EAAAA,CAAC,CAAC,CAAD,CAAD,GAAOJ,KAAK,CAAC,CAAD,CAAL,GAAWD,QAAQ,CAAC,CAAD,CAA1B;AACAM,EAAAA,CAAC,CAAC,CAAD,CAAD,GAAOZ,UAAU,CAACe,gBAAX,CAA4BP,KAAK,CAAC,CAAD,CAAjC,EAAsC,MAAMF,QAAQ,CAAC,CAAD,CAApD,EAAyDM,CAAC,CAAC,CAAD,CAA1D,CAAP;AAEA,MAAII,MAAJ;;AACA,OAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,CAAC,CAACD,MAAlB,EAA0B,EAAEI,CAA5B,EAA+B;AAC7BE,IAAAA,MAAM,GAAG,OAAOV,QAAQ,CAACQ,CAAD,CAAR,GAAcH,CAAC,CAACG,CAAC,GAAG,CAAL,CAAD,GAAWT,KAAK,CAACS,CAAC,GAAG,CAAL,CAArC,CAAT;AACAH,IAAAA,CAAC,CAACG,CAAD,CAAD,GAAOP,KAAK,CAACO,CAAD,CAAL,GAAWE,MAAlB;AACAJ,IAAAA,CAAC,CAACE,CAAD,CAAD,GAAOd,UAAU,CAACiB,QAAX,CACLT,KAAK,CAACM,CAAD,CADA,EAELd,UAAU,CAACe,gBAAX,CAA4BH,CAAC,CAACE,CAAC,GAAG,CAAL,CAA7B,EAAsCT,KAAK,CAACS,CAAC,GAAG,CAAL,CAA3C,EAAoDF,CAAC,CAACE,CAAD,CAArD,CAFK,EAGLF,CAAC,CAACE,CAAD,CAHI,CAAP;AAKAF,IAAAA,CAAC,CAACE,CAAD,CAAD,GAAOd,UAAU,CAACe,gBAAX,CAA4BH,CAAC,CAACE,CAAD,CAA7B,EAAkCE,MAAlC,EAA0CJ,CAAC,CAACE,CAAD,CAA3C,CAAP;AACD;;AAEDE,EAAAA,MAAM,GAAG,OAAOV,QAAQ,CAACQ,CAAD,CAAR,GAAcH,CAAC,CAACG,CAAC,GAAG,CAAL,CAAD,GAAWT,KAAK,CAACS,CAAC,GAAG,CAAL,CAArC,CAAT;AACAF,EAAAA,CAAC,CAACE,CAAD,CAAD,GAAOd,UAAU,CAACiB,QAAX,CACLT,KAAK,CAACM,CAAD,CADA,EAELd,UAAU,CAACe,gBAAX,CAA4BH,CAAC,CAACE,CAAC,GAAG,CAAL,CAA7B,EAAsCT,KAAK,CAACS,CAAC,GAAG,CAAL,CAA3C,EAAoDF,CAAC,CAACE,CAAD,CAArD,CAFK,EAGLF,CAAC,CAACE,CAAD,CAHI,CAAP;AAKAF,EAAAA,CAAC,CAACE,CAAD,CAAD,GAAOd,UAAU,CAACe,gBAAX,CAA4BH,CAAC,CAACE,CAAD,CAA7B,EAAkCE,MAAlC,EAA0CJ,CAAC,CAACE,CAAD,CAA3C,CAAP;AAEAD,EAAAA,CAAC,CAACA,CAAC,CAACH,MAAF,GAAW,CAAZ,CAAD,GAAkBE,CAAC,CAACA,CAAC,CAACF,MAAF,GAAW,CAAZ,CAAnB;;AACA,OAAKI,CAAC,GAAGD,CAAC,CAACH,MAAF,GAAW,CAApB,EAAuBI,CAAC,IAAI,CAA5B,EAA+B,EAAEA,CAAjC,EAAoC;AAClCD,IAAAA,CAAC,CAACC,CAAD,CAAD,GAAOd,UAAU,CAACiB,QAAX,CACLL,CAAC,CAACE,CAAD,CADI,EAELd,UAAU,CAACe,gBAAX,CAA4BF,CAAC,CAACC,CAAC,GAAG,CAAL,CAA7B,EAAsCH,CAAC,CAACG,CAAD,CAAvC,EAA4CD,CAAC,CAACC,CAAD,CAA7C,CAFK,EAGLD,CAAC,CAACC,CAAD,CAHI,CAAP;AAKD;;AAED,SAAOD,CAAP;AACD,CArED;;AAsEA,eAAeV,uBAAf","sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Uses the Tridiagonal Matrix Algorithm, also known as the Thomas Algorithm, to solve\n * a system of linear equations where the coefficient matrix is a tridiagonal matrix.\n *\n * @exports TridiagonalSystemSolver\n */\nvar TridiagonalSystemSolver = {};\n\n/**\n * Solves a tridiagonal system of linear equations.\n *\n * @param {Number[]} diagonal An array with length <code>n</code> that contains the diagonal of the coefficient matrix.\n * @param {Number[]} lower An array with length <code>n - 1</code> that contains the lower diagonal of the coefficient matrix.\n * @param {Number[]} upper An array with length <code>n - 1</code> that contains the upper diagonal of the coefficient matrix.\n * @param {Cartesian3[]} right An array of Cartesians with length <code>n</code> that is the right side of the system of equations.\n *\n * @exception {DeveloperError} diagonal and right must have the same lengths.\n * @exception {DeveloperError} lower and upper must have the same lengths.\n * @exception {DeveloperError} lower and upper must be one less than the length of diagonal.\n *\n * @performance Linear time.\n *\n * @example\n * var lowerDiagonal = [1.0, 1.0, 1.0, 1.0];\n * var diagonal = [2.0, 4.0, 4.0, 4.0, 2.0];\n * var upperDiagonal = [1.0, 1.0, 1.0, 1.0];\n * var rightHandSide = [\n *     new Cesium.Cartesian3(410757.0, -1595711.0, 1375302.0),\n *     new Cesium.Cartesian3(-5986705.0, -2190640.0, 1099600.0),\n *     new Cesium.Cartesian3(-12593180.0, 288588.0, -1755549.0),\n *     new Cesium.Cartesian3(-5349898.0, 2457005.0, -2685438.0),\n *     new Cesium.Cartesian3(845820.0, 1573488.0, -1205591.0)\n * ];\n *\n * var solution = Cesium.TridiagonalSystemSolver.solve(lowerDiagonal, diagonal, upperDiagonal, rightHandSide);\n *\n * @returns {Cartesian3[]} An array of Cartesians with length <code>n</code> that is the solution to the tridiagonal system of equations.\n */\nTridiagonalSystemSolver.solve = function (lower, diagonal, upper, right) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(lower) || !(lower instanceof Array)) {\n    throw new DeveloperError(\"The array lower is required.\");\n  }\n  if (!defined(diagonal) || !(diagonal instanceof Array)) {\n    throw new DeveloperError(\"The array diagonal is required.\");\n  }\n  if (!defined(upper) || !(upper instanceof Array)) {\n    throw new DeveloperError(\"The array upper is required.\");\n  }\n  if (!defined(right) || !(right instanceof Array)) {\n    throw new DeveloperError(\"The array right is required.\");\n  }\n  if (diagonal.length !== right.length) {\n    throw new DeveloperError(\"diagonal and right must have the same lengths.\");\n  }\n  if (lower.length !== upper.length) {\n    throw new DeveloperError(\"lower and upper must have the same lengths.\");\n  } else if (lower.length !== diagonal.length - 1) {\n    throw new DeveloperError(\n      \"lower and upper must be one less than the length of diagonal.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var c = new Array(upper.length);\n  var d = new Array(right.length);\n  var x = new Array(right.length);\n\n  var i;\n  for (i = 0; i < d.length; i++) {\n    d[i] = new Cartesian3();\n    x[i] = new Cartesian3();\n  }\n\n  c[0] = upper[0] / diagonal[0];\n  d[0] = Cartesian3.multiplyByScalar(right[0], 1.0 / diagonal[0], d[0]);\n\n  var scalar;\n  for (i = 1; i < c.length; ++i) {\n    scalar = 1.0 / (diagonal[i] - c[i - 1] * lower[i - 1]);\n    c[i] = upper[i] * scalar;\n    d[i] = Cartesian3.subtract(\n      right[i],\n      Cartesian3.multiplyByScalar(d[i - 1], lower[i - 1], d[i]),\n      d[i]\n    );\n    d[i] = Cartesian3.multiplyByScalar(d[i], scalar, d[i]);\n  }\n\n  scalar = 1.0 / (diagonal[i] - c[i - 1] * lower[i - 1]);\n  d[i] = Cartesian3.subtract(\n    right[i],\n    Cartesian3.multiplyByScalar(d[i - 1], lower[i - 1], d[i]),\n    d[i]\n  );\n  d[i] = Cartesian3.multiplyByScalar(d[i], scalar, d[i]);\n\n  x[x.length - 1] = d[d.length - 1];\n  for (i = x.length - 2; i >= 0; --i) {\n    x[i] = Cartesian3.subtract(\n      d[i],\n      Cartesian3.multiplyByScalar(x[i + 1], c[i], x[i]),\n      x[i]\n    );\n  }\n\n  return x;\n};\nexport default TridiagonalSystemSolver;\n"]},"metadata":{},"sourceType":"module"}