{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport VertexFormat from \"../Core/VertexFormat.js\";\nimport PerInstanceColorAppearanceFS from \"../Shaders/Appearances/PerInstanceColorAppearanceFS.js\";\nimport PerInstanceColorAppearanceVS from \"../Shaders/Appearances/PerInstanceColorAppearanceVS.js\";\nimport PerInstanceFlatColorAppearanceFS from \"../Shaders/Appearances/PerInstanceFlatColorAppearanceFS.js\";\nimport PerInstanceFlatColorAppearanceVS from \"../Shaders/Appearances/PerInstanceFlatColorAppearanceVS.js\";\nimport Appearance from \"./Appearance.js\";\n/**\n * An appearance for {@link GeometryInstance} instances with color attributes.\n * This allows several geometry instances, each with a different color, to\n * be drawn with the same {@link Primitive} as shown in the second example below.\n *\n * @alias PerInstanceColorAppearance\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.flat=false] When <code>true</code>, flat shading is used in the fragment shader, which means lighting is not taking into account.\n * @param {Boolean} [options.faceForward=!options.closed] When <code>true</code>, the fragment shader flips the surface normal as needed to ensure that the normal faces the viewer to avoid dark spots.  This is useful when both sides of a geometry should be shaded like {@link WallGeometry}.\n * @param {Boolean} [options.translucent=true] When <code>true</code>, the geometry is expected to appear translucent so {@link PerInstanceColorAppearance#renderState} has alpha blending enabled.\n * @param {Boolean} [options.closed=false] When <code>true</code>, the geometry is expected to be closed so {@link PerInstanceColorAppearance#renderState} has backface culling enabled.\n * @param {String} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n * @param {String} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n * @param {RenderState} [options.renderState] Optional render state to override the default render state.\n *\n * @example\n * // A solid white line segment\n * var primitive = new Cesium.Primitive({\n *   geometryInstances : new Cesium.GeometryInstance({\n *     geometry : new Cesium.SimplePolylineGeometry({\n *       positions : Cesium.Cartesian3.fromDegreesArray([\n *         0.0, 0.0,\n *         5.0, 0.0\n *       ])\n *     }),\n *     attributes : {\n *       color : Cesium.ColorGeometryInstanceAttribute.fromColor(new Cesium.Color(1.0, 1.0, 1.0, 1.0))\n *     }\n *   }),\n *   appearance : new Cesium.PerInstanceColorAppearance({\n *     flat : true,\n *     translucent : false\n *   })\n * });\n *\n * // Two rectangles in a primitive, each with a different color\n * var instance = new Cesium.GeometryInstance({\n *   geometry : new Cesium.RectangleGeometry({\n *     rectangle : Cesium.Rectangle.fromDegrees(0.0, 20.0, 10.0, 30.0)\n *   }),\n *   attributes : {\n *     color : new Cesium.ColorGeometryInstanceAttribute(1.0, 0.0, 0.0, 0.5)\n *   }\n * });\n *\n * var anotherInstance = new Cesium.GeometryInstance({\n *   geometry : new Cesium.RectangleGeometry({\n *     rectangle : Cesium.Rectangle.fromDegrees(0.0, 40.0, 10.0, 50.0)\n *   }),\n *   attributes : {\n *     color : new Cesium.ColorGeometryInstanceAttribute(0.0, 0.0, 1.0, 0.5)\n *   }\n * });\n *\n * var rectanglePrimitive = new Cesium.Primitive({\n *   geometryInstances : [instance, anotherInstance],\n *   appearance : new Cesium.PerInstanceColorAppearance()\n * });\n */\n\nfunction PerInstanceColorAppearance(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var translucent = defaultValue(options.translucent, true);\n  var closed = defaultValue(options.closed, false);\n  var flat = defaultValue(options.flat, false);\n  var vs = flat ? PerInstanceFlatColorAppearanceVS : PerInstanceColorAppearanceVS;\n  var fs = flat ? PerInstanceFlatColorAppearanceFS : PerInstanceColorAppearanceFS;\n  var vertexFormat = flat ? PerInstanceColorAppearance.FLAT_VERTEX_FORMAT : PerInstanceColorAppearance.VERTEX_FORMAT;\n  /**\n   * This property is part of the {@link Appearance} interface, but is not\n   * used by {@link PerInstanceColorAppearance} since a fully custom fragment shader is used.\n   *\n   * @type Material\n   *\n   * @default undefined\n   */\n\n  this.material = undefined;\n  /**\n   * When <code>true</code>, the geometry is expected to appear translucent so\n   * {@link PerInstanceColorAppearance#renderState} has alpha blending enabled.\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n\n  this.translucent = translucent;\n  this._vertexShaderSource = defaultValue(options.vertexShaderSource, vs);\n  this._fragmentShaderSource = defaultValue(options.fragmentShaderSource, fs);\n  this._renderState = Appearance.getDefaultRenderState(translucent, closed, options.renderState);\n  this._closed = closed; // Non-derived members\n\n  this._vertexFormat = vertexFormat;\n  this._flat = flat;\n  this._faceForward = defaultValue(options.faceForward, !closed);\n}\n\nObject.defineProperties(PerInstanceColorAppearance.prototype, {\n  /**\n   * The GLSL source code for the vertex shader.\n   *\n   * @memberof PerInstanceColorAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  vertexShaderSource: {\n    get: function () {\n      return this._vertexShaderSource;\n    }\n  },\n\n  /**\n   * The GLSL source code for the fragment shader.\n   *\n   * @memberof PerInstanceColorAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  fragmentShaderSource: {\n    get: function () {\n      return this._fragmentShaderSource;\n    }\n  },\n\n  /**\n   * The WebGL fixed-function state to use when rendering the geometry.\n   * <p>\n   * The render state can be explicitly defined when constructing a {@link PerInstanceColorAppearance}\n   * instance, or it is set implicitly via {@link PerInstanceColorAppearance#translucent}\n   * and {@link PerInstanceColorAppearance#closed}.\n   * </p>\n   *\n   * @memberof PerInstanceColorAppearance.prototype\n   *\n   * @type {Object}\n   * @readonly\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    }\n  },\n\n  /**\n   * When <code>true</code>, the geometry is expected to be closed so\n   * {@link PerInstanceColorAppearance#renderState} has backface culling enabled.\n   * If the viewer enters the geometry, it will not be visible.\n   *\n   * @memberof PerInstanceColorAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  closed: {\n    get: function () {\n      return this._closed;\n    }\n  },\n\n  /**\n   * The {@link VertexFormat} that this appearance instance is compatible with.\n   * A geometry can have more vertex attributes and still be compatible - at a\n   * potential performance cost - but it can't have less.\n   *\n   * @memberof PerInstanceColorAppearance.prototype\n   *\n   * @type VertexFormat\n   * @readonly\n   */\n  vertexFormat: {\n    get: function () {\n      return this._vertexFormat;\n    }\n  },\n\n  /**\n   * When <code>true</code>, flat shading is used in the fragment shader,\n   * which means lighting is not taking into account.\n   *\n   * @memberof PerInstanceColorAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  flat: {\n    get: function () {\n      return this._flat;\n    }\n  },\n\n  /**\n   * When <code>true</code>, the fragment shader flips the surface normal\n   * as needed to ensure that the normal faces the viewer to avoid\n   * dark spots.  This is useful when both sides of a geometry should be\n   * shaded like {@link WallGeometry}.\n   *\n   * @memberof PerInstanceColorAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  faceForward: {\n    get: function () {\n      return this._faceForward;\n    }\n  }\n});\n/**\n * The {@link VertexFormat} that all {@link PerInstanceColorAppearance} instances\n * are compatible with.  This requires only <code>position</code> and <code>normal</code>\n * attributes.\n *\n * @type VertexFormat\n *\n * @constant\n */\n\nPerInstanceColorAppearance.VERTEX_FORMAT = VertexFormat.POSITION_AND_NORMAL;\n/**\n * The {@link VertexFormat} that all {@link PerInstanceColorAppearance} instances\n * are compatible with when {@link PerInstanceColorAppearance#flat} is <code>true</code>.\n * This requires only a <code>position</code> attribute.\n *\n * @type VertexFormat\n *\n * @constant\n */\n\nPerInstanceColorAppearance.FLAT_VERTEX_FORMAT = VertexFormat.POSITION_ONLY;\n/**\n * Procedurally creates the full GLSL fragment shader source.  For {@link PerInstanceColorAppearance},\n * this is derived from {@link PerInstanceColorAppearance#fragmentShaderSource}, {@link PerInstanceColorAppearance#flat},\n * and {@link PerInstanceColorAppearance#faceForward}.\n *\n * @function\n *\n * @returns {String} The full GLSL fragment shader source.\n */\n\nPerInstanceColorAppearance.prototype.getFragmentShaderSource = Appearance.prototype.getFragmentShaderSource;\n/**\n * Determines if the geometry is translucent based on {@link PerInstanceColorAppearance#translucent}.\n *\n * @function\n *\n * @returns {Boolean} <code>true</code> if the appearance is translucent.\n */\n\nPerInstanceColorAppearance.prototype.isTranslucent = Appearance.prototype.isTranslucent;\n/**\n * Creates a render state.  This is not the final render state instance; instead,\n * it can contain a subset of render state properties identical to the render state\n * created in the context.\n *\n * @function\n *\n * @returns {Object} The render state.\n */\n\nPerInstanceColorAppearance.prototype.getRenderState = Appearance.prototype.getRenderState;\nexport default PerInstanceColorAppearance;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Scene/PerInstanceColorAppearance.js"],"names":["defaultValue","VertexFormat","PerInstanceColorAppearanceFS","PerInstanceColorAppearanceVS","PerInstanceFlatColorAppearanceFS","PerInstanceFlatColorAppearanceVS","Appearance","PerInstanceColorAppearance","options","EMPTY_OBJECT","translucent","closed","flat","vs","fs","vertexFormat","FLAT_VERTEX_FORMAT","VERTEX_FORMAT","material","undefined","_vertexShaderSource","vertexShaderSource","_fragmentShaderSource","fragmentShaderSource","_renderState","getDefaultRenderState","renderState","_closed","_vertexFormat","_flat","_faceForward","faceForward","Object","defineProperties","prototype","get","POSITION_AND_NORMAL","POSITION_ONLY","getFragmentShaderSource","isTranslucent","getRenderState"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,yBAAzB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,4BAAP,MAAyC,wDAAzC;AACA,OAAOC,4BAAP,MAAyC,wDAAzC;AACA,OAAOC,gCAAP,MAA6C,4DAA7C;AACA,OAAOC,gCAAP,MAA6C,4DAA7C;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA,SAASC,0BAAT,CAAoCC,OAApC,EAA6C;AAC3CA,EAAAA,OAAO,GAAGR,YAAY,CAACQ,OAAD,EAAUR,YAAY,CAACS,YAAvB,CAAtB;AAEA,MAAIC,WAAW,GAAGV,YAAY,CAACQ,OAAO,CAACE,WAAT,EAAsB,IAAtB,CAA9B;AACA,MAAIC,MAAM,GAAGX,YAAY,CAACQ,OAAO,CAACG,MAAT,EAAiB,KAAjB,CAAzB;AACA,MAAIC,IAAI,GAAGZ,YAAY,CAACQ,OAAO,CAACI,IAAT,EAAe,KAAf,CAAvB;AACA,MAAIC,EAAE,GAAGD,IAAI,GACTP,gCADS,GAETF,4BAFJ;AAGA,MAAIW,EAAE,GAAGF,IAAI,GACTR,gCADS,GAETF,4BAFJ;AAGA,MAAIa,YAAY,GAAGH,IAAI,GACnBL,0BAA0B,CAACS,kBADR,GAEnBT,0BAA0B,CAACU,aAF/B;AAIA;;;;;;;;;AAQA,OAAKC,QAAL,GAAgBC,SAAhB;AAEA;;;;;;;;;AAQA,OAAKT,WAAL,GAAmBA,WAAnB;AAEA,OAAKU,mBAAL,GAA2BpB,YAAY,CAACQ,OAAO,CAACa,kBAAT,EAA6BR,EAA7B,CAAvC;AACA,OAAKS,qBAAL,GAA6BtB,YAAY,CAACQ,OAAO,CAACe,oBAAT,EAA+BT,EAA/B,CAAzC;AACA,OAAKU,YAAL,GAAoBlB,UAAU,CAACmB,qBAAX,CAClBf,WADkB,EAElBC,MAFkB,EAGlBH,OAAO,CAACkB,WAHU,CAApB;AAKA,OAAKC,OAAL,GAAehB,MAAf,CA3C2C,CA6C3C;;AAEA,OAAKiB,aAAL,GAAqBb,YAArB;AACA,OAAKc,KAAL,GAAajB,IAAb;AACA,OAAKkB,YAAL,GAAoB9B,YAAY,CAACQ,OAAO,CAACuB,WAAT,EAAsB,CAACpB,MAAvB,CAAhC;AACD;;AAEDqB,MAAM,CAACC,gBAAP,CAAwB1B,0BAA0B,CAAC2B,SAAnD,EAA8D;AAC5D;;;;;;;;AAQAb,EAAAA,kBAAkB,EAAE;AAClBc,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKf,mBAAZ;AACD;AAHiB,GATwC;;AAe5D;;;;;;;;AAQAG,EAAAA,oBAAoB,EAAE;AACpBY,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKb,qBAAZ;AACD;AAHmB,GAvBsC;;AA6B5D;;;;;;;;;;;;;AAaAI,EAAAA,WAAW,EAAE;AACXS,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKX,YAAZ;AACD;AAHU,GA1C+C;;AAgD5D;;;;;;;;;;;;AAYAb,EAAAA,MAAM,EAAE;AACNwB,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKR,OAAZ;AACD;AAHK,GA5DoD;;AAkE5D;;;;;;;;;;AAUAZ,EAAAA,YAAY,EAAE;AACZoB,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKP,aAAZ;AACD;AAHW,GA5E8C;;AAkF5D;;;;;;;;;;;AAWAhB,EAAAA,IAAI,EAAE;AACJuB,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKN,KAAZ;AACD;AAHG,GA7FsD;;AAmG5D;;;;;;;;;;;;;AAaAE,EAAAA,WAAW,EAAE;AACXI,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKL,YAAZ;AACD;AAHU;AAhH+C,CAA9D;AAuHA;;;;;;;;;;AASAvB,0BAA0B,CAACU,aAA3B,GAA2ChB,YAAY,CAACmC,mBAAxD;AAEA;;;;;;;;;;AASA7B,0BAA0B,CAACS,kBAA3B,GAAgDf,YAAY,CAACoC,aAA7D;AAEA;;;;;;;;;;AASA9B,0BAA0B,CAAC2B,SAA3B,CAAqCI,uBAArC,GACEhC,UAAU,CAAC4B,SAAX,CAAqBI,uBADvB;AAGA;;;;;;;;AAOA/B,0BAA0B,CAAC2B,SAA3B,CAAqCK,aAArC,GACEjC,UAAU,CAAC4B,SAAX,CAAqBK,aADvB;AAGA;;;;;;;;;;AASAhC,0BAA0B,CAAC2B,SAA3B,CAAqCM,cAArC,GACElC,UAAU,CAAC4B,SAAX,CAAqBM,cADvB;AAEA,eAAejC,0BAAf","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport VertexFormat from \"../Core/VertexFormat.js\";\nimport PerInstanceColorAppearanceFS from \"../Shaders/Appearances/PerInstanceColorAppearanceFS.js\";\nimport PerInstanceColorAppearanceVS from \"../Shaders/Appearances/PerInstanceColorAppearanceVS.js\";\nimport PerInstanceFlatColorAppearanceFS from \"../Shaders/Appearances/PerInstanceFlatColorAppearanceFS.js\";\nimport PerInstanceFlatColorAppearanceVS from \"../Shaders/Appearances/PerInstanceFlatColorAppearanceVS.js\";\nimport Appearance from \"./Appearance.js\";\n\n/**\n * An appearance for {@link GeometryInstance} instances with color attributes.\n * This allows several geometry instances, each with a different color, to\n * be drawn with the same {@link Primitive} as shown in the second example below.\n *\n * @alias PerInstanceColorAppearance\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.flat=false] When <code>true</code>, flat shading is used in the fragment shader, which means lighting is not taking into account.\n * @param {Boolean} [options.faceForward=!options.closed] When <code>true</code>, the fragment shader flips the surface normal as needed to ensure that the normal faces the viewer to avoid dark spots.  This is useful when both sides of a geometry should be shaded like {@link WallGeometry}.\n * @param {Boolean} [options.translucent=true] When <code>true</code>, the geometry is expected to appear translucent so {@link PerInstanceColorAppearance#renderState} has alpha blending enabled.\n * @param {Boolean} [options.closed=false] When <code>true</code>, the geometry is expected to be closed so {@link PerInstanceColorAppearance#renderState} has backface culling enabled.\n * @param {String} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n * @param {String} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n * @param {RenderState} [options.renderState] Optional render state to override the default render state.\n *\n * @example\n * // A solid white line segment\n * var primitive = new Cesium.Primitive({\n *   geometryInstances : new Cesium.GeometryInstance({\n *     geometry : new Cesium.SimplePolylineGeometry({\n *       positions : Cesium.Cartesian3.fromDegreesArray([\n *         0.0, 0.0,\n *         5.0, 0.0\n *       ])\n *     }),\n *     attributes : {\n *       color : Cesium.ColorGeometryInstanceAttribute.fromColor(new Cesium.Color(1.0, 1.0, 1.0, 1.0))\n *     }\n *   }),\n *   appearance : new Cesium.PerInstanceColorAppearance({\n *     flat : true,\n *     translucent : false\n *   })\n * });\n *\n * // Two rectangles in a primitive, each with a different color\n * var instance = new Cesium.GeometryInstance({\n *   geometry : new Cesium.RectangleGeometry({\n *     rectangle : Cesium.Rectangle.fromDegrees(0.0, 20.0, 10.0, 30.0)\n *   }),\n *   attributes : {\n *     color : new Cesium.ColorGeometryInstanceAttribute(1.0, 0.0, 0.0, 0.5)\n *   }\n * });\n *\n * var anotherInstance = new Cesium.GeometryInstance({\n *   geometry : new Cesium.RectangleGeometry({\n *     rectangle : Cesium.Rectangle.fromDegrees(0.0, 40.0, 10.0, 50.0)\n *   }),\n *   attributes : {\n *     color : new Cesium.ColorGeometryInstanceAttribute(0.0, 0.0, 1.0, 0.5)\n *   }\n * });\n *\n * var rectanglePrimitive = new Cesium.Primitive({\n *   geometryInstances : [instance, anotherInstance],\n *   appearance : new Cesium.PerInstanceColorAppearance()\n * });\n */\nfunction PerInstanceColorAppearance(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var translucent = defaultValue(options.translucent, true);\n  var closed = defaultValue(options.closed, false);\n  var flat = defaultValue(options.flat, false);\n  var vs = flat\n    ? PerInstanceFlatColorAppearanceVS\n    : PerInstanceColorAppearanceVS;\n  var fs = flat\n    ? PerInstanceFlatColorAppearanceFS\n    : PerInstanceColorAppearanceFS;\n  var vertexFormat = flat\n    ? PerInstanceColorAppearance.FLAT_VERTEX_FORMAT\n    : PerInstanceColorAppearance.VERTEX_FORMAT;\n\n  /**\n   * This property is part of the {@link Appearance} interface, but is not\n   * used by {@link PerInstanceColorAppearance} since a fully custom fragment shader is used.\n   *\n   * @type Material\n   *\n   * @default undefined\n   */\n  this.material = undefined;\n\n  /**\n   * When <code>true</code>, the geometry is expected to appear translucent so\n   * {@link PerInstanceColorAppearance#renderState} has alpha blending enabled.\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  this.translucent = translucent;\n\n  this._vertexShaderSource = defaultValue(options.vertexShaderSource, vs);\n  this._fragmentShaderSource = defaultValue(options.fragmentShaderSource, fs);\n  this._renderState = Appearance.getDefaultRenderState(\n    translucent,\n    closed,\n    options.renderState\n  );\n  this._closed = closed;\n\n  // Non-derived members\n\n  this._vertexFormat = vertexFormat;\n  this._flat = flat;\n  this._faceForward = defaultValue(options.faceForward, !closed);\n}\n\nObject.defineProperties(PerInstanceColorAppearance.prototype, {\n  /**\n   * The GLSL source code for the vertex shader.\n   *\n   * @memberof PerInstanceColorAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  vertexShaderSource: {\n    get: function () {\n      return this._vertexShaderSource;\n    },\n  },\n\n  /**\n   * The GLSL source code for the fragment shader.\n   *\n   * @memberof PerInstanceColorAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  fragmentShaderSource: {\n    get: function () {\n      return this._fragmentShaderSource;\n    },\n  },\n\n  /**\n   * The WebGL fixed-function state to use when rendering the geometry.\n   * <p>\n   * The render state can be explicitly defined when constructing a {@link PerInstanceColorAppearance}\n   * instance, or it is set implicitly via {@link PerInstanceColorAppearance#translucent}\n   * and {@link PerInstanceColorAppearance#closed}.\n   * </p>\n   *\n   * @memberof PerInstanceColorAppearance.prototype\n   *\n   * @type {Object}\n   * @readonly\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the geometry is expected to be closed so\n   * {@link PerInstanceColorAppearance#renderState} has backface culling enabled.\n   * If the viewer enters the geometry, it will not be visible.\n   *\n   * @memberof PerInstanceColorAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  closed: {\n    get: function () {\n      return this._closed;\n    },\n  },\n\n  /**\n   * The {@link VertexFormat} that this appearance instance is compatible with.\n   * A geometry can have more vertex attributes and still be compatible - at a\n   * potential performance cost - but it can't have less.\n   *\n   * @memberof PerInstanceColorAppearance.prototype\n   *\n   * @type VertexFormat\n   * @readonly\n   */\n  vertexFormat: {\n    get: function () {\n      return this._vertexFormat;\n    },\n  },\n\n  /**\n   * When <code>true</code>, flat shading is used in the fragment shader,\n   * which means lighting is not taking into account.\n   *\n   * @memberof PerInstanceColorAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  flat: {\n    get: function () {\n      return this._flat;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the fragment shader flips the surface normal\n   * as needed to ensure that the normal faces the viewer to avoid\n   * dark spots.  This is useful when both sides of a geometry should be\n   * shaded like {@link WallGeometry}.\n   *\n   * @memberof PerInstanceColorAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  faceForward: {\n    get: function () {\n      return this._faceForward;\n    },\n  },\n});\n\n/**\n * The {@link VertexFormat} that all {@link PerInstanceColorAppearance} instances\n * are compatible with.  This requires only <code>position</code> and <code>normal</code>\n * attributes.\n *\n * @type VertexFormat\n *\n * @constant\n */\nPerInstanceColorAppearance.VERTEX_FORMAT = VertexFormat.POSITION_AND_NORMAL;\n\n/**\n * The {@link VertexFormat} that all {@link PerInstanceColorAppearance} instances\n * are compatible with when {@link PerInstanceColorAppearance#flat} is <code>true</code>.\n * This requires only a <code>position</code> attribute.\n *\n * @type VertexFormat\n *\n * @constant\n */\nPerInstanceColorAppearance.FLAT_VERTEX_FORMAT = VertexFormat.POSITION_ONLY;\n\n/**\n * Procedurally creates the full GLSL fragment shader source.  For {@link PerInstanceColorAppearance},\n * this is derived from {@link PerInstanceColorAppearance#fragmentShaderSource}, {@link PerInstanceColorAppearance#flat},\n * and {@link PerInstanceColorAppearance#faceForward}.\n *\n * @function\n *\n * @returns {String} The full GLSL fragment shader source.\n */\nPerInstanceColorAppearance.prototype.getFragmentShaderSource =\n  Appearance.prototype.getFragmentShaderSource;\n\n/**\n * Determines if the geometry is translucent based on {@link PerInstanceColorAppearance#translucent}.\n *\n * @function\n *\n * @returns {Boolean} <code>true</code> if the appearance is translucent.\n */\nPerInstanceColorAppearance.prototype.isTranslucent =\n  Appearance.prototype.isTranslucent;\n\n/**\n * Creates a render state.  This is not the final render state instance; instead,\n * it can contain a subset of render state properties identical to the render state\n * created in the context.\n *\n * @function\n *\n * @returns {Object} The render state.\n */\nPerInstanceColorAppearance.prototype.getRenderState =\n  Appearance.prototype.getRenderState;\nexport default PerInstanceColorAppearance;\n"]},"metadata":{},"sourceType":"module"}