{"ast":null,"code":"import ApproximateTerrainHeights from \"../Core/ApproximateTerrainHeights.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport GroundPolylinePrimitive from \"../Scene/GroundPolylinePrimitive.js\";\nimport GroundPrimitive from \"../Scene/GroundPrimitive.js\";\nimport OrderedGroundPrimitiveCollection from \"../Scene/OrderedGroundPrimitiveCollection.js\";\nimport PrimitiveCollection from \"../Scene/PrimitiveCollection.js\";\nimport BillboardVisualizer from \"./BillboardVisualizer.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport CustomDataSource from \"./CustomDataSource.js\";\nimport GeometryVisualizer from \"./GeometryVisualizer.js\";\nimport LabelVisualizer from \"./LabelVisualizer.js\";\nimport ModelVisualizer from \"./ModelVisualizer.js\";\nimport Cesium3DTilesetVisualizer from \"./Cesium3DTilesetVisualizer.js\";\nimport PathVisualizer from \"./PathVisualizer.js\";\nimport PointVisualizer from \"./PointVisualizer.js\";\nimport PolylineVisualizer from \"./PolylineVisualizer.js\";\n/**\n * Visualizes a collection of {@link DataSource} instances.\n * @alias DataSourceDisplay\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Scene} options.scene The scene in which to display the data.\n * @param {DataSourceCollection} options.dataSourceCollection The data sources to display.\n * @param {DataSourceDisplay~VisualizersCallback} [options.visualizersCallback=DataSourceDisplay.defaultVisualizersCallback]\n *        A function which creates an array of visualizers used for visualization.\n *        If undefined, all standard visualizers are used.\n */\n\nfunction DataSourceDisplay(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options\", options);\n  Check.typeOf.object(\"options.scene\", options.scene);\n  Check.typeOf.object(\"options.dataSourceCollection\", options.dataSourceCollection); //>>includeEnd('debug');\n\n  GroundPrimitive.initializeTerrainHeights();\n  GroundPolylinePrimitive.initializeTerrainHeights();\n  var scene = options.scene;\n  var dataSourceCollection = options.dataSourceCollection;\n  this._eventHelper = new EventHelper();\n\n  this._eventHelper.add(dataSourceCollection.dataSourceAdded, this._onDataSourceAdded, this);\n\n  this._eventHelper.add(dataSourceCollection.dataSourceRemoved, this._onDataSourceRemoved, this);\n\n  this._eventHelper.add(dataSourceCollection.dataSourceMoved, this._onDataSourceMoved, this);\n\n  this._eventHelper.add(scene.postRender, this._postRender, this);\n\n  this._dataSourceCollection = dataSourceCollection;\n  this._scene = scene;\n  this._visualizersCallback = defaultValue(options.visualizersCallback, DataSourceDisplay.defaultVisualizersCallback);\n  var primitivesAdded = false;\n  var primitives = new PrimitiveCollection();\n  var groundPrimitives = new PrimitiveCollection();\n\n  if (dataSourceCollection.length > 0) {\n    scene.primitives.add(primitives);\n    scene.groundPrimitives.add(groundPrimitives);\n    primitivesAdded = true;\n  }\n\n  this._primitives = primitives;\n  this._groundPrimitives = groundPrimitives;\n\n  for (var i = 0, len = dataSourceCollection.length; i < len; i++) {\n    this._onDataSourceAdded(dataSourceCollection, dataSourceCollection.get(i));\n  }\n\n  var defaultDataSource = new CustomDataSource();\n\n  this._onDataSourceAdded(undefined, defaultDataSource);\n\n  this._defaultDataSource = defaultDataSource;\n  var removeDefaultDataSourceListener;\n  var removeDataSourceCollectionListener;\n\n  if (!primitivesAdded) {\n    var that = this;\n\n    var addPrimitives = function () {\n      scene.primitives.add(primitives);\n      scene.groundPrimitives.add(groundPrimitives);\n      removeDefaultDataSourceListener();\n      removeDataSourceCollectionListener();\n      that._removeDefaultDataSourceListener = undefined;\n      that._removeDataSourceCollectionListener = undefined;\n    };\n\n    removeDefaultDataSourceListener = defaultDataSource.entities.collectionChanged.addEventListener(addPrimitives);\n    removeDataSourceCollectionListener = dataSourceCollection.dataSourceAdded.addEventListener(addPrimitives);\n  }\n\n  this._removeDefaultDataSourceListener = removeDefaultDataSourceListener;\n  this._removeDataSourceCollectionListener = removeDataSourceCollectionListener;\n  this._ready = false;\n}\n/**\n * Gets or sets the default function which creates an array of visualizers used for visualization.\n * By default, this function uses all standard visualizers.\n *\n * @type {DataSourceDisplay~VisualizersCallback}\n */\n\n\nDataSourceDisplay.defaultVisualizersCallback = function (scene, entityCluster, dataSource) {\n  var entities = dataSource.entities;\n  return [new BillboardVisualizer(entityCluster, entities), new GeometryVisualizer(scene, entities, dataSource._primitives, dataSource._groundPrimitives), new LabelVisualizer(entityCluster, entities), new ModelVisualizer(scene, entities), new Cesium3DTilesetVisualizer(scene, entities), new PointVisualizer(entityCluster, entities), new PathVisualizer(scene, entities), new PolylineVisualizer(scene, entities, dataSource._primitives, dataSource._groundPrimitives)];\n};\n\nObject.defineProperties(DataSourceDisplay.prototype, {\n  /**\n   * Gets the scene associated with this display.\n   * @memberof DataSourceDisplay.prototype\n   * @type {Scene}\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    }\n  },\n\n  /**\n   * Gets the collection of data sources to display.\n   * @memberof DataSourceDisplay.prototype\n   * @type {DataSourceCollection}\n   */\n  dataSources: {\n    get: function () {\n      return this._dataSourceCollection;\n    }\n  },\n\n  /**\n   * Gets the default data source instance which can be used to\n   * manually create and visualize entities not tied to\n   * a specific data source. This instance is always available\n   * and does not appear in the list dataSources collection.\n   * @memberof DataSourceDisplay.prototype\n   * @type {CustomDataSource}\n   */\n  defaultDataSource: {\n    get: function () {\n      return this._defaultDataSource;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not all entities in the data source are ready\n   * @memberof DataSourceDisplay.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    }\n  }\n});\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see DataSourceDisplay#destroy\n */\n\nDataSourceDisplay.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * dataSourceDisplay = dataSourceDisplay.destroy();\n *\n * @see DataSourceDisplay#isDestroyed\n */\n\n\nDataSourceDisplay.prototype.destroy = function () {\n  this._eventHelper.removeAll();\n\n  var dataSourceCollection = this._dataSourceCollection;\n\n  for (var i = 0, length = dataSourceCollection.length; i < length; ++i) {\n    this._onDataSourceRemoved(this._dataSourceCollection, dataSourceCollection.get(i));\n  }\n\n  this._onDataSourceRemoved(undefined, this._defaultDataSource);\n\n  if (defined(this._removeDefaultDataSourceListener)) {\n    this._removeDefaultDataSourceListener();\n\n    this._removeDataSourceCollectionListener();\n  } else {\n    this._scene.primitives.remove(this._primitives);\n\n    this._scene.groundPrimitives.remove(this._groundPrimitives);\n  }\n\n  return destroyObject(this);\n};\n/**\n * Updates the display to the provided time.\n *\n * @param {JulianDate} time The simulation time.\n * @returns {Boolean} True if all data sources are ready to be displayed, false otherwise.\n */\n\n\nDataSourceDisplay.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time); //>>includeEnd('debug');\n\n  if (!ApproximateTerrainHeights.initialized) {\n    this._ready = false;\n    return false;\n  }\n\n  var result = true;\n  var i;\n  var x;\n  var visualizers;\n  var vLength;\n  var dataSources = this._dataSourceCollection;\n  var length = dataSources.length;\n\n  for (i = 0; i < length; i++) {\n    var dataSource = dataSources.get(i);\n\n    if (defined(dataSource.update)) {\n      result = dataSource.update(time) && result;\n    }\n\n    visualizers = dataSource._visualizers;\n    vLength = visualizers.length;\n\n    for (x = 0; x < vLength; x++) {\n      result = visualizers[x].update(time) && result;\n    }\n  }\n\n  visualizers = this._defaultDataSource._visualizers;\n  vLength = visualizers.length;\n\n  for (x = 0; x < vLength; x++) {\n    result = visualizers[x].update(time) && result;\n  }\n\n  this._ready = result;\n  return result;\n};\n\nDataSourceDisplay.prototype._postRender = function () {\n  // Adds credits for all datasources\n  var frameState = this._scene.frameState;\n  var dataSources = this._dataSourceCollection;\n  var length = dataSources.length;\n\n  for (var i = 0; i < length; i++) {\n    var dataSource = dataSources.get(i);\n    var credit = dataSource.credit;\n\n    if (defined(credit)) {\n      frameState.creditDisplay.addCredit(credit);\n    } // Credits from the resource that the user can't remove\n\n\n    var credits = dataSource._resourceCredits;\n\n    if (defined(credits)) {\n      var creditCount = credits.length;\n\n      for (var c = 0; c < creditCount; c++) {\n        frameState.creditDisplay.addCredit(credits[c]);\n      }\n    }\n  }\n};\n\nvar getBoundingSphereArrayScratch = [];\nvar getBoundingSphereBoundingSphereScratch = new BoundingSphere();\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {Boolean} allowPartial If true, pending bounding spheres are ignored and an answer will be returned from the currently available data.\n *                               If false, the the function will halt and return pending if any of the bounding spheres are pending.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\n\nDataSourceDisplay.prototype.getBoundingSphere = function (entity, allowPartial, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"entity\", entity);\n  Check.typeOf.bool(\"allowPartial\", allowPartial);\n  Check.defined(\"result\", result); //>>includeEnd('debug');\n\n  if (!this._ready) {\n    return BoundingSphereState.PENDING;\n  }\n\n  var i;\n  var length;\n  var dataSource = this._defaultDataSource;\n\n  if (!dataSource.entities.contains(entity)) {\n    dataSource = undefined;\n    var dataSources = this._dataSourceCollection;\n    length = dataSources.length;\n\n    for (i = 0; i < length; i++) {\n      var d = dataSources.get(i);\n\n      if (d.entities.contains(entity)) {\n        dataSource = d;\n        break;\n      }\n    }\n  }\n\n  if (!defined(dataSource)) {\n    return BoundingSphereState.FAILED;\n  }\n\n  var boundingSpheres = getBoundingSphereArrayScratch;\n  var tmp = getBoundingSphereBoundingSphereScratch;\n  var count = 0;\n  var state = BoundingSphereState.DONE;\n  var visualizers = dataSource._visualizers;\n  var visualizersLength = visualizers.length;\n\n  for (i = 0; i < visualizersLength; i++) {\n    var visualizer = visualizers[i];\n\n    if (defined(visualizer.getBoundingSphere)) {\n      state = visualizers[i].getBoundingSphere(entity, tmp);\n\n      if (!allowPartial && state === BoundingSphereState.PENDING) {\n        return BoundingSphereState.PENDING;\n      } else if (state === BoundingSphereState.DONE) {\n        boundingSpheres[count] = BoundingSphere.clone(tmp, boundingSpheres[count]);\n        count++;\n      }\n    }\n  }\n\n  if (count === 0) {\n    return BoundingSphereState.FAILED;\n  }\n\n  boundingSpheres.length = count;\n  BoundingSphere.fromBoundingSpheres(boundingSpheres, result);\n  return BoundingSphereState.DONE;\n};\n\nDataSourceDisplay.prototype._onDataSourceAdded = function (dataSourceCollection, dataSource) {\n  var scene = this._scene;\n  var displayPrimitives = this._primitives;\n  var displayGroundPrimitives = this._groundPrimitives;\n  var primitives = displayPrimitives.add(new PrimitiveCollection());\n  var groundPrimitives = displayGroundPrimitives.add(new OrderedGroundPrimitiveCollection());\n  dataSource._primitives = primitives;\n  dataSource._groundPrimitives = groundPrimitives;\n  var entityCluster = dataSource.clustering;\n\n  entityCluster._initialize(scene);\n\n  primitives.add(entityCluster);\n  dataSource._visualizers = this._visualizersCallback(scene, entityCluster, dataSource);\n};\n\nDataSourceDisplay.prototype._onDataSourceRemoved = function (dataSourceCollection, dataSource) {\n  var displayPrimitives = this._primitives;\n  var displayGroundPrimitives = this._groundPrimitives;\n  var primitives = dataSource._primitives;\n  var groundPrimitives = dataSource._groundPrimitives;\n  var entityCluster = dataSource.clustering;\n  primitives.remove(entityCluster);\n  var visualizers = dataSource._visualizers;\n  var length = visualizers.length;\n\n  for (var i = 0; i < length; i++) {\n    visualizers[i].destroy();\n  }\n\n  displayPrimitives.remove(primitives);\n  displayGroundPrimitives.remove(groundPrimitives);\n  dataSource._visualizers = undefined;\n};\n\nDataSourceDisplay.prototype._onDataSourceMoved = function (dataSource, newIndex, oldIndex) {\n  var displayPrimitives = this._primitives;\n  var displayGroundPrimitives = this._groundPrimitives;\n  var primitives = dataSource._primitives;\n  var groundPrimitives = dataSource._groundPrimitives;\n\n  if (newIndex === oldIndex + 1) {\n    displayPrimitives.raise(primitives);\n    displayGroundPrimitives.raise(groundPrimitives);\n  } else if (newIndex === oldIndex - 1) {\n    displayPrimitives.lower(primitives);\n    displayGroundPrimitives.lower(groundPrimitives);\n  } else if (newIndex === 0) {\n    displayPrimitives.lowerToBottom(primitives);\n    displayGroundPrimitives.lowerToBottom(groundPrimitives);\n    displayPrimitives.raise(primitives); // keep defaultDataSource primitives at index 0 since it's not in the collection\n\n    displayGroundPrimitives.raise(groundPrimitives);\n  } else {\n    displayPrimitives.raiseToTop(primitives);\n    displayGroundPrimitives.raiseToTop(groundPrimitives);\n  }\n};\n/**\n * A function which creates an array of visualizers used for visualization.\n * @callback DataSourceDisplay~VisualizersCallback\n *\n * @param {Scene} scene The scene to create visualizers for.\n * @param {DataSource} dataSource The data source to create visualizers for.\n * @returns {Visualizer[]} An array of visualizers used for visualization.\n *\n * @example\n * function createVisualizers(scene, dataSource) {\n *     return [new Cesium.BillboardVisualizer(scene, dataSource.entities)];\n * }\n */\n\n\nexport default DataSourceDisplay;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/DataSources/DataSourceDisplay.js"],"names":["ApproximateTerrainHeights","BoundingSphere","Check","defaultValue","defined","destroyObject","EventHelper","GroundPolylinePrimitive","GroundPrimitive","OrderedGroundPrimitiveCollection","PrimitiveCollection","BillboardVisualizer","BoundingSphereState","CustomDataSource","GeometryVisualizer","LabelVisualizer","ModelVisualizer","Cesium3DTilesetVisualizer","PathVisualizer","PointVisualizer","PolylineVisualizer","DataSourceDisplay","options","typeOf","object","scene","dataSourceCollection","initializeTerrainHeights","_eventHelper","add","dataSourceAdded","_onDataSourceAdded","dataSourceRemoved","_onDataSourceRemoved","dataSourceMoved","_onDataSourceMoved","postRender","_postRender","_dataSourceCollection","_scene","_visualizersCallback","visualizersCallback","defaultVisualizersCallback","primitivesAdded","primitives","groundPrimitives","length","_primitives","_groundPrimitives","i","len","get","defaultDataSource","undefined","_defaultDataSource","removeDefaultDataSourceListener","removeDataSourceCollectionListener","that","addPrimitives","_removeDefaultDataSourceListener","_removeDataSourceCollectionListener","entities","collectionChanged","addEventListener","_ready","entityCluster","dataSource","Object","defineProperties","prototype","dataSources","ready","isDestroyed","destroy","removeAll","remove","update","time","initialized","result","x","visualizers","vLength","_visualizers","frameState","credit","creditDisplay","addCredit","credits","_resourceCredits","creditCount","c","getBoundingSphereArrayScratch","getBoundingSphereBoundingSphereScratch","getBoundingSphere","entity","allowPartial","bool","PENDING","contains","d","FAILED","boundingSpheres","tmp","count","state","DONE","visualizersLength","visualizer","clone","fromBoundingSpheres","displayPrimitives","displayGroundPrimitives","clustering","_initialize","newIndex","oldIndex","raise","lower","lowerToBottom","raiseToTop"],"mappings":"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","sourcesContent":["import ApproximateTerrainHeights from \"../Core/ApproximateTerrainHeights.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport GroundPolylinePrimitive from \"../Scene/GroundPolylinePrimitive.js\";\nimport GroundPrimitive from \"../Scene/GroundPrimitive.js\";\nimport OrderedGroundPrimitiveCollection from \"../Scene/OrderedGroundPrimitiveCollection.js\";\nimport PrimitiveCollection from \"../Scene/PrimitiveCollection.js\";\nimport BillboardVisualizer from \"./BillboardVisualizer.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport CustomDataSource from \"./CustomDataSource.js\";\nimport GeometryVisualizer from \"./GeometryVisualizer.js\";\nimport LabelVisualizer from \"./LabelVisualizer.js\";\nimport ModelVisualizer from \"./ModelVisualizer.js\";\nimport Cesium3DTilesetVisualizer from \"./Cesium3DTilesetVisualizer.js\";\nimport PathVisualizer from \"./PathVisualizer.js\";\nimport PointVisualizer from \"./PointVisualizer.js\";\nimport PolylineVisualizer from \"./PolylineVisualizer.js\";\n\n/**\n * Visualizes a collection of {@link DataSource} instances.\n * @alias DataSourceDisplay\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Scene} options.scene The scene in which to display the data.\n * @param {DataSourceCollection} options.dataSourceCollection The data sources to display.\n * @param {DataSourceDisplay~VisualizersCallback} [options.visualizersCallback=DataSourceDisplay.defaultVisualizersCallback]\n *        A function which creates an array of visualizers used for visualization.\n *        If undefined, all standard visualizers are used.\n */\nfunction DataSourceDisplay(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options\", options);\n  Check.typeOf.object(\"options.scene\", options.scene);\n  Check.typeOf.object(\n    \"options.dataSourceCollection\",\n    options.dataSourceCollection\n  );\n  //>>includeEnd('debug');\n\n  GroundPrimitive.initializeTerrainHeights();\n  GroundPolylinePrimitive.initializeTerrainHeights();\n\n  var scene = options.scene;\n  var dataSourceCollection = options.dataSourceCollection;\n\n  this._eventHelper = new EventHelper();\n  this._eventHelper.add(\n    dataSourceCollection.dataSourceAdded,\n    this._onDataSourceAdded,\n    this\n  );\n  this._eventHelper.add(\n    dataSourceCollection.dataSourceRemoved,\n    this._onDataSourceRemoved,\n    this\n  );\n  this._eventHelper.add(\n    dataSourceCollection.dataSourceMoved,\n    this._onDataSourceMoved,\n    this\n  );\n  this._eventHelper.add(scene.postRender, this._postRender, this);\n\n  this._dataSourceCollection = dataSourceCollection;\n  this._scene = scene;\n  this._visualizersCallback = defaultValue(\n    options.visualizersCallback,\n    DataSourceDisplay.defaultVisualizersCallback\n  );\n\n  var primitivesAdded = false;\n  var primitives = new PrimitiveCollection();\n  var groundPrimitives = new PrimitiveCollection();\n\n  if (dataSourceCollection.length > 0) {\n    scene.primitives.add(primitives);\n    scene.groundPrimitives.add(groundPrimitives);\n    primitivesAdded = true;\n  }\n\n  this._primitives = primitives;\n  this._groundPrimitives = groundPrimitives;\n\n  for (var i = 0, len = dataSourceCollection.length; i < len; i++) {\n    this._onDataSourceAdded(dataSourceCollection, dataSourceCollection.get(i));\n  }\n\n  var defaultDataSource = new CustomDataSource();\n  this._onDataSourceAdded(undefined, defaultDataSource);\n  this._defaultDataSource = defaultDataSource;\n\n  var removeDefaultDataSourceListener;\n  var removeDataSourceCollectionListener;\n  if (!primitivesAdded) {\n    var that = this;\n    var addPrimitives = function () {\n      scene.primitives.add(primitives);\n      scene.groundPrimitives.add(groundPrimitives);\n      removeDefaultDataSourceListener();\n      removeDataSourceCollectionListener();\n      that._removeDefaultDataSourceListener = undefined;\n      that._removeDataSourceCollectionListener = undefined;\n    };\n    removeDefaultDataSourceListener = defaultDataSource.entities.collectionChanged.addEventListener(\n      addPrimitives\n    );\n    removeDataSourceCollectionListener = dataSourceCollection.dataSourceAdded.addEventListener(\n      addPrimitives\n    );\n  }\n\n  this._removeDefaultDataSourceListener = removeDefaultDataSourceListener;\n  this._removeDataSourceCollectionListener = removeDataSourceCollectionListener;\n\n  this._ready = false;\n}\n\n/**\n * Gets or sets the default function which creates an array of visualizers used for visualization.\n * By default, this function uses all standard visualizers.\n *\n * @type {DataSourceDisplay~VisualizersCallback}\n */\nDataSourceDisplay.defaultVisualizersCallback = function (\n  scene,\n  entityCluster,\n  dataSource\n) {\n  var entities = dataSource.entities;\n  return [\n    new BillboardVisualizer(entityCluster, entities),\n    new GeometryVisualizer(\n      scene,\n      entities,\n      dataSource._primitives,\n      dataSource._groundPrimitives\n    ),\n    new LabelVisualizer(entityCluster, entities),\n    new ModelVisualizer(scene, entities),\n    new Cesium3DTilesetVisualizer(scene, entities),\n    new PointVisualizer(entityCluster, entities),\n    new PathVisualizer(scene, entities),\n    new PolylineVisualizer(\n      scene,\n      entities,\n      dataSource._primitives,\n      dataSource._groundPrimitives\n    ),\n  ];\n};\n\nObject.defineProperties(DataSourceDisplay.prototype, {\n  /**\n   * Gets the scene associated with this display.\n   * @memberof DataSourceDisplay.prototype\n   * @type {Scene}\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    },\n  },\n  /**\n   * Gets the collection of data sources to display.\n   * @memberof DataSourceDisplay.prototype\n   * @type {DataSourceCollection}\n   */\n  dataSources: {\n    get: function () {\n      return this._dataSourceCollection;\n    },\n  },\n  /**\n   * Gets the default data source instance which can be used to\n   * manually create and visualize entities not tied to\n   * a specific data source. This instance is always available\n   * and does not appear in the list dataSources collection.\n   * @memberof DataSourceDisplay.prototype\n   * @type {CustomDataSource}\n   */\n  defaultDataSource: {\n    get: function () {\n      return this._defaultDataSource;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not all entities in the data source are ready\n   * @memberof DataSourceDisplay.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n});\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see DataSourceDisplay#destroy\n */\nDataSourceDisplay.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * dataSourceDisplay = dataSourceDisplay.destroy();\n *\n * @see DataSourceDisplay#isDestroyed\n */\nDataSourceDisplay.prototype.destroy = function () {\n  this._eventHelper.removeAll();\n\n  var dataSourceCollection = this._dataSourceCollection;\n  for (var i = 0, length = dataSourceCollection.length; i < length; ++i) {\n    this._onDataSourceRemoved(\n      this._dataSourceCollection,\n      dataSourceCollection.get(i)\n    );\n  }\n  this._onDataSourceRemoved(undefined, this._defaultDataSource);\n\n  if (defined(this._removeDefaultDataSourceListener)) {\n    this._removeDefaultDataSourceListener();\n    this._removeDataSourceCollectionListener();\n  } else {\n    this._scene.primitives.remove(this._primitives);\n    this._scene.groundPrimitives.remove(this._groundPrimitives);\n  }\n\n  return destroyObject(this);\n};\n\n/**\n * Updates the display to the provided time.\n *\n * @param {JulianDate} time The simulation time.\n * @returns {Boolean} True if all data sources are ready to be displayed, false otherwise.\n */\nDataSourceDisplay.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n  //>>includeEnd('debug');\n\n  if (!ApproximateTerrainHeights.initialized) {\n    this._ready = false;\n    return false;\n  }\n\n  var result = true;\n\n  var i;\n  var x;\n  var visualizers;\n  var vLength;\n  var dataSources = this._dataSourceCollection;\n  var length = dataSources.length;\n  for (i = 0; i < length; i++) {\n    var dataSource = dataSources.get(i);\n    if (defined(dataSource.update)) {\n      result = dataSource.update(time) && result;\n    }\n\n    visualizers = dataSource._visualizers;\n    vLength = visualizers.length;\n    for (x = 0; x < vLength; x++) {\n      result = visualizers[x].update(time) && result;\n    }\n  }\n\n  visualizers = this._defaultDataSource._visualizers;\n  vLength = visualizers.length;\n  for (x = 0; x < vLength; x++) {\n    result = visualizers[x].update(time) && result;\n  }\n\n  this._ready = result;\n\n  return result;\n};\n\nDataSourceDisplay.prototype._postRender = function () {\n  // Adds credits for all datasources\n  var frameState = this._scene.frameState;\n  var dataSources = this._dataSourceCollection;\n  var length = dataSources.length;\n  for (var i = 0; i < length; i++) {\n    var dataSource = dataSources.get(i);\n\n    var credit = dataSource.credit;\n    if (defined(credit)) {\n      frameState.creditDisplay.addCredit(credit);\n    }\n\n    // Credits from the resource that the user can't remove\n    var credits = dataSource._resourceCredits;\n    if (defined(credits)) {\n      var creditCount = credits.length;\n      for (var c = 0; c < creditCount; c++) {\n        frameState.creditDisplay.addCredit(credits[c]);\n      }\n    }\n  }\n};\n\nvar getBoundingSphereArrayScratch = [];\nvar getBoundingSphereBoundingSphereScratch = new BoundingSphere();\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {Boolean} allowPartial If true, pending bounding spheres are ignored and an answer will be returned from the currently available data.\n *                               If false, the the function will halt and return pending if any of the bounding spheres are pending.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nDataSourceDisplay.prototype.getBoundingSphere = function (\n  entity,\n  allowPartial,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"entity\", entity);\n  Check.typeOf.bool(\"allowPartial\", allowPartial);\n  Check.defined(\"result\", result);\n  //>>includeEnd('debug');\n\n  if (!this._ready) {\n    return BoundingSphereState.PENDING;\n  }\n\n  var i;\n  var length;\n  var dataSource = this._defaultDataSource;\n  if (!dataSource.entities.contains(entity)) {\n    dataSource = undefined;\n\n    var dataSources = this._dataSourceCollection;\n    length = dataSources.length;\n    for (i = 0; i < length; i++) {\n      var d = dataSources.get(i);\n      if (d.entities.contains(entity)) {\n        dataSource = d;\n        break;\n      }\n    }\n  }\n\n  if (!defined(dataSource)) {\n    return BoundingSphereState.FAILED;\n  }\n\n  var boundingSpheres = getBoundingSphereArrayScratch;\n  var tmp = getBoundingSphereBoundingSphereScratch;\n\n  var count = 0;\n  var state = BoundingSphereState.DONE;\n  var visualizers = dataSource._visualizers;\n  var visualizersLength = visualizers.length;\n\n  for (i = 0; i < visualizersLength; i++) {\n    var visualizer = visualizers[i];\n    if (defined(visualizer.getBoundingSphere)) {\n      state = visualizers[i].getBoundingSphere(entity, tmp);\n      if (!allowPartial && state === BoundingSphereState.PENDING) {\n        return BoundingSphereState.PENDING;\n      } else if (state === BoundingSphereState.DONE) {\n        boundingSpheres[count] = BoundingSphere.clone(\n          tmp,\n          boundingSpheres[count]\n        );\n        count++;\n      }\n    }\n  }\n\n  if (count === 0) {\n    return BoundingSphereState.FAILED;\n  }\n\n  boundingSpheres.length = count;\n  BoundingSphere.fromBoundingSpheres(boundingSpheres, result);\n  return BoundingSphereState.DONE;\n};\n\nDataSourceDisplay.prototype._onDataSourceAdded = function (\n  dataSourceCollection,\n  dataSource\n) {\n  var scene = this._scene;\n\n  var displayPrimitives = this._primitives;\n  var displayGroundPrimitives = this._groundPrimitives;\n\n  var primitives = displayPrimitives.add(new PrimitiveCollection());\n  var groundPrimitives = displayGroundPrimitives.add(\n    new OrderedGroundPrimitiveCollection()\n  );\n\n  dataSource._primitives = primitives;\n  dataSource._groundPrimitives = groundPrimitives;\n\n  var entityCluster = dataSource.clustering;\n  entityCluster._initialize(scene);\n\n  primitives.add(entityCluster);\n\n  dataSource._visualizers = this._visualizersCallback(\n    scene,\n    entityCluster,\n    dataSource\n  );\n};\n\nDataSourceDisplay.prototype._onDataSourceRemoved = function (\n  dataSourceCollection,\n  dataSource\n) {\n  var displayPrimitives = this._primitives;\n  var displayGroundPrimitives = this._groundPrimitives;\n\n  var primitives = dataSource._primitives;\n  var groundPrimitives = dataSource._groundPrimitives;\n\n  var entityCluster = dataSource.clustering;\n  primitives.remove(entityCluster);\n\n  var visualizers = dataSource._visualizers;\n  var length = visualizers.length;\n  for (var i = 0; i < length; i++) {\n    visualizers[i].destroy();\n  }\n\n  displayPrimitives.remove(primitives);\n  displayGroundPrimitives.remove(groundPrimitives);\n\n  dataSource._visualizers = undefined;\n};\n\nDataSourceDisplay.prototype._onDataSourceMoved = function (\n  dataSource,\n  newIndex,\n  oldIndex\n) {\n  var displayPrimitives = this._primitives;\n  var displayGroundPrimitives = this._groundPrimitives;\n\n  var primitives = dataSource._primitives;\n  var groundPrimitives = dataSource._groundPrimitives;\n\n  if (newIndex === oldIndex + 1) {\n    displayPrimitives.raise(primitives);\n    displayGroundPrimitives.raise(groundPrimitives);\n  } else if (newIndex === oldIndex - 1) {\n    displayPrimitives.lower(primitives);\n    displayGroundPrimitives.lower(groundPrimitives);\n  } else if (newIndex === 0) {\n    displayPrimitives.lowerToBottom(primitives);\n    displayGroundPrimitives.lowerToBottom(groundPrimitives);\n    displayPrimitives.raise(primitives); // keep defaultDataSource primitives at index 0 since it's not in the collection\n    displayGroundPrimitives.raise(groundPrimitives);\n  } else {\n    displayPrimitives.raiseToTop(primitives);\n    displayGroundPrimitives.raiseToTop(groundPrimitives);\n  }\n};\n\n/**\n * A function which creates an array of visualizers used for visualization.\n * @callback DataSourceDisplay~VisualizersCallback\n *\n * @param {Scene} scene The scene to create visualizers for.\n * @param {DataSource} dataSource The data source to create visualizers for.\n * @returns {Visualizer[]} An array of visualizers used for visualization.\n *\n * @example\n * function createVisualizers(scene, dataSource) {\n *     return [new Cesium.BillboardVisualizer(scene, dataSource.entities)];\n * }\n */\nexport default DataSourceDisplay;\n"]},"metadata":{},"sourceType":"module"}