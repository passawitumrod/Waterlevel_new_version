{"ast":null,"code":"import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n/**\n * An {@link InterpolationAlgorithm} for performing linear interpolation.\n *\n * @exports LinearApproximation\n */\n\nvar LinearApproximation = {\n  type: \"Linear\"\n};\n/**\n * Given the desired degree, returns the number of data points required for interpolation.\n * Since linear interpolation can only generate a first degree polynomial, this function\n * always returns 2.\n * @param {Number} degree The desired degree of interpolation.\n * @returns {Number} This function always returns 2.\n *\n */\n\nLinearApproximation.getRequiredDataPoints = function (degree) {\n  return 2;\n};\n/**\n * Interpolates values using linear approximation.\n *\n * @param {Number} x The independent variable for which the dependent variables will be interpolated.\n * @param {Number[]} xTable The array of independent variables to use to interpolate.  The values\n * in this array must be in increasing order and the same value must not occur twice in the array.\n * @param {Number[]} yTable The array of dependent variables to use to interpolate.  For a set of three\n * dependent values (p,q,w) at time 1 and time 2 this should be as follows: {p1, q1, w1, p2, q2, w2}.\n * @param {Number} yStride The number of dependent variable values in yTable corresponding to\n * each independent variable value in xTable.\n * @param {Number[]} [result] An existing array into which to store the result.\n * @returns {Number[]} The array of interpolated values, or the result parameter if one was provided.\n */\n\n\nLinearApproximation.interpolateOrderZero = function (x, xTable, yTable, yStride, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (xTable.length !== 2) {\n    throw new DeveloperError(\"The xTable provided to the linear interpolator must have exactly two elements.\");\n  } else if (yStride <= 0) {\n    throw new DeveloperError(\"There must be at least 1 dependent variable for each independent variable.\");\n  } //>>includeEnd('debug');\n\n\n  if (!defined(result)) {\n    result = new Array(yStride);\n  }\n\n  var i;\n  var y0;\n  var y1;\n  var x0 = xTable[0];\n  var x1 = xTable[1]; //>>includeStart('debug', pragmas.debug);\n\n  if (x0 === x1) {\n    throw new DeveloperError(\"Divide by zero error: xTable[0] and xTable[1] are equal\");\n  } //>>includeEnd('debug');\n\n\n  for (i = 0; i < yStride; i++) {\n    y0 = yTable[i];\n    y1 = yTable[i + yStride];\n    result[i] = ((y1 - y0) * x + x1 * y0 - x0 * y1) / (x1 - x0);\n  }\n\n  return result;\n};\n\nexport default LinearApproximation;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/LinearApproximation.js"],"names":["defined","DeveloperError","LinearApproximation","type","getRequiredDataPoints","degree","interpolateOrderZero","x","xTable","yTable","yStride","result","length","Array","i","y0","y1","x0","x1"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AAEA;;;;;;AAKA,IAAIC,mBAAmB,GAAG;AACxBC,EAAAA,IAAI,EAAE;AADkB,CAA1B;AAIA;;;;;;;;;AAQAD,mBAAmB,CAACE,qBAApB,GAA4C,UAAUC,MAAV,EAAkB;AAC5D,SAAO,CAAP;AACD,CAFD;AAIA;;;;;;;;;;;;;;;AAaAH,mBAAmB,CAACI,oBAApB,GAA2C,UACzCC,CADyC,EAEzCC,MAFyC,EAGzCC,MAHyC,EAIzCC,OAJyC,EAKzCC,MALyC,EAMzC;AACA;AACA,MAAIH,MAAM,CAACI,MAAP,KAAkB,CAAtB,EAAyB;AACvB,UAAM,IAAIX,cAAJ,CACJ,gFADI,CAAN;AAGD,GAJD,MAIO,IAAIS,OAAO,IAAI,CAAf,EAAkB;AACvB,UAAM,IAAIT,cAAJ,CACJ,4EADI,CAAN;AAGD,GAVD,CAWA;;;AAEA,MAAI,CAACD,OAAO,CAACW,MAAD,CAAZ,EAAsB;AACpBA,IAAAA,MAAM,GAAG,IAAIE,KAAJ,CAAUH,OAAV,CAAT;AACD;;AAED,MAAII,CAAJ;AACA,MAAIC,EAAJ;AACA,MAAIC,EAAJ;AACA,MAAIC,EAAE,GAAGT,MAAM,CAAC,CAAD,CAAf;AACA,MAAIU,EAAE,GAAGV,MAAM,CAAC,CAAD,CAAf,CArBA,CAuBA;;AACA,MAAIS,EAAE,KAAKC,EAAX,EAAe;AACb,UAAM,IAAIjB,cAAJ,CACJ,yDADI,CAAN;AAGD,GA5BD,CA6BA;;;AAEA,OAAKa,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGJ,OAAhB,EAAyBI,CAAC,EAA1B,EAA8B;AAC5BC,IAAAA,EAAE,GAAGN,MAAM,CAACK,CAAD,CAAX;AACAE,IAAAA,EAAE,GAAGP,MAAM,CAACK,CAAC,GAAGJ,OAAL,CAAX;AACAC,IAAAA,MAAM,CAACG,CAAD,CAAN,GAAY,CAAC,CAACE,EAAE,GAAGD,EAAN,IAAYR,CAAZ,GAAgBW,EAAE,GAAGH,EAArB,GAA0BE,EAAE,GAAGD,EAAhC,KAAuCE,EAAE,GAAGD,EAA5C,CAAZ;AACD;;AAED,SAAON,MAAP;AACD,CA5CD;;AA6CA,eAAeT,mBAAf","sourcesContent":["import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * An {@link InterpolationAlgorithm} for performing linear interpolation.\n *\n * @exports LinearApproximation\n */\nvar LinearApproximation = {\n  type: \"Linear\",\n};\n\n/**\n * Given the desired degree, returns the number of data points required for interpolation.\n * Since linear interpolation can only generate a first degree polynomial, this function\n * always returns 2.\n * @param {Number} degree The desired degree of interpolation.\n * @returns {Number} This function always returns 2.\n *\n */\nLinearApproximation.getRequiredDataPoints = function (degree) {\n  return 2;\n};\n\n/**\n * Interpolates values using linear approximation.\n *\n * @param {Number} x The independent variable for which the dependent variables will be interpolated.\n * @param {Number[]} xTable The array of independent variables to use to interpolate.  The values\n * in this array must be in increasing order and the same value must not occur twice in the array.\n * @param {Number[]} yTable The array of dependent variables to use to interpolate.  For a set of three\n * dependent values (p,q,w) at time 1 and time 2 this should be as follows: {p1, q1, w1, p2, q2, w2}.\n * @param {Number} yStride The number of dependent variable values in yTable corresponding to\n * each independent variable value in xTable.\n * @param {Number[]} [result] An existing array into which to store the result.\n * @returns {Number[]} The array of interpolated values, or the result parameter if one was provided.\n */\nLinearApproximation.interpolateOrderZero = function (\n  x,\n  xTable,\n  yTable,\n  yStride,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (xTable.length !== 2) {\n    throw new DeveloperError(\n      \"The xTable provided to the linear interpolator must have exactly two elements.\"\n    );\n  } else if (yStride <= 0) {\n    throw new DeveloperError(\n      \"There must be at least 1 dependent variable for each independent variable.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Array(yStride);\n  }\n\n  var i;\n  var y0;\n  var y1;\n  var x0 = xTable[0];\n  var x1 = xTable[1];\n\n  //>>includeStart('debug', pragmas.debug);\n  if (x0 === x1) {\n    throw new DeveloperError(\n      \"Divide by zero error: xTable[0] and xTable[1] are equal\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  for (i = 0; i < yStride; i++) {\n    y0 = yTable[i];\n    y1 = yTable[i + yStride];\n    result[i] = ((y1 - y0) * x + x1 * y0 - x0 * y1) / (x1 - x0);\n  }\n\n  return result;\n};\nexport default LinearApproximation;\n"]},"metadata":{},"sourceType":"module"}