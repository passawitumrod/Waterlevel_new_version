{"ast":null,"code":"import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\n/**\n * Fill an array or a portion of an array with a given value.\n *\n * @param {Array} array The array to fill.\n * @param {*} value The value to fill the array with.\n * @param {Number} [start=0] The index to start filling at.\n * @param {Number} [end=array.length] The index to end stop at.\n *\n * @returns {Array} The resulting array.\n * @private\n */\n\nfunction arrayFill(array, value, start, end) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  Check.defined(\"value\", value);\n\n  if (defined(start)) {\n    Check.typeOf.number(\"start\", start);\n  }\n\n  if (defined(end)) {\n    Check.typeOf.number(\"end\", end);\n  } //>>includeEnd('debug');\n\n\n  if (typeof array.fill === \"function\") {\n    return array.fill(value, start, end);\n  }\n\n  var length = array.length >>> 0;\n  var relativeStart = defaultValue(start, 0); // If negative, find wrap around position\n\n  var k = relativeStart < 0 ? Math.max(length + relativeStart, 0) : Math.min(relativeStart, length);\n  var relativeEnd = defaultValue(end, length); // If negative, find wrap around position\n\n  var last = relativeEnd < 0 ? Math.max(length + relativeEnd, 0) : Math.min(relativeEnd, length); // Fill array accordingly\n\n  while (k < last) {\n    array[k] = value;\n    k++;\n  }\n\n  return array;\n}\n\nexport default arrayFill;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Core/arrayFill.js"],"names":["Check","defaultValue","defined","arrayFill","array","value","start","end","typeOf","number","fill","length","relativeStart","k","Math","max","min","relativeEnd","last"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,cAApB;AAEA;;;;;;;;;;;;AAWA,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,GAAxC,EAA6C;AAC3C;AACAP,EAAAA,KAAK,CAACE,OAAN,CAAc,OAAd,EAAuBE,KAAvB;AACAJ,EAAAA,KAAK,CAACE,OAAN,CAAc,OAAd,EAAuBG,KAAvB;;AACA,MAAIH,OAAO,CAACI,KAAD,CAAX,EAAoB;AAClBN,IAAAA,KAAK,CAACQ,MAAN,CAAaC,MAAb,CAAoB,OAApB,EAA6BH,KAA7B;AACD;;AACD,MAAIJ,OAAO,CAACK,GAAD,CAAX,EAAkB;AAChBP,IAAAA,KAAK,CAACQ,MAAN,CAAaC,MAAb,CAAoB,KAApB,EAA2BF,GAA3B;AACD,GAT0C,CAU3C;;;AAEA,MAAI,OAAOH,KAAK,CAACM,IAAb,KAAsB,UAA1B,EAAsC;AACpC,WAAON,KAAK,CAACM,IAAN,CAAWL,KAAX,EAAkBC,KAAlB,EAAyBC,GAAzB,CAAP;AACD;;AAED,MAAII,MAAM,GAAGP,KAAK,CAACO,MAAN,KAAiB,CAA9B;AACA,MAAIC,aAAa,GAAGX,YAAY,CAACK,KAAD,EAAQ,CAAR,CAAhC,CAjB2C,CAkB3C;;AACA,MAAIO,CAAC,GACHD,aAAa,GAAG,CAAhB,GACIE,IAAI,CAACC,GAAL,CAASJ,MAAM,GAAGC,aAAlB,EAAiC,CAAjC,CADJ,GAEIE,IAAI,CAACE,GAAL,CAASJ,aAAT,EAAwBD,MAAxB,CAHN;AAIA,MAAIM,WAAW,GAAGhB,YAAY,CAACM,GAAD,EAAMI,MAAN,CAA9B,CAvB2C,CAwB3C;;AACA,MAAIO,IAAI,GACND,WAAW,GAAG,CAAd,GACIH,IAAI,CAACC,GAAL,CAASJ,MAAM,GAAGM,WAAlB,EAA+B,CAA/B,CADJ,GAEIH,IAAI,CAACE,GAAL,CAASC,WAAT,EAAsBN,MAAtB,CAHN,CAzB2C,CA8B3C;;AACA,SAAOE,CAAC,GAAGK,IAAX,EAAiB;AACfd,IAAAA,KAAK,CAACS,CAAD,CAAL,GAAWR,KAAX;AACAQ,IAAAA,CAAC;AACF;;AACD,SAAOT,KAAP;AACD;;AACD,eAAeD,SAAf","sourcesContent":["import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\n\n/**\n * Fill an array or a portion of an array with a given value.\n *\n * @param {Array} array The array to fill.\n * @param {*} value The value to fill the array with.\n * @param {Number} [start=0] The index to start filling at.\n * @param {Number} [end=array.length] The index to end stop at.\n *\n * @returns {Array} The resulting array.\n * @private\n */\nfunction arrayFill(array, value, start, end) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  Check.defined(\"value\", value);\n  if (defined(start)) {\n    Check.typeOf.number(\"start\", start);\n  }\n  if (defined(end)) {\n    Check.typeOf.number(\"end\", end);\n  }\n  //>>includeEnd('debug');\n\n  if (typeof array.fill === \"function\") {\n    return array.fill(value, start, end);\n  }\n\n  var length = array.length >>> 0;\n  var relativeStart = defaultValue(start, 0);\n  // If negative, find wrap around position\n  var k =\n    relativeStart < 0\n      ? Math.max(length + relativeStart, 0)\n      : Math.min(relativeStart, length);\n  var relativeEnd = defaultValue(end, length);\n  // If negative, find wrap around position\n  var last =\n    relativeEnd < 0\n      ? Math.max(length + relativeEnd, 0)\n      : Math.min(relativeEnd, length);\n\n  // Fill array accordingly\n  while (k < last) {\n    array[k] = value;\n    k++;\n  }\n  return array;\n}\nexport default arrayFill;\n"]},"metadata":{},"sourceType":"module"}