{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport EasingFunction from \"../Core/EasingFunction.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport OrthographicFrustum from \"../Core/OrthographicFrustum.js\";\nimport OrthographicOffCenterFrustum from \"../Core/OrthographicOffCenterFrustum.js\";\nimport PerspectiveFrustum from \"../Core/PerspectiveFrustum.js\";\nimport Ray from \"../Core/Ray.js\";\nimport ScreenSpaceEventHandler from \"../Core/ScreenSpaceEventHandler.js\";\nimport ScreenSpaceEventType from \"../Core/ScreenSpaceEventType.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport Camera from \"./Camera.js\";\nimport SceneMode from \"./SceneMode.js\";\n/**\n * @private\n */\n\nfunction SceneTransitioner(scene) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"scene\", scene); //>>includeEnd('debug');\n\n  this._scene = scene;\n  this._currentTweens = [];\n  this._morphHandler = undefined;\n  this._morphCancelled = false;\n  this._completeMorph = undefined;\n  this._morphToOrthographic = false;\n}\n\nSceneTransitioner.prototype.completeMorph = function () {\n  if (defined(this._completeMorph)) {\n    this._completeMorph();\n  }\n};\n\nSceneTransitioner.prototype.morphTo2D = function (duration, ellipsoid) {\n  if (defined(this._completeMorph)) {\n    this._completeMorph();\n  }\n\n  var scene = this._scene;\n  this._previousMode = scene.mode;\n  this._morphToOrthographic = scene.camera.frustum instanceof OrthographicFrustum;\n\n  if (this._previousMode === SceneMode.SCENE2D || this._previousMode === SceneMode.MORPHING) {\n    return;\n  }\n\n  this._scene.morphStart.raiseEvent(this, this._previousMode, SceneMode.SCENE2D, true);\n\n  scene._mode = SceneMode.MORPHING;\n\n  scene.camera._setTransform(Matrix4.IDENTITY);\n\n  if (this._previousMode === SceneMode.COLUMBUS_VIEW) {\n    morphFromColumbusViewTo2D(this, duration);\n  } else {\n    morphFrom3DTo2D(this, duration, ellipsoid);\n  }\n\n  if (duration === 0.0 && defined(this._completeMorph)) {\n    this._completeMorph();\n  }\n};\n\nvar scratchToCVPosition = new Cartesian3();\nvar scratchToCVDirection = new Cartesian3();\nvar scratchToCVUp = new Cartesian3();\nvar scratchToCVPosition2D = new Cartesian3();\nvar scratchToCVDirection2D = new Cartesian3();\nvar scratchToCVUp2D = new Cartesian3();\nvar scratchToCVSurfacePosition = new Cartesian3();\nvar scratchToCVCartographic = new Cartographic();\nvar scratchToCVToENU = new Matrix4();\nvar scratchToCVFrustumPerspective = new PerspectiveFrustum();\nvar scratchToCVFrustumOrthographic = new OrthographicFrustum();\nvar scratchToCVCamera = {\n  position: undefined,\n  direction: undefined,\n  up: undefined,\n  position2D: undefined,\n  direction2D: undefined,\n  up2D: undefined,\n  frustum: undefined\n};\n\nSceneTransitioner.prototype.morphToColumbusView = function (duration, ellipsoid) {\n  if (defined(this._completeMorph)) {\n    this._completeMorph();\n  }\n\n  var scene = this._scene;\n  this._previousMode = scene.mode;\n\n  if (this._previousMode === SceneMode.COLUMBUS_VIEW || this._previousMode === SceneMode.MORPHING) {\n    return;\n  }\n\n  this._scene.morphStart.raiseEvent(this, this._previousMode, SceneMode.COLUMBUS_VIEW, true);\n\n  scene.camera._setTransform(Matrix4.IDENTITY);\n\n  var position = scratchToCVPosition;\n  var direction = scratchToCVDirection;\n  var up = scratchToCVUp;\n\n  if (duration > 0.0) {\n    position.x = 0.0;\n    position.y = -1.0;\n    position.z = 1.0;\n    position = Cartesian3.multiplyByScalar(Cartesian3.normalize(position, position), 5.0 * ellipsoid.maximumRadius, position);\n    Cartesian3.negate(Cartesian3.normalize(position, direction), direction);\n    Cartesian3.cross(Cartesian3.UNIT_X, direction, up);\n  } else {\n    var camera = scene.camera;\n\n    if (this._previousMode === SceneMode.SCENE2D) {\n      Cartesian3.clone(camera.position, position);\n      position.z = camera.frustum.right - camera.frustum.left;\n      Cartesian3.negate(Cartesian3.UNIT_Z, direction);\n      Cartesian3.clone(Cartesian3.UNIT_Y, up);\n    } else {\n      Cartesian3.clone(camera.positionWC, position);\n      Cartesian3.clone(camera.directionWC, direction);\n      Cartesian3.clone(camera.upWC, up);\n      var surfacePoint = ellipsoid.scaleToGeodeticSurface(position, scratchToCVSurfacePosition);\n      var toENU = Transforms.eastNorthUpToFixedFrame(surfacePoint, ellipsoid, scratchToCVToENU);\n      Matrix4.inverseTransformation(toENU, toENU);\n      scene.mapProjection.project(ellipsoid.cartesianToCartographic(position, scratchToCVCartographic), position);\n      Matrix4.multiplyByPointAsVector(toENU, direction, direction);\n      Matrix4.multiplyByPointAsVector(toENU, up, up);\n    }\n  }\n\n  var frustum;\n\n  if (this._morphToOrthographic) {\n    frustum = scratchToCVFrustumOrthographic;\n    frustum.width = scene.camera.frustum.right - scene.camera.frustum.left;\n    frustum.aspectRatio = scene.drawingBufferWidth / scene.drawingBufferHeight;\n  } else {\n    frustum = scratchToCVFrustumPerspective;\n    frustum.aspectRatio = scene.drawingBufferWidth / scene.drawingBufferHeight;\n    frustum.fov = CesiumMath.toRadians(60.0);\n  }\n\n  var cameraCV = scratchToCVCamera;\n  cameraCV.position = position;\n  cameraCV.direction = direction;\n  cameraCV.up = up;\n  cameraCV.frustum = frustum;\n  var complete = completeColumbusViewCallback(cameraCV);\n  createMorphHandler(this, complete);\n\n  if (this._previousMode === SceneMode.SCENE2D) {\n    morphFrom2DToColumbusView(this, duration, cameraCV, complete);\n  } else {\n    cameraCV.position2D = Matrix4.multiplyByPoint(Camera.TRANSFORM_2D, position, scratchToCVPosition2D);\n    cameraCV.direction2D = Matrix4.multiplyByPointAsVector(Camera.TRANSFORM_2D, direction, scratchToCVDirection2D);\n    cameraCV.up2D = Matrix4.multiplyByPointAsVector(Camera.TRANSFORM_2D, up, scratchToCVUp2D);\n    scene._mode = SceneMode.MORPHING;\n    morphFrom3DToColumbusView(this, duration, cameraCV, complete);\n  }\n\n  if (duration === 0.0 && defined(this._completeMorph)) {\n    this._completeMorph();\n  }\n};\n\nvar scratchCVTo3DCamera = {\n  position: new Cartesian3(),\n  direction: new Cartesian3(),\n  up: new Cartesian3(),\n  frustum: undefined\n};\nvar scratch2DTo3DFrustumPersp = new PerspectiveFrustum();\n\nSceneTransitioner.prototype.morphTo3D = function (duration, ellipsoid) {\n  if (defined(this._completeMorph)) {\n    this._completeMorph();\n  }\n\n  var scene = this._scene;\n  this._previousMode = scene.mode;\n\n  if (this._previousMode === SceneMode.SCENE3D || this._previousMode === SceneMode.MORPHING) {\n    return;\n  }\n\n  this._scene.morphStart.raiseEvent(this, this._previousMode, SceneMode.SCENE3D, true);\n\n  scene._mode = SceneMode.MORPHING;\n\n  scene.camera._setTransform(Matrix4.IDENTITY);\n\n  if (this._previousMode === SceneMode.SCENE2D) {\n    morphFrom2DTo3D(this, duration, ellipsoid);\n  } else {\n    var camera3D;\n\n    if (duration > 0.0) {\n      camera3D = scratchCVTo3DCamera;\n      Cartesian3.fromDegrees(0.0, 0.0, 5.0 * ellipsoid.maximumRadius, ellipsoid, camera3D.position);\n      Cartesian3.negate(camera3D.position, camera3D.direction);\n      Cartesian3.normalize(camera3D.direction, camera3D.direction);\n      Cartesian3.clone(Cartesian3.UNIT_Z, camera3D.up);\n    } else {\n      camera3D = getColumbusViewTo3DCamera(this, ellipsoid);\n    }\n\n    var frustum;\n    var camera = scene.camera;\n\n    if (camera.frustum instanceof OrthographicFrustum) {\n      frustum = camera.frustum.clone();\n    } else {\n      frustum = scratch2DTo3DFrustumPersp;\n      frustum.aspectRatio = scene.drawingBufferWidth / scene.drawingBufferHeight;\n      frustum.fov = CesiumMath.toRadians(60.0);\n    }\n\n    camera3D.frustum = frustum;\n    var complete = complete3DCallback(camera3D);\n    createMorphHandler(this, complete);\n    morphFromColumbusViewTo3D(this, duration, camera3D, complete);\n  }\n\n  if (duration === 0.0 && defined(this._completeMorph)) {\n    this._completeMorph();\n  }\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n */\n\n\nSceneTransitioner.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * transitioner = transitioner && transitioner.destroy();\n */\n\n\nSceneTransitioner.prototype.destroy = function () {\n  destroyMorphHandler(this);\n  return destroyObject(this);\n};\n\nfunction createMorphHandler(transitioner, completeMorphFunction) {\n  if (transitioner._scene.completeMorphOnUserInput) {\n    transitioner._morphHandler = new ScreenSpaceEventHandler(transitioner._scene.canvas);\n\n    var completeMorph = function completeMorph() {\n      transitioner._morphCancelled = true;\n\n      transitioner._scene.camera.cancelFlight();\n\n      completeMorphFunction(transitioner);\n    };\n\n    transitioner._completeMorph = completeMorph;\n\n    transitioner._morphHandler.setInputAction(completeMorph, ScreenSpaceEventType.LEFT_DOWN);\n\n    transitioner._morphHandler.setInputAction(completeMorph, ScreenSpaceEventType.MIDDLE_DOWN);\n\n    transitioner._morphHandler.setInputAction(completeMorph, ScreenSpaceEventType.RIGHT_DOWN);\n\n    transitioner._morphHandler.setInputAction(completeMorph, ScreenSpaceEventType.WHEEL);\n  }\n}\n\nfunction destroyMorphHandler(transitioner) {\n  var tweens = transitioner._currentTweens;\n\n  for (var i = 0; i < tweens.length; ++i) {\n    tweens[i].cancelTween();\n  }\n\n  transitioner._currentTweens.length = 0;\n  transitioner._morphHandler = transitioner._morphHandler && transitioner._morphHandler.destroy();\n}\n\nvar scratchCVTo3DCartographic = new Cartographic();\nvar scratchCVTo3DSurfacePoint = new Cartesian3();\nvar scratchCVTo3DFromENU = new Matrix4();\n\nfunction getColumbusViewTo3DCamera(transitioner, ellipsoid) {\n  var scene = transitioner._scene;\n  var camera = scene.camera;\n  var camera3D = scratchCVTo3DCamera;\n  var position = camera3D.position;\n  var direction = camera3D.direction;\n  var up = camera3D.up;\n  var positionCarto = scene.mapProjection.unproject(camera.position, scratchCVTo3DCartographic);\n  ellipsoid.cartographicToCartesian(positionCarto, position);\n  var surfacePoint = ellipsoid.scaleToGeodeticSurface(position, scratchCVTo3DSurfacePoint);\n  var fromENU = Transforms.eastNorthUpToFixedFrame(surfacePoint, ellipsoid, scratchCVTo3DFromENU);\n  Matrix4.multiplyByPointAsVector(fromENU, camera.direction, direction);\n  Matrix4.multiplyByPointAsVector(fromENU, camera.up, up);\n  return camera3D;\n}\n\nvar scratchCVTo3DStartPos = new Cartesian3();\nvar scratchCVTo3DStartDir = new Cartesian3();\nvar scratchCVTo3DStartUp = new Cartesian3();\nvar scratchCVTo3DEndPos = new Cartesian3();\nvar scratchCVTo3DEndDir = new Cartesian3();\nvar scratchCVTo3DEndUp = new Cartesian3();\n\nfunction morphFromColumbusViewTo3D(transitioner, duration, endCamera, _complete) {\n  duration *= 0.5;\n  var scene = transitioner._scene;\n  var camera = scene.camera;\n  var startPos = Cartesian3.clone(camera.position, scratchCVTo3DStartPos);\n  var startDir = Cartesian3.clone(camera.direction, scratchCVTo3DStartDir);\n  var startUp = Cartesian3.clone(camera.up, scratchCVTo3DStartUp);\n  var endPos = Matrix4.multiplyByPoint(Camera.TRANSFORM_2D_INVERSE, endCamera.position, scratchCVTo3DEndPos);\n  var endDir = Matrix4.multiplyByPointAsVector(Camera.TRANSFORM_2D_INVERSE, endCamera.direction, scratchCVTo3DEndDir);\n  var endUp = Matrix4.multiplyByPointAsVector(Camera.TRANSFORM_2D_INVERSE, endCamera.up, scratchCVTo3DEndUp);\n\n  function update(value) {\n    columbusViewMorph(startPos, endPos, value.time, camera.position);\n    columbusViewMorph(startDir, endDir, value.time, camera.direction);\n    columbusViewMorph(startUp, endUp, value.time, camera.up);\n    Cartesian3.cross(camera.direction, camera.up, camera.right);\n    Cartesian3.normalize(camera.right, camera.right);\n  }\n\n  var tween = scene.tweens.add({\n    duration: duration,\n    easingFunction: EasingFunction.QUARTIC_OUT,\n    startObject: {\n      time: 0.0\n    },\n    stopObject: {\n      time: 1.0\n    },\n    update: update,\n    complete: function complete() {\n      addMorphTimeAnimations(transitioner, scene, 0.0, 1.0, duration, _complete);\n    }\n  });\n\n  transitioner._currentTweens.push(tween);\n}\n\nvar scratch2DTo3DFrustumOrtho = new OrthographicFrustum();\nvar scratch3DToCVStartPos = new Cartesian3();\nvar scratch3DToCVStartDir = new Cartesian3();\nvar scratch3DToCVStartUp = new Cartesian3();\nvar scratch3DToCVEndPos = new Cartesian3();\nvar scratch3DToCVEndDir = new Cartesian3();\nvar scratch3DToCVEndUp = new Cartesian3();\n\nfunction morphFrom2DTo3D(transitioner, duration, ellipsoid) {\n  duration /= 3.0;\n  var scene = transitioner._scene;\n  var camera = scene.camera;\n  var camera3D;\n\n  if (duration > 0.0) {\n    camera3D = scratchCVTo3DCamera;\n    Cartesian3.fromDegrees(0.0, 0.0, 5.0 * ellipsoid.maximumRadius, ellipsoid, camera3D.position);\n    Cartesian3.negate(camera3D.position, camera3D.direction);\n    Cartesian3.normalize(camera3D.direction, camera3D.direction);\n    Cartesian3.clone(Cartesian3.UNIT_Z, camera3D.up);\n  } else {\n    camera.position.z = camera.frustum.right - camera.frustum.left;\n    camera3D = getColumbusViewTo3DCamera(transitioner, ellipsoid);\n  }\n\n  var frustum;\n\n  if (transitioner._morphToOrthographic) {\n    frustum = scratch2DTo3DFrustumOrtho;\n    frustum.aspectRatio = scene.drawingBufferWidth / scene.drawingBufferHeight;\n    frustum.width = camera.frustum.right - camera.frustum.left;\n  } else {\n    frustum = scratch2DTo3DFrustumPersp;\n    frustum.aspectRatio = scene.drawingBufferWidth / scene.drawingBufferHeight;\n    frustum.fov = CesiumMath.toRadians(60.0);\n  }\n\n  camera3D.frustum = frustum;\n  var complete = complete3DCallback(camera3D);\n  createMorphHandler(transitioner, complete);\n  var morph;\n\n  if (transitioner._morphToOrthographic) {\n    morph = function morph() {\n      morphFromColumbusViewTo3D(transitioner, duration, camera3D, complete);\n    };\n  } else {\n    morph = function morph() {\n      morphOrthographicToPerspective(transitioner, duration, camera3D, function () {\n        morphFromColumbusViewTo3D(transitioner, duration, camera3D, complete);\n      });\n    };\n  }\n\n  if (duration > 0.0) {\n    scene._mode = SceneMode.SCENE2D;\n    camera.flyTo({\n      duration: duration,\n      destination: Cartesian3.fromDegrees(0.0, 0.0, 5.0 * ellipsoid.maximumRadius, ellipsoid, scratch3DToCVEndPos),\n      complete: function complete() {\n        scene._mode = SceneMode.MORPHING;\n        morph();\n      }\n    });\n  } else {\n    morph();\n  }\n}\n\nfunction columbusViewMorph(startPosition, endPosition, time, result) {\n  // Just linear for now.\n  return Cartesian3.lerp(startPosition, endPosition, time, result);\n}\n\nfunction morphPerspectiveToOrthographic(transitioner, duration, endCamera, updateHeight, _complete2) {\n  var scene = transitioner._scene;\n  var camera = scene.camera;\n\n  if (camera.frustum instanceof OrthographicFrustum) {\n    return;\n  }\n\n  var startFOV = camera.frustum.fov;\n  var endFOV = CesiumMath.RADIANS_PER_DEGREE * 0.5;\n  var d = endCamera.position.z * Math.tan(startFOV * 0.5);\n  camera.frustum.far = d / Math.tan(endFOV * 0.5) + 10000000.0;\n\n  function update(value) {\n    camera.frustum.fov = CesiumMath.lerp(startFOV, endFOV, value.time);\n    var height = d / Math.tan(camera.frustum.fov * 0.5);\n    updateHeight(camera, height);\n  }\n\n  var tween = scene.tweens.add({\n    duration: duration,\n    easingFunction: EasingFunction.QUARTIC_OUT,\n    startObject: {\n      time: 0.0\n    },\n    stopObject: {\n      time: 1.0\n    },\n    update: update,\n    complete: function complete() {\n      camera.frustum = endCamera.frustum.clone();\n\n      _complete2(transitioner);\n    }\n  });\n\n  transitioner._currentTweens.push(tween);\n}\n\nvar scratchCVTo2DStartPos = new Cartesian3();\nvar scratchCVTo2DStartDir = new Cartesian3();\nvar scratchCVTo2DStartUp = new Cartesian3();\nvar scratchCVTo2DEndPos = new Cartesian3();\nvar scratchCVTo2DEndDir = new Cartesian3();\nvar scratchCVTo2DEndUp = new Cartesian3();\nvar scratchCVTo2DFrustum = new OrthographicOffCenterFrustum();\nvar scratchCVTo2DRay = new Ray();\nvar scratchCVTo2DPickPos = new Cartesian3();\nvar scratchCVTo2DCamera = {\n  position: undefined,\n  direction: undefined,\n  up: undefined,\n  frustum: undefined\n};\n\nfunction morphFromColumbusViewTo2D(transitioner, duration) {\n  duration *= 0.5;\n  var scene = transitioner._scene;\n  var camera = scene.camera;\n  var startPos = Cartesian3.clone(camera.position, scratchCVTo2DStartPos);\n  var startDir = Cartesian3.clone(camera.direction, scratchCVTo2DStartDir);\n  var startUp = Cartesian3.clone(camera.up, scratchCVTo2DStartUp);\n  var endDir = Cartesian3.negate(Cartesian3.UNIT_Z, scratchCVTo2DEndDir);\n  var endUp = Cartesian3.clone(Cartesian3.UNIT_Y, scratchCVTo2DEndUp);\n  var endPos = scratchCVTo2DEndPos;\n\n  if (duration > 0.0) {\n    Cartesian3.clone(Cartesian3.ZERO, scratchCVTo2DEndPos);\n    endPos.z = 5.0 * scene.mapProjection.ellipsoid.maximumRadius;\n  } else {\n    Cartesian3.clone(startPos, scratchCVTo2DEndPos);\n    var ray = scratchCVTo2DRay;\n    Matrix4.multiplyByPoint(Camera.TRANSFORM_2D, startPos, ray.origin);\n    Matrix4.multiplyByPointAsVector(Camera.TRANSFORM_2D, startDir, ray.direction);\n    var globe = scene.globe;\n\n    if (defined(globe)) {\n      var pickPos = globe.pickWorldCoordinates(ray, scene, scratchCVTo2DPickPos);\n\n      if (defined(pickPos)) {\n        Matrix4.multiplyByPoint(Camera.TRANSFORM_2D_INVERSE, pickPos, endPos);\n        endPos.z += Cartesian3.distance(startPos, endPos);\n      }\n    }\n  }\n\n  var frustum = scratchCVTo2DFrustum;\n  frustum.right = endPos.z * 0.5;\n  frustum.left = -frustum.right;\n  frustum.top = frustum.right * (scene.drawingBufferHeight / scene.drawingBufferWidth);\n  frustum.bottom = -frustum.top;\n  var camera2D = scratchCVTo2DCamera;\n  camera2D.position = endPos;\n  camera2D.direction = endDir;\n  camera2D.up = endUp;\n  camera2D.frustum = frustum;\n\n  var _complete3 = complete2DCallback(camera2D);\n\n  createMorphHandler(transitioner, _complete3);\n\n  function updateCV(value) {\n    columbusViewMorph(startPos, endPos, value.time, camera.position);\n    columbusViewMorph(startDir, endDir, value.time, camera.direction);\n    columbusViewMorph(startUp, endUp, value.time, camera.up);\n    Cartesian3.cross(camera.direction, camera.up, camera.right);\n    Cartesian3.normalize(camera.right, camera.right);\n\n    camera._adjustOrthographicFrustum(true);\n  }\n\n  function updateHeight(camera, height) {\n    camera.position.z = height;\n  }\n\n  var tween = scene.tweens.add({\n    duration: duration,\n    easingFunction: EasingFunction.QUARTIC_OUT,\n    startObject: {\n      time: 0.0\n    },\n    stopObject: {\n      time: 1.0\n    },\n    update: updateCV,\n    complete: function complete() {\n      morphPerspectiveToOrthographic(transitioner, duration, camera2D, updateHeight, _complete3);\n    }\n  });\n\n  transitioner._currentTweens.push(tween);\n}\n\nvar scratch3DTo2DCartographic = new Cartographic();\nvar scratch3DTo2DCamera = {\n  position: new Cartesian3(),\n  direction: new Cartesian3(),\n  up: new Cartesian3(),\n  position2D: new Cartesian3(),\n  direction2D: new Cartesian3(),\n  up2D: new Cartesian3(),\n  frustum: new OrthographicOffCenterFrustum()\n};\nvar scratch3DTo2DEndCamera = {\n  position: new Cartesian3(),\n  direction: new Cartesian3(),\n  up: new Cartesian3(),\n  frustum: undefined\n};\nvar scratch3DTo2DPickPosition = new Cartesian3();\nvar scratch3DTo2DRay = new Ray();\nvar scratch3DTo2DToENU = new Matrix4();\nvar scratch3DTo2DSurfacePoint = new Cartesian3();\n\nfunction morphFrom3DTo2D(transitioner, duration, ellipsoid) {\n  duration *= 0.5;\n  var scene = transitioner._scene;\n  var camera = scene.camera;\n  var camera2D = scratch3DTo2DCamera;\n\n  if (duration > 0.0) {\n    Cartesian3.clone(Cartesian3.ZERO, camera2D.position);\n    camera2D.position.z = 5.0 * ellipsoid.maximumRadius;\n    Cartesian3.negate(Cartesian3.UNIT_Z, camera2D.direction);\n    Cartesian3.clone(Cartesian3.UNIT_Y, camera2D.up);\n  } else {\n    ellipsoid.cartesianToCartographic(camera.positionWC, scratch3DTo2DCartographic);\n    scene.mapProjection.project(scratch3DTo2DCartographic, camera2D.position);\n    Cartesian3.negate(Cartesian3.UNIT_Z, camera2D.direction);\n    Cartesian3.clone(Cartesian3.UNIT_Y, camera2D.up);\n    var ray = scratch3DTo2DRay;\n    Cartesian3.clone(camera2D.position2D, ray.origin);\n    var rayDirection = Cartesian3.clone(camera.directionWC, ray.direction);\n    var surfacePoint = ellipsoid.scaleToGeodeticSurface(camera.positionWC, scratch3DTo2DSurfacePoint);\n    var toENU = Transforms.eastNorthUpToFixedFrame(surfacePoint, ellipsoid, scratch3DTo2DToENU);\n    Matrix4.inverseTransformation(toENU, toENU);\n    Matrix4.multiplyByPointAsVector(toENU, rayDirection, rayDirection);\n    Matrix4.multiplyByPointAsVector(Camera.TRANSFORM_2D, rayDirection, rayDirection);\n    var globe = scene.globe;\n\n    if (defined(globe)) {\n      var pickedPos = globe.pickWorldCoordinates(ray, scene, scratch3DTo2DPickPosition);\n\n      if (defined(pickedPos)) {\n        var height = Cartesian3.distance(camera2D.position2D, pickedPos);\n        pickedPos.x += height;\n        Cartesian3.clone(pickedPos, camera2D.position2D);\n      }\n    }\n  }\n\n  function updateHeight(camera, height) {\n    camera.position.x = height;\n  }\n\n  Matrix4.multiplyByPoint(Camera.TRANSFORM_2D, camera2D.position, camera2D.position2D);\n  Matrix4.multiplyByPointAsVector(Camera.TRANSFORM_2D, camera2D.direction, camera2D.direction2D);\n  Matrix4.multiplyByPointAsVector(Camera.TRANSFORM_2D, camera2D.up, camera2D.up2D);\n  var frustum = camera2D.frustum;\n  frustum.right = camera2D.position.z * 0.5;\n  frustum.left = -frustum.right;\n  frustum.top = frustum.right * (scene.drawingBufferHeight / scene.drawingBufferWidth);\n  frustum.bottom = -frustum.top;\n  var endCamera = scratch3DTo2DEndCamera;\n  Matrix4.multiplyByPoint(Camera.TRANSFORM_2D_INVERSE, camera2D.position2D, endCamera.position);\n  Cartesian3.clone(camera2D.direction, endCamera.direction);\n  Cartesian3.clone(camera2D.up, endCamera.up);\n  endCamera.frustum = frustum;\n  var complete = complete2DCallback(endCamera);\n  createMorphHandler(transitioner, complete);\n\n  function completeCallback() {\n    morphPerspectiveToOrthographic(transitioner, duration, camera2D, updateHeight, complete);\n  }\n\n  morphFrom3DToColumbusView(transitioner, duration, camera2D, completeCallback);\n}\n\nfunction morphOrthographicToPerspective(transitioner, duration, cameraCV, _complete4) {\n  var scene = transitioner._scene;\n  var camera = scene.camera;\n  var height = camera.frustum.right - camera.frustum.left;\n  camera.frustum = cameraCV.frustum.clone();\n  var endFOV = camera.frustum.fov;\n  var startFOV = CesiumMath.RADIANS_PER_DEGREE * 0.5;\n  var d = height * Math.tan(endFOV * 0.5);\n  camera.frustum.far = d / Math.tan(startFOV * 0.5) + 10000000.0;\n  camera.frustum.fov = startFOV;\n\n  function update(value) {\n    camera.frustum.fov = CesiumMath.lerp(startFOV, endFOV, value.time);\n    camera.position.z = d / Math.tan(camera.frustum.fov * 0.5);\n  }\n\n  var tween = scene.tweens.add({\n    duration: duration,\n    easingFunction: EasingFunction.QUARTIC_OUT,\n    startObject: {\n      time: 0.0\n    },\n    stopObject: {\n      time: 1.0\n    },\n    update: update,\n    complete: function complete() {\n      _complete4(transitioner);\n    }\n  });\n\n  transitioner._currentTweens.push(tween);\n}\n\nfunction morphFrom2DToColumbusView(transitioner, duration, cameraCV, _complete5) {\n  duration *= 0.5;\n  var scene = transitioner._scene;\n  var camera = scene.camera;\n  var endPos = Cartesian3.clone(cameraCV.position, scratch3DToCVEndPos);\n  var endDir = Cartesian3.clone(cameraCV.direction, scratch3DToCVEndDir);\n  var endUp = Cartesian3.clone(cameraCV.up, scratch3DToCVEndUp);\n  scene._mode = SceneMode.MORPHING;\n\n  function morph() {\n    camera.frustum = cameraCV.frustum.clone();\n    var startPos = Cartesian3.clone(camera.position, scratch3DToCVStartPos);\n    var startDir = Cartesian3.clone(camera.direction, scratch3DToCVStartDir);\n    var startUp = Cartesian3.clone(camera.up, scratch3DToCVStartUp);\n    startPos.z = endPos.z;\n\n    function update(value) {\n      columbusViewMorph(startPos, endPos, value.time, camera.position);\n      columbusViewMorph(startDir, endDir, value.time, camera.direction);\n      columbusViewMorph(startUp, endUp, value.time, camera.up);\n      Cartesian3.cross(camera.direction, camera.up, camera.right);\n      Cartesian3.normalize(camera.right, camera.right);\n    }\n\n    var tween = scene.tweens.add({\n      duration: duration,\n      easingFunction: EasingFunction.QUARTIC_OUT,\n      startObject: {\n        time: 0.0\n      },\n      stopObject: {\n        time: 1.0\n      },\n      update: update,\n      complete: function complete() {\n        _complete5(transitioner);\n      }\n    });\n\n    transitioner._currentTweens.push(tween);\n  }\n\n  if (transitioner._morphToOrthographic) {\n    morph();\n  } else {\n    morphOrthographicToPerspective(transitioner, 0.0, cameraCV, morph);\n  }\n}\n\nfunction morphFrom3DToColumbusView(transitioner, duration, endCamera, _complete6) {\n  var scene = transitioner._scene;\n  var camera = scene.camera;\n  var startPos = Cartesian3.clone(camera.position, scratch3DToCVStartPos);\n  var startDir = Cartesian3.clone(camera.direction, scratch3DToCVStartDir);\n  var startUp = Cartesian3.clone(camera.up, scratch3DToCVStartUp);\n  var endPos = Cartesian3.clone(endCamera.position2D, scratch3DToCVEndPos);\n  var endDir = Cartesian3.clone(endCamera.direction2D, scratch3DToCVEndDir);\n  var endUp = Cartesian3.clone(endCamera.up2D, scratch3DToCVEndUp);\n\n  function update(value) {\n    columbusViewMorph(startPos, endPos, value.time, camera.position);\n    columbusViewMorph(startDir, endDir, value.time, camera.direction);\n    columbusViewMorph(startUp, endUp, value.time, camera.up);\n    Cartesian3.cross(camera.direction, camera.up, camera.right);\n    Cartesian3.normalize(camera.right, camera.right);\n\n    camera._adjustOrthographicFrustum(true);\n  }\n\n  var tween = scene.tweens.add({\n    duration: duration,\n    easingFunction: EasingFunction.QUARTIC_OUT,\n    startObject: {\n      time: 0.0\n    },\n    stopObject: {\n      time: 1.0\n    },\n    update: update,\n    complete: function complete() {\n      addMorphTimeAnimations(transitioner, scene, 1.0, 0.0, duration, _complete6);\n    }\n  });\n\n  transitioner._currentTweens.push(tween);\n}\n\nfunction addMorphTimeAnimations(transitioner, scene, start, stop, duration, complete) {\n  // Later, this will be linear and each object will adjust, if desired, in its vertex shader.\n  var options = {\n    object: scene,\n    property: \"morphTime\",\n    startValue: start,\n    stopValue: stop,\n    duration: duration,\n    easingFunction: EasingFunction.QUARTIC_OUT\n  };\n\n  if (defined(complete)) {\n    options.complete = function () {\n      complete(transitioner);\n    };\n  }\n\n  var tween = scene.tweens.addProperty(options);\n\n  transitioner._currentTweens.push(tween);\n}\n\nfunction complete3DCallback(camera3D) {\n  return function (transitioner) {\n    var scene = transitioner._scene;\n    scene._mode = SceneMode.SCENE3D;\n    scene.morphTime = SceneMode.getMorphTime(SceneMode.SCENE3D);\n    destroyMorphHandler(transitioner);\n    var camera = scene.camera;\n\n    if (transitioner._previousMode !== SceneMode.MORPHING || transitioner._morphCancelled) {\n      transitioner._morphCancelled = false;\n      Cartesian3.clone(camera3D.position, camera.position);\n      Cartesian3.clone(camera3D.direction, camera.direction);\n      Cartesian3.clone(camera3D.up, camera.up);\n      Cartesian3.cross(camera.direction, camera.up, camera.right);\n      Cartesian3.normalize(camera.right, camera.right);\n      camera.frustum = camera3D.frustum.clone();\n    }\n\n    var frustum = camera.frustum;\n\n    if (scene.frameState.useLogDepth) {\n      frustum.near = 0.1;\n      frustum.far = 10000000000.0;\n    }\n\n    var wasMorphing = defined(transitioner._completeMorph);\n    transitioner._completeMorph = undefined;\n    scene.camera.update(scene.mode);\n\n    transitioner._scene.morphComplete.raiseEvent(transitioner, transitioner._previousMode, SceneMode.SCENE3D, wasMorphing);\n  };\n}\n\nfunction complete2DCallback(camera2D) {\n  return function (transitioner) {\n    var scene = transitioner._scene;\n    scene._mode = SceneMode.SCENE2D;\n    scene.morphTime = SceneMode.getMorphTime(SceneMode.SCENE2D);\n    destroyMorphHandler(transitioner);\n    var camera = scene.camera;\n    Cartesian3.clone(camera2D.position, camera.position);\n    camera.position.z = scene.mapProjection.ellipsoid.maximumRadius * 2.0;\n    Cartesian3.clone(camera2D.direction, camera.direction);\n    Cartesian3.clone(camera2D.up, camera.up);\n    Cartesian3.cross(camera.direction, camera.up, camera.right);\n    Cartesian3.normalize(camera.right, camera.right);\n    camera.frustum = camera2D.frustum.clone();\n    var wasMorphing = defined(transitioner._completeMorph);\n    transitioner._completeMorph = undefined;\n    scene.camera.update(scene.mode);\n\n    transitioner._scene.morphComplete.raiseEvent(transitioner, transitioner._previousMode, SceneMode.SCENE2D, wasMorphing);\n  };\n}\n\nfunction completeColumbusViewCallback(cameraCV) {\n  return function (transitioner) {\n    var scene = transitioner._scene;\n    scene._mode = SceneMode.COLUMBUS_VIEW;\n    scene.morphTime = SceneMode.getMorphTime(SceneMode.COLUMBUS_VIEW);\n    destroyMorphHandler(transitioner);\n    var camera = scene.camera;\n\n    if (transitioner._previousModeMode !== SceneMode.MORPHING || transitioner._morphCancelled) {\n      transitioner._morphCancelled = false;\n      Cartesian3.clone(cameraCV.position, camera.position);\n      Cartesian3.clone(cameraCV.direction, camera.direction);\n      Cartesian3.clone(cameraCV.up, camera.up);\n      Cartesian3.cross(camera.direction, camera.up, camera.right);\n      Cartesian3.normalize(camera.right, camera.right);\n    }\n\n    var frustum = camera.frustum;\n\n    if (scene.frameState.useLogDepth) {\n      frustum.near = 0.1;\n      frustum.far = 10000000000.0;\n    }\n\n    var wasMorphing = defined(transitioner._completeMorph);\n    transitioner._completeMorph = undefined;\n    scene.camera.update(scene.mode);\n\n    transitioner._scene.morphComplete.raiseEvent(transitioner, transitioner._previousMode, SceneMode.COLUMBUS_VIEW, wasMorphing);\n  };\n}\n\nexport default SceneTransitioner;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterLevelReact/node_modules/cesium/Source/Scene/SceneTransitioner.js"],"names":["Cartesian3","Cartographic","Check","defined","destroyObject","EasingFunction","CesiumMath","Matrix4","OrthographicFrustum","OrthographicOffCenterFrustum","PerspectiveFrustum","Ray","ScreenSpaceEventHandler","ScreenSpaceEventType","Transforms","Camera","SceneMode","SceneTransitioner","scene","typeOf","object","_scene","_currentTweens","_morphHandler","undefined","_morphCancelled","_completeMorph","_morphToOrthographic","prototype","completeMorph","morphTo2D","duration","ellipsoid","_previousMode","mode","camera","frustum","SCENE2D","MORPHING","morphStart","raiseEvent","_mode","_setTransform","IDENTITY","COLUMBUS_VIEW","morphFromColumbusViewTo2D","morphFrom3DTo2D","scratchToCVPosition","scratchToCVDirection","scratchToCVUp","scratchToCVPosition2D","scratchToCVDirection2D","scratchToCVUp2D","scratchToCVSurfacePosition","scratchToCVCartographic","scratchToCVToENU","scratchToCVFrustumPerspective","scratchToCVFrustumOrthographic","scratchToCVCamera","position","direction","up","position2D","direction2D","up2D","morphToColumbusView","x","y","z","multiplyByScalar","normalize","maximumRadius","negate","cross","UNIT_X","clone","right","left","UNIT_Z","UNIT_Y","positionWC","directionWC","upWC","surfacePoint","scaleToGeodeticSurface","toENU","eastNorthUpToFixedFrame","inverseTransformation","mapProjection","project","cartesianToCartographic","multiplyByPointAsVector","width","aspectRatio","drawingBufferWidth","drawingBufferHeight","fov","toRadians","cameraCV","complete","completeColumbusViewCallback","createMorphHandler","morphFrom2DToColumbusView","multiplyByPoint","TRANSFORM_2D","morphFrom3DToColumbusView","scratchCVTo3DCamera","scratch2DTo3DFrustumPersp","morphTo3D","SCENE3D","morphFrom2DTo3D","camera3D","fromDegrees","getColumbusViewTo3DCamera","complete3DCallback","morphFromColumbusViewTo3D","isDestroyed","destroy","destroyMorphHandler","transitioner","completeMorphFunction","completeMorphOnUserInput","canvas","cancelFlight","setInputAction","LEFT_DOWN","MIDDLE_DOWN","RIGHT_DOWN","WHEEL","tweens","i","length","cancelTween","scratchCVTo3DCartographic","scratchCVTo3DSurfacePoint","scratchCVTo3DFromENU","positionCarto","unproject","cartographicToCartesian","fromENU","scratchCVTo3DStartPos","scratchCVTo3DStartDir","scratchCVTo3DStartUp","scratchCVTo3DEndPos","scratchCVTo3DEndDir","scratchCVTo3DEndUp","endCamera","startPos","startDir","startUp","endPos","TRANSFORM_2D_INVERSE","endDir","endUp","update","value","columbusViewMorph","time","tween","add","easingFunction","QUARTIC_OUT","startObject","stopObject","addMorphTimeAnimations","push","scratch2DTo3DFrustumOrtho","scratch3DToCVStartPos","scratch3DToCVStartDir","scratch3DToCVStartUp","scratch3DToCVEndPos","scratch3DToCVEndDir","scratch3DToCVEndUp","morph","morphOrthographicToPerspective","flyTo","destination","startPosition","endPosition","result","lerp","morphPerspectiveToOrthographic","updateHeight","startFOV","endFOV","RADIANS_PER_DEGREE","d","Math","tan","far","height","scratchCVTo2DStartPos","scratchCVTo2DStartDir","scratchCVTo2DStartUp","scratchCVTo2DEndPos","scratchCVTo2DEndDir","scratchCVTo2DEndUp","scratchCVTo2DFrustum","scratchCVTo2DRay","scratchCVTo2DPickPos","scratchCVTo2DCamera","ZERO","ray","origin","globe","pickPos","pickWorldCoordinates","distance","top","bottom","camera2D","complete2DCallback","updateCV","_adjustOrthographicFrustum","scratch3DTo2DCartographic","scratch3DTo2DCamera","scratch3DTo2DEndCamera","scratch3DTo2DPickPosition","scratch3DTo2DRay","scratch3DTo2DToENU","scratch3DTo2DSurfacePoint","rayDirection","pickedPos","completeCallback","start","stop","options","property","startValue","stopValue","addProperty","morphTime","getMorphTime","frameState","useLogDepth","near","wasMorphing","morphComplete","_previousModeMode"],"mappings":"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","sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport EasingFunction from \"../Core/EasingFunction.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport OrthographicFrustum from \"../Core/OrthographicFrustum.js\";\nimport OrthographicOffCenterFrustum from \"../Core/OrthographicOffCenterFrustum.js\";\nimport PerspectiveFrustum from \"../Core/PerspectiveFrustum.js\";\nimport Ray from \"../Core/Ray.js\";\nimport ScreenSpaceEventHandler from \"../Core/ScreenSpaceEventHandler.js\";\nimport ScreenSpaceEventType from \"../Core/ScreenSpaceEventType.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport Camera from \"./Camera.js\";\nimport SceneMode from \"./SceneMode.js\";\n\n/**\n * @private\n */\nfunction SceneTransitioner(scene) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"scene\", scene);\n  //>>includeEnd('debug');\n\n  this._scene = scene;\n  this._currentTweens = [];\n  this._morphHandler = undefined;\n  this._morphCancelled = false;\n  this._completeMorph = undefined;\n  this._morphToOrthographic = false;\n}\n\nSceneTransitioner.prototype.completeMorph = function () {\n  if (defined(this._completeMorph)) {\n    this._completeMorph();\n  }\n};\n\nSceneTransitioner.prototype.morphTo2D = function (duration, ellipsoid) {\n  if (defined(this._completeMorph)) {\n    this._completeMorph();\n  }\n\n  var scene = this._scene;\n  this._previousMode = scene.mode;\n  this._morphToOrthographic =\n    scene.camera.frustum instanceof OrthographicFrustum;\n\n  if (\n    this._previousMode === SceneMode.SCENE2D ||\n    this._previousMode === SceneMode.MORPHING\n  ) {\n    return;\n  }\n  this._scene.morphStart.raiseEvent(\n    this,\n    this._previousMode,\n    SceneMode.SCENE2D,\n    true\n  );\n\n  scene._mode = SceneMode.MORPHING;\n  scene.camera._setTransform(Matrix4.IDENTITY);\n\n  if (this._previousMode === SceneMode.COLUMBUS_VIEW) {\n    morphFromColumbusViewTo2D(this, duration);\n  } else {\n    morphFrom3DTo2D(this, duration, ellipsoid);\n  }\n\n  if (duration === 0.0 && defined(this._completeMorph)) {\n    this._completeMorph();\n  }\n};\n\nvar scratchToCVPosition = new Cartesian3();\nvar scratchToCVDirection = new Cartesian3();\nvar scratchToCVUp = new Cartesian3();\nvar scratchToCVPosition2D = new Cartesian3();\nvar scratchToCVDirection2D = new Cartesian3();\nvar scratchToCVUp2D = new Cartesian3();\nvar scratchToCVSurfacePosition = new Cartesian3();\nvar scratchToCVCartographic = new Cartographic();\nvar scratchToCVToENU = new Matrix4();\nvar scratchToCVFrustumPerspective = new PerspectiveFrustum();\nvar scratchToCVFrustumOrthographic = new OrthographicFrustum();\nvar scratchToCVCamera = {\n  position: undefined,\n  direction: undefined,\n  up: undefined,\n  position2D: undefined,\n  direction2D: undefined,\n  up2D: undefined,\n  frustum: undefined,\n};\n\nSceneTransitioner.prototype.morphToColumbusView = function (\n  duration,\n  ellipsoid\n) {\n  if (defined(this._completeMorph)) {\n    this._completeMorph();\n  }\n\n  var scene = this._scene;\n  this._previousMode = scene.mode;\n\n  if (\n    this._previousMode === SceneMode.COLUMBUS_VIEW ||\n    this._previousMode === SceneMode.MORPHING\n  ) {\n    return;\n  }\n  this._scene.morphStart.raiseEvent(\n    this,\n    this._previousMode,\n    SceneMode.COLUMBUS_VIEW,\n    true\n  );\n\n  scene.camera._setTransform(Matrix4.IDENTITY);\n\n  var position = scratchToCVPosition;\n  var direction = scratchToCVDirection;\n  var up = scratchToCVUp;\n\n  if (duration > 0.0) {\n    position.x = 0.0;\n    position.y = -1.0;\n    position.z = 1.0;\n    position = Cartesian3.multiplyByScalar(\n      Cartesian3.normalize(position, position),\n      5.0 * ellipsoid.maximumRadius,\n      position\n    );\n\n    Cartesian3.negate(Cartesian3.normalize(position, direction), direction);\n    Cartesian3.cross(Cartesian3.UNIT_X, direction, up);\n  } else {\n    var camera = scene.camera;\n    if (this._previousMode === SceneMode.SCENE2D) {\n      Cartesian3.clone(camera.position, position);\n      position.z = camera.frustum.right - camera.frustum.left;\n      Cartesian3.negate(Cartesian3.UNIT_Z, direction);\n      Cartesian3.clone(Cartesian3.UNIT_Y, up);\n    } else {\n      Cartesian3.clone(camera.positionWC, position);\n      Cartesian3.clone(camera.directionWC, direction);\n      Cartesian3.clone(camera.upWC, up);\n\n      var surfacePoint = ellipsoid.scaleToGeodeticSurface(\n        position,\n        scratchToCVSurfacePosition\n      );\n      var toENU = Transforms.eastNorthUpToFixedFrame(\n        surfacePoint,\n        ellipsoid,\n        scratchToCVToENU\n      );\n      Matrix4.inverseTransformation(toENU, toENU);\n\n      scene.mapProjection.project(\n        ellipsoid.cartesianToCartographic(position, scratchToCVCartographic),\n        position\n      );\n      Matrix4.multiplyByPointAsVector(toENU, direction, direction);\n      Matrix4.multiplyByPointAsVector(toENU, up, up);\n    }\n  }\n\n  var frustum;\n  if (this._morphToOrthographic) {\n    frustum = scratchToCVFrustumOrthographic;\n    frustum.width = scene.camera.frustum.right - scene.camera.frustum.left;\n    frustum.aspectRatio = scene.drawingBufferWidth / scene.drawingBufferHeight;\n  } else {\n    frustum = scratchToCVFrustumPerspective;\n    frustum.aspectRatio = scene.drawingBufferWidth / scene.drawingBufferHeight;\n    frustum.fov = CesiumMath.toRadians(60.0);\n  }\n\n  var cameraCV = scratchToCVCamera;\n  cameraCV.position = position;\n  cameraCV.direction = direction;\n  cameraCV.up = up;\n  cameraCV.frustum = frustum;\n\n  var complete = completeColumbusViewCallback(cameraCV);\n  createMorphHandler(this, complete);\n\n  if (this._previousMode === SceneMode.SCENE2D) {\n    morphFrom2DToColumbusView(this, duration, cameraCV, complete);\n  } else {\n    cameraCV.position2D = Matrix4.multiplyByPoint(\n      Camera.TRANSFORM_2D,\n      position,\n      scratchToCVPosition2D\n    );\n    cameraCV.direction2D = Matrix4.multiplyByPointAsVector(\n      Camera.TRANSFORM_2D,\n      direction,\n      scratchToCVDirection2D\n    );\n    cameraCV.up2D = Matrix4.multiplyByPointAsVector(\n      Camera.TRANSFORM_2D,\n      up,\n      scratchToCVUp2D\n    );\n\n    scene._mode = SceneMode.MORPHING;\n    morphFrom3DToColumbusView(this, duration, cameraCV, complete);\n  }\n\n  if (duration === 0.0 && defined(this._completeMorph)) {\n    this._completeMorph();\n  }\n};\n\nvar scratchCVTo3DCamera = {\n  position: new Cartesian3(),\n  direction: new Cartesian3(),\n  up: new Cartesian3(),\n  frustum: undefined,\n};\nvar scratch2DTo3DFrustumPersp = new PerspectiveFrustum();\n\nSceneTransitioner.prototype.morphTo3D = function (duration, ellipsoid) {\n  if (defined(this._completeMorph)) {\n    this._completeMorph();\n  }\n\n  var scene = this._scene;\n  this._previousMode = scene.mode;\n\n  if (\n    this._previousMode === SceneMode.SCENE3D ||\n    this._previousMode === SceneMode.MORPHING\n  ) {\n    return;\n  }\n  this._scene.morphStart.raiseEvent(\n    this,\n    this._previousMode,\n    SceneMode.SCENE3D,\n    true\n  );\n\n  scene._mode = SceneMode.MORPHING;\n  scene.camera._setTransform(Matrix4.IDENTITY);\n\n  if (this._previousMode === SceneMode.SCENE2D) {\n    morphFrom2DTo3D(this, duration, ellipsoid);\n  } else {\n    var camera3D;\n    if (duration > 0.0) {\n      camera3D = scratchCVTo3DCamera;\n      Cartesian3.fromDegrees(\n        0.0,\n        0.0,\n        5.0 * ellipsoid.maximumRadius,\n        ellipsoid,\n        camera3D.position\n      );\n      Cartesian3.negate(camera3D.position, camera3D.direction);\n      Cartesian3.normalize(camera3D.direction, camera3D.direction);\n      Cartesian3.clone(Cartesian3.UNIT_Z, camera3D.up);\n    } else {\n      camera3D = getColumbusViewTo3DCamera(this, ellipsoid);\n    }\n\n    var frustum;\n    var camera = scene.camera;\n    if (camera.frustum instanceof OrthographicFrustum) {\n      frustum = camera.frustum.clone();\n    } else {\n      frustum = scratch2DTo3DFrustumPersp;\n      frustum.aspectRatio =\n        scene.drawingBufferWidth / scene.drawingBufferHeight;\n      frustum.fov = CesiumMath.toRadians(60.0);\n    }\n    camera3D.frustum = frustum;\n\n    var complete = complete3DCallback(camera3D);\n    createMorphHandler(this, complete);\n\n    morphFromColumbusViewTo3D(this, duration, camera3D, complete);\n  }\n\n  if (duration === 0.0 && defined(this._completeMorph)) {\n    this._completeMorph();\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n */\nSceneTransitioner.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * transitioner = transitioner && transitioner.destroy();\n */\nSceneTransitioner.prototype.destroy = function () {\n  destroyMorphHandler(this);\n  return destroyObject(this);\n};\n\nfunction createMorphHandler(transitioner, completeMorphFunction) {\n  if (transitioner._scene.completeMorphOnUserInput) {\n    transitioner._morphHandler = new ScreenSpaceEventHandler(\n      transitioner._scene.canvas\n    );\n\n    var completeMorph = function () {\n      transitioner._morphCancelled = true;\n      transitioner._scene.camera.cancelFlight();\n      completeMorphFunction(transitioner);\n    };\n    transitioner._completeMorph = completeMorph;\n    transitioner._morphHandler.setInputAction(\n      completeMorph,\n      ScreenSpaceEventType.LEFT_DOWN\n    );\n    transitioner._morphHandler.setInputAction(\n      completeMorph,\n      ScreenSpaceEventType.MIDDLE_DOWN\n    );\n    transitioner._morphHandler.setInputAction(\n      completeMorph,\n      ScreenSpaceEventType.RIGHT_DOWN\n    );\n    transitioner._morphHandler.setInputAction(\n      completeMorph,\n      ScreenSpaceEventType.WHEEL\n    );\n  }\n}\n\nfunction destroyMorphHandler(transitioner) {\n  var tweens = transitioner._currentTweens;\n  for (var i = 0; i < tweens.length; ++i) {\n    tweens[i].cancelTween();\n  }\n  transitioner._currentTweens.length = 0;\n  transitioner._morphHandler =\n    transitioner._morphHandler && transitioner._morphHandler.destroy();\n}\n\nvar scratchCVTo3DCartographic = new Cartographic();\nvar scratchCVTo3DSurfacePoint = new Cartesian3();\nvar scratchCVTo3DFromENU = new Matrix4();\n\nfunction getColumbusViewTo3DCamera(transitioner, ellipsoid) {\n  var scene = transitioner._scene;\n  var camera = scene.camera;\n\n  var camera3D = scratchCVTo3DCamera;\n  var position = camera3D.position;\n  var direction = camera3D.direction;\n  var up = camera3D.up;\n\n  var positionCarto = scene.mapProjection.unproject(\n    camera.position,\n    scratchCVTo3DCartographic\n  );\n  ellipsoid.cartographicToCartesian(positionCarto, position);\n  var surfacePoint = ellipsoid.scaleToGeodeticSurface(\n    position,\n    scratchCVTo3DSurfacePoint\n  );\n\n  var fromENU = Transforms.eastNorthUpToFixedFrame(\n    surfacePoint,\n    ellipsoid,\n    scratchCVTo3DFromENU\n  );\n\n  Matrix4.multiplyByPointAsVector(fromENU, camera.direction, direction);\n  Matrix4.multiplyByPointAsVector(fromENU, camera.up, up);\n\n  return camera3D;\n}\n\nvar scratchCVTo3DStartPos = new Cartesian3();\nvar scratchCVTo3DStartDir = new Cartesian3();\nvar scratchCVTo3DStartUp = new Cartesian3();\nvar scratchCVTo3DEndPos = new Cartesian3();\nvar scratchCVTo3DEndDir = new Cartesian3();\nvar scratchCVTo3DEndUp = new Cartesian3();\n\nfunction morphFromColumbusViewTo3D(\n  transitioner,\n  duration,\n  endCamera,\n  complete\n) {\n  duration *= 0.5;\n\n  var scene = transitioner._scene;\n  var camera = scene.camera;\n\n  var startPos = Cartesian3.clone(camera.position, scratchCVTo3DStartPos);\n  var startDir = Cartesian3.clone(camera.direction, scratchCVTo3DStartDir);\n  var startUp = Cartesian3.clone(camera.up, scratchCVTo3DStartUp);\n\n  var endPos = Matrix4.multiplyByPoint(\n    Camera.TRANSFORM_2D_INVERSE,\n    endCamera.position,\n    scratchCVTo3DEndPos\n  );\n  var endDir = Matrix4.multiplyByPointAsVector(\n    Camera.TRANSFORM_2D_INVERSE,\n    endCamera.direction,\n    scratchCVTo3DEndDir\n  );\n  var endUp = Matrix4.multiplyByPointAsVector(\n    Camera.TRANSFORM_2D_INVERSE,\n    endCamera.up,\n    scratchCVTo3DEndUp\n  );\n\n  function update(value) {\n    columbusViewMorph(startPos, endPos, value.time, camera.position);\n    columbusViewMorph(startDir, endDir, value.time, camera.direction);\n    columbusViewMorph(startUp, endUp, value.time, camera.up);\n    Cartesian3.cross(camera.direction, camera.up, camera.right);\n    Cartesian3.normalize(camera.right, camera.right);\n  }\n\n  var tween = scene.tweens.add({\n    duration: duration,\n    easingFunction: EasingFunction.QUARTIC_OUT,\n    startObject: {\n      time: 0.0,\n    },\n    stopObject: {\n      time: 1.0,\n    },\n    update: update,\n    complete: function () {\n      addMorphTimeAnimations(transitioner, scene, 0.0, 1.0, duration, complete);\n    },\n  });\n  transitioner._currentTweens.push(tween);\n}\n\nvar scratch2DTo3DFrustumOrtho = new OrthographicFrustum();\nvar scratch3DToCVStartPos = new Cartesian3();\nvar scratch3DToCVStartDir = new Cartesian3();\nvar scratch3DToCVStartUp = new Cartesian3();\nvar scratch3DToCVEndPos = new Cartesian3();\nvar scratch3DToCVEndDir = new Cartesian3();\nvar scratch3DToCVEndUp = new Cartesian3();\n\nfunction morphFrom2DTo3D(transitioner, duration, ellipsoid) {\n  duration /= 3.0;\n\n  var scene = transitioner._scene;\n  var camera = scene.camera;\n\n  var camera3D;\n  if (duration > 0.0) {\n    camera3D = scratchCVTo3DCamera;\n    Cartesian3.fromDegrees(\n      0.0,\n      0.0,\n      5.0 * ellipsoid.maximumRadius,\n      ellipsoid,\n      camera3D.position\n    );\n    Cartesian3.negate(camera3D.position, camera3D.direction);\n    Cartesian3.normalize(camera3D.direction, camera3D.direction);\n    Cartesian3.clone(Cartesian3.UNIT_Z, camera3D.up);\n  } else {\n    camera.position.z = camera.frustum.right - camera.frustum.left;\n\n    camera3D = getColumbusViewTo3DCamera(transitioner, ellipsoid);\n  }\n\n  var frustum;\n  if (transitioner._morphToOrthographic) {\n    frustum = scratch2DTo3DFrustumOrtho;\n    frustum.aspectRatio = scene.drawingBufferWidth / scene.drawingBufferHeight;\n    frustum.width = camera.frustum.right - camera.frustum.left;\n  } else {\n    frustum = scratch2DTo3DFrustumPersp;\n    frustum.aspectRatio = scene.drawingBufferWidth / scene.drawingBufferHeight;\n    frustum.fov = CesiumMath.toRadians(60.0);\n  }\n\n  camera3D.frustum = frustum;\n\n  var complete = complete3DCallback(camera3D);\n  createMorphHandler(transitioner, complete);\n\n  var morph;\n  if (transitioner._morphToOrthographic) {\n    morph = function () {\n      morphFromColumbusViewTo3D(transitioner, duration, camera3D, complete);\n    };\n  } else {\n    morph = function () {\n      morphOrthographicToPerspective(\n        transitioner,\n        duration,\n        camera3D,\n        function () {\n          morphFromColumbusViewTo3D(transitioner, duration, camera3D, complete);\n        }\n      );\n    };\n  }\n\n  if (duration > 0.0) {\n    scene._mode = SceneMode.SCENE2D;\n    camera.flyTo({\n      duration: duration,\n      destination: Cartesian3.fromDegrees(\n        0.0,\n        0.0,\n        5.0 * ellipsoid.maximumRadius,\n        ellipsoid,\n        scratch3DToCVEndPos\n      ),\n      complete: function () {\n        scene._mode = SceneMode.MORPHING;\n        morph();\n      },\n    });\n  } else {\n    morph();\n  }\n}\n\nfunction columbusViewMorph(startPosition, endPosition, time, result) {\n  // Just linear for now.\n  return Cartesian3.lerp(startPosition, endPosition, time, result);\n}\n\nfunction morphPerspectiveToOrthographic(\n  transitioner,\n  duration,\n  endCamera,\n  updateHeight,\n  complete\n) {\n  var scene = transitioner._scene;\n  var camera = scene.camera;\n\n  if (camera.frustum instanceof OrthographicFrustum) {\n    return;\n  }\n\n  var startFOV = camera.frustum.fov;\n  var endFOV = CesiumMath.RADIANS_PER_DEGREE * 0.5;\n  var d = endCamera.position.z * Math.tan(startFOV * 0.5);\n  camera.frustum.far = d / Math.tan(endFOV * 0.5) + 10000000.0;\n\n  function update(value) {\n    camera.frustum.fov = CesiumMath.lerp(startFOV, endFOV, value.time);\n    var height = d / Math.tan(camera.frustum.fov * 0.5);\n    updateHeight(camera, height);\n  }\n  var tween = scene.tweens.add({\n    duration: duration,\n    easingFunction: EasingFunction.QUARTIC_OUT,\n    startObject: {\n      time: 0.0,\n    },\n    stopObject: {\n      time: 1.0,\n    },\n    update: update,\n    complete: function () {\n      camera.frustum = endCamera.frustum.clone();\n      complete(transitioner);\n    },\n  });\n  transitioner._currentTweens.push(tween);\n}\n\nvar scratchCVTo2DStartPos = new Cartesian3();\nvar scratchCVTo2DStartDir = new Cartesian3();\nvar scratchCVTo2DStartUp = new Cartesian3();\nvar scratchCVTo2DEndPos = new Cartesian3();\nvar scratchCVTo2DEndDir = new Cartesian3();\nvar scratchCVTo2DEndUp = new Cartesian3();\nvar scratchCVTo2DFrustum = new OrthographicOffCenterFrustum();\nvar scratchCVTo2DRay = new Ray();\nvar scratchCVTo2DPickPos = new Cartesian3();\nvar scratchCVTo2DCamera = {\n  position: undefined,\n  direction: undefined,\n  up: undefined,\n  frustum: undefined,\n};\n\nfunction morphFromColumbusViewTo2D(transitioner, duration) {\n  duration *= 0.5;\n\n  var scene = transitioner._scene;\n  var camera = scene.camera;\n\n  var startPos = Cartesian3.clone(camera.position, scratchCVTo2DStartPos);\n  var startDir = Cartesian3.clone(camera.direction, scratchCVTo2DStartDir);\n  var startUp = Cartesian3.clone(camera.up, scratchCVTo2DStartUp);\n\n  var endDir = Cartesian3.negate(Cartesian3.UNIT_Z, scratchCVTo2DEndDir);\n  var endUp = Cartesian3.clone(Cartesian3.UNIT_Y, scratchCVTo2DEndUp);\n\n  var endPos = scratchCVTo2DEndPos;\n\n  if (duration > 0.0) {\n    Cartesian3.clone(Cartesian3.ZERO, scratchCVTo2DEndPos);\n    endPos.z = 5.0 * scene.mapProjection.ellipsoid.maximumRadius;\n  } else {\n    Cartesian3.clone(startPos, scratchCVTo2DEndPos);\n\n    var ray = scratchCVTo2DRay;\n    Matrix4.multiplyByPoint(Camera.TRANSFORM_2D, startPos, ray.origin);\n    Matrix4.multiplyByPointAsVector(\n      Camera.TRANSFORM_2D,\n      startDir,\n      ray.direction\n    );\n\n    var globe = scene.globe;\n    if (defined(globe)) {\n      var pickPos = globe.pickWorldCoordinates(\n        ray,\n        scene,\n        scratchCVTo2DPickPos\n      );\n      if (defined(pickPos)) {\n        Matrix4.multiplyByPoint(Camera.TRANSFORM_2D_INVERSE, pickPos, endPos);\n        endPos.z += Cartesian3.distance(startPos, endPos);\n      }\n    }\n  }\n\n  var frustum = scratchCVTo2DFrustum;\n  frustum.right = endPos.z * 0.5;\n  frustum.left = -frustum.right;\n  frustum.top =\n    frustum.right * (scene.drawingBufferHeight / scene.drawingBufferWidth);\n  frustum.bottom = -frustum.top;\n\n  var camera2D = scratchCVTo2DCamera;\n  camera2D.position = endPos;\n  camera2D.direction = endDir;\n  camera2D.up = endUp;\n  camera2D.frustum = frustum;\n\n  var complete = complete2DCallback(camera2D);\n  createMorphHandler(transitioner, complete);\n\n  function updateCV(value) {\n    columbusViewMorph(startPos, endPos, value.time, camera.position);\n    columbusViewMorph(startDir, endDir, value.time, camera.direction);\n    columbusViewMorph(startUp, endUp, value.time, camera.up);\n    Cartesian3.cross(camera.direction, camera.up, camera.right);\n    Cartesian3.normalize(camera.right, camera.right);\n    camera._adjustOrthographicFrustum(true);\n  }\n\n  function updateHeight(camera, height) {\n    camera.position.z = height;\n  }\n\n  var tween = scene.tweens.add({\n    duration: duration,\n    easingFunction: EasingFunction.QUARTIC_OUT,\n    startObject: {\n      time: 0.0,\n    },\n    stopObject: {\n      time: 1.0,\n    },\n    update: updateCV,\n    complete: function () {\n      morphPerspectiveToOrthographic(\n        transitioner,\n        duration,\n        camera2D,\n        updateHeight,\n        complete\n      );\n    },\n  });\n  transitioner._currentTweens.push(tween);\n}\n\nvar scratch3DTo2DCartographic = new Cartographic();\nvar scratch3DTo2DCamera = {\n  position: new Cartesian3(),\n  direction: new Cartesian3(),\n  up: new Cartesian3(),\n  position2D: new Cartesian3(),\n  direction2D: new Cartesian3(),\n  up2D: new Cartesian3(),\n  frustum: new OrthographicOffCenterFrustum(),\n};\nvar scratch3DTo2DEndCamera = {\n  position: new Cartesian3(),\n  direction: new Cartesian3(),\n  up: new Cartesian3(),\n  frustum: undefined,\n};\nvar scratch3DTo2DPickPosition = new Cartesian3();\nvar scratch3DTo2DRay = new Ray();\nvar scratch3DTo2DToENU = new Matrix4();\nvar scratch3DTo2DSurfacePoint = new Cartesian3();\n\nfunction morphFrom3DTo2D(transitioner, duration, ellipsoid) {\n  duration *= 0.5;\n\n  var scene = transitioner._scene;\n  var camera = scene.camera;\n  var camera2D = scratch3DTo2DCamera;\n\n  if (duration > 0.0) {\n    Cartesian3.clone(Cartesian3.ZERO, camera2D.position);\n    camera2D.position.z = 5.0 * ellipsoid.maximumRadius;\n    Cartesian3.negate(Cartesian3.UNIT_Z, camera2D.direction);\n    Cartesian3.clone(Cartesian3.UNIT_Y, camera2D.up);\n  } else {\n    ellipsoid.cartesianToCartographic(\n      camera.positionWC,\n      scratch3DTo2DCartographic\n    );\n    scene.mapProjection.project(scratch3DTo2DCartographic, camera2D.position);\n\n    Cartesian3.negate(Cartesian3.UNIT_Z, camera2D.direction);\n    Cartesian3.clone(Cartesian3.UNIT_Y, camera2D.up);\n\n    var ray = scratch3DTo2DRay;\n    Cartesian3.clone(camera2D.position2D, ray.origin);\n    var rayDirection = Cartesian3.clone(camera.directionWC, ray.direction);\n    var surfacePoint = ellipsoid.scaleToGeodeticSurface(\n      camera.positionWC,\n      scratch3DTo2DSurfacePoint\n    );\n    var toENU = Transforms.eastNorthUpToFixedFrame(\n      surfacePoint,\n      ellipsoid,\n      scratch3DTo2DToENU\n    );\n    Matrix4.inverseTransformation(toENU, toENU);\n    Matrix4.multiplyByPointAsVector(toENU, rayDirection, rayDirection);\n    Matrix4.multiplyByPointAsVector(\n      Camera.TRANSFORM_2D,\n      rayDirection,\n      rayDirection\n    );\n\n    var globe = scene.globe;\n    if (defined(globe)) {\n      var pickedPos = globe.pickWorldCoordinates(\n        ray,\n        scene,\n        scratch3DTo2DPickPosition\n      );\n      if (defined(pickedPos)) {\n        var height = Cartesian3.distance(camera2D.position2D, pickedPos);\n        pickedPos.x += height;\n        Cartesian3.clone(pickedPos, camera2D.position2D);\n      }\n    }\n  }\n\n  function updateHeight(camera, height) {\n    camera.position.x = height;\n  }\n\n  Matrix4.multiplyByPoint(\n    Camera.TRANSFORM_2D,\n    camera2D.position,\n    camera2D.position2D\n  );\n  Matrix4.multiplyByPointAsVector(\n    Camera.TRANSFORM_2D,\n    camera2D.direction,\n    camera2D.direction2D\n  );\n  Matrix4.multiplyByPointAsVector(\n    Camera.TRANSFORM_2D,\n    camera2D.up,\n    camera2D.up2D\n  );\n\n  var frustum = camera2D.frustum;\n  frustum.right = camera2D.position.z * 0.5;\n  frustum.left = -frustum.right;\n  frustum.top =\n    frustum.right * (scene.drawingBufferHeight / scene.drawingBufferWidth);\n  frustum.bottom = -frustum.top;\n\n  var endCamera = scratch3DTo2DEndCamera;\n  Matrix4.multiplyByPoint(\n    Camera.TRANSFORM_2D_INVERSE,\n    camera2D.position2D,\n    endCamera.position\n  );\n  Cartesian3.clone(camera2D.direction, endCamera.direction);\n  Cartesian3.clone(camera2D.up, endCamera.up);\n  endCamera.frustum = frustum;\n\n  var complete = complete2DCallback(endCamera);\n  createMorphHandler(transitioner, complete);\n\n  function completeCallback() {\n    morphPerspectiveToOrthographic(\n      transitioner,\n      duration,\n      camera2D,\n      updateHeight,\n      complete\n    );\n  }\n  morphFrom3DToColumbusView(transitioner, duration, camera2D, completeCallback);\n}\n\nfunction morphOrthographicToPerspective(\n  transitioner,\n  duration,\n  cameraCV,\n  complete\n) {\n  var scene = transitioner._scene;\n  var camera = scene.camera;\n\n  var height = camera.frustum.right - camera.frustum.left;\n  camera.frustum = cameraCV.frustum.clone();\n\n  var endFOV = camera.frustum.fov;\n  var startFOV = CesiumMath.RADIANS_PER_DEGREE * 0.5;\n  var d = height * Math.tan(endFOV * 0.5);\n  camera.frustum.far = d / Math.tan(startFOV * 0.5) + 10000000.0;\n  camera.frustum.fov = startFOV;\n\n  function update(value) {\n    camera.frustum.fov = CesiumMath.lerp(startFOV, endFOV, value.time);\n    camera.position.z = d / Math.tan(camera.frustum.fov * 0.5);\n  }\n  var tween = scene.tweens.add({\n    duration: duration,\n    easingFunction: EasingFunction.QUARTIC_OUT,\n    startObject: {\n      time: 0.0,\n    },\n    stopObject: {\n      time: 1.0,\n    },\n    update: update,\n    complete: function () {\n      complete(transitioner);\n    },\n  });\n  transitioner._currentTweens.push(tween);\n}\n\nfunction morphFrom2DToColumbusView(transitioner, duration, cameraCV, complete) {\n  duration *= 0.5;\n\n  var scene = transitioner._scene;\n  var camera = scene.camera;\n\n  var endPos = Cartesian3.clone(cameraCV.position, scratch3DToCVEndPos);\n  var endDir = Cartesian3.clone(cameraCV.direction, scratch3DToCVEndDir);\n  var endUp = Cartesian3.clone(cameraCV.up, scratch3DToCVEndUp);\n\n  scene._mode = SceneMode.MORPHING;\n\n  function morph() {\n    camera.frustum = cameraCV.frustum.clone();\n\n    var startPos = Cartesian3.clone(camera.position, scratch3DToCVStartPos);\n    var startDir = Cartesian3.clone(camera.direction, scratch3DToCVStartDir);\n    var startUp = Cartesian3.clone(camera.up, scratch3DToCVStartUp);\n    startPos.z = endPos.z;\n\n    function update(value) {\n      columbusViewMorph(startPos, endPos, value.time, camera.position);\n      columbusViewMorph(startDir, endDir, value.time, camera.direction);\n      columbusViewMorph(startUp, endUp, value.time, camera.up);\n      Cartesian3.cross(camera.direction, camera.up, camera.right);\n      Cartesian3.normalize(camera.right, camera.right);\n    }\n    var tween = scene.tweens.add({\n      duration: duration,\n      easingFunction: EasingFunction.QUARTIC_OUT,\n      startObject: {\n        time: 0.0,\n      },\n      stopObject: {\n        time: 1.0,\n      },\n      update: update,\n      complete: function () {\n        complete(transitioner);\n      },\n    });\n    transitioner._currentTweens.push(tween);\n  }\n\n  if (transitioner._morphToOrthographic) {\n    morph();\n  } else {\n    morphOrthographicToPerspective(transitioner, 0.0, cameraCV, morph);\n  }\n}\n\nfunction morphFrom3DToColumbusView(\n  transitioner,\n  duration,\n  endCamera,\n  complete\n) {\n  var scene = transitioner._scene;\n  var camera = scene.camera;\n\n  var startPos = Cartesian3.clone(camera.position, scratch3DToCVStartPos);\n  var startDir = Cartesian3.clone(camera.direction, scratch3DToCVStartDir);\n  var startUp = Cartesian3.clone(camera.up, scratch3DToCVStartUp);\n\n  var endPos = Cartesian3.clone(endCamera.position2D, scratch3DToCVEndPos);\n  var endDir = Cartesian3.clone(endCamera.direction2D, scratch3DToCVEndDir);\n  var endUp = Cartesian3.clone(endCamera.up2D, scratch3DToCVEndUp);\n\n  function update(value) {\n    columbusViewMorph(startPos, endPos, value.time, camera.position);\n    columbusViewMorph(startDir, endDir, value.time, camera.direction);\n    columbusViewMorph(startUp, endUp, value.time, camera.up);\n    Cartesian3.cross(camera.direction, camera.up, camera.right);\n    Cartesian3.normalize(camera.right, camera.right);\n    camera._adjustOrthographicFrustum(true);\n  }\n  var tween = scene.tweens.add({\n    duration: duration,\n    easingFunction: EasingFunction.QUARTIC_OUT,\n    startObject: {\n      time: 0.0,\n    },\n    stopObject: {\n      time: 1.0,\n    },\n    update: update,\n    complete: function () {\n      addMorphTimeAnimations(transitioner, scene, 1.0, 0.0, duration, complete);\n    },\n  });\n  transitioner._currentTweens.push(tween);\n}\n\nfunction addMorphTimeAnimations(\n  transitioner,\n  scene,\n  start,\n  stop,\n  duration,\n  complete\n) {\n  // Later, this will be linear and each object will adjust, if desired, in its vertex shader.\n  var options = {\n    object: scene,\n    property: \"morphTime\",\n    startValue: start,\n    stopValue: stop,\n    duration: duration,\n    easingFunction: EasingFunction.QUARTIC_OUT,\n  };\n\n  if (defined(complete)) {\n    options.complete = function () {\n      complete(transitioner);\n    };\n  }\n\n  var tween = scene.tweens.addProperty(options);\n  transitioner._currentTweens.push(tween);\n}\n\nfunction complete3DCallback(camera3D) {\n  return function (transitioner) {\n    var scene = transitioner._scene;\n    scene._mode = SceneMode.SCENE3D;\n    scene.morphTime = SceneMode.getMorphTime(SceneMode.SCENE3D);\n\n    destroyMorphHandler(transitioner);\n\n    var camera = scene.camera;\n    if (\n      transitioner._previousMode !== SceneMode.MORPHING ||\n      transitioner._morphCancelled\n    ) {\n      transitioner._morphCancelled = false;\n\n      Cartesian3.clone(camera3D.position, camera.position);\n      Cartesian3.clone(camera3D.direction, camera.direction);\n      Cartesian3.clone(camera3D.up, camera.up);\n      Cartesian3.cross(camera.direction, camera.up, camera.right);\n      Cartesian3.normalize(camera.right, camera.right);\n\n      camera.frustum = camera3D.frustum.clone();\n    }\n\n    var frustum = camera.frustum;\n    if (scene.frameState.useLogDepth) {\n      frustum.near = 0.1;\n      frustum.far = 10000000000.0;\n    }\n\n    var wasMorphing = defined(transitioner._completeMorph);\n    transitioner._completeMorph = undefined;\n    scene.camera.update(scene.mode);\n    transitioner._scene.morphComplete.raiseEvent(\n      transitioner,\n      transitioner._previousMode,\n      SceneMode.SCENE3D,\n      wasMorphing\n    );\n  };\n}\n\nfunction complete2DCallback(camera2D) {\n  return function (transitioner) {\n    var scene = transitioner._scene;\n\n    scene._mode = SceneMode.SCENE2D;\n    scene.morphTime = SceneMode.getMorphTime(SceneMode.SCENE2D);\n\n    destroyMorphHandler(transitioner);\n\n    var camera = scene.camera;\n    Cartesian3.clone(camera2D.position, camera.position);\n    camera.position.z = scene.mapProjection.ellipsoid.maximumRadius * 2.0;\n    Cartesian3.clone(camera2D.direction, camera.direction);\n    Cartesian3.clone(camera2D.up, camera.up);\n    Cartesian3.cross(camera.direction, camera.up, camera.right);\n    Cartesian3.normalize(camera.right, camera.right);\n    camera.frustum = camera2D.frustum.clone();\n\n    var wasMorphing = defined(transitioner._completeMorph);\n    transitioner._completeMorph = undefined;\n    scene.camera.update(scene.mode);\n    transitioner._scene.morphComplete.raiseEvent(\n      transitioner,\n      transitioner._previousMode,\n      SceneMode.SCENE2D,\n      wasMorphing\n    );\n  };\n}\n\nfunction completeColumbusViewCallback(cameraCV) {\n  return function (transitioner) {\n    var scene = transitioner._scene;\n    scene._mode = SceneMode.COLUMBUS_VIEW;\n    scene.morphTime = SceneMode.getMorphTime(SceneMode.COLUMBUS_VIEW);\n\n    destroyMorphHandler(transitioner);\n\n    var camera = scene.camera;\n    if (\n      transitioner._previousModeMode !== SceneMode.MORPHING ||\n      transitioner._morphCancelled\n    ) {\n      transitioner._morphCancelled = false;\n\n      Cartesian3.clone(cameraCV.position, camera.position);\n      Cartesian3.clone(cameraCV.direction, camera.direction);\n      Cartesian3.clone(cameraCV.up, camera.up);\n      Cartesian3.cross(camera.direction, camera.up, camera.right);\n      Cartesian3.normalize(camera.right, camera.right);\n    }\n\n    var frustum = camera.frustum;\n    if (scene.frameState.useLogDepth) {\n      frustum.near = 0.1;\n      frustum.far = 10000000000.0;\n    }\n\n    var wasMorphing = defined(transitioner._completeMorph);\n    transitioner._completeMorph = undefined;\n    scene.camera.update(scene.mode);\n    transitioner._scene.morphComplete.raiseEvent(\n      transitioner,\n      transitioner._previousMode,\n      SceneMode.COLUMBUS_VIEW,\n      wasMorphing\n    );\n  };\n}\nexport default SceneTransitioner;\n"]},"metadata":{},"sourceType":"module"}