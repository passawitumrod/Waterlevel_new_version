{"ast":null,"code":"import measureText from \"../ThirdParty/measureText.js\";\nimport Color from \"./Color.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nvar imageSmoothingEnabledName;\n/**\n * Writes the given text into a new canvas.  The canvas will be sized to fit the text.\n * If text is blank, returns undefined.\n *\n * @param {String} text The text to write.\n * @param {Object} [options] Object with the following properties:\n * @param {String} [options.font='10px sans-serif'] The CSS font to use.\n * @param {String} [options.textBaseline='bottom'] The baseline of the text.\n * @param {Boolean} [options.fill=true] Whether to fill the text.\n * @param {Boolean} [options.stroke=false] Whether to stroke the text.\n * @param {Color} [options.fillColor=Color.WHITE] The fill color.\n * @param {Color} [options.strokeColor=Color.BLACK] The stroke color.\n * @param {Number} [options.strokeWidth=1] The stroke width.\n * @param {Color} [options.backgroundColor=Color.TRANSPARENT] The background color of the canvas.\n * @param {Number} [options.padding=0] The pixel size of the padding to add around the text.\n * @returns {Canvas} A new canvas with the given text drawn into it.  The dimensions object\n *                   from measureText will also be added to the returned canvas. If text is\n *                   blank, returns undefined.\n * @exports writeTextToCanvas\n */\n\nfunction writeTextToCanvas(text, options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(text)) {\n    throw new DeveloperError(\"text is required.\");\n  } //>>includeEnd('debug');\n\n\n  if (text === \"\") {\n    return undefined;\n  }\n\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var font = defaultValue(options.font, \"10px sans-serif\");\n  var stroke = defaultValue(options.stroke, false);\n  var fill = defaultValue(options.fill, true);\n  var strokeWidth = defaultValue(options.strokeWidth, 1);\n  var backgroundColor = defaultValue(options.backgroundColor, Color.TRANSPARENT);\n  var padding = defaultValue(options.padding, 0);\n  var doublePadding = padding * 2.0;\n  var canvas = document.createElement(\"canvas\");\n  canvas.width = 1;\n  canvas.height = 1;\n  canvas.style.font = font;\n  var context2D = canvas.getContext(\"2d\");\n\n  if (!defined(imageSmoothingEnabledName)) {\n    if (defined(context2D.imageSmoothingEnabled)) {\n      imageSmoothingEnabledName = \"imageSmoothingEnabled\";\n    } else if (defined(context2D.mozImageSmoothingEnabled)) {\n      imageSmoothingEnabledName = \"mozImageSmoothingEnabled\";\n    } else if (defined(context2D.webkitImageSmoothingEnabled)) {\n      imageSmoothingEnabledName = \"webkitImageSmoothingEnabled\";\n    } else if (defined(context2D.msImageSmoothingEnabled)) {\n      imageSmoothingEnabledName = \"msImageSmoothingEnabled\";\n    }\n  }\n\n  context2D.font = font;\n  context2D.lineJoin = \"round\";\n  context2D.lineWidth = strokeWidth;\n  context2D[imageSmoothingEnabledName] = false; // textBaseline needs to be set before the measureText call. It won't work otherwise.\n  // It's magic.\n\n  context2D.textBaseline = defaultValue(options.textBaseline, \"bottom\"); // in order for measureText to calculate style, the canvas has to be\n  // (temporarily) added to the DOM.\n\n  canvas.style.visibility = \"hidden\";\n  document.body.appendChild(canvas);\n  var dimensions = measureText(context2D, text, stroke, fill);\n  canvas.dimensions = dimensions;\n  document.body.removeChild(canvas);\n  canvas.style.visibility = \"\"; //Some characters, such as the letter j, have a non-zero starting position.\n  //This value is used for kerning later, but we need to take it into account\n  //now in order to draw the text completely on the canvas\n\n  var x = -dimensions.bounds.minx; //Expand the width to include the starting position.\n\n  var width = Math.ceil(dimensions.width) + x + doublePadding; //While the height of the letter is correct, we need to adjust\n  //where we start drawing it so that letters like j and y properly dip\n  //below the line.\n\n  var height = dimensions.height + doublePadding;\n  var baseline = height - dimensions.ascent + padding;\n  var y = height - baseline + doublePadding;\n  canvas.width = width;\n  canvas.height = height; // Properties must be explicitly set again after changing width and height\n\n  context2D.font = font;\n  context2D.lineJoin = \"round\";\n  context2D.lineWidth = strokeWidth;\n  context2D[imageSmoothingEnabledName] = false; // Draw background\n\n  if (backgroundColor !== Color.TRANSPARENT) {\n    context2D.fillStyle = backgroundColor.toCssColorString();\n    context2D.fillRect(0, 0, canvas.width, canvas.height);\n  }\n\n  if (stroke) {\n    var strokeColor = defaultValue(options.strokeColor, Color.BLACK);\n    context2D.strokeStyle = strokeColor.toCssColorString();\n    context2D.strokeText(text, x + padding, y);\n  }\n\n  if (fill) {\n    var fillColor = defaultValue(options.fillColor, Color.WHITE);\n    context2D.fillStyle = fillColor.toCssColorString();\n    context2D.fillText(text, x + padding, y);\n  }\n\n  return canvas;\n}\n\nexport default writeTextToCanvas;","map":{"version":3,"sources":["C:/Users/passa/Desktop/WaterDeployTrial/node_modules/cesium/Source/Core/writeTextToCanvas.js"],"names":["measureText","Color","defaultValue","defined","DeveloperError","imageSmoothingEnabledName","writeTextToCanvas","text","options","undefined","EMPTY_OBJECT","font","stroke","fill","strokeWidth","backgroundColor","TRANSPARENT","padding","doublePadding","canvas","document","createElement","width","height","style","context2D","getContext","imageSmoothingEnabled","mozImageSmoothingEnabled","webkitImageSmoothingEnabled","msImageSmoothingEnabled","lineJoin","lineWidth","textBaseline","visibility","body","appendChild","dimensions","removeChild","x","bounds","minx","Math","ceil","baseline","ascent","y","fillStyle","toCssColorString","fillRect","strokeColor","BLACK","strokeStyle","strokeText","fillColor","WHITE","fillText"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,8BAAxB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AAEA,IAAIC,yBAAJ;AAEA;;;;;;;;;;;;;;;;;;;;;AAoBA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiCC,OAAjC,EAA0C;AACxC;AACA,MAAI,CAACL,OAAO,CAACI,IAAD,CAAZ,EAAoB;AAClB,UAAM,IAAIH,cAAJ,CAAmB,mBAAnB,CAAN;AACD,GAJuC,CAKxC;;;AACA,MAAIG,IAAI,KAAK,EAAb,EAAiB;AACf,WAAOE,SAAP;AACD;;AAEDD,EAAAA,OAAO,GAAGN,YAAY,CAACM,OAAD,EAAUN,YAAY,CAACQ,YAAvB,CAAtB;AACA,MAAIC,IAAI,GAAGT,YAAY,CAACM,OAAO,CAACG,IAAT,EAAe,iBAAf,CAAvB;AACA,MAAIC,MAAM,GAAGV,YAAY,CAACM,OAAO,CAACI,MAAT,EAAiB,KAAjB,CAAzB;AACA,MAAIC,IAAI,GAAGX,YAAY,CAACM,OAAO,CAACK,IAAT,EAAe,IAAf,CAAvB;AACA,MAAIC,WAAW,GAAGZ,YAAY,CAACM,OAAO,CAACM,WAAT,EAAsB,CAAtB,CAA9B;AACA,MAAIC,eAAe,GAAGb,YAAY,CAChCM,OAAO,CAACO,eADwB,EAEhCd,KAAK,CAACe,WAF0B,CAAlC;AAIA,MAAIC,OAAO,GAAGf,YAAY,CAACM,OAAO,CAACS,OAAT,EAAkB,CAAlB,CAA1B;AACA,MAAIC,aAAa,GAAGD,OAAO,GAAG,GAA9B;AAEA,MAAIE,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACAF,EAAAA,MAAM,CAACG,KAAP,GAAe,CAAf;AACAH,EAAAA,MAAM,CAACI,MAAP,GAAgB,CAAhB;AACAJ,EAAAA,MAAM,CAACK,KAAP,CAAab,IAAb,GAAoBA,IAApB;AAEA,MAAIc,SAAS,GAAGN,MAAM,CAACO,UAAP,CAAkB,IAAlB,CAAhB;;AAEA,MAAI,CAACvB,OAAO,CAACE,yBAAD,CAAZ,EAAyC;AACvC,QAAIF,OAAO,CAACsB,SAAS,CAACE,qBAAX,CAAX,EAA8C;AAC5CtB,MAAAA,yBAAyB,GAAG,uBAA5B;AACD,KAFD,MAEO,IAAIF,OAAO,CAACsB,SAAS,CAACG,wBAAX,CAAX,EAAiD;AACtDvB,MAAAA,yBAAyB,GAAG,0BAA5B;AACD,KAFM,MAEA,IAAIF,OAAO,CAACsB,SAAS,CAACI,2BAAX,CAAX,EAAoD;AACzDxB,MAAAA,yBAAyB,GAAG,6BAA5B;AACD,KAFM,MAEA,IAAIF,OAAO,CAACsB,SAAS,CAACK,uBAAX,CAAX,EAAgD;AACrDzB,MAAAA,yBAAyB,GAAG,yBAA5B;AACD;AACF;;AAEDoB,EAAAA,SAAS,CAACd,IAAV,GAAiBA,IAAjB;AACAc,EAAAA,SAAS,CAACM,QAAV,GAAqB,OAArB;AACAN,EAAAA,SAAS,CAACO,SAAV,GAAsBlB,WAAtB;AACAW,EAAAA,SAAS,CAACpB,yBAAD,CAAT,GAAuC,KAAvC,CA5CwC,CA8CxC;AACA;;AACAoB,EAAAA,SAAS,CAACQ,YAAV,GAAyB/B,YAAY,CAACM,OAAO,CAACyB,YAAT,EAAuB,QAAvB,CAArC,CAhDwC,CAkDxC;AACA;;AACAd,EAAAA,MAAM,CAACK,KAAP,CAAaU,UAAb,GAA0B,QAA1B;AACAd,EAAAA,QAAQ,CAACe,IAAT,CAAcC,WAAd,CAA0BjB,MAA1B;AAEA,MAAIkB,UAAU,GAAGrC,WAAW,CAACyB,SAAD,EAAYlB,IAAZ,EAAkBK,MAAlB,EAA0BC,IAA1B,CAA5B;AACAM,EAAAA,MAAM,CAACkB,UAAP,GAAoBA,UAApB;AAEAjB,EAAAA,QAAQ,CAACe,IAAT,CAAcG,WAAd,CAA0BnB,MAA1B;AACAA,EAAAA,MAAM,CAACK,KAAP,CAAaU,UAAb,GAA0B,EAA1B,CA3DwC,CA6DxC;AACA;AACA;;AACA,MAAIK,CAAC,GAAG,CAACF,UAAU,CAACG,MAAX,CAAkBC,IAA3B,CAhEwC,CAkExC;;AACA,MAAInB,KAAK,GAAGoB,IAAI,CAACC,IAAL,CAAUN,UAAU,CAACf,KAArB,IAA8BiB,CAA9B,GAAkCrB,aAA9C,CAnEwC,CAqExC;AACA;AACA;;AAEA,MAAIK,MAAM,GAAGc,UAAU,CAACd,MAAX,GAAoBL,aAAjC;AACA,MAAI0B,QAAQ,GAAGrB,MAAM,GAAGc,UAAU,CAACQ,MAApB,GAA6B5B,OAA5C;AACA,MAAI6B,CAAC,GAAGvB,MAAM,GAAGqB,QAAT,GAAoB1B,aAA5B;AAEAC,EAAAA,MAAM,CAACG,KAAP,GAAeA,KAAf;AACAH,EAAAA,MAAM,CAACI,MAAP,GAAgBA,MAAhB,CA9EwC,CAgFxC;;AACAE,EAAAA,SAAS,CAACd,IAAV,GAAiBA,IAAjB;AACAc,EAAAA,SAAS,CAACM,QAAV,GAAqB,OAArB;AACAN,EAAAA,SAAS,CAACO,SAAV,GAAsBlB,WAAtB;AACAW,EAAAA,SAAS,CAACpB,yBAAD,CAAT,GAAuC,KAAvC,CApFwC,CAsFxC;;AACA,MAAIU,eAAe,KAAKd,KAAK,CAACe,WAA9B,EAA2C;AACzCS,IAAAA,SAAS,CAACsB,SAAV,GAAsBhC,eAAe,CAACiC,gBAAhB,EAAtB;AACAvB,IAAAA,SAAS,CAACwB,QAAV,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB9B,MAAM,CAACG,KAAhC,EAAuCH,MAAM,CAACI,MAA9C;AACD;;AAED,MAAIX,MAAJ,EAAY;AACV,QAAIsC,WAAW,GAAGhD,YAAY,CAACM,OAAO,CAAC0C,WAAT,EAAsBjD,KAAK,CAACkD,KAA5B,CAA9B;AACA1B,IAAAA,SAAS,CAAC2B,WAAV,GAAwBF,WAAW,CAACF,gBAAZ,EAAxB;AACAvB,IAAAA,SAAS,CAAC4B,UAAV,CAAqB9C,IAArB,EAA2BgC,CAAC,GAAGtB,OAA/B,EAAwC6B,CAAxC;AACD;;AAED,MAAIjC,IAAJ,EAAU;AACR,QAAIyC,SAAS,GAAGpD,YAAY,CAACM,OAAO,CAAC8C,SAAT,EAAoBrD,KAAK,CAACsD,KAA1B,CAA5B;AACA9B,IAAAA,SAAS,CAACsB,SAAV,GAAsBO,SAAS,CAACN,gBAAV,EAAtB;AACAvB,IAAAA,SAAS,CAAC+B,QAAV,CAAmBjD,IAAnB,EAAyBgC,CAAC,GAAGtB,OAA7B,EAAsC6B,CAAtC;AACD;;AAED,SAAO3B,MAAP;AACD;;AACD,eAAeb,iBAAf","sourcesContent":["import measureText from \"../ThirdParty/measureText.js\";\nimport Color from \"./Color.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\nvar imageSmoothingEnabledName;\n\n/**\n * Writes the given text into a new canvas.  The canvas will be sized to fit the text.\n * If text is blank, returns undefined.\n *\n * @param {String} text The text to write.\n * @param {Object} [options] Object with the following properties:\n * @param {String} [options.font='10px sans-serif'] The CSS font to use.\n * @param {String} [options.textBaseline='bottom'] The baseline of the text.\n * @param {Boolean} [options.fill=true] Whether to fill the text.\n * @param {Boolean} [options.stroke=false] Whether to stroke the text.\n * @param {Color} [options.fillColor=Color.WHITE] The fill color.\n * @param {Color} [options.strokeColor=Color.BLACK] The stroke color.\n * @param {Number} [options.strokeWidth=1] The stroke width.\n * @param {Color} [options.backgroundColor=Color.TRANSPARENT] The background color of the canvas.\n * @param {Number} [options.padding=0] The pixel size of the padding to add around the text.\n * @returns {Canvas} A new canvas with the given text drawn into it.  The dimensions object\n *                   from measureText will also be added to the returned canvas. If text is\n *                   blank, returns undefined.\n * @exports writeTextToCanvas\n */\nfunction writeTextToCanvas(text, options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(text)) {\n    throw new DeveloperError(\"text is required.\");\n  }\n  //>>includeEnd('debug');\n  if (text === \"\") {\n    return undefined;\n  }\n\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var font = defaultValue(options.font, \"10px sans-serif\");\n  var stroke = defaultValue(options.stroke, false);\n  var fill = defaultValue(options.fill, true);\n  var strokeWidth = defaultValue(options.strokeWidth, 1);\n  var backgroundColor = defaultValue(\n    options.backgroundColor,\n    Color.TRANSPARENT\n  );\n  var padding = defaultValue(options.padding, 0);\n  var doublePadding = padding * 2.0;\n\n  var canvas = document.createElement(\"canvas\");\n  canvas.width = 1;\n  canvas.height = 1;\n  canvas.style.font = font;\n\n  var context2D = canvas.getContext(\"2d\");\n\n  if (!defined(imageSmoothingEnabledName)) {\n    if (defined(context2D.imageSmoothingEnabled)) {\n      imageSmoothingEnabledName = \"imageSmoothingEnabled\";\n    } else if (defined(context2D.mozImageSmoothingEnabled)) {\n      imageSmoothingEnabledName = \"mozImageSmoothingEnabled\";\n    } else if (defined(context2D.webkitImageSmoothingEnabled)) {\n      imageSmoothingEnabledName = \"webkitImageSmoothingEnabled\";\n    } else if (defined(context2D.msImageSmoothingEnabled)) {\n      imageSmoothingEnabledName = \"msImageSmoothingEnabled\";\n    }\n  }\n\n  context2D.font = font;\n  context2D.lineJoin = \"round\";\n  context2D.lineWidth = strokeWidth;\n  context2D[imageSmoothingEnabledName] = false;\n\n  // textBaseline needs to be set before the measureText call. It won't work otherwise.\n  // It's magic.\n  context2D.textBaseline = defaultValue(options.textBaseline, \"bottom\");\n\n  // in order for measureText to calculate style, the canvas has to be\n  // (temporarily) added to the DOM.\n  canvas.style.visibility = \"hidden\";\n  document.body.appendChild(canvas);\n\n  var dimensions = measureText(context2D, text, stroke, fill);\n  canvas.dimensions = dimensions;\n\n  document.body.removeChild(canvas);\n  canvas.style.visibility = \"\";\n\n  //Some characters, such as the letter j, have a non-zero starting position.\n  //This value is used for kerning later, but we need to take it into account\n  //now in order to draw the text completely on the canvas\n  var x = -dimensions.bounds.minx;\n\n  //Expand the width to include the starting position.\n  var width = Math.ceil(dimensions.width) + x + doublePadding;\n\n  //While the height of the letter is correct, we need to adjust\n  //where we start drawing it so that letters like j and y properly dip\n  //below the line.\n\n  var height = dimensions.height + doublePadding;\n  var baseline = height - dimensions.ascent + padding;\n  var y = height - baseline + doublePadding;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  // Properties must be explicitly set again after changing width and height\n  context2D.font = font;\n  context2D.lineJoin = \"round\";\n  context2D.lineWidth = strokeWidth;\n  context2D[imageSmoothingEnabledName] = false;\n\n  // Draw background\n  if (backgroundColor !== Color.TRANSPARENT) {\n    context2D.fillStyle = backgroundColor.toCssColorString();\n    context2D.fillRect(0, 0, canvas.width, canvas.height);\n  }\n\n  if (stroke) {\n    var strokeColor = defaultValue(options.strokeColor, Color.BLACK);\n    context2D.strokeStyle = strokeColor.toCssColorString();\n    context2D.strokeText(text, x + padding, y);\n  }\n\n  if (fill) {\n    var fillColor = defaultValue(options.fillColor, Color.WHITE);\n    context2D.fillStyle = fillColor.toCssColorString();\n    context2D.fillText(text, x + padding, y);\n  }\n\n  return canvas;\n}\nexport default writeTextToCanvas;\n"]},"metadata":{},"sourceType":"module"}